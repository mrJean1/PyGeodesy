test/run.py typical test results (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W default)

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testAlbers.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersError from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualArea from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualArea2 from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualArea4 from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualAreaCylindrical from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualAreaNorth from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualAreaSouth from .albers by testAlbers.py line 11
# lazily imported pygeodesy.Datums from .datums by testAlbers.py line 11
# lazily imported pygeodesy.fstr from .streprs by testAlbers.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testAlbers.py line 11

    testing testAlbers.py 23.09.28 (module pygeodesy.albers 24.06.11) isLazy=3
    test 1 name: Karney_example
    test 2 datum: WGS84
    test 3 ellipsoid: WGS84
    test 4 lat0: 40.451991337063
    test 5 scale0: 0.999959500363
    test 6 equatoradius: 6378137.000000000000
    test 7 flattening: 0.003352810665
    test 8 _sign: 1.000000000000
    test 9 _m02: 0.580681094922
    test 10 _n0: 0.648810669236
    test 11 _txi0: 0.848822476849
    test 12 iteration: 3
    test 13 ispolar: False
    test 14 forward: -5675721.76113533, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745  FAILED, KNOWN, expected -5675721.76113534, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745
    test 15 reverse: -5675721.76113533, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745  FAILED, KNOWN, expected -5675721.76113534, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745
    test 16 forward: 199089.12574012, -53115.52801838, 39.95, 2.33, 1.51160641, 0.99999745
    test 17 reverse: 199089.12574012, -53115.52801838, 39.95, -75.17, 1.51160641, 0.99999745  FAILED, KNOWN, expected 199089.12574012, -53115.52801838, 39.95, 2.33, 1.51160641, 0.99999745
    test 18 reverse: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808
    test 19 forward: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808
    test 20 reverse: 220000.0, -53000.0, 39.94581132, -74.92536638, 1.67031446, 0.99999808
    test 21 forward: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808  FAILED, KNOWN, expected 220000.0, -53000.0, 39.94581132, -74.92536638, 1.67031446, 0.99999808

    testPage292(pygeodesy.albers, 24.06.11)
    test 22 name: Snyder_p292
    test 23 datum: NAD27
    test 24 ellipsoid: Clarke1866
    test 25 lat0: 37.934543880726
    test 26 scale0: 0.990309187872
    test 27 equatoradius: 6378206.400000000373
    test 28 flattening: 0.003390075304
    test 29 _sign: 1.000000000000
    test 30 _m02: 0.623664507732
    test 31 _n0: 0.614760830736
    test 32 _txi0: 0.775925617021
    test 33 iteration: 4
    test 34 ispolar: False
    test 35 forward: -6105839.22928149, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461  FAILED, KNOWN, expected -6105839.22928148, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461
    test 36 reverse: -6105839.22928149, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461  FAILED, KNOWN, expected -6105839.22928148, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461
    test 37 forward: 1885472.72581347, -119505.66687765, 35.0, 21.0, 12.66097351, 0.99155461  FAILED, KNOWN, expected 1885472.72581347, -119505.66687766, 35.0, 21.0, 12.66097351, 0.99155461
    test 38 reverse: 1885472.72581347, -119505.66687765, 35.0, -75.0, 12.66097351, 0.99155461  FAILED, KNOWN, expected 1885472.72581347, -119505.66687766, 35.0, 21.0, 12.66097351, 0.99155461
    test 39 reverse: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109
    test 40 forward: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109
    test 41 reverse: 1885427.7, 1535925.0, 49.40436665, -70.06998617, 15.63329611, 1.01436109
    test 42 forward: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109  FAILED, KNOWN, expected 1885427.7, 1535925.0, 49.40436665, -70.06998617, 15.63329611, 1.01436109

    testTable15(pygeodesy.albers, 24.06.11)
    test 43 52 k: 1.02863
    test 44 50 k: 1.01727
    test 45 45.5 k: 1.00000
    test 46 45 k: 0.99869
    test 47 40 k: 0.99097
    test 48 35 k: 0.99155
    test 49 30 k: 0.99893
    test 50 29.5 k: 1.00000
    test 51 25 k: 1.01222
    test 52 22 k: 1.02283

    testLats(pygeodesy.albers, 24.06.11)
    test 53 AlbersEqualArea.toRepr: AlbersEqualArea(45.0, k0=1.0)
    test 54 AlbersEqualArea.lat0: 45.0
    test 55 AlbersEqualArea.lat1: 45.0
    test 56 AlbersEqualArea.lat2: 45.0

    test 57 AlbersEqualArea2.toRepr: AlbersEqualArea2(40.0, 40.0, k1=1.0)
    test 58 AlbersEqualArea2.lat0: 40.0
    test 59 AlbersEqualArea2.lat1: 40.0
    test 60 AlbersEqualArea2.lat2: 40.0

    test 61 AlbersEqualArea4.toRepr: AlbersEqualArea4(30.0, 30.0, k1=1.0)
    test 62 AlbersEqualArea4.lat0: 30.0
    test 63 AlbersEqualArea4.lat1: 30.0
    test 64 AlbersEqualArea4.lat2: 30.0

    test 65 AlbersEqualArea4.toRepr: AlbersEqualArea4(-30.0, -30.0, k1=1.0)
    test 66 AlbersEqualArea4.lat0: -30.0
    test 67 AlbersEqualArea4.lat1: -30.0
    test 68 AlbersEqualArea4.lat2: -30.0

    test 69 AlbersEqualAreaCylindrical.toRepr: AlbersEqualAreaCylindrical(0.0)
    test 70 AlbersEqualAreaCylindrical.lat0: 0.0
    test 71 AlbersEqualAreaCylindrical.lat1: 0.0
    test 72 AlbersEqualAreaCylindrical.lat2: 0.0

    test 73 AlbersEqualAreaNorth.toRepr: AlbersEqualAreaNorth(90.0)
    test 74 AlbersEqualAreaNorth.lat0: 90.0
    test 75 AlbersEqualAreaNorth.lat1: 90.0
    test 76 AlbersEqualAreaNorth.lat2: 90.0

    test 77 AlbersEqualAreaSouth.toRepr: AlbersEqualAreaSouth(-90.0)
    test 78 AlbersEqualAreaSouth.lat0: -90.0
    test 79 AlbersEqualAreaSouth.lat1: -90.0
    test 80 AlbersEqualAreaSouth.lat2: -90.0

    test 81 error: clat1 (-0.8660254037844387) or clat2 (1.0): negative
    test 82 error: slat1 (-0.5) or slat2 (0.5): negative

    9 of 82 testAlbers.py tests (11.0%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 19.938 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testAuxilats.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.PI_2 from .constants by testAuxilats.py line 11
# lazily imported pygeodesy.PI_4 from .constants by testAuxilats.py line 11
# lazily imported pygeodesy.Fsum from .fsums by testAuxilats.py line 11
# lazily imported pygeodesy.fsum from .fsums by testAuxilats.py line 11
# lazily imported pygeodesy.sincos2 from .utily by testAuxilats.py line 11

    testing testAuxilats.py 23.08.16 (module pygeodesy.auxilats 24.06.16) isLazy=3

    test 1 Aux: 4
    test 2 Aux: 4
    test 3 Aux: 4
    test 4 Aux: 4
    test 5 Aux: 4
    test 6 Aux: 4
    test 7 Aux: 4
    test 8 Aux: 4
    test 9 Aux: 4
    test 10 Aux: 4
    test 11 Aux: 4
    test 12 Aux: 4
    test 13 Aux: 4
    test 14 Aux: 4
    test 15 Aux: 4
    test 16 Aux: 4
    test 17 Aux: 4
    test 18 Aux: 4
    test 19 Aux: 4
    test 20 Aux: 4
    test 21 Aux: 4
    test 22 Aux: 4
    test 23 Aux: 4
    test 24 Aux: 4
    test 25 Aux: 4
    test 26 Aux: 4
    test 27 Aux: 4
    test 28 Aux: 4
    test 29 Aux: 4
    test 30 Aux: 4
    test 31 Aux: 4
    test 32 Aux: 4
    test 33 Aux: 4
    test 34 Aux: 4
    test 35 Aux: 4
    test 36 Aux: 4
    test 37 Aux: 4

    test 38 Aux: 6
    test 39 Aux: 6
    test 40 Aux: 6
    test 41 Aux: 6
    test 42 Aux: 6
    test 43 Aux: 6
    test 44 Aux: 6
    test 45 Aux: 6
    test 46 Aux: 6
    test 47 Aux: 6
    test 48 Aux: 6
    test 49 Aux: 6
    test 50 Aux: 6
    test 51 Aux: 6
    test 52 Aux: 6
    test 53 Aux: 6
    test 54 Aux: 6
    test 55 Aux: 6
    test 56 Aux: 6
    test 57 Aux: 6
    test 58 Aux: 6
    test 59 Aux: 6
    test 60 Aux: 6
    test 61 Aux: 6
    test 62 Aux: 6
    test 63 Aux: 6
    test 64 Aux: 6
    test 65 Aux: 6
    test 66 Aux: 6
    test 67 Aux: 6
    test 68 Aux: 6
    test 69 Aux: 6
    test 70 Aux: 6
    test 71 Aux: 6
    test 72 Aux: 6
    test 73 Aux: 6
    test 74 Aux: 6

    test 75 Aux: 8
    test 76 Aux: 8
    test 77 Aux: 8
    test 78 Aux: 8
    test 79 Aux: 8
    test 80 Aux: 8
    test 81 Aux: 8
    test 82 Aux: 8
    test 83 Aux: 8
    test 84 Aux: 8
    test 85 Aux: 8
    test 86 Aux: 8
    test 87 Aux: 8
    test 88 Aux: 8
    test 89 Aux: 8
    test 90 Aux: 8
    test 91 Aux: 8
    test 92 Aux: 8
    test 93 Aux: 8
    test 94 Aux: 8
    test 95 Aux: 8
    test 96 Aux: 8
    test 97 Aux: 8
    test 98 Aux: 8
    test 99 Aux: 8
    test 100 Aux: 8
    test 101 Aux: 8
    test 102 Aux: 8
    test 103 Aux: 8
    test 104 Aux: 8
    test 105 Aux: 8
    test 106 Aux: 8
    test 107 Aux: 8
    test 108 Aux: 8
    test 109 Aux: 8
    test 110 Aux: 8
    test 111 Aux: 8

    test 112  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 113  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 114  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 115  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 116  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 117  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 118  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 119  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 120  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 121  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 122  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 123  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 124  3 3.010073740960 Phi(tan=0.0525841, x=0.99862, y=0.0525115): 0.052407779283
    test 125  3 3.000000000000 Beta(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283
    test 126  3 2.989959849669 Theta(tan=0.0522321, x=0.998639, y=0.052161): 0.052407779283
    test 127  3 2.994969445313 Mu(tan=0.0523197, x=0.998634, y=0.0522483): 0.052407779283
    test 128  3 2.989959911139 Chi(tan=0.0522321, x=0.998639, y=0.052161): 0.052407779283
    test 129  3 2.996643580080 Xi(tan=0.052349, x=0.998633, y=0.0522775): 0.052407779283

    test 130  3 3.010073740960 Phi(tan=0.0525841, x=0.99863, y=0.052512): 0.052407779283
    test 131  3 3.000000000000 Beta(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283
    test 132  3 2.989959849669 Theta(tan=0.0522321, x=0.99863, y=0.0521605): 0.052407779283
    test 133  3 2.994969445313 Mu(tan=0.0523197, x=0.998634, y=0.0522483), iteration=3: 0.052407779283
    test 134  3 2.989959911139 Chi(tan=0.0522321, x=1.0, y=0.0522321), iteration=3: 0.052407779283
    test 135  3 2.996643580080 Xi(tan=0.052349, x=2.00623, y=0.105024), iteration=3: 0.052407779283

    test 136  6 6.020036559448 Phi(tan=0.105458, x=0.994485, y=0.104876): 0.105104235266
    test 137  6 6.000000000000 Beta(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266
    test 138  6 5.980029153726 Theta(tan=0.104752, x=0.994558, y=0.104182): 0.105104235266
    test 139  6 5.989994075340 Mu(tan=0.104928, x=0.99454, y=0.104355): 0.105104235266
    test 140  6 5.980029641472 Chi(tan=0.104752, x=0.994558, y=0.104182): 0.105104235266
    test 141  6 5.993324019595 Xi(tan=0.104986, x=0.994534, y=0.104413): 0.105104235266

    test 142  6 6.020036559448 Phi(tan=0.105458, x=0.994522, y=0.10488): 0.105104235266
    test 143  6 6.000000000000 Beta(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266
    test 144  6 5.980029153726 Theta(tan=0.104752, x=0.994522, y=0.104178): 0.105104235266
    test 145  6 5.989994075340 Mu(tan=0.104928, x=0.99454, y=0.104355), iteration=2: 0.105104235266
    test 146  6 5.980029641472 Chi(tan=0.104752, x=1.0, y=0.104752), iteration=3: 0.105104235266
    test 147  6 5.993324019595 Xi(tan=0.104986, x=1.998, y=0.209763), iteration=3: 0.105104235266

    test 148  9 9.029778772560 Phi(tan=0.158917, x=0.987607, y=0.156948): 0.158384440325
    test 149  9 9.000000000000 Beta(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325
    test 150  9 8.970316191157 Theta(tan=0.157853, x=0.987769, y=0.155923): 0.158384440325
    test 151  9 8.985128467162 Mu(tan=0.158118, x=0.987729, y=0.156178): 0.158384440325
    test 152  9 8.970317814928 Chi(tan=0.157853, x=0.987769, y=0.155923): 0.158384440325
    test 153  9 8.990077770379 Xi(tan=0.158207, x=0.987715, y=0.156263): 0.158384440325

    test 154  9 9.029778772560 Phi(tan=0.158917, x=0.987688, y=0.156961): 0.158384440325
    test 155  9 9.000000000000 Beta(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325
    test 156  9 8.970316191157 Theta(tan=0.157853, x=0.987688, y=0.15591): 0.158384440325
    test 157  9 8.985128467162 Mu(tan=0.158118, x=0.987729, y=0.156178), iteration=2: 0.158384440325
    test 158  9 8.970317814928 Chi(tan=0.157853, x=1.0, y=0.157853), iteration=2: 0.158384440325
    test 159  9 8.990077770379 Xi(tan=0.158207, x=1.9843, y=0.31393), iteration=3: 0.158384440325

    test 160 12 12.039193161869 Phi(tan=0.213272, x=0.978005, y=0.208581): 0.212556561670
    test 161 12 12.000000000000 Beta(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670
    test 162 12 11.960926901992 Theta(tan=0.211844, x=0.978289, y=0.207245): 0.212556561670
    test 163 12 11.980425989378 Mu(tan=0.2122, x=0.978219, y=0.207578): 0.212556561670
    test 164 12 11.960930677646 Chi(tan=0.211844, x=0.978289, y=0.207245): 0.212556561670
    test 165 12 11.986940473695 Xi(tan=0.212318, x=0.978195, y=0.207689): 0.212556561670

    test 166 12 12.039193161869 Phi(tan=0.213272, x=0.978148, y=0.208611): 0.212556561670
    test 167 12 12.000000000000 Beta(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670
    test 168 12 11.960926901992 Theta(tan=0.211844, x=0.978148, y=0.207215): 0.212556561670
    test 169 12 11.980425989378 Mu(tan=0.2122, x=0.978219, y=0.207578), iteration=3: 0.212556561670
    test 170 12 11.960930677646 Chi(tan=0.211844, x=1.0, y=0.211844), iteration=3: 0.212556561670
    test 171 12 11.986940473695 Xi(tan=0.212318, x=1.96517, y=0.417243), iteration=3: 0.212556561670

    test 172 15 15.048176169243 Phi(tan=0.268851, x=0.965708, y=0.259631): 0.267949192431
    test 173 15 15.000000000000 Beta(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431
    test 174 15 14.951963747366 Theta(tan=0.267051, x=0.966142, y=0.258009): 0.267949192431
    test 175 15 14.975938214762 Mu(tan=0.267499, x=0.966034, y=0.258413): 0.267949192431
    test 176 15 14.951970940842 Chi(tan=0.267051, x=0.966142, y=0.258009): 0.267949192431
    test 177 15 14.983946566471 Xi(tan=0.267649, x=0.965998, y=0.258548): 0.267949192431

    test 178 15 15.048176169243 Phi(tan=0.268851, x=0.965926, y=0.25969): 0.267949192431
    test 179 15 15.000000000000 Beta(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431
    test 180 15 14.951963747366 Theta(tan=0.267051, x=0.965926, y=0.257951): 0.267949192431
    test 181 15 14.975938214762 Mu(tan=0.267499, x=0.966034, y=0.258413), iteration=3: 0.267949192431
    test 182 15 14.951970940842 Chi(tan=0.267051, x=1.0, y=0.267051), iteration=3: 0.267949192431
    test 183 15 14.983946566471 Xi(tan=0.267649, x=1.94067, y=0.519419), iteration=3: 0.267949192431

    test 184 18 18.056629049516 Phi(tan=0.326013, x=0.950751, y=0.309957): 0.324919696233
    test 185 18 18.000000000000 Beta(tan=0.32492, x=0.951057, y=0.309017): 0.324919696233
    test 186 18 17.943524604789 Theta(tan=0.32383, x=0.951361, y=0.308079): 0.324919696233
    test 187 18 17.971714352971 Mu(tan=0.324374, x=0.951209, y=0.308547): 0.324919696233
    test 188 18 17.943536661420 Chi(tan=0.323831, x=0.951361, y=0.30808): 0.324919696233
    test 189 18 17.981128901196 Xi(tan=0.324556, x=0.951158, y=0.308704): 0.324919696233

    test 190 18 18.056629049516 Phi(tan=0.326013, x=0.951057, y=0.310057): 0.324919696233
    test 191 18 18.000000000000 Beta(tan=0.32492, x=0.951057, y=0.309017): 0.324919696233
    test 192 18 17.943524604789 Theta(tan=0.32383, x=0.951057, y=0.307981): 0.324919696233
    test 193 18 17.971714352971 Mu(tan=0.324374, x=0.951209, y=0.308547), iteration=3: 0.324919696233
    test 194 18 17.943536661420 Chi(tan=0.323831, x=1.0, y=0.323831), iteration=3: 0.324919696233
    test 195 18 17.981128901196 Xi(tan=0.324556, x=1.91086, y=0.62018), iteration=2: 0.324919696233

    test 196 21 21.064458966605 Phi(tan=0.385155, x=0.933177, y=0.359418): 0.383864035035
    test 197 21 21.000000000000 Beta(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 198 21 20.935701709947 Theta(tan=0.382577, x=0.933982, y=0.35732): 0.383864035035
    test 199 21 20.967800709613 Mu(tan=0.383219, x=0.933782, y=0.357843): 0.383864035035
    test 200 21 20.935720172355 Chi(tan=0.382577, x=0.933982, y=0.35732): 0.383864035035
    test 201 21 20.978518383767 Xi(tan=0.383434, x=0.933715, y=0.358018): 0.383864035035

    test 202 21 21.064458966605 Phi(tan=0.385155, x=0.93358, y=0.359574): 0.383864035035
    test 203 21 21.000000000000 Beta(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 204 21 20.935701709947 Theta(tan=0.382577, x=0.93358, y=0.357166): 0.383864035035
    test 205 21 20.967800709613 Mu(tan=0.383219, x=0.933782, y=0.357843), iteration=3: 0.383864035035
    test 206 21 20.935720172355 Chi(tan=0.382577, x=1.0, y=0.382577), iteration=3: 0.383864035035
    test 207 21 20.978518383767 Xi(tan=0.383434, x=1.87581, y=0.719251), iteration=2: 0.383864035035

    test 208 24 24.071580020440 Phi(tan=0.446726, x=0.913037, y=0.407878): 0.445228685309
    test 209 24 24.000000000000 Beta(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309
    test 210 24 23.928580656019 Theta(tan=0.443736, x=0.914052, y=0.405598): 0.445228685309
    test 211 24 23.964240177686 Mu(tan=0.444481, x=0.913799, y=0.406166): 0.445228685309
    test 212 24 23.928607074340 Chi(tan=0.443736, x=0.914052, y=0.405598): 0.445228685309
    test 213 24 23.976143633352 Xi(tan=0.44473, x=0.913715, y=0.406356): 0.445228685309

    test 214 24 24.071580020440 Phi(tan=0.446726, x=0.913545, y=0.408105): 0.445228685309
    test 215 24 24.000000000000 Beta(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309
    test 216 24 23.928580656019 Theta(tan=0.443736, x=0.913545, y=0.405373): 0.445228685309
    test 217 24 23.964240177686 Mu(tan=0.444481, x=0.913799, y=0.406166), iteration=3: 0.445228685309
    test 218 24 23.928607074340 Chi(tan=0.443736, x=1.0, y=0.443736), iteration=2: 0.445228685309
    test 219 24 23.976143633352 Xi(tan=0.44473, x=1.83563, y=0.816362), iteration=3: 0.445228685309

    test 220 27 27.077914193009 Phi(tan=0.51124, x=0.890388, y=0.455202): 0.509525449494
    test 221 27 27.000000000000 Beta(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494
    test 222 27 26.922239461028 Theta(tan=0.507817, x=0.891622, y=0.452781): 0.509525449494
    test 223 27 26.961071767014 Mu(tan=0.50867, x=0.891315, y=0.453385): 0.509525449494
    test 224 27 26.922275299619 Chi(tan=0.507818, x=0.891622, y=0.452781): 0.509525449494
    test 225 27 26.974030668060 Xi(tan=0.508955, x=0.891212, y=0.453587): 0.509525449494

    test 226 27 27.077914193009 Phi(tan=0.51124, x=0.891007, y=0.455518): 0.509525449494
    test 227 27 27.000000000000 Beta(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494
    test 228 27 26.922239461028 Theta(tan=0.507817, x=0.891007, y=0.452468): 0.509525449494
    test 229 27 26.961071767014 Mu(tan=0.50867, x=0.891315, y=0.453385), iteration=2: 0.509525449494
    test 230 27 26.922275299619 Chi(tan=0.507818, x=1.0, y=0.507818), iteration=2: 0.509525449494
    test 231 27 26.974030668060 Xi(tan=0.508955, x=1.79043, y=0.911246), iteration=2: 0.509525449494

    test 232 30 30.083392202979 Phi(tan=0.579293, x=0.865297, y=0.50126): 0.577350269190
    test 233 30 30.000000000000 Beta(tan=0.57735, x=0.866025, y=0.5): 0.577350269190
    test 234 30 29.916747713236 Theta(tan=0.575415, x=0.866751, y=0.498741): 0.577350269190
    test 235 30 29.958330176858 Mu(tan=0.576381, x=0.866389, y=0.49937): 0.577350269190
    test 236 30 29.916794258180 Chi(tan=0.575416, x=0.866751, y=0.498742): 0.577350269190
    test 237 30 29.972202619898 Xi(tan=0.576704, x=0.866268, y=0.49958): 0.577350269190

    test 238 30 30.083392202979 Phi(tan=0.579293, x=0.866025, y=0.501682): 0.577350269190
    test 239 30 30.000000000000 Beta(tan=0.57735, x=0.866025, y=0.5): 0.577350269190
    test 240 30 29.916747713236 Theta(tan=0.575415, x=0.866025, y=0.498324): 0.577350269190
    test 241 30 29.958330176858 Mu(tan=0.576381, x=0.866389, y=0.49937), iteration=2: 0.577350269190
    test 242 30 29.916794258180 Chi(tan=0.575416, x=1.0, y=0.575416), iteration=2: 0.577350269190
    test 243 30 29.972202619898 Xi(tan=0.576704, x=1.74031, y=1.00365), iteration=3: 0.577350269190

    test 244 33 33.087954259505 Phi(tan=0.651592, x=0.837834, y=0.545926): 0.649407593198
    test 245 33 33.000000000000 Beta(tan=0.649408, x=0.838671, y=0.544639): 0.649407593198
    test 246 33 32.912165803903 Theta(tan=0.64723, x=0.839505, y=0.543353): 0.649407593198
    test 247 33 32.956045416382 Mu(tan=0.648317, x=0.839088, y=0.543995): 0.649407593198
    test 248 33 32.912224075655 Chi(tan=0.647232, x=0.839504, y=0.543354): 0.649407593198
    test 249 33 32.970679482129 Xi(tan=0.64868, x=0.838949, y=0.54421): 0.649407593198

    test 250 33 33.087954259505 Phi(tan=0.651592, x=0.838671, y=0.546471): 0.649407593198
    test 251 33 33.000000000000 Beta(tan=0.649408, x=0.838671, y=0.544639): 0.649407593198
    test 252 33 32.912165803903 Theta(tan=0.64723, x=0.838671, y=0.542813): 0.649407593198
    test 253 33 32.956045416382 Mu(tan=0.648317, x=0.839088, y=0.543995), iteration=3: 0.649407593198
    test 254 33 32.912224075655 Chi(tan=0.647232, x=1.0, y=0.647232), iteration=3: 0.649407593198
    test 255 33 32.970679482129 Xi(tan=0.64868, x=1.68543, y=1.09331), iteration=3: 0.649407593198

    test 256 36 36.091550707249 Phi(tan=0.728987, x=0.808077, y=0.589077): 0.726542528005
    test 257 36 36.000000000000 Beta(tan=0.726543, x=0.809017, y=0.587785): 0.726542528005
    test 258 36 35.908544256035 Theta(tan=0.724107, x=0.809954, y=0.586493): 0.726542528005
    test 259 36 35.954242477114 Mu(tan=0.725323, x=0.809486, y=0.587139): 0.726542528005
    test 260 36 35.908614931360 Chi(tan=0.724108, x=0.809953, y=0.586494): 0.726542528005
    test 261 36 35.969477891774 Xi(tan=0.725729, x=0.80933, y=0.587354): 0.726542528005

    test 262 36 36.091550707249 Phi(tan=0.728987, x=0.809017, y=0.589763): 0.726542528005
    test 263 36 36.000000000000 Beta(tan=0.726543, x=0.809017, y=0.587785): 0.726542528005
    test 264 36 35.908544256035 Theta(tan=0.724107, x=0.809017, y=0.585815): 0.726542528005
    test 265 36 35.954242477114 Mu(tan=0.725323, x=0.809486, y=0.587139), iteration=2: 0.726542528005
    test 266 36 35.908614931360 Chi(tan=0.724108, x=1.0, y=0.724108), iteration=2: 0.726542528005
    test 267 36 35.969477891774 Xi(tan=0.725729, x=1.62593, y=1.17998), iteration=2: 0.726542528005

    test 268 39 39.094142555964 Phi(tan=0.812508, x=0.776111, y=0.630596): 0.809784033195
    test 269 39 39.000000000000 Beta(tan=0.809784, x=0.777146, y=0.62932): 0.809784033195
    test 270 39 38.905923156872 Theta(tan=0.807069, x=0.778178, y=0.628044): 0.809784033195
    test 271 39 38.952941060922 Mu(tan=0.808425, x=0.777663, y=0.628682): 0.809784033195
    test 272 39 38.906006503846 Chi(tan=0.807071, x=0.778177, y=0.628045): 0.809784033195
    test 273 39 38.968610949565 Xi(tan=0.808877, x=0.777491, y=0.628895): 0.809784033195

    test 274 39 39.094142555964 Phi(tan=0.812508, x=0.777146, y=0.631437): 0.809784033195
    test 275 39 39.000000000000 Beta(tan=0.809784, x=0.777146, y=0.62932): 0.809784033195
    test 276 39 38.905923156872 Theta(tan=0.807069, x=0.777146, y=0.62721): 0.809784033195
    test 277 39 38.952941060922 Mu(tan=0.808425, x=0.777663, y=0.628682), iteration=3: 0.809784033195
    test 278 39 38.906006503846 Chi(tan=0.807071, x=1.0, y=0.807071), iteration=3: 0.809784033195
    test 279 39 38.968610949565 Xi(tan=0.808877, x=1.56196, y=1.26344), iteration=3: 0.809784033195

    test 280 42 42.095701889505 Phi(tan=0.903433, x=0.742026, y=0.670371): 0.900404044298
    test 281 42 42.000000000000 Beta(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 282 42 41.904331700939 Theta(tan=0.897385, x=0.744261, y=0.667889): 0.900404044298
    test 283 42 41.952155366417 Mu(tan=0.898893, x=0.743703, y=0.66851): 0.900404044298
    test 284 42 41.904427530254 Chi(tan=0.897388, x=0.74426, y=0.66789): 0.900404044298
    test 285 42 41.968088079226 Xi(tan=0.899396, x=0.743517, y=0.668717): 0.900404044298

    test 286 42 42.095701889505 Phi(tan=0.903433, x=0.743145, y=0.671382): 0.900404044298
    test 287 42 42.000000000000 Beta(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 288 42 41.904331700939 Theta(tan=0.897385, x=0.743145, y=0.666887): 0.900404044298
    test 289 42 41.952155366417 Mu(tan=0.898893, x=0.743703, y=0.66851), iteration=3: 0.900404044298
    test 290 42 41.904427530254 Chi(tan=0.897388, x=1.0, y=0.897388), iteration=3: 0.900404044298
    test 291 42 41.968088079226 Xi(tan=0.899396, x=1.49371, y=1.34344), iteration=2: 0.900404044298

    test 292 45 45.096212150580 Phi(tan=1.00336, x=0.705918, y=0.708293): 1.000000000000
    test 293 45 45.000000000000 Beta(tan=1.0, x=0.707107, y=0.707107): 1.000000000000
    test 294 45 44.903787849420 Theta(tan=0.996647, x=0.708293, y=0.705918): 1.000000000000
    test 295 45 44.951893936014 Mu(tan=0.998322, x=0.7077, y=0.706513): 1.000000000000
    test 296 45 44.903895484548 Chi(tan=0.996651, x=0.708292, y=0.70592): 1.000000000000
    test 297 45 44.967914927495 Xi(tan=0.998881, x=0.707503, y=0.706711): 1.000000000000

    test 298 45 45.096212150580 Phi(tan=1.00336, x=0.707107, y=0.709486): 1.000000000000
    test 299 45 45.000000000000 Beta(tan=1.0, x=0.707107, y=0.707107): 1.000000000000
    test 300 45 44.903787849420 Theta(tan=0.996647, x=0.707107, y=0.704736): 1.000000000000
    test 301 45 44.951893936014 Mu(tan=0.998322, x=0.7077, y=0.706513), iteration=2: 1.000000000000
    test 302 45 44.903895484548 Chi(tan=0.996651, x=1.0, y=0.996651), iteration=2: 1.000000000000
    test 303 45 44.967914927495 Xi(tan=0.998881, x=1.42136, y=1.41977), iteration=3: 1.000000000000

    test 304 48 48.095668299061 Phi(tan=1.11435, x=0.667889, y=0.744261): 1.110612514829
    test 305 48 48.000000000000 Beta(tan=1.11061, x=0.669131, y=0.743145): 1.110612514829
    test 306 48 47.904298110495 Theta(tan=1.10689, x=0.670371, y=0.742026): 1.110612514829
    test 307 48 47.952159565224 Mu(tan=1.10875, x=0.669751, y=0.742586): 1.110612514829
    test 308 48 47.904416378458 Chi(tan=1.10689, x=0.670369, y=0.742028): 1.110612514829
    test 309 48 47.968093305841 Xi(tan=1.10937, x=0.669544, y=0.742772): 1.110612514829

    test 310 48 48.095668299061 Phi(tan=1.11435, x=0.669131, y=0.745645): 1.110612514829
    test 311 48 48.000000000000 Beta(tan=1.11061, x=0.669131, y=0.743145): 1.110612514829
    test 312 48 47.904298110495 Theta(tan=1.10689, x=0.669131, y=0.740653): 1.110612514829
    test 313 48 47.952159565224 Mu(tan=1.10875, x=0.669751, y=0.742586), iteration=2: 1.110612514829
    test 314 48 47.904416378458 Chi(tan=1.10689, x=1.0, y=1.10689), iteration=2: 1.110612514829
    test 315 48 47.968093305841 Xi(tan=1.10937, x=1.3451, y=1.49221), iteration=2: 1.110612514829

    test 316 51 51.094076843128 Phi(tan=1.23905, x=0.628044, y=0.778178): 1.234897156535
    test 317 51 51.000000000000 Beta(tan=1.2349, x=0.62932, y=0.777146): 1.234897156535
    test 318 51 50.905857444036 Theta(tan=1.23076, x=0.630596, y=0.776111): 1.234897156535
    test 319 51 50.952949275029 Mu(tan=1.23283, x=0.629958, y=0.776629): 1.234897156535
    test 320 51 50.905984687641 Chi(tan=1.23076, x=0.630595, y=0.776112): 1.234897156535
    test 321 51 50.968621174367 Xi(tan=1.23352, x=0.629746, y=0.776801): 1.234897156535

    test 322 51 51.094076843128 Phi(tan=1.23905, x=0.62932, y=0.77976): 1.234897156535
    test 323 51 51.000000000000 Beta(tan=1.2349, x=0.62932, y=0.777146): 1.234897156535
    test 324 51 50.905857444036 Theta(tan=1.23076, x=0.62932, y=0.77454): 1.234897156535
    test 325 51 50.952949275029 Mu(tan=1.23283, x=0.629958, y=0.776629), iteration=3: 1.234897156535
    test 326 51 50.905984687641 Chi(tan=1.23076, x=1.0, y=1.23076), iteration=3: 1.234897156535
    test 327 51 50.968621174367 Xi(tan=1.23352, x=1.26515, y=1.56058), iteration=3: 1.234897156535

    test 328 54 54.091455743965 Phi(tan=1.38101, x=0.586493, y=0.809954): 1.376381920471
    test 329 54 54.000000000000 Beta(tan=1.37638, x=0.587785, y=0.809017): 1.376381920471
    test 330 54 53.908449292751 Theta(tan=1.37177, x=0.589077, y=0.808077): 1.376381920471
    test 331 54 53.954254347526 Mu(tan=1.37407, x=0.588431, y=0.808547): 1.376381920471
    test 332 54 53.908583404217 Chi(tan=1.37177, x=0.589075, y=0.808078): 1.376381920471
    test 333 54 53.969492667892 Xi(tan=1.37484, x=0.588216, y=0.808704): 1.376381920471

    test 334 54 54.091455743965 Phi(tan=1.38101, x=0.587785, y=0.811739): 1.376381920471
    test 335 54 54.000000000000 Beta(tan=1.37638, x=0.587785, y=0.809017): 1.376381920471
    test 336 54 53.908449292751 Theta(tan=1.37177, x=0.587785, y=0.806305): 1.376381920471
    test 337 54 53.954254347526 Mu(tan=1.37407, x=0.588431, y=0.808547), iteration=2: 1.376381920471
    test 338 54 53.908583404217 Chi(tan=1.37177, x=1.0, y=1.37177), iteration=3: 1.376381920471
    test 339 54 53.969492667892 Xi(tan=1.37484, x=1.18171, y=1.62467), iteration=2: 1.376381920471

    test 340 57 57.087834196097 Phi(tan=1.54505, x=0.543353, y=0.839505): 1.539864963815
    test 341 57 57.000000000000 Beta(tan=1.53986, x=0.544639, y=0.838671): 1.539864963815
    test 342 57 56.912045740495 Theta(tan=1.5347, x=0.545926, y=0.837834): 1.539864963815
    test 343 57 56.956060424306 Mu(tan=1.53728, x=0.545282, y=0.838253): 1.539864963815
    test 344 57 56.912184215461 Chi(tan=1.53471, x=0.545924, y=0.837835): 1.539864963815
    test 345 57 56.970698163777 Xi(tan=1.53814, x=0.545068, y=0.838392): 1.539864963815

    test 346 57 57.087834196097 Phi(tan=1.54505, x=0.544639, y=0.841492): 1.539864963815
    test 347 57 57.000000000000 Beta(tan=1.53986, x=0.544639, y=0.838671): 1.539864963815
    test 348 57 56.912045740495 Theta(tan=1.5347, x=0.544639, y=0.835859): 1.539864963815
    test 349 57 56.956060424306 Mu(tan=1.53728, x=0.545282, y=0.838253), iteration=2: 1.539864963815
    test 350 57 56.912184215461 Chi(tan=1.53471, x=1.0, y=1.53471), iteration=3: 1.539864963815
    test 351 57 56.970698163777 Xi(tan=1.53814, x=1.09503, y=1.68431), iteration=2: 1.539864963815

    test 352 60 60.083252286764 Phi(tan=1.73788, x=0.498741, y=0.866751): 1.732050807569
    test 353 60 60.000000000000 Beta(tan=1.73205, x=0.5, y=0.866025): 1.732050807569
    test 354 60 59.916607797021 Theta(tan=1.72624, x=0.50126, y=0.865297): 1.732050807569
    test 355 60 59.958347666377 Mu(tan=1.72915, x=0.500629, y=0.865662): 1.732050807569
    test 356 60 59.916747807014 Chi(tan=1.72625, x=0.501258, y=0.865298): 1.732050807569
    test 357 60 59.972224390601 Xi(tan=1.73011, x=0.50042, y=0.865783): 1.732050807569

    test 358 60 60.083252286764 Phi(tan=1.73788, x=0.5, y=0.868939): 1.732050807569
    test 359 60 60.000000000000 Beta(tan=1.73205, x=0.5, y=0.866025): 1.732050807569
    test 360 60 59.916607797021 Theta(tan=1.72624, x=0.5, y=0.863122): 1.732050807569
    test 361 60 59.958347666377 Mu(tan=1.72915, x=0.500629, y=0.865662), iteration=3: 1.732050807569
    test 362 60 59.916747807014 Chi(tan=1.72625, x=1.0, y=1.72625), iteration=3: 1.732050807569
    test 363 60 59.972224390601 Xi(tan=1.73011, x=1.00533, y=1.73934), iteration=3: 1.732050807569

    test 364 63 63.077760538972 Phi(tan=1.96921, x=0.452781, y=0.891622): 1.962610505505
    test 365 63 63.000000000000 Beta(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 366 63 62.922085806991 Theta(tan=1.95603, x=0.455202, y=0.890388): 1.962610505505
    test 367 63 62.961090973753 Mu(tan=1.95932, x=0.454595, y=0.890698): 1.962610505505
    test 368 63 62.922224287619 Chi(tan=1.95604, x=0.4552, y=0.890389): 1.962610505505
    test 369 63 62.974054576334 Xi(tan=1.96042, x=0.454394, y=0.890801): 1.962610505505

    test 370 63 63.077760538972 Phi(tan=1.96921, x=0.45399, y=0.894004): 1.962610505505
    test 371 63 63.000000000000 Beta(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 372 63 62.922085806991 Theta(tan=1.95603, x=0.45399, y=0.888019): 1.962610505505
    test 373 63 62.961090973753 Mu(tan=1.95932, x=0.454595, y=0.890698), iteration=3: 1.962610505505
    test 374 63 62.922224287619 Chi(tan=1.95604, x=1.0, y=1.95604), iteration=3: 1.962610505505
    test 375 63 62.974054576334 Xi(tan=1.96042, x=0.912868, y=1.7896), iteration=3: 1.962610505505

    test 376 66 66.071419343981 Phi(tan=2.25359, x=0.405598, y=0.914052): 2.246036773904
    test 377 66 66.000000000000 Beta(tan=2.24604, x=0.406737, y=0.913545): 2.246036773904
    test 378 66 65.928419979560 Theta(tan=2.23851, x=0.407878, y=0.913037): 2.246036773904
    test 379 66 65.964260262219 Mu(tan=2.24227, x=0.407306, y=0.913292): 2.246036773904
    test 380 66 65.928553730974 Chi(tan=2.23852, x=0.407875, y=0.913038): 2.246036773904
    test 381 66 65.976168634291 Xi(tan=2.24352, x=0.407117, y=0.913376): 2.246036773904

    test 382 66 66.071419343981 Phi(tan=2.25359, x=0.406737, y=0.916619): 2.246036773904
    test 383 66 66.000000000000 Beta(tan=2.24604, x=0.406737, y=0.913545): 2.246036773904
    test 384 66 65.928419979560 Theta(tan=2.23851, x=0.406737, y=0.910483): 2.246036773904
    test 385 66 65.964260262219 Mu(tan=2.24227, x=0.407306, y=0.913292), iteration=2: 2.246036773904
    test 386 66 65.928553730974 Chi(tan=2.23852, x=1.0, y=2.23852), iteration=3: 2.246036773904
    test 387 66 65.976168634291 Xi(tan=2.24352, x=0.817889, y=1.83495), iteration=3: 2.246036773904

    test 388 69 69.064298290053 Phi(tan=2.61385, x=0.35732, y=0.933982): 2.605089064694
    test 389 69 69.000000000000 Beta(tan=2.60509, x=0.358368, y=0.93358): 2.605089064694
    test 390 69 68.935541033395 Theta(tan=2.59635, x=0.359418, y=0.933177): 2.605089064694
    test 391 69 68.967820794149 Mu(tan=2.60072, x=0.358892, y=0.933379): 2.605089064694
    test 392 69 68.935666828984 Chi(tan=2.59637, x=0.359416, y=0.933177): 2.605089064694
    test 393 69 68.978543384712 Xi(tan=2.60218, x=0.358718, y=0.933446): 2.605089064694

    test 394 69 69.064298290053 Phi(tan=2.61385, x=0.358368, y=0.936721): 2.605089064694
    test 395 69 69.000000000000 Beta(tan=2.60509, x=0.358368, y=0.93358): 2.605089064694
    test 396 69 68.935541033395 Theta(tan=2.59635, x=0.358368, y=0.93045): 2.605089064694
    test 397 69 68.967820794149 Mu(tan=2.60072, x=0.358892, y=0.933379), iteration=2: 2.605089064694
    test 398 69 68.935666828984 Chi(tan=2.59637, x=1.0, y=2.59637), iteration=3: 2.605089064694
    test 399 69 68.978543384712 Xi(tan=2.60218, x=0.720656, y=1.87527), iteration=2: 2.605089064694

    test 400 72 72.056475395211 Phi(tan=3.08804, x=0.308079, y=0.951361): 3.077683537175
    test 401 72 72.000000000000 Beta(tan=3.07768, x=0.309017, y=0.951057): 3.077683537175
    test 402 72 71.943370950484 Theta(tan=3.06736, x=0.309957, y=0.950751): 3.077683537175
    test 403 72 71.971733559721 Mu(tan=3.07253, x=0.309486, y=0.950904): 3.077683537175
    test 404 72 71.943485649406 Chi(tan=3.06739, x=0.309955, y=0.950751): 3.077683537175
    test 405 72 71.981152809484 Xi(tan=3.07424, x=0.30933, y=0.950955): 3.077683537175

    test 406 72 72.056475395211 Phi(tan=3.08804, x=0.309017, y=0.954256): 3.077683537175
    test 407 72 72.000000000000 Beta(tan=3.07768, x=0.309017, y=0.951057): 3.077683537175
    test 408 72 71.943370950484 Theta(tan=3.06736, x=0.309017, y=0.947868): 3.077683537175
    test 409 72 71.971733559721 Mu(tan=3.07253, x=0.309486, y=0.950904), iteration=3: 3.077683537175
    test 410 72 71.943485649406 Chi(tan=3.06739, x=1.0, y=3.06739), iteration=2: 3.077683537175
    test 411 72 71.981152809484 Xi(tan=3.07424, x=0.621437, y=1.91045), iteration=3: 3.077683537175

    test 412 75 75.048036252634 Phi(tan=3.74461, x=0.258009, y=0.966142): 3.732050807569
    test 413 75 75.000000000000 Beta(tan=3.73205, x=0.258819, y=0.965926): 3.732050807569
    test 414 75 74.951823830757 Theta(tan=3.71954, x=0.259631, y=0.965708): 3.732050807569
    test 415 75 74.975955704296 Mu(tan=3.7258, x=0.259224, y=0.965817): 3.732050807569
    test 416 75 74.951924489654 Chi(tan=3.71956, x=0.259629, y=0.965708): 3.732050807569
    test 417 75 74.983968337196 Xi(tan=3.72788, x=0.259089, y=0.965853): 3.732050807569

    test 418 75 75.048036252634 Phi(tan=3.74461, x=0.258819, y=0.969175): 3.732050807569
    test 419 75 75.000000000000 Beta(tan=3.73205, x=0.258819, y=0.965926): 3.732050807569
    test 420 75 74.951823830757 Theta(tan=3.71954, x=0.258819, y=0.962687): 3.732050807569
    test 421 75 74.975955704296 Mu(tan=3.7258, x=0.259224, y=0.965817), iteration=3: 3.732050807569
    test 422 75 74.951924489654 Chi(tan=3.71956, x=1.0, y=3.71956), iteration=3: 3.732050807569
    test 423 75 74.983968337196 Xi(tan=3.72788, x=0.520505, y=1.94038), iteration=3: 3.732050807569

    test 424 78 78.039073098008 Phi(tan=4.72046, x=0.207245, y=0.978289): 4.704630109478
    test 425 78 78.000000000000 Beta(tan=4.70463, x=0.207912, y=0.978148): 4.704630109478
    test 426 78 77.960806838131 Theta(tan=4.68886, x=0.208581, y=0.978005): 4.704630109478
    test 427 78 77.980440997320 Mu(tan=4.69675, x=0.208246, y=0.978077): 4.704630109478
    test 428 78 77.960890817427 Chi(tan=4.68889, x=0.208579, y=0.978005): 4.704630109478
    test 429 78 77.986959155369 Xi(tan=4.69937, x=0.208134, y=0.9781): 4.704630109478

    test 430 78 78.039073098008 Phi(tan=4.72046, x=0.207912, y=0.981438): 4.704630109478
    test 431 78 78.000000000000 Beta(tan=4.70463, x=0.207912, y=0.978148): 4.704630109478
    test 432 78 77.960806838131 Theta(tan=4.68886, x=0.207912, y=0.974868): 4.704630109478
    test 433 78 77.980440997320 Mu(tan=4.69675, x=0.208246, y=0.978077), iteration=2: 4.704630109478
    test 434 78 77.960890817427 Chi(tan=4.68889, x=1.0, y=4.68889), iteration=3: 4.704630109478
    test 435 78 77.986959155369 Xi(tan=4.69937, x=0.418138, y=1.96498), iteration=2: 4.704630109478

    test 436 81 81.029683808843 Phi(tan=6.33499, x=0.155923, y=0.987769): 6.313751514675
    test 437 81 81.000000000000 Beta(tan=6.31375, x=0.156434, y=0.987688): 6.313751514675
    test 438 81 80.970221227440 Theta(tan=6.29258, x=0.156948, y=0.987607): 6.313751514675
    test 439 81 80.985140337591 Mu(tan=6.30317, x=0.156691, y=0.987648): 6.313751514675
    test 440 81 80.970286287762 Chi(tan=6.29263, x=0.156947, y=0.987607): 6.313751514675
    test 441 81 80.990092546521 Xi(tan=6.30669, x=0.156605, y=0.987661): 6.313751514675

    test 442 81 81.029683808843 Phi(tan=6.33499, x=0.156434, y=0.991011): 6.313751514675
    test 443 81 81.000000000000 Beta(tan=6.31375, x=0.156434, y=0.987688): 6.313751514675
    test 444 81 80.970221227440 Theta(tan=6.29258, x=0.156434, y=0.984377): 6.313751514675
    test 445 81 80.985140337591 Mu(tan=6.30317, x=0.156691, y=0.987648), iteration=3: 6.313751514675
    test 446 81 80.970286287762 Chi(tan=6.29263, x=1.0, y=6.29263), iteration=3: 6.313751514675
    test 447 81 80.990092546521 Xi(tan=6.30669, x=0.314617, y=1.98419), iteration=3: 6.313751514675

    test 448 84 84.019970846274 Phi(tan=9.54637, x=0.104182, y=0.994558): 9.514364454223
    test 449 84 84.000000000000 Beta(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 450 84 83.979963440552 Theta(tan=9.48246, x=0.104876, y=0.994485): 9.514364454223
    test 451 84 83.990002289461 Mu(tan=9.49842, x=0.104702, y=0.994504): 9.514364454223
    test 452 84 83.980007825249 Chi(tan=9.48254, x=0.104875, y=0.994485): 9.514364454223
    test 453 84 83.993334244416 Xi(tan=9.50373, x=0.104644, y=0.99451): 9.514364454223

    test 454 84 84.019970846274 Phi(tan=9.54637, x=0.104528, y=0.997868): 9.514364454223
    test 455 84 84.000000000000 Beta(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 456 84 83.979963440552 Theta(tan=9.48246, x=0.104528, y=0.991187): 9.514364454223
    test 457 84 83.990002289461 Mu(tan=9.49842, x=0.104702, y=0.994504), iteration=3: 9.514364454223
    test 458 84 83.980007825249 Chi(tan=9.48254, x=1.0, y=9.48254), iteration=3: 9.514364454223
    test 459 84 83.993334244416 Xi(tan=9.50373, x=0.210228, y=1.99795), iteration=3: 9.514364454223

    test 460 87 87.010040150331 Phi(tan=19.1453, x=0.052161, y=0.998639): 19.081136687728
    test 461 87 87.000000000000 Beta(tan=19.0811, x=0.052336, y=0.99863): 19.081136687728
    test 462 87 86.989926259040 Theta(tan=19.0172, x=0.0525115, y=0.99862): 19.081136687728
    test 463 87 86.994973644128 Mu(tan=19.0492, x=0.0524236, y=0.998625): 19.081136687728
    test 464 87 86.989948759333 Chi(tan=19.0173, x=0.0525111, y=0.99862): 19.081136687728
    test 465 87 86.996648806705 Xi(tan=19.0598, x=0.0523944, y=0.998626): 19.081136687728

    test 466 87 87.010040150331 Phi(tan=19.1453, x=0.052336, y=1.00199): 19.081136687728
    test 467 87 87.000000000000 Beta(tan=19.0811, x=0.052336, y=0.99863): 19.081136687728
    test 468 87 86.989926259040 Theta(tan=19.0172, x=0.052336, y=0.995281): 19.081136687728
    test 469 87 86.994973644128 Mu(tan=19.0492, x=0.0524236, y=0.998625), iteration=3: 19.081136687728
    test 470 87 86.989948759333 Chi(tan=19.0173, x=1.0, y=19.0173), iteration=3: 19.081136687728
    test 471 87 86.996648806705 Xi(tan=19.0598, x=0.105259, y=2.00622), iteration=3: 19.081136687728

    test 472 90 90.000000000000 Phi(tan=inf, x=0.0, y=1.0): inf
    test 473 90 90.000000000000 Beta(tan=inf, x=0.0, y=1.0): inf
    test 474 90 90.000000000000 Theta(tan=inf, x=0.0, y=1.0): inf
    test 475 90 90.000000000000 Mu(tan=inf, x=0.0, y=1.0): inf
    test 476 90 90.000000000000 Chi(tan=inf, x=0.0, y=1.0): inf
    test 477 90 90.000000000000 Xi(tan=inf, x=0.0, y=1.0): inf

    test 478 90 90.000000000000 Phi(tan=inf, x=0.0, y=1.0): inf
    test 479 90 90.000000000000 Beta(tan=inf, x=0.0, y=1.0): inf
    test 480 90 90.000000000000 Theta(tan=inf, x=0.0, y=1.0): inf
    test 481 90 90.000000000000 Mu(tan=inf, x=0.0, y=1.0): inf
    test 482 90 90.000000000000 Chi(tan=inf, x=0.0, y=1.0): inf
    test 483 90 90.000000000000 Xi(tan=inf, x=0.0, y=1.0): inf

    test 484 93 92.989959849669 Phi(tan=-19.1453, x=-0.052161, y=0.998639): -19.081136687728
    test 485 93 93.000000000000 Beta(tan=-19.0811, x=-0.052336, y=0.99863): -19.081136687728
    test 486 93 93.010073740960 Theta(tan=-19.0172, x=-0.0525115, y=0.99862): -19.081136687728
    test 487 93 93.005026355872 Mu(tan=-19.0492, x=-0.0524236, y=0.998625): -19.081136687728
    test 488 93 93.010051240667 Chi(tan=-19.0173, x=-0.0525111, y=0.99862): -19.081136687728
    test 489 93 93.003351193295 Xi(tan=-19.0598, x=-0.0523944, y=0.998626): -19.081136687728

    test 490 93 92.989959849669 Phi(tan=-19.1453, x=-0.052336, y=1.00199): -19.081136687728
    test 491 93 93.000000000000 Beta(tan=-19.0811, x=-0.052336, y=0.99863): -19.081136687728
    test 492 93 93.010073740960 Theta(tan=-19.0172, x=-0.052336, y=0.995281): -19.081136687728
    test 493 93 93.005026355872 Mu(tan=-19.0492, x=-0.0524236, y=0.998625), iteration=2: -19.081136687728
    test 494 93 93.010051240667 Chi(tan=-19.0173, x=-1, y=19.0173), iteration=3: -19.081136687728
    test 495 93 93.003351193295 Xi(tan=-19.0598, x=-0.105259, y=2.00622), iteration=3: -19.081136687728

    test 496 96 95.980029153726 Phi(tan=-9.54637, x=-0.104182, y=0.994558): -9.514364454223
    test 497 96 96.000000000000 Beta(tan=-9.51436, x=-0.104528, y=0.994522): -9.514364454223
    test 498 96 96.020036559448 Theta(tan=-9.48246, x=-0.104876, y=0.994485): -9.514364454223
    test 499 96 96.009997710539 Mu(tan=-9.49842, x=-0.104702, y=0.994504): -9.514364454223
    test 500 96 96.019992174751 Chi(tan=-9.48254, x=-0.104875, y=0.994485): -9.514364454223
    test 501 96 96.006665755584 Xi(tan=-9.50373, x=-0.104644, y=0.99451): -9.514364454223

    test 502 96 95.980029153726 Phi(tan=-9.54637, x=-0.104528, y=0.997868): -9.514364454223
    test 503 96 96.000000000000 Beta(tan=-9.51436, x=-0.104528, y=0.994522): -9.514364454223
    test 504 96 96.020036559448 Theta(tan=-9.48246, x=-0.104528, y=0.991187): -9.514364454223
    test 505 96 96.009997710539 Mu(tan=-9.49842, x=-0.104702, y=0.994504), iteration=3: -9.514364454223
    test 506 96 96.019992174751 Chi(tan=-9.48254, x=-1, y=9.48254), iteration=2: -9.514364454223
    test 507 96 96.006665755584 Xi(tan=-9.50373, x=-0.210228, y=1.99795), iteration=3: -9.514364454223

    test 508 99 98.970316191157 Phi(tan=-6.33499, x=-0.155923, y=0.987769): -6.313751514675
    test 509 99 99.000000000000 Beta(tan=-6.31375, x=-0.156434, y=0.987688): -6.313751514675
    test 510 99 99.029778772560 Theta(tan=-6.29258, x=-0.156948, y=0.987607): -6.313751514675
    test 511 99 99.014859662409 Mu(tan=-6.30317, x=-0.156691, y=0.987648): -6.313751514675
    test 512 99 99.029713712238 Chi(tan=-6.29263, x=-0.156947, y=0.987607): -6.313751514675
    test 513 99 99.009907453479 Xi(tan=-6.30669, x=-0.156605, y=0.987661): -6.313751514675

    test 514 99 98.970316191157 Phi(tan=-6.33499, x=-0.156434, y=0.991011): -6.313751514675
    test 515 99 99.000000000000 Beta(tan=-6.31375, x=-0.156434, y=0.987688): -6.313751514675
    test 516 99 99.029778772560 Theta(tan=-6.29258, x=-0.156434, y=0.984377): -6.313751514675
    test 517 99 99.014859662409 Mu(tan=-6.30317, x=-0.156691, y=0.987648), iteration=2: -6.313751514675
    test 518 99 99.029713712238 Chi(tan=-6.29263, x=-1, y=6.29263), iteration=3: -6.313751514675
    test 519 99 99.009907453479 Xi(tan=-6.30669, x=-0.314617, y=1.98419), iteration=3: -6.313751514675

    test 520 102 101.960926901992 Phi(tan=-4.72046, x=-0.207245, y=0.978289): -4.704630109478
    test 521 102 102.000000000000 Beta(tan=-4.70463, x=-0.207912, y=0.978148): -4.704630109478
    test 522 102 102.039193161869 Theta(tan=-4.68886, x=-0.208581, y=0.978005): -4.704630109478
    test 523 102 102.019559002680 Mu(tan=-4.69675, x=-0.208246, y=0.978077): -4.704630109478
    test 524 102 102.039109182572 Chi(tan=-4.68889, x=-0.208579, y=0.978005): -4.704630109478
    test 525 102 102.013040844631 Xi(tan=-4.69937, x=-0.208134, y=0.9781): -4.704630109478

    test 526 102 101.960926901992 Phi(tan=-4.72046, x=-0.207912, y=0.981438): -4.704630109478
    test 527 102 102.000000000000 Beta(tan=-4.70463, x=-0.207912, y=0.978148): -4.704630109478
    test 528 102 102.039193161869 Theta(tan=-4.68886, x=-0.207912, y=0.974868): -4.704630109478
    test 529 102 102.019559002680 Mu(tan=-4.69675, x=-0.208246, y=0.978077), iteration=2: -4.704630109478
    test 530 102 102.039109182572 Chi(tan=-4.68889, x=-1, y=4.68889), iteration=2: -4.704630109478
    test 531 102 102.013040844631 Xi(tan=-4.69937, x=-0.418138, y=1.96498), iteration=3: -4.704630109478

    test 532 105 104.951963747366 Phi(tan=-3.74461, x=-0.258009, y=0.966142): -3.732050807569
    test 533 105 105.000000000000 Beta(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 534 105 105.048176169243 Theta(tan=-3.71954, x=-0.259631, y=0.965708): -3.732050807569
    test 535 105 105.024044295704 Mu(tan=-3.7258, x=-0.259224, y=0.965817): -3.732050807569
    test 536 105 105.048075510346 Chi(tan=-3.71956, x=-0.259629, y=0.965708): -3.732050807569
    test 537 105 105.016031662804 Xi(tan=-3.72788, x=-0.259089, y=0.965853): -3.732050807569

    test 538 105 104.951963747366 Phi(tan=-3.74461, x=-0.258819, y=0.969175): -3.732050807569
    test 539 105 105.000000000000 Beta(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 540 105 105.048176169243 Theta(tan=-3.71954, x=-0.258819, y=0.962687): -3.732050807569
    test 541 105 105.024044295704 Mu(tan=-3.7258, x=-0.259224, y=0.965817), iteration=3: -3.732050807569
    test 542 105 105.048075510346 Chi(tan=-3.71956, x=-1, y=3.71956), iteration=3: -3.732050807569
    test 543 105 105.016031662804 Xi(tan=-3.72788, x=-0.520505, y=1.94038), iteration=3: -3.732050807569

    test 544 108 107.943524604789 Phi(tan=-3.08804, x=-0.308079, y=0.951361): -3.077683537175
    test 545 108 108.000000000000 Beta(tan=-3.07768, x=-0.309017, y=0.951057): -3.077683537175
    test 546 108 108.056629049516 Theta(tan=-3.06736, x=-0.309957, y=0.950751): -3.077683537175
    test 547 108 108.028266440279 Mu(tan=-3.07253, x=-0.309486, y=0.950904): -3.077683537175
    test 548 108 108.056514350594 Chi(tan=-3.06739, x=-0.309955, y=0.950751): -3.077683537175
    test 549 108 108.018847190516 Xi(tan=-3.07424, x=-0.30933, y=0.950955): -3.077683537175

    test 550 108 107.943524604789 Phi(tan=-3.08804, x=-0.309017, y=0.954256): -3.077683537175
    test 551 108 108.000000000000 Beta(tan=-3.07768, x=-0.309017, y=0.951057): -3.077683537175
    test 552 108 108.056629049516 Theta(tan=-3.06736, x=-0.309017, y=0.947868): -3.077683537175
    test 553 108 108.028266440279 Mu(tan=-3.07253, x=-0.309486, y=0.950904), iteration=3: -3.077683537175
    test 554 108 108.056514350594 Chi(tan=-3.06739, x=-1, y=3.06739), iteration=2: -3.077683537175
    test 555 108 108.018847190516 Xi(tan=-3.07424, x=-0.621437, y=1.91045), iteration=3: -3.077683537175

    test 556 111 110.935701709947 Phi(tan=-2.61385, x=-0.35732, y=0.933982): -2.605089064694
    test 557 111 111.000000000000 Beta(tan=-2.60509, x=-0.358368, y=0.93358): -2.605089064694
    test 558 111 111.064458966605 Theta(tan=-2.59635, x=-0.359418, y=0.933177): -2.605089064694
    test 559 111 111.032179205851 Mu(tan=-2.60072, x=-0.358892, y=0.933379): -2.605089064694
    test 560 111 111.064333171016 Chi(tan=-2.59637, x=-0.359416, y=0.933177): -2.605089064694
    test 561 111 111.021456615288 Xi(tan=-2.60218, x=-0.358718, y=0.933446): -2.605089064694

    test 562 111 110.935701709947 Phi(tan=-2.61385, x=-0.358368, y=0.936721): -2.605089064694
    test 563 111 111.000000000000 Beta(tan=-2.60509, x=-0.358368, y=0.93358): -2.605089064694
    test 564 111 111.064458966605 Theta(tan=-2.59635, x=-0.358368, y=0.93045): -2.605089064694
    test 565 111 111.032179205851 Mu(tan=-2.60072, x=-0.358892, y=0.933379), iteration=3: -2.605089064694
    test 566 111 111.064333171016 Chi(tan=-2.59637, x=-1, y=2.59637), iteration=3: -2.605089064694
    test 567 111 111.021456615288 Xi(tan=-2.60218, x=-0.720656, y=1.87527), iteration=3: -2.605089064694

    test 568 114 113.928580656019 Phi(tan=-2.25359, x=-0.405598, y=0.914052): -2.246036773904
    test 569 114 114.000000000000 Beta(tan=-2.24604, x=-0.406737, y=0.913545): -2.246036773904
    test 570 114 114.071580020440 Theta(tan=-2.23851, x=-0.407878, y=0.913037): -2.246036773904
    test 571 114 114.035739737781 Mu(tan=-2.24227, x=-0.407306, y=0.913292): -2.246036773904
    test 572 114 114.071446269026 Chi(tan=-2.23852, x=-0.407875, y=0.913038): -2.246036773904
    test 573 114 114.023831365709 Xi(tan=-2.24352, x=-0.407117, y=0.913376): -2.246036773904

    test 574 114 113.928580656019 Phi(tan=-2.25359, x=-0.406737, y=0.916619): -2.246036773904
    test 575 114 114.000000000000 Beta(tan=-2.24604, x=-0.406737, y=0.913545): -2.246036773904
    test 576 114 114.071580020440 Theta(tan=-2.23851, x=-0.406737, y=0.910483): -2.246036773904
    test 577 114 114.035739737781 Mu(tan=-2.24227, x=-0.407306, y=0.913292), iteration=2: -2.246036773904
    test 578 114 114.071446269026 Chi(tan=-2.23852, x=-1, y=2.23852), iteration=3: -2.246036773904
    test 579 114 114.023831365709 Xi(tan=-2.24352, x=-0.817889, y=1.83495), iteration=3: -2.246036773904

    test 580 117 116.922239461028 Phi(tan=-1.96921, x=-0.452781, y=0.891622): -1.962610505505
    test 581 117 117.000000000000 Beta(tan=-1.96261, x=-0.45399, y=0.891007): -1.962610505505
    test 582 117 117.077914193009 Theta(tan=-1.95603, x=-0.455202, y=0.890388): -1.962610505505
    test 583 117 117.038909026247 Mu(tan=-1.95932, x=-0.454595, y=0.890698): -1.962610505505
    test 584 117 117.077775712381 Chi(tan=-1.95604, x=-0.4552, y=0.890389): -1.962610505505
    test 585 117 117.025945423666 Xi(tan=-1.96042, x=-0.454394, y=0.890801): -1.962610505505

    test 586 117 116.922239461028 Phi(tan=-1.96921, x=-0.45399, y=0.894004): -1.962610505505
    test 587 117 117.000000000000 Beta(tan=-1.96261, x=-0.45399, y=0.891007): -1.962610505505
    test 588 117 117.077914193009 Theta(tan=-1.95603, x=-0.45399, y=0.888019): -1.962610505505
    test 589 117 117.038909026247 Mu(tan=-1.95932, x=-0.454595, y=0.890698), iteration=3: -1.962610505505
    test 590 117 117.077775712381 Chi(tan=-1.95604, x=-1, y=1.95604), iteration=2: -1.962610505505
    test 591 117 117.025945423666 Xi(tan=-1.96042, x=-0.912868, y=1.7896), iteration=3: -1.962610505505

    test 592 120 119.916747713236 Phi(tan=-1.73788, x=-0.498741, y=0.866751): -1.732050807569
    test 593 120 120.000000000000 Beta(tan=-1.73205, x=-0.5, y=0.866025): -1.732050807569
    test 594 120 120.083392202979 Theta(tan=-1.72624, x=-0.50126, y=0.865297): -1.732050807569
    test 595 120 120.041652333623 Mu(tan=-1.72915, x=-0.500629, y=0.865662): -1.732050807569
    test 596 120 120.083252192986 Chi(tan=-1.72625, x=-0.501258, y=0.865298): -1.732050807569
    test 597 120 120.027775609399 Xi(tan=-1.73011, x=-0.50042, y=0.865783): -1.732050807569

    test 598 120 119.916747713236 Phi(tan=-1.73788, x=-0.5, y=0.868939): -1.732050807569
    test 599 120 120.000000000000 Beta(tan=-1.73205, x=-0.5, y=0.866025): -1.732050807569
    test 600 120 120.083392202979 Theta(tan=-1.72624, x=-0.5, y=0.863122): -1.732050807569
    test 601 120 120.041652333623 Mu(tan=-1.72915, x=-0.500629, y=0.865662), iteration=3: -1.732050807569
    test 602 120 120.083252192986 Chi(tan=-1.72625, x=-1, y=1.72625), iteration=3: -1.732050807569
    test 603 120 120.027775609399 Xi(tan=-1.73011, x=-1.00533, y=1.73934), iteration=3: -1.732050807569

    test 604 123 122.912165803903 Phi(tan=-1.54505, x=-0.543353, y=0.839505): -1.539864963815
    test 605 123 123.000000000000 Beta(tan=-1.53986, x=-0.544639, y=0.838671): -1.539864963815
    test 606 123 123.087954259505 Theta(tan=-1.5347, x=-0.545926, y=0.837834): -1.539864963815
    test 607 123 123.043939575694 Mu(tan=-1.53728, x=-0.545282, y=0.838253): -1.539864963815
    test 608 123 123.087815784539 Chi(tan=-1.53471, x=-0.545924, y=0.837835): -1.539864963815
    test 609 123 123.029301836223 Xi(tan=-1.53814, x=-0.545068, y=0.838392): -1.539864963815

    test 610 123 122.912165803903 Phi(tan=-1.54505, x=-0.544639, y=0.841492): -1.539864963815
    test 611 123 123.000000000000 Beta(tan=-1.53986, x=-0.544639, y=0.838671): -1.539864963815
    test 612 123 123.087954259505 Theta(tan=-1.5347, x=-0.544639, y=0.835859): -1.539864963815
    test 613 123 123.043939575694 Mu(tan=-1.53728, x=-0.545282, y=0.838253), iteration=2: -1.539864963815
    test 614 123 123.087815784539 Chi(tan=-1.53471, x=-1, y=1.53471), iteration=3: -1.539864963815
    test 615 123 123.029301836223 Xi(tan=-1.53814, x=-1.09503, y=1.68431), iteration=2: -1.539864963815

    test 616 126 125.908544256035 Phi(tan=-1.38101, x=-0.586493, y=0.809954): -1.376381920471
    test 617 126 126.000000000000 Beta(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 618 126 126.091550707249 Theta(tan=-1.37177, x=-0.589077, y=0.808077): -1.376381920471
    test 619 126 126.045745652474 Mu(tan=-1.37407, x=-0.588431, y=0.808547): -1.376381920471
    test 620 126 126.091416595783 Chi(tan=-1.37177, x=-0.589075, y=0.808078): -1.376381920471
    test 621 126 126.030507332108 Xi(tan=-1.37484, x=-0.588216, y=0.808704): -1.376381920471

    test 622 126 125.908544256035 Phi(tan=-1.38101, x=-0.587785, y=0.811739): -1.376381920471
    test 623 126 126.000000000000 Beta(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 624 126 126.091550707249 Theta(tan=-1.37177, x=-0.587785, y=0.806305): -1.376381920471
    test 625 126 126.045745652474 Mu(tan=-1.37407, x=-0.588431, y=0.808547), iteration=2: -1.376381920471
    test 626 126 126.091416595783 Chi(tan=-1.37177, x=-1, y=1.37177), iteration=3: -1.376381920471
    test 627 126 126.030507332108 Xi(tan=-1.37484, x=-1.18171, y=1.62467), iteration=2: -1.376381920471

    test 628 129 128.905923156872 Phi(tan=-1.23905, x=-0.628044, y=0.778178): -1.234897156535
    test 629 129 129.000000000000 Beta(tan=-1.2349, x=-0.62932, y=0.777146): -1.234897156535
    test 630 129 129.094142555964 Theta(tan=-1.23076, x=-0.630596, y=0.776111): -1.234897156535
    test 631 129 129.047050724971 Mu(tan=-1.23283, x=-0.629958, y=0.776629): -1.234897156535
    test 632 129 129.094015312359 Chi(tan=-1.23076, x=-0.630595, y=0.776112): -1.234897156535
    test 633 129 129.031378825633 Xi(tan=-1.23352, x=-0.629746, y=0.776801): -1.234897156535

    test 634 129 128.905923156872 Phi(tan=-1.23905, x=-0.62932, y=0.77976): -1.234897156535
    test 635 129 129.000000000000 Beta(tan=-1.2349, x=-0.62932, y=0.777146): -1.234897156535
    test 636 129 129.094142555964 Theta(tan=-1.23076, x=-0.62932, y=0.77454): -1.234897156535
    test 637 129 129.047050724971 Mu(tan=-1.23283, x=-0.629958, y=0.776629), iteration=3: -1.234897156535
    test 638 129 129.094015312359 Chi(tan=-1.23076, x=-1, y=1.23076), iteration=3: -1.234897156535
    test 639 129 129.031378825633 Xi(tan=-1.23352, x=-1.26515, y=1.56058), iteration=3: -1.234897156535

    test 640 132 131.904331700939 Phi(tan=-1.11435, x=-0.667889, y=0.744261): -1.110612514829
    test 641 132 132.000000000000 Beta(tan=-1.11061, x=-0.669131, y=0.743145): -1.110612514829
    test 642 132 132.095701889505 Theta(tan=-1.10689, x=-0.670371, y=0.742026): -1.110612514829
    test 643 132 132.047840434776 Mu(tan=-1.10875, x=-0.669751, y=0.742586): -1.110612514829
    test 644 132 132.095583621542 Chi(tan=-1.10689, x=-0.670369, y=0.742028): -1.110612514829
    test 645 132 132.031906694159 Xi(tan=-1.10937, x=-0.669544, y=0.742772): -1.110612514829

    test 646 132 131.904331700939 Phi(tan=-1.11435, x=-0.669131, y=0.745645): -1.110612514829
    test 647 132 132.000000000000 Beta(tan=-1.11061, x=-0.669131, y=0.743145): -1.110612514829
    test 648 132 132.095701889505 Theta(tan=-1.10689, x=-0.669131, y=0.740653): -1.110612514829
    test 649 132 132.047840434776 Mu(tan=-1.10875, x=-0.669751, y=0.742586), iteration=2: -1.110612514829
    test 650 132 132.095583621542 Chi(tan=-1.10689, x=-1, y=1.10689), iteration=2: -1.110612514829
    test 651 132 132.031906694159 Xi(tan=-1.10937, x=-1.3451, y=1.49221), iteration=2: -1.110612514829

    test 652 135 134.903787849420 Phi(tan=-1.00336, x=-0.705918, y=0.708293): -1.000000000000
    test 653 135 135.000000000000 Beta(tan=-1, x=-0.707107, y=0.707107): -1.000000000000
    test 654 135 135.096212150580 Theta(tan=-0.996647, x=-0.708293, y=0.705918): -1.000000000000
    test 655 135 135.048106063986 Mu(tan=-0.998322, x=-0.7077, y=0.706513): -1.000000000000
    test 656 135 135.096104515452 Chi(tan=-0.996651, x=-0.708292, y=0.70592): -1.000000000000
    test 657 135 135.032085072505 Xi(tan=-0.998881, x=-0.707503, y=0.706711): -1.000000000000

    test 658 135 134.903787849420 Phi(tan=-1.00336, x=-0.707107, y=0.709486): -1.000000000000
    test 659 135 135.000000000000 Beta(tan=-1, x=-0.707107, y=0.707107): -1.000000000000
    test 660 135 135.096212150580 Theta(tan=-0.996647, x=-0.707107, y=0.704736): -1.000000000000
    test 661 135 135.048106063986 Mu(tan=-0.998322, x=-0.7077, y=0.706513), iteration=2: -1.000000000000
    test 662 135 135.096104515452 Chi(tan=-0.996651, x=-1, y=0.996651), iteration=2: -1.000000000000
    test 663 135 135.032085072505 Xi(tan=-0.998881, x=-1.42136, y=1.41977), iteration=3: -1.000000000000

    test 664 138 137.904298110495 Phi(tan=-0.903433, x=-0.742026, y=0.670371): -0.900404044298
    test 665 138 138.000000000000 Beta(tan=-0.900404, x=-0.743145, y=0.669131): -0.900404044298
    test 666 138 138.095668299061 Theta(tan=-0.897385, x=-0.744261, y=0.667889): -0.900404044298
    test 667 138 138.047844633583 Mu(tan=-0.898893, x=-0.743703, y=0.66851): -0.900404044298
    test 668 138 138.095572469746 Chi(tan=-0.897388, x=-0.74426, y=0.66789): -0.900404044298
    test 669 138 138.031911920774 Xi(tan=-0.899396, x=-0.743517, y=0.668717): -0.900404044298

    test 670 138 137.904298110495 Phi(tan=-0.903433, x=-0.743145, y=0.671382): -0.900404044298
    test 671 138 138.000000000000 Beta(tan=-0.900404, x=-0.743145, y=0.669131): -0.900404044298
    test 672 138 138.095668299061 Theta(tan=-0.897385, x=-0.743145, y=0.666887): -0.900404044298
    test 673 138 138.047844633583 Mu(tan=-0.898893, x=-0.743703, y=0.66851), iteration=3: -0.900404044298
    test 674 138 138.095572469746 Chi(tan=-0.897388, x=-1, y=0.897388), iteration=3: -0.900404044298
    test 675 138 138.031911920774 Xi(tan=-0.899396, x=-1.49371, y=1.34344), iteration=2: -0.900404044298

    test 676 141 140.905857444036 Phi(tan=-0.812508, x=-0.776111, y=0.630596): -0.809784033195
    test 677 141 141.000000000000 Beta(tan=-0.809784, x=-0.777146, y=0.62932): -0.809784033195
    test 678 141 141.094076843128 Theta(tan=-0.807069, x=-0.778178, y=0.628044): -0.809784033195
    test 679 141 141.047058939078 Mu(tan=-0.808425, x=-0.777663, y=0.628682): -0.809784033195
    test 680 141 141.093993496154 Chi(tan=-0.807071, x=-0.778177, y=0.628045): -0.809784033195
    test 681 141 141.031389050435 Xi(tan=-0.808877, x=-0.777491, y=0.628895): -0.809784033195

    test 682 141 140.905857444036 Phi(tan=-0.812508, x=-0.777146, y=0.631437): -0.809784033195
    test 683 141 141.000000000000 Beta(tan=-0.809784, x=-0.777146, y=0.62932): -0.809784033195
    test 684 141 141.094076843128 Theta(tan=-0.807069, x=-0.777146, y=0.62721): -0.809784033195
    test 685 141 141.047058939078 Mu(tan=-0.808425, x=-0.777663, y=0.628682), iteration=3: -0.809784033195
    test 686 141 141.093993496154 Chi(tan=-0.807071, x=-1, y=0.807071), iteration=3: -0.809784033195
    test 687 141 141.031389050435 Xi(tan=-0.808877, x=-1.56196, y=1.26344), iteration=3: -0.809784033195

    test 688 144 143.908449292751 Phi(tan=-0.728987, x=-0.808077, y=0.589077): -0.726542528005
    test 689 144 144.000000000000 Beta(tan=-0.726543, x=-0.809017, y=0.587785): -0.726542528005
    test 690 144 144.091455743965 Theta(tan=-0.724107, x=-0.809954, y=0.586493): -0.726542528005
    test 691 144 144.045757522886 Mu(tan=-0.725323, x=-0.809486, y=0.587139): -0.726542528005
    test 692 144 144.091385068640 Chi(tan=-0.724108, x=-0.809953, y=0.586494): -0.726542528005
    test 693 144 144.030522108226 Xi(tan=-0.725729, x=-0.80933, y=0.587354): -0.726542528005

    test 694 144 143.908449292751 Phi(tan=-0.728987, x=-0.809017, y=0.589763): -0.726542528005
    test 695 144 144.000000000000 Beta(tan=-0.726543, x=-0.809017, y=0.587785): -0.726542528005
    test 696 144 144.091455743965 Theta(tan=-0.724107, x=-0.809017, y=0.585815): -0.726542528005
    test 697 144 144.045757522886 Mu(tan=-0.725323, x=-0.809486, y=0.587139), iteration=2: -0.726542528005
    test 698 144 144.091385068640 Chi(tan=-0.724108, x=-1, y=0.724108), iteration=2: -0.726542528005
    test 699 144 144.030522108226 Xi(tan=-0.725729, x=-1.62593, y=1.17998), iteration=2: -0.726542528005

    test 700 147 146.912045740495 Phi(tan=-0.651592, x=-0.837834, y=0.545926): -0.649407593198
    test 701 147 147.000000000000 Beta(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 702 147 147.087834196097 Theta(tan=-0.64723, x=-0.839505, y=0.543353): -0.649407593198
    test 703 147 147.043954583618 Mu(tan=-0.648317, x=-0.839088, y=0.543995): -0.649407593198
    test 704 147 147.087775924345 Chi(tan=-0.647232, x=-0.839504, y=0.543354): -0.649407593198
    test 705 147 147.029320517871 Xi(tan=-0.64868, x=-0.838949, y=0.54421): -0.649407593198

    test 706 147 146.912045740495 Phi(tan=-0.651592, x=-0.838671, y=0.546471): -0.649407593198
    test 707 147 147.000000000000 Beta(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 708 147 147.087834196097 Theta(tan=-0.64723, x=-0.838671, y=0.542813): -0.649407593198
    test 709 147 147.043954583618 Mu(tan=-0.648317, x=-0.839088, y=0.543995), iteration=3: -0.649407593198
    test 710 147 147.087775924345 Chi(tan=-0.647232, x=-1, y=0.647232), iteration=3: -0.649407593198
    test 711 147 147.029320517871 Xi(tan=-0.64868, x=-1.68543, y=1.09331), iteration=3: -0.649407593198

    test 712 150 149.916607797021 Phi(tan=-0.579293, x=-0.865297, y=0.50126): -0.577350269190
    test 713 150 150.000000000000 Beta(tan=-0.57735, x=-0.866025, y=0.5): -0.577350269190
    test 714 150 150.083252286764 Theta(tan=-0.575415, x=-0.866751, y=0.498741): -0.577350269190
    test 715 150 150.041669823142 Mu(tan=-0.576381, x=-0.866389, y=0.49937): -0.577350269190
    test 716 150 150.083205741820 Chi(tan=-0.575416, x=-0.866751, y=0.498742): -0.577350269190
    test 717 150 150.027797380102 Xi(tan=-0.576704, x=-0.866268, y=0.49958): -0.577350269190

    test 718 150 149.916607797021 Phi(tan=-0.579293, x=-0.866025, y=0.501682): -0.577350269190
    test 719 150 150.000000000000 Beta(tan=-0.57735, x=-0.866025, y=0.5): -0.577350269190
    test 720 150 150.083252286764 Theta(tan=-0.575415, x=-0.866025, y=0.498324): -0.577350269190
    test 721 150 150.041669823142 Mu(tan=-0.576381, x=-0.866389, y=0.49937), iteration=3: -0.577350269190
    test 722 150 150.083205741820 Chi(tan=-0.575416, x=-1, y=0.575416), iteration=2: -0.577350269190
    test 723 150 150.027797380102 Xi(tan=-0.576704, x=-1.74031, y=1.00365), iteration=2: -0.577350269190

    test 724 153 152.922085806991 Phi(tan=-0.51124, x=-0.890388, y=0.455202): -0.509525449494
    test 725 153 153.000000000000 Beta(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494
    test 726 153 153.077760538972 Theta(tan=-0.507817, x=-0.891622, y=0.452781): -0.509525449494
    test 727 153 153.038928232986 Mu(tan=-0.50867, x=-0.891315, y=0.453385): -0.509525449494
    test 728 153 153.077724700381 Chi(tan=-0.507818, x=-0.891622, y=0.452781): -0.509525449494
    test 729 153 153.025969331940 Xi(tan=-0.508955, x=-0.891212, y=0.453587): -0.509525449494

    test 730 153 152.922085806991 Phi(tan=-0.51124, x=-0.891007, y=0.455518): -0.509525449494
    test 731 153 153.000000000000 Beta(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494
    test 732 153 153.077760538972 Theta(tan=-0.507817, x=-0.891007, y=0.452468): -0.509525449494
    test 733 153 153.038928232986 Mu(tan=-0.50867, x=-0.891315, y=0.453385), iteration=2: -0.509525449494
    test 734 153 153.077724700381 Chi(tan=-0.507818, x=-1, y=0.507818), iteration=2: -0.509525449494
    test 735 153 153.025969331940 Xi(tan=-0.508955, x=-1.79043, y=0.911246), iteration=2: -0.509525449494

    test 736 156 155.928419979560 Phi(tan=-0.446726, x=-0.913037, y=0.407878): -0.445228685309
    test 737 156 156.000000000000 Beta(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309
    test 738 156 156.071419343981 Theta(tan=-0.443736, x=-0.914052, y=0.405598): -0.445228685309
    test 739 156 156.035759822314 Mu(tan=-0.444481, x=-0.913799, y=0.406166): -0.445228685309
    test 740 156 156.071392925660 Chi(tan=-0.443736, x=-0.914052, y=0.405598): -0.445228685309
    test 741 156 156.023856366648 Xi(tan=-0.44473, x=-0.913715, y=0.406356): -0.445228685309

    test 742 156 155.928419979560 Phi(tan=-0.446726, x=-0.913545, y=0.408105): -0.445228685309
    test 743 156 156.000000000000 Beta(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309
    test 744 156 156.071419343981 Theta(tan=-0.443736, x=-0.913545, y=0.405373): -0.445228685309
    test 745 156 156.035759822314 Mu(tan=-0.444481, x=-0.913799, y=0.406166), iteration=3: -0.445228685309
    test 746 156 156.071392925660 Chi(tan=-0.443736, x=-1, y=0.443736), iteration=2: -0.445228685309
    test 747 156 156.023856366648 Xi(tan=-0.44473, x=-1.83563, y=0.816362), iteration=3: -0.445228685309

    test 748 159 158.935541033395 Phi(tan=-0.385155, x=-0.933177, y=0.359418): -0.383864035035
    test 749 159 159.000000000000 Beta(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035
    test 750 159 159.064298290053 Theta(tan=-0.382577, x=-0.933982, y=0.35732): -0.383864035035
    test 751 159 159.032199290387 Mu(tan=-0.383219, x=-0.933782, y=0.357843): -0.383864035035
    test 752 159 159.064279827645 Chi(tan=-0.382577, x=-0.933982, y=0.35732): -0.383864035035
    test 753 159 159.021481616233 Xi(tan=-0.383434, x=-0.933715, y=0.358018): -0.383864035035

    test 754 159 158.935541033395 Phi(tan=-0.385155, x=-0.93358, y=0.359574): -0.383864035035
    test 755 159 159.000000000000 Beta(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035
    test 756 159 159.064298290053 Theta(tan=-0.382577, x=-0.93358, y=0.357166): -0.383864035035
    test 757 159 159.032199290387 Mu(tan=-0.383219, x=-0.933782, y=0.357843), iteration=3: -0.383864035035
    test 758 159 159.064279827645 Chi(tan=-0.382577, x=-1, y=0.382577), iteration=3: -0.383864035035
    test 759 159 159.021481616233 Xi(tan=-0.383434, x=-1.87581, y=0.719251), iteration=3: -0.383864035035

    test 760 162 161.943370950484 Phi(tan=-0.326013, x=-0.950751, y=0.309957): -0.324919696233
    test 761 162 162.000000000000 Beta(tan=-0.32492, x=-0.951057, y=0.309017): -0.324919696233
    test 762 162 162.056475395211 Theta(tan=-0.32383, x=-0.951361, y=0.308079): -0.324919696233
    test 763 162 162.028285647029 Mu(tan=-0.324374, x=-0.951209, y=0.308547): -0.324919696233
    test 764 162 162.056463338580 Chi(tan=-0.323831, x=-0.951361, y=0.30808): -0.324919696233
    test 765 162 162.018871098804 Xi(tan=-0.324556, x=-0.951158, y=0.308704): -0.324919696233

    test 766 162 161.943370950484 Phi(tan=-0.326013, x=-0.951057, y=0.310057): -0.324919696233
    test 767 162 162.000000000000 Beta(tan=-0.32492, x=-0.951057, y=0.309017): -0.324919696233
    test 768 162 162.056475395211 Theta(tan=-0.32383, x=-0.951057, y=0.307981): -0.324919696233
    test 769 162 162.028285647029 Mu(tan=-0.324374, x=-0.951209, y=0.308547), iteration=2: -0.324919696233
    test 770 162 162.056463338580 Chi(tan=-0.323831, x=-1, y=0.323831), iteration=3: -0.324919696233
    test 771 162 162.018871098804 Xi(tan=-0.324556, x=-1.91086, y=0.62018), iteration=2: -0.324919696233

    test 772 165 164.951823830757 Phi(tan=-0.268851, x=-0.965708, y=0.259631): -0.267949192431
    test 773 165 165.000000000000 Beta(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431
    test 774 165 165.048036252634 Theta(tan=-0.267051, x=-0.966142, y=0.258009): -0.267949192431
    test 775 165 165.024061785238 Mu(tan=-0.267499, x=-0.966034, y=0.258413): -0.267949192431
    test 776 165 165.048029059158 Chi(tan=-0.267051, x=-0.966142, y=0.258009): -0.267949192431
    test 777 165 165.016053433529 Xi(tan=-0.267649, x=-0.965998, y=0.258548): -0.267949192431

    test 778 165 164.951823830757 Phi(tan=-0.268851, x=-0.965926, y=0.25969): -0.267949192431
    test 779 165 165.000000000000 Beta(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431
    test 780 165 165.048036252634 Theta(tan=-0.267051, x=-0.965926, y=0.257951): -0.267949192431
    test 781 165 165.024061785238 Mu(tan=-0.267499, x=-0.966034, y=0.258413), iteration=3: -0.267949192431
    test 782 165 165.048029059158 Chi(tan=-0.267051, x=-1, y=0.267051), iteration=3: -0.267949192431
    test 783 165 165.016053433529 Xi(tan=-0.267649, x=-1.94067, y=0.519419), iteration=3: -0.267949192431

    test 784 168 167.960806838131 Phi(tan=-0.213272, x=-0.978005, y=0.208581): -0.212556561670
    test 785 168 168.000000000000 Beta(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 786 168 168.039073098008 Theta(tan=-0.211844, x=-0.978289, y=0.207245): -0.212556561670
    test 787 168 168.019574010622 Mu(tan=-0.2122, x=-0.978219, y=0.207578): -0.212556561670
    test 788 168 168.039069322354 Chi(tan=-0.211844, x=-0.978289, y=0.207245): -0.212556561670
    test 789 168 168.013059526305 Xi(tan=-0.212318, x=-0.978195, y=0.207689): -0.212556561670

    test 790 168 167.960806838131 Phi(tan=-0.213272, x=-0.978148, y=0.208611): -0.212556561670
    test 791 168 168.000000000000 Beta(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 792 168 168.039073098008 Theta(tan=-0.211844, x=-0.978148, y=0.207215): -0.212556561670
    test 793 168 168.019574010622 Mu(tan=-0.2122, x=-0.978219, y=0.207578), iteration=3: -0.212556561670
    test 794 168 168.039069322354 Chi(tan=-0.211844, x=-1, y=0.211844), iteration=2: -0.212556561670
    test 795 168 168.013059526305 Xi(tan=-0.212318, x=-1.96517, y=0.417243), iteration=3: -0.212556561670

    test 796 171 170.970221227440 Phi(tan=-0.158917, x=-0.987607, y=0.156948): -0.158384440325
    test 797 171 171.000000000000 Beta(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325
    test 798 171 171.029683808843 Theta(tan=-0.157853, x=-0.987769, y=0.155923): -0.158384440325
    test 799 171 171.014871532838 Mu(tan=-0.158118, x=-0.987729, y=0.156178): -0.158384440325
    test 800 171 171.029682185072 Chi(tan=-0.157853, x=-0.987769, y=0.155923): -0.158384440325
    test 801 171 171.009922229621 Xi(tan=-0.158207, x=-0.987715, y=0.156263): -0.158384440325

    test 802 171 170.970221227440 Phi(tan=-0.158917, x=-0.987688, y=0.156961): -0.158384440325
    test 803 171 171.000000000000 Beta(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325
    test 804 171 171.029683808843 Theta(tan=-0.157853, x=-0.987688, y=0.15591): -0.158384440325
    test 805 171 171.014871532838 Mu(tan=-0.158118, x=-0.987729, y=0.156178), iteration=2: -0.158384440325
    test 806 171 171.029682185072 Chi(tan=-0.157853, x=-1, y=0.157853), iteration=2: -0.158384440325
    test 807 171 171.009922229621 Xi(tan=-0.158207, x=-1.9843, y=0.31393), iteration=3: -0.158384440325

    test 808 174 173.979963440552 Phi(tan=-0.105458, x=-0.994485, y=0.104876): -0.105104235266
    test 809 174 174.000000000000 Beta(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266
    test 810 174 174.019970846274 Theta(tan=-0.104752, x=-0.994558, y=0.104182): -0.105104235266
    test 811 174 174.010005924660 Mu(tan=-0.104928, x=-0.99454, y=0.104355): -0.105104235266
    test 812 174 174.019970358528 Chi(tan=-0.104752, x=-0.994558, y=0.104182): -0.105104235266
    test 813 174 174.006675980405 Xi(tan=-0.104986, x=-0.994534, y=0.104413): -0.105104235266

    test 814 174 173.979963440552 Phi(tan=-0.105458, x=-0.994522, y=0.10488): -0.105104235266
    test 815 174 174.000000000000 Beta(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266
    test 816 174 174.019970846274 Theta(tan=-0.104752, x=-0.994522, y=0.104178): -0.105104235266
    test 817 174 174.010005924660 Mu(tan=-0.104928, x=-0.99454, y=0.104355), iteration=3: -0.105104235266
    test 818 174 174.019970358528 Chi(tan=-0.104752, x=-1, y=0.104752), iteration=2: -0.105104235266
    test 819 174 174.006675980405 Xi(tan=-0.104986, x=-1.998, y=0.209763), iteration=3: -0.105104235266

    test 820 177 176.989926259040 Phi(tan=-0.0525841, x=-0.99862, y=0.0525115): -0.052407779283
    test 821 177 177.000000000000 Beta(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283
    test 822 177 177.010040150331 Theta(tan=-0.0522321, x=-0.998639, y=0.052161): -0.052407779283
    test 823 177 177.005030554687 Mu(tan=-0.0523197, x=-0.998634, y=0.0522483): -0.052407779283
    test 824 177 177.010040088861 Chi(tan=-0.0522321, x=-0.998639, y=0.052161): -0.052407779283
    test 825 177 177.003356419920 Xi(tan=-0.052349, x=-0.998633, y=0.0522775): -0.052407779283

    test 826 177 176.989926259040 Phi(tan=-0.0525841, x=-0.99863, y=0.052512): -0.052407779283
    test 827 177 177.000000000000 Beta(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283
    test 828 177 177.010040150331 Theta(tan=-0.0522321, x=-0.99863, y=0.0521605): -0.052407779283
    test 829 177 177.005030554687 Mu(tan=-0.0523197, x=-0.998634, y=0.0522483), iteration=2: -0.052407779283
    test 830 177 177.010040088861 Chi(tan=-0.0522321, x=-1, y=0.0522321), iteration=2: -0.052407779283
    test 831 177 177.003356419920 Xi(tan=-0.052349, x=-2.00623, y=0.105024), iteration=3: -0.052407779283

    test 832 180 180.000000000000 Phi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 833 180 180.000000000000 Beta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 834 180 180.000000000000 Theta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 835 180 180.000000000000 Mu(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 836 180 180.000000000000 Chi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 837 180 180.000000000000 Xi(tan=0.0, x=-1, y=0.0): 0.000000000000

    test 838 180 180.000000000000 Phi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 839 180 180.000000000000 Beta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 840 180 180.000000000000 Theta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 841 180 180.000000000000 Mu(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 842 180 180.000000000000 Chi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 843 180 180.000000000000 Xi(tan=0.0, x=-1, y=0.0): 0.000000000000

    test 844 183 183.010073740960 Phi(tan=0.0525841, x=-0.99862, y=-0.0525115): 0.052407779283
    test 845 183 183.000000000000 Beta(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283
    test 846 183 182.989959849669 Theta(tan=0.0522321, x=-0.998639, y=-0.052161): 0.052407779283
    test 847 183 182.994969445313 Mu(tan=0.0523197, x=-0.998634, y=-0.0522483): 0.052407779283
    test 848 183 182.989959911139 Chi(tan=0.0522321, x=-0.998639, y=-0.052161): 0.052407779283
    test 849 183 182.996643580080 Xi(tan=0.052349, x=-0.998633, y=-0.0522775): 0.052407779283

    test 850 183 183.010073740960 Phi(tan=0.0525841, x=-0.99863, y=-0.052512): 0.052407779283
    test 851 183 183.000000000000 Beta(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283
    test 852 183 182.989959849669 Theta(tan=0.0522321, x=-0.99863, y=-0.0521605): 0.052407779283
    test 853 183 182.994969445313 Mu(tan=0.0523197, x=-0.998634, y=-0.0522483), iteration=3: 0.052407779283
    test 854 183 182.989959911139 Chi(tan=0.0522321, x=-1, y=-0.0522321), iteration=3: 0.052407779283
    test 855 183 182.996643580080 Xi(tan=0.052349, x=-2.00623, y=-0.105024), iteration=3: 0.052407779283

    test 856 186 186.020036559448 Phi(tan=0.105458, x=-0.994485, y=-0.104876): 0.105104235266
    test 857 186 186.000000000000 Beta(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266
    test 858 186 185.980029153726 Theta(tan=0.104752, x=-0.994558, y=-0.104182): 0.105104235266
    test 859 186 185.989994075340 Mu(tan=0.104928, x=-0.99454, y=-0.104355): 0.105104235266
    test 860 186 185.980029641472 Chi(tan=0.104752, x=-0.994558, y=-0.104182): 0.105104235266
    test 861 186 185.993324019595 Xi(tan=0.104986, x=-0.994534, y=-0.104413): 0.105104235266

    test 862 186 186.020036559448 Phi(tan=0.105458, x=-0.994522, y=-0.10488): 0.105104235266
    test 863 186 186.000000000000 Beta(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266
    test 864 186 185.980029153726 Theta(tan=0.104752, x=-0.994522, y=-0.104178): 0.105104235266
    test 865 186 185.989994075340 Mu(tan=0.104928, x=-0.99454, y=-0.104355), iteration=2: 0.105104235266
    test 866 186 185.980029641472 Chi(tan=0.104752, x=-1, y=-0.104752), iteration=3: 0.105104235266
    test 867 186 185.993324019595 Xi(tan=0.104986, x=-1.998, y=-0.209763), iteration=3: 0.105104235266

    test 868 189 189.029778772560 Phi(tan=0.158917, x=-0.987607, y=-0.156948): 0.158384440325
    test 869 189 189.000000000000 Beta(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 870 189 188.970316191157 Theta(tan=0.157853, x=-0.987769, y=-0.155923): 0.158384440325
    test 871 189 188.985128467162 Mu(tan=0.158118, x=-0.987729, y=-0.156178): 0.158384440325
    test 872 189 188.970317814928 Chi(tan=0.157853, x=-0.987769, y=-0.155923): 0.158384440325
    test 873 189 188.990077770379 Xi(tan=0.158207, x=-0.987715, y=-0.156263): 0.158384440325

    test 874 189 189.029778772560 Phi(tan=0.158917, x=-0.987688, y=-0.156961): 0.158384440325
    test 875 189 189.000000000000 Beta(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 876 189 188.970316191157 Theta(tan=0.157853, x=-0.987688, y=-0.15591): 0.158384440325
    test 877 189 188.985128467162 Mu(tan=0.158118, x=-0.987729, y=-0.156178), iteration=2: 0.158384440325
    test 878 189 188.970317814928 Chi(tan=0.157853, x=-1, y=-0.157853), iteration=2: 0.158384440325
    test 879 189 188.990077770379 Xi(tan=0.158207, x=-1.9843, y=-0.31393), iteration=3: 0.158384440325

    test 880 192 192.039193161869 Phi(tan=0.213272, x=-0.978005, y=-0.208581): 0.212556561670
    test 881 192 192.000000000000 Beta(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670
    test 882 192 191.960926901992 Theta(tan=0.211844, x=-0.978289, y=-0.207245): 0.212556561670
    test 883 192 191.980425989378 Mu(tan=0.2122, x=-0.978219, y=-0.207578): 0.212556561670
    test 884 192 191.960930677646 Chi(tan=0.211844, x=-0.978289, y=-0.207245): 0.212556561670
    test 885 192 191.986940473695 Xi(tan=0.212318, x=-0.978195, y=-0.207689): 0.212556561670

    test 886 192 192.039193161869 Phi(tan=0.213272, x=-0.978148, y=-0.208611): 0.212556561670
    test 887 192 192.000000000000 Beta(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670
    test 888 192 191.960926901992 Theta(tan=0.211844, x=-0.978148, y=-0.207215): 0.212556561670
    test 889 192 191.980425989378 Mu(tan=0.2122, x=-0.978219, y=-0.207578), iteration=3: 0.212556561670
    test 890 192 191.960930677646 Chi(tan=0.211844, x=-1, y=-0.211844), iteration=3: 0.212556561670
    test 891 192 191.986940473695 Xi(tan=0.212318, x=-1.96517, y=-0.417243), iteration=3: 0.212556561670

    test 892 195 195.048176169243 Phi(tan=0.268851, x=-0.965708, y=-0.259631): 0.267949192431
    test 893 195 195.000000000000 Beta(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431
    test 894 195 194.951963747366 Theta(tan=0.267051, x=-0.966142, y=-0.258009): 0.267949192431
    test 895 195 194.975938214762 Mu(tan=0.267499, x=-0.966034, y=-0.258413): 0.267949192431
    test 896 195 194.951970940842 Chi(tan=0.267051, x=-0.966142, y=-0.258009): 0.267949192431
    test 897 195 194.983946566471 Xi(tan=0.267649, x=-0.965998, y=-0.258548): 0.267949192431

    test 898 195 195.048176169243 Phi(tan=0.268851, x=-0.965926, y=-0.25969): 0.267949192431
    test 899 195 195.000000000000 Beta(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431
    test 900 195 194.951963747366 Theta(tan=0.267051, x=-0.965926, y=-0.257951): 0.267949192431
    test 901 195 194.975938214762 Mu(tan=0.267499, x=-0.966034, y=-0.258413), iteration=3: 0.267949192431
    test 902 195 194.951970940842 Chi(tan=0.267051, x=-1, y=-0.267051), iteration=3: 0.267949192431
    test 903 195 194.983946566471 Xi(tan=0.267649, x=-1.94067, y=-0.519419), iteration=3: 0.267949192431

    test 904 198 198.056629049516 Phi(tan=0.326013, x=-0.950751, y=-0.309957): 0.324919696233
    test 905 198 198.000000000000 Beta(tan=0.32492, x=-0.951057, y=-0.309017): 0.324919696233
    test 906 198 197.943524604789 Theta(tan=0.32383, x=-0.951361, y=-0.308079): 0.324919696233
    test 907 198 197.971714352971 Mu(tan=0.324374, x=-0.951209, y=-0.308547): 0.324919696233
    test 908 198 197.943536661420 Chi(tan=0.323831, x=-0.951361, y=-0.30808): 0.324919696233
    test 909 198 197.981128901196 Xi(tan=0.324556, x=-0.951158, y=-0.308704): 0.324919696233

    test 910 198 198.056629049516 Phi(tan=0.326013, x=-0.951057, y=-0.310057): 0.324919696233
    test 911 198 198.000000000000 Beta(tan=0.32492, x=-0.951057, y=-0.309017): 0.324919696233
    test 912 198 197.943524604789 Theta(tan=0.32383, x=-0.951057, y=-0.307981): 0.324919696233
    test 913 198 197.971714352971 Mu(tan=0.324374, x=-0.951209, y=-0.308547), iteration=3: 0.324919696233
    test 914 198 197.943536661420 Chi(tan=0.323831, x=-1, y=-0.323831), iteration=3: 0.324919696233
    test 915 198 197.981128901196 Xi(tan=0.324556, x=-1.91086, y=-0.62018), iteration=2: 0.324919696233

    test 916 201 201.064458966605 Phi(tan=0.385155, x=-0.933177, y=-0.359418): 0.383864035035
    test 917 201 201.000000000000 Beta(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035
    test 918 201 200.935701709947 Theta(tan=0.382577, x=-0.933982, y=-0.35732): 0.383864035035
    test 919 201 200.967800709613 Mu(tan=0.383219, x=-0.933782, y=-0.357843): 0.383864035035
    test 920 201 200.935720172355 Chi(tan=0.382577, x=-0.933982, y=-0.35732): 0.383864035035
    test 921 201 200.978518383767 Xi(tan=0.383434, x=-0.933715, y=-0.358018): 0.383864035035

    test 922 201 201.064458966605 Phi(tan=0.385155, x=-0.93358, y=-0.359574): 0.383864035035
    test 923 201 201.000000000000 Beta(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035
    test 924 201 200.935701709947 Theta(tan=0.382577, x=-0.93358, y=-0.357166): 0.383864035035
    test 925 201 200.967800709613 Mu(tan=0.383219, x=-0.933782, y=-0.357843), iteration=3: 0.383864035035
    test 926 201 200.935720172355 Chi(tan=0.382577, x=-1, y=-0.382577), iteration=3: 0.383864035035
    test 927 201 200.978518383767 Xi(tan=0.383434, x=-1.87581, y=-0.719251), iteration=2: 0.383864035035

    test 928 204 204.071580020440 Phi(tan=0.446726, x=-0.913037, y=-0.407878): 0.445228685309
    test 929 204 204.000000000000 Beta(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309
    test 930 204 203.928580656019 Theta(tan=0.443736, x=-0.914052, y=-0.405598): 0.445228685309
    test 931 204 203.964240177686 Mu(tan=0.444481, x=-0.913799, y=-0.406166): 0.445228685309
    test 932 204 203.928607074340 Chi(tan=0.443736, x=-0.914052, y=-0.405598): 0.445228685309
    test 933 204 203.976143633352 Xi(tan=0.44473, x=-0.913715, y=-0.406356): 0.445228685309

    test 934 204 204.071580020440 Phi(tan=0.446726, x=-0.913545, y=-0.408105): 0.445228685309
    test 935 204 204.000000000000 Beta(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309
    test 936 204 203.928580656019 Theta(tan=0.443736, x=-0.913545, y=-0.405373): 0.445228685309
    test 937 204 203.964240177686 Mu(tan=0.444481, x=-0.913799, y=-0.406166), iteration=3: 0.445228685309
    test 938 204 203.928607074340 Chi(tan=0.443736, x=-1, y=-0.443736), iteration=2: 0.445228685309
    test 939 204 203.976143633352 Xi(tan=0.44473, x=-1.83563, y=-0.816362), iteration=3: 0.445228685309

    test 940 207 207.077914193009 Phi(tan=0.51124, x=-0.890388, y=-0.455202): 0.509525449494
    test 941 207 207.000000000000 Beta(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494
    test 942 207 206.922239461028 Theta(tan=0.507817, x=-0.891622, y=-0.452781): 0.509525449494
    test 943 207 206.961071767014 Mu(tan=0.50867, x=-0.891315, y=-0.453385): 0.509525449494
    test 944 207 206.922275299619 Chi(tan=0.507818, x=-0.891622, y=-0.452781): 0.509525449494
    test 945 207 206.974030668060 Xi(tan=0.508955, x=-0.891212, y=-0.453587): 0.509525449494

    test 946 207 207.077914193009 Phi(tan=0.51124, x=-0.891007, y=-0.455518): 0.509525449494
    test 947 207 207.000000000000 Beta(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494
    test 948 207 206.922239461028 Theta(tan=0.507817, x=-0.891007, y=-0.452468): 0.509525449494
    test 949 207 206.961071767014 Mu(tan=0.50867, x=-0.891315, y=-0.453385), iteration=2: 0.509525449494
    test 950 207 206.922275299619 Chi(tan=0.507818, x=-1, y=-0.507818), iteration=2: 0.509525449494
    test 951 207 206.974030668060 Xi(tan=0.508955, x=-1.79043, y=-0.911246), iteration=2: 0.509525449494

    test 952 210 210.083392202979 Phi(tan=0.579293, x=-0.865297, y=-0.50126): 0.577350269190
    test 953 210 210.000000000000 Beta(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 954 210 209.916747713236 Theta(tan=0.575415, x=-0.866751, y=-0.498741): 0.577350269190
    test 955 210 209.958330176858 Mu(tan=0.576381, x=-0.866389, y=-0.49937): 0.577350269190
    test 956 210 209.916794258180 Chi(tan=0.575416, x=-0.866751, y=-0.498742): 0.577350269190
    test 957 210 209.972202619898 Xi(tan=0.576704, x=-0.866268, y=-0.49958): 0.577350269190

    test 958 210 210.083392202979 Phi(tan=0.579293, x=-0.866025, y=-0.501682): 0.577350269190
    test 959 210 210.000000000000 Beta(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 960 210 209.916747713236 Theta(tan=0.575415, x=-0.866025, y=-0.498324): 0.577350269190
    test 961 210 209.958330176858 Mu(tan=0.576381, x=-0.866389, y=-0.49937), iteration=2: 0.577350269190
    test 962 210 209.916794258180 Chi(tan=0.575416, x=-1, y=-0.575416), iteration=2: 0.577350269190
    test 963 210 209.972202619898 Xi(tan=0.576704, x=-1.74031, y=-1.00365), iteration=3: 0.577350269190

    test 964 213 213.087954259505 Phi(tan=0.651592, x=-0.837834, y=-0.545926): 0.649407593198
    test 965 213 213.000000000000 Beta(tan=0.649408, x=-0.838671, y=-0.544639): 0.649407593198
    test 966 213 212.912165803903 Theta(tan=0.64723, x=-0.839505, y=-0.543353): 0.649407593198
    test 967 213 212.956045416382 Mu(tan=0.648317, x=-0.839088, y=-0.543995): 0.649407593198
    test 968 213 212.912224075655 Chi(tan=0.647232, x=-0.839504, y=-0.543354): 0.649407593198
    test 969 213 212.970679482129 Xi(tan=0.64868, x=-0.838949, y=-0.54421): 0.649407593198

    test 970 213 213.087954259505 Phi(tan=0.651592, x=-0.838671, y=-0.546471): 0.649407593198
    test 971 213 213.000000000000 Beta(tan=0.649408, x=-0.838671, y=-0.544639): 0.649407593198
    test 972 213 212.912165803903 Theta(tan=0.64723, x=-0.838671, y=-0.542813): 0.649407593198
    test 973 213 212.956045416382 Mu(tan=0.648317, x=-0.839088, y=-0.543995), iteration=3: 0.649407593198
    test 974 213 212.912224075655 Chi(tan=0.647232, x=-1, y=-0.647232), iteration=3: 0.649407593198
    test 975 213 212.970679482129 Xi(tan=0.64868, x=-1.68543, y=-1.09331), iteration=3: 0.649407593198

    test 976 216 216.091550707249 Phi(tan=0.728987, x=-0.808077, y=-0.589077): 0.726542528005
    test 977 216 216.000000000000 Beta(tan=0.726543, x=-0.809017, y=-0.587785): 0.726542528005
    test 978 216 215.908544256035 Theta(tan=0.724107, x=-0.809954, y=-0.586493): 0.726542528005
    test 979 216 215.954242477114 Mu(tan=0.725323, x=-0.809486, y=-0.587139): 0.726542528005
    test 980 216 215.908614931360 Chi(tan=0.724108, x=-0.809953, y=-0.586494): 0.726542528005
    test 981 216 215.969477891774 Xi(tan=0.725729, x=-0.80933, y=-0.587354): 0.726542528005

    test 982 216 216.091550707249 Phi(tan=0.728987, x=-0.809017, y=-0.589763): 0.726542528005
    test 983 216 216.000000000000 Beta(tan=0.726543, x=-0.809017, y=-0.587785): 0.726542528005
    test 984 216 215.908544256035 Theta(tan=0.724107, x=-0.809017, y=-0.585815): 0.726542528005
    test 985 216 215.954242477114 Mu(tan=0.725323, x=-0.809486, y=-0.587139), iteration=2: 0.726542528005
    test 986 216 215.908614931360 Chi(tan=0.724108, x=-1, y=-0.724108), iteration=2: 0.726542528005
    test 987 216 215.969477891774 Xi(tan=0.725729, x=-1.62593, y=-1.17998), iteration=2: 0.726542528005

    test 988 219 219.094142555964 Phi(tan=0.812508, x=-0.776111, y=-0.630596): 0.809784033195
    test 989 219 219.000000000000 Beta(tan=0.809784, x=-0.777146, y=-0.62932): 0.809784033195
    test 990 219 218.905923156872 Theta(tan=0.807069, x=-0.778178, y=-0.628044): 0.809784033195
    test 991 219 218.952941060922 Mu(tan=0.808425, x=-0.777663, y=-0.628682): 0.809784033195
    test 992 219 218.906006503846 Chi(tan=0.807071, x=-0.778177, y=-0.628045): 0.809784033195
    test 993 219 218.968610949565 Xi(tan=0.808877, x=-0.777491, y=-0.628895): 0.809784033195

    test 994 219 219.094142555964 Phi(tan=0.812508, x=-0.777146, y=-0.631437): 0.809784033195
    test 995 219 219.000000000000 Beta(tan=0.809784, x=-0.777146, y=-0.62932): 0.809784033195
    test 996 219 218.905923156872 Theta(tan=0.807069, x=-0.777146, y=-0.62721): 0.809784033195
    test 997 219 218.952941060922 Mu(tan=0.808425, x=-0.777663, y=-0.628682), iteration=3: 0.809784033195
    test 998 219 218.906006503846 Chi(tan=0.807071, x=-1, y=-0.807071), iteration=3: 0.809784033195
    test 999 219 218.968610949565 Xi(tan=0.808877, x=-1.56196, y=-1.26344), iteration=3: 0.809784033195

    test 1000 222 222.095701889505 Phi(tan=0.903433, x=-0.742026, y=-0.670371): 0.900404044298
    test 1001 222 222.000000000000 Beta(tan=0.900404, x=-0.743145, y=-0.669131): 0.900404044298
    test 1002 222 221.904331700939 Theta(tan=0.897385, x=-0.744261, y=-0.667889): 0.900404044298
    test 1003 222 221.952155366417 Mu(tan=0.898893, x=-0.743703, y=-0.66851): 0.900404044298
    test 1004 222 221.904427530254 Chi(tan=0.897388, x=-0.74426, y=-0.66789): 0.900404044298
    test 1005 222 221.968088079226 Xi(tan=0.899396, x=-0.743517, y=-0.668717): 0.900404044298

    test 1006 222 222.095701889505 Phi(tan=0.903433, x=-0.743145, y=-0.671382): 0.900404044298
    test 1007 222 222.000000000000 Beta(tan=0.900404, x=-0.743145, y=-0.669131): 0.900404044298
    test 1008 222 221.904331700939 Theta(tan=0.897385, x=-0.743145, y=-0.666887): 0.900404044298
    test 1009 222 221.952155366417 Mu(tan=0.898893, x=-0.743703, y=-0.66851), iteration=3: 0.900404044298
    test 1010 222 221.904427530254 Chi(tan=0.897388, x=-1, y=-0.897388), iteration=3: 0.900404044298
    test 1011 222 221.968088079226 Xi(tan=0.899396, x=-1.49371, y=-1.34344), iteration=2: 0.900404044298

    test 1012 225 225.096212150580 Phi(tan=1.00336, x=-0.705918, y=-0.708293): 1.000000000000
    test 1013 225 225.000000000000 Beta(tan=1.0, x=-0.707107, y=-0.707107): 1.000000000000
    test 1014 225 224.903787849420 Theta(tan=0.996647, x=-0.708293, y=-0.705918): 1.000000000000
    test 1015 225 224.951893936014 Mu(tan=0.998322, x=-0.7077, y=-0.706513): 1.000000000000
    test 1016 225 224.903895484548 Chi(tan=0.996651, x=-0.708292, y=-0.70592): 1.000000000000
    test 1017 225 224.967914927495 Xi(tan=0.998881, x=-0.707503, y=-0.706711): 1.000000000000

    test 1018 225 225.096212150580 Phi(tan=1.00336, x=-0.707107, y=-0.709486): 1.000000000000
    test 1019 225 225.000000000000 Beta(tan=1.0, x=-0.707107, y=-0.707107): 1.000000000000
    test 1020 225 224.903787849420 Theta(tan=0.996647, x=-0.707107, y=-0.704736): 1.000000000000
    test 1021 225 224.951893936014 Mu(tan=0.998322, x=-0.7077, y=-0.706513), iteration=2: 1.000000000000
    test 1022 225 224.903895484548 Chi(tan=0.996651, x=-1, y=-0.996651), iteration=2: 1.000000000000
    test 1023 225 224.967914927495 Xi(tan=0.998881, x=-1.42136, y=-1.41977), iteration=3: 1.000000000000

    test 1024 228 228.095668299061 Phi(tan=1.11435, x=-0.667889, y=-0.744261): 1.110612514829
    test 1025 228 228.000000000000 Beta(tan=1.11061, x=-0.669131, y=-0.743145): 1.110612514829
    test 1026 228 227.904298110495 Theta(tan=1.10689, x=-0.670371, y=-0.742026): 1.110612514829
    test 1027 228 227.952159565224 Mu(tan=1.10875, x=-0.669751, y=-0.742586): 1.110612514829
    test 1028 228 227.904416378458 Chi(tan=1.10689, x=-0.670369, y=-0.742028): 1.110612514829
    test 1029 228 227.968093305841 Xi(tan=1.10937, x=-0.669544, y=-0.742772): 1.110612514829

    test 1030 228 228.095668299061 Phi(tan=1.11435, x=-0.669131, y=-0.745645): 1.110612514829
    test 1031 228 228.000000000000 Beta(tan=1.11061, x=-0.669131, y=-0.743145): 1.110612514829
    test 1032 228 227.904298110495 Theta(tan=1.10689, x=-0.669131, y=-0.740653): 1.110612514829
    test 1033 228 227.952159565224 Mu(tan=1.10875, x=-0.669751, y=-0.742586), iteration=2: 1.110612514829
    test 1034 228 227.904416378458 Chi(tan=1.10689, x=-1, y=-1.10689), iteration=2: 1.110612514829
    test 1035 228 227.968093305841 Xi(tan=1.10937, x=-1.3451, y=-1.49221), iteration=2: 1.110612514829

    test 1036 231 231.094076843128 Phi(tan=1.23905, x=-0.628044, y=-0.778178): 1.234897156535
    test 1037 231 231.000000000000 Beta(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 1038 231 230.905857444036 Theta(tan=1.23076, x=-0.630596, y=-0.776111): 1.234897156535
    test 1039 231 230.952949275029 Mu(tan=1.23283, x=-0.629958, y=-0.776629): 1.234897156535
    test 1040 231 230.905984687641 Chi(tan=1.23076, x=-0.630595, y=-0.776112): 1.234897156535
    test 1041 231 230.968621174367 Xi(tan=1.23352, x=-0.629746, y=-0.776801): 1.234897156535

    test 1042 231 231.094076843128 Phi(tan=1.23905, x=-0.62932, y=-0.77976): 1.234897156535
    test 1043 231 231.000000000000 Beta(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 1044 231 230.905857444036 Theta(tan=1.23076, x=-0.62932, y=-0.77454): 1.234897156535
    test 1045 231 230.952949275029 Mu(tan=1.23283, x=-0.629958, y=-0.776629), iteration=3: 1.234897156535
    test 1046 231 230.905984687641 Chi(tan=1.23076, x=-1, y=-1.23076), iteration=3: 1.234897156535
    test 1047 231 230.968621174367 Xi(tan=1.23352, x=-1.26515, y=-1.56058), iteration=3: 1.234897156535

    test 1048 234 234.091455743965 Phi(tan=1.38101, x=-0.586493, y=-0.809954): 1.376381920471
    test 1049 234 234.000000000000 Beta(tan=1.37638, x=-0.587785, y=-0.809017): 1.376381920471
    test 1050 234 233.908449292751 Theta(tan=1.37177, x=-0.589077, y=-0.808077): 1.376381920471
    test 1051 234 233.954254347526 Mu(tan=1.37407, x=-0.588431, y=-0.808547): 1.376381920471
    test 1052 234 233.908583404217 Chi(tan=1.37177, x=-0.589075, y=-0.808078): 1.376381920471
    test 1053 234 233.969492667892 Xi(tan=1.37484, x=-0.588216, y=-0.808704): 1.376381920471

    test 1054 234 234.091455743965 Phi(tan=1.38101, x=-0.587785, y=-0.811739): 1.376381920471
    test 1055 234 234.000000000000 Beta(tan=1.37638, x=-0.587785, y=-0.809017): 1.376381920471
    test 1056 234 233.908449292751 Theta(tan=1.37177, x=-0.587785, y=-0.806305): 1.376381920471
    test 1057 234 233.954254347526 Mu(tan=1.37407, x=-0.588431, y=-0.808547), iteration=2: 1.376381920471
    test 1058 234 233.908583404217 Chi(tan=1.37177, x=-1, y=-1.37177), iteration=3: 1.376381920471
    test 1059 234 233.969492667892 Xi(tan=1.37484, x=-1.18171, y=-1.62467), iteration=2: 1.376381920471

    test 1060 237 237.087834196097 Phi(tan=1.54505, x=-0.543353, y=-0.839505): 1.539864963815
    test 1061 237 237.000000000000 Beta(tan=1.53986, x=-0.544639, y=-0.838671): 1.539864963815
    test 1062 237 236.912045740495 Theta(tan=1.5347, x=-0.545926, y=-0.837834): 1.539864963815
    test 1063 237 236.956060424306 Mu(tan=1.53728, x=-0.545282, y=-0.838253): 1.539864963815
    test 1064 237 236.912184215461 Chi(tan=1.53471, x=-0.545924, y=-0.837835): 1.539864963815
    test 1065 237 236.970698163777 Xi(tan=1.53814, x=-0.545068, y=-0.838392): 1.539864963815

    test 1066 237 237.087834196097 Phi(tan=1.54505, x=-0.544639, y=-0.841492): 1.539864963815
    test 1067 237 237.000000000000 Beta(tan=1.53986, x=-0.544639, y=-0.838671): 1.539864963815
    test 1068 237 236.912045740495 Theta(tan=1.5347, x=-0.544639, y=-0.835859): 1.539864963815
    test 1069 237 236.956060424306 Mu(tan=1.53728, x=-0.545282, y=-0.838253), iteration=2: 1.539864963815
    test 1070 237 236.912184215461 Chi(tan=1.53471, x=-1, y=-1.53471), iteration=3: 1.539864963815
    test 1071 237 236.970698163777 Xi(tan=1.53814, x=-1.09503, y=-1.68431), iteration=2: 1.539864963815

    test 1072 240 240.083252286764 Phi(tan=1.73788, x=-0.498741, y=-0.866751): 1.732050807569
    test 1073 240 240.000000000000 Beta(tan=1.73205, x=-0.5, y=-0.866025): 1.732050807569
    test 1074 240 239.916607797021 Theta(tan=1.72624, x=-0.50126, y=-0.865297): 1.732050807569
    test 1075 240 239.958347666377 Mu(tan=1.72915, x=-0.500629, y=-0.865662): 1.732050807569
    test 1076 240 239.916747807014 Chi(tan=1.72625, x=-0.501258, y=-0.865298): 1.732050807569
    test 1077 240 239.972224390601 Xi(tan=1.73011, x=-0.50042, y=-0.865783): 1.732050807569

    test 1078 240 240.083252286764 Phi(tan=1.73788, x=-0.5, y=-0.868939): 1.732050807569
    test 1079 240 240.000000000000 Beta(tan=1.73205, x=-0.5, y=-0.866025): 1.732050807569
    test 1080 240 239.916607797021 Theta(tan=1.72624, x=-0.5, y=-0.863122): 1.732050807569
    test 1081 240 239.958347666377 Mu(tan=1.72915, x=-0.500629, y=-0.865662), iteration=3: 1.732050807569
    test 1082 240 239.916747807014 Chi(tan=1.72625, x=-1, y=-1.72625), iteration=3: 1.732050807569
    test 1083 240 239.972224390601 Xi(tan=1.73011, x=-1.00533, y=-1.73934), iteration=3: 1.732050807569

    test 1084 243 243.077760538972 Phi(tan=1.96921, x=-0.452781, y=-0.891622): 1.962610505505
    test 1085 243 243.000000000000 Beta(tan=1.96261, x=-0.45399, y=-0.891007): 1.962610505505
    test 1086 243 242.922085806991 Theta(tan=1.95603, x=-0.455202, y=-0.890388): 1.962610505505
    test 1087 243 242.961090973753 Mu(tan=1.95932, x=-0.454595, y=-0.890698): 1.962610505505
    test 1088 243 242.922224287619 Chi(tan=1.95604, x=-0.4552, y=-0.890389): 1.962610505505
    test 1089 243 242.974054576334 Xi(tan=1.96042, x=-0.454394, y=-0.890801): 1.962610505505

    test 1090 243 243.077760538972 Phi(tan=1.96921, x=-0.45399, y=-0.894004): 1.962610505505
    test 1091 243 243.000000000000 Beta(tan=1.96261, x=-0.45399, y=-0.891007): 1.962610505505
    test 1092 243 242.922085806991 Theta(tan=1.95603, x=-0.45399, y=-0.888019): 1.962610505505
    test 1093 243 242.961090973753 Mu(tan=1.95932, x=-0.454595, y=-0.890698), iteration=3: 1.962610505505
    test 1094 243 242.922224287619 Chi(tan=1.95604, x=-1, y=-1.95604), iteration=3: 1.962610505505
    test 1095 243 242.974054576334 Xi(tan=1.96042, x=-0.912868, y=-1.7896), iteration=3: 1.962610505505

    test 1096 246 246.071419343981 Phi(tan=2.25359, x=-0.405598, y=-0.914052): 2.246036773904
    test 1097 246 246.000000000000 Beta(tan=2.24604, x=-0.406737, y=-0.913545): 2.246036773904
    test 1098 246 245.928419979560 Theta(tan=2.23851, x=-0.407878, y=-0.913037): 2.246036773904
    test 1099 246 245.964260262219 Mu(tan=2.24227, x=-0.407306, y=-0.913292): 2.246036773904
    test 1100 246 245.928553730974 Chi(tan=2.23852, x=-0.407875, y=-0.913038): 2.246036773904
    test 1101 246 245.976168634291 Xi(tan=2.24352, x=-0.407117, y=-0.913376): 2.246036773904

    test 1102 246 246.071419343981 Phi(tan=2.25359, x=-0.406737, y=-0.916619): 2.246036773904
    test 1103 246 246.000000000000 Beta(tan=2.24604, x=-0.406737, y=-0.913545): 2.246036773904
    test 1104 246 245.928419979560 Theta(tan=2.23851, x=-0.406737, y=-0.910483): 2.246036773904
    test 1105 246 245.964260262219 Mu(tan=2.24227, x=-0.407306, y=-0.913292), iteration=2: 2.246036773904
    test 1106 246 245.928553730974 Chi(tan=2.23852, x=-1, y=-2.23852), iteration=3: 2.246036773904
    test 1107 246 245.976168634291 Xi(tan=2.24352, x=-0.817889, y=-1.83495), iteration=3: 2.246036773904

    test 1108 249 249.064298290053 Phi(tan=2.61385, x=-0.35732, y=-0.933982): 2.605089064694
    test 1109 249 249.000000000000 Beta(tan=2.60509, x=-0.358368, y=-0.93358): 2.605089064694
    test 1110 249 248.935541033395 Theta(tan=2.59635, x=-0.359418, y=-0.933177): 2.605089064694
    test 1111 249 248.967820794149 Mu(tan=2.60072, x=-0.358892, y=-0.933379): 2.605089064694
    test 1112 249 248.935666828984 Chi(tan=2.59637, x=-0.359416, y=-0.933177): 2.605089064694
    test 1113 249 248.978543384711 Xi(tan=2.60218, x=-0.358718, y=-0.933446): 2.605089064694

    test 1114 249 249.064298290053 Phi(tan=2.61385, x=-0.358368, y=-0.936721): 2.605089064694
    test 1115 249 249.000000000000 Beta(tan=2.60509, x=-0.358368, y=-0.93358): 2.605089064694
    test 1116 249 248.935541033395 Theta(tan=2.59635, x=-0.358368, y=-0.93045): 2.605089064694
    test 1117 249 248.967820794149 Mu(tan=2.60072, x=-0.358892, y=-0.933379), iteration=2: 2.605089064694
    test 1118 249 248.935666828984 Chi(tan=2.59637, x=-1, y=-2.59637), iteration=3: 2.605089064694
    test 1119 249 248.978543384711 Xi(tan=2.60218, x=-0.720656, y=-1.87527), iteration=2: 2.605089064694

    test 1120 252 252.056475395211 Phi(tan=3.08804, x=-0.308079, y=-0.951361): 3.077683537175
    test 1121 252 252.000000000000 Beta(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 1122 252 251.943370950484 Theta(tan=3.06736, x=-0.309957, y=-0.950751): 3.077683537175
    test 1123 252 251.971733559721 Mu(tan=3.07253, x=-0.309486, y=-0.950904): 3.077683537175
    test 1124 252 251.943485649406 Chi(tan=3.06739, x=-0.309955, y=-0.950751): 3.077683537175
    test 1125 252 251.981152809484 Xi(tan=3.07424, x=-0.30933, y=-0.950955): 3.077683537175

    test 1126 252 252.056475395211 Phi(tan=3.08804, x=-0.309017, y=-0.954256): 3.077683537175
    test 1127 252 252.000000000000 Beta(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 1128 252 251.943370950484 Theta(tan=3.06736, x=-0.309017, y=-0.947868): 3.077683537175
    test 1129 252 251.971733559721 Mu(tan=3.07253, x=-0.309486, y=-0.950904), iteration=3: 3.077683537175
    test 1130 252 251.943485649406 Chi(tan=3.06739, x=-1, y=-3.06739), iteration=2: 3.077683537175
    test 1131 252 251.981152809484 Xi(tan=3.07424, x=-0.621437, y=-1.91045), iteration=3: 3.077683537175

    test 1132 255 255.048036252634 Phi(tan=3.74461, x=-0.258009, y=-0.966142): 3.732050807569
    test 1133 255 255.000000000000 Beta(tan=3.73205, x=-0.258819, y=-0.965926): 3.732050807569
    test 1134 255 254.951823830757 Theta(tan=3.71954, x=-0.259631, y=-0.965708): 3.732050807569
    test 1135 255 254.975955704296 Mu(tan=3.7258, x=-0.259224, y=-0.965817): 3.732050807569
    test 1136 255 254.951924489654 Chi(tan=3.71956, x=-0.259629, y=-0.965708): 3.732050807569
    test 1137 255 254.983968337196 Xi(tan=3.72788, x=-0.259089, y=-0.965853): 3.732050807569

    test 1138 255 255.048036252634 Phi(tan=3.74461, x=-0.258819, y=-0.969175): 3.732050807569
    test 1139 255 255.000000000000 Beta(tan=3.73205, x=-0.258819, y=-0.965926): 3.732050807569
    test 1140 255 254.951823830757 Theta(tan=3.71954, x=-0.258819, y=-0.962687): 3.732050807569
    test 1141 255 254.975955704296 Mu(tan=3.7258, x=-0.259224, y=-0.965817), iteration=3: 3.732050807569
    test 1142 255 254.951924489654 Chi(tan=3.71956, x=-1, y=-3.71956), iteration=3: 3.732050807569
    test 1143 255 254.983968337196 Xi(tan=3.72788, x=-0.520505, y=-1.94038), iteration=3: 3.732050807569

    test 1144 258 258.039073098008 Phi(tan=4.72046, x=-0.207245, y=-0.978289): 4.704630109478
    test 1145 258 258.000000000000 Beta(tan=4.70463, x=-0.207912, y=-0.978148): 4.704630109478
    test 1146 258 257.960806838131 Theta(tan=4.68886, x=-0.208581, y=-0.978005): 4.704630109478
    test 1147 258 257.980440997320 Mu(tan=4.69675, x=-0.208246, y=-0.978077): 4.704630109478
    test 1148 258 257.960890817428 Chi(tan=4.68889, x=-0.208579, y=-0.978005): 4.704630109478
    test 1149 258 257.986959155369 Xi(tan=4.69937, x=-0.208134, y=-0.9781): 4.704630109478

    test 1150 258 258.039073098008 Phi(tan=4.72046, x=-0.207912, y=-0.981438): 4.704630109478
    test 1151 258 258.000000000000 Beta(tan=4.70463, x=-0.207912, y=-0.978148): 4.704630109478
    test 1152 258 257.960806838131 Theta(tan=4.68886, x=-0.207912, y=-0.974868): 4.704630109478
    test 1153 258 257.980440997320 Mu(tan=4.69675, x=-0.208246, y=-0.978077), iteration=2: 4.704630109478
    test 1154 258 257.960890817428 Chi(tan=4.68889, x=-1, y=-4.68889), iteration=3: 4.704630109478
    test 1155 258 257.986959155369 Xi(tan=4.69937, x=-0.418138, y=-1.96498), iteration=2: 4.704630109478

    test 1156 261 261.029683808843 Phi(tan=6.33499, x=-0.155923, y=-0.987769): 6.313751514675
    test 1157 261 261.000000000000 Beta(tan=6.31375, x=-0.156434, y=-0.987688): 6.313751514675
    test 1158 261 260.970221227440 Theta(tan=6.29258, x=-0.156948, y=-0.987607): 6.313751514675
    test 1159 261 260.985140337591 Mu(tan=6.30317, x=-0.156691, y=-0.987648): 6.313751514675
    test 1160 261 260.970286287762 Chi(tan=6.29263, x=-0.156947, y=-0.987607): 6.313751514675
    test 1161 261 260.990092546521 Xi(tan=6.30669, x=-0.156605, y=-0.987661): 6.313751514675

    test 1162 261 261.029683808843 Phi(tan=6.33499, x=-0.156434, y=-0.991011): 6.313751514675
    test 1163 261 261.000000000000 Beta(tan=6.31375, x=-0.156434, y=-0.987688): 6.313751514675
    test 1164 261 260.970221227440 Theta(tan=6.29258, x=-0.156434, y=-0.984377): 6.313751514675
    test 1165 261 260.985140337591 Mu(tan=6.30317, x=-0.156691, y=-0.987648), iteration=3: 6.313751514675
    test 1166 261 260.970286287762 Chi(tan=6.29263, x=-1, y=-6.29263), iteration=3: 6.313751514675
    test 1167 261 260.990092546521 Xi(tan=6.30669, x=-0.314617, y=-1.98419), iteration=3: 6.313751514675

    test 1168 264 264.019970846274 Phi(tan=9.54637, x=-0.104182, y=-0.994558): 9.514364454223
    test 1169 264 264.000000000000 Beta(tan=9.51436, x=-0.104528, y=-0.994522): 9.514364454223
    test 1170 264 263.979963440552 Theta(tan=9.48246, x=-0.104876, y=-0.994485): 9.514364454223
    test 1171 264 263.990002289461 Mu(tan=9.49842, x=-0.104702, y=-0.994504): 9.514364454223
    test 1172 264 263.980007825249 Chi(tan=9.48254, x=-0.104875, y=-0.994485): 9.514364454223
    test 1173 264 263.993334244416 Xi(tan=9.50373, x=-0.104644, y=-0.99451): 9.514364454223

    test 1174 264 264.019970846274 Phi(tan=9.54637, x=-0.104528, y=-0.997868): 9.514364454223
    test 1175 264 264.000000000000 Beta(tan=9.51436, x=-0.104528, y=-0.994522): 9.514364454223
    test 1176 264 263.979963440552 Theta(tan=9.48246, x=-0.104528, y=-0.991187): 9.514364454223
    test 1177 264 263.990002289461 Mu(tan=9.49842, x=-0.104702, y=-0.994504), iteration=3: 9.514364454223
    test 1178 264 263.980007825249 Chi(tan=9.48254, x=-1, y=-9.48254), iteration=3: 9.514364454223
    test 1179 264 263.993334244416 Xi(tan=9.50373, x=-0.210228, y=-1.99795), iteration=3: 9.514364454223

    test 1180 267 267.010040150331 Phi(tan=19.1453, x=-0.052161, y=-0.998639): 19.081136687728
    test 1181 267 267.000000000000 Beta(tan=19.0811, x=-0.052336, y=-0.99863): 19.081136687728
    test 1182 267 266.989926259040 Theta(tan=19.0172, x=-0.0525115, y=-0.99862): 19.081136687728
    test 1183 267 266.994973644128 Mu(tan=19.0492, x=-0.0524236, y=-0.998625): 19.081136687728
    test 1184 267 266.989948759333 Chi(tan=19.0173, x=-0.0525111, y=-0.99862): 19.081136687728
    test 1185 267 266.996648806705 Xi(tan=19.0598, x=-0.0523944, y=-0.998626): 19.081136687728

    test 1186 267 267.010040150331 Phi(tan=19.1453, x=-0.052336, y=-1.00199): 19.081136687728
    test 1187 267 267.000000000000 Beta(tan=19.0811, x=-0.052336, y=-0.99863): 19.081136687728
    test 1188 267 266.989926259040 Theta(tan=19.0172, x=-0.052336, y=-0.995281): 19.081136687728
    test 1189 267 266.994973644128 Mu(tan=19.0492, x=-0.0524236, y=-0.998625), iteration=3: 19.081136687728
    test 1190 267 266.989948759333 Chi(tan=19.0173, x=-1, y=-19.0173), iteration=3: 19.081136687728
    test 1191 267 266.996648806705 Xi(tan=19.0598, x=-0.105259, y=-2.00622), iteration=3: 19.081136687728

    test 1192 270 270.000000000000 Phi(tan=-inf, x=0.0, y=-1): -inf
    test 1193 270 270.000000000000 Beta(tan=-inf, x=0.0, y=-1): -inf
    test 1194 270 270.000000000000 Theta(tan=-inf, x=0.0, y=-1): -inf
    test 1195 270 270.000000000000 Mu(tan=-inf, x=0.0, y=-1): -inf
    test 1196 270 270.000000000000 Chi(tan=-inf, x=0.0, y=-1): -inf
    test 1197 270 270.000000000000 Xi(tan=-inf, x=0.0, y=-1): -inf

    test 1198 270 270.000000000000 Phi(tan=-inf, x=0.0, y=-1): -inf
    test 1199 270 270.000000000000 Beta(tan=-inf, x=0.0, y=-1): -inf
    test 1200 270 270.000000000000 Theta(tan=-inf, x=0.0, y=-1): -inf
    test 1201 270 270.000000000000 Mu(tan=-inf, x=0.0, y=-1): -inf
    test 1202 270 270.000000000000 Chi(tan=-inf, x=0.0, y=-1): -inf
    test 1203 270 270.000000000000 Xi(tan=-inf, x=0.0, y=-1): -inf

    test 1204 273 272.989959849669 Phi(tan=-19.1453, x=0.052161, y=-0.998639): -19.081136687728
    test 1205 273 273.000000000000 Beta(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 1206 273 273.010073740960 Theta(tan=-19.0172, x=0.0525115, y=-0.99862): -19.081136687728
    test 1207 273 273.005026355872 Mu(tan=-19.0492, x=0.0524236, y=-0.998625): -19.081136687728
    test 1208 273 273.010051240667 Chi(tan=-19.0173, x=0.0525111, y=-0.99862): -19.081136687728
    test 1209 273 273.003351193295 Xi(tan=-19.0598, x=0.0523944, y=-0.998626): -19.081136687728

    test 1210 273 272.989959849669 Phi(tan=-19.1453, x=0.052336, y=-1.00199): -19.081136687728
    test 1211 273 273.000000000000 Beta(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 1212 273 273.010073740960 Theta(tan=-19.0172, x=0.052336, y=-0.995281): -19.081136687728
    test 1213 273 273.005026355872 Mu(tan=-19.0492, x=0.0524236, y=-0.998625), iteration=2: -19.081136687728
    test 1214 273 273.010051240667 Chi(tan=-19.0173, x=1.0, y=-19.0173), iteration=3: -19.081136687728
    test 1215 273 273.003351193295 Xi(tan=-19.0598, x=0.105259, y=-2.00622), iteration=3: -19.081136687728

    test 1216 276 275.980029153726 Phi(tan=-9.54637, x=0.104182, y=-0.994558): -9.514364454223
    test 1217 276 276.000000000000 Beta(tan=-9.51436, x=0.104528, y=-0.994522): -9.514364454223
    test 1218 276 276.020036559448 Theta(tan=-9.48246, x=0.104876, y=-0.994485): -9.514364454223
    test 1219 276 276.009997710539 Mu(tan=-9.49842, x=0.104702, y=-0.994504): -9.514364454223
    test 1220 276 276.019992174751 Chi(tan=-9.48254, x=0.104875, y=-0.994485): -9.514364454223
    test 1221 276 276.006665755584 Xi(tan=-9.50373, x=0.104644, y=-0.99451): -9.514364454223

    test 1222 276 275.980029153726 Phi(tan=-9.54637, x=0.104528, y=-0.997868): -9.514364454223
    test 1223 276 276.000000000000 Beta(tan=-9.51436, x=0.104528, y=-0.994522): -9.514364454223
    test 1224 276 276.020036559448 Theta(tan=-9.48246, x=0.104528, y=-0.991187): -9.514364454223
    test 1225 276 276.009997710539 Mu(tan=-9.49842, x=0.104702, y=-0.994504), iteration=3: -9.514364454223
    test 1226 276 276.019992174751 Chi(tan=-9.48254, x=1.0, y=-9.48254), iteration=2: -9.514364454223
    test 1227 276 276.006665755584 Xi(tan=-9.50373, x=0.210228, y=-1.99795), iteration=3: -9.514364454223

    test 1228 279 278.970316191157 Phi(tan=-6.33499, x=0.155923, y=-0.987769): -6.313751514675
    test 1229 279 279.000000000000 Beta(tan=-6.31375, x=0.156434, y=-0.987688): -6.313751514675
    test 1230 279 279.029778772560 Theta(tan=-6.29258, x=0.156948, y=-0.987607): -6.313751514675
    test 1231 279 279.014859662409 Mu(tan=-6.30317, x=0.156691, y=-0.987648): -6.313751514675
    test 1232 279 279.029713712238 Chi(tan=-6.29263, x=0.156947, y=-0.987607): -6.313751514675
    test 1233 279 279.009907453479 Xi(tan=-6.30669, x=0.156605, y=-0.987661): -6.313751514675

    test 1234 279 278.970316191157 Phi(tan=-6.33499, x=0.156434, y=-0.991011): -6.313751514675
    test 1235 279 279.000000000000 Beta(tan=-6.31375, x=0.156434, y=-0.987688): -6.313751514675
    test 1236 279 279.029778772560 Theta(tan=-6.29258, x=0.156434, y=-0.984377): -6.313751514675
    test 1237 279 279.014859662409 Mu(tan=-6.30317, x=0.156691, y=-0.987648), iteration=2: -6.313751514675
    test 1238 279 279.029713712238 Chi(tan=-6.29263, x=1.0, y=-6.29263), iteration=3: -6.313751514675
    test 1239 279 279.009907453479 Xi(tan=-6.30669, x=0.314617, y=-1.98419), iteration=3: -6.313751514675

    test 1240 282 281.960926901992 Phi(tan=-4.72046, x=0.207245, y=-0.978289): -4.704630109478
    test 1241 282 282.000000000000 Beta(tan=-4.70463, x=0.207912, y=-0.978148): -4.704630109478
    test 1242 282 282.039193161869 Theta(tan=-4.68886, x=0.208581, y=-0.978005): -4.704630109478
    test 1243 282 282.019559002680 Mu(tan=-4.69675, x=0.208246, y=-0.978077): -4.704630109478
    test 1244 282 282.039109182572 Chi(tan=-4.68889, x=0.208579, y=-0.978005): -4.704630109478
    test 1245 282 282.013040844631 Xi(tan=-4.69937, x=0.208134, y=-0.9781): -4.704630109478

    test 1246 282 281.960926901992 Phi(tan=-4.72046, x=0.207912, y=-0.981438): -4.704630109478
    test 1247 282 282.000000000000 Beta(tan=-4.70463, x=0.207912, y=-0.978148): -4.704630109478
    test 1248 282 282.039193161869 Theta(tan=-4.68886, x=0.207912, y=-0.974868): -4.704630109478
    test 1249 282 282.019559002680 Mu(tan=-4.69675, x=0.208246, y=-0.978077), iteration=2: -4.704630109478
    test 1250 282 282.039109182572 Chi(tan=-4.68889, x=1.0, y=-4.68889), iteration=2: -4.704630109478
    test 1251 282 282.013040844631 Xi(tan=-4.69937, x=0.418138, y=-1.96498), iteration=3: -4.704630109478

    test 1252 285 284.951963747366 Phi(tan=-3.74461, x=0.258009, y=-0.966142): -3.732050807569
    test 1253 285 285.000000000000 Beta(tan=-3.73205, x=0.258819, y=-0.965926): -3.732050807569
    test 1254 285 285.048176169243 Theta(tan=-3.71954, x=0.259631, y=-0.965708): -3.732050807569
    test 1255 285 285.024044295704 Mu(tan=-3.7258, x=0.259224, y=-0.965817): -3.732050807569
    test 1256 285 285.048075510345 Chi(tan=-3.71956, x=0.259629, y=-0.965708): -3.732050807569
    test 1257 285 285.016031662804 Xi(tan=-3.72788, x=0.259089, y=-0.965853): -3.732050807569

    test 1258 285 284.951963747366 Phi(tan=-3.74461, x=0.258819, y=-0.969175): -3.732050807569
    test 1259 285 285.000000000000 Beta(tan=-3.73205, x=0.258819, y=-0.965926): -3.732050807569
    test 1260 285 285.048176169243 Theta(tan=-3.71954, x=0.258819, y=-0.962687): -3.732050807569
    test 1261 285 285.024044295704 Mu(tan=-3.7258, x=0.259224, y=-0.965817), iteration=3: -3.732050807569
    test 1262 285 285.048075510345 Chi(tan=-3.71956, x=1.0, y=-3.71956), iteration=3: -3.732050807569
    test 1263 285 285.016031662804 Xi(tan=-3.72788, x=0.520505, y=-1.94038), iteration=3: -3.732050807569

    test 1264 288 287.943524604789 Phi(tan=-3.08804, x=0.308079, y=-0.951361): -3.077683537175
    test 1265 288 288.000000000000 Beta(tan=-3.07768, x=0.309017, y=-0.951057): -3.077683537175
    test 1266 288 288.056629049516 Theta(tan=-3.06736, x=0.309957, y=-0.950751): -3.077683537175
    test 1267 288 288.028266440279 Mu(tan=-3.07253, x=0.309486, y=-0.950904): -3.077683537175
    test 1268 288 288.056514350594 Chi(tan=-3.06739, x=0.309955, y=-0.950751): -3.077683537175
    test 1269 288 288.018847190516 Xi(tan=-3.07424, x=0.30933, y=-0.950955): -3.077683537175

    test 1270 288 287.943524604789 Phi(tan=-3.08804, x=0.309017, y=-0.954256): -3.077683537175
    test 1271 288 288.000000000000 Beta(tan=-3.07768, x=0.309017, y=-0.951057): -3.077683537175
    test 1272 288 288.056629049516 Theta(tan=-3.06736, x=0.309017, y=-0.947868): -3.077683537175
    test 1273 288 288.028266440279 Mu(tan=-3.07253, x=0.309486, y=-0.950904), iteration=3: -3.077683537175
    test 1274 288 288.056514350594 Chi(tan=-3.06739, x=1.0, y=-3.06739), iteration=2: -3.077683537175
    test 1275 288 288.018847190516 Xi(tan=-3.07424, x=0.621437, y=-1.91045), iteration=3: -3.077683537175

    test 1276 291 290.935701709947 Phi(tan=-2.61385, x=0.35732, y=-0.933982): -2.605089064694
    test 1277 291 291.000000000000 Beta(tan=-2.60509, x=0.358368, y=-0.93358): -2.605089064694
    test 1278 291 291.064458966605 Theta(tan=-2.59635, x=0.359418, y=-0.933177): -2.605089064694
    test 1279 291 291.032179205851 Mu(tan=-2.60072, x=0.358892, y=-0.933379): -2.605089064694
    test 1280 291 291.064333171016 Chi(tan=-2.59637, x=0.359416, y=-0.933177): -2.605089064694
    test 1281 291 291.021456615288 Xi(tan=-2.60218, x=0.358718, y=-0.933446): -2.605089064694

    test 1282 291 290.935701709947 Phi(tan=-2.61385, x=0.358368, y=-0.936721): -2.605089064694
    test 1283 291 291.000000000000 Beta(tan=-2.60509, x=0.358368, y=-0.93358): -2.605089064694
    test 1284 291 291.064458966605 Theta(tan=-2.59635, x=0.358368, y=-0.93045): -2.605089064694
    test 1285 291 291.032179205851 Mu(tan=-2.60072, x=0.358892, y=-0.933379), iteration=3: -2.605089064694
    test 1286 291 291.064333171016 Chi(tan=-2.59637, x=1.0, y=-2.59637), iteration=3: -2.605089064694
    test 1287 291 291.021456615288 Xi(tan=-2.60218, x=0.720656, y=-1.87527), iteration=3: -2.605089064694

    test 1288 294 293.928580656019 Phi(tan=-2.25359, x=0.405598, y=-0.914052): -2.246036773904
    test 1289 294 294.000000000000 Beta(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 1290 294 294.071580020440 Theta(tan=-2.23851, x=0.407878, y=-0.913037): -2.246036773904
    test 1291 294 294.035739737781 Mu(tan=-2.24227, x=0.407306, y=-0.913292): -2.246036773904
    test 1292 294 294.071446269026 Chi(tan=-2.23852, x=0.407875, y=-0.913038): -2.246036773904
    test 1293 294 294.023831365709 Xi(tan=-2.24352, x=0.407117, y=-0.913376): -2.246036773904

    test 1294 294 293.928580656019 Phi(tan=-2.25359, x=0.406737, y=-0.916619): -2.246036773904
    test 1295 294 294.000000000000 Beta(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 1296 294 294.071580020440 Theta(tan=-2.23851, x=0.406737, y=-0.910483): -2.246036773904
    test 1297 294 294.035739737781 Mu(tan=-2.24227, x=0.407306, y=-0.913292), iteration=2: -2.246036773904
    test 1298 294 294.071446269026 Chi(tan=-2.23852, x=1.0, y=-2.23852), iteration=3: -2.246036773904
    test 1299 294 294.023831365709 Xi(tan=-2.24352, x=0.817889, y=-1.83495), iteration=3: -2.246036773904

    test 1300 297 296.922239461028 Phi(tan=-1.96921, x=0.452781, y=-0.891622): -1.962610505505
    test 1301 297 297.000000000000 Beta(tan=-1.96261, x=0.45399, y=-0.891007): -1.962610505505
    test 1302 297 297.077914193009 Theta(tan=-1.95603, x=0.455202, y=-0.890388): -1.962610505505
    test 1303 297 297.038909026247 Mu(tan=-1.95932, x=0.454595, y=-0.890698): -1.962610505505
    test 1304 297 297.077775712381 Chi(tan=-1.95604, x=0.4552, y=-0.890389): -1.962610505505
    test 1305 297 297.025945423666 Xi(tan=-1.96042, x=0.454394, y=-0.890801): -1.962610505505

    test 1306 297 296.922239461028 Phi(tan=-1.96921, x=0.45399, y=-0.894004): -1.962610505505
    test 1307 297 297.000000000000 Beta(tan=-1.96261, x=0.45399, y=-0.891007): -1.962610505505
    test 1308 297 297.077914193009 Theta(tan=-1.95603, x=0.45399, y=-0.888019): -1.962610505505
    test 1309 297 297.038909026247 Mu(tan=-1.95932, x=0.454595, y=-0.890698), iteration=3: -1.962610505505
    test 1310 297 297.077775712381 Chi(tan=-1.95604, x=1.0, y=-1.95604), iteration=2: -1.962610505505
    test 1311 297 297.025945423666 Xi(tan=-1.96042, x=0.912868, y=-1.7896), iteration=3: -1.962610505505

    test 1312 300 299.916747713236 Phi(tan=-1.73788, x=0.498741, y=-0.866751): -1.732050807569
    test 1313 300 300.000000000000 Beta(tan=-1.73205, x=0.5, y=-0.866025): -1.732050807569
    test 1314 300 300.083392202979 Theta(tan=-1.72624, x=0.50126, y=-0.865297): -1.732050807569
    test 1315 300 300.041652333623 Mu(tan=-1.72915, x=0.500629, y=-0.865662): -1.732050807569
    test 1316 300 300.083252192986 Chi(tan=-1.72625, x=0.501258, y=-0.865298): -1.732050807569
    test 1317 300 300.027775609399 Xi(tan=-1.73011, x=0.50042, y=-0.865783): -1.732050807569

    test 1318 300 299.916747713236 Phi(tan=-1.73788, x=0.5, y=-0.868939): -1.732050807569
    test 1319 300 300.000000000000 Beta(tan=-1.73205, x=0.5, y=-0.866025): -1.732050807569
    test 1320 300 300.083392202979 Theta(tan=-1.72624, x=0.5, y=-0.863122): -1.732050807569
    test 1321 300 300.041652333623 Mu(tan=-1.72915, x=0.500629, y=-0.865662), iteration=3: -1.732050807569
    test 1322 300 300.083252192986 Chi(tan=-1.72625, x=1.0, y=-1.72625), iteration=3: -1.732050807569
    test 1323 300 300.027775609399 Xi(tan=-1.73011, x=1.00533, y=-1.73934), iteration=3: -1.732050807569

    test 1324 303 302.912165803903 Phi(tan=-1.54505, x=0.543353, y=-0.839505): -1.539864963815
    test 1325 303 303.000000000000 Beta(tan=-1.53986, x=0.544639, y=-0.838671): -1.539864963815
    test 1326 303 303.087954259505 Theta(tan=-1.5347, x=0.545926, y=-0.837834): -1.539864963815
    test 1327 303 303.043939575694 Mu(tan=-1.53728, x=0.545282, y=-0.838253): -1.539864963815
    test 1328 303 303.087815784539 Chi(tan=-1.53471, x=0.545924, y=-0.837835): -1.539864963815
    test 1329 303 303.029301836223 Xi(tan=-1.53814, x=0.545068, y=-0.838392): -1.539864963815

    test 1330 303 302.912165803903 Phi(tan=-1.54505, x=0.544639, y=-0.841492): -1.539864963815
    test 1331 303 303.000000000000 Beta(tan=-1.53986, x=0.544639, y=-0.838671): -1.539864963815
    test 1332 303 303.087954259505 Theta(tan=-1.5347, x=0.544639, y=-0.835859): -1.539864963815
    test 1333 303 303.043939575694 Mu(tan=-1.53728, x=0.545282, y=-0.838253), iteration=2: -1.539864963815
    test 1334 303 303.087815784539 Chi(tan=-1.53471, x=1.0, y=-1.53471), iteration=3: -1.539864963815
    test 1335 303 303.029301836223 Xi(tan=-1.53814, x=1.09503, y=-1.68431), iteration=2: -1.539864963815

    test 1336 306 305.908544256035 Phi(tan=-1.38101, x=0.586493, y=-0.809954): -1.376381920471
    test 1337 306 306.000000000000 Beta(tan=-1.37638, x=0.587785, y=-0.809017): -1.376381920471
    test 1338 306 306.091550707249 Theta(tan=-1.37177, x=0.589077, y=-0.808077): -1.376381920471
    test 1339 306 306.045745652474 Mu(tan=-1.37407, x=0.588431, y=-0.808547): -1.376381920471
    test 1340 306 306.091416595783 Chi(tan=-1.37177, x=0.589075, y=-0.808078): -1.376381920471
    test 1341 306 306.030507332108 Xi(tan=-1.37484, x=0.588216, y=-0.808704): -1.376381920471

    test 1342 306 305.908544256035 Phi(tan=-1.38101, x=0.587785, y=-0.811739): -1.376381920471
    test 1343 306 306.000000000000 Beta(tan=-1.37638, x=0.587785, y=-0.809017): -1.376381920471
    test 1344 306 306.091550707249 Theta(tan=-1.37177, x=0.587785, y=-0.806305): -1.376381920471
    test 1345 306 306.045745652474 Mu(tan=-1.37407, x=0.588431, y=-0.808547), iteration=2: -1.376381920471
    test 1346 306 306.091416595783 Chi(tan=-1.37177, x=1.0, y=-1.37177), iteration=3: -1.376381920471
    test 1347 306 306.030507332108 Xi(tan=-1.37484, x=1.18171, y=-1.62467), iteration=2: -1.376381920471

    test 1348 309 308.905923156872 Phi(tan=-1.23905, x=0.628044, y=-0.778178): -1.234897156535
    test 1349 309 309.000000000000 Beta(tan=-1.2349, x=0.62932, y=-0.777146): -1.234897156535
    test 1350 309 309.094142555964 Theta(tan=-1.23076, x=0.630596, y=-0.776111): -1.234897156535
    test 1351 309 309.047050724971 Mu(tan=-1.23283, x=0.629958, y=-0.776629): -1.234897156535
    test 1352 309 309.094015312359 Chi(tan=-1.23076, x=0.630595, y=-0.776112): -1.234897156535
    test 1353 309 309.031378825633 Xi(tan=-1.23352, x=0.629746, y=-0.776801): -1.234897156535

    test 1354 309 308.905923156872 Phi(tan=-1.23905, x=0.62932, y=-0.77976): -1.234897156535
    test 1355 309 309.000000000000 Beta(tan=-1.2349, x=0.62932, y=-0.777146): -1.234897156535
    test 1356 309 309.094142555964 Theta(tan=-1.23076, x=0.62932, y=-0.77454): -1.234897156535
    test 1357 309 309.047050724971 Mu(tan=-1.23283, x=0.629958, y=-0.776629), iteration=3: -1.234897156535
    test 1358 309 309.094015312359 Chi(tan=-1.23076, x=1.0, y=-1.23076), iteration=3: -1.234897156535
    test 1359 309 309.031378825633 Xi(tan=-1.23352, x=1.26515, y=-1.56058), iteration=3: -1.234897156535

    test 1360 312 311.904331700939 Phi(tan=-1.11435, x=0.667889, y=-0.744261): -1.110612514829
    test 1361 312 312.000000000000 Beta(tan=-1.11061, x=0.669131, y=-0.743145): -1.110612514829
    test 1362 312 312.095701889505 Theta(tan=-1.10689, x=0.670371, y=-0.742026): -1.110612514829
    test 1363 312 312.047840434776 Mu(tan=-1.10875, x=0.669751, y=-0.742586): -1.110612514829
    test 1364 312 312.095583621542 Chi(tan=-1.10689, x=0.670369, y=-0.742028): -1.110612514829
    test 1365 312 312.031906694159 Xi(tan=-1.10937, x=0.669544, y=-0.742772): -1.110612514829

    test 1366 312 311.904331700939 Phi(tan=-1.11435, x=0.669131, y=-0.745645): -1.110612514829
    test 1367 312 312.000000000000 Beta(tan=-1.11061, x=0.669131, y=-0.743145): -1.110612514829
    test 1368 312 312.095701889505 Theta(tan=-1.10689, x=0.669131, y=-0.740653): -1.110612514829
    test 1369 312 312.047840434776 Mu(tan=-1.10875, x=0.669751, y=-0.742586), iteration=2: -1.110612514829
    test 1370 312 312.095583621542 Chi(tan=-1.10689, x=1.0, y=-1.10689), iteration=2: -1.110612514829
    test 1371 312 312.031906694159 Xi(tan=-1.10937, x=1.3451, y=-1.49221), iteration=2: -1.110612514829

    test 1372 315 314.903787849420 Phi(tan=-1.00336, x=0.705918, y=-0.708293): -1.000000000000
    test 1373 315 315.000000000000 Beta(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 1374 315 315.096212150580 Theta(tan=-0.996647, x=0.708293, y=-0.705918): -1.000000000000
    test 1375 315 315.048106063986 Mu(tan=-0.998322, x=0.7077, y=-0.706513): -1.000000000000
    test 1376 315 315.096104515452 Chi(tan=-0.996651, x=0.708292, y=-0.70592): -1.000000000000
    test 1377 315 315.032085072505 Xi(tan=-0.998881, x=0.707503, y=-0.706711): -1.000000000000

    test 1378 315 314.903787849420 Phi(tan=-1.00336, x=0.707107, y=-0.709486): -1.000000000000
    test 1379 315 315.000000000000 Beta(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 1380 315 315.096212150580 Theta(tan=-0.996647, x=0.707107, y=-0.704736): -1.000000000000
    test 1381 315 315.048106063986 Mu(tan=-0.998322, x=0.7077, y=-0.706513), iteration=2: -1.000000000000
    test 1382 315 315.096104515452 Chi(tan=-0.996651, x=1.0, y=-0.996651), iteration=2: -1.000000000000
    test 1383 315 315.032085072505 Xi(tan=-0.998881, x=1.42136, y=-1.41977), iteration=3: -1.000000000000

    test 1384 318 317.904298110495 Phi(tan=-0.903433, x=0.742026, y=-0.670371): -0.900404044298
    test 1385 318 318.000000000000 Beta(tan=-0.900404, x=0.743145, y=-0.669131): -0.900404044298
    test 1386 318 318.095668299061 Theta(tan=-0.897385, x=0.744261, y=-0.667889): -0.900404044298
    test 1387 318 318.047844633583 Mu(tan=-0.898893, x=0.743703, y=-0.66851): -0.900404044298
    test 1388 318 318.095572469746 Chi(tan=-0.897388, x=0.74426, y=-0.66789): -0.900404044298
    test 1389 318 318.031911920774 Xi(tan=-0.899396, x=0.743517, y=-0.668717): -0.900404044298

    test 1390 318 317.904298110495 Phi(tan=-0.903433, x=0.743145, y=-0.671382): -0.900404044298
    test 1391 318 318.000000000000 Beta(tan=-0.900404, x=0.743145, y=-0.669131): -0.900404044298
    test 1392 318 318.095668299061 Theta(tan=-0.897385, x=0.743145, y=-0.666887): -0.900404044298
    test 1393 318 318.047844633583 Mu(tan=-0.898893, x=0.743703, y=-0.66851), iteration=3: -0.900404044298
    test 1394 318 318.095572469746 Chi(tan=-0.897388, x=1.0, y=-0.897388), iteration=3: -0.900404044298
    test 1395 318 318.031911920774 Xi(tan=-0.899396, x=1.49371, y=-1.34344), iteration=2: -0.900404044298

    test 1396 321 320.905857444036 Phi(tan=-0.812508, x=0.776111, y=-0.630596): -0.809784033195
    test 1397 321 321.000000000000 Beta(tan=-0.809784, x=0.777146, y=-0.62932): -0.809784033195
    test 1398 321 321.094076843128 Theta(tan=-0.807069, x=0.778178, y=-0.628044): -0.809784033195
    test 1399 321 321.047058939078 Mu(tan=-0.808425, x=0.777663, y=-0.628682): -0.809784033195
    test 1400 321 321.093993496154 Chi(tan=-0.807071, x=0.778177, y=-0.628045): -0.809784033195
    test 1401 321 321.031389050435 Xi(tan=-0.808877, x=0.777491, y=-0.628895): -0.809784033195

    test 1402 321 320.905857444036 Phi(tan=-0.812508, x=0.777146, y=-0.631437): -0.809784033195
    test 1403 321 321.000000000000 Beta(tan=-0.809784, x=0.777146, y=-0.62932): -0.809784033195
    test 1404 321 321.094076843128 Theta(tan=-0.807069, x=0.777146, y=-0.62721): -0.809784033195
    test 1405 321 321.047058939078 Mu(tan=-0.808425, x=0.777663, y=-0.628682), iteration=3: -0.809784033195
    test 1406 321 321.093993496154 Chi(tan=-0.807071, x=1.0, y=-0.807071), iteration=3: -0.809784033195
    test 1407 321 321.031389050435 Xi(tan=-0.808877, x=1.56196, y=-1.26344), iteration=3: -0.809784033195

    test 1408 324 323.908449292751 Phi(tan=-0.728987, x=0.808077, y=-0.589077): -0.726542528005
    test 1409 324 324.000000000000 Beta(tan=-0.726543, x=0.809017, y=-0.587785): -0.726542528005
    test 1410 324 324.091455743965 Theta(tan=-0.724107, x=0.809954, y=-0.586493): -0.726542528005
    test 1411 324 324.045757522886 Mu(tan=-0.725323, x=0.809486, y=-0.587139): -0.726542528005
    test 1412 324 324.091385068640 Chi(tan=-0.724108, x=0.809953, y=-0.586494): -0.726542528005
    test 1413 324 324.030522108226 Xi(tan=-0.725729, x=0.80933, y=-0.587354): -0.726542528005

    test 1414 324 323.908449292751 Phi(tan=-0.728987, x=0.809017, y=-0.589763): -0.726542528005
    test 1415 324 324.000000000000 Beta(tan=-0.726543, x=0.809017, y=-0.587785): -0.726542528005
    test 1416 324 324.091455743965 Theta(tan=-0.724107, x=0.809017, y=-0.585815): -0.726542528005
    test 1417 324 324.045757522886 Mu(tan=-0.725323, x=0.809486, y=-0.587139), iteration=2: -0.726542528005
    test 1418 324 324.091385068640 Chi(tan=-0.724108, x=1.0, y=-0.724108), iteration=2: -0.726542528005
    test 1419 324 324.030522108226 Xi(tan=-0.725729, x=1.62593, y=-1.17998), iteration=2: -0.726542528005

    test 1420 327 326.912045740495 Phi(tan=-0.651592, x=0.837834, y=-0.545926): -0.649407593198
    test 1421 327 327.000000000000 Beta(tan=-0.649408, x=0.838671, y=-0.544639): -0.649407593198
    test 1422 327 327.087834196097 Theta(tan=-0.64723, x=0.839505, y=-0.543353): -0.649407593198
    test 1423 327 327.043954583618 Mu(tan=-0.648317, x=0.839088, y=-0.543995): -0.649407593198
    test 1424 327 327.087775924345 Chi(tan=-0.647232, x=0.839504, y=-0.543354): -0.649407593198
    test 1425 327 327.029320517871 Xi(tan=-0.64868, x=0.838949, y=-0.54421): -0.649407593198

    test 1426 327 326.912045740495 Phi(tan=-0.651592, x=0.838671, y=-0.546471): -0.649407593198
    test 1427 327 327.000000000000 Beta(tan=-0.649408, x=0.838671, y=-0.544639): -0.649407593198
    test 1428 327 327.087834196097 Theta(tan=-0.64723, x=0.838671, y=-0.542813): -0.649407593198
    test 1429 327 327.043954583618 Mu(tan=-0.648317, x=0.839088, y=-0.543995), iteration=3: -0.649407593198
    test 1430 327 327.087775924345 Chi(tan=-0.647232, x=1.0, y=-0.647232), iteration=3: -0.649407593198
    test 1431 327 327.029320517871 Xi(tan=-0.64868, x=1.68543, y=-1.09331), iteration=3: -0.649407593198

    test 1432 330 329.916607797021 Phi(tan=-0.579293, x=0.865297, y=-0.50126): -0.577350269190
    test 1433 330 330.000000000000 Beta(tan=-0.57735, x=0.866025, y=-0.5): -0.577350269190
    test 1434 330 330.083252286764 Theta(tan=-0.575415, x=0.866751, y=-0.498741): -0.577350269190
    test 1435 330 330.041669823142 Mu(tan=-0.576381, x=0.866389, y=-0.49937): -0.577350269190
    test 1436 330 330.083205741820 Chi(tan=-0.575416, x=0.866751, y=-0.498742): -0.577350269190
    test 1437 330 330.027797380102 Xi(tan=-0.576704, x=0.866268, y=-0.49958): -0.577350269190

    test 1438 330 329.916607797021 Phi(tan=-0.579293, x=0.866025, y=-0.501682): -0.577350269190
    test 1439 330 330.000000000000 Beta(tan=-0.57735, x=0.866025, y=-0.5): -0.577350269190
    test 1440 330 330.083252286764 Theta(tan=-0.575415, x=0.866025, y=-0.498324): -0.577350269190
    test 1441 330 330.041669823142 Mu(tan=-0.576381, x=0.866389, y=-0.49937), iteration=3: -0.577350269190
    test 1442 330 330.083205741820 Chi(tan=-0.575416, x=1.0, y=-0.575416), iteration=2: -0.577350269190
    test 1443 330 330.027797380102 Xi(tan=-0.576704, x=1.74031, y=-1.00365), iteration=2: -0.577350269190

    test 1444 333 332.922085806991 Phi(tan=-0.51124, x=0.890388, y=-0.455202): -0.509525449494
    test 1445 333 333.000000000000 Beta(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494
    test 1446 333 333.077760538972 Theta(tan=-0.507817, x=0.891622, y=-0.452781): -0.509525449494
    test 1447 333 333.038928232986 Mu(tan=-0.50867, x=0.891315, y=-0.453385): -0.509525449494
    test 1448 333 333.077724700381 Chi(tan=-0.507818, x=0.891622, y=-0.452781): -0.509525449494
    test 1449 333 333.025969331940 Xi(tan=-0.508955, x=0.891212, y=-0.453587): -0.509525449494

    test 1450 333 332.922085806991 Phi(tan=-0.51124, x=0.891007, y=-0.455518): -0.509525449494
    test 1451 333 333.000000000000 Beta(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494
    test 1452 333 333.077760538972 Theta(tan=-0.507817, x=0.891007, y=-0.452468): -0.509525449494
    test 1453 333 333.038928232986 Mu(tan=-0.50867, x=0.891315, y=-0.453385), iteration=2: -0.509525449494
    test 1454 333 333.077724700381 Chi(tan=-0.507818, x=1.0, y=-0.507818), iteration=2: -0.509525449494
    test 1455 333 333.025969331940 Xi(tan=-0.508955, x=1.79043, y=-0.911246), iteration=2: -0.509525449494

    test 1456 336 335.928419979560 Phi(tan=-0.446726, x=0.913037, y=-0.407878): -0.445228685309
    test 1457 336 336.000000000000 Beta(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 1458 336 336.071419343981 Theta(tan=-0.443736, x=0.914052, y=-0.405598): -0.445228685309
    test 1459 336 336.035759822314 Mu(tan=-0.444481, x=0.913799, y=-0.406166): -0.445228685309
    test 1460 336 336.071392925660 Chi(tan=-0.443736, x=0.914052, y=-0.405598): -0.445228685309
    test 1461 336 336.023856366648 Xi(tan=-0.44473, x=0.913715, y=-0.406356): -0.445228685309

    test 1462 336 335.928419979560 Phi(tan=-0.446726, x=0.913545, y=-0.408105): -0.445228685309
    test 1463 336 336.000000000000 Beta(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 1464 336 336.071419343981 Theta(tan=-0.443736, x=0.913545, y=-0.405373): -0.445228685309
    test 1465 336 336.035759822314 Mu(tan=-0.444481, x=0.913799, y=-0.406166), iteration=3: -0.445228685309
    test 1466 336 336.071392925660 Chi(tan=-0.443736, x=1.0, y=-0.443736), iteration=2: -0.445228685309
    test 1467 336 336.023856366648 Xi(tan=-0.44473, x=1.83563, y=-0.816362), iteration=3: -0.445228685309

    test 1468 339 338.935541033395 Phi(tan=-0.385155, x=0.933177, y=-0.359418): -0.383864035035
    test 1469 339 339.000000000000 Beta(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035
    test 1470 339 339.064298290053 Theta(tan=-0.382577, x=0.933982, y=-0.35732): -0.383864035035
    test 1471 339 339.032199290387 Mu(tan=-0.383219, x=0.933782, y=-0.357843): -0.383864035035
    test 1472 339 339.064279827645 Chi(tan=-0.382577, x=0.933982, y=-0.35732): -0.383864035035
    test 1473 339 339.021481616233 Xi(tan=-0.383434, x=0.933715, y=-0.358018): -0.383864035035

    test 1474 339 338.935541033395 Phi(tan=-0.385155, x=0.93358, y=-0.359574): -0.383864035035
    test 1475 339 339.000000000000 Beta(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035
    test 1476 339 339.064298290053 Theta(tan=-0.382577, x=0.93358, y=-0.357166): -0.383864035035
    test 1477 339 339.032199290387 Mu(tan=-0.383219, x=0.933782, y=-0.357843), iteration=3: -0.383864035035
    test 1478 339 339.064279827645 Chi(tan=-0.382577, x=1.0, y=-0.382577), iteration=3: -0.383864035035
    test 1479 339 339.021481616233 Xi(tan=-0.383434, x=1.87581, y=-0.719251), iteration=3: -0.383864035035

    test 1480 342 341.943370950484 Phi(tan=-0.326013, x=0.950751, y=-0.309957): -0.324919696233
    test 1481 342 342.000000000000 Beta(tan=-0.32492, x=0.951057, y=-0.309017): -0.324919696233
    test 1482 342 342.056475395211 Theta(tan=-0.32383, x=0.951361, y=-0.308079): -0.324919696233
    test 1483 342 342.028285647029 Mu(tan=-0.324374, x=0.951209, y=-0.308547): -0.324919696233
    test 1484 342 342.056463338580 Chi(tan=-0.323831, x=0.951361, y=-0.30808): -0.324919696233
    test 1485 342 342.018871098804 Xi(tan=-0.324556, x=0.951158, y=-0.308704): -0.324919696233

    test 1486 342 341.943370950484 Phi(tan=-0.326013, x=0.951057, y=-0.310057): -0.324919696233
    test 1487 342 342.000000000000 Beta(tan=-0.32492, x=0.951057, y=-0.309017): -0.324919696233
    test 1488 342 342.056475395211 Theta(tan=-0.32383, x=0.951057, y=-0.307981): -0.324919696233
    test 1489 342 342.028285647029 Mu(tan=-0.324374, x=0.951209, y=-0.308547), iteration=2: -0.324919696233
    test 1490 342 342.056463338580 Chi(tan=-0.323831, x=1.0, y=-0.323831), iteration=3: -0.324919696233
    test 1491 342 342.018871098804 Xi(tan=-0.324556, x=1.91086, y=-0.62018), iteration=2: -0.324919696233

    test 1492 345 344.951823830757 Phi(tan=-0.268851, x=0.965708, y=-0.259631): -0.267949192431
    test 1493 345 345.000000000000 Beta(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431
    test 1494 345 345.048036252634 Theta(tan=-0.267051, x=0.966142, y=-0.258009): -0.267949192431
    test 1495 345 345.024061785238 Mu(tan=-0.267499, x=0.966034, y=-0.258413): -0.267949192431
    test 1496 345 345.048029059158 Chi(tan=-0.267051, x=0.966142, y=-0.258009): -0.267949192431
    test 1497 345 345.016053433529 Xi(tan=-0.267649, x=0.965998, y=-0.258548): -0.267949192431

    test 1498 345 344.951823830757 Phi(tan=-0.268851, x=0.965926, y=-0.25969): -0.267949192431
    test 1499 345 345.000000000000 Beta(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431
    test 1500 345 345.048036252634 Theta(tan=-0.267051, x=0.965926, y=-0.257951): -0.267949192431
    test 1501 345 345.024061785238 Mu(tan=-0.267499, x=0.966034, y=-0.258413), iteration=3: -0.267949192431
    test 1502 345 345.048029059158 Chi(tan=-0.267051, x=1.0, y=-0.267051), iteration=3: -0.267949192431
    test 1503 345 345.016053433529 Xi(tan=-0.267649, x=1.94067, y=-0.519419), iteration=3: -0.267949192431

    test 1504 348 347.960806838131 Phi(tan=-0.213272, x=0.978005, y=-0.208581): -0.212556561670
    test 1505 348 348.000000000000 Beta(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670
    test 1506 348 348.039073098008 Theta(tan=-0.211844, x=0.978289, y=-0.207245): -0.212556561670
    test 1507 348 348.019574010622 Mu(tan=-0.2122, x=0.978219, y=-0.207578): -0.212556561670
    test 1508 348 348.039069322354 Chi(tan=-0.211844, x=0.978289, y=-0.207245): -0.212556561670
    test 1509 348 348.013059526305 Xi(tan=-0.212318, x=0.978195, y=-0.207689): -0.212556561670

    test 1510 348 347.960806838131 Phi(tan=-0.213272, x=0.978148, y=-0.208611): -0.212556561670
    test 1511 348 348.000000000000 Beta(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670
    test 1512 348 348.039073098008 Theta(tan=-0.211844, x=0.978148, y=-0.207215): -0.212556561670
    test 1513 348 348.019574010622 Mu(tan=-0.2122, x=0.978219, y=-0.207578), iteration=3: -0.212556561670
    test 1514 348 348.039069322354 Chi(tan=-0.211844, x=1.0, y=-0.211844), iteration=2: -0.212556561670
    test 1515 348 348.013059526305 Xi(tan=-0.212318, x=1.96517, y=-0.417243), iteration=3: -0.212556561670

    test 1516 351 350.970221227440 Phi(tan=-0.158917, x=0.987607, y=-0.156948): -0.158384440325
    test 1517 351 351.000000000000 Beta(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325
    test 1518 351 351.029683808843 Theta(tan=-0.157853, x=0.987769, y=-0.155923): -0.158384440325
    test 1519 351 351.014871532838 Mu(tan=-0.158118, x=0.987729, y=-0.156178): -0.158384440325
    test 1520 351 351.029682185072 Chi(tan=-0.157853, x=0.987769, y=-0.155923): -0.158384440325
    test 1521 351 351.009922229621 Xi(tan=-0.158207, x=0.987715, y=-0.156263): -0.158384440325

    test 1522 351 350.970221227440 Phi(tan=-0.158917, x=0.987688, y=-0.156961): -0.158384440325
    test 1523 351 351.000000000000 Beta(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325
    test 1524 351 351.029683808843 Theta(tan=-0.157853, x=0.987688, y=-0.15591): -0.158384440325
    test 1525 351 351.014871532838 Mu(tan=-0.158118, x=0.987729, y=-0.156178), iteration=2: -0.158384440325
    test 1526 351 351.029682185072 Chi(tan=-0.157853, x=1.0, y=-0.157853), iteration=2: -0.158384440325
    test 1527 351 351.009922229621 Xi(tan=-0.158207, x=1.9843, y=-0.31393), iteration=3: -0.158384440325

    test 1528 354 353.979963440552 Phi(tan=-0.105458, x=0.994485, y=-0.104876): -0.105104235266
    test 1529 354 354.000000000000 Beta(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266
    test 1530 354 354.019970846274 Theta(tan=-0.104752, x=0.994558, y=-0.104182): -0.105104235266
    test 1531 354 354.010005924659 Mu(tan=-0.104928, x=0.99454, y=-0.104355): -0.105104235266
    test 1532 354 354.019970358528 Chi(tan=-0.104752, x=0.994558, y=-0.104182): -0.105104235266
    test 1533 354 354.006675980405 Xi(tan=-0.104986, x=0.994534, y=-0.104413): -0.105104235266

    test 1534 354 353.979963440552 Phi(tan=-0.105458, x=0.994522, y=-0.10488): -0.105104235266
    test 1535 354 354.000000000000 Beta(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266
    test 1536 354 354.019970846274 Theta(tan=-0.104752, x=0.994522, y=-0.104178): -0.105104235266
    test 1537 354 354.010005924660 Mu(tan=-0.104928, x=0.99454, y=-0.104355), iteration=3: -0.105104235266
    test 1538 354 354.019970358528 Chi(tan=-0.104752, x=1.0, y=-0.104752), iteration=2: -0.105104235266
    test 1539 354 354.006675980405 Xi(tan=-0.104986, x=1.998, y=-0.209763), iteration=3: -0.105104235266

    test 1540 357 356.989926259040 Phi(tan=-0.0525841, x=0.99862, y=-0.0525115): -0.052407779283
    test 1541 357 357.000000000000 Beta(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 1542 357 357.010040150331 Theta(tan=-0.0522321, x=0.998639, y=-0.052161): -0.052407779283
    test 1543 357 357.005030554687 Mu(tan=-0.0523197, x=0.998634, y=-0.0522483): -0.052407779283
    test 1544 357 357.010040088861 Chi(tan=-0.0522321, x=0.998639, y=-0.052161): -0.052407779283
    test 1545 357 357.003356419920 Xi(tan=-0.052349, x=0.998633, y=-0.0522775): -0.052407779283

    test 1546 357 356.989926259040 Phi(tan=-0.0525841, x=0.99863, y=-0.052512): -0.052407779283
    test 1547 357 357.000000000000 Beta(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 1548 357 357.010040150331 Theta(tan=-0.0522321, x=0.99863, y=-0.0521605): -0.052407779283
    test 1549 357 357.005030554687 Mu(tan=-0.0523197, x=0.998634, y=-0.0522483), iteration=2: -0.052407779283
    test 1550 357 357.010040088861 Chi(tan=-0.0522321, x=1.0, y=-0.0522321), iteration=2: -0.052407779283
    test 1551 357 357.003356419920 Xi(tan=-0.052349, x=2.00623, y=-0.105024), iteration=3: -0.052407779283

    test 1552  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1553  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1554  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1555  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1556  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1557  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 1558  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1559  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1560  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1561  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1562  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1563  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 1564  3 3.020181121176 Phi(tan=0.052761, x=0.998611, y=0.0526877): 0.052407779283
    test 1565  3 3.010073678663 Beta(tan=0.0525841, x=0.99862, y=0.0525115): 0.052407779283
    test 1566  3 2.999999937910 Theta(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283
    test 1567  3 3.005026294094 Mu(tan=0.0524957, x=0.998625, y=0.0524236): 0.052407779283
    test 1568  3 3.000000000000 Chi(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283
    test 1569  3 3.006706029777 Xi(tan=0.0525251, x=0.998623, y=0.0524528): 0.052407779283

    test 1570  3 3.020181121176 Phi(tan=0.052761, x=1.0, y=0.052761): 0.052407779283
    test 1571  3 3.010073678663 Beta(tan=0.0525841, x=1.0, y=0.0525841): 0.052407779283
    test 1572  3 2.999999937910 Theta(tan=0.0524078, x=1.0, y=0.0524078): 0.052407779283
    test 1573  3 3.005026294094 Mu(tan=0.0524957, x=0.998625, y=0.0524236), iteration=3: 0.052407779283
    test 1574  3 3.000000000000 Chi(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283
    test 1575  3 3.006706029777 Xi(tan=0.0525251, x=2.00621, y=0.105377), iteration=2: 0.052407779283

    test 1576  6 6.040138542604 Phi(tan=0.105813, x=0.994448, y=0.105225): 0.105104235266
    test 1577  6 6.020036065215 Beta(tan=0.105458, x=0.994485, y=0.104876): 0.105104235266
    test 1578  6 5.999999507387 Theta(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266
    test 1579  6 6.009997220384 Mu(tan=0.105281, x=0.994504, y=0.104702): 0.105104235266
    test 1580  6 6.000000000000 Chi(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266
    test 1581  6 6.013338120736 Xi(tan=0.10534, x=0.994498, y=0.10476): 0.105104235266

    test 1582  6 6.040138542604 Phi(tan=0.105813, x=1.0, y=0.105813): 0.105104235266
    test 1583  6 6.020036065215 Beta(tan=0.105458, x=1.0, y=0.105458): 0.105104235266
    test 1584  6 5.999999507387 Theta(tan=0.105104, x=1.0, y=0.105104): 0.105104235266
    test 1585  6 6.009997220384 Mu(tan=0.105281, x=0.994504, y=0.104702), iteration=3: 0.105104235266
    test 1586  6 6.000000000000 Chi(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266
    test 1587  6 6.013338120736 Xi(tan=0.10534, x=1.99793, y=0.210461), iteration=2: 0.105104235266

    test 1588  9 9.059651130185 Phi(tan=0.159452, x=0.987525, y=0.157463): 0.158384440325
    test 1589  9 9.029777127642 Beta(tan=0.158917, x=0.987607, y=0.156948): 0.158384440325
    test 1590  9 8.999998360327 Theta(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325
    test 1591  9 9.014858030843 Mu(tan=0.15865, x=0.987648, y=0.156691): 0.158384440325
    test 1592  9 9.000000000000 Chi(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325
    test 1593  9 9.019823164695 Xi(tan=0.158739, x=0.987634, y=0.156776): 0.158384440325

    test 1594  9 9.059651130185 Phi(tan=0.159452, x=1.0, y=0.159452): 0.158384440325
    test 1595  9 9.029777127642 Beta(tan=0.158917, x=1.0, y=0.158917): 0.158384440325
    test 1596  9 8.999998360327 Theta(tan=0.158384, x=1.0, y=0.158384): 0.158384440325
    test 1597  9 9.014858030843 Mu(tan=0.15865, x=0.987648, y=0.156691), iteration=3: 0.158384440325
    test 1598  9 9.000000000000 Chi(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325
    test 1599  9 9.019823164695 Xi(tan=0.158739, x=1.98414, y=0.31496), iteration=3: 0.158384440325

    test 1600 12 12.078502847834 Phi(tan=0.213989, x=0.977862, y=0.209252): 0.212556561670
    test 1601 12 12.039189338492 Beta(tan=0.213272, x=0.978005, y=0.208581): 0.212556561670
    test 1602 12 11.999996188332 Theta(tan=0.212556, x=0.978148, y=0.207912): 0.212556561670
    test 1603 12 12.019555209619 Mu(tan=0.212913, x=0.978077, y=0.208246): 0.212556561670
    test 1604 12 12.000000000000 Chi(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670
    test 1605 12 12.026089704728 Xi(tan=0.213033, x=0.978053, y=0.208357): 0.212556561670

    test 1606 12 12.078502847834 Phi(tan=0.213989, x=1.0, y=0.213989): 0.212556561670
    test 1607 12 12.039189338492 Beta(tan=0.213272, x=1.0, y=0.213272): 0.212556561670
    test 1608 12 11.999996188332 Theta(tan=0.212556, x=1.0, y=0.212556): 0.212556561670
    test 1609 12 12.019555209619 Mu(tan=0.212913, x=0.978077, y=0.208246), iteration=3: 0.212556561670
    test 1610 12 12.000000000000 Chi(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670
    test 1611 12 12.026089704728 Xi(tan=0.213033, x=1.96489, y=0.418585), iteration=3: 0.212556561670

    test 1612 15 15.096485223916 Phi(tan=0.269755, x=0.965489, y=0.260445): 0.267949192431
    test 1613 15 15.048168888340 Beta(tan=0.26885, x=0.965708, y=0.259631): 0.267949192431
    test 1614 15 14.999992740232 Theta(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431
    test 1615 15 15.024037070794 Mu(tan=0.268399, x=0.965817, y=0.259224): 0.267949192431
    test 1616 15 15.000000000000 Chi(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431
    test 1617 15 15.032068735909 Xi(tan=0.268549, x=0.965781, y=0.25936): 0.267949192431

    test 1618 15 15.096485223916 Phi(tan=0.269755, x=1.0, y=0.269755): 0.267949192431
    test 1619 15 15.048168888340 Beta(tan=0.26885, x=1.0, y=0.26885): 0.267949192431
    test 1620 15 14.999992740232 Theta(tan=0.267949, x=1.0, y=0.267949): 0.267949192431
    test 1621 15 15.024037070794 Mu(tan=0.268399, x=0.965817, y=0.259224), iteration=2: 0.267949192431
    test 1622 15 15.000000000000 Chi(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431
    test 1623 15 15.032068735909 Xi(tan=0.268549, x=1.94023, y=0.521048), iteration=2: 0.267949192431

    test 1624 18 18.113399720258 Phi(tan=0.327109, x=0.950443, y=0.310899): 0.324919696233
    test 1625 18 18.056616853373 Beta(tan=0.326013, x=0.950751, y=0.309957): 0.324919696233
    test 1626 18 17.999987836926 Theta(tan=0.324919, x=0.951057, y=0.309017): 0.324919696233
    test 1627 18 18.028254334443 Mu(tan=0.325465, x=0.950904, y=0.309486): 0.324919696233
    test 1628 18 18.000000000000 Chi(tan=0.32492, x=0.951057, y=0.309017): 0.324919696233
    test 1629 18 18.037694476601 Xi(tan=0.325647, x=0.950853, y=0.309643): 0.324919696233

    test 1630 18 18.113399720258 Phi(tan=0.327109, x=1.0, y=0.327109): 0.324919696233
    test 1631 18 18.056616853373 Beta(tan=0.326013, x=1.0, y=0.326013): 0.324919696233
    test 1632 18 17.999987836926 Theta(tan=0.324919, x=1.0, y=0.324919): 0.324919696233
    test 1633 18 18.028254334443 Mu(tan=0.325465, x=0.950904, y=0.309486), iteration=3: 0.324919696233
    test 1634 18 18.000000000000 Chi(tan=0.32492, x=0.951057, y=0.309017): 0.324919696233
    test 1635 18 18.037694476601 Xi(tan=0.325647, x=1.91024, y=0.622066), iteration=2: 0.324919696233

    test 1636 21 21.129059974007 Phi(tan=0.386451, x=0.932771, y=0.36047): 0.383864035035
    test 1637 21 21.064440302978 Beta(tan=0.385155, x=0.933177, y=0.359418): 0.383864035035
    test 1638 21 20.999981382849 Theta(tan=0.383864, x=0.933581, y=0.358368): 0.383864035035
    test 1639 21 21.032160674247 Mu(tan=0.384508, x=0.933379, y=0.358892): 0.383864035035
    test 1640 21 21.000000000000 Chi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 1641 21 21.042905101186 Xi(tan=0.384723, x=0.933312, y=0.359067): 0.383864035035

    test 1642 21 21.129059974007 Phi(tan=0.386451, x=1.0, y=0.386451): 0.383864035035
    test 1643 21 21.064440302978 Beta(tan=0.385155, x=1.0, y=0.385155): 0.383864035035
    test 1644 21 20.999981382849 Theta(tan=0.383864, x=1.0, y=0.383864): 0.383864035035
    test 1645 21 21.032160674247 Mu(tan=0.384508, x=0.933379, y=0.358892), iteration=3: 0.383864035035
    test 1646 21 21.000000000000 Chi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 1647 21 21.042905101186 Xi(tan=0.384723, x=1.875, y=0.721358), iteration=2: 0.383864035035

    test 1648 24 24.143293884842 Phi(tan=0.448229, x=0.912525, y=0.40902): 0.445228685309
    test 1649 24 24.071553334132 Beta(tan=0.446726, x=0.913037, y=0.407877): 0.445228685309
    test 1650 24 23.999973373512 Theta(tan=0.445228, x=0.913546, y=0.406736): 0.445228685309
    test 1651 24 24.035713230333 Mu(tan=0.445976, x=0.913292, y=0.407306): 0.445228685309
    test 1652 24 24.000000000000 Chi(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309
    test 1653 24 24.047643425661 Xi(tan=0.446225, x=0.913207, y=0.407496): 0.445228685309

    test 1654 24 24.143293884842 Phi(tan=0.448229, x=1.0, y=0.448229): 0.445228685309
    test 1655 24 24.071553334132 Beta(tan=0.446726, x=1.0, y=0.446726): 0.445228685309
    test 1656 24 23.999973373512 Theta(tan=0.445228, x=1.0, y=0.445228): 0.445228685309
    test 1657 24 24.035713230333 Mu(tan=0.445976, x=0.913292, y=0.407306), iteration=3: 0.445228685309
    test 1658 24 24.000000000000 Chi(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309
    test 1659 24 24.047643425661 Xi(tan=0.446225, x=1.83461, y=0.818652), iteration=2: 0.445228685309

    test 1660 27 27.155945522711 Phi(tan=0.512959, x=0.889768, y=0.456414): 0.509525449494
    test 1661 27 27.077878020577 Beta(tan=0.511239, x=0.890389, y=0.455201): 0.509525449494
    test 1662 27 26.999963898770 Theta(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494
    test 1663 27 27.038873081482 Mu(tan=0.51038, x=0.890698, y=0.454595): 0.509525449494
    test 1664 27 27.000000000000 Chi(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494
    test 1665 27 27.051857538240 Xi(tan=0.510666, x=0.890595, y=0.454797): 0.509525449494

    test 1666 27 27.155945522711 Phi(tan=0.512959, x=1.0, y=0.512959): 0.509525449494
    test 1667 27 27.077878020577 Beta(tan=0.511239, x=1.0, y=0.511239): 0.509525449494
    test 1668 27 26.999963898770 Theta(tan=0.509525, x=1.0, y=0.509525): 0.509525449494
    test 1669 27 27.038873081482 Mu(tan=0.51038, x=0.890698, y=0.454595), iteration=2: 0.509525449494
    test 1670 27 27.000000000000 Chi(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494
    test 1671 27 27.051857538240 Xi(tan=0.510666, x=1.78919, y=0.913678), iteration=2: 0.509525449494

    test 1672 30 30.166876834292 Phi(tan=0.58124, x=0.864565, y=0.50252): 0.577350269190
    test 1673 30 30.083345266050 Beta(tan=0.579291, x=0.865297, y=0.501259): 0.577350269190
    test 1674 30 29.999953141624 Theta(tan=0.577349, x=0.866026, y=0.499999): 0.577350269190
    test 1675 30 30.041605671429 Mu(tan=0.578319, x=0.865662, y=0.500629): 0.577350269190
    test 1676 30 30.000000000000 Chi(tan=0.57735, x=0.866025, y=0.5): 0.577350269190
    test 1677 30 30.055501367888 Xi(tan=0.578643, x=0.865541, y=0.500839): 0.577350269190

    test 1678 30 30.166876834292 Phi(tan=0.58124, x=1.0, y=0.58124): 0.577350269190
    test 1679 30 30.083345266050 Beta(tan=0.579291, x=1.0, y=0.579291): 0.577350269190
    test 1680 30 29.999953141624 Theta(tan=0.577349, x=1.0, y=0.577349): 0.577350269190
    test 1681 30 30.041605671429 Mu(tan=0.578319, x=0.865662, y=0.500629), iteration=3: 0.577350269190
    test 1682 30 30.000000000000 Chi(tan=0.57735, x=0.866025, y=0.5): 0.577350269190
    test 1683 30 30.055501367888 Xi(tan=0.578643, x=1.73885, y=1.00617), iteration=2: 0.577350269190

    test 1684 33 33.175969129682 Phi(tan=0.653783, x=0.836994, y=0.547212): 0.649407593198
    test 1685 33 33.087895552255 Beta(tan=0.651591, x=0.837834, y=0.545925): 0.649407593198
    test 1686 33 32.999941372613 Theta(tan=0.649406, x=0.838671, y=0.544638): 0.649407593198
    test 1687 33 33.043881184589 Mu(tan=0.650497, x=0.838253, y=0.545281): 0.649407593198
    test 1688 33 33.000000000000 Chi(tan=0.649408, x=0.838671, y=0.544639): 0.649407593198
    test 1689 33 33.058535184571 Xi(tan=0.650861, x=0.838114, y=0.545496): 0.649407593198

    test 1690 33 33.175969129682 Phi(tan=0.653783, x=1.0, y=0.653783): 0.649407593198
    test 1691 33 33.087895552255 Beta(tan=0.651591, x=1.0, y=0.651591): 0.649407593198
    test 1692 33 32.999941372613 Theta(tan=0.649406, x=1.0, y=0.649406): 0.649407593198
    test 1693 33 33.043881184589 Mu(tan=0.650497, x=0.838253, y=0.545281), iteration=2: 0.649407593198
    test 1694 33 33.000000000000 Chi(tan=0.649408, x=0.838671, y=0.544639): 0.649407593198
    test 1695 33 33.058535184571 Xi(tan=0.650861, x=1.68375, y=1.09589), iteration=2: 0.649407593198

    test 1696 36 36.183124334274 Phi(tan=0.731437, x=0.807134, y=0.590368): 0.726542528005
    test 1697 36 36.091479573846 Beta(tan=0.728985, x=0.808077, y=0.589076): 0.726542528005
    test 1698 36 35.999928940020 Theta(tan=0.726541, x=0.809018, y=0.587784): 0.726542528005
    test 1699 36 36.045674867236 Mu(tan=0.727761, x=0.808548, y=0.58843): 0.726542528005
    test 1700 36 36.000000000000 Chi(tan=0.726543, x=0.809017, y=0.587785): 0.726542528005
    test 1701 36 36.060926025960 Xi(tan=0.728168, x=0.808392, y=0.588645): 0.726542528005

    test 1702 36 36.183124334274 Phi(tan=0.731437, x=1.0, y=0.731437): 0.726542528005
    test 1703 36 36.091479573846 Beta(tan=0.728985, x=1.0, y=0.728985): 0.726542528005
    test 1704 36 35.999928940020 Theta(tan=0.726541, x=1.0, y=0.726541): 0.726542528005
    test 1705 36 36.045674867236 Mu(tan=0.727761, x=0.808548, y=0.58843), iteration=2: 0.726542528005
    test 1706 36 36.000000000000 Chi(tan=0.726543, x=0.809017, y=0.587785): 0.726542528005
    test 1707 36 36.060926025960 Xi(tan=0.728168, x=1.62404, y=1.18258), iteration=3: 0.726542528005

    test 1708 39 39.188265994394 Phi(tan=0.815239, x=0.775074, y=0.631871): 0.809784033195
    test 1709 39 39.094058754227 Beta(tan=0.812506, x=0.776112, y=0.630595): 0.809784033195
    test 1710 39 38.999916256306 Theta(tan=0.809782, x=0.777147, y=0.629319): 0.809784033195
    test 1711 39 39.046967290868 Mu(tan=0.811142, x=0.77663, y=0.629957): 0.809784033195
    test 1712 39 39.000000000000 Chi(tan=0.809784, x=0.777146, y=0.62932): 0.809784033195
    test 1713 39 39.062648046300 Xi(tan=0.811596, x=0.776457, y=0.63017): 0.809784033195

    test 1714 39 39.188265994394 Phi(tan=0.815239, x=1.0, y=0.815239): 0.809784033195
    test 1715 39 39.094058754227 Beta(tan=0.812506, x=1.0, y=0.812506): 0.809784033195
    test 1716 39 38.999916256306 Theta(tan=0.809782, x=1.0, y=0.809782): 0.809784033195
    test 1717 39 39.046967290868 Mu(tan=0.811142, x=0.77663, y=0.629957), iteration=3: 0.809784033195
    test 1718 39 39.000000000000 Chi(tan=0.809784, x=0.777146, y=0.62932): 0.809784033195
    test 1719 39 39.062648046300 Xi(tan=0.811596, x=1.55989, y=1.266), iteration=2: 0.809784033195

    test 1720 42 42.191340028820 Phi(tan=0.906469, x=0.740906, y=0.671609): 0.900404044298
    test 1721 42 42.095605637640 Beta(tan=0.90343, x=0.742027, y=0.67037): 0.900404044298
    test 1722 42 41.999903781382 Theta(tan=0.900401, x=0.743146, y=0.669129): 0.900404044298
    test 1723 42 42.047744555205 Mu(tan=0.901914, x=0.742587, y=0.66975): 0.900404044298
    test 1724 42 42.000000000000 Chi(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 1725 42 42.063682784184 Xi(tan=0.902419, x=0.742401, y=0.669956): 0.900404044298

    test 1726 42 42.191340028820 Phi(tan=0.906469, x=1.0, y=0.906469): 0.900404044298
    test 1727 42 42.095605637640 Beta(tan=0.90343, x=1.0, y=0.90343): 0.900404044298
    test 1728 42 41.999903781382 Theta(tan=0.900401, x=1.0, y=0.900401): 0.900404044298
    test 1729 42 42.047744555205 Mu(tan=0.901914, x=0.742587, y=0.66975), iteration=3: 0.900404044298
    test 1730 42 42.000000000000 Chi(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 1731 42 42.063682784184 Xi(tan=0.902419, x=1.49147, y=1.34593), iteration=2: 0.900404044298

    test 1732 45 45.192315221845 Phi(tan=1.00674, x=0.704729, y=0.709476): 1.000000000000
    test 1733 45 45.096104154617 Beta(tan=1.00336, x=0.70592, y=0.708292): 1.000000000000
    test 1734 45 44.999892003429 Theta(tan=0.999996, x=0.707108, y=0.707105): 1.000000000000
    test 1735 45 45.047998429066 Mu(tan=1.00168, x=0.706514, y=0.707699): 1.000000000000
    test 1736 45 45.000000000000 Chi(tan=1.0, x=0.707107, y=0.707107): 1.000000000000
    test 1737 45 45.064019346981 Xi(tan=1.00224, x=0.706316, y=0.707896): 1.000000000000

    test 1738 45 45.192315221845 Phi(tan=1.00674, x=1.0, y=1.00674): 1.000000000000
    test 1739 45 45.096104154617 Beta(tan=1.00336, x=1.0, y=1.00336): 1.000000000000
    test 1740 45 44.999892003429 Theta(tan=0.999996, x=1.0, y=0.999996): 1.000000000000
    test 1741 45 45.047998429066 Mu(tan=1.00168, x=0.706514, y=0.707699), iteration=2: 1.000000000000
    test 1742 45 45.000000000000 Chi(tan=1.0, x=0.707107, y=0.707107): 1.000000000000
    test 1743 45 45.064019346981 Xi(tan=1.00224, x=1.41898, y=1.42215), iteration=3: 1.000000000000

    test 1744 48 48.191183456946 Phi(tan=1.11809, x=0.666647, y=0.745373): 1.110612514829
    test 1745 48 48.095549759456 Beta(tan=1.11434, x=0.66789, y=0.74426): 1.110612514829
    test 1746 48 47.999881418114 Theta(tan=1.11061, x=0.669132, y=0.743143): 1.110612514829
    test 1747 48 48.047726428058 Mu(tan=1.11247, x=0.668511, y=0.743702): 1.110612514829
    test 1748 48 48.000000000000 Chi(tan=1.11061, x=0.669131, y=0.743145): 1.110612514829
    test 1749 48 48.063654510687 Xi(tan=1.1131, x=0.668305, y=0.743888): 1.110612514829

    test 1750 48 48.191183456946 Phi(tan=1.11809, x=1.0, y=1.11809): 1.110612514829
    test 1751 48 48.095549759456 Beta(tan=1.11434, x=1.0, y=1.11434): 1.110612514829
    test 1752 48 47.999881418114 Theta(tan=1.11061, x=1.0, y=1.11061): 1.110612514829
    test 1753 48 48.047726428058 Mu(tan=1.11247, x=0.668511, y=0.743702), iteration=2: 1.110612514829
    test 1754 48 48.000000000000 Chi(tan=1.11061, x=0.669131, y=0.743145): 1.110612514829
    test 1755 48 48.063654510687 Xi(tan=1.1131, x=1.34261, y=1.49446), iteration=2: 1.110612514829

    test 1756 51 51.187959693265 Phi(tan=1.24321, x=0.626768, y=0.779206): 1.234897156535
    test 1757 51 51.093949439927 Beta(tan=1.23905, x=0.628045, y=0.778177): 1.234897156535
    test 1758 51 50.999872507121 Theta(tan=1.23489, x=0.629322, y=0.777145): 1.234897156535
    test 1759 51 51.046931828803 Mu(tan=1.23697, x=0.628684, y=0.777661): 1.234897156535
    test 1760 51 51.000000000000 Chi(tan=1.2349, x=0.62932, y=0.777146): 1.234897156535
    test 1761 51 51.062592734966 Xi(tan=1.23766, x=0.628471, y=0.777833): 1.234897156535

    test 1762 51 51.187959693265 Phi(tan=1.24321, x=1.0, y=1.24321): 1.234897156535
    test 1763 51 51.093949439927 Beta(tan=1.23905, x=1.0, y=1.23905): 1.234897156535
    test 1764 51 50.999872507121 Theta(tan=1.23489, x=1.0, y=1.23489): 1.234897156535
    test 1765 51 51.046931828803 Mu(tan=1.23697, x=0.628684, y=0.777661), iteration=3: 1.234897156535
    test 1766 51 51.000000000000 Chi(tan=1.2349, x=0.62932, y=0.777146): 1.234897156535
    test 1767 51 51.062592734966 Xi(tan=1.23766, x=1.26259, y=1.56265), iteration=2: 1.234897156535

    test 1768 54 54.182681690125 Phi(tan=1.38565, x=0.585203, y=0.810887): 1.376381920471
    test 1769 54 54.091321600846 Beta(tan=1.38101, x=0.586495, y=0.809953): 1.376381920471
    test 1770 54 53.999865716909 Theta(tan=1.37638, x=0.587787, y=0.809016): 1.376381920471
    test 1771 54 54.045623620088 Mu(tan=1.37869, x=0.587141, y=0.809485): 1.376381920471
    test 1772 54 54.000000000000 Chi(tan=1.37638, x=0.587785, y=0.809017): 1.376381920471
    test 1773 54 54.060846094111 Xi(tan=1.37946, x=0.586926, y=0.809641): 1.376381920471

    test 1774 54 54.182681690125 Phi(tan=1.38565, x=1.0, y=1.38565): 1.376381920471
    test 1775 54 54.091321600846 Beta(tan=1.38101, x=1.0, y=1.38101): 1.376381920471
    test 1776 54 53.999865716909 Theta(tan=1.37638, x=1.0, y=1.37638): 1.376381920471
    test 1777 54 54.045623620088 Mu(tan=1.37869, x=0.587141, y=0.809485), iteration=3: 1.376381920471
    test 1778 54 54.000000000000 Chi(tan=1.37638, x=0.587785, y=0.809017): 1.376381920471
    test 1779 54 54.060846094111 Xi(tan=1.37946, x=1.17912, y=1.62655), iteration=2: 1.376381920471

    test 1780 57 57.175409487429 Phi(tan=1.55023, x=0.542069, y=0.840334): 1.539864963815
    test 1781 57 57.087695824549 Beta(tan=1.54504, x=0.543355, y=0.839503): 1.539864963815
    test 1782 57 56.999861438657 Theta(tan=1.53986, x=0.544641, y=0.838669): 1.539864963815
    test 1783 57 57.043816392070 Mu(tan=1.54245, x=0.543998, y=0.839087): 1.539864963815
    test 1784 57 57.000000000000 Chi(tan=1.53986, x=0.544639, y=0.838671): 1.539864963815
    test 1785 57 57.058434125550 Xi(tan=1.54331, x=0.543783, y=0.839226): 1.539864963815

    test 1786 57 57.175409487429 Phi(tan=1.55023, x=1.0, y=1.55023): 1.539864963815
    test 1787 57 57.087695824549 Beta(tan=1.54504, x=1.0, y=1.54504): 1.539864963815
    test 1788 57 56.999861438657 Theta(tan=1.53986, x=1.0, y=1.53986): 1.539864963815
    test 1789 57 57.043816392070 Mu(tan=1.54245, x=0.543998, y=0.839087), iteration=3: 1.539864963815
    test 1790 57 57.000000000000 Chi(tan=1.53986, x=0.544639, y=0.838671): 1.539864963815
    test 1791 57 57.058434125550 Xi(tan=1.54331, x=1.09245, y=1.68599), iteration=2: 1.539864963815

    test 1792 60 60.166224652193 Phi(tan=1.74371, x=0.497485, y=0.867472): 1.732050807569
    test 1793 60 60.083112512506 Beta(tan=1.73787, x=0.498743, y=0.86675): 1.732050807569
    test 1794 60 59.999859990242 Theta(tan=1.73204, x=0.500002, y=0.866024): 1.732050807569
    test 1795 60 60.041530165249 Mu(tan=1.73495, x=0.499372, y=0.866388): 1.732050807569
    test 1796 60 60.000000000000 Chi(tan=1.73205, x=0.5, y=0.866025): 1.732050807569
    test 1797 60 60.055383598391 Xi(tan=1.73592, x=0.499163, y=0.866508): 1.732050807569

    test 1798 60 60.166224652193 Phi(tan=1.74371, x=1.0, y=1.74371): 1.732050807569
    test 1799 60 60.083112512506 Beta(tan=1.73787, x=1.0, y=1.73787): 1.732050807569
    test 1800 60 59.999859990242 Theta(tan=1.73204, x=1.0, y=1.73204): 1.732050807569
    test 1801 60 60.041530165249 Mu(tan=1.73495, x=0.499372, y=0.866388), iteration=3: 1.732050807569
    test 1802 60 60.000000000000 Chi(tan=1.73205, x=0.5, y=0.866025): 1.732050807569
    test 1803 60 60.055383598391 Xi(tan=1.73592, x=1.00281, y=1.7408), iteration=3: 1.732050807569

    test 1804 63 63.155229303561 Phi(tan=1.97583, x=0.451575, y=0.892233): 1.962610505505
    test 1805 63 63.077622413475 Beta(tan=1.9692, x=0.452783, y=0.891621): 1.962610505505
    test 1806 63 62.999861601059 Theta(tan=1.9626, x=0.453993, y=0.891005): 1.962610505505
    test 1807 63 63.038790161591 Mu(tan=1.9659, x=0.453387, y=0.891314): 1.962610505505
    test 1808 63 63.000000000000 Chi(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 1809 63 63.051728205303 Xi(tan=1.967, x=0.453186, y=0.891416): 1.962610505505

    test 1810 63 63.155229303561 Phi(tan=1.97583, x=1.0, y=1.97583): 1.962610505505
    test 1811 63 63.077622413475 Beta(tan=1.9692, x=1.0, y=1.9692): 1.962610505505
    test 1812 63 62.999861601059 Theta(tan=1.9626, x=1.0, y=1.9626): 1.962610505505
    test 1813 63 63.038790161591 Mu(tan=1.9659, x=0.453387, y=0.891314), iteration=3: 1.962610505505
    test 1814 63 63.000000000000 Chi(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 1815 63 63.051728205304 Xi(tan=1.967, x=0.910441, y=1.79084), iteration=3: 1.962610505505

    test 1816 66 66.142544930388 Phi(tan=2.26116, x=0.404463, y=0.914555): 2.246036773904
    test 1817 66 66.071286044615 Beta(tan=2.25358, x=0.4056, y=0.914051): 2.246036773904
    test 1818 66 65.999866400327 Theta(tan=2.24602, x=0.406739, y=0.913545): 2.246036773904
    test 1819 66 66.035626520706 Mu(tan=2.2498, x=0.406169, y=0.913798): 2.246036773904
    test 1820 66 66.000000000000 Chi(tan=2.24604, x=0.406737, y=0.913545): 2.246036773904
    test 1821 66 66.047508181716 Xi(tan=2.25106, x=0.405979, y=0.913882): 2.246036773904

    test 1822 66 66.142544930388 Phi(tan=2.26116, x=1.0, y=2.26116): 2.246036773904
    test 1823 66 66.071286044615 Beta(tan=2.25358, x=1.0, y=2.25358): 2.246036773904
    test 1824 66 65.999866400327 Theta(tan=2.24602, x=1.0, y=2.24602): 2.246036773904
    test 1825 66 66.035626520706 Mu(tan=2.2498, x=0.406169, y=0.913798), iteration=3: 2.246036773904
    test 1826 66 66.000000000000 Chi(tan=2.24604, x=0.406737, y=0.913545): 2.246036773904
    test 1827 66 66.047508181716 Xi(tan=2.25106, x=0.815604, y=1.83597), iteration=3: 2.246036773904

    test 1828 69 69.128311016985 Phi(tan=2.62263, x=0.356276, y=0.934381): 2.605089064694
    test 1829 69 69.064173012841 Beta(tan=2.61384, x=0.357322, y=0.933981): 2.605089064694
    test 1830 69 68.999874409414 Theta(tan=2.60507, x=0.35837, y=0.93358): 2.605089064694
    test 1831 69 69.032073964504 Mu(tan=2.60945, x=0.357845, y=0.933781): 2.605089064694
    test 1832 69 69.000000000000 Chi(tan=2.60509, x=0.358368, y=0.93358): 2.605089064694
    test 1833 69 69.042769857028 Xi(tan=2.61091, x=0.357671, y=0.933848): 2.605089064694

    test 1834 69 69.128311016985 Phi(tan=2.62263, x=1.0, y=2.62263): 2.605089064694
    test 1835 69 69.064173012841 Beta(tan=2.61384, x=1.0, y=2.61384): 2.605089064694
    test 1836 69 68.999874409414 Theta(tan=2.60507, x=1.0, y=2.60507): 2.605089064694
    test 1837 69 69.032073964504 Mu(tan=2.60945, x=0.357845, y=0.933781), iteration=2: 2.605089064694
    test 1838 69 69.000000000000 Chi(tan=2.60509, x=0.358368, y=0.93358): 2.605089064694
    test 1839 69 69.042769857028 Xi(tan=2.61091, x=0.718554, y=1.87608), iteration=2: 2.605089064694

    test 1840 72 72.112683493851 Phi(tan=3.0984, x=0.307146, y=0.951662): 3.077683537175
    test 1841 72 72.056361244518 Beta(tan=3.08802, x=0.308081, y=0.95136): 3.077683537175
    test 1842 72 71.999885538511 Theta(tan=3.07766, x=0.309019, y=0.951056): 3.077683537175
    test 1843 72 72.028171414224 Mu(tan=3.08284, x=0.308549, y=0.951208): 3.077683537175
    test 1844 72 72.000000000000 Chi(tan=3.07768, x=0.309017, y=0.951057): 3.077683537175
    test 1845 72 72.037565143062 Xi(tan=3.08456, x=0.308393, y=0.951259): 3.077683537175

    test 1846 72 72.112683493851 Phi(tan=3.0984, x=1.0, y=3.0984): 3.077683537175
    test 1847 72 72.056361244518 Beta(tan=3.08802, x=1.0, y=3.08802): 3.077683537175
    test 1848 72 71.999885538511 Theta(tan=3.07766, x=1.0, y=3.07766): 3.077683537175
    test 1849 72 72.028171414224 Mu(tan=3.08284, x=0.308549, y=0.951208), iteration=3: 3.077683537175
    test 1850 72 72.000000000000 Chi(tan=3.07768, x=0.309017, y=0.951057): 3.077683537175
    test 1851 72 72.037565143062 Xi(tan=3.08456, x=0.619556, y=1.91106), iteration=3: 3.077683537175

    test 1852 75 75.095833031123 Phi(tan=3.75718, x=0.257203, y=0.966357): 3.732050807569
    test 1853 75 75.047936132212 Beta(tan=3.74458, x=0.258011, y=0.966142): 3.732050807569
    test 1854 75 74.999899587814 Theta(tan=3.73202, x=0.258821, y=0.965925): 3.732050807569
    test 1855 75 75.023961564132 Mu(tan=3.7383, x=0.258415, y=0.966034): 3.732050807569
    test 1856 75 75.000000000000 Chi(tan=3.73205, x=0.258819, y=0.965926): 3.732050807569
    test 1857 75 75.031950965524 Xi(tan=3.74039, x=0.25828, y=0.96607): 3.732050807569

    test 1858 75 75.095833031123 Phi(tan=3.75718, x=1.0, y=3.75718): 3.732050807569
    test 1859 75 75.047936132212 Beta(tan=3.74458, x=1.0, y=3.74458): 3.732050807569
    test 1860 75 74.999899587814 Theta(tan=3.73202, x=1.0, y=3.73202): 3.732050807569
    test 1861 75 75.023961564132 Mu(tan=3.7383, x=0.258415, y=0.966034), iteration=3: 3.732050807569
    test 1862 75 75.000000000000 Chi(tan=3.73205, x=0.258819, y=0.965926): 3.732050807569
    test 1863 75 75.031950965524 Xi(tan=3.74039, x=0.51888, y=1.94082), iteration=2: 3.732050807569

    test 1864 78 78.077943193300 Phi(tan=4.7363, x=0.206581, y=0.97843): 4.704630109478
    test 1865 78 78.038989607820 Beta(tan=4.72042, x=0.207246, y=0.978289): 4.704630109478
    test 1866 78 77.999916253185 Theta(tan=4.7046, x=0.207913, y=0.978147): 4.704630109478
    test 1867 78 78.019490416547 Mu(tan=4.71251, x=0.207579, y=0.978218): 4.704630109478
    test 1868 78 78.000000000000 Chi(tan=4.70463, x=0.207912, y=0.978148): 4.704630109478
    test 1869 78 78.025988644686 Xi(tan=4.71515, x=0.207468, y=0.978242): 4.704630109478

    test 1870 78 78.077943193300 Phi(tan=4.7363, x=1.0, y=4.7363): 4.704630109478
    test 1871 78 78.038989607820 Beta(tan=4.72042, x=1.0, y=4.72042): 4.704630109478
    test 1872 78 77.999916253185 Theta(tan=4.7046, x=1.0, y=4.7046): 4.704630109478
    test 1873 78 78.019490416547 Mu(tan=4.71251, x=0.207579, y=0.978218), iteration=3: 4.704630109478
    test 1874 78 78.000000000000 Chi(tan=4.70463, x=0.207912, y=0.978148): 4.704630109478
    test 1875 78 78.025988644686 Xi(tan=4.71515, x=0.416799, y=1.96527), iteration=3: 4.704630109478

    test 1876 81 81.059208474292 Phi(tan=6.35626, x=0.155414, y=0.987849): 6.313751514675
    test 1877 81 81.029619151805 Beta(tan=6.33495, x=0.155924, y=0.987769): 6.313751514675
    test 1878 81 80.999935136078 Theta(tan=6.31371, x=0.156436, y=0.987688): 6.313751514675
    test 1879 81 81.014806783166 Mu(tan=6.32433, x=0.156179, y=0.987729): 6.313751514675
    test 1880 81 81.000000000000 Chi(tan=6.31375, x=0.156434, y=0.987688): 6.313751514675
    test 1881 81 81.019743231870 Xi(tan=6.32786, x=0.156094, y=0.987742): 6.313751514675

    test 1882 81 81.059208474292 Phi(tan=6.35626, x=1.0, y=6.35626): 6.313751514675
    test 1883 81 81.029619151805 Beta(tan=6.33495, x=1.0, y=6.33495): 6.313751514675
    test 1884 81 80.999935136078 Theta(tan=6.31371, x=1.0, y=6.31371): 6.313751514675
    test 1885 81 81.014806783166 Mu(tan=6.32433, x=0.156179, y=0.987729), iteration=2: 6.313751514675
    test 1886 81 81.000000000000 Chi(tan=6.31375, x=0.156434, y=0.987688): 6.313751514675
    test 1887 81 81.019743231870 Xi(tan=6.32786, x=0.31359, y=1.98435), iteration=2: 6.313751514675

    test 1888 84 84.039832232299 Phi(tan=9.57842, x=0.103837, y=0.994594): 9.514364454223
    test 1889 84 84.019926748698 Beta(tan=9.5463, x=0.104183, y=0.994558): 9.514364454223
    test 1890 84 83.999955757312 Theta(tan=9.51429, x=0.104529, y=0.994522): 9.514364454223
    test 1891 84 84.009961757905 Mu(tan=9.5303, x=0.104356, y=0.99454): 9.514364454223
    test 1892 84 84.000000000000 Chi(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 1893 84 84.013282808640 Xi(tan=9.53563, x=0.104298, y=0.994546): 9.514364454223

    test 1894 84 84.039832232299 Phi(tan=9.57842, x=1.0, y=9.57842): 9.514364454223
    test 1895 84 84.019926748698 Beta(tan=9.5463, x=1.0, y=9.5463): 9.514364454223
    test 1896 84 83.999955757312 Theta(tan=9.51429, x=1.0, y=9.51429): 9.514364454223
    test 1897 84 84.009961757905 Mu(tan=9.5303, x=0.104356, y=0.99454), iteration=3: 9.514364454223
    test 1898 84 84.000000000000 Chi(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 1899 84 84.013282808640 Xi(tan=9.53563, x=0.209532, y=1.99802), iteration=2: 9.514364454223

    test 1900 87 87.020024544280 Phi(tan=19.2096, x=0.0519869, y=0.998648): 19.081136687728
    test 1901 87 87.010017799266 Beta(tan=19.1452, x=0.0521614, y=0.998639): 19.081136687728
    test 1902 87 86.999977574155 Theta(tan=19.081, x=0.0523363, y=0.99863): 19.081136687728
    test 1903 87 87.005008166720 Mu(tan=19.1131, x=0.0522487, y=0.998634): 19.081136687728
    test 1904 87 87.000000000000 Chi(tan=19.0811, x=0.052336, y=0.99863): 19.081136687728
    test 1905 87 87.006677755863 Xi(tan=19.1238, x=0.0522196, y=0.998636): 19.081136687728

    test 1906 87 87.020024544280 Phi(tan=19.2096, x=1.0, y=19.2096): 19.081136687728
    test 1907 87 87.010017799266 Beta(tan=19.1452, x=1.0, y=19.1452): 19.081136687728
    test 1908 87 86.999977574155 Theta(tan=19.081, x=1.0, y=19.081): 19.081136687728
    test 1909 87 87.005008166720 Mu(tan=19.1131, x=0.0522487, y=0.998634), iteration=3: 19.081136687728
    test 1910 87 87.000000000000 Chi(tan=19.0811, x=0.052336, y=0.99863): 19.081136687728
    test 1911 87 87.006677755863 Xi(tan=19.1238, x=0.104908, y=2.00624), iteration=3: 19.081136687728

    test 1912 90 90.000000000000 Phi(tan=inf, x=0.0, y=1.0): inf
    test 1913 90 90.000000000000 Beta(tan=inf, x=0.0, y=1.0): inf
    test 1914 90 90.000000000000 Theta(tan=inf, x=0.0, y=1.0): inf
    test 1915 90 90.000000000000 Mu(tan=inf, x=0.0, y=1.0): inf
    test 1916 90 90.000000000000 Chi(tan=inf, x=0.0, y=1.0): inf
    test 1917 90 90.000000000000 Xi(tan=inf, x=0.0, y=1.0): inf

    test 1918 90 90.000000000000 Phi(tan=inf, x=0.0, y=1.0): inf
    test 1919 90 90.000000000000 Beta(tan=inf, x=0.0, y=1.0): inf
    test 1920 90 90.000000000000 Theta(tan=inf, x=0.0, y=1.0): inf
    test 1921 90 90.000000000000 Mu(tan=inf, x=0.0, y=1.0): inf
    test 1922 90 90.000000000000 Chi(tan=inf, x=0.0, y=1.0): inf
    test 1923 90 90.000000000000 Xi(tan=inf, x=0.0, y=1.0): inf

    test 1924 93 92.979975455720 Phi(tan=-19.2096, x=-0.0519869, y=0.998648): -19.081136687728
    test 1925 93 92.989982200734 Beta(tan=-19.1452, x=-0.0521614, y=0.998639): -19.081136687728
    test 1926 93 93.000022425845 Theta(tan=-19.081, x=-0.0523363, y=0.99863): -19.081136687728
    test 1927 93 92.994991833280 Mu(tan=-19.1131, x=-0.0522487, y=0.998634): -19.081136687728
    test 1928 93 93.000000000000 Chi(tan=-19.0811, x=-0.052336, y=0.99863): -19.081136687728
    test 1929 93 92.993322244137 Xi(tan=-19.1238, x=-0.0522196, y=0.998636): -19.081136687728

    test 1930 93 92.979975455720 Phi(tan=-19.2096, x=-1, y=19.2096): -19.081136687728
    test 1931 93 92.989982200734 Beta(tan=-19.1452, x=-1, y=19.1452): -19.081136687728
    test 1932 93 93.000022425845 Theta(tan=-19.081, x=-1, y=19.081): -19.081136687728
    test 1933 93 92.994991833280 Mu(tan=-19.1131, x=-0.0522487, y=0.998634), iteration=3: -19.081136687728
    test 1934 93 93.000000000000 Chi(tan=-19.0811, x=-0.052336, y=0.99863): -19.081136687728
    test 1935 93 92.993322244137 Xi(tan=-19.1238, x=-0.104908, y=2.00624), iteration=2: -19.081136687728

    test 1936 96 95.960167767701 Phi(tan=-9.57842, x=-0.103837, y=0.994594): -9.514364454223
    test 1937 96 95.980073251302 Beta(tan=-9.5463, x=-0.104183, y=0.994558): -9.514364454223
    test 1938 96 96.000044242688 Theta(tan=-9.51429, x=-0.104529, y=0.994522): -9.514364454223
    test 1939 96 95.990038242095 Mu(tan=-9.5303, x=-0.104356, y=0.99454): -9.514364454223
    test 1940 96 96.000000000000 Chi(tan=-9.51436, x=-0.104528, y=0.994522): -9.514364454223
    test 1941 96 95.986717191360 Xi(tan=-9.53563, x=-0.104298, y=0.994546): -9.514364454223

    test 1942 96 95.960167767701 Phi(tan=-9.57842, x=-1, y=9.57842): -9.514364454223
    test 1943 96 95.980073251302 Beta(tan=-9.5463, x=-1, y=9.5463): -9.514364454223
    test 1944 96 96.000044242688 Theta(tan=-9.51429, x=-1, y=9.51429): -9.514364454223
    test 1945 96 95.990038242095 Mu(tan=-9.5303, x=-0.104356, y=0.99454), iteration=3: -9.514364454223
    test 1946 96 96.000000000000 Chi(tan=-9.51436, x=-0.104528, y=0.994522): -9.514364454223
    test 1947 96 95.986717191360 Xi(tan=-9.53563, x=-0.209532, y=1.99802), iteration=2: -9.514364454223

    test 1948 99 98.940791525708 Phi(tan=-6.35626, x=-0.155414, y=0.987849): -6.313751514675
    test 1949 99 98.970380848195 Beta(tan=-6.33495, x=-0.155924, y=0.987769): -6.313751514675
    test 1950 99 99.000064863922 Theta(tan=-6.31371, x=-0.156436, y=0.987688): -6.313751514675
    test 1951 99 98.985193216834 Mu(tan=-6.32433, x=-0.156179, y=0.987729): -6.313751514675
    test 1952 99 99.000000000000 Chi(tan=-6.31375, x=-0.156434, y=0.987688): -6.313751514675
    test 1953 99 98.980256768130 Xi(tan=-6.32786, x=-0.156094, y=0.987742): -6.313751514675

    test 1954 99 98.940791525708 Phi(tan=-6.35626, x=-1, y=6.35626): -6.313751514675
    test 1955 99 98.970380848195 Beta(tan=-6.33495, x=-1, y=6.33495): -6.313751514675
    test 1956 99 99.000064863922 Theta(tan=-6.31371, x=-1, y=6.31371): -6.313751514675
    test 1957 99 98.985193216834 Mu(tan=-6.32433, x=-0.156179, y=0.987729), iteration=3: -6.313751514675
    test 1958 99 99.000000000000 Chi(tan=-6.31375, x=-0.156434, y=0.987688): -6.313751514675
    test 1959 99 98.980256768130 Xi(tan=-6.32786, x=-0.31359, y=1.98435), iteration=3: -6.313751514675

    test 1960 102 101.922056806700 Phi(tan=-4.7363, x=-0.206581, y=0.97843): -4.704630109478
    test 1961 102 101.961010392180 Beta(tan=-4.72042, x=-0.207246, y=0.978289): -4.704630109478
    test 1962 102 102.000083746815 Theta(tan=-4.7046, x=-0.207913, y=0.978147): -4.704630109478
    test 1963 102 101.980509583453 Mu(tan=-4.71251, x=-0.207579, y=0.978218): -4.704630109478
    test 1964 102 102.000000000000 Chi(tan=-4.70463, x=-0.207912, y=0.978148): -4.704630109478
    test 1965 102 101.974011355314 Xi(tan=-4.71515, x=-0.207468, y=0.978242): -4.704630109478

    test 1966 102 101.922056806700 Phi(tan=-4.7363, x=-1, y=4.7363): -4.704630109478
    test 1967 102 101.961010392180 Beta(tan=-4.72042, x=-1, y=4.72042): -4.704630109478
    test 1968 102 102.000083746815 Theta(tan=-4.7046, x=-1, y=4.7046): -4.704630109478
    test 1969 102 101.980509583453 Mu(tan=-4.71251, x=-0.207579, y=0.978218), iteration=2: -4.704630109478
    test 1970 102 102.000000000000 Chi(tan=-4.70463, x=-0.207912, y=0.978148): -4.704630109478
    test 1971 102 101.974011355314 Xi(tan=-4.71515, x=-0.416799, y=1.96527), iteration=2: -4.704630109478

    test 1972 105 104.904166968877 Phi(tan=-3.75718, x=-0.257203, y=0.966357): -3.732050807569
    test 1973 105 104.952063867788 Beta(tan=-3.74458, x=-0.258011, y=0.966142): -3.732050807569
    test 1974 105 105.000100412186 Theta(tan=-3.73202, x=-0.258821, y=0.965925): -3.732050807569
    test 1975 105 104.976038435868 Mu(tan=-3.7383, x=-0.258415, y=0.966034): -3.732050807569
    test 1976 105 105.000000000000 Chi(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 1977 105 104.968049034476 Xi(tan=-3.74039, x=-0.25828, y=0.96607): -3.732050807569

    test 1978 105 104.904166968877 Phi(tan=-3.75718, x=-1, y=3.75718): -3.732050807569
    test 1979 105 104.952063867788 Beta(tan=-3.74458, x=-1, y=3.74458): -3.732050807569
    test 1980 105 105.000100412186 Theta(tan=-3.73202, x=-1, y=3.73202): -3.732050807569
    test 1981 105 104.976038435868 Mu(tan=-3.7383, x=-0.258415, y=0.966034), iteration=3: -3.732050807569
    test 1982 105 105.000000000000 Chi(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 1983 105 104.968049034476 Xi(tan=-3.74039, x=-0.51888, y=1.94082), iteration=2: -3.732050807569

    test 1984 108 107.887316506149 Phi(tan=-3.0984, x=-0.307146, y=0.951662): -3.077683537175
    test 1985 108 107.943638755482 Beta(tan=-3.08802, x=-0.308081, y=0.95136): -3.077683537175
    test 1986 108 108.000114461489 Theta(tan=-3.07766, x=-0.309019, y=0.951056): -3.077683537175
    test 1987 108 107.971828585776 Mu(tan=-3.08284, x=-0.308549, y=0.951208): -3.077683537175
    test 1988 108 108.000000000000 Chi(tan=-3.07768, x=-0.309017, y=0.951057): -3.077683537175
    test 1989 108 107.962434856938 Xi(tan=-3.08456, x=-0.308393, y=0.951259): -3.077683537175

    test 1990 108 107.887316506149 Phi(tan=-3.0984, x=-1, y=3.0984): -3.077683537175
    test 1991 108 107.943638755482 Beta(tan=-3.08802, x=-1, y=3.08802): -3.077683537175
    test 1992 108 108.000114461489 Theta(tan=-3.07766, x=-1, y=3.07766): -3.077683537175
    test 1993 108 107.971828585776 Mu(tan=-3.08284, x=-0.308549, y=0.951208), iteration=3: -3.077683537175
    test 1994 108 108.000000000000 Chi(tan=-3.07768, x=-0.309017, y=0.951057): -3.077683537175
    test 1995 108 107.962434856938 Xi(tan=-3.08456, x=-0.619556, y=1.91106), iteration=2: -3.077683537175

    test 1996 111 110.871688983015 Phi(tan=-2.62263, x=-0.356276, y=0.934381): -2.605089064694
    test 1997 111 110.935826987159 Beta(tan=-2.61384, x=-0.357322, y=0.933981): -2.605089064694
    test 1998 111 111.000125590586 Theta(tan=-2.60507, x=-0.35837, y=0.93358): -2.605089064694
    test 1999 111 110.967926035496 Mu(tan=-2.60945, x=-0.357845, y=0.933781): -2.605089064694
    test 2000 111 111.000000000000 Chi(tan=-2.60509, x=-0.358368, y=0.93358): -2.605089064694
    test 2001 111 110.957230142972 Xi(tan=-2.61091, x=-0.357671, y=0.933848): -2.605089064694

    test 2002 111 110.871688983015 Phi(tan=-2.62263, x=-1, y=2.62263): -2.605089064694
    test 2003 111 110.935826987159 Beta(tan=-2.61384, x=-1, y=2.61384): -2.605089064694
    test 2004 111 111.000125590586 Theta(tan=-2.60507, x=-1, y=2.60507): -2.605089064694
    test 2005 111 110.967926035496 Mu(tan=-2.60945, x=-0.357845, y=0.933781), iteration=3: -2.605089064694
    test 2006 111 111.000000000000 Chi(tan=-2.60509, x=-0.358368, y=0.93358): -2.605089064694
    test 2007 111 110.957230142972 Xi(tan=-2.61091, x=-0.718554, y=1.87608), iteration=2: -2.605089064694

    test 2008 114 113.857455069612 Phi(tan=-2.26116, x=-0.404463, y=0.914555): -2.246036773904
    test 2009 114 113.928713955385 Beta(tan=-2.25358, x=-0.4056, y=0.914051): -2.246036773904
    test 2010 114 114.000133599673 Theta(tan=-2.24602, x=-0.406739, y=0.913545): -2.246036773904
    test 2011 114 113.964373479294 Mu(tan=-2.2498, x=-0.406169, y=0.913798): -2.246036773904
    test 2012 114 114.000000000000 Chi(tan=-2.24604, x=-0.406737, y=0.913545): -2.246036773904
    test 2013 114 113.952491818284 Xi(tan=-2.25106, x=-0.405979, y=0.913882): -2.246036773904

    test 2014 114 113.857455069612 Phi(tan=-2.26116, x=-1, y=2.26116): -2.246036773904
    test 2015 114 113.928713955385 Beta(tan=-2.25358, x=-1, y=2.25358): -2.246036773904
    test 2016 114 114.000133599673 Theta(tan=-2.24602, x=-1, y=2.24602): -2.246036773904
    test 2017 114 113.964373479294 Mu(tan=-2.2498, x=-0.406169, y=0.913798), iteration=3: -2.246036773904
    test 2018 114 114.000000000000 Chi(tan=-2.24604, x=-0.406737, y=0.913545): -2.246036773904
    test 2019 114 113.952491818284 Xi(tan=-2.25106, x=-0.815604, y=1.83597), iteration=3: -2.246036773904

    test 2020 117 116.844770696439 Phi(tan=-1.97583, x=-0.451575, y=0.892233): -1.962610505505
    test 2021 117 116.922377586525 Beta(tan=-1.9692, x=-0.452783, y=0.891621): -1.962610505505
    test 2022 117 117.000138398941 Theta(tan=-1.9626, x=-0.453993, y=0.891005): -1.962610505505
    test 2023 117 116.961209838409 Mu(tan=-1.9659, x=-0.453387, y=0.891314): -1.962610505505
    test 2024 117 117.000000000000 Chi(tan=-1.96261, x=-0.45399, y=0.891007): -1.962610505505
    test 2025 117 116.948271794696 Xi(tan=-1.967, x=-0.453186, y=0.891416): -1.962610505505

    test 2026 117 116.844770696439 Phi(tan=-1.97583, x=-1, y=1.97583): -1.962610505505
    test 2027 117 116.922377586525 Beta(tan=-1.9692, x=-1, y=1.9692): -1.962610505505
    test 2028 117 117.000138398941 Theta(tan=-1.9626, x=-1, y=1.9626): -1.962610505505
    test 2029 117 116.961209838409 Mu(tan=-1.9659, x=-0.453387, y=0.891314), iteration=3: -1.962610505505
    test 2030 117 117.000000000000 Chi(tan=-1.96261, x=-0.45399, y=0.891007): -1.962610505505
    test 2031 117 116.948271794696 Xi(tan=-1.967, x=-0.910441, y=1.79084), iteration=3: -1.962610505505

    test 2032 120 119.833775347807 Phi(tan=-1.74371, x=-0.497485, y=0.867472): -1.732050807569
    test 2033 120 119.916887487494 Beta(tan=-1.73787, x=-0.498743, y=0.86675): -1.732050807569
    test 2034 120 120.000140009758 Theta(tan=-1.73204, x=-0.500002, y=0.866024): -1.732050807569
    test 2035 120 119.958469834751 Mu(tan=-1.73495, x=-0.499372, y=0.866388): -1.732050807569
    test 2036 120 120.000000000000 Chi(tan=-1.73205, x=-0.5, y=0.866025): -1.732050807569
    test 2037 120 119.944616401609 Xi(tan=-1.73592, x=-0.499163, y=0.866508): -1.732050807569

    test 2038 120 119.833775347807 Phi(tan=-1.74371, x=-1, y=1.74371): -1.732050807569
    test 2039 120 119.916887487494 Beta(tan=-1.73787, x=-1, y=1.73787): -1.732050807569
    test 2040 120 120.000140009758 Theta(tan=-1.73204, x=-1, y=1.73204): -1.732050807569
    test 2041 120 119.958469834751 Mu(tan=-1.73495, x=-0.499372, y=0.866388), iteration=3: -1.732050807569
    test 2042 120 120.000000000000 Chi(tan=-1.73205, x=-0.5, y=0.866025): -1.732050807569
    test 2043 120 119.944616401609 Xi(tan=-1.73592, x=-1.00281, y=1.7408), iteration=2: -1.732050807569

    test 2044 123 122.824590512571 Phi(tan=-1.55023, x=-0.542069, y=0.840334): -1.539864963815
    test 2045 123 122.912304175451 Beta(tan=-1.54504, x=-0.543355, y=0.839503): -1.539864963815
    test 2046 123 123.000138561344 Theta(tan=-1.53986, x=-0.544641, y=0.838669): -1.539864963815
    test 2047 123 122.956183607930 Mu(tan=-1.54245, x=-0.543998, y=0.839087): -1.539864963815
    test 2048 123 123.000000000000 Chi(tan=-1.53986, x=-0.544639, y=0.838671): -1.539864963815
    test 2049 123 122.941565874450 Xi(tan=-1.54331, x=-0.543783, y=0.839226): -1.539864963815

    test 2050 123 122.824590512571 Phi(tan=-1.55023, x=-1, y=1.55023): -1.539864963815
    test 2051 123 122.912304175451 Beta(tan=-1.54504, x=-1, y=1.54504): -1.539864963815
    test 2052 123 123.000138561344 Theta(tan=-1.53986, x=-1, y=1.53986): -1.539864963815
    test 2053 123 122.956183607930 Mu(tan=-1.54245, x=-0.543998, y=0.839087), iteration=3: -1.539864963815
    test 2054 123 123.000000000000 Chi(tan=-1.53986, x=-0.544639, y=0.838671): -1.539864963815
    test 2055 123 122.941565874450 Xi(tan=-1.54331, x=-1.09245, y=1.68599), iteration=2: -1.539864963815

    test 2056 126 125.817318309875 Phi(tan=-1.38565, x=-0.585203, y=0.810887): -1.376381920471
    test 2057 126 125.908678399154 Beta(tan=-1.38101, x=-0.586495, y=0.809953): -1.376381920471
    test 2058 126 126.000134283091 Theta(tan=-1.37638, x=-0.587787, y=0.809016): -1.376381920471
    test 2059 126 125.954376379912 Mu(tan=-1.37869, x=-0.587141, y=0.809485): -1.376381920471
    test 2060 126 126.000000000000 Chi(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 2061 126 125.939153905889 Xi(tan=-1.37946, x=-0.586926, y=0.809641): -1.376381920471

    test 2062 126 125.817318309875 Phi(tan=-1.38565, x=-1, y=1.38565): -1.376381920471
    test 2063 126 125.908678399154 Beta(tan=-1.38101, x=-1, y=1.38101): -1.376381920471
    test 2064 126 126.000134283091 Theta(tan=-1.37638, x=-1, y=1.37638): -1.376381920471
    test 2065 126 125.954376379912 Mu(tan=-1.37869, x=-0.587141, y=0.809485), iteration=3: -1.376381920471
    test 2066 126 126.000000000000 Chi(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 2067 126 125.939153905889 Xi(tan=-1.37946, x=-1.17912, y=1.62655), iteration=2: -1.376381920471

    test 2068 129 128.812040306735 Phi(tan=-1.24321, x=-0.626768, y=0.779206): -1.234897156535
    test 2069 129 128.906050560073 Beta(tan=-1.23905, x=-0.628045, y=0.778177): -1.234897156535
    test 2070 129 129.000127492879 Theta(tan=-1.23489, x=-0.629322, y=0.777145): -1.234897156535
    test 2071 129 128.953068171197 Mu(tan=-1.23697, x=-0.628684, y=0.777661): -1.234897156535
    test 2072 129 129.000000000000 Chi(tan=-1.2349, x=-0.62932, y=0.777146): -1.234897156535
    test 2073 129 128.937407265034 Xi(tan=-1.23766, x=-0.628471, y=0.777833): -1.234897156535

    test 2074 129 128.812040306735 Phi(tan=-1.24321, x=-1, y=1.24321): -1.234897156535
    test 2075 129 128.906050560073 Beta(tan=-1.23905, x=-1, y=1.23905): -1.234897156535
    test 2076 129 129.000127492879 Theta(tan=-1.23489, x=-1, y=1.23489): -1.234897156535
    test 2077 129 128.953068171197 Mu(tan=-1.23697, x=-0.628684, y=0.777661), iteration=3: -1.234897156535
    test 2078 129 129.000000000000 Chi(tan=-1.2349, x=-0.62932, y=0.777146): -1.234897156535
    test 2079 129 128.937407265034 Xi(tan=-1.23766, x=-1.26259, y=1.56265), iteration=2: -1.234897156535

    test 2080 132 131.808816543054 Phi(tan=-1.11809, x=-0.666647, y=0.745373): -1.110612514829
    test 2081 132 131.904450240544 Beta(tan=-1.11434, x=-0.66789, y=0.74426): -1.110612514829
    test 2082 132 132.000118581886 Theta(tan=-1.11061, x=-0.669132, y=0.743143): -1.110612514829
    test 2083 132 131.952273571942 Mu(tan=-1.11247, x=-0.668511, y=0.743702): -1.110612514829
    test 2084 132 132.000000000000 Chi(tan=-1.11061, x=-0.669131, y=0.743145): -1.110612514829
    test 2085 132 131.936345489313 Xi(tan=-1.1131, x=-0.668305, y=0.743888): -1.110612514829

    test 2086 132 131.808816543054 Phi(tan=-1.11809, x=-1, y=1.11809): -1.110612514829
    test 2087 132 131.904450240544 Beta(tan=-1.11434, x=-1, y=1.11434): -1.110612514829
    test 2088 132 132.000118581886 Theta(tan=-1.11061, x=-1, y=1.11061): -1.110612514829
    test 2089 132 131.952273571942 Mu(tan=-1.11247, x=-0.668511, y=0.743702), iteration=2: -1.110612514829
    test 2090 132 132.000000000000 Chi(tan=-1.11061, x=-0.669131, y=0.743145): -1.110612514829
    test 2091 132 131.936345489313 Xi(tan=-1.1131, x=-1.34261, y=1.49446), iteration=2: -1.110612514829

    test 2092 135 134.807684778155 Phi(tan=-1.00674, x=-0.704729, y=0.709476): -1.000000000000
    test 2093 135 134.903895845383 Beta(tan=-1.00336, x=-0.70592, y=0.708292): -1.000000000000
    test 2094 135 135.000107996571 Theta(tan=-0.999996, x=-0.707108, y=0.707105): -1.000000000000
    test 2095 135 134.952001570934 Mu(tan=-1.00168, x=-0.706514, y=0.707699): -1.000000000000
    test 2096 135 135.000000000000 Chi(tan=-1, x=-0.707107, y=0.707107): -1.000000000000
    test 2097 135 134.935980653019 Xi(tan=-1.00224, x=-0.706316, y=0.707896): -1.000000000000

    test 2098 135 134.807684778155 Phi(tan=-1.00674, x=-1, y=1.00674): -1.000000000000
    test 2099 135 134.903895845383 Beta(tan=-1.00336, x=-1, y=1.00336): -1.000000000000
    test 2100 135 135.000107996571 Theta(tan=-0.999996, x=-1, y=0.999996): -1.000000000000
    test 2101 135 134.952001570934 Mu(tan=-1.00168, x=-0.706514, y=0.707699), iteration=2: -1.000000000000
    test 2102 135 135.000000000000 Chi(tan=-1, x=-0.707107, y=0.707107): -1.000000000000
    test 2103 135 134.935980653019 Xi(tan=-1.00224, x=-1.41898, y=1.42215), iteration=3: -1.000000000000

    test 2104 138 137.808659971180 Phi(tan=-0.906469, x=-0.740906, y=0.671609): -0.900404044298
    test 2105 138 137.904394362360 Beta(tan=-0.90343, x=-0.742027, y=0.67037): -0.900404044298
    test 2106 138 138.000096218618 Theta(tan=-0.900401, x=-0.743146, y=0.669129): -0.900404044298
    test 2107 138 137.952255444795 Mu(tan=-0.901914, x=-0.742587, y=0.66975): -0.900404044298
    test 2108 138 138.000000000000 Chi(tan=-0.900404, x=-0.743145, y=0.669131): -0.900404044298
    test 2109 138 137.936317215816 Xi(tan=-0.902419, x=-0.742401, y=0.669956): -0.900404044298

    test 2110 138 137.808659971180 Phi(tan=-0.906469, x=-1, y=0.906469): -0.900404044298
    test 2111 138 137.904394362360 Beta(tan=-0.90343, x=-1, y=0.90343): -0.900404044298
    test 2112 138 138.000096218618 Theta(tan=-0.900401, x=-1, y=0.900401): -0.900404044298
    test 2113 138 137.952255444795 Mu(tan=-0.901914, x=-0.742587, y=0.66975), iteration=3: -0.900404044298
    test 2114 138 138.000000000000 Chi(tan=-0.900404, x=-0.743145, y=0.669131): -0.900404044298
    test 2115 138 137.936317215816 Xi(tan=-0.902419, x=-1.49147, y=1.34593), iteration=2: -0.900404044298

    test 2116 141 140.811734005606 Phi(tan=-0.815239, x=-0.775074, y=0.631871): -0.809784033195
    test 2117 141 140.905941245773 Beta(tan=-0.812506, x=-0.776112, y=0.630595): -0.809784033195
    test 2118 141 141.000083743694 Theta(tan=-0.809782, x=-0.777147, y=0.629319): -0.809784033195
    test 2119 141 140.953032709132 Mu(tan=-0.811142, x=-0.77663, y=0.629957): -0.809784033195
    test 2120 141 141.000000000000 Chi(tan=-0.809784, x=-0.777146, y=0.62932): -0.809784033195
    test 2121 141 140.937351953700 Xi(tan=-0.811596, x=-0.776457, y=0.63017): -0.809784033195

    test 2122 141 140.811734005606 Phi(tan=-0.815239, x=-1, y=0.815239): -0.809784033195
    test 2123 141 140.905941245773 Beta(tan=-0.812506, x=-1, y=0.812506): -0.809784033195
    test 2124 141 141.000083743694 Theta(tan=-0.809782, x=-1, y=0.809782): -0.809784033195
    test 2125 141 140.953032709132 Mu(tan=-0.811142, x=-0.77663, y=0.629957), iteration=3: -0.809784033195
    test 2126 141 141.000000000000 Chi(tan=-0.809784, x=-0.777146, y=0.62932): -0.809784033195
    test 2127 141 140.937351953700 Xi(tan=-0.811596, x=-1.55989, y=1.266), iteration=2: -0.809784033195

    test 2128 144 143.816875665726 Phi(tan=-0.731437, x=-0.807134, y=0.590368): -0.726542528005
    test 2129 144 143.908520426154 Beta(tan=-0.728985, x=-0.808077, y=0.589076): -0.726542528005
    test 2130 144 144.000071059980 Theta(tan=-0.726541, x=-0.809018, y=0.587784): -0.726542528005
    test 2131 144 143.954325132764 Mu(tan=-0.727761, x=-0.808548, y=0.58843): -0.726542528005
    test 2132 144 144.000000000000 Chi(tan=-0.726543, x=-0.809017, y=0.587785): -0.726542528005
    test 2133 144 143.939073974040 Xi(tan=-0.728168, x=-0.808392, y=0.588645): -0.726542528005

    test 2134 144 143.816875665726 Phi(tan=-0.731437, x=-1, y=0.731437): -0.726542528005
    test 2135 144 143.908520426154 Beta(tan=-0.728985, x=-1, y=0.728985): -0.726542528005
    test 2136 144 144.000071059980 Theta(tan=-0.726541, x=-1, y=0.726541): -0.726542528005
    test 2137 144 143.954325132764 Mu(tan=-0.727761, x=-0.808548, y=0.58843), iteration=2: -0.726542528005
    test 2138 144 144.000000000000 Chi(tan=-0.726543, x=-0.809017, y=0.587785): -0.726542528005
    test 2139 144 143.939073974040 Xi(tan=-0.728168, x=-1.62404, y=1.18258), iteration=3: -0.726542528005

    test 2140 147 146.824030870318 Phi(tan=-0.653783, x=-0.836994, y=0.547212): -0.649407593198
    test 2141 147 146.912104447745 Beta(tan=-0.651591, x=-0.837834, y=0.545925): -0.649407593198
    test 2142 147 147.000058627387 Theta(tan=-0.649406, x=-0.838671, y=0.544638): -0.649407593198
    test 2143 147 146.956118815411 Mu(tan=-0.650497, x=-0.838253, y=0.545281): -0.649407593198
    test 2144 147 147.000000000000 Chi(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 2145 147 146.941464815429 Xi(tan=-0.650861, x=-0.838114, y=0.545496): -0.649407593198

    test 2146 147 146.824030870318 Phi(tan=-0.653783, x=-1, y=0.653783): -0.649407593198
    test 2147 147 146.912104447745 Beta(tan=-0.651591, x=-1, y=0.651591): -0.649407593198
    test 2148 147 147.000058627387 Theta(tan=-0.649406, x=-1, y=0.649406): -0.649407593198
    test 2149 147 146.956118815411 Mu(tan=-0.650497, x=-0.838253, y=0.545281), iteration=2: -0.649407593198
    test 2150 147 147.000000000000 Chi(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 2151 147 146.941464815429 Xi(tan=-0.650861, x=-1.68375, y=1.09589), iteration=2: -0.649407593198

    test 2152 150 149.833123165708 Phi(tan=-0.58124, x=-0.864565, y=0.50252): -0.577350269190
    test 2153 150 149.916654733950 Beta(tan=-0.579291, x=-0.865297, y=0.501259): -0.577350269190
    test 2154 150 150.000046858376 Theta(tan=-0.577349, x=-0.866026, y=0.499999): -0.577350269190
    test 2155 150 149.958394328571 Mu(tan=-0.578319, x=-0.865662, y=0.500629): -0.577350269190
    test 2156 150 150.000000000000 Chi(tan=-0.57735, x=-0.866025, y=0.5): -0.577350269190
    test 2157 150 149.944498632112 Xi(tan=-0.578643, x=-0.865541, y=0.500839): -0.577350269190

    test 2158 150 149.833123165708 Phi(tan=-0.58124, x=-1, y=0.58124): -0.577350269190
    test 2159 150 149.916654733950 Beta(tan=-0.579291, x=-1, y=0.579291): -0.577350269190
    test 2160 150 150.000046858376 Theta(tan=-0.577349, x=-1, y=0.577349): -0.577350269190
    test 2161 150 149.958394328571 Mu(tan=-0.578319, x=-0.865662, y=0.500629), iteration=3: -0.577350269190
    test 2162 150 150.000000000000 Chi(tan=-0.57735, x=-0.866025, y=0.5): -0.577350269190
    test 2163 150 149.944498632112 Xi(tan=-0.578643, x=-1.73885, y=1.00617), iteration=2: -0.577350269190

    test 2164 153 152.844054477289 Phi(tan=-0.512959, x=-0.889768, y=0.456414): -0.509525449494
    test 2165 153 152.922121979423 Beta(tan=-0.511239, x=-0.890389, y=0.455201): -0.509525449494
    test 2166 153 153.000036101230 Theta(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494
    test 2167 153 152.961126918518 Mu(tan=-0.51038, x=-0.890698, y=0.454595): -0.509525449494
    test 2168 153 153.000000000000 Chi(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494
    test 2169 153 152.948142461760 Xi(tan=-0.510666, x=-0.890595, y=0.454797): -0.509525449494

    test 2170 153 152.844054477289 Phi(tan=-0.512959, x=-1, y=0.512959): -0.509525449494
    test 2171 153 152.922121979423 Beta(tan=-0.511239, x=-1, y=0.511239): -0.509525449494
    test 2172 153 153.000036101230 Theta(tan=-0.509525, x=-1, y=0.509525): -0.509525449494
    test 2173 153 152.961126918518 Mu(tan=-0.51038, x=-0.890698, y=0.454595), iteration=2: -0.509525449494
    test 2174 153 153.000000000000 Chi(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494
    test 2175 153 152.948142461760 Xi(tan=-0.510666, x=-1.78919, y=0.913678), iteration=3: -0.509525449494

    test 2176 156 155.856706115158 Phi(tan=-0.448229, x=-0.912525, y=0.40902): -0.445228685309
    test 2177 156 155.928446665868 Beta(tan=-0.446726, x=-0.913037, y=0.407877): -0.445228685309
    test 2178 156 156.000026626488 Theta(tan=-0.445228, x=-0.913546, y=0.406736): -0.445228685309
    test 2179 156 155.964286769667 Mu(tan=-0.445976, x=-0.913292, y=0.407306): -0.445228685309
    test 2180 156 156.000000000000 Chi(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309
    test 2181 156 155.952356574339 Xi(tan=-0.446225, x=-0.913207, y=0.407496): -0.445228685309

    test 2182 156 155.856706115158 Phi(tan=-0.448229, x=-1, y=0.448229): -0.445228685309
    test 2183 156 155.928446665868 Beta(tan=-0.446726, x=-1, y=0.446726): -0.445228685309
    test 2184 156 156.000026626488 Theta(tan=-0.445228, x=-1, y=0.445228): -0.445228685309
    test 2185 156 155.964286769667 Mu(tan=-0.445976, x=-0.913292, y=0.407306), iteration=3: -0.445228685309
    test 2186 156 156.000000000000 Chi(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309
    test 2187 156 155.952356574339 Xi(tan=-0.446225, x=-1.83461, y=0.818652), iteration=2: -0.445228685309

    test 2188 159 158.870940025993 Phi(tan=-0.386451, x=-0.932771, y=0.36047): -0.383864035035
    test 2189 159 158.935559697022 Beta(tan=-0.385155, x=-0.933177, y=0.359418): -0.383864035035
    test 2190 159 159.000018617151 Theta(tan=-0.383864, x=-0.933581, y=0.358368): -0.383864035035
    test 2191 159 158.967839325753 Mu(tan=-0.384508, x=-0.933379, y=0.358892): -0.383864035035
    test 2192 159 159.000000000000 Chi(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035
    test 2193 159 158.957094898814 Xi(tan=-0.384723, x=-0.933312, y=0.359067): -0.383864035035

    test 2194 159 158.870940025993 Phi(tan=-0.386451, x=-1, y=0.386451): -0.383864035035
    test 2195 159 158.935559697022 Beta(tan=-0.385155, x=-1, y=0.385155): -0.383864035035
    test 2196 159 159.000018617151 Theta(tan=-0.383864, x=-1, y=0.383864): -0.383864035035
    test 2197 159 158.967839325753 Mu(tan=-0.384508, x=-0.933379, y=0.358892), iteration=3: -0.383864035035
    test 2198 159 159.000000000000 Chi(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035
    test 2199 159 158.957094898814 Xi(tan=-0.384723, x=-1.875, y=0.721358), iteration=3: -0.383864035035

    test 2200 162 161.886600279742 Phi(tan=-0.327109, x=-0.950443, y=0.310899): -0.324919696233
    test 2201 162 161.943383146627 Beta(tan=-0.326013, x=-0.950751, y=0.309957): -0.324919696233
    test 2202 162 162.000012163074 Theta(tan=-0.324919, x=-0.951057, y=0.309017): -0.324919696233
    test 2203 162 161.971745665557 Mu(tan=-0.325465, x=-0.950904, y=0.309486): -0.324919696233
    test 2204 162 162.000000000000 Chi(tan=-0.32492, x=-0.951057, y=0.309017): -0.324919696233
    test 2205 162 161.962305523399 Xi(tan=-0.325647, x=-0.950853, y=0.309643): -0.324919696233

    test 2206 162 161.886600279742 Phi(tan=-0.327109, x=-1, y=0.327109): -0.324919696233
    test 2207 162 161.943383146627 Beta(tan=-0.326013, x=-1, y=0.326013): -0.324919696233
    test 2208 162 162.000012163074 Theta(tan=-0.324919, x=-1, y=0.324919): -0.324919696233
    test 2209 162 161.971745665557 Mu(tan=-0.325465, x=-0.950904, y=0.309486), iteration=3: -0.324919696233
    test 2210 162 162.000000000000 Chi(tan=-0.32492, x=-0.951057, y=0.309017): -0.324919696233
    test 2211 162 161.962305523399 Xi(tan=-0.325647, x=-1.91024, y=0.622066), iteration=2: -0.324919696233

    test 2212 165 164.903514776084 Phi(tan=-0.269755, x=-0.965489, y=0.260445): -0.267949192431
    test 2213 165 164.951831111660 Beta(tan=-0.26885, x=-0.965708, y=0.259631): -0.267949192431
    test 2214 165 165.000007259768 Theta(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431
    test 2215 165 164.975962929206 Mu(tan=-0.268399, x=-0.965817, y=0.259224): -0.267949192431
    test 2216 165 165.000000000000 Chi(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431
    test 2217 165 164.967931264091 Xi(tan=-0.268549, x=-0.965781, y=0.25936): -0.267949192431

    test 2218 165 164.903514776084 Phi(tan=-0.269755, x=-1, y=0.269755): -0.267949192431
    test 2219 165 164.951831111660 Beta(tan=-0.26885, x=-1, y=0.26885): -0.267949192431
    test 2220 165 165.000007259768 Theta(tan=-0.267949, x=-1, y=0.267949): -0.267949192431
    test 2221 165 164.975962929206 Mu(tan=-0.268399, x=-0.965817, y=0.259224), iteration=2: -0.267949192431
    test 2222 165 165.000000000000 Chi(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431
    test 2223 165 164.967931264091 Xi(tan=-0.268549, x=-1.94023, y=0.521048), iteration=2: -0.267949192431

    test 2224 168 167.921497152166 Phi(tan=-0.213989, x=-0.977862, y=0.209252): -0.212556561670
    test 2225 168 167.960810661508 Beta(tan=-0.213272, x=-0.978005, y=0.208581): -0.212556561670
    test 2226 168 168.000003811668 Theta(tan=-0.212556, x=-0.978148, y=0.207912): -0.212556561670
    test 2227 168 167.980444790381 Mu(tan=-0.212913, x=-0.978077, y=0.208246): -0.212556561670
    test 2228 168 168.000000000000 Chi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 2229 168 167.973910295272 Xi(tan=-0.213033, x=-0.978053, y=0.208357): -0.212556561670

    test 2230 168 167.921497152166 Phi(tan=-0.213989, x=-1, y=0.213989): -0.212556561670
    test 2231 168 167.960810661508 Beta(tan=-0.213272, x=-1, y=0.213272): -0.212556561670
    test 2232 168 168.000003811668 Theta(tan=-0.212556, x=-1, y=0.212556): -0.212556561670
    test 2233 168 167.980444790381 Mu(tan=-0.212913, x=-0.978077, y=0.208246), iteration=3: -0.212556561670
    test 2234 168 168.000000000000 Chi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 2235 168 167.973910295272 Xi(tan=-0.213033, x=-1.96489, y=0.418585), iteration=3: -0.212556561670

    test 2236 171 170.940348869815 Phi(tan=-0.159452, x=-0.987525, y=0.157463): -0.158384440325
    test 2237 171 170.970222872358 Beta(tan=-0.158917, x=-0.987607, y=0.156948): -0.158384440325
    test 2238 171 171.000001639673 Theta(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325
    test 2239 171 170.985141969157 Mu(tan=-0.15865, x=-0.987648, y=0.156691): -0.158384440325
    test 2240 171 171.000000000000 Chi(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325
    test 2241 171 170.980176835305 Xi(tan=-0.158739, x=-0.987634, y=0.156776): -0.158384440325

    test 2242 171 170.940348869815 Phi(tan=-0.159452, x=-1, y=0.159452): -0.158384440325
    test 2243 171 170.970222872358 Beta(tan=-0.158917, x=-1, y=0.158917): -0.158384440325
    test 2244 171 171.000001639673 Theta(tan=-0.158384, x=-1, y=0.158384): -0.158384440325
    test 2245 171 170.985141969157 Mu(tan=-0.15865, x=-0.987648, y=0.156691), iteration=2: -0.158384440325
    test 2246 171 171.000000000000 Chi(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325
    test 2247 171 170.980176835305 Xi(tan=-0.158739, x=-1.98414, y=0.31496), iteration=2: -0.158384440325

    test 2248 174 173.959861457396 Phi(tan=-0.105813, x=-0.994448, y=0.105225): -0.105104235266
    test 2249 174 173.979963934785 Beta(tan=-0.105458, x=-0.994485, y=0.104876): -0.105104235266
    test 2250 174 174.000000492613 Theta(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266
    test 2251 174 173.990002779616 Mu(tan=-0.105281, x=-0.994504, y=0.104702): -0.105104235266
    test 2252 174 174.000000000000 Chi(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266
    test 2253 174 173.986661879264 Xi(tan=-0.10534, x=-0.994498, y=0.10476): -0.105104235266

    test 2254 174 173.959861457396 Phi(tan=-0.105813, x=-1, y=0.105813): -0.105104235266
    test 2255 174 173.979963934785 Beta(tan=-0.105458, x=-1, y=0.105458): -0.105104235266
    test 2256 174 174.000000492613 Theta(tan=-0.105104, x=-1, y=0.105104): -0.105104235266
    test 2257 174 173.990002779616 Mu(tan=-0.105281, x=-0.994504, y=0.104702), iteration=3: -0.105104235266
    test 2258 174 174.000000000000 Chi(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266
    test 2259 174 173.986661879264 Xi(tan=-0.10534, x=-1.99793, y=0.210461), iteration=2: -0.105104235266

    test 2260 177 176.979818878824 Phi(tan=-0.052761, x=-0.998611, y=0.0526877): -0.052407779283
    test 2261 177 176.989926321337 Beta(tan=-0.0525841, x=-0.99862, y=0.0525115): -0.052407779283
    test 2262 177 177.000000062090 Theta(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283
    test 2263 177 176.994973705906 Mu(tan=-0.0524957, x=-0.998625, y=0.0524236): -0.052407779283
    test 2264 177 177.000000000000 Chi(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283
    test 2265 177 176.993293970223 Xi(tan=-0.0525251, x=-0.998623, y=0.0524528): -0.052407779283

    test 2266 177 176.979818878824 Phi(tan=-0.052761, x=-1, y=0.052761): -0.052407779283
    test 2267 177 176.989926321337 Beta(tan=-0.0525841, x=-1, y=0.0525841): -0.052407779283
    test 2268 177 177.000000062090 Theta(tan=-0.0524078, x=-1, y=0.0524078): -0.052407779283
    test 2269 177 176.994973705906 Mu(tan=-0.0524957, x=-0.998625, y=0.0524236), iteration=3: -0.052407779283
    test 2270 177 177.000000000000 Chi(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283
    test 2271 177 176.993293970223 Xi(tan=-0.0525251, x=-2.00621, y=0.105377), iteration=2: -0.052407779283

    test 2272 180 180.000000000000 Phi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 2273 180 180.000000000000 Beta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 2274 180 180.000000000000 Theta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 2275 180 180.000000000000 Mu(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 2276 180 180.000000000000 Chi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 2277 180 180.000000000000 Xi(tan=0.0, x=-1, y=0.0): 0.000000000000

    test 2278 180 180.000000000000 Phi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 2279 180 180.000000000000 Beta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 2280 180 180.000000000000 Theta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 2281 180 180.000000000000 Mu(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 2282 180 180.000000000000 Chi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 2283 180 180.000000000000 Xi(tan=0.0, x=-1, y=0.0): 0.000000000000

    test 2284 183 183.020181121176 Phi(tan=0.052761, x=-0.998611, y=-0.0526877): 0.052407779283
    test 2285 183 183.010073678663 Beta(tan=0.0525841, x=-0.99862, y=-0.0525115): 0.052407779283
    test 2286 183 182.999999937910 Theta(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283
    test 2287 183 183.005026294094 Mu(tan=0.0524957, x=-0.998625, y=-0.0524236): 0.052407779283
    test 2288 183 183.000000000000 Chi(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283
    test 2289 183 183.006706029777 Xi(tan=0.0525251, x=-0.998623, y=-0.0524528): 0.052407779283

    test 2290 183 183.020181121176 Phi(tan=0.052761, x=-1, y=-0.052761): 0.052407779283
    test 2291 183 183.010073678663 Beta(tan=0.0525841, x=-1, y=-0.0525841): 0.052407779283
    test 2292 183 182.999999937910 Theta(tan=0.0524078, x=-1, y=-0.0524078): 0.052407779283
    test 2293 183 183.005026294094 Mu(tan=0.0524957, x=-0.998625, y=-0.0524236), iteration=3: 0.052407779283
    test 2294 183 183.000000000000 Chi(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283
    test 2295 183 183.006706029777 Xi(tan=0.0525251, x=-2.00621, y=-0.105377), iteration=2: 0.052407779283

    test 2296 186 186.040138542604 Phi(tan=0.105813, x=-0.994448, y=-0.105225): 0.105104235266
    test 2297 186 186.020036065215 Beta(tan=0.105458, x=-0.994485, y=-0.104876): 0.105104235266
    test 2298 186 185.999999507387 Theta(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266
    test 2299 186 186.009997220384 Mu(tan=0.105281, x=-0.994504, y=-0.104702): 0.105104235266
    test 2300 186 186.000000000000 Chi(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266
    test 2301 186 186.013338120736 Xi(tan=0.10534, x=-0.994498, y=-0.10476): 0.105104235266

    test 2302 186 186.040138542604 Phi(tan=0.105813, x=-1, y=-0.105813): 0.105104235266
    test 2303 186 186.020036065215 Beta(tan=0.105458, x=-1, y=-0.105458): 0.105104235266
    test 2304 186 185.999999507387 Theta(tan=0.105104, x=-1, y=-0.105104): 0.105104235266
    test 2305 186 186.009997220384 Mu(tan=0.105281, x=-0.994504, y=-0.104702), iteration=3: 0.105104235266
    test 2306 186 186.000000000000 Chi(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266
    test 2307 186 186.013338120736 Xi(tan=0.10534, x=-1.99793, y=-0.210461), iteration=2: 0.105104235266

    test 2308 189 189.059651130185 Phi(tan=0.159452, x=-0.987525, y=-0.157463): 0.158384440325
    test 2309 189 189.029777127642 Beta(tan=0.158917, x=-0.987607, y=-0.156948): 0.158384440325
    test 2310 189 188.999998360327 Theta(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 2311 189 189.014858030843 Mu(tan=0.15865, x=-0.987648, y=-0.156691): 0.158384440325
    test 2312 189 189.000000000000 Chi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 2313 189 189.019823164695 Xi(tan=0.158739, x=-0.987634, y=-0.156776): 0.158384440325

    test 2314 189 189.059651130185 Phi(tan=0.159452, x=-1, y=-0.159452): 0.158384440325
    test 2315 189 189.029777127642 Beta(tan=0.158917, x=-1, y=-0.158917): 0.158384440325
    test 2316 189 188.999998360327 Theta(tan=0.158384, x=-1, y=-0.158384): 0.158384440325
    test 2317 189 189.014858030843 Mu(tan=0.15865, x=-0.987648, y=-0.156691), iteration=3: 0.158384440325
    test 2318 189 189.000000000000 Chi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 2319 189 189.019823164695 Xi(tan=0.158739, x=-1.98414, y=-0.31496), iteration=3: 0.158384440325

    test 2320 192 192.078502847834 Phi(tan=0.213989, x=-0.977862, y=-0.209252): 0.212556561670
    test 2321 192 192.039189338492 Beta(tan=0.213272, x=-0.978005, y=-0.208581): 0.212556561670
    test 2322 192 191.999996188332 Theta(tan=0.212556, x=-0.978148, y=-0.207912): 0.212556561670
    test 2323 192 192.019555209619 Mu(tan=0.212913, x=-0.978077, y=-0.208246): 0.212556561670
    test 2324 192 192.000000000000 Chi(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670
    test 2325 192 192.026089704728 Xi(tan=0.213033, x=-0.978053, y=-0.208357): 0.212556561670

    test 2326 192 192.078502847834 Phi(tan=0.213989, x=-1, y=-0.213989): 0.212556561670
    test 2327 192 192.039189338492 Beta(tan=0.213272, x=-1, y=-0.213272): 0.212556561670
    test 2328 192 191.999996188332 Theta(tan=0.212556, x=-1, y=-0.212556): 0.212556561670
    test 2329 192 192.019555209619 Mu(tan=0.212913, x=-0.978077, y=-0.208246), iteration=3: 0.212556561670
    test 2330 192 192.000000000000 Chi(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670
    test 2331 192 192.026089704728 Xi(tan=0.213033, x=-1.96489, y=-0.418585), iteration=3: 0.212556561670

    test 2332 195 195.096485223916 Phi(tan=0.269755, x=-0.965489, y=-0.260445): 0.267949192431
    test 2333 195 195.048168888340 Beta(tan=0.26885, x=-0.965708, y=-0.259631): 0.267949192431
    test 2334 195 194.999992740232 Theta(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431
    test 2335 195 195.024037070794 Mu(tan=0.268399, x=-0.965817, y=-0.259224): 0.267949192431
    test 2336 195 195.000000000000 Chi(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431
    test 2337 195 195.032068735909 Xi(tan=0.268549, x=-0.965781, y=-0.25936): 0.267949192431

    test 2338 195 195.096485223916 Phi(tan=0.269755, x=-1, y=-0.269755): 0.267949192431
    test 2339 195 195.048168888340 Beta(tan=0.26885, x=-1, y=-0.26885): 0.267949192431
    test 2340 195 194.999992740232 Theta(tan=0.267949, x=-1, y=-0.267949): 0.267949192431
    test 2341 195 195.024037070794 Mu(tan=0.268399, x=-0.965817, y=-0.259224), iteration=2: 0.267949192431
    test 2342 195 195.000000000000 Chi(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431
    test 2343 195 195.032068735909 Xi(tan=0.268549, x=-1.94023, y=-0.521048), iteration=2: 0.267949192431

    test 2344 198 198.113399720258 Phi(tan=0.327109, x=-0.950443, y=-0.310899): 0.324919696233
    test 2345 198 198.056616853373 Beta(tan=0.326013, x=-0.950751, y=-0.309957): 0.324919696233
    test 2346 198 197.999987836926 Theta(tan=0.324919, x=-0.951057, y=-0.309017): 0.324919696233
    test 2347 198 198.028254334443 Mu(tan=0.325465, x=-0.950904, y=-0.309486): 0.324919696233
    test 2348 198 198.000000000000 Chi(tan=0.32492, x=-0.951057, y=-0.309017): 0.324919696233
    test 2349 198 198.037694476601 Xi(tan=0.325647, x=-0.950853, y=-0.309643): 0.324919696233

    test 2350 198 198.113399720258 Phi(tan=0.327109, x=-1, y=-0.327109): 0.324919696233
    test 2351 198 198.056616853373 Beta(tan=0.326013, x=-1, y=-0.326013): 0.324919696233
    test 2352 198 197.999987836926 Theta(tan=0.324919, x=-1, y=-0.324919): 0.324919696233
    test 2353 198 198.028254334443 Mu(tan=0.325465, x=-0.950904, y=-0.309486), iteration=3: 0.324919696233
    test 2354 198 198.000000000000 Chi(tan=0.32492, x=-0.951057, y=-0.309017): 0.324919696233
    test 2355 198 198.037694476601 Xi(tan=0.325647, x=-1.91024, y=-0.622066), iteration=2: 0.324919696233

    test 2356 201 201.129059974007 Phi(tan=0.386451, x=-0.932771, y=-0.36047): 0.383864035035
    test 2357 201 201.064440302978 Beta(tan=0.385155, x=-0.933177, y=-0.359418): 0.383864035035
    test 2358 201 200.999981382849 Theta(tan=0.383864, x=-0.933581, y=-0.358368): 0.383864035035
    test 2359 201 201.032160674247 Mu(tan=0.384508, x=-0.933379, y=-0.358892): 0.383864035035
    test 2360 201 201.000000000000 Chi(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035
    test 2361 201 201.042905101186 Xi(tan=0.384723, x=-0.933312, y=-0.359067): 0.383864035035

    test 2362 201 201.129059974007 Phi(tan=0.386451, x=-1, y=-0.386451): 0.383864035035
    test 2363 201 201.064440302978 Beta(tan=0.385155, x=-1, y=-0.385155): 0.383864035035
    test 2364 201 200.999981382849 Theta(tan=0.383864, x=-1, y=-0.383864): 0.383864035035
    test 2365 201 201.032160674247 Mu(tan=0.384508, x=-0.933379, y=-0.358892), iteration=3: 0.383864035035
    test 2366 201 201.000000000000 Chi(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035
    test 2367 201 201.042905101186 Xi(tan=0.384723, x=-1.875, y=-0.721358), iteration=2: 0.383864035035

    test 2368 204 204.143293884842 Phi(tan=0.448229, x=-0.912525, y=-0.40902): 0.445228685309
    test 2369 204 204.071553334132 Beta(tan=0.446726, x=-0.913037, y=-0.407877): 0.445228685309
    test 2370 204 203.999973373512 Theta(tan=0.445228, x=-0.913546, y=-0.406736): 0.445228685309
    test 2371 204 204.035713230333 Mu(tan=0.445976, x=-0.913292, y=-0.407306): 0.445228685309
    test 2372 204 204.000000000000 Chi(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309
    test 2373 204 204.047643425661 Xi(tan=0.446225, x=-0.913207, y=-0.407496): 0.445228685309

    test 2374 204 204.143293884842 Phi(tan=0.448229, x=-1, y=-0.448229): 0.445228685309
    test 2375 204 204.071553334132 Beta(tan=0.446726, x=-1, y=-0.446726): 0.445228685309
    test 2376 204 203.999973373512 Theta(tan=0.445228, x=-1, y=-0.445228): 0.445228685309
    test 2377 204 204.035713230333 Mu(tan=0.445976, x=-0.913292, y=-0.407306), iteration=3: 0.445228685309
    test 2378 204 204.000000000000 Chi(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309
    test 2379 204 204.047643425661 Xi(tan=0.446225, x=-1.83461, y=-0.818652), iteration=2: 0.445228685309

    test 2380 207 207.155945522711 Phi(tan=0.512959, x=-0.889768, y=-0.456414): 0.509525449494
    test 2381 207 207.077878020577 Beta(tan=0.511239, x=-0.890389, y=-0.455201): 0.509525449494
    test 2382 207 206.999963898770 Theta(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494
    test 2383 207 207.038873081482 Mu(tan=0.51038, x=-0.890698, y=-0.454595): 0.509525449494
    test 2384 207 207.000000000000 Chi(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494
    test 2385 207 207.051857538240 Xi(tan=0.510666, x=-0.890595, y=-0.454797): 0.509525449494

    test 2386 207 207.155945522711 Phi(tan=0.512959, x=-1, y=-0.512959): 0.509525449494
    test 2387 207 207.077878020577 Beta(tan=0.511239, x=-1, y=-0.511239): 0.509525449494
    test 2388 207 206.999963898770 Theta(tan=0.509525, x=-1, y=-0.509525): 0.509525449494
    test 2389 207 207.038873081482 Mu(tan=0.51038, x=-0.890698, y=-0.454595), iteration=2: 0.509525449494
    test 2390 207 207.000000000000 Chi(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494
    test 2391 207 207.051857538240 Xi(tan=0.510666, x=-1.78919, y=-0.913678), iteration=2: 0.509525449494

    test 2392 210 210.166876834292 Phi(tan=0.58124, x=-0.864565, y=-0.50252): 0.577350269190
    test 2393 210 210.083345266050 Beta(tan=0.579291, x=-0.865297, y=-0.501259): 0.577350269190
    test 2394 210 209.999953141624 Theta(tan=0.577349, x=-0.866026, y=-0.499999): 0.577350269190
    test 2395 210 210.041605671429 Mu(tan=0.578319, x=-0.865662, y=-0.500629): 0.577350269190
    test 2396 210 210.000000000000 Chi(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 2397 210 210.055501367888 Xi(tan=0.578643, x=-0.865541, y=-0.500839): 0.577350269190

    test 2398 210 210.166876834292 Phi(tan=0.58124, x=-1, y=-0.58124): 0.577350269190
    test 2399 210 210.083345266050 Beta(tan=0.579291, x=-1, y=-0.579291): 0.577350269190
    test 2400 210 209.999953141624 Theta(tan=0.577349, x=-1, y=-0.577349): 0.577350269190
    test 2401 210 210.041605671429 Mu(tan=0.578319, x=-0.865662, y=-0.500629), iteration=3: 0.577350269190
    test 2402 210 210.000000000000 Chi(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 2403 210 210.055501367888 Xi(tan=0.578643, x=-1.73885, y=-1.00617), iteration=2: 0.577350269190

    test 2404 213 213.175969129682 Phi(tan=0.653783, x=-0.836994, y=-0.547212): 0.649407593198
    test 2405 213 213.087895552255 Beta(tan=0.651591, x=-0.837834, y=-0.545925): 0.649407593198
    test 2406 213 212.999941372613 Theta(tan=0.649406, x=-0.838671, y=-0.544638): 0.649407593198
    test 2407 213 213.043881184589 Mu(tan=0.650497, x=-0.838253, y=-0.545281): 0.649407593198
    test 2408 213 213.000000000000 Chi(tan=0.649408, x=-0.838671, y=-0.544639): 0.649407593198
    test 2409 213 213.058535184571 Xi(tan=0.650861, x=-0.838114, y=-0.545496): 0.649407593198

    test 2410 213 213.175969129682 Phi(tan=0.653783, x=-1, y=-0.653783): 0.649407593198
    test 2411 213 213.087895552255 Beta(tan=0.651591, x=-1, y=-0.651591): 0.649407593198
    test 2412 213 212.999941372613 Theta(tan=0.649406, x=-1, y=-0.649406): 0.649407593198
    test 2413 213 213.043881184589 Mu(tan=0.650497, x=-0.838253, y=-0.545281), iteration=2: 0.649407593198
    test 2414 213 213.000000000000 Chi(tan=0.649408, x=-0.838671, y=-0.544639): 0.649407593198
    test 2415 213 213.058535184571 Xi(tan=0.650861, x=-1.68375, y=-1.09589), iteration=2: 0.649407593198

    test 2416 216 216.183124334274 Phi(tan=0.731437, x=-0.807134, y=-0.590368): 0.726542528005
    test 2417 216 216.091479573846 Beta(tan=0.728985, x=-0.808077, y=-0.589076): 0.726542528005
    test 2418 216 215.999928940020 Theta(tan=0.726541, x=-0.809018, y=-0.587784): 0.726542528005
    test 2419 216 216.045674867236 Mu(tan=0.727761, x=-0.808548, y=-0.58843): 0.726542528005
    test 2420 216 216.000000000000 Chi(tan=0.726543, x=-0.809017, y=-0.587785): 0.726542528005
    test 2421 216 216.060926025960 Xi(tan=0.728168, x=-0.808392, y=-0.588645): 0.726542528005

    test 2422 216 216.183124334274 Phi(tan=0.731437, x=-1, y=-0.731437): 0.726542528005
    test 2423 216 216.091479573846 Beta(tan=0.728985, x=-1, y=-0.728985): 0.726542528005
    test 2424 216 215.999928940020 Theta(tan=0.726541, x=-1, y=-0.726541): 0.726542528005
    test 2425 216 216.045674867236 Mu(tan=0.727761, x=-0.808548, y=-0.58843), iteration=2: 0.726542528005
    test 2426 216 216.000000000000 Chi(tan=0.726543, x=-0.809017, y=-0.587785): 0.726542528005
    test 2427 216 216.060926025960 Xi(tan=0.728168, x=-1.62404, y=-1.18258), iteration=3: 0.726542528005

    test 2428 219 219.188265994394 Phi(tan=0.815239, x=-0.775074, y=-0.631871): 0.809784033195
    test 2429 219 219.094058754227 Beta(tan=0.812506, x=-0.776112, y=-0.630595): 0.809784033195
    test 2430 219 218.999916256306 Theta(tan=0.809782, x=-0.777147, y=-0.629319): 0.809784033195
    test 2431 219 219.046967290868 Mu(tan=0.811142, x=-0.77663, y=-0.629957): 0.809784033195
    test 2432 219 219.000000000000 Chi(tan=0.809784, x=-0.777146, y=-0.62932): 0.809784033195
    test 2433 219 219.062648046300 Xi(tan=0.811596, x=-0.776457, y=-0.63017): 0.809784033195

    test 2434 219 219.188265994394 Phi(tan=0.815239, x=-1, y=-0.815239): 0.809784033195
    test 2435 219 219.094058754227 Beta(tan=0.812506, x=-1, y=-0.812506): 0.809784033195
    test 2436 219 218.999916256306 Theta(tan=0.809782, x=-1, y=-0.809782): 0.809784033195
    test 2437 219 219.046967290868 Mu(tan=0.811142, x=-0.77663, y=-0.629957), iteration=3: 0.809784033195
    test 2438 219 219.000000000000 Chi(tan=0.809784, x=-0.777146, y=-0.62932): 0.809784033195
    test 2439 219 219.062648046300 Xi(tan=0.811596, x=-1.55989, y=-1.266), iteration=2: 0.809784033195

    test 2440 222 222.191340028820 Phi(tan=0.906469, x=-0.740906, y=-0.671609): 0.900404044298
    test 2441 222 222.095605637640 Beta(tan=0.90343, x=-0.742027, y=-0.67037): 0.900404044298
    test 2442 222 221.999903781382 Theta(tan=0.900401, x=-0.743146, y=-0.669129): 0.900404044298
    test 2443 222 222.047744555205 Mu(tan=0.901914, x=-0.742587, y=-0.66975): 0.900404044298
    test 2444 222 222.000000000000 Chi(tan=0.900404, x=-0.743145, y=-0.669131): 0.900404044298
    test 2445 222 222.063682784184 Xi(tan=0.902419, x=-0.742401, y=-0.669956): 0.900404044298

    test 2446 222 222.191340028820 Phi(tan=0.906469, x=-1, y=-0.906469): 0.900404044298
    test 2447 222 222.095605637640 Beta(tan=0.90343, x=-1, y=-0.90343): 0.900404044298
    test 2448 222 221.999903781382 Theta(tan=0.900401, x=-1, y=-0.900401): 0.900404044298
    test 2449 222 222.047744555205 Mu(tan=0.901914, x=-0.742587, y=-0.66975), iteration=3: 0.900404044298
    test 2450 222 222.000000000000 Chi(tan=0.900404, x=-0.743145, y=-0.669131): 0.900404044298
    test 2451 222 222.063682784184 Xi(tan=0.902419, x=-1.49147, y=-1.34593), iteration=2: 0.900404044298

    test 2452 225 225.192315221845 Phi(tan=1.00674, x=-0.704729, y=-0.709476): 1.000000000000
    test 2453 225 225.096104154617 Beta(tan=1.00336, x=-0.70592, y=-0.708292): 1.000000000000
    test 2454 225 224.999892003429 Theta(tan=0.999996, x=-0.707108, y=-0.707105): 1.000000000000
    test 2455 225 225.047998429066 Mu(tan=1.00168, x=-0.706514, y=-0.707699): 1.000000000000
    test 2456 225 225.000000000000 Chi(tan=1.0, x=-0.707107, y=-0.707107): 1.000000000000
    test 2457 225 225.064019346981 Xi(tan=1.00224, x=-0.706316, y=-0.707896): 1.000000000000

    test 2458 225 225.192315221845 Phi(tan=1.00674, x=-1, y=-1.00674): 1.000000000000
    test 2459 225 225.096104154617 Beta(tan=1.00336, x=-1, y=-1.00336): 1.000000000000
    test 2460 225 224.999892003429 Theta(tan=0.999996, x=-1, y=-0.999996): 1.000000000000
    test 2461 225 225.047998429066 Mu(tan=1.00168, x=-0.706514, y=-0.707699), iteration=2: 1.000000000000
    test 2462 225 225.000000000000 Chi(tan=1.0, x=-0.707107, y=-0.707107): 1.000000000000
    test 2463 225 225.064019346981 Xi(tan=1.00224, x=-1.41898, y=-1.42215), iteration=3: 1.000000000000

    test 2464 228 228.191183456946 Phi(tan=1.11809, x=-0.666647, y=-0.745373): 1.110612514829
    test 2465 228 228.095549759456 Beta(tan=1.11434, x=-0.66789, y=-0.74426): 1.110612514829
    test 2466 228 227.999881418114 Theta(tan=1.11061, x=-0.669132, y=-0.743143): 1.110612514829
    test 2467 228 228.047726428058 Mu(tan=1.11247, x=-0.668511, y=-0.743702): 1.110612514829
    test 2468 228 228.000000000000 Chi(tan=1.11061, x=-0.669131, y=-0.743145): 1.110612514829
    test 2469 228 228.063654510687 Xi(tan=1.1131, x=-0.668305, y=-0.743888): 1.110612514829

    test 2470 228 228.191183456946 Phi(tan=1.11809, x=-1, y=-1.11809): 1.110612514829
    test 2471 228 228.095549759456 Beta(tan=1.11434, x=-1, y=-1.11434): 1.110612514829
    test 2472 228 227.999881418114 Theta(tan=1.11061, x=-1, y=-1.11061): 1.110612514829
    test 2473 228 228.047726428058 Mu(tan=1.11247, x=-0.668511, y=-0.743702), iteration=2: 1.110612514829
    test 2474 228 228.000000000000 Chi(tan=1.11061, x=-0.669131, y=-0.743145): 1.110612514829
    test 2475 228 228.063654510687 Xi(tan=1.1131, x=-1.34261, y=-1.49446), iteration=2: 1.110612514829

    test 2476 231 231.187959693265 Phi(tan=1.24321, x=-0.626768, y=-0.779206): 1.234897156535
    test 2477 231 231.093949439927 Beta(tan=1.23905, x=-0.628045, y=-0.778177): 1.234897156535
    test 2478 231 230.999872507121 Theta(tan=1.23489, x=-0.629322, y=-0.777145): 1.234897156535
    test 2479 231 231.046931828803 Mu(tan=1.23697, x=-0.628684, y=-0.777661): 1.234897156535
    test 2480 231 231.000000000000 Chi(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 2481 231 231.062592734966 Xi(tan=1.23766, x=-0.628471, y=-0.777833): 1.234897156535

    test 2482 231 231.187959693265 Phi(tan=1.24321, x=-1, y=-1.24321): 1.234897156535
    test 2483 231 231.093949439927 Beta(tan=1.23905, x=-1, y=-1.23905): 1.234897156535
    test 2484 231 230.999872507121 Theta(tan=1.23489, x=-1, y=-1.23489): 1.234897156535
    test 2485 231 231.046931828803 Mu(tan=1.23697, x=-0.628684, y=-0.777661), iteration=3: 1.234897156535
    test 2486 231 231.000000000000 Chi(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 2487 231 231.062592734966 Xi(tan=1.23766, x=-1.26259, y=-1.56265), iteration=2: 1.234897156535

    test 2488 234 234.182681690125 Phi(tan=1.38565, x=-0.585203, y=-0.810887): 1.376381920471
    test 2489 234 234.091321600846 Beta(tan=1.38101, x=-0.586495, y=-0.809953): 1.376381920471
    test 2490 234 233.999865716909 Theta(tan=1.37638, x=-0.587787, y=-0.809016): 1.376381920471
    test 2491 234 234.045623620088 Mu(tan=1.37869, x=-0.587141, y=-0.809485): 1.376381920471
    test 2492 234 234.000000000000 Chi(tan=1.37638, x=-0.587785, y=-0.809017): 1.376381920471
    test 2493 234 234.060846094111 Xi(tan=1.37946, x=-0.586926, y=-0.809641): 1.376381920471

    test 2494 234 234.182681690125 Phi(tan=1.38565, x=-1, y=-1.38565): 1.376381920471
    test 2495 234 234.091321600846 Beta(tan=1.38101, x=-1, y=-1.38101): 1.376381920471
    test 2496 234 233.999865716909 Theta(tan=1.37638, x=-1, y=-1.37638): 1.376381920471
    test 2497 234 234.045623620088 Mu(tan=1.37869, x=-0.587141, y=-0.809485), iteration=3: 1.376381920471
    test 2498 234 234.000000000000 Chi(tan=1.37638, x=-0.587785, y=-0.809017): 1.376381920471
    test 2499 234 234.060846094111 Xi(tan=1.37946, x=-1.17912, y=-1.62655), iteration=2: 1.376381920471

    test 2500 237 237.175409487429 Phi(tan=1.55023, x=-0.542069, y=-0.840334): 1.539864963815
    test 2501 237 237.087695824549 Beta(tan=1.54504, x=-0.543355, y=-0.839503): 1.539864963815
    test 2502 237 236.999861438656 Theta(tan=1.53986, x=-0.544641, y=-0.838669): 1.539864963815
    test 2503 237 237.043816392070 Mu(tan=1.54245, x=-0.543998, y=-0.839087): 1.539864963815
    test 2504 237 237.000000000000 Chi(tan=1.53986, x=-0.544639, y=-0.838671): 1.539864963815
    test 2505 237 237.058434125550 Xi(tan=1.54331, x=-0.543783, y=-0.839226): 1.539864963815

    test 2506 237 237.175409487429 Phi(tan=1.55023, x=-1, y=-1.55023): 1.539864963815
    test 2507 237 237.087695824549 Beta(tan=1.54504, x=-1, y=-1.54504): 1.539864963815
    test 2508 237 236.999861438656 Theta(tan=1.53986, x=-1, y=-1.53986): 1.539864963815
    test 2509 237 237.043816392070 Mu(tan=1.54245, x=-0.543998, y=-0.839087), iteration=3: 1.539864963815
    test 2510 237 237.000000000000 Chi(tan=1.53986, x=-0.544639, y=-0.838671): 1.539864963815
    test 2511 237 237.058434125550 Xi(tan=1.54331, x=-1.09245, y=-1.68599), iteration=2: 1.539864963815

    test 2512 240 240.166224652193 Phi(tan=1.74371, x=-0.497485, y=-0.867472): 1.732050807569
    test 2513 240 240.083112512506 Beta(tan=1.73787, x=-0.498743, y=-0.86675): 1.732050807569
    test 2514 240 239.999859990242 Theta(tan=1.73204, x=-0.500002, y=-0.866024): 1.732050807569
    test 2515 240 240.041530165249 Mu(tan=1.73495, x=-0.499372, y=-0.866388): 1.732050807569
    test 2516 240 240.000000000000 Chi(tan=1.73205, x=-0.5, y=-0.866025): 1.732050807569
    test 2517 240 240.055383598391 Xi(tan=1.73592, x=-0.499163, y=-0.866508): 1.732050807569

    test 2518 240 240.166224652193 Phi(tan=1.74371, x=-1, y=-1.74371): 1.732050807569
    test 2519 240 240.083112512506 Beta(tan=1.73787, x=-1, y=-1.73787): 1.732050807569
    test 2520 240 239.999859990242 Theta(tan=1.73204, x=-1, y=-1.73204): 1.732050807569
    test 2521 240 240.041530165249 Mu(tan=1.73495, x=-0.499372, y=-0.866388), iteration=3: 1.732050807569
    test 2522 240 240.000000000000 Chi(tan=1.73205, x=-0.5, y=-0.866025): 1.732050807569
    test 2523 240 240.055383598391 Xi(tan=1.73592, x=-1.00281, y=-1.7408), iteration=3: 1.732050807569

    test 2524 243 243.155229303561 Phi(tan=1.97583, x=-0.451575, y=-0.892233): 1.962610505505
    test 2525 243 243.077622413475 Beta(tan=1.9692, x=-0.452783, y=-0.891621): 1.962610505505
    test 2526 243 242.999861601059 Theta(tan=1.9626, x=-0.453993, y=-0.891005): 1.962610505505
    test 2527 243 243.038790161591 Mu(tan=1.9659, x=-0.453387, y=-0.891314): 1.962610505505
    test 2528 243 243.000000000000 Chi(tan=1.96261, x=-0.45399, y=-0.891007): 1.962610505505
    test 2529 243 243.051728205304 Xi(tan=1.967, x=-0.453186, y=-0.891416): 1.962610505505

    test 2530 243 243.155229303561 Phi(tan=1.97583, x=-1, y=-1.97583): 1.962610505505
    test 2531 243 243.077622413475 Beta(tan=1.9692, x=-1, y=-1.9692): 1.962610505505
    test 2532 243 242.999861601059 Theta(tan=1.9626, x=-1, y=-1.9626): 1.962610505505
    test 2533 243 243.038790161591 Mu(tan=1.9659, x=-0.453387, y=-0.891314), iteration=3: 1.962610505505
    test 2534 243 243.000000000000 Chi(tan=1.96261, x=-0.45399, y=-0.891007): 1.962610505505
    test 2535 243 243.051728205304 Xi(tan=1.967, x=-0.910441, y=-1.79084), iteration=3: 1.962610505505

    test 2536 246 246.142544930388 Phi(tan=2.26116, x=-0.404463, y=-0.914555): 2.246036773904
    test 2537 246 246.071286044615 Beta(tan=2.25358, x=-0.4056, y=-0.914051): 2.246036773904
    test 2538 246 245.999866400327 Theta(tan=2.24602, x=-0.406739, y=-0.913545): 2.246036773904
    test 2539 246 246.035626520706 Mu(tan=2.2498, x=-0.406169, y=-0.913798): 2.246036773904
    test 2540 246 246.000000000000 Chi(tan=2.24604, x=-0.406737, y=-0.913545): 2.246036773904
    test 2541 246 246.047508181716 Xi(tan=2.25106, x=-0.405979, y=-0.913882): 2.246036773904

    test 2542 246 246.142544930388 Phi(tan=2.26116, x=-1, y=-2.26116): 2.246036773904
    test 2543 246 246.071286044615 Beta(tan=2.25358, x=-1, y=-2.25358): 2.246036773904
    test 2544 246 245.999866400327 Theta(tan=2.24602, x=-1, y=-2.24602): 2.246036773904
    test 2545 246 246.035626520706 Mu(tan=2.2498, x=-0.406169, y=-0.913798), iteration=3: 2.246036773904
    test 2546 246 246.000000000000 Chi(tan=2.24604, x=-0.406737, y=-0.913545): 2.246036773904
    test 2547 246 246.047508181716 Xi(tan=2.25106, x=-0.815604, y=-1.83597), iteration=3: 2.246036773904

    test 2548 249 249.128311016985 Phi(tan=2.62263, x=-0.356276, y=-0.934381): 2.605089064694
    test 2549 249 249.064173012841 Beta(tan=2.61384, x=-0.357322, y=-0.933981): 2.605089064694
    test 2550 249 248.999874409414 Theta(tan=2.60507, x=-0.35837, y=-0.93358): 2.605089064694
    test 2551 249 249.032073964504 Mu(tan=2.60945, x=-0.357845, y=-0.933781): 2.605089064694
    test 2552 249 249.000000000000 Chi(tan=2.60509, x=-0.358368, y=-0.93358): 2.605089064694
    test 2553 249 249.042769857028 Xi(tan=2.61091, x=-0.357671, y=-0.933848): 2.605089064694

    test 2554 249 249.128311016985 Phi(tan=2.62263, x=-1, y=-2.62263): 2.605089064694
    test 2555 249 249.064173012841 Beta(tan=2.61384, x=-1, y=-2.61384): 2.605089064694
    test 2556 249 248.999874409414 Theta(tan=2.60507, x=-1, y=-2.60507): 2.605089064694
    test 2557 249 249.032073964504 Mu(tan=2.60945, x=-0.357845, y=-0.933781), iteration=2: 2.605089064694
    test 2558 249 249.000000000000 Chi(tan=2.60509, x=-0.358368, y=-0.93358): 2.605089064694
    test 2559 249 249.042769857028 Xi(tan=2.61091, x=-0.718554, y=-1.87608), iteration=2: 2.605089064694

    test 2560 252 252.112683493851 Phi(tan=3.0984, x=-0.307146, y=-0.951662): 3.077683537175
    test 2561 252 252.056361244518 Beta(tan=3.08802, x=-0.308081, y=-0.95136): 3.077683537175
    test 2562 252 251.999885538511 Theta(tan=3.07766, x=-0.309019, y=-0.951056): 3.077683537175
    test 2563 252 252.028171414224 Mu(tan=3.08284, x=-0.308549, y=-0.951208): 3.077683537175
    test 2564 252 252.000000000000 Chi(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 2565 252 252.037565143062 Xi(tan=3.08456, x=-0.308393, y=-0.951259): 3.077683537175

    test 2566 252 252.112683493851 Phi(tan=3.0984, x=-1, y=-3.0984): 3.077683537175
    test 2567 252 252.056361244518 Beta(tan=3.08802, x=-1, y=-3.08802): 3.077683537175
    test 2568 252 251.999885538511 Theta(tan=3.07766, x=-1, y=-3.07766): 3.077683537175
    test 2569 252 252.028171414224 Mu(tan=3.08284, x=-0.308549, y=-0.951208), iteration=3: 3.077683537175
    test 2570 252 252.000000000000 Chi(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 2571 252 252.037565143062 Xi(tan=3.08456, x=-0.619556, y=-1.91106), iteration=3: 3.077683537175

    test 2572 255 255.095833031123 Phi(tan=3.75718, x=-0.257203, y=-0.966357): 3.732050807569
    test 2573 255 255.047936132212 Beta(tan=3.74458, x=-0.258011, y=-0.966142): 3.732050807569
    test 2574 255 254.999899587814 Theta(tan=3.73202, x=-0.258821, y=-0.965925): 3.732050807569
    test 2575 255 255.023961564132 Mu(tan=3.7383, x=-0.258415, y=-0.966034): 3.732050807569
    test 2576 255 255.000000000000 Chi(tan=3.73205, x=-0.258819, y=-0.965926): 3.732050807569
    test 2577 255 255.031950965524 Xi(tan=3.74039, x=-0.25828, y=-0.96607): 3.732050807569

    test 2578 255 255.095833031123 Phi(tan=3.75718, x=-1, y=-3.75718): 3.732050807569
    test 2579 255 255.047936132212 Beta(tan=3.74458, x=-1, y=-3.74458): 3.732050807569
    test 2580 255 254.999899587814 Theta(tan=3.73202, x=-1, y=-3.73202): 3.732050807569
    test 2581 255 255.023961564132 Mu(tan=3.7383, x=-0.258415, y=-0.966034), iteration=3: 3.732050807569
    test 2582 255 255.000000000000 Chi(tan=3.73205, x=-0.258819, y=-0.965926): 3.732050807569
    test 2583 255 255.031950965524 Xi(tan=3.74039, x=-0.51888, y=-1.94082), iteration=2: 3.732050807569

    test 2584 258 258.077943193300 Phi(tan=4.7363, x=-0.206581, y=-0.97843): 4.704630109478
    test 2585 258 258.038989607820 Beta(tan=4.72042, x=-0.207246, y=-0.978289): 4.704630109478
    test 2586 258 257.999916253185 Theta(tan=4.7046, x=-0.207913, y=-0.978147): 4.704630109478
    test 2587 258 258.019490416547 Mu(tan=4.71251, x=-0.207579, y=-0.978218): 4.704630109478
    test 2588 258 258.000000000000 Chi(tan=4.70463, x=-0.207912, y=-0.978148): 4.704630109478
    test 2589 258 258.025988644686 Xi(tan=4.71515, x=-0.207468, y=-0.978242): 4.704630109478

    test 2590 258 258.077943193300 Phi(tan=4.7363, x=-1, y=-4.7363): 4.704630109478
    test 2591 258 258.038989607820 Beta(tan=4.72042, x=-1, y=-4.72042): 4.704630109478
    test 2592 258 257.999916253185 Theta(tan=4.7046, x=-1, y=-4.7046): 4.704630109478
    test 2593 258 258.019490416547 Mu(tan=4.71251, x=-0.207579, y=-0.978218), iteration=3: 4.704630109478
    test 2594 258 258.000000000000 Chi(tan=4.70463, x=-0.207912, y=-0.978148): 4.704630109478
    test 2595 258 258.025988644686 Xi(tan=4.71515, x=-0.416799, y=-1.96527), iteration=3: 4.704630109478

    test 2596 261 261.059208474292 Phi(tan=6.35626, x=-0.155414, y=-0.987849): 6.313751514675
    test 2597 261 261.029619151805 Beta(tan=6.33495, x=-0.155924, y=-0.987769): 6.313751514675
    test 2598 261 260.999935136078 Theta(tan=6.31371, x=-0.156436, y=-0.987688): 6.313751514675
    test 2599 261 261.014806783166 Mu(tan=6.32433, x=-0.156179, y=-0.987729): 6.313751514675
    test 2600 261 261.000000000000 Chi(tan=6.31375, x=-0.156434, y=-0.987688): 6.313751514675
    test 2601 261 261.019743231870 Xi(tan=6.32786, x=-0.156094, y=-0.987742): 6.313751514675

    test 2602 261 261.059208474292 Phi(tan=6.35626, x=-1, y=-6.35626): 6.313751514675
    test 2603 261 261.029619151805 Beta(tan=6.33495, x=-1, y=-6.33495): 6.313751514675
    test 2604 261 260.999935136078 Theta(tan=6.31371, x=-1, y=-6.31371): 6.313751514675
    test 2605 261 261.014806783166 Mu(tan=6.32433, x=-0.156179, y=-0.987729), iteration=2: 6.313751514675
    test 2606 261 261.000000000000 Chi(tan=6.31375, x=-0.156434, y=-0.987688): 6.313751514675
    test 2607 261 261.019743231870 Xi(tan=6.32786, x=-0.31359, y=-1.98435), iteration=2: 6.313751514675

    test 2608 264 264.039832232299 Phi(tan=9.57842, x=-0.103837, y=-0.994594): 9.514364454223
    test 2609 264 264.019926748698 Beta(tan=9.5463, x=-0.104183, y=-0.994558): 9.514364454223
    test 2610 264 263.999955757312 Theta(tan=9.51429, x=-0.104529, y=-0.994522): 9.514364454223
    test 2611 264 264.009961757905 Mu(tan=9.5303, x=-0.104356, y=-0.99454): 9.514364454223
    test 2612 264 264.000000000000 Chi(tan=9.51436, x=-0.104528, y=-0.994522): 9.514364454223
    test 2613 264 264.013282808640 Xi(tan=9.53563, x=-0.104298, y=-0.994546): 9.514364454223

    test 2614 264 264.039832232299 Phi(tan=9.57842, x=-1, y=-9.57842): 9.514364454223
    test 2615 264 264.019926748698 Beta(tan=9.5463, x=-1, y=-9.5463): 9.514364454223
    test 2616 264 263.999955757312 Theta(tan=9.51429, x=-1, y=-9.51429): 9.514364454223
    test 2617 264 264.009961757905 Mu(tan=9.5303, x=-0.104356, y=-0.99454), iteration=3: 9.514364454223
    test 2618 264 264.000000000000 Chi(tan=9.51436, x=-0.104528, y=-0.994522): 9.514364454223
    test 2619 264 264.013282808640 Xi(tan=9.53563, x=-0.209532, y=-1.99802), iteration=2: 9.514364454223

    test 2620 267 267.020024544280 Phi(tan=19.2096, x=-0.0519869, y=-0.998648): 19.081136687728
    test 2621 267 267.010017799266 Beta(tan=19.1452, x=-0.0521614, y=-0.998639): 19.081136687728
    test 2622 267 266.999977574155 Theta(tan=19.081, x=-0.0523363, y=-0.99863): 19.081136687728
    test 2623 267 267.005008166720 Mu(tan=19.1131, x=-0.0522487, y=-0.998634): 19.081136687728
    test 2624 267 267.000000000000 Chi(tan=19.0811, x=-0.052336, y=-0.99863): 19.081136687728
    test 2625 267 267.006677755863 Xi(tan=19.1238, x=-0.0522196, y=-0.998636): 19.081136687728

    test 2626 267 267.020024544280 Phi(tan=19.2096, x=-1, y=-19.2096): 19.081136687728
    test 2627 267 267.010017799266 Beta(tan=19.1452, x=-1, y=-19.1452): 19.081136687728
    test 2628 267 266.999977574155 Theta(tan=19.081, x=-1, y=-19.081): 19.081136687728
    test 2629 267 267.005008166720 Mu(tan=19.1131, x=-0.0522487, y=-0.998634), iteration=3: 19.081136687728
    test 2630 267 267.000000000000 Chi(tan=19.0811, x=-0.052336, y=-0.99863): 19.081136687728
    test 2631 267 267.006677755863 Xi(tan=19.1238, x=-0.104908, y=-2.00624), iteration=3: 19.081136687728

    test 2632 270 270.000000000000 Phi(tan=-inf, x=0.0, y=-1): -inf
    test 2633 270 270.000000000000 Beta(tan=-inf, x=0.0, y=-1): -inf
    test 2634 270 270.000000000000 Theta(tan=-inf, x=0.0, y=-1): -inf
    test 2635 270 270.000000000000 Mu(tan=-inf, x=0.0, y=-1): -inf
    test 2636 270 270.000000000000 Chi(tan=-inf, x=0.0, y=-1): -inf
    test 2637 270 270.000000000000 Xi(tan=-inf, x=0.0, y=-1): -inf

    test 2638 270 270.000000000000 Phi(tan=-inf, x=0.0, y=-1): -inf
    test 2639 270 270.000000000000 Beta(tan=-inf, x=0.0, y=-1): -inf
    test 2640 270 270.000000000000 Theta(tan=-inf, x=0.0, y=-1): -inf
    test 2641 270 270.000000000000 Mu(tan=-inf, x=0.0, y=-1): -inf
    test 2642 270 270.000000000000 Chi(tan=-inf, x=0.0, y=-1): -inf
    test 2643 270 270.000000000000 Xi(tan=-inf, x=0.0, y=-1): -inf

    test 2644 273 272.979975455720 Phi(tan=-19.2096, x=0.0519869, y=-0.998648): -19.081136687728
    test 2645 273 272.989982200734 Beta(tan=-19.1452, x=0.0521614, y=-0.998639): -19.081136687728
    test 2646 273 273.000022425845 Theta(tan=-19.081, x=0.0523363, y=-0.99863): -19.081136687728
    test 2647 273 272.994991833280 Mu(tan=-19.1131, x=0.0522487, y=-0.998634): -19.081136687728
    test 2648 273 273.000000000000 Chi(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 2649 273 272.993322244137 Xi(tan=-19.1238, x=0.0522196, y=-0.998636): -19.081136687728

    test 2650 273 272.979975455720 Phi(tan=-19.2096, x=1.0, y=-19.2096): -19.081136687728
    test 2651 273 272.989982200734 Beta(tan=-19.1452, x=1.0, y=-19.1452): -19.081136687728
    test 2652 273 273.000022425845 Theta(tan=-19.081, x=1.0, y=-19.081): -19.081136687728
    test 2653 273 272.994991833280 Mu(tan=-19.1131, x=0.0522487, y=-0.998634), iteration=3: -19.081136687728
    test 2654 273 273.000000000000 Chi(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 2655 273 272.993322244137 Xi(tan=-19.1238, x=0.104908, y=-2.00624), iteration=2: -19.081136687728

    test 2656 276 275.960167767701 Phi(tan=-9.57842, x=0.103837, y=-0.994594): -9.514364454223
    test 2657 276 275.980073251302 Beta(tan=-9.5463, x=0.104183, y=-0.994558): -9.514364454223
    test 2658 276 276.000044242688 Theta(tan=-9.51429, x=0.104529, y=-0.994522): -9.514364454223
    test 2659 276 275.990038242095 Mu(tan=-9.5303, x=0.104356, y=-0.99454): -9.514364454223
    test 2660 276 276.000000000000 Chi(tan=-9.51436, x=0.104528, y=-0.994522): -9.514364454223
    test 2661 276 275.986717191360 Xi(tan=-9.53563, x=0.104298, y=-0.994546): -9.514364454223

    test 2662 276 275.960167767701 Phi(tan=-9.57842, x=1.0, y=-9.57842): -9.514364454223
    test 2663 276 275.980073251302 Beta(tan=-9.5463, x=1.0, y=-9.5463): -9.514364454223
    test 2664 276 276.000044242688 Theta(tan=-9.51429, x=1.0, y=-9.51429): -9.514364454223
    test 2665 276 275.990038242095 Mu(tan=-9.5303, x=0.104356, y=-0.99454), iteration=3: -9.514364454223
    test 2666 276 276.000000000000 Chi(tan=-9.51436, x=0.104528, y=-0.994522): -9.514364454223
    test 2667 276 275.986717191360 Xi(tan=-9.53563, x=0.209532, y=-1.99802), iteration=2: -9.514364454223

    test 2668 279 278.940791525708 Phi(tan=-6.35626, x=0.155414, y=-0.987849): -6.313751514675
    test 2669 279 278.970380848195 Beta(tan=-6.33495, x=0.155924, y=-0.987769): -6.313751514675
    test 2670 279 279.000064863922 Theta(tan=-6.31371, x=0.156436, y=-0.987688): -6.313751514675
    test 2671 279 278.985193216834 Mu(tan=-6.32433, x=0.156179, y=-0.987729): -6.313751514675
    test 2672 279 279.000000000000 Chi(tan=-6.31375, x=0.156434, y=-0.987688): -6.313751514675
    test 2673 279 278.980256768130 Xi(tan=-6.32786, x=0.156094, y=-0.987742): -6.313751514675

    test 2674 279 278.940791525708 Phi(tan=-6.35626, x=1.0, y=-6.35626): -6.313751514675
    test 2675 279 278.970380848195 Beta(tan=-6.33495, x=1.0, y=-6.33495): -6.313751514675
    test 2676 279 279.000064863922 Theta(tan=-6.31371, x=1.0, y=-6.31371): -6.313751514675
    test 2677 279 278.985193216834 Mu(tan=-6.32433, x=0.156179, y=-0.987729), iteration=3: -6.313751514675
    test 2678 279 279.000000000000 Chi(tan=-6.31375, x=0.156434, y=-0.987688): -6.313751514675
    test 2679 279 278.980256768130 Xi(tan=-6.32786, x=0.31359, y=-1.98435), iteration=3: -6.313751514675

    test 2680 282 281.922056806700 Phi(tan=-4.7363, x=0.206581, y=-0.97843): -4.704630109478
    test 2681 282 281.961010392180 Beta(tan=-4.72042, x=0.207246, y=-0.978289): -4.704630109478
    test 2682 282 282.000083746815 Theta(tan=-4.7046, x=0.207913, y=-0.978147): -4.704630109478
    test 2683 282 281.980509583453 Mu(tan=-4.71251, x=0.207579, y=-0.978218): -4.704630109478
    test 2684 282 282.000000000000 Chi(tan=-4.70463, x=0.207912, y=-0.978148): -4.704630109478
    test 2685 282 281.974011355314 Xi(tan=-4.71515, x=0.207468, y=-0.978242): -4.704630109478

    test 2686 282 281.922056806700 Phi(tan=-4.7363, x=1.0, y=-4.7363): -4.704630109478
    test 2687 282 281.961010392180 Beta(tan=-4.72042, x=1.0, y=-4.72042): -4.704630109478
    test 2688 282 282.000083746815 Theta(tan=-4.7046, x=1.0, y=-4.7046): -4.704630109478
    test 2689 282 281.980509583453 Mu(tan=-4.71251, x=0.207579, y=-0.978218), iteration=2: -4.704630109478
    test 2690 282 282.000000000000 Chi(tan=-4.70463, x=0.207912, y=-0.978148): -4.704630109478
    test 2691 282 281.974011355314 Xi(tan=-4.71515, x=0.416799, y=-1.96527), iteration=2: -4.704630109478

    test 2692 285 284.904166968877 Phi(tan=-3.75718, x=0.257203, y=-0.966357): -3.732050807569
    test 2693 285 284.952063867788 Beta(tan=-3.74458, x=0.258011, y=-0.966142): -3.732050807569
    test 2694 285 285.000100412186 Theta(tan=-3.73202, x=0.258821, y=-0.965925): -3.732050807569
    test 2695 285 284.976038435868 Mu(tan=-3.7383, x=0.258415, y=-0.966034): -3.732050807569
    test 2696 285 285.000000000000 Chi(tan=-3.73205, x=0.258819, y=-0.965926): -3.732050807569
    test 2697 285 284.968049034476 Xi(tan=-3.74039, x=0.25828, y=-0.96607): -3.732050807569

    test 2698 285 284.904166968877 Phi(tan=-3.75718, x=1.0, y=-3.75718): -3.732050807569
    test 2699 285 284.952063867788 Beta(tan=-3.74458, x=1.0, y=-3.74458): -3.732050807569
    test 2700 285 285.000100412186 Theta(tan=-3.73202, x=1.0, y=-3.73202): -3.732050807569
    test 2701 285 284.976038435868 Mu(tan=-3.7383, x=0.258415, y=-0.966034), iteration=3: -3.732050807569
    test 2702 285 285.000000000000 Chi(tan=-3.73205, x=0.258819, y=-0.965926): -3.732050807569
    test 2703 285 284.968049034476 Xi(tan=-3.74039, x=0.51888, y=-1.94082), iteration=2: -3.732050807569

    test 2704 288 287.887316506149 Phi(tan=-3.0984, x=0.307146, y=-0.951662): -3.077683537175
    test 2705 288 287.943638755482 Beta(tan=-3.08802, x=0.308081, y=-0.95136): -3.077683537175
    test 2706 288 288.000114461489 Theta(tan=-3.07766, x=0.309019, y=-0.951056): -3.077683537175
    test 2707 288 287.971828585776 Mu(tan=-3.08284, x=0.308549, y=-0.951208): -3.077683537175
    test 2708 288 288.000000000000 Chi(tan=-3.07768, x=0.309017, y=-0.951057): -3.077683537175
    test 2709 288 287.962434856938 Xi(tan=-3.08456, x=0.308393, y=-0.951259): -3.077683537175

    test 2710 288 287.887316506149 Phi(tan=-3.0984, x=1.0, y=-3.0984): -3.077683537175
    test 2711 288 287.943638755482 Beta(tan=-3.08802, x=1.0, y=-3.08802): -3.077683537175
    test 2712 288 288.000114461489 Theta(tan=-3.07766, x=1.0, y=-3.07766): -3.077683537175
    test 2713 288 287.971828585776 Mu(tan=-3.08284, x=0.308549, y=-0.951208), iteration=3: -3.077683537175
    test 2714 288 288.000000000000 Chi(tan=-3.07768, x=0.309017, y=-0.951057): -3.077683537175
    test 2715 288 287.962434856938 Xi(tan=-3.08456, x=0.619556, y=-1.91106), iteration=2: -3.077683537175

    test 2716 291 290.871688983015 Phi(tan=-2.62263, x=0.356276, y=-0.934381): -2.605089064694
    test 2717 291 290.935826987159 Beta(tan=-2.61384, x=0.357322, y=-0.933981): -2.605089064694
    test 2718 291 291.000125590586 Theta(tan=-2.60507, x=0.35837, y=-0.93358): -2.605089064694
    test 2719 291 290.967926035496 Mu(tan=-2.60945, x=0.357845, y=-0.933781): -2.605089064694
    test 2720 291 291.000000000000 Chi(tan=-2.60509, x=0.358368, y=-0.93358): -2.605089064694
    test 2721 291 290.957230142972 Xi(tan=-2.61091, x=0.357671, y=-0.933848): -2.605089064694

    test 2722 291 290.871688983015 Phi(tan=-2.62263, x=1.0, y=-2.62263): -2.605089064694
    test 2723 291 290.935826987159 Beta(tan=-2.61384, x=1.0, y=-2.61384): -2.605089064694
    test 2724 291 291.000125590586 Theta(tan=-2.60507, x=1.0, y=-2.60507): -2.605089064694
    test 2725 291 290.967926035496 Mu(tan=-2.60945, x=0.357845, y=-0.933781), iteration=3: -2.605089064694
    test 2726 291 291.000000000000 Chi(tan=-2.60509, x=0.358368, y=-0.93358): -2.605089064694
    test 2727 291 290.957230142972 Xi(tan=-2.61091, x=0.718554, y=-1.87608), iteration=2: -2.605089064694

    test 2728 294 293.857455069612 Phi(tan=-2.26116, x=0.404463, y=-0.914555): -2.246036773904
    test 2729 294 293.928713955385 Beta(tan=-2.25358, x=0.4056, y=-0.914051): -2.246036773904
    test 2730 294 294.000133599673 Theta(tan=-2.24602, x=0.406739, y=-0.913545): -2.246036773904
    test 2731 294 293.964373479294 Mu(tan=-2.2498, x=0.406169, y=-0.913798): -2.246036773904
    test 2732 294 294.000000000000 Chi(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 2733 294 293.952491818284 Xi(tan=-2.25106, x=0.405979, y=-0.913882): -2.246036773904

    test 2734 294 293.857455069612 Phi(tan=-2.26116, x=1.0, y=-2.26116): -2.246036773904
    test 2735 294 293.928713955385 Beta(tan=-2.25358, x=1.0, y=-2.25358): -2.246036773904
    test 2736 294 294.000133599673 Theta(tan=-2.24602, x=1.0, y=-2.24602): -2.246036773904
    test 2737 294 293.964373479294 Mu(tan=-2.2498, x=0.406169, y=-0.913798), iteration=3: -2.246036773904
    test 2738 294 294.000000000000 Chi(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 2739 294 293.952491818284 Xi(tan=-2.25106, x=0.815604, y=-1.83597), iteration=3: -2.246036773904

    test 2740 297 296.844770696439 Phi(tan=-1.97583, x=0.451575, y=-0.892233): -1.962610505505
    test 2741 297 296.922377586525 Beta(tan=-1.9692, x=0.452783, y=-0.891621): -1.962610505505
    test 2742 297 297.000138398941 Theta(tan=-1.9626, x=0.453993, y=-0.891005): -1.962610505505
    test 2743 297 296.961209838409 Mu(tan=-1.9659, x=0.453387, y=-0.891314): -1.962610505505
    test 2744 297 297.000000000000 Chi(tan=-1.96261, x=0.45399, y=-0.891007): -1.962610505505
    test 2745 297 296.948271794696 Xi(tan=-1.967, x=0.453186, y=-0.891416): -1.962610505505

    test 2746 297 296.844770696439 Phi(tan=-1.97583, x=1.0, y=-1.97583): -1.962610505505
    test 2747 297 296.922377586525 Beta(tan=-1.9692, x=1.0, y=-1.9692): -1.962610505505
    test 2748 297 297.000138398941 Theta(tan=-1.9626, x=1.0, y=-1.9626): -1.962610505505
    test 2749 297 296.961209838409 Mu(tan=-1.9659, x=0.453387, y=-0.891314), iteration=3: -1.962610505505
    test 2750 297 297.000000000000 Chi(tan=-1.96261, x=0.45399, y=-0.891007): -1.962610505505
    test 2751 297 296.948271794696 Xi(tan=-1.967, x=0.910441, y=-1.79084), iteration=3: -1.962610505505

    test 2752 300 299.833775347807 Phi(tan=-1.74371, x=0.497485, y=-0.867472): -1.732050807569
    test 2753 300 299.916887487494 Beta(tan=-1.73787, x=0.498743, y=-0.86675): -1.732050807569
    test 2754 300 300.000140009758 Theta(tan=-1.73204, x=0.500002, y=-0.866024): -1.732050807569
    test 2755 300 299.958469834751 Mu(tan=-1.73495, x=0.499372, y=-0.866388): -1.732050807569
    test 2756 300 300.000000000000 Chi(tan=-1.73205, x=0.5, y=-0.866025): -1.732050807569
    test 2757 300 299.944616401609 Xi(tan=-1.73592, x=0.499163, y=-0.866508): -1.732050807569

    test 2758 300 299.833775347807 Phi(tan=-1.74371, x=1.0, y=-1.74371): -1.732050807569
    test 2759 300 299.916887487494 Beta(tan=-1.73787, x=1.0, y=-1.73787): -1.732050807569
    test 2760 300 300.000140009758 Theta(tan=-1.73204, x=1.0, y=-1.73204): -1.732050807569
    test 2761 300 299.958469834751 Mu(tan=-1.73495, x=0.499372, y=-0.866388), iteration=3: -1.732050807569
    test 2762 300 300.000000000000 Chi(tan=-1.73205, x=0.5, y=-0.866025): -1.732050807569
    test 2763 300 299.944616401609 Xi(tan=-1.73592, x=1.00281, y=-1.7408), iteration=2: -1.732050807569

    test 2764 303 302.824590512571 Phi(tan=-1.55023, x=0.542069, y=-0.840334): -1.539864963815
    test 2765 303 302.912304175451 Beta(tan=-1.54504, x=0.543355, y=-0.839503): -1.539864963815
    test 2766 303 303.000138561343 Theta(tan=-1.53986, x=0.544641, y=-0.838669): -1.539864963815
    test 2767 303 302.956183607930 Mu(tan=-1.54245, x=0.543998, y=-0.839087): -1.539864963815
    test 2768 303 303.000000000000 Chi(tan=-1.53986, x=0.544639, y=-0.838671): -1.539864963815
    test 2769 303 302.941565874450 Xi(tan=-1.54331, x=0.543783, y=-0.839226): -1.539864963815

    test 2770 303 302.824590512571 Phi(tan=-1.55023, x=1.0, y=-1.55023): -1.539864963815
    test 2771 303 302.912304175451 Beta(tan=-1.54504, x=1.0, y=-1.54504): -1.539864963815
    test 2772 303 303.000138561343 Theta(tan=-1.53986, x=1.0, y=-1.53986): -1.539864963815
    test 2773 303 302.956183607930 Mu(tan=-1.54245, x=0.543998, y=-0.839087), iteration=3: -1.539864963815
    test 2774 303 303.000000000000 Chi(tan=-1.53986, x=0.544639, y=-0.838671): -1.539864963815
    test 2775 303 302.941565874450 Xi(tan=-1.54331, x=1.09245, y=-1.68599), iteration=2: -1.539864963815

    test 2776 306 305.817318309875 Phi(tan=-1.38565, x=0.585203, y=-0.810887): -1.376381920471
    test 2777 306 305.908678399154 Beta(tan=-1.38101, x=0.586495, y=-0.809953): -1.376381920471
    test 2778 306 306.000134283091 Theta(tan=-1.37638, x=0.587787, y=-0.809016): -1.376381920471
    test 2779 306 305.954376379912 Mu(tan=-1.37869, x=0.587141, y=-0.809485): -1.376381920471
    test 2780 306 306.000000000000 Chi(tan=-1.37638, x=0.587785, y=-0.809017): -1.376381920471
    test 2781 306 305.939153905889 Xi(tan=-1.37946, x=0.586926, y=-0.809641): -1.376381920471

    test 2782 306 305.817318309875 Phi(tan=-1.38565, x=1.0, y=-1.38565): -1.376381920471
    test 2783 306 305.908678399154 Beta(tan=-1.38101, x=1.0, y=-1.38101): -1.376381920471
    test 2784 306 306.000134283091 Theta(tan=-1.37638, x=1.0, y=-1.37638): -1.376381920471
    test 2785 306 305.954376379912 Mu(tan=-1.37869, x=0.587141, y=-0.809485), iteration=3: -1.376381920471
    test 2786 306 306.000000000000 Chi(tan=-1.37638, x=0.587785, y=-0.809017): -1.376381920471
    test 2787 306 305.939153905889 Xi(tan=-1.37946, x=1.17912, y=-1.62655), iteration=2: -1.376381920471

    test 2788 309 308.812040306735 Phi(tan=-1.24321, x=0.626768, y=-0.779206): -1.234897156535
    test 2789 309 308.906050560073 Beta(tan=-1.23905, x=0.628045, y=-0.778177): -1.234897156535
    test 2790 309 309.000127492880 Theta(tan=-1.23489, x=0.629322, y=-0.777145): -1.234897156535
    test 2791 309 308.953068171197 Mu(tan=-1.23697, x=0.628684, y=-0.777661): -1.234897156535
    test 2792 309 309.000000000000 Chi(tan=-1.2349, x=0.62932, y=-0.777146): -1.234897156535
    test 2793 309 308.937407265034 Xi(tan=-1.23766, x=0.628471, y=-0.777833): -1.234897156535

    test 2794 309 308.812040306735 Phi(tan=-1.24321, x=1.0, y=-1.24321): -1.234897156535
    test 2795 309 308.906050560073 Beta(tan=-1.23905, x=1.0, y=-1.23905): -1.234897156535
    test 2796 309 309.000127492879 Theta(tan=-1.23489, x=1.0, y=-1.23489): -1.234897156535
    test 2797 309 308.953068171197 Mu(tan=-1.23697, x=0.628684, y=-0.777661), iteration=3: -1.234897156535
    test 2798 309 309.000000000000 Chi(tan=-1.2349, x=0.62932, y=-0.777146): -1.234897156535
    test 2799 309 308.937407265034 Xi(tan=-1.23766, x=1.26259, y=-1.56265), iteration=2: -1.234897156535

    test 2800 312 311.808816543054 Phi(tan=-1.11809, x=0.666647, y=-0.745373): -1.110612514829
    test 2801 312 311.904450240544 Beta(tan=-1.11434, x=0.66789, y=-0.74426): -1.110612514829
    test 2802 312 312.000118581886 Theta(tan=-1.11061, x=0.669132, y=-0.743143): -1.110612514829
    test 2803 312 311.952273571942 Mu(tan=-1.11247, x=0.668511, y=-0.743702): -1.110612514829
    test 2804 312 312.000000000000 Chi(tan=-1.11061, x=0.669131, y=-0.743145): -1.110612514829
    test 2805 312 311.936345489313 Xi(tan=-1.1131, x=0.668305, y=-0.743888): -1.110612514829

    test 2806 312 311.808816543054 Phi(tan=-1.11809, x=1.0, y=-1.11809): -1.110612514829
    test 2807 312 311.904450240544 Beta(tan=-1.11434, x=1.0, y=-1.11434): -1.110612514829
    test 2808 312 312.000118581886 Theta(tan=-1.11061, x=1.0, y=-1.11061): -1.110612514829
    test 2809 312 311.952273571942 Mu(tan=-1.11247, x=0.668511, y=-0.743702), iteration=2: -1.110612514829
    test 2810 312 312.000000000000 Chi(tan=-1.11061, x=0.669131, y=-0.743145): -1.110612514829
    test 2811 312 311.936345489313 Xi(tan=-1.1131, x=1.34261, y=-1.49446), iteration=2: -1.110612514829

    test 2812 315 314.807684778155 Phi(tan=-1.00674, x=0.704729, y=-0.709476): -1.000000000000
    test 2813 315 314.903895845383 Beta(tan=-1.00336, x=0.70592, y=-0.708292): -1.000000000000
    test 2814 315 315.000107996571 Theta(tan=-0.999996, x=0.707108, y=-0.707105): -1.000000000000
    test 2815 315 314.952001570934 Mu(tan=-1.00168, x=0.706514, y=-0.707699): -1.000000000000
    test 2816 315 315.000000000000 Chi(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 2817 315 314.935980653019 Xi(tan=-1.00224, x=0.706316, y=-0.707896): -1.000000000000

    test 2818 315 314.807684778155 Phi(tan=-1.00674, x=1.0, y=-1.00674): -1.000000000000
    test 2819 315 314.903895845383 Beta(tan=-1.00336, x=1.0, y=-1.00336): -1.000000000000
    test 2820 315 315.000107996571 Theta(tan=-0.999996, x=1.0, y=-0.999996): -1.000000000000
    test 2821 315 314.952001570934 Mu(tan=-1.00168, x=0.706514, y=-0.707699), iteration=2: -1.000000000000
    test 2822 315 315.000000000000 Chi(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 2823 315 314.935980653019 Xi(tan=-1.00224, x=1.41898, y=-1.42215), iteration=3: -1.000000000000

    test 2824 318 317.808659971180 Phi(tan=-0.906469, x=0.740906, y=-0.671609): -0.900404044298
    test 2825 318 317.904394362360 Beta(tan=-0.90343, x=0.742027, y=-0.67037): -0.900404044298
    test 2826 318 318.000096218618 Theta(tan=-0.900401, x=0.743146, y=-0.669129): -0.900404044298
    test 2827 318 317.952255444795 Mu(tan=-0.901914, x=0.742587, y=-0.66975): -0.900404044298
    test 2828 318 318.000000000000 Chi(tan=-0.900404, x=0.743145, y=-0.669131): -0.900404044298
    test 2829 318 317.936317215816 Xi(tan=-0.902419, x=0.742401, y=-0.669956): -0.900404044298

    test 2830 318 317.808659971180 Phi(tan=-0.906469, x=1.0, y=-0.906469): -0.900404044298
    test 2831 318 317.904394362360 Beta(tan=-0.90343, x=1.0, y=-0.90343): -0.900404044298
    test 2832 318 318.000096218618 Theta(tan=-0.900401, x=1.0, y=-0.900401): -0.900404044298
    test 2833 318 317.952255444795 Mu(tan=-0.901914, x=0.742587, y=-0.66975), iteration=3: -0.900404044298
    test 2834 318 318.000000000000 Chi(tan=-0.900404, x=0.743145, y=-0.669131): -0.900404044298
    test 2835 318 317.936317215816 Xi(tan=-0.902419, x=1.49147, y=-1.34593), iteration=2: -0.900404044298

    test 2836 321 320.811734005606 Phi(tan=-0.815239, x=0.775074, y=-0.631871): -0.809784033195
    test 2837 321 320.905941245773 Beta(tan=-0.812506, x=0.776112, y=-0.630595): -0.809784033195
    test 2838 321 321.000083743694 Theta(tan=-0.809782, x=0.777147, y=-0.629319): -0.809784033195
    test 2839 321 320.953032709132 Mu(tan=-0.811142, x=0.77663, y=-0.629957): -0.809784033195
    test 2840 321 321.000000000000 Chi(tan=-0.809784, x=0.777146, y=-0.62932): -0.809784033195
    test 2841 321 320.937351953700 Xi(tan=-0.811596, x=0.776457, y=-0.63017): -0.809784033195

    test 2842 321 320.811734005606 Phi(tan=-0.815239, x=1.0, y=-0.815239): -0.809784033195
    test 2843 321 320.905941245773 Beta(tan=-0.812506, x=1.0, y=-0.812506): -0.809784033195
    test 2844 321 321.000083743694 Theta(tan=-0.809782, x=1.0, y=-0.809782): -0.809784033195
    test 2845 321 320.953032709132 Mu(tan=-0.811142, x=0.77663, y=-0.629957), iteration=3: -0.809784033195
    test 2846 321 321.000000000000 Chi(tan=-0.809784, x=0.777146, y=-0.62932): -0.809784033195
    test 2847 321 320.937351953700 Xi(tan=-0.811596, x=1.55989, y=-1.266), iteration=2: -0.809784033195

    test 2848 324 323.816875665726 Phi(tan=-0.731437, x=0.807134, y=-0.590368): -0.726542528005
    test 2849 324 323.908520426154 Beta(tan=-0.728985, x=0.808077, y=-0.589076): -0.726542528005
    test 2850 324 324.000071059980 Theta(tan=-0.726541, x=0.809018, y=-0.587784): -0.726542528005
    test 2851 324 323.954325132764 Mu(tan=-0.727761, x=0.808548, y=-0.58843): -0.726542528005
    test 2852 324 324.000000000000 Chi(tan=-0.726543, x=0.809017, y=-0.587785): -0.726542528005
    test 2853 324 323.939073974040 Xi(tan=-0.728168, x=0.808392, y=-0.588645): -0.726542528005

    test 2854 324 323.816875665726 Phi(tan=-0.731437, x=1.0, y=-0.731437): -0.726542528005
    test 2855 324 323.908520426154 Beta(tan=-0.728985, x=1.0, y=-0.728985): -0.726542528005
    test 2856 324 324.000071059980 Theta(tan=-0.726541, x=1.0, y=-0.726541): -0.726542528005
    test 2857 324 323.954325132764 Mu(tan=-0.727761, x=0.808548, y=-0.58843), iteration=2: -0.726542528005
    test 2858 324 324.000000000000 Chi(tan=-0.726543, x=0.809017, y=-0.587785): -0.726542528005
    test 2859 324 323.939073974040 Xi(tan=-0.728168, x=1.62404, y=-1.18258), iteration=3: -0.726542528005

    test 2860 327 326.824030870318 Phi(tan=-0.653783, x=0.836994, y=-0.547212): -0.649407593198
    test 2861 327 326.912104447745 Beta(tan=-0.651591, x=0.837834, y=-0.545925): -0.649407593198
    test 2862 327 327.000058627387 Theta(tan=-0.649406, x=0.838671, y=-0.544638): -0.649407593198
    test 2863 327 326.956118815411 Mu(tan=-0.650497, x=0.838253, y=-0.545281): -0.649407593198
    test 2864 327 327.000000000000 Chi(tan=-0.649408, x=0.838671, y=-0.544639): -0.649407593198
    test 2865 327 326.941464815429 Xi(tan=-0.650861, x=0.838114, y=-0.545496): -0.649407593198

    test 2866 327 326.824030870318 Phi(tan=-0.653783, x=1.0, y=-0.653783): -0.649407593198
    test 2867 327 326.912104447745 Beta(tan=-0.651591, x=1.0, y=-0.651591): -0.649407593198
    test 2868 327 327.000058627387 Theta(tan=-0.649406, x=1.0, y=-0.649406): -0.649407593198
    test 2869 327 326.956118815411 Mu(tan=-0.650497, x=0.838253, y=-0.545281), iteration=2: -0.649407593198
    test 2870 327 327.000000000000 Chi(tan=-0.649408, x=0.838671, y=-0.544639): -0.649407593198
    test 2871 327 326.941464815429 Xi(tan=-0.650861, x=1.68375, y=-1.09589), iteration=2: -0.649407593198

    test 2872 330 329.833123165708 Phi(tan=-0.58124, x=0.864565, y=-0.50252): -0.577350269190
    test 2873 330 329.916654733950 Beta(tan=-0.579291, x=0.865297, y=-0.501259): -0.577350269190
    test 2874 330 330.000046858376 Theta(tan=-0.577349, x=0.866026, y=-0.499999): -0.577350269190
    test 2875 330 329.958394328571 Mu(tan=-0.578319, x=0.865662, y=-0.500629): -0.577350269190
    test 2876 330 330.000000000000 Chi(tan=-0.57735, x=0.866025, y=-0.5): -0.577350269190
    test 2877 330 329.944498632112 Xi(tan=-0.578643, x=0.865541, y=-0.500839): -0.577350269190

    test 2878 330 329.833123165708 Phi(tan=-0.58124, x=1.0, y=-0.58124): -0.577350269190
    test 2879 330 329.916654733950 Beta(tan=-0.579291, x=1.0, y=-0.579291): -0.577350269190
    test 2880 330 330.000046858376 Theta(tan=-0.577349, x=1.0, y=-0.577349): -0.577350269190
    test 2881 330 329.958394328571 Mu(tan=-0.578319, x=0.865662, y=-0.500629), iteration=3: -0.577350269190
    test 2882 330 330.000000000000 Chi(tan=-0.57735, x=0.866025, y=-0.5): -0.577350269190
    test 2883 330 329.944498632112 Xi(tan=-0.578643, x=1.73885, y=-1.00617), iteration=2: -0.577350269190

    test 2884 333 332.844054477289 Phi(tan=-0.512959, x=0.889768, y=-0.456414): -0.509525449494
    test 2885 333 332.922121979423 Beta(tan=-0.511239, x=0.890389, y=-0.455201): -0.509525449494
    test 2886 333 333.000036101230 Theta(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494
    test 2887 333 332.961126918518 Mu(tan=-0.51038, x=0.890698, y=-0.454595): -0.509525449494
    test 2888 333 333.000000000000 Chi(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494
    test 2889 333 332.948142461760 Xi(tan=-0.510666, x=0.890595, y=-0.454797): -0.509525449494

    test 2890 333 332.844054477289 Phi(tan=-0.512959, x=1.0, y=-0.512959): -0.509525449494
    test 2891 333 332.922121979423 Beta(tan=-0.511239, x=1.0, y=-0.511239): -0.509525449494
    test 2892 333 333.000036101230 Theta(tan=-0.509525, x=1.0, y=-0.509525): -0.509525449494
    test 2893 333 332.961126918518 Mu(tan=-0.51038, x=0.890698, y=-0.454595), iteration=2: -0.509525449494
    test 2894 333 333.000000000000 Chi(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494
    test 2895 333 332.948142461760 Xi(tan=-0.510666, x=1.78919, y=-0.913678), iteration=3: -0.509525449494

    test 2896 336 335.856706115158 Phi(tan=-0.448229, x=0.912525, y=-0.40902): -0.445228685309
    test 2897 336 335.928446665868 Beta(tan=-0.446726, x=0.913037, y=-0.407877): -0.445228685309
    test 2898 336 336.000026626488 Theta(tan=-0.445228, x=0.913546, y=-0.406736): -0.445228685309
    test 2899 336 335.964286769667 Mu(tan=-0.445976, x=0.913292, y=-0.407306): -0.445228685309
    test 2900 336 336.000000000000 Chi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 2901 336 335.952356574339 Xi(tan=-0.446225, x=0.913207, y=-0.407496): -0.445228685309

    test 2902 336 335.856706115158 Phi(tan=-0.448229, x=1.0, y=-0.448229): -0.445228685309
    test 2903 336 335.928446665868 Beta(tan=-0.446726, x=1.0, y=-0.446726): -0.445228685309
    test 2904 336 336.000026626488 Theta(tan=-0.445228, x=1.0, y=-0.445228): -0.445228685309
    test 2905 336 335.964286769667 Mu(tan=-0.445976, x=0.913292, y=-0.407306), iteration=3: -0.445228685309
    test 2906 336 336.000000000000 Chi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 2907 336 335.952356574339 Xi(tan=-0.446225, x=1.83461, y=-0.818652), iteration=2: -0.445228685309

    test 2908 339 338.870940025993 Phi(tan=-0.386451, x=0.932771, y=-0.36047): -0.383864035035
    test 2909 339 338.935559697022 Beta(tan=-0.385155, x=0.933177, y=-0.359418): -0.383864035035
    test 2910 339 339.000018617151 Theta(tan=-0.383864, x=0.933581, y=-0.358368): -0.383864035035
    test 2911 339 338.967839325753 Mu(tan=-0.384508, x=0.933379, y=-0.358892): -0.383864035035
    test 2912 339 339.000000000000 Chi(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035
    test 2913 339 338.957094898814 Xi(tan=-0.384723, x=0.933312, y=-0.359067): -0.383864035035

    test 2914 339 338.870940025993 Phi(tan=-0.386451, x=1.0, y=-0.386451): -0.383864035035
    test 2915 339 338.935559697022 Beta(tan=-0.385155, x=1.0, y=-0.385155): -0.383864035035
    test 2916 339 339.000018617151 Theta(tan=-0.383864, x=1.0, y=-0.383864): -0.383864035035
    test 2917 339 338.967839325753 Mu(tan=-0.384508, x=0.933379, y=-0.358892), iteration=3: -0.383864035035
    test 2918 339 339.000000000000 Chi(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035
    test 2919 339 338.957094898814 Xi(tan=-0.384723, x=1.875, y=-0.721358), iteration=3: -0.383864035035

    test 2920 342 341.886600279742 Phi(tan=-0.327109, x=0.950443, y=-0.310899): -0.324919696233
    test 2921 342 341.943383146627 Beta(tan=-0.326013, x=0.950751, y=-0.309957): -0.324919696233
    test 2922 342 342.000012163074 Theta(tan=-0.324919, x=0.951057, y=-0.309017): -0.324919696233
    test 2923 342 341.971745665557 Mu(tan=-0.325465, x=0.950904, y=-0.309486): -0.324919696233
    test 2924 342 342.000000000000 Chi(tan=-0.32492, x=0.951057, y=-0.309017): -0.324919696233
    test 2925 342 341.962305523399 Xi(tan=-0.325647, x=0.950853, y=-0.309643): -0.324919696233

    test 2926 342 341.886600279742 Phi(tan=-0.327109, x=1.0, y=-0.327109): -0.324919696233
    test 2927 342 341.943383146627 Beta(tan=-0.326013, x=1.0, y=-0.326013): -0.324919696233
    test 2928 342 342.000012163074 Theta(tan=-0.324919, x=1.0, y=-0.324919): -0.324919696233
    test 2929 342 341.971745665557 Mu(tan=-0.325465, x=0.950904, y=-0.309486), iteration=3: -0.324919696233
    test 2930 342 342.000000000000 Chi(tan=-0.32492, x=0.951057, y=-0.309017): -0.324919696233
    test 2931 342 341.962305523399 Xi(tan=-0.325647, x=1.91024, y=-0.622066), iteration=2: -0.324919696233

    test 2932 345 344.903514776084 Phi(tan=-0.269755, x=0.965489, y=-0.260445): -0.267949192431
    test 2933 345 344.951831111660 Beta(tan=-0.26885, x=0.965708, y=-0.259631): -0.267949192431
    test 2934 345 345.000007259768 Theta(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431
    test 2935 345 344.975962929206 Mu(tan=-0.268399, x=0.965817, y=-0.259224): -0.267949192431
    test 2936 345 345.000000000000 Chi(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431
    test 2937 345 344.967931264091 Xi(tan=-0.268549, x=0.965781, y=-0.25936): -0.267949192431

    test 2938 345 344.903514776084 Phi(tan=-0.269755, x=1.0, y=-0.269755): -0.267949192431
    test 2939 345 344.951831111660 Beta(tan=-0.26885, x=1.0, y=-0.26885): -0.267949192431
    test 2940 345 345.000007259768 Theta(tan=-0.267949, x=1.0, y=-0.267949): -0.267949192431
    test 2941 345 344.975962929206 Mu(tan=-0.268399, x=0.965817, y=-0.259224), iteration=2: -0.267949192431
    test 2942 345 345.000000000000 Chi(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431
    test 2943 345 344.967931264091 Xi(tan=-0.268549, x=1.94023, y=-0.521048), iteration=2: -0.267949192431

    test 2944 348 347.921497152166 Phi(tan=-0.213989, x=0.977862, y=-0.209252): -0.212556561670
    test 2945 348 347.960810661508 Beta(tan=-0.213272, x=0.978005, y=-0.208581): -0.212556561670
    test 2946 348 348.000003811668 Theta(tan=-0.212556, x=0.978148, y=-0.207912): -0.212556561670
    test 2947 348 347.980444790381 Mu(tan=-0.212913, x=0.978077, y=-0.208246): -0.212556561670
    test 2948 348 348.000000000000 Chi(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670
    test 2949 348 347.973910295272 Xi(tan=-0.213033, x=0.978053, y=-0.208357): -0.212556561670

    test 2950 348 347.921497152166 Phi(tan=-0.213989, x=1.0, y=-0.213989): -0.212556561670
    test 2951 348 347.960810661508 Beta(tan=-0.213272, x=1.0, y=-0.213272): -0.212556561670
    test 2952 348 348.000003811668 Theta(tan=-0.212556, x=1.0, y=-0.212556): -0.212556561670
    test 2953 348 347.980444790381 Mu(tan=-0.212913, x=0.978077, y=-0.208246), iteration=3: -0.212556561670
    test 2954 348 348.000000000000 Chi(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670
    test 2955 348 347.973910295272 Xi(tan=-0.213033, x=1.96489, y=-0.418585), iteration=3: -0.212556561670

    test 2956 351 350.940348869815 Phi(tan=-0.159452, x=0.987525, y=-0.157463): -0.158384440325
    test 2957 351 350.970222872358 Beta(tan=-0.158917, x=0.987607, y=-0.156948): -0.158384440325
    test 2958 351 351.000001639673 Theta(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325
    test 2959 351 350.985141969157 Mu(tan=-0.15865, x=0.987648, y=-0.156691): -0.158384440325
    test 2960 351 351.000000000000 Chi(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325
    test 2961 351 350.980176835305 Xi(tan=-0.158739, x=0.987634, y=-0.156776): -0.158384440325

    test 2962 351 350.940348869815 Phi(tan=-0.159452, x=1.0, y=-0.159452): -0.158384440325
    test 2963 351 350.970222872358 Beta(tan=-0.158917, x=1.0, y=-0.158917): -0.158384440325
    test 2964 351 351.000001639673 Theta(tan=-0.158384, x=1.0, y=-0.158384): -0.158384440325
    test 2965 351 350.985141969157 Mu(tan=-0.15865, x=0.987648, y=-0.156691), iteration=2: -0.158384440325
    test 2966 351 351.000000000000 Chi(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325
    test 2967 351 350.980176835305 Xi(tan=-0.158739, x=1.98414, y=-0.31496), iteration=2: -0.158384440325

    test 2968 354 353.959861457396 Phi(tan=-0.105813, x=0.994448, y=-0.105225): -0.105104235266
    test 2969 354 353.979963934785 Beta(tan=-0.105458, x=0.994485, y=-0.104876): -0.105104235266
    test 2970 354 354.000000492613 Theta(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266
    test 2971 354 353.990002779616 Mu(tan=-0.105281, x=0.994504, y=-0.104702): -0.105104235266
    test 2972 354 354.000000000000 Chi(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266
    test 2973 354 353.986661879264 Xi(tan=-0.10534, x=0.994498, y=-0.10476): -0.105104235266

    test 2974 354 353.959861457396 Phi(tan=-0.105813, x=1.0, y=-0.105813): -0.105104235266
    test 2975 354 353.979963934785 Beta(tan=-0.105458, x=1.0, y=-0.105458): -0.105104235266
    test 2976 354 354.000000492613 Theta(tan=-0.105104, x=1.0, y=-0.105104): -0.105104235266
    test 2977 354 353.990002779616 Mu(tan=-0.105281, x=0.994504, y=-0.104702), iteration=3: -0.105104235266
    test 2978 354 354.000000000000 Chi(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266
    test 2979 354 353.986661879264 Xi(tan=-0.10534, x=1.99793, y=-0.210461), iteration=2: -0.105104235266

    test 2980 357 356.979818878824 Phi(tan=-0.052761, x=0.998611, y=-0.0526877): -0.052407779283
    test 2981 357 356.989926321337 Beta(tan=-0.0525841, x=0.99862, y=-0.0525115): -0.052407779283
    test 2982 357 357.000000062090 Theta(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 2983 357 356.994973705906 Mu(tan=-0.0524957, x=0.998625, y=-0.0524236): -0.052407779283
    test 2984 357 357.000000000000 Chi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 2985 357 356.993293970223 Xi(tan=-0.0525251, x=0.998623, y=-0.0524528): -0.052407779283

    test 2986 357 356.979818878824 Phi(tan=-0.052761, x=1.0, y=-0.052761): -0.052407779283
    test 2987 357 356.989926321337 Beta(tan=-0.0525841, x=1.0, y=-0.0525841): -0.052407779283
    test 2988 357 357.000000062090 Theta(tan=-0.0524078, x=1.0, y=-0.0524078): -0.052407779283
    test 2989 357 356.994973705906 Mu(tan=-0.0524957, x=0.998625, y=-0.0524236), iteration=3: -0.052407779283
    test 2990 357 357.000000000000 Chi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 2991 357 356.993293970223 Xi(tan=-0.0525251, x=2.00621, y=-0.105377), iteration=2: -0.052407779283

    test 2992  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2993  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2994  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2995  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2996  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2997  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 2998  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2999  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3000  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3001  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3002  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3003  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 3004  3 3.015129572303 Phi(tan=0.0526726, x=0.998616, y=0.0525997): 0.052407779283
    test 3005  3 3.005038973271 Beta(tan=0.052496, x=0.998625, y=0.0524238): 0.052407779283
    test 3006  3 2.994982020459 Theta(tan=0.05232, x=0.998634, y=0.0522485): 0.052407779283
    test 3007  3 3.000000000000 Mu(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283
    test 3008  3 2.994982082238 Chi(tan=0.05232, x=0.998634, y=0.0522485): 0.052407779283
    test 3009  3 3.001676936438 Xi(tan=0.0524371, x=0.998628, y=0.0523652): 0.052407779283

    test 3010  3 3.015129572303 Phi(tan=0.0526726, x=1.0, y=0.0526726): 0.052407779283
    test 3011  3 3.005038973271 Beta(tan=0.052496, x=1.0, y=0.052496): 0.052407779283
    test 3012  3 2.994982020459 Theta(tan=0.05232, x=1.0, y=0.05232): 0.052407779283
    test 3013  3 3.000000000000 Mu(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283
    test 3014  3 2.994982082238 Chi(tan=0.05232, x=1.0, y=0.05232), iteration=3: 0.052407779283
    test 3015  3 3.001676936438 Xi(tan=0.0524371, x=2.00622, y=0.105201), iteration=2: 0.052407779283

    test 3016  6 6.030091926518 Phi(tan=0.105635, x=0.994467, y=0.105051): 0.105104235266
    test 3017  6 6.010022392522 Beta(tan=0.105281, x=0.994504, y=0.104702): 0.105104235266
    test 3018  6 5.990018674955 Theta(tan=0.104928, x=0.99454, y=0.104355): 0.105104235266
    test 3019  6 6.000000000000 Mu(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266
    test 3020  6 5.990019165132 Chi(tan=0.104928, x=0.99454, y=0.104355): 0.105104235266
    test 3021  6 6.003335424891 Xi(tan=0.105163, x=0.994516, y=0.104586): 0.105104235266

    test 3022  6 6.030091926518 Phi(tan=0.105635, x=1.0, y=0.105635): 0.105104235266
    test 3023  6 6.010022392522 Beta(tan=0.105281, x=1.0, y=0.105281): 0.105104235266
    test 3024  6 5.990018674955 Theta(tan=0.104928, x=1.0, y=0.104928): 0.105104235266
    test 3025  6 6.000000000000 Mu(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266
    test 3026  6 5.990019165132 Chi(tan=0.104928, x=1.0, y=0.104928), iteration=2: 0.105104235266
    test 3027  6 6.003335424891 Xi(tan=0.105163, x=1.99796, y=0.210112), iteration=2: 0.105104235266

    test 3028  9 9.044721740866 Phi(tan=0.159185, x=0.987566, y=0.157205): 0.158384440325
    test 3029  9 9.014895327636 Beta(tan=0.158651, x=0.987648, y=0.156691): 0.158384440325
    test 3030  9 8.985164013992 Theta(tan=0.158119, x=0.987729, y=0.156179): 0.158384440325
    test 3031  9 9.000000000000 Mu(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325
    test 3032  9 8.985165645705 Chi(tan=0.158119, x=0.987729, y=0.156179): 0.158384440325
    test 3033  9 9.004957222799 Xi(tan=0.158473, x=0.987675, y=0.15652): 0.158384440325

    test 3034  9 9.044721740866 Phi(tan=0.159185, x=1.0, y=0.159185): 0.158384440325
    test 3035  9 9.014895327636 Beta(tan=0.158651, x=1.0, y=0.158651): 0.158384440325
    test 3036  9 8.985164013992 Theta(tan=0.158119, x=1.0, y=0.158119): 0.158384440325
    test 3037  9 9.000000000000 Mu(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325
    test 3038  9 8.985165645705 Chi(tan=0.158119, x=1.0, y=0.158119), iteration=3: 0.158384440325
    test 3039  9 9.004957222799 Xi(tan=0.158473, x=1.98422, y=0.314445), iteration=3: 0.158384440325

    test 3040 12 12.058857462545 Phi(tan=0.21363, x=0.977934, y=0.208916): 0.212556561670
    test 3041 12 12.019604088789 Beta(tan=0.212914, x=0.978076, y=0.208246): 0.212556561670
    test 3042 12 11.980470926737 Theta(tan=0.2122, x=0.978218, y=0.207578): 0.212556561670
    test 3043 12 12.000000000000 Mu(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670
    test 3044 12 11.980474720380 Chi(tan=0.2122, x=0.978218, y=0.207578): 0.212556561670
    test 3045 12 12.006524496048 Xi(tan=0.212676, x=0.978124, y=0.208023): 0.212556561670

    test 3046 12 12.058857462545 Phi(tan=0.21363, x=1.0, y=0.21363): 0.212556561670
    test 3047 12 12.019604088789 Beta(tan=0.212914, x=1.0, y=0.212914): 0.212556561670
    test 3048 12 11.980470926737 Theta(tan=0.2122, x=1.0, y=0.2122): 0.212556561670
    test 3049 12 12.000000000000 Mu(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670
    test 3050 12 11.980474720380 Chi(tan=0.2122, x=1.0, y=0.2122), iteration=3: 0.212556561670
    test 3051 12 12.006524496048 Xi(tan=0.212676, x=1.96503, y=0.417914), iteration=2: 0.212556561670

    test 3052 15 15.072343133491 Phi(tan=0.269303, x=0.965598, y=0.260038): 0.267949192431
    test 3053 15 15.024096827921 Beta(tan=0.2684, x=0.965817, y=0.259225): 0.267949192431
    test 3054 15 14.975990574658 Theta(tan=0.2675, x=0.966034, y=0.258414): 0.267949192431
    test 3055 15 15.000000000000 Mu(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431
    test 3056 15 14.975997801250 Chi(tan=0.2675, x=0.966034, y=0.258414): 0.267949192431
    test 3057 15 15.008020017237 Xi(tan=0.268099, x=0.96589, y=0.258954): 0.267949192431

    test 3058 15 15.072343133491 Phi(tan=0.269303, x=1.0, y=0.269303): 0.267949192431
    test 3059 15 15.024096827921 Beta(tan=0.2684, x=1.0, y=0.2684): 0.267949192431
    test 3060 15 14.975990574658 Theta(tan=0.2675, x=1.0, y=0.2675): 0.267949192431
    test 3061 15 15.000000000000 Mu(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431
    test 3062 15 14.975997801250 Chi(tan=0.2675, x=1.0, y=0.2675), iteration=3: 0.267949192431
    test 3063 15 15.008020017237 Xi(tan=0.268099, x=1.94045, y=0.520234), iteration=2: 0.267949192431

    test 3064 18 18.085030146756 Phi(tan=0.326561, x=0.950597, y=0.310428): 0.324919696233
    test 3065 18 18.028324118127 Beta(tan=0.325466, x=0.950904, y=0.309487): 0.324919696233
    test 3066 18 17.971771842224 Theta(tan=0.324375, x=0.951209, y=0.308548): 0.324919696233
    test 3067 18 18.000000000000 Mu(tan=0.32492, x=0.951057, y=0.309017): 0.324919696233
    test 3068 18 17.971783952037 Chi(tan=0.324375, x=0.951209, y=0.308549): 0.324919696233
    test 3069 18 18.009427356884 Xi(tan=0.325102, x=0.951006, y=0.309173): 0.324919696233

    test 3070 18 18.085030146756 Phi(tan=0.326561, x=1.0, y=0.326561): 0.324919696233
    test 3071 18 18.028324118127 Beta(tan=0.325466, x=1.0, y=0.325466): 0.324919696233
    test 3072 18 17.971771842224 Theta(tan=0.324375, x=1.0, y=0.324375): 0.324919696233
    test 3073 18 18.000000000000 Mu(tan=0.32492, x=0.951057, y=0.309017): 0.324919696233
    test 3074 18 17.971783952037 Chi(tan=0.324375, x=1.0, y=0.324375), iteration=3: 0.324919696233
    test 3075 18 18.009427356884 Xi(tan=0.325102, x=1.91055, y=0.621123), iteration=2: 0.324919696233

    test 3076 21 21.096778912148 Phi(tan=0.385803, x=0.932974, y=0.359944): 0.383864035035
    test 3077 21 21.032239504096 Beta(tan=0.38451, x=0.933379, y=0.358893): 0.383864035035
    test 3078 21 20.967860810199 Theta(tan=0.383221, x=0.933781, y=0.357844): 0.383864035035
    test 3079 21 21.000000000000 Mu(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 3080 21 20.967879349935 Chi(tan=0.383221, x=0.933781, y=0.357845): 0.383864035035
    test 3081 21 21.010731065364 Xi(tan=0.384079, x=0.933513, y=0.358543): 0.383864035035

    test 3082 21 21.096778912148 Phi(tan=0.385803, x=1.0, y=0.385803): 0.383864035035
    test 3083 21 21.032239504096 Beta(tan=0.38451, x=1.0, y=0.38451): 0.383864035035
    test 3084 21 20.967860810199 Theta(tan=0.383221, x=1.0, y=0.383221): 0.383864035035
    test 3085 21 21.000000000000 Mu(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 3086 21 20.967879349935 Chi(tan=0.383221, x=1.0, y=0.383221), iteration=2: 0.383864035035
    test 3087 21 21.010731065364 Xi(tan=0.384079, x=1.87541, y=0.720305), iteration=3: 0.383864035035

    test 3088 24 24.107460411225 Phi(tan=0.447478, x=0.912781, y=0.408449): 0.445228685309
    test 3089 24 24.035800017195 Beta(tan=0.445978, x=0.913291, y=0.407307): 0.445228685309
    test 3090 24 23.964300256913 Theta(tan=0.444482, x=0.913799, y=0.406167): 0.445228685309
    test 3091 24 24.000000000000 Mu(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309
    test 3092 24 23.964326779280 Chi(tan=0.444483, x=0.913799, y=0.406168): 0.445228685309
    test 3093 24 24.011916843510 Xi(tan=0.445478, x=0.913461, y=0.406927): 0.445228685309

    test 3094 24 24.107460411225 Phi(tan=0.447478, x=1.0, y=0.447478): 0.445228685309
    test 3095 24 24.035800017195 Beta(tan=0.445978, x=1.0, y=0.445978): 0.445228685309
    test 3096 24 23.964300256913 Theta(tan=0.444482, x=1.0, y=0.444482): 0.445228685309
    test 3097 24 24.000000000000 Mu(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309
    test 3098 24 23.964326779280 Chi(tan=0.444483, x=1.0, y=0.444483), iteration=2: 0.445228685309
    test 3099 24 24.011916843510 Xi(tan=0.445478, x=1.83512, y=0.817507), iteration=3: 0.445228685309

    test 3100 27 27.116957623523 Phi(tan=0.512099, x=0.890078, y=0.455808): 0.509525449494
    test 3101 27 27.038966649285 Beta(tan=0.510382, x=0.890698, y=0.454596): 0.509525449494
    test 3102 27 26.961129192699 Theta(tan=0.508671, x=0.891314, y=0.453386): 0.509525449494
    test 3103 27 27.000000000000 Mu(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494
    test 3104 27 26.961165162594 Chi(tan=0.508672, x=0.891314, y=0.453386): 0.509525449494
    test 3105 27 27.012971699948 Xi(tan=0.509811, x=0.890904, y=0.454192): 0.509525449494

    test 3106 27 27.116957623523 Phi(tan=0.512099, x=1.0, y=0.512099): 0.509525449494
    test 3107 27 27.038966649285 Beta(tan=0.510382, x=1.0, y=0.510382): 0.509525449494
    test 3108 27 26.961129192699 Theta(tan=0.508671, x=1.0, y=0.508671): 0.509525449494
    test 3109 27 27.000000000000 Mu(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494
    test 3110 27 26.961165162594 Chi(tan=0.508672, x=1.0, y=0.508672), iteration=3: 0.509525449494
    test 3111 27 27.012971699948 Xi(tan=0.509811, x=1.78981, y=0.912463), iteration=3: 0.509525449494

    test 3112 30 30.125166807834 Phi(tan=0.580267, x=0.864931, y=0.501891): 0.577350269190
    test 3113 30 30.041704779944 Beta(tan=0.578321, x=0.865661, y=0.50063): 0.577350269190
    test 3114 30 29.958382432479 Theta(tan=0.576382, x=0.866388, y=0.499371): 0.577350269190
    test 3115 30 30.000000000000 Mu(tan=0.57735, x=0.866025, y=0.5): 0.577350269190
    test 3116 30 29.958429134161 Chi(tan=0.576383, x=0.866388, y=0.499372): 0.577350269190
    test 3117 30 30.013884093401 Xi(tan=0.577673, x=0.865904, y=0.50021): 0.577350269190

    test 3118 30 30.125166807834 Phi(tan=0.580267, x=1.0, y=0.580267): 0.577350269190
    test 3119 30 30.041704779944 Beta(tan=0.578321, x=1.0, y=0.578321): 0.577350269190
    test 3120 30 29.958382432479 Theta(tan=0.576382, x=1.0, y=0.576382): 0.577350269190
    test 3121 30 30.000000000000 Mu(tan=0.57735, x=0.866025, y=0.5): 0.577350269190
    test 3122 30 29.958429134161 Chi(tan=0.576383, x=1.0, y=0.576383), iteration=2: 0.577350269190
    test 3123 30 30.013884093401 Xi(tan=0.577673, x=1.73958, y=1.00491), iteration=3: 0.577350269190

    test 3124 33 33.131998624604 Phi(tan=0.652688, x=0.837414, y=0.54657): 0.649407593198
    test 3125 33 33.043984552439 Beta(tan=0.6505, x=0.838252, y=0.545283): 0.649407593198
    test 3126 33 32.956090211155 Theta(tan=0.648319, x=0.839088, y=0.543996): 0.649407593198
    test 3127 33 33.000000000000 Mu(tan=0.649408, x=0.838671, y=0.544639): 0.649407593198
    test 3128 33 32.956148660801 Chi(tan=0.64832, x=0.839087, y=0.543997): 0.649407593198
    test 3129 33 33.014644058431 Xi(tan=0.649771, x=0.838531, y=0.544853): 0.649407593198

    test 3130 33 33.131998624604 Phi(tan=0.652688, x=1.0, y=0.652688): 0.649407593198
    test 3131 33 33.043984552439 Beta(tan=0.6505, x=1.0, y=0.6505): 0.649407593198
    test 3132 33 32.956090211155 Theta(tan=0.648319, x=1.0, y=0.648319): 0.649407593198
    test 3133 33 33.000000000000 Mu(tan=0.649408, x=0.838671, y=0.544639): 0.649407593198
    test 3134 33 32.956148660801 Chi(tan=0.64832, x=1.0, y=0.64832), iteration=3: 0.649407593198
    test 3135 33 33.014644058431 Xi(tan=0.649771, x=1.68459, y=1.0946), iteration=3: 0.649407593198

    test 3136 36 36.137379087822 Phi(tan=0.730212, x=0.807605, y=0.589723): 0.726542528005
    test 3137 36 36.045781194480 Beta(tan=0.727764, x=0.808547, y=0.588431): 0.726542528005
    test 3138 36 35.954277846185 Theta(tan=0.725324, x=0.809486, y=0.587139): 0.726542528005
    test 3139 36 36.000000000000 Mu(tan=0.726543, x=0.809017, y=0.587785): 0.726542528005
    test 3140 36 35.954348713981 Chi(tan=0.725326, x=0.809485, y=0.58714): 0.726542528005
    test 3141 36 36.015243313242 Xi(tan=0.726949, x=0.808861, y=0.588): 0.726542528005

    test 3142 36 36.137379087822 Phi(tan=0.730212, x=1.0, y=0.730212): 0.726542528005
    test 3143 36 36.045781194480 Beta(tan=0.727764, x=1.0, y=0.727764): 0.726542528005
    test 3144 36 35.954277846185 Theta(tan=0.725324, x=1.0, y=0.725324): 0.726542528005
    test 3145 36 36.000000000000 Mu(tan=0.726543, x=0.809017, y=0.587785): 0.726542528005
    test 3146 36 35.954348713981 Chi(tan=0.725326, x=1.0, y=0.725326), iteration=3: 0.726542528005
    test 3147 36 36.015243313242 Xi(tan=0.726949, x=1.62498, y=1.18128), iteration=2: 0.726542528005

    test 3148 39 39.141250337204 Phi(tan=0.813874, x=0.775592, y=0.631234): 0.809784033195
    test 3149 39 39.047075280541 Beta(tan=0.811145, x=0.776629, y=0.629959): 0.809784033195
    test 3150 39 38.952965451296 Theta(tan=0.808426, x=0.777662, y=0.628682): 0.809784033195
    test 3151 39 39.000000000000 Mu(tan=0.809784, x=0.777146, y=0.62932): 0.809784033195
    test 3152 39 38.953048996848 Chi(tan=0.808428, x=0.777661, y=0.628683): 0.809784033195
    test 3153 39 39.015675348459 Xi(tan=0.810237, x=0.776974, y=0.629533): 0.809784033195

    test 3154 39 39.141250337204 Phi(tan=0.813874, x=1.0, y=0.813874): 0.809784033195
    test 3155 39 39.047075280541 Beta(tan=0.811145, x=1.0, y=0.811145): 0.809784033195
    test 3156 39 38.952965451296 Theta(tan=0.808426, x=1.0, y=0.808426): 0.809784033195
    test 3157 39 39.000000000000 Mu(tan=0.809784, x=0.777146, y=0.62932): 0.809784033195
    test 3158 39 38.953048996848 Chi(tan=0.808428, x=1.0, y=0.808428), iteration=2: 0.809784033195
    test 3159 39 39.015675348459 Xi(tan=0.810237, x=1.56092, y=1.26472), iteration=2: 0.809784033195

    test 3160 42 42.143571223962 Phi(tan=0.904952, x=0.741466, y=0.670991): 0.900404044298
    test 3161 42 42.047852933259 Beta(tan=0.901917, x=0.742586, y=0.669751): 0.900404044298
    test 3162 42 41.952167704870 Theta(tan=0.898894, x=0.743703, y=0.66851): 0.900404044298
    test 3163 42 42.000000000000 Mu(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 3164 42 41.952263729127 Chi(tan=0.898897, x=0.743702, y=0.668511): 0.900404044298
    test 3165 42 42.015935495968 Xi(tan=0.900908, x=0.742959, y=0.669337): 0.900404044298

    test 3166 42 42.143571223962 Phi(tan=0.904952, x=1.0, y=0.904952): 0.900404044298
    test 3167 42 42.047852933259 Beta(tan=0.901917, x=1.0, y=0.901917): 0.900404044298
    test 3168 42 41.952167704870 Theta(tan=0.898894, x=1.0, y=0.898894): 0.900404044298
    test 3169 42 42.000000000000 Mu(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 3170 42 41.952263729127 Chi(tan=0.898897, x=1.0, y=0.898897), iteration=3: 0.900404044298
    test 3171 42 42.015935495968 Xi(tan=0.900908, x=1.49259, y=1.34469), iteration=3: 0.900404044298

    test 3172 45 45.144317705888 Phi(tan=1.00505, x=0.705323, y=0.708886): 1.000000000000
    test 3173 45 45.048105962250 Beta(tan=1.00168, x=0.706513, y=0.7077): 1.000000000000
    test 3174 45 44.951893676022 Theta(tan=0.998322, x=0.7077, y=0.706513): 1.000000000000
    test 3175 45 45.000000000000 Mu(tan=1.0, x=0.707107, y=0.707107): 1.000000000000
    test 3176 45 44.952001492225 Chi(tan=0.998326, x=0.707699, y=0.706514): 1.000000000000
    test 3177 45 45.016020977194 Xi(tan=1.00056, x=0.706909, y=0.707304): 1.000000000000

    test 3178 45 45.144317705888 Phi(tan=1.00505, x=1.0, y=1.00505): 1.000000000000
    test 3179 45 45.048105962250 Beta(tan=1.00168, x=1.0, y=1.00168): 1.000000000000
    test 3180 45 44.951893676022 Theta(tan=0.998322, x=1.0, y=0.998322): 1.000000000000
    test 3181 45 45.000000000000 Mu(tan=1.0, x=0.707107, y=0.707107): 1.000000000000
    test 3182 45 44.952001492225 Chi(tan=0.998326, x=1.0, y=0.998326), iteration=3: 1.000000000000
    test 3183 45 45.016020977194 Xi(tan=1.00056, x=1.42017, y=1.42096), iteration=2: 1.000000000000

    test 3184 48 48.143483049923 Phi(tan=1.11622, x=0.667267, y=0.744818): 1.110612514829
    test 3185 48 48.047831939377 Beta(tan=1.11248, x=0.66851, y=0.743703): 1.110612514829
    test 3186 48 47.952146710863 Theta(tan=1.10875, x=0.669751, y=0.742586): 1.110612514829
    test 3187 48 48.000000000000 Mu(tan=1.11061, x=0.669131, y=0.743145): 1.110612514829
    test 3188 48 47.952265136186 Chi(tan=1.10875, x=0.66975, y=0.742587): 1.110612514829
    test 3189 48 48.015930930399 Xi(tan=1.11123, x=0.668924, y=0.743331): 1.110612514829

    test 3190 48 48.143483049923 Phi(tan=1.11622, x=1.0, y=1.11622): 1.110612514829
    test 3191 48 48.047831939377 Beta(tan=1.11248, x=1.0, y=1.11248): 1.110612514829
    test 3192 48 47.952146710863 Theta(tan=1.10875, x=1.0, y=1.10875): 1.110612514829
    test 3193 48 48.000000000000 Mu(tan=1.11061, x=0.669131, y=0.743145): 1.110612514829
    test 3194 48 47.952265136186 Chi(tan=1.10875, x=1.0, y=1.10875), iteration=2: 1.110612514829
    test 3195 48 48.015930930399 Xi(tan=1.11123, x=1.34385, y=1.49334), iteration=3: 1.110612514829

    test 3196 51 51.141077842654 Phi(tan=1.24113, x=0.627405, y=0.778693): 1.234897156535
    test 3197 51 51.047034210293 Beta(tan=1.23697, x=0.628682, y=0.777662): 1.234897156535
    test 3198 51 50.952924380812 Theta(tan=1.23282, x=0.629959, y=0.776629): 1.234897156535
    test 3199 51 51.000000000000 Mu(tan=1.2349, x=0.62932, y=0.777146): 1.234897156535
    test 3200 51 50.953051749472 Chi(tan=1.23283, x=0.629957, y=0.77663): 1.234897156535
    test 3201 51 51.015666416855 Xi(tan=1.23559, x=0.629108, y=0.777318): 1.234897156535

    test 3202 51 51.141077842654 Phi(tan=1.24113, x=1.0, y=1.24113): 1.234897156535
    test 3203 51 51.047034210293 Beta(tan=1.23697, x=1.0, y=1.23697): 1.234897156535
    test 3204 51 50.952924380812 Theta(tan=1.23282, x=1.0, y=1.23282): 1.234897156535
    test 3205 51 51.000000000000 Mu(tan=1.2349, x=0.62932, y=0.777146): 1.234897156535
    test 3206 51 50.953051749472 Chi(tan=1.23283, x=1.0, y=1.23283), iteration=3: 1.234897156535
    test 3207 51 51.015666416855 Xi(tan=1.23559, x=1.26387, y=1.56162), iteration=2: 1.234897156535

    test 3208 54 54.137129811411 Phi(tan=1.38333, x=0.585847, y=0.810421): 1.376381920471
    test 3209 54 54.045721842803 Beta(tan=1.37869, x=0.587139, y=0.809486): 1.376381920471
    test 3210 54 53.954218494185 Theta(tan=1.37407, x=0.588431, y=0.808547): 1.376381920471
    test 3211 54 54.000000000000 Mu(tan=1.37638, x=0.587785, y=0.809017): 1.376381920471
    test 3212 54 53.954352691870 Chi(tan=1.37408, x=0.58843, y=0.808548): 1.376381920471
    test 3213 54 54.015230405953 Xi(tan=1.37715, x=0.58757, y=0.809173): 1.376381920471

    test 3214 54 54.137129811411 Phi(tan=1.38333, x=1.0, y=1.38333): 1.376381920471
    test 3215 54 54.045721842803 Beta(tan=1.37869, x=1.0, y=1.37869): 1.376381920471
    test 3216 54 53.954218494185 Theta(tan=1.37407, x=1.0, y=1.37407): 1.376381920471
    test 3217 54 54.000000000000 Mu(tan=1.37638, x=0.587785, y=0.809017): 1.376381920471
    test 3218 54 53.954352691870 Chi(tan=1.37408, x=1.0, y=1.37408), iteration=3: 1.376381920471
    test 3219 54 54.015230405953 Xi(tan=1.37715, x=1.18042, y=1.62561), iteration=3: 1.376381920471

    test 3220 57 57.131683460668 Phi(tan=1.54764, x=0.54271, y=0.83992): 1.539864963815
    test 3221 57 57.043909513246 Beta(tan=1.54245, x=0.543996, y=0.839088): 1.539864963815
    test 3222 57 56.956015171586 Theta(tan=1.53728, x=0.545283, y=0.838252): 1.539864963815
    test 3223 57 57.000000000000 Mu(tan=1.53986, x=0.544639, y=0.838671): 1.539864963815
    test 3224 57 56.956153690104 Chi(tan=1.53729, x=0.545281, y=0.838254): 1.539864963815
    test 3225 57 57.014627739563 Xi(tan=1.54073, x=0.544425, y=0.83881): 1.539864963815

    test 3226 57 57.131683460668 Phi(tan=1.54764, x=1.0, y=1.54764): 1.539864963815
    test 3227 57 57.043909513246 Beta(tan=1.54245, x=1.0, y=1.54245): 1.539864963815
    test 3228 57 56.956015171586 Theta(tan=1.53728, x=1.0, y=1.53728): 1.539864963815
    test 3229 57 57.000000000000 Mu(tan=1.53986, x=0.544639, y=0.838671): 1.539864963815
    test 3230 57 56.956153690104 Chi(tan=1.53729, x=1.0, y=1.53729), iteration=3: 1.539864963815
    test 3231 57 57.014627739563 Xi(tan=1.54073, x=1.09374, y=1.68515), iteration=2: 1.539864963815

    test 3232 60 60.124799530298 Phi(tan=1.7408, x=0.498112, y=0.867112): 1.732050807569
    test 3233 60 60.041617332767 Beta(tan=1.73496, x=0.499371, y=0.866388): 1.732050807569
    test 3234 60 59.958294984908 Theta(tan=1.72914, x=0.50063, y=0.865661): 1.732050807569
    test 3235 60 60.000000000000 Mu(tan=1.73205, x=0.5, y=0.866025): 1.732050807569
    test 3236 60 59.958434995078 Chi(tan=1.72915, x=0.500628, y=0.865662): 1.732050807569
    test 3237 60 60.013865076162 Xi(tan=1.73302, x=0.49979, y=0.866146): 1.732050807569

    test 3238 60 60.124799530298 Phi(tan=1.7408, x=1.0, y=1.7408): 1.732050807569
    test 3239 60 60.041617332767 Beta(tan=1.73496, x=1.0, y=1.73496): 1.732050807569
    test 3240 60 59.958294984908 Theta(tan=1.72914, x=1.0, y=1.72914): 1.732050807569
    test 3241 60 60.000000000000 Mu(tan=1.73205, x=0.5, y=0.866025): 1.732050807569
    test 3242 60 59.958434995078 Chi(tan=1.72915, x=1.0, y=1.72915), iteration=3: 1.732050807569
    test 3243 60 60.013865076162 Xi(tan=1.73302, x=1.00407, y=1.74007), iteration=3: 1.732050807569

    test 3244 63 63.116554283961 Phi(tan=1.97252, x=0.452177, y=0.891928): 1.962610505505
    test 3245 63 63.038870615950 Beta(tan=1.96591, x=0.453386, y=0.891314): 1.962610505505
    test 3246 63 62.961033158986 Theta(tan=1.95932, x=0.454596, y=0.890698): 1.962610505505
    test 3247 63 63.000000000000 Mu(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 3248 63 62.961171598977 Chi(tan=1.95933, x=0.454594, y=0.890699): 1.962610505505
    test 3249 63 63.012950815476 Xi(tan=1.96371, x=0.453789, y=0.891109): 1.962610505505

    test 3250 63 63.116554283961 Phi(tan=1.97252, x=1.0, y=1.97252): 1.962610505505
    test 3251 63 63.038870615950 Beta(tan=1.96591, x=1.0, y=1.96591): 1.962610505505
    test 3252 63 62.961033158986 Theta(tan=1.95932, x=1.0, y=1.95932): 1.962610505505
    test 3253 63 63.000000000000 Mu(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 3254 63 62.961171598977 Chi(tan=1.95933, x=1.0, y=1.95933), iteration=3: 1.962610505505
    test 3255 63 63.012950815476 Xi(tan=1.96371, x=0.911653, y=1.79022), iteration=2: 1.962610505505

    test 3256 66 66.107038637362 Phi(tan=2.25738, x=0.405029, y=0.914304): 2.246036773904
    test 3257 66 66.035699594795 Beta(tan=2.24981, x=0.406167, y=0.913799): 2.246036773904
    test 3258 66 65.964199834179 Theta(tan=2.24227, x=0.407307, y=0.913291): 2.246036773904
    test 3259 66 66.000000000000 Mu(tan=2.24604, x=0.406737, y=0.913545): 2.246036773904
    test 3260 66 65.964333509830 Chi(tan=2.24228, x=0.407305, y=0.913292): 2.246036773904
    test 3261 66 66.011895004556 Xi(tan=2.24729, x=0.406547, y=0.91363): 2.246036773904

    test 3262 66 66.107038637362 Phi(tan=2.25738, x=1.0, y=2.25738): 2.246036773904
    test 3263 66 66.035699594795 Beta(tan=2.24981, x=1.0, y=2.24981): 2.246036773904
    test 3264 66 65.964199834179 Theta(tan=2.24227, x=1.0, y=2.24227): 2.246036773904
    test 3265 66 66.000000000000 Mu(tan=2.24604, x=0.406737, y=0.913545): 2.246036773904
    test 3266 66 65.964333509830 Chi(tan=2.24228, x=1.0, y=2.24228), iteration=3: 2.246036773904
    test 3267 66 66.011895004556 Xi(tan=2.24729, x=0.816745, y=1.83546), iteration=3: 2.246036773904

    test 3268 69 69.096357137472 Phi(tan=2.61824, x=0.356797, y=0.934182): 2.605089064694
    test 3269 69 69.032139081563 Beta(tan=2.60946, x=0.357844, y=0.933781): 2.605089064694
    test 3270 69 68.967760387396 Theta(tan=2.60071, x=0.358893, y=0.933379): 2.605089064694
    test 3271 69 69.000000000000 Mu(tan=2.60509, x=0.358368, y=0.93358): 2.605089064694
    test 3272 69 68.967886080496 Chi(tan=2.60073, x=0.358891, y=0.933379): 2.605089064694
    test 3273 69 69.010709226392 Xi(tan=2.60655, x=0.358193, y=0.933647): 2.605089064694

    test 3274 69 69.096357137472 Phi(tan=2.61824, x=1.0, y=2.61824): 2.605089064694
    test 3275 69 69.032139081563 Beta(tan=2.60946, x=1.0, y=2.60946): 2.605089064694
    test 3276 69 68.967760387396 Theta(tan=2.60071, x=1.0, y=2.60071): 2.605089064694
    test 3277 69 69.000000000000 Mu(tan=2.60509, x=0.358368, y=0.93358): 2.605089064694
    test 3278 69 68.967886080496 Chi(tan=2.60073, x=1.0, y=2.60073), iteration=3: 2.605089064694
    test 3279 69 69.010709226392 Xi(tan=2.60655, x=0.719603, y=1.87568), iteration=3: 2.605089064694

    test 3280 72 72.084626804899 Phi(tan=3.09322, x=0.307612, y=0.951512): 3.077683537175
    test 3281 72 72.028228084417 Beta(tan=3.08285, x=0.308548, y=0.951209): 3.077683537175
    test 3282 72 71.971675808314 Theta(tan=3.07251, x=0.309487, y=0.950904): 3.077683537175
    test 3283 72 72.000000000000 Mu(tan=3.07768, x=0.309017, y=0.951057): 3.077683537175
    test 3284 72 71.971790388449 Chi(tan=3.07254, x=0.309485, y=0.950904): 3.077683537175
    test 3285 72 72.009406472364 Xi(tan=3.0794, x=0.308861, y=0.951107): 3.077683537175

    test 3286 72 72.084626804899 Phi(tan=3.09322, x=1.0, y=3.09322): 3.077683537175
    test 3287 72 72.028228084417 Beta(tan=3.08285, x=1.0, y=3.08285): 3.077683537175
    test 3288 72 71.971675808314 Theta(tan=3.07251, x=1.0, y=3.07251): 3.077683537175
    test 3289 72 72.000000000000 Mu(tan=3.07768, x=0.309017, y=0.951057): 3.077683537175
    test 3290 72 71.971790388449 Chi(tan=3.07254, x=1.0, y=3.07254), iteration=3: 3.077683537175
    test 3291 72 72.009406472364 Xi(tan=3.0794, x=0.620495, y=1.91076), iteration=3: 3.077683537175

    test 3292 75 75.071975852574 Phi(tan=3.75089, x=0.257605, y=0.96625): 3.732050807569
    test 3293 75 75.024009380191 Beta(tan=3.73832, x=0.258414, y=0.966034): 3.732050807569
    test 3294 75 74.975903126796 Theta(tan=3.72578, x=0.259225, y=0.965817): 3.732050807569
    test 3295 75 75.000000000000 Mu(tan=3.73205, x=0.258819, y=0.965926): 3.732050807569
    test 3296 75 74.976003662210 Chi(tan=3.72581, x=0.259224, y=0.965817): 3.732050807569
    test 3297 75 75.008000999926 Xi(tan=3.73414, x=0.258684, y=0.965962): 3.732050807569

    test 3298 75 75.071975852574 Phi(tan=3.75089, x=1.0, y=3.75089): 3.732050807569
    test 3299 75 75.024009380191 Beta(tan=3.73832, x=1.0, y=3.73832): 3.732050807569
    test 3300 75 74.975903126796 Theta(tan=3.72578, x=1.0, y=3.72578): 3.732050807569
    test 3301 75 75.000000000000 Mu(tan=3.73205, x=0.258819, y=0.965926): 3.732050807569
    test 3302 75 74.976003662210 Chi(tan=3.72581, x=1.0, y=3.72581), iteration=3: 3.732050807569
    test 3303 75 75.008000999926 Xi(tan=3.73414, x=0.519691, y=1.9406), iteration=3: 3.732050807569

    test 3304 78 78.058542294726 Phi(tan=4.72838, x=0.206912, y=0.97836): 4.704630109478
    test 3305 78 78.019529048960 Beta(tan=4.71253, x=0.207578, y=0.978218): 4.704630109478
    test 3306 78 77.980395886834 Theta(tan=4.69673, x=0.208246, y=0.978076): 4.704630109478
    test 3307 78 78.000000000000 Mu(tan=4.70463, x=0.207912, y=0.978148): 4.704630109478
    test 3308 78 77.980479749733 Chi(tan=4.69676, x=0.208245, y=0.978077): 4.704630109478
    test 3309 78 78.006508177097 Xi(tan=4.70726, x=0.207801, y=0.978171): 4.704630109478

    test 3310 78 78.058542294726 Phi(tan=4.72838, x=1.0, y=4.72838): 4.704630109478
    test 3311 78 78.019529048960 Beta(tan=4.71253, x=1.0, y=4.71253): 4.704630109478
    test 3312 78 77.980395886834 Theta(tan=4.69673, x=1.0, y=4.69673): 4.704630109478
    test 3313 78 78.000000000000 Mu(tan=4.70463, x=0.207912, y=0.978148): 4.704630109478
    test 3314 78 77.980479749733 Chi(tan=4.69676, x=1.0, y=4.69676), iteration=2: 4.704630109478
    test 3315 78 78.006508177097 Xi(tan=4.70726, x=0.417467, y=1.96513), iteration=2: 4.704630109478

    test 3316 81 81.044472460742 Phi(tan=6.34563, x=0.155668, y=0.987809): 6.313751514675
    test 3317 81 81.014835975351 Beta(tan=6.32435, x=0.156179, y=0.987729): 6.313751514675
    test 3318 81 80.985104661672 Theta(tan=6.30315, x=0.156691, y=0.987648): 6.313751514675
    test 3319 81 81.000000000000 Mu(tan=6.31375, x=0.156434, y=0.987688): 6.313751514675
    test 3320 81 80.985169623641 Chi(tan=6.30319, x=0.15669, y=0.987648): 6.313751514675
    test 3321 81 81.004944315431 Xi(tan=6.31728, x=0.156349, y=0.987702): 6.313751514675

    test 3322 81 81.044472460742 Phi(tan=6.34563, x=1.0, y=6.34563): 6.313751514675
    test 3323 81 81.014835975351 Beta(tan=6.32435, x=1.0, y=6.32435): 6.313751514675
    test 3324 81 80.985104661672 Theta(tan=6.30315, x=1.0, y=6.30315): 6.313751514675
    test 3325 81 81.000000000000 Mu(tan=6.31375, x=0.156434, y=0.987688): 6.313751514675
    test 3326 81 80.985169623641 Chi(tan=6.30319, x=1.0, y=6.30319), iteration=3: 6.313751514675
    test 3327 81 81.004944315431 Xi(tan=6.31728, x=0.314102, y=1.98427), iteration=3: 6.313751514675

    test 3328 84 84.029919429066 Phi(tan=9.5624, x=0.104009, y=0.994576): 9.514364454223
    test 3329 84 84.009981321799 Beta(tan=9.53033, x=0.104355, y=0.99454): 9.514364454223
    test 3330 84 83.989977604221 Theta(tan=9.49838, x=0.104702, y=0.994504): 9.514364454223
    test 3331 84 84.000000000000 Mu(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 3332 84 83.990021917793 Chi(tan=9.49845, x=0.104702, y=0.994504): 9.514364454223
    test 3333 84 84.003326493225 Xi(tan=9.51968, x=0.104471, y=0.994528): 9.514364454223

    test 3334 84 84.029919429066 Phi(tan=9.5624, x=1.0, y=9.5624): 9.514364454223
    test 3335 84 84.009981321799 Beta(tan=9.53033, x=1.0, y=9.53033): 9.514364454223
    test 3336 84 83.989977604221 Theta(tan=9.49838, x=1.0, y=9.49838): 9.514364454223
    test 3337 84 84.000000000000 Mu(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 3338 84 83.990021917793 Chi(tan=9.49845, x=1.0, y=9.49845), iteration=3: 9.514364454223
    test 3339 84 84.003326493225 Xi(tan=9.51968, x=0.20988, y=1.99799), iteration=2: 9.514364454223

    test 3340 87 87.015041396677 Phi(tan=19.1775, x=0.0520738, y=0.998643): 19.081136687728
    test 3341 87 87.005017979129 Beta(tan=19.1132, x=0.0522485, y=0.998634): 19.081136687728
    test 3342 87 86.994961026315 Theta(tan=19.0491, x=0.0524238, y=0.998625): 19.081136687728
    test 3343 87 87.000000000000 Mu(tan=19.0811, x=0.052336, y=0.99863): 19.081136687728
    test 3344 87 86.994983489318 Chi(tan=19.0492, x=0.0524234, y=0.998625): 19.081136687728
    test 3345 87 87.001672370834 Xi(tan=19.0918, x=0.0523068, y=0.998631): 19.081136687728

    test 3346 87 87.015041396677 Phi(tan=19.1775, x=1.0, y=19.1775): 19.081136687728
    test 3347 87 87.005017979129 Beta(tan=19.1132, x=1.0, y=19.1132): 19.081136687728
    test 3348 87 86.994961026315 Theta(tan=19.0491, x=1.0, y=19.0491): 19.081136687728
    test 3349 87 87.000000000000 Mu(tan=19.0811, x=0.052336, y=0.99863): 19.081136687728
    test 3350 87 86.994983489318 Chi(tan=19.0492, x=1.0, y=19.0492), iteration=3: 19.081136687728
    test 3351 87 87.001672370834 Xi(tan=19.0918, x=0.105083, y=2.00623), iteration=3: 19.081136687728

    test 3352 90 90.000000000000 Phi(tan=inf, x=0.0, y=1.0): inf
    test 3353 90 90.000000000000 Beta(tan=inf, x=0.0, y=1.0): inf
    test 3354 90 90.000000000000 Theta(tan=inf, x=0.0, y=1.0): inf
    test 3355 90 90.000000000000 Mu(tan=inf, x=0.0, y=1.0): inf
    test 3356 90 90.000000000000 Chi(tan=inf, x=0.0, y=1.0): inf
    test 3357 90 90.000000000000 Xi(tan=inf, x=0.0, y=1.0): inf

    test 3358 90 90.000000000000 Phi(tan=inf, x=0.0, y=1.0): inf
    test 3359 90 90.000000000000 Beta(tan=inf, x=0.0, y=1.0): inf
    test 3360 90 90.000000000000 Theta(tan=inf, x=0.0, y=1.0): inf
    test 3361 90 90.000000000000 Mu(tan=inf, x=0.0, y=1.0): inf
    test 3362 90 90.000000000000 Chi(tan=inf, x=0.0, y=1.0): inf
    test 3363 90 90.000000000000 Xi(tan=inf, x=0.0, y=1.0): inf

    test 3364 93 92.984958603323 Phi(tan=-19.1775, x=-0.0520738, y=0.998643): -19.081136687728
    test 3365 93 92.994982020871 Beta(tan=-19.1132, x=-0.0522485, y=0.998634): -19.081136687728
    test 3366 93 93.005038973685 Theta(tan=-19.0491, x=-0.0524238, y=0.998625): -19.081136687728
    test 3367 93 93.000000000000 Mu(tan=-19.0811, x=-0.052336, y=0.99863): -19.081136687728
    test 3368 93 93.005016510682 Chi(tan=-19.0492, x=-0.0524234, y=0.998625): -19.081136687728
    test 3369 93 92.998327629166 Xi(tan=-19.0918, x=-0.0523068, y=0.998631): -19.081136687728

    test 3370 93 92.984958603323 Phi(tan=-19.1775, x=-1, y=19.1775): -19.081136687728
    test 3371 93 92.994982020871 Beta(tan=-19.1132, x=-1, y=19.1132): -19.081136687728
    test 3372 93 93.005038973685 Theta(tan=-19.0491, x=-1, y=19.0491): -19.081136687728
    test 3373 93 93.000000000000 Mu(tan=-19.0811, x=-0.052336, y=0.99863): -19.081136687728
    test 3374 93 93.005016510682 Chi(tan=-19.0492, x=-1, y=19.0492), iteration=3: -19.081136687728
    test 3375 93 92.998327629166 Xi(tan=-19.0918, x=-0.105083, y=2.00623), iteration=3: -19.081136687728

    test 3376 96 95.970080570934 Phi(tan=-9.5624, x=-0.104009, y=0.994576): -9.514364454223
    test 3377 96 95.990018678201 Beta(tan=-9.53033, x=-0.104355, y=0.99454): -9.514364454223
    test 3378 96 96.010022395779 Theta(tan=-9.49838, x=-0.104702, y=0.994504): -9.514364454223
    test 3379 96 96.000000000000 Mu(tan=-9.51436, x=-0.104528, y=0.994522): -9.514364454223
    test 3380 96 96.009978082207 Chi(tan=-9.49845, x=-0.104702, y=0.994504): -9.514364454223
    test 3381 96 95.996673506775 Xi(tan=-9.51968, x=-0.104471, y=0.994528): -9.514364454223

    test 3382 96 95.970080570934 Phi(tan=-9.5624, x=-1, y=9.5624): -9.514364454223
    test 3383 96 95.990018678201 Beta(tan=-9.53033, x=-1, y=9.53033): -9.514364454223
    test 3384 96 96.010022395779 Theta(tan=-9.49838, x=-1, y=9.49838): -9.514364454223
    test 3385 96 96.000000000000 Mu(tan=-9.51436, x=-0.104528, y=0.994522): -9.514364454223
    test 3386 96 96.009978082207 Chi(tan=-9.49845, x=-1, y=9.49845), iteration=3: -9.514364454223
    test 3387 96 95.996673506775 Xi(tan=-9.51968, x=-0.20988, y=1.99799), iteration=2: -9.514364454223

    test 3388 99 98.955527539258 Phi(tan=-6.34563, x=-0.155668, y=0.987809): -6.313751514675
    test 3389 99 98.985164024649 Beta(tan=-6.32435, x=-0.156179, y=0.987729): -6.313751514675
    test 3390 99 99.014895338328 Theta(tan=-6.30315, x=-0.156691, y=0.987648): -6.313751514675
    test 3391 99 99.000000000000 Mu(tan=-6.31375, x=-0.156434, y=0.987688): -6.313751514675
    test 3392 99 99.014830376359 Chi(tan=-6.30319, x=-0.15669, y=0.987648): -6.313751514675
    test 3393 99 98.995055684569 Xi(tan=-6.31728, x=-0.156349, y=0.987702): -6.313751514675

    test 3394 99 98.955527539258 Phi(tan=-6.34563, x=-1, y=6.34563): -6.313751514675
    test 3395 99 98.985164024649 Beta(tan=-6.32435, x=-1, y=6.32435): -6.313751514675
    test 3396 99 99.014895338328 Theta(tan=-6.30315, x=-1, y=6.30315): -6.313751514675
    test 3397 99 99.000000000000 Mu(tan=-6.31375, x=-0.156434, y=0.987688): -6.313751514675
    test 3398 99 99.014830376359 Chi(tan=-6.30319, x=-1, y=6.30319), iteration=3: -6.313751514675
    test 3399 99 98.995055684569 Xi(tan=-6.31728, x=-0.314102, y=1.98427), iteration=3: -6.313751514675

    test 3400 102 101.941457705274 Phi(tan=-4.72838, x=-0.206912, y=0.97836): -4.704630109478
    test 3401 102 101.980470951040 Beta(tan=-4.71253, x=-0.207578, y=0.978218): -4.704630109478
    test 3402 102 102.019604113166 Theta(tan=-4.69673, x=-0.208246, y=0.978076): -4.704630109478
    test 3403 102 102.000000000000 Mu(tan=-4.70463, x=-0.207912, y=0.978148): -4.704630109478
    test 3404 102 102.019520250267 Chi(tan=-4.69676, x=-0.208245, y=0.978077): -4.704630109478
    test 3405 102 101.993491822903 Xi(tan=-4.70726, x=-0.207801, y=0.978171): -4.704630109478

    test 3406 102 101.941457705274 Phi(tan=-4.72838, x=-1, y=4.72838): -4.704630109478
    test 3407 102 101.980470951040 Beta(tan=-4.71253, x=-1, y=4.71253): -4.704630109478
    test 3408 102 102.019604113166 Theta(tan=-4.69673, x=-1, y=4.69673): -4.704630109478
    test 3409 102 102.000000000000 Mu(tan=-4.70463, x=-0.207912, y=0.978148): -4.704630109478
    test 3410 102 102.019520250267 Chi(tan=-4.69676, x=-1, y=4.69676), iteration=2: -4.704630109478
    test 3411 102 101.993491822903 Xi(tan=-4.70726, x=-0.417467, y=1.96513), iteration=2: -4.704630109478

    test 3412 105 104.928024147426 Phi(tan=-3.75089, x=-0.257605, y=0.96625): -3.732050807569
    test 3413 105 104.975990619809 Beta(tan=-3.73832, x=-0.258414, y=0.966034): -3.732050807569
    test 3414 105 105.024096873204 Theta(tan=-3.72578, x=-0.259225, y=0.965817): -3.732050807569
    test 3415 105 105.000000000000 Mu(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 3416 105 105.023996337790 Chi(tan=-3.72581, x=-0.259224, y=0.965817): -3.732050807569
    test 3417 105 104.991999000074 Xi(tan=-3.73414, x=-0.258684, y=0.965962): -3.732050807569

    test 3418 105 104.928024147426 Phi(tan=-3.75089, x=-1, y=3.75089): -3.732050807569
    test 3419 105 104.975990619809 Beta(tan=-3.73832, x=-1, y=3.73832): -3.732050807569
    test 3420 105 105.024096873204 Theta(tan=-3.72578, x=-1, y=3.72578): -3.732050807569
    test 3421 105 105.000000000000 Mu(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 3422 105 105.023996337790 Chi(tan=-3.72581, x=-1, y=3.72581), iteration=3: -3.732050807569
    test 3423 105 104.991999000074 Xi(tan=-3.73414, x=-0.519691, y=1.9406), iteration=3: -3.732050807569

    test 3424 108 107.915373195101 Phi(tan=-3.09322, x=-0.307612, y=0.951512): -3.077683537175
    test 3425 108 107.971771915583 Beta(tan=-3.08285, x=-0.308548, y=0.951209): -3.077683537175
    test 3426 108 108.028324191686 Theta(tan=-3.07251, x=-0.309487, y=0.950904): -3.077683537175
    test 3427 108 108.000000000000 Mu(tan=-3.07768, x=-0.309017, y=0.951057): -3.077683537175
    test 3428 108 108.028209611551 Chi(tan=-3.07254, x=-0.309485, y=0.950904): -3.077683537175
    test 3429 108 107.990593527636 Xi(tan=-3.0794, x=-0.308861, y=0.951107): -3.077683537175

    test 3430 108 107.915373195101 Phi(tan=-3.09322, x=-1, y=3.09322): -3.077683537175
    test 3431 108 107.971771915583 Beta(tan=-3.08285, x=-1, y=3.08285): -3.077683537175
    test 3432 108 108.028324191686 Theta(tan=-3.07251, x=-1, y=3.07251): -3.077683537175
    test 3433 108 108.000000000000 Mu(tan=-3.07768, x=-0.309017, y=0.951057): -3.077683537175
    test 3434 108 108.028209611551 Chi(tan=-3.07254, x=-1, y=3.07254), iteration=3: -3.077683537175
    test 3435 108 107.990593527636 Xi(tan=-3.0794, x=-0.620495, y=1.91076), iteration=3: -3.077683537175

    test 3436 111 110.903642862528 Phi(tan=-2.61824, x=-0.356797, y=0.934182): -2.605089064694
    test 3437 111 110.967860918437 Beta(tan=-2.60946, x=-0.357844, y=0.933781): -2.605089064694
    test 3438 111 111.032239612604 Theta(tan=-2.60071, x=-0.358893, y=0.933379): -2.605089064694
    test 3439 111 111.000000000000 Mu(tan=-2.60509, x=-0.358368, y=0.93358): -2.605089064694
    test 3440 111 111.032113919504 Chi(tan=-2.60073, x=-0.358891, y=0.933379): -2.605089064694
    test 3441 111 110.989290773608 Xi(tan=-2.60655, x=-0.358193, y=0.933647): -2.605089064694

    test 3442 111 110.903642862528 Phi(tan=-2.61824, x=-1, y=2.61824): -2.605089064694
    test 3443 111 110.967860918437 Beta(tan=-2.60946, x=-1, y=2.60946): -2.605089064694
    test 3444 111 111.032239612604 Theta(tan=-2.60071, x=-1, y=2.60071): -2.605089064694
    test 3445 111 111.000000000000 Mu(tan=-2.60509, x=-0.358368, y=0.93358): -2.605089064694
    test 3446 111 111.032113919504 Chi(tan=-2.60073, x=-1, y=2.60073), iteration=3: -2.605089064694
    test 3447 111 110.989290773608 Xi(tan=-2.60655, x=-0.719603, y=1.87568), iteration=2: -2.605089064694

    test 3448 114 113.892961362638 Phi(tan=-2.25738, x=-0.405029, y=0.914304): -2.246036773904
    test 3449 114 113.964300405205 Beta(tan=-2.24981, x=-0.406167, y=0.913799): -2.246036773904
    test 3450 114 114.035800165821 Theta(tan=-2.24227, x=-0.407307, y=0.913291): -2.246036773904
    test 3451 114 114.000000000000 Mu(tan=-2.24604, x=-0.406737, y=0.913545): -2.246036773904
    test 3452 114 114.035666490170 Chi(tan=-2.24228, x=-0.407305, y=0.913292): -2.246036773904
    test 3453 114 113.988104995444 Xi(tan=-2.24729, x=-0.406547, y=0.91363): -2.246036773904

    test 3454 114 113.892961362638 Phi(tan=-2.25738, x=-1, y=2.25738): -2.246036773904
    test 3455 114 113.964300405205 Beta(tan=-2.24981, x=-1, y=2.24981): -2.246036773904
    test 3456 114 114.035800165821 Theta(tan=-2.24227, x=-1, y=2.24227): -2.246036773904
    test 3457 114 114.000000000000 Mu(tan=-2.24604, x=-0.406737, y=0.913545): -2.246036773904
    test 3458 114 114.035666490170 Chi(tan=-2.24228, x=-1, y=2.24228), iteration=3: -2.246036773904
    test 3459 114 113.988104995444 Xi(tan=-2.24729, x=-0.816745, y=1.83546), iteration=3: -2.246036773904

    test 3460 117 116.883445716039 Phi(tan=-1.97252, x=-0.452177, y=0.891928): -1.962610505505
    test 3461 117 116.961129384050 Beta(tan=-1.96591, x=-0.453386, y=0.891314): -1.962610505505
    test 3462 117 117.038966841014 Theta(tan=-1.95932, x=-0.454596, y=0.890698): -1.962610505505
    test 3463 117 117.000000000000 Mu(tan=-1.96261, x=-0.45399, y=0.891007): -1.962610505505
    test 3464 117 117.038828401023 Chi(tan=-1.95933, x=-0.454594, y=0.890699): -1.962610505505
    test 3465 117 116.987049184524 Xi(tan=-1.96371, x=-0.453789, y=0.891109): -1.962610505505

    test 3466 117 116.883445716039 Phi(tan=-1.97252, x=-1, y=1.97252): -1.962610505505
    test 3467 117 116.961129384050 Beta(tan=-1.96591, x=-1, y=1.96591): -1.962610505505
    test 3468 117 117.038966841014 Theta(tan=-1.95932, x=-1, y=1.95932): -1.962610505505
    test 3469 117 117.000000000000 Mu(tan=-1.96261, x=-0.45399, y=0.891007): -1.962610505505
    test 3470 117 117.038828401023 Chi(tan=-1.95933, x=-1, y=1.95933), iteration=3: -1.962610505505
    test 3471 117 116.987049184524 Xi(tan=-1.96371, x=-0.911653, y=1.79022), iteration=3: -1.962610505505

    test 3472 120 119.875200469702 Phi(tan=-1.7408, x=-0.498112, y=0.867112): -1.732050807569
    test 3473 120 119.958382667233 Beta(tan=-1.73496, x=-0.499371, y=0.866388): -1.732050807569
    test 3474 120 120.041705015092 Theta(tan=-1.72914, x=-0.50063, y=0.865661): -1.732050807569
    test 3475 120 120.000000000000 Mu(tan=-1.73205, x=-0.5, y=0.866025): -1.732050807569
    test 3476 120 120.041565004922 Chi(tan=-1.72915, x=-0.500628, y=0.865662): -1.732050807569
    test 3477 120 119.986134923838 Xi(tan=-1.73302, x=-0.49979, y=0.866146): -1.732050807569

    test 3478 120 119.875200469702 Phi(tan=-1.7408, x=-1, y=1.7408): -1.732050807569
    test 3479 120 119.958382667233 Beta(tan=-1.73496, x=-1, y=1.73496): -1.732050807569
    test 3480 120 120.041705015092 Theta(tan=-1.72914, x=-1, y=1.72914): -1.732050807569
    test 3481 120 120.000000000000 Mu(tan=-1.73205, x=-0.5, y=0.866025): -1.732050807569
    test 3482 120 120.041565004922 Chi(tan=-1.72915, x=-1, y=1.72915), iteration=3: -1.732050807569
    test 3483 120 119.986134923838 Xi(tan=-1.73302, x=-1.00407, y=1.74007), iteration=2: -1.732050807569

    test 3484 123 122.868316539332 Phi(tan=-1.54764, x=-0.54271, y=0.83992): -1.539864963815
    test 3485 123 122.956090486754 Beta(tan=-1.54245, x=-0.543996, y=0.839088): -1.539864963815
    test 3486 123 123.043984828414 Theta(tan=-1.53728, x=-0.545283, y=0.838252): -1.539864963815
    test 3487 123 123.000000000000 Mu(tan=-1.53986, x=-0.544639, y=0.838671): -1.539864963815
    test 3488 123 123.043846309896 Chi(tan=-1.53729, x=-0.545281, y=0.838254): -1.539864963815
    test 3489 123 122.985372260437 Xi(tan=-1.54073, x=-0.544425, y=0.83881): -1.539864963815

    test 3490 123 122.868316539332 Phi(tan=-1.54764, x=-1, y=1.54764): -1.539864963815
    test 3491 123 122.956090486754 Beta(tan=-1.54245, x=-1, y=1.54245): -1.539864963815
    test 3492 123 123.043984828414 Theta(tan=-1.53728, x=-1, y=1.53728): -1.539864963815
    test 3493 123 123.000000000000 Mu(tan=-1.53986, x=-0.544639, y=0.838671): -1.539864963815
    test 3494 123 123.043846309896 Chi(tan=-1.53729, x=-1, y=1.53729), iteration=3: -1.539864963815
    test 3495 123 122.985372260437 Xi(tan=-1.54073, x=-1.09374, y=1.68515), iteration=2: -1.539864963815

    test 3496 126 125.862870188589 Phi(tan=-1.38333, x=-0.585847, y=0.810421): -1.376381920471
    test 3497 126 125.954278157197 Beta(tan=-1.37869, x=-0.587139, y=0.809486): -1.376381920471
    test 3498 126 126.045781505815 Theta(tan=-1.37407, x=-0.588431, y=0.808547): -1.376381920471
    test 3499 126 126.000000000000 Mu(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 3500 126 126.045647308130 Chi(tan=-1.37408, x=-0.58843, y=0.808548): -1.376381920471
    test 3501 126 125.984769594047 Xi(tan=-1.37715, x=-0.58757, y=0.809173): -1.376381920471

    test 3502 126 125.862870188589 Phi(tan=-1.38333, x=-1, y=1.38333): -1.376381920471
    test 3503 126 125.954278157197 Beta(tan=-1.37869, x=-1, y=1.37869): -1.376381920471
    test 3504 126 126.045781505815 Theta(tan=-1.37407, x=-1, y=1.37407): -1.376381920471
    test 3505 126 126.000000000000 Mu(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 3506 126 126.045647308130 Chi(tan=-1.37408, x=-1, y=1.37408), iteration=3: -1.376381920471
    test 3507 126 125.984769594047 Xi(tan=-1.37715, x=-1.18042, y=1.62561), iteration=3: -1.376381920471

    test 3508 129 128.858922157346 Phi(tan=-1.24113, x=-0.627405, y=0.778693): -1.234897156535
    test 3509 129 128.952965789707 Beta(tan=-1.23697, x=-0.628682, y=0.777662): -1.234897156535
    test 3510 129 129.047075619188 Theta(tan=-1.23282, x=-0.629959, y=0.776629): -1.234897156535
    test 3511 129 129.000000000000 Mu(tan=-1.2349, x=-0.62932, y=0.777146): -1.234897156535
    test 3512 129 129.046948250528 Chi(tan=-1.23283, x=-0.629957, y=0.77663): -1.234897156535
    test 3513 129 128.984333583145 Xi(tan=-1.23559, x=-0.629108, y=0.777318): -1.234897156535

    test 3514 129 128.858922157346 Phi(tan=-1.24113, x=-1, y=1.24113): -1.234897156535
    test 3515 129 128.952965789707 Beta(tan=-1.23697, x=-1, y=1.23697): -1.234897156535
    test 3516 129 129.047075619188 Theta(tan=-1.23282, x=-1, y=1.23282): -1.234897156535
    test 3517 129 129.000000000000 Mu(tan=-1.2349, x=-0.62932, y=0.777146): -1.234897156535
    test 3518 129 129.046948250528 Chi(tan=-1.23283, x=-1, y=1.23283), iteration=3: -1.234897156535
    test 3519 129 128.984333583145 Xi(tan=-1.23559, x=-1.26387, y=1.56162), iteration=2: -1.234897156535

    test 3520 132 131.856516950077 Phi(tan=-1.11622, x=-0.667267, y=0.744818): -1.110612514829
    test 3521 132 131.952168060624 Beta(tan=-1.11248, x=-0.66851, y=0.743703): -1.110612514829
    test 3522 132 132.047853289137 Theta(tan=-1.10875, x=-0.669751, y=0.742586): -1.110612514829
    test 3523 132 132.000000000000 Mu(tan=-1.11061, x=-0.669131, y=0.743145): -1.110612514829
    test 3524 132 132.047734863814 Chi(tan=-1.10875, x=-0.66975, y=0.742587): -1.110612514829
    test 3525 132 131.984069069601 Xi(tan=-1.11123, x=-0.668924, y=0.743331): -1.110612514829

    test 3526 132 131.856516950077 Phi(tan=-1.11622, x=-1, y=1.11622): -1.110612514829
    test 3527 132 131.952168060623 Beta(tan=-1.11248, x=-1, y=1.11248): -1.110612514829
    test 3528 132 132.047853289137 Theta(tan=-1.10875, x=-1, y=1.10875): -1.110612514829
    test 3529 132 132.000000000000 Mu(tan=-1.11061, x=-0.669131, y=0.743145): -1.110612514829
    test 3530 132 132.047734863814 Chi(tan=-1.10875, x=-1, y=1.10875), iteration=2: -1.110612514829
    test 3531 132 131.984069069601 Xi(tan=-1.11123, x=-1.34385, y=1.49334), iteration=3: -1.110612514829

    test 3532 135 134.855682294112 Phi(tan=-1.00505, x=-0.705323, y=0.708886): -1.000000000000
    test 3533 135 134.951894037750 Beta(tan=-1.00168, x=-0.706513, y=0.7077): -1.000000000000
    test 3534 135 135.048106323978 Theta(tan=-0.998322, x=-0.7077, y=0.706513): -1.000000000000
    test 3535 135 135.000000000000 Mu(tan=-1, x=-0.707107, y=0.707107): -1.000000000000
    test 3536 135 135.047998507775 Chi(tan=-0.998326, x=-0.707699, y=0.706514): -1.000000000000
    test 3537 135 134.983979022806 Xi(tan=-1.00056, x=-0.706909, y=0.707304): -1.000000000000

    test 3538 135 134.855682294112 Phi(tan=-1.00505, x=-1, y=1.00505): -1.000000000000
    test 3539 135 134.951894037750 Beta(tan=-1.00168, x=-1, y=1.00168): -1.000000000000
    test 3540 135 135.048106323978 Theta(tan=-0.998322, x=-1, y=0.998322): -1.000000000000
    test 3541 135 135.000000000000 Mu(tan=-1, x=-0.707107, y=0.707107): -1.000000000000
    test 3542 135 135.047998507775 Chi(tan=-0.998326, x=-1, y=0.998326), iteration=3: -1.000000000000
    test 3543 135 134.983979022806 Xi(tan=-1.00056, x=-1.42017, y=1.42096), iteration=2: -1.000000000000

    test 3544 138 137.856428776038 Phi(tan=-0.904952, x=-0.741466, y=0.670991): -0.900404044298
    test 3545 138 137.952147066741 Beta(tan=-0.901917, x=-0.742586, y=0.669751): -0.900404044298
    test 3546 138 138.047832295130 Theta(tan=-0.898894, x=-0.743703, y=0.66851): -0.900404044298
    test 3547 138 138.000000000000 Mu(tan=-0.900404, x=-0.743145, y=0.669131): -0.900404044298
    test 3548 138 138.047736270873 Chi(tan=-0.898897, x=-0.743702, y=0.668511): -0.900404044298
    test 3549 138 137.984064504032 Xi(tan=-0.900908, x=-0.742959, y=0.669337): -0.900404044298

    test 3550 138 137.856428776038 Phi(tan=-0.904952, x=-1, y=0.904952): -0.900404044298
    test 3551 138 137.952147066741 Beta(tan=-0.901917, x=-1, y=0.901917): -0.900404044298
    test 3552 138 138.047832295130 Theta(tan=-0.898894, x=-1, y=0.898894): -0.900404044298
    test 3553 138 138.000000000000 Mu(tan=-0.900404, x=-0.743145, y=0.669131): -0.900404044298
    test 3554 138 138.047736270873 Chi(tan=-0.898897, x=-1, y=0.898897), iteration=3: -0.900404044298
    test 3555 138 137.984064504032 Xi(tan=-0.900908, x=-1.49259, y=1.34469), iteration=3: -0.900404044298

    test 3556 141 140.858749662796 Phi(tan=-0.813874, x=-0.775592, y=0.631234): -0.809784033195
    test 3557 141 140.952924719459 Beta(tan=-0.811145, x=-0.776629, y=0.629959): -0.809784033195
    test 3558 141 141.047034548704 Theta(tan=-0.808426, x=-0.777662, y=0.628682): -0.809784033195
    test 3559 141 141.000000000000 Mu(tan=-0.809784, x=-0.777146, y=0.62932): -0.809784033195
    test 3560 141 141.046951003152 Chi(tan=-0.808428, x=-0.777661, y=0.628683): -0.809784033195
    test 3561 141 140.984324651541 Xi(tan=-0.810237, x=-0.776974, y=0.629533): -0.809784033195

    test 3562 141 140.858749662796 Phi(tan=-0.813874, x=-1, y=0.813874): -0.809784033195
    test 3563 141 140.952924719459 Beta(tan=-0.811145, x=-1, y=0.811145): -0.809784033195
    test 3564 141 141.047034548704 Theta(tan=-0.808426, x=-1, y=0.808426): -0.809784033195
    test 3565 141 141.000000000000 Mu(tan=-0.809784, x=-0.777146, y=0.62932): -0.809784033195
    test 3566 141 141.046951003152 Chi(tan=-0.808428, x=-1, y=0.808428), iteration=2: -0.809784033195
    test 3567 141 140.984324651541 Xi(tan=-0.810237, x=-1.56092, y=1.26472), iteration=2: -0.809784033195

    test 3568 144 143.862620912178 Phi(tan=-0.730212, x=-0.807605, y=0.589723): -0.726542528005
    test 3569 144 143.954218805520 Beta(tan=-0.727764, x=-0.808547, y=0.588431): -0.726542528005
    test 3570 144 144.045722153815 Theta(tan=-0.725324, x=-0.809486, y=0.587139): -0.726542528005
    test 3571 144 144.000000000000 Mu(tan=-0.726543, x=-0.809017, y=0.587785): -0.726542528005
    test 3572 144 144.045651286019 Chi(tan=-0.725326, x=-0.809485, y=0.58714): -0.726542528005
    test 3573 144 143.984756686758 Xi(tan=-0.726949, x=-0.808861, y=0.588): -0.726542528005

    test 3574 144 143.862620912178 Phi(tan=-0.730212, x=-1, y=0.730212): -0.726542528005
    test 3575 144 143.954218805520 Beta(tan=-0.727764, x=-1, y=0.727764): -0.726542528005
    test 3576 144 144.045722153815 Theta(tan=-0.725324, x=-1, y=0.725324): -0.726542528005
    test 3577 144 144.000000000000 Mu(tan=-0.726543, x=-0.809017, y=0.587785): -0.726542528005
    test 3578 144 144.045651286019 Chi(tan=-0.725326, x=-1, y=0.725326), iteration=3: -0.726542528005
    test 3579 144 143.984756686758 Xi(tan=-0.726949, x=-1.62498, y=1.18128), iteration=2: -0.726542528005

    test 3580 147 146.868001375396 Phi(tan=-0.652688, x=-0.837414, y=0.54657): -0.649407593198
    test 3581 147 146.956015447561 Beta(tan=-0.6505, x=-0.838252, y=0.545283): -0.649407593198
    test 3582 147 147.043909788845 Theta(tan=-0.648319, x=-0.839088, y=0.543996): -0.649407593198
    test 3583 147 147.000000000000 Mu(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 3584 147 147.043851339199 Chi(tan=-0.64832, x=-0.839087, y=0.543997): -0.649407593198
    test 3585 147 146.985355941569 Xi(tan=-0.649771, x=-0.838531, y=0.544853): -0.649407593198

    test 3586 147 146.868001375396 Phi(tan=-0.652688, x=-1, y=0.652688): -0.649407593198
    test 3587 147 146.956015447561 Beta(tan=-0.6505, x=-1, y=0.6505): -0.649407593198
    test 3588 147 147.043909788845 Theta(tan=-0.648319, x=-1, y=0.648319): -0.649407593198
    test 3589 147 147.000000000000 Mu(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 3590 147 147.043851339199 Chi(tan=-0.64832, x=-1, y=0.64832), iteration=3: -0.649407593198
    test 3591 147 146.985355941569 Xi(tan=-0.649771, x=-1.68459, y=1.0946), iteration=3: -0.649407593198

    test 3592 150 149.874833192166 Phi(tan=-0.580267, x=-0.864931, y=0.501891): -0.577350269190
    test 3593 150 149.958295220056 Beta(tan=-0.578321, x=-0.865661, y=0.50063): -0.577350269190
    test 3594 150 150.041617567521 Theta(tan=-0.576382, x=-0.866388, y=0.499371): -0.577350269190
    test 3595 150 150.000000000000 Mu(tan=-0.57735, x=-0.866025, y=0.5): -0.577350269190
    test 3596 150 150.041570865839 Chi(tan=-0.576383, x=-0.866388, y=0.499372): -0.577350269190
    test 3597 150 149.986115906599 Xi(tan=-0.577673, x=-0.865904, y=0.50021): -0.577350269190

    test 3598 150 149.874833192166 Phi(tan=-0.580267, x=-1, y=0.580267): -0.577350269190
    test 3599 150 149.958295220056 Beta(tan=-0.578321, x=-1, y=0.578321): -0.577350269190
    test 3600 150 150.041617567521 Theta(tan=-0.576382, x=-1, y=0.576382): -0.577350269190
    test 3601 150 150.000000000000 Mu(tan=-0.57735, x=-0.866025, y=0.5): -0.577350269190
    test 3602 150 150.041570865839 Chi(tan=-0.576383, x=-1, y=0.576383), iteration=2: -0.577350269190
    test 3603 150 149.986115906599 Xi(tan=-0.577673, x=-1.73958, y=1.00491), iteration=2: -0.577350269190

    test 3604 153 152.883042376477 Phi(tan=-0.512099, x=-0.890078, y=0.455808): -0.509525449494
    test 3605 153 152.961033350715 Beta(tan=-0.510382, x=-0.890698, y=0.454596): -0.509525449494
    test 3606 153 153.038870807301 Theta(tan=-0.508671, x=-0.891314, y=0.453386): -0.509525449494
    test 3607 153 153.000000000000 Mu(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494
    test 3608 153 153.038834837406 Chi(tan=-0.508672, x=-0.891314, y=0.453386): -0.509525449494
    test 3609 153 152.987028300052 Xi(tan=-0.509811, x=-0.890904, y=0.454192): -0.509525449494

    test 3610 153 152.883042376477 Phi(tan=-0.512099, x=-1, y=0.512099): -0.509525449494
    test 3611 153 152.961033350715 Beta(tan=-0.510382, x=-1, y=0.510382): -0.509525449494
    test 3612 153 153.038870807301 Theta(tan=-0.508671, x=-1, y=0.508671): -0.509525449494
    test 3613 153 153.000000000000 Mu(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494
    test 3614 153 153.038834837406 Chi(tan=-0.508672, x=-1, y=0.508672), iteration=3: -0.509525449494
    test 3615 153 152.987028300052 Xi(tan=-0.509811, x=-1.78981, y=0.912463), iteration=2: -0.509525449494

    test 3616 156 155.892539588775 Phi(tan=-0.447478, x=-0.912781, y=0.408449): -0.445228685309
    test 3617 156 155.964199982805 Beta(tan=-0.445978, x=-0.913291, y=0.407307): -0.445228685309
    test 3618 156 156.035699743087 Theta(tan=-0.444482, x=-0.913799, y=0.406167): -0.445228685309
    test 3619 156 156.000000000000 Mu(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309
    test 3620 156 156.035673220720 Chi(tan=-0.444483, x=-0.913799, y=0.406168): -0.445228685309
    test 3621 156 155.988083156490 Xi(tan=-0.445478, x=-0.913461, y=0.406927): -0.445228685309

    test 3622 156 155.892539588775 Phi(tan=-0.447478, x=-1, y=0.447478): -0.445228685309
    test 3623 156 155.964199982805 Beta(tan=-0.445978, x=-1, y=0.445978): -0.445228685309
    test 3624 156 156.035699743087 Theta(tan=-0.444482, x=-1, y=0.444482): -0.445228685309
    test 3625 156 156.000000000000 Mu(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309
    test 3626 156 156.035673220720 Chi(tan=-0.444483, x=-1, y=0.444483), iteration=2: -0.445228685309
    test 3627 156 155.988083156490 Xi(tan=-0.445478, x=-1.83512, y=0.817507), iteration=3: -0.445228685309

    test 3628 159 158.903221087852 Phi(tan=-0.385803, x=-0.932974, y=0.359944): -0.383864035035
    test 3629 159 158.967760495904 Beta(tan=-0.38451, x=-0.933379, y=0.358893): -0.383864035035
    test 3630 159 159.032139189801 Theta(tan=-0.383221, x=-0.933781, y=0.357844): -0.383864035035
    test 3631 159 159.000000000000 Mu(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035
    test 3632 159 159.032120650065 Chi(tan=-0.383221, x=-0.933781, y=0.357845): -0.383864035035
    test 3633 159 158.989268934636 Xi(tan=-0.384079, x=-0.933513, y=0.358543): -0.383864035035

    test 3634 159 158.903221087852 Phi(tan=-0.385803, x=-1, y=0.385803): -0.383864035035
    test 3635 159 158.967760495904 Beta(tan=-0.38451, x=-1, y=0.38451): -0.383864035035
    test 3636 159 159.032139189801 Theta(tan=-0.383221, x=-1, y=0.383221): -0.383864035035
    test 3637 159 159.000000000000 Mu(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035
    test 3638 159 159.032120650065 Chi(tan=-0.383221, x=-1, y=0.383221), iteration=3: -0.383864035035
    test 3639 159 158.989268934636 Xi(tan=-0.384079, x=-1.87541, y=0.720305), iteration=3: -0.383864035035

    test 3640 162 161.914969853244 Phi(tan=-0.326561, x=-0.950597, y=0.310428): -0.324919696233
    test 3641 162 161.971675881873 Beta(tan=-0.325466, x=-0.950904, y=0.309487): -0.324919696233
    test 3642 162 162.028228157776 Theta(tan=-0.324375, x=-0.951209, y=0.308548): -0.324919696233
    test 3643 162 162.000000000000 Mu(tan=-0.32492, x=-0.951057, y=0.309017): -0.324919696233
    test 3644 162 162.028216047963 Chi(tan=-0.324375, x=-0.951209, y=0.308549): -0.324919696233
    test 3645 162 161.990572643116 Xi(tan=-0.325102, x=-0.951006, y=0.309173): -0.324919696233

    test 3646 162 161.914969853244 Phi(tan=-0.326561, x=-1, y=0.326561): -0.324919696233
    test 3647 162 161.971675881873 Beta(tan=-0.325466, x=-1, y=0.325466): -0.324919696233
    test 3648 162 162.028228157776 Theta(tan=-0.324375, x=-1, y=0.324375): -0.324919696233
    test 3649 162 162.000000000000 Mu(tan=-0.32492, x=-0.951057, y=0.309017): -0.324919696233
    test 3650 162 162.028216047963 Chi(tan=-0.324375, x=-1, y=0.324375), iteration=3: -0.324919696233
    test 3651 162 161.990572643116 Xi(tan=-0.325102, x=-1.91055, y=0.621123), iteration=3: -0.324919696233

    test 3652 165 164.927656866509 Phi(tan=-0.269303, x=-0.965598, y=0.260038): -0.267949192431
    test 3653 165 164.975903172079 Beta(tan=-0.2684, x=-0.965817, y=0.259225): -0.267949192431
    test 3654 165 165.024009425342 Theta(tan=-0.2675, x=-0.966034, y=0.258414): -0.267949192431
    test 3655 165 165.000000000000 Mu(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431
    test 3656 165 165.024002198750 Chi(tan=-0.2675, x=-0.966034, y=0.258414): -0.267949192431
    test 3657 165 164.991979982763 Xi(tan=-0.268099, x=-0.96589, y=0.258954): -0.267949192431

    test 3658 165 164.927656866509 Phi(tan=-0.269303, x=-1, y=0.269303): -0.267949192431
    test 3659 165 164.975903172079 Beta(tan=-0.2684, x=-1, y=0.2684): -0.267949192431
    test 3660 165 165.024009425342 Theta(tan=-0.2675, x=-1, y=0.2675): -0.267949192431
    test 3661 165 165.000000000000 Mu(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431
    test 3662 165 165.024002198750 Chi(tan=-0.2675, x=-1, y=0.2675), iteration=3: -0.267949192431
    test 3663 165 164.991979982763 Xi(tan=-0.268099, x=-1.94045, y=0.520234), iteration=2: -0.267949192431

    test 3664 168 167.941142537455 Phi(tan=-0.21363, x=-0.977934, y=0.208916): -0.212556561670
    test 3665 168 167.980395911211 Beta(tan=-0.212914, x=-0.978076, y=0.208246): -0.212556561670
    test 3666 168 168.019529073263 Theta(tan=-0.2122, x=-0.978218, y=0.207578): -0.212556561670
    test 3667 168 168.000000000000 Mu(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 3668 168 168.019525279620 Chi(tan=-0.2122, x=-0.978218, y=0.207578): -0.212556561670
    test 3669 168 167.993475503952 Xi(tan=-0.212676, x=-0.978124, y=0.208023): -0.212556561670

    test 3670 168 167.941142537455 Phi(tan=-0.21363, x=-1, y=0.21363): -0.212556561670
    test 3671 168 167.980395911211 Beta(tan=-0.212914, x=-1, y=0.212914): -0.212556561670
    test 3672 168 168.019529073263 Theta(tan=-0.2122, x=-1, y=0.2122): -0.212556561670
    test 3673 168 168.000000000000 Mu(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 3674 168 168.019525279620 Chi(tan=-0.2122, x=-1, y=0.2122), iteration=3: -0.212556561670
    test 3675 168 167.993475503952 Xi(tan=-0.212676, x=-1.96503, y=0.417914), iteration=3: -0.212556561670

    test 3676 171 170.955278259134 Phi(tan=-0.159185, x=-0.987566, y=0.157205): -0.158384440325
    test 3677 171 170.985104672364 Beta(tan=-0.158651, x=-0.987648, y=0.156691): -0.158384440325
    test 3678 171 171.014835986008 Theta(tan=-0.158119, x=-0.987729, y=0.156179): -0.158384440325
    test 3679 171 171.000000000000 Mu(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325
    test 3680 171 171.014834354295 Chi(tan=-0.158119, x=-0.987729, y=0.156179): -0.158384440325
    test 3681 171 170.995042777201 Xi(tan=-0.158473, x=-0.987675, y=0.15652): -0.158384440325

    test 3682 171 170.955278259134 Phi(tan=-0.159185, x=-1, y=0.159185): -0.158384440325
    test 3683 171 170.985104672364 Beta(tan=-0.158651, x=-1, y=0.158651): -0.158384440325
    test 3684 171 171.014835986008 Theta(tan=-0.158119, x=-1, y=0.158119): -0.158384440325
    test 3685 171 171.000000000000 Mu(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325
    test 3686 171 171.014834354295 Chi(tan=-0.158119, x=-1, y=0.158119), iteration=3: -0.158384440325
    test 3687 171 170.995042777201 Xi(tan=-0.158473, x=-1.98422, y=0.314445), iteration=2: -0.158384440325

    test 3688 174 173.969908073482 Phi(tan=-0.105635, x=-0.994467, y=0.105051): -0.105104235266
    test 3689 174 173.989977607478 Beta(tan=-0.105281, x=-0.994504, y=0.104702): -0.105104235266
    test 3690 174 174.009981325045 Theta(tan=-0.104928, x=-0.99454, y=0.104355): -0.105104235266
    test 3691 174 174.000000000000 Mu(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266
    test 3692 174 174.009980834868 Chi(tan=-0.104928, x=-0.99454, y=0.104355): -0.105104235266
    test 3693 174 173.996664575109 Xi(tan=-0.105163, x=-0.994516, y=0.104586): -0.105104235266

    test 3694 174 173.969908073482 Phi(tan=-0.105635, x=-1, y=0.105635): -0.105104235266
    test 3695 174 173.989977607478 Beta(tan=-0.105281, x=-1, y=0.105281): -0.105104235266
    test 3696 174 174.009981325045 Theta(tan=-0.104928, x=-1, y=0.104928): -0.105104235266
    test 3697 174 174.000000000000 Mu(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266
    test 3698 174 174.009980834868 Chi(tan=-0.104928, x=-1, y=0.104928), iteration=3: -0.105104235266
    test 3699 174 173.996664575109 Xi(tan=-0.105163, x=-1.99796, y=0.210112), iteration=2: -0.105104235266

    test 3700 177 176.984870427697 Phi(tan=-0.0526726, x=-0.998616, y=0.0525997): -0.052407779283
    test 3701 177 176.994961026729 Beta(tan=-0.052496, x=-0.998625, y=0.0524238): -0.052407779283
    test 3702 177 177.005017979541 Theta(tan=-0.05232, x=-0.998634, y=0.0522485): -0.052407779283
    test 3703 177 177.000000000000 Mu(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283
    test 3704 177 177.005017917762 Chi(tan=-0.05232, x=-0.998634, y=0.0522485): -0.052407779283
    test 3705 177 176.998323063562 Xi(tan=-0.0524371, x=-0.998628, y=0.0523652): -0.052407779283

    test 3706 177 176.984870427697 Phi(tan=-0.0526726, x=-1, y=0.0526726): -0.052407779283
    test 3707 177 176.994961026729 Beta(tan=-0.052496, x=-1, y=0.052496): -0.052407779283
    test 3708 177 177.005017979541 Theta(tan=-0.05232, x=-1, y=0.05232): -0.052407779283
    test 3709 177 177.000000000000 Mu(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283
    test 3710 177 177.005017917762 Chi(tan=-0.05232, x=-1, y=0.05232), iteration=3: -0.052407779283
    test 3711 177 176.998323063562 Xi(tan=-0.0524371, x=-2.00622, y=0.105201), iteration=3: -0.052407779283

    test 3712 180 180.000000000000 Phi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 3713 180 180.000000000000 Beta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 3714 180 180.000000000000 Theta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 3715 180 180.000000000000 Mu(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 3716 180 180.000000000000 Chi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 3717 180 180.000000000000 Xi(tan=0.0, x=-1, y=0.0): 0.000000000000

    test 3718 180 180.000000000000 Phi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 3719 180 180.000000000000 Beta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 3720 180 180.000000000000 Theta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 3721 180 180.000000000000 Mu(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 3722 180 180.000000000000 Chi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 3723 180 180.000000000000 Xi(tan=0.0, x=-1, y=0.0): 0.000000000000

    test 3724 183 183.015129572303 Phi(tan=0.0526726, x=-0.998616, y=-0.0525997): 0.052407779283
    test 3725 183 183.005038973271 Beta(tan=0.052496, x=-0.998625, y=-0.0524238): 0.052407779283
    test 3726 183 182.994982020459 Theta(tan=0.05232, x=-0.998634, y=-0.0522485): 0.052407779283
    test 3727 183 183.000000000000 Mu(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283
    test 3728 183 182.994982082238 Chi(tan=0.05232, x=-0.998634, y=-0.0522485): 0.052407779283
    test 3729 183 183.001676936438 Xi(tan=0.0524371, x=-0.998628, y=-0.0523652): 0.052407779283

    test 3730 183 183.015129572303 Phi(tan=0.0526726, x=-1, y=-0.0526726): 0.052407779283
    test 3731 183 183.005038973271 Beta(tan=0.052496, x=-1, y=-0.052496): 0.052407779283
    test 3732 183 182.994982020459 Theta(tan=0.05232, x=-1, y=-0.05232): 0.052407779283
    test 3733 183 183.000000000000 Mu(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283
    test 3734 183 182.994982082238 Chi(tan=0.05232, x=-1, y=-0.05232), iteration=3: 0.052407779283
    test 3735 183 183.001676936438 Xi(tan=0.0524371, x=-2.00622, y=-0.105201), iteration=2: 0.052407779283

    test 3736 186 186.030091926518 Phi(tan=0.105635, x=-0.994467, y=-0.105051): 0.105104235266
    test 3737 186 186.010022392522 Beta(tan=0.105281, x=-0.994504, y=-0.104702): 0.105104235266
    test 3738 186 185.990018674955 Theta(tan=0.104928, x=-0.99454, y=-0.104355): 0.105104235266
    test 3739 186 186.000000000000 Mu(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266
    test 3740 186 185.990019165132 Chi(tan=0.104928, x=-0.99454, y=-0.104355): 0.105104235266
    test 3741 186 186.003335424891 Xi(tan=0.105163, x=-0.994516, y=-0.104586): 0.105104235266

    test 3742 186 186.030091926518 Phi(tan=0.105635, x=-1, y=-0.105635): 0.105104235266
    test 3743 186 186.010022392522 Beta(tan=0.105281, x=-1, y=-0.105281): 0.105104235266
    test 3744 186 185.990018674955 Theta(tan=0.104928, x=-1, y=-0.104928): 0.105104235266
    test 3745 186 186.000000000000 Mu(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266
    test 3746 186 185.990019165132 Chi(tan=0.104928, x=-1, y=-0.104928), iteration=2: 0.105104235266
    test 3747 186 186.003335424891 Xi(tan=0.105163, x=-1.99796, y=-0.210112), iteration=2: 0.105104235266

    test 3748 189 189.044721740866 Phi(tan=0.159185, x=-0.987566, y=-0.157205): 0.158384440325
    test 3749 189 189.014895327636 Beta(tan=0.158651, x=-0.987648, y=-0.156691): 0.158384440325
    test 3750 189 188.985164013992 Theta(tan=0.158119, x=-0.987729, y=-0.156179): 0.158384440325
    test 3751 189 189.000000000000 Mu(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 3752 189 188.985165645705 Chi(tan=0.158119, x=-0.987729, y=-0.156179): 0.158384440325
    test 3753 189 189.004957222799 Xi(tan=0.158473, x=-0.987675, y=-0.15652): 0.158384440325

    test 3754 189 189.044721740866 Phi(tan=0.159185, x=-1, y=-0.159185): 0.158384440325
    test 3755 189 189.014895327636 Beta(tan=0.158651, x=-1, y=-0.158651): 0.158384440325
    test 3756 189 188.985164013992 Theta(tan=0.158119, x=-1, y=-0.158119): 0.158384440325
    test 3757 189 189.000000000000 Mu(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 3758 189 188.985165645705 Chi(tan=0.158119, x=-1, y=-0.158119), iteration=3: 0.158384440325
    test 3759 189 189.004957222799 Xi(tan=0.158473, x=-1.98422, y=-0.314445), iteration=3: 0.158384440325

    test 3760 192 192.058857462545 Phi(tan=0.21363, x=-0.977934, y=-0.208916): 0.212556561670
    test 3761 192 192.019604088789 Beta(tan=0.212914, x=-0.978076, y=-0.208246): 0.212556561670
    test 3762 192 191.980470926737 Theta(tan=0.2122, x=-0.978218, y=-0.207578): 0.212556561670
    test 3763 192 192.000000000000 Mu(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670
    test 3764 192 191.980474720380 Chi(tan=0.2122, x=-0.978218, y=-0.207578): 0.212556561670
    test 3765 192 192.006524496048 Xi(tan=0.212676, x=-0.978124, y=-0.208023): 0.212556561670

    test 3766 192 192.058857462545 Phi(tan=0.21363, x=-1, y=-0.21363): 0.212556561670
    test 3767 192 192.019604088789 Beta(tan=0.212914, x=-1, y=-0.212914): 0.212556561670
    test 3768 192 191.980470926737 Theta(tan=0.2122, x=-1, y=-0.2122): 0.212556561670
    test 3769 192 192.000000000000 Mu(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670
    test 3770 192 191.980474720380 Chi(tan=0.2122, x=-1, y=-0.2122), iteration=3: 0.212556561670
    test 3771 192 192.006524496048 Xi(tan=0.212676, x=-1.96503, y=-0.417914), iteration=2: 0.212556561670

    test 3772 195 195.072343133491 Phi(tan=0.269303, x=-0.965598, y=-0.260038): 0.267949192431
    test 3773 195 195.024096827921 Beta(tan=0.2684, x=-0.965817, y=-0.259225): 0.267949192431
    test 3774 195 194.975990574658 Theta(tan=0.2675, x=-0.966034, y=-0.258414): 0.267949192431
    test 3775 195 195.000000000000 Mu(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431
    test 3776 195 194.975997801250 Chi(tan=0.2675, x=-0.966034, y=-0.258414): 0.267949192431
    test 3777 195 195.008020017237 Xi(tan=0.268099, x=-0.96589, y=-0.258954): 0.267949192431

    test 3778 195 195.072343133491 Phi(tan=0.269303, x=-1, y=-0.269303): 0.267949192431
    test 3779 195 195.024096827921 Beta(tan=0.2684, x=-1, y=-0.2684): 0.267949192431
    test 3780 195 194.975990574658 Theta(tan=0.2675, x=-1, y=-0.2675): 0.267949192431
    test 3781 195 195.000000000000 Mu(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431
    test 3782 195 194.975997801250 Chi(tan=0.2675, x=-1, y=-0.2675), iteration=3: 0.267949192431
    test 3783 195 195.008020017237 Xi(tan=0.268099, x=-1.94045, y=-0.520234), iteration=2: 0.267949192431

    test 3784 198 198.085030146756 Phi(tan=0.326561, x=-0.950597, y=-0.310428): 0.324919696233
    test 3785 198 198.028324118127 Beta(tan=0.325466, x=-0.950904, y=-0.309487): 0.324919696233
    test 3786 198 197.971771842224 Theta(tan=0.324375, x=-0.951209, y=-0.308548): 0.324919696233
    test 3787 198 198.000000000000 Mu(tan=0.32492, x=-0.951057, y=-0.309017): 0.324919696233
    test 3788 198 197.971783952037 Chi(tan=0.324375, x=-0.951209, y=-0.308549): 0.324919696233
    test 3789 198 198.009427356884 Xi(tan=0.325102, x=-0.951006, y=-0.309173): 0.324919696233

    test 3790 198 198.085030146756 Phi(tan=0.326561, x=-1, y=-0.326561): 0.324919696233
    test 3791 198 198.028324118127 Beta(tan=0.325466, x=-1, y=-0.325466): 0.324919696233
    test 3792 198 197.971771842224 Theta(tan=0.324375, x=-1, y=-0.324375): 0.324919696233
    test 3793 198 198.000000000000 Mu(tan=0.32492, x=-0.951057, y=-0.309017): 0.324919696233
    test 3794 198 197.971783952037 Chi(tan=0.324375, x=-1, y=-0.324375), iteration=3: 0.324919696233
    test 3795 198 198.009427356884 Xi(tan=0.325102, x=-1.91055, y=-0.621123), iteration=2: 0.324919696233

    test 3796 201 201.096778912148 Phi(tan=0.385803, x=-0.932974, y=-0.359944): 0.383864035035
    test 3797 201 201.032239504096 Beta(tan=0.38451, x=-0.933379, y=-0.358893): 0.383864035035
    test 3798 201 200.967860810199 Theta(tan=0.383221, x=-0.933781, y=-0.357844): 0.383864035035
    test 3799 201 201.000000000000 Mu(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035
    test 3800 201 200.967879349935 Chi(tan=0.383221, x=-0.933781, y=-0.357845): 0.383864035035
    test 3801 201 201.010731065364 Xi(tan=0.384079, x=-0.933513, y=-0.358543): 0.383864035035

    test 3802 201 201.096778912148 Phi(tan=0.385803, x=-1, y=-0.385803): 0.383864035035
    test 3803 201 201.032239504096 Beta(tan=0.38451, x=-1, y=-0.38451): 0.383864035035
    test 3804 201 200.967860810199 Theta(tan=0.383221, x=-1, y=-0.383221): 0.383864035035
    test 3805 201 201.000000000000 Mu(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035
    test 3806 201 200.967879349935 Chi(tan=0.383221, x=-1, y=-0.383221), iteration=2: 0.383864035035
    test 3807 201 201.010731065364 Xi(tan=0.384079, x=-1.87541, y=-0.720305), iteration=3: 0.383864035035

    test 3808 204 204.107460411225 Phi(tan=0.447478, x=-0.912781, y=-0.408449): 0.445228685309
    test 3809 204 204.035800017195 Beta(tan=0.445978, x=-0.913291, y=-0.407307): 0.445228685309
    test 3810 204 203.964300256913 Theta(tan=0.444482, x=-0.913799, y=-0.406167): 0.445228685309
    test 3811 204 204.000000000000 Mu(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309
    test 3812 204 203.964326779280 Chi(tan=0.444483, x=-0.913799, y=-0.406168): 0.445228685309
    test 3813 204 204.011916843510 Xi(tan=0.445478, x=-0.913461, y=-0.406927): 0.445228685309

    test 3814 204 204.107460411225 Phi(tan=0.447478, x=-1, y=-0.447478): 0.445228685309
    test 3815 204 204.035800017195 Beta(tan=0.445978, x=-1, y=-0.445978): 0.445228685309
    test 3816 204 203.964300256913 Theta(tan=0.444482, x=-1, y=-0.444482): 0.445228685309
    test 3817 204 204.000000000000 Mu(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309
    test 3818 204 203.964326779280 Chi(tan=0.444483, x=-1, y=-0.444483), iteration=2: 0.445228685309
    test 3819 204 204.011916843510 Xi(tan=0.445478, x=-1.83512, y=-0.817507), iteration=3: 0.445228685309

    test 3820 207 207.116957623523 Phi(tan=0.512099, x=-0.890078, y=-0.455808): 0.509525449494
    test 3821 207 207.038966649285 Beta(tan=0.510382, x=-0.890698, y=-0.454596): 0.509525449494
    test 3822 207 206.961129192699 Theta(tan=0.508671, x=-0.891314, y=-0.453386): 0.509525449494
    test 3823 207 207.000000000000 Mu(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494
    test 3824 207 206.961165162594 Chi(tan=0.508672, x=-0.891314, y=-0.453386): 0.509525449494
    test 3825 207 207.012971699948 Xi(tan=0.509811, x=-0.890904, y=-0.454192): 0.509525449494

    test 3826 207 207.116957623523 Phi(tan=0.512099, x=-1, y=-0.512099): 0.509525449494
    test 3827 207 207.038966649285 Beta(tan=0.510382, x=-1, y=-0.510382): 0.509525449494
    test 3828 207 206.961129192699 Theta(tan=0.508671, x=-1, y=-0.508671): 0.509525449494
    test 3829 207 207.000000000000 Mu(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494
    test 3830 207 206.961165162594 Chi(tan=0.508672, x=-1, y=-0.508672), iteration=3: 0.509525449494
    test 3831 207 207.012971699948 Xi(tan=0.509811, x=-1.78981, y=-0.912463), iteration=3: 0.509525449494

    test 3832 210 210.125166807834 Phi(tan=0.580267, x=-0.864931, y=-0.501891): 0.577350269190
    test 3833 210 210.041704779944 Beta(tan=0.578321, x=-0.865661, y=-0.50063): 0.577350269190
    test 3834 210 209.958382432479 Theta(tan=0.576382, x=-0.866388, y=-0.499371): 0.577350269190
    test 3835 210 210.000000000000 Mu(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 3836 210 209.958429134161 Chi(tan=0.576383, x=-0.866388, y=-0.499372): 0.577350269190
    test 3837 210 210.013884093401 Xi(tan=0.577673, x=-0.865904, y=-0.50021): 0.577350269190

    test 3838 210 210.125166807834 Phi(tan=0.580267, x=-1, y=-0.580267): 0.577350269190
    test 3839 210 210.041704779944 Beta(tan=0.578321, x=-1, y=-0.578321): 0.577350269190
    test 3840 210 209.958382432479 Theta(tan=0.576382, x=-1, y=-0.576382): 0.577350269190
    test 3841 210 210.000000000000 Mu(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 3842 210 209.958429134161 Chi(tan=0.576383, x=-1, y=-0.576383), iteration=2: 0.577350269190
    test 3843 210 210.013884093401 Xi(tan=0.577673, x=-1.73958, y=-1.00491), iteration=3: 0.577350269190

    test 3844 213 213.131998624604 Phi(tan=0.652688, x=-0.837414, y=-0.54657): 0.649407593198
    test 3845 213 213.043984552439 Beta(tan=0.6505, x=-0.838252, y=-0.545283): 0.649407593198
    test 3846 213 212.956090211155 Theta(tan=0.648319, x=-0.839088, y=-0.543996): 0.649407593198
    test 3847 213 213.000000000000 Mu(tan=0.649408, x=-0.838671, y=-0.544639): 0.649407593198
    test 3848 213 212.956148660801 Chi(tan=0.64832, x=-0.839087, y=-0.543997): 0.649407593198
    test 3849 213 213.014644058431 Xi(tan=0.649771, x=-0.838531, y=-0.544853): 0.649407593198

    test 3850 213 213.131998624604 Phi(tan=0.652688, x=-1, y=-0.652688): 0.649407593198
    test 3851 213 213.043984552439 Beta(tan=0.6505, x=-1, y=-0.6505): 0.649407593198
    test 3852 213 212.956090211155 Theta(tan=0.648319, x=-1, y=-0.648319): 0.649407593198
    test 3853 213 213.000000000000 Mu(tan=0.649408, x=-0.838671, y=-0.544639): 0.649407593198
    test 3854 213 212.956148660801 Chi(tan=0.64832, x=-1, y=-0.64832), iteration=3: 0.649407593198
    test 3855 213 213.014644058431 Xi(tan=0.649771, x=-1.68459, y=-1.0946), iteration=3: 0.649407593198

    test 3856 216 216.137379087822 Phi(tan=0.730212, x=-0.807605, y=-0.589723): 0.726542528005
    test 3857 216 216.045781194480 Beta(tan=0.727764, x=-0.808547, y=-0.588431): 0.726542528005
    test 3858 216 215.954277846185 Theta(tan=0.725324, x=-0.809486, y=-0.587139): 0.726542528005
    test 3859 216 216.000000000000 Mu(tan=0.726543, x=-0.809017, y=-0.587785): 0.726542528005
    test 3860 216 215.954348713981 Chi(tan=0.725326, x=-0.809485, y=-0.58714): 0.726542528005
    test 3861 216 216.015243313242 Xi(tan=0.726949, x=-0.808861, y=-0.588): 0.726542528005

    test 3862 216 216.137379087822 Phi(tan=0.730212, x=-1, y=-0.730212): 0.726542528005
    test 3863 216 216.045781194480 Beta(tan=0.727764, x=-1, y=-0.727764): 0.726542528005
    test 3864 216 215.954277846185 Theta(tan=0.725324, x=-1, y=-0.725324): 0.726542528005
    test 3865 216 216.000000000000 Mu(tan=0.726543, x=-0.809017, y=-0.587785): 0.726542528005
    test 3866 216 215.954348713981 Chi(tan=0.725326, x=-1, y=-0.725326), iteration=3: 0.726542528005
    test 3867 216 216.015243313242 Xi(tan=0.726949, x=-1.62498, y=-1.18128), iteration=2: 0.726542528005

    test 3868 219 219.141250337204 Phi(tan=0.813874, x=-0.775592, y=-0.631234): 0.809784033195
    test 3869 219 219.047075280541 Beta(tan=0.811145, x=-0.776629, y=-0.629959): 0.809784033195
    test 3870 219 218.952965451296 Theta(tan=0.808426, x=-0.777662, y=-0.628682): 0.809784033195
    test 3871 219 219.000000000000 Mu(tan=0.809784, x=-0.777146, y=-0.62932): 0.809784033195
    test 3872 219 218.953048996848 Chi(tan=0.808428, x=-0.777661, y=-0.628683): 0.809784033195
    test 3873 219 219.015675348459 Xi(tan=0.810237, x=-0.776974, y=-0.629533): 0.809784033195

    test 3874 219 219.141250337204 Phi(tan=0.813874, x=-1, y=-0.813874): 0.809784033195
    test 3875 219 219.047075280541 Beta(tan=0.811145, x=-1, y=-0.811145): 0.809784033195
    test 3876 219 218.952965451296 Theta(tan=0.808426, x=-1, y=-0.808426): 0.809784033195
    test 3877 219 219.000000000000 Mu(tan=0.809784, x=-0.777146, y=-0.62932): 0.809784033195
    test 3878 219 218.953048996848 Chi(tan=0.808428, x=-1, y=-0.808428), iteration=2: 0.809784033195
    test 3879 219 219.015675348459 Xi(tan=0.810237, x=-1.56092, y=-1.26472), iteration=2: 0.809784033195

    test 3880 222 222.143571223962 Phi(tan=0.904952, x=-0.741466, y=-0.670991): 0.900404044298
    test 3881 222 222.047852933259 Beta(tan=0.901917, x=-0.742586, y=-0.669751): 0.900404044298
    test 3882 222 221.952167704870 Theta(tan=0.898894, x=-0.743703, y=-0.66851): 0.900404044298
    test 3883 222 222.000000000000 Mu(tan=0.900404, x=-0.743145, y=-0.669131): 0.900404044298
    test 3884 222 221.952263729127 Chi(tan=0.898897, x=-0.743702, y=-0.668511): 0.900404044298
    test 3885 222 222.015935495968 Xi(tan=0.900908, x=-0.742959, y=-0.669337): 0.900404044298

    test 3886 222 222.143571223962 Phi(tan=0.904952, x=-1, y=-0.904952): 0.900404044298
    test 3887 222 222.047852933259 Beta(tan=0.901917, x=-1, y=-0.901917): 0.900404044298
    test 3888 222 221.952167704870 Theta(tan=0.898894, x=-1, y=-0.898894): 0.900404044298
    test 3889 222 222.000000000000 Mu(tan=0.900404, x=-0.743145, y=-0.669131): 0.900404044298
    test 3890 222 221.952263729127 Chi(tan=0.898897, x=-1, y=-0.898897), iteration=3: 0.900404044298
    test 3891 222 222.015935495968 Xi(tan=0.900908, x=-1.49259, y=-1.34469), iteration=3: 0.900404044298

    test 3892 225 225.144317705888 Phi(tan=1.00505, x=-0.705323, y=-0.708886): 1.000000000000
    test 3893 225 225.048105962250 Beta(tan=1.00168, x=-0.706513, y=-0.7077): 1.000000000000
    test 3894 225 224.951893676022 Theta(tan=0.998322, x=-0.7077, y=-0.706513): 1.000000000000
    test 3895 225 225.000000000000 Mu(tan=1.0, x=-0.707107, y=-0.707107): 1.000000000000
    test 3896 225 224.952001492225 Chi(tan=0.998326, x=-0.707699, y=-0.706514): 1.000000000000
    test 3897 225 225.016020977194 Xi(tan=1.00056, x=-0.706909, y=-0.707304): 1.000000000000

    test 3898 225 225.144317705888 Phi(tan=1.00505, x=-1, y=-1.00505): 1.000000000000
    test 3899 225 225.048105962250 Beta(tan=1.00168, x=-1, y=-1.00168): 1.000000000000
    test 3900 225 224.951893676022 Theta(tan=0.998322, x=-1, y=-0.998322): 1.000000000000
    test 3901 225 225.000000000000 Mu(tan=1.0, x=-0.707107, y=-0.707107): 1.000000000000
    test 3902 225 224.952001492225 Chi(tan=0.998326, x=-1, y=-0.998326), iteration=3: 1.000000000000
    test 3903 225 225.016020977194 Xi(tan=1.00056, x=-1.42017, y=-1.42096), iteration=2: 1.000000000000

    test 3904 228 228.143483049923 Phi(tan=1.11622, x=-0.667267, y=-0.744818): 1.110612514829
    test 3905 228 228.047831939376 Beta(tan=1.11248, x=-0.66851, y=-0.743703): 1.110612514829
    test 3906 228 227.952146710863 Theta(tan=1.10875, x=-0.669751, y=-0.742586): 1.110612514829
    test 3907 228 228.000000000000 Mu(tan=1.11061, x=-0.669131, y=-0.743145): 1.110612514829
    test 3908 228 227.952265136186 Chi(tan=1.10875, x=-0.66975, y=-0.742587): 1.110612514829
    test 3909 228 228.015930930399 Xi(tan=1.11123, x=-0.668924, y=-0.743331): 1.110612514829

    test 3910 228 228.143483049923 Phi(tan=1.11622, x=-1, y=-1.11622): 1.110612514829
    test 3911 228 228.047831939377 Beta(tan=1.11248, x=-1, y=-1.11248): 1.110612514829
    test 3912 228 227.952146710863 Theta(tan=1.10875, x=-1, y=-1.10875): 1.110612514829
    test 3913 228 228.000000000000 Mu(tan=1.11061, x=-0.669131, y=-0.743145): 1.110612514829
    test 3914 228 227.952265136186 Chi(tan=1.10875, x=-1, y=-1.10875), iteration=2: 1.110612514829
    test 3915 228 228.015930930399 Xi(tan=1.11123, x=-1.34385, y=-1.49334), iteration=3: 1.110612514829

    test 3916 231 231.141077842654 Phi(tan=1.24113, x=-0.627405, y=-0.778693): 1.234897156535
    test 3917 231 231.047034210293 Beta(tan=1.23697, x=-0.628682, y=-0.777662): 1.234897156535
    test 3918 231 230.952924380812 Theta(tan=1.23282, x=-0.629959, y=-0.776629): 1.234897156535
    test 3919 231 231.000000000000 Mu(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 3920 231 230.953051749472 Chi(tan=1.23283, x=-0.629957, y=-0.77663): 1.234897156535
    test 3921 231 231.015666416855 Xi(tan=1.23559, x=-0.629108, y=-0.777318): 1.234897156535

    test 3922 231 231.141077842654 Phi(tan=1.24113, x=-1, y=-1.24113): 1.234897156535
    test 3923 231 231.047034210293 Beta(tan=1.23697, x=-1, y=-1.23697): 1.234897156535
    test 3924 231 230.952924380812 Theta(tan=1.23282, x=-1, y=-1.23282): 1.234897156535
    test 3925 231 231.000000000000 Mu(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 3926 231 230.953051749472 Chi(tan=1.23283, x=-1, y=-1.23283), iteration=3: 1.234897156535
    test 3927 231 231.015666416855 Xi(tan=1.23559, x=-1.26387, y=-1.56162), iteration=2: 1.234897156535

    test 3928 234 234.137129811411 Phi(tan=1.38333, x=-0.585847, y=-0.810421): 1.376381920471
    test 3929 234 234.045721842803 Beta(tan=1.37869, x=-0.587139, y=-0.809486): 1.376381920471
    test 3930 234 233.954218494185 Theta(tan=1.37407, x=-0.588431, y=-0.808547): 1.376381920471
    test 3931 234 234.000000000000 Mu(tan=1.37638, x=-0.587785, y=-0.809017): 1.376381920471
    test 3932 234 233.954352691870 Chi(tan=1.37408, x=-0.58843, y=-0.808548): 1.376381920471
    test 3933 234 234.015230405953 Xi(tan=1.37715, x=-0.58757, y=-0.809173): 1.376381920471

    test 3934 234 234.137129811411 Phi(tan=1.38333, x=-1, y=-1.38333): 1.376381920471
    test 3935 234 234.045721842803 Beta(tan=1.37869, x=-1, y=-1.37869): 1.376381920471
    test 3936 234 233.954218494185 Theta(tan=1.37407, x=-1, y=-1.37407): 1.376381920471
    test 3937 234 234.000000000000 Mu(tan=1.37638, x=-0.587785, y=-0.809017): 1.376381920471
    test 3938 234 233.954352691870 Chi(tan=1.37408, x=-1, y=-1.37408), iteration=3: 1.376381920471
    test 3939 234 234.015230405953 Xi(tan=1.37715, x=-1.18042, y=-1.62561), iteration=3: 1.376381920471

    test 3940 237 237.131683460668 Phi(tan=1.54764, x=-0.54271, y=-0.83992): 1.539864963815
    test 3941 237 237.043909513246 Beta(tan=1.54245, x=-0.543996, y=-0.839088): 1.539864963815
    test 3942 237 236.956015171586 Theta(tan=1.53728, x=-0.545283, y=-0.838252): 1.539864963815
    test 3943 237 237.000000000000 Mu(tan=1.53986, x=-0.544639, y=-0.838671): 1.539864963815
    test 3944 237 236.956153690104 Chi(tan=1.53729, x=-0.545281, y=-0.838254): 1.539864963815
    test 3945 237 237.014627739563 Xi(tan=1.54073, x=-0.544425, y=-0.83881): 1.539864963815

    test 3946 237 237.131683460668 Phi(tan=1.54764, x=-1, y=-1.54764): 1.539864963815
    test 3947 237 237.043909513246 Beta(tan=1.54245, x=-1, y=-1.54245): 1.539864963815
    test 3948 237 236.956015171586 Theta(tan=1.53728, x=-1, y=-1.53728): 1.539864963815
    test 3949 237 237.000000000000 Mu(tan=1.53986, x=-0.544639, y=-0.838671): 1.539864963815
    test 3950 237 236.956153690104 Chi(tan=1.53729, x=-1, y=-1.53729), iteration=3: 1.539864963815
    test 3951 237 237.014627739563 Xi(tan=1.54073, x=-1.09374, y=-1.68515), iteration=2: 1.539864963815

    test 3952 240 240.124799530298 Phi(tan=1.7408, x=-0.498112, y=-0.867112): 1.732050807569
    test 3953 240 240.041617332767 Beta(tan=1.73496, x=-0.499371, y=-0.866388): 1.732050807569
    test 3954 240 239.958294984908 Theta(tan=1.72914, x=-0.50063, y=-0.865661): 1.732050807569
    test 3955 240 240.000000000000 Mu(tan=1.73205, x=-0.5, y=-0.866025): 1.732050807569
    test 3956 240 239.958434995078 Chi(tan=1.72915, x=-0.500628, y=-0.865662): 1.732050807569
    test 3957 240 240.013865076162 Xi(tan=1.73302, x=-0.49979, y=-0.866146): 1.732050807569

    test 3958 240 240.124799530298 Phi(tan=1.7408, x=-1, y=-1.7408): 1.732050807569
    test 3959 240 240.041617332767 Beta(tan=1.73496, x=-1, y=-1.73496): 1.732050807569
    test 3960 240 239.958294984908 Theta(tan=1.72914, x=-1, y=-1.72914): 1.732050807569
    test 3961 240 240.000000000000 Mu(tan=1.73205, x=-0.5, y=-0.866025): 1.732050807569
    test 3962 240 239.958434995078 Chi(tan=1.72915, x=-1, y=-1.72915), iteration=3: 1.732050807569
    test 3963 240 240.013865076162 Xi(tan=1.73302, x=-1.00407, y=-1.74007), iteration=3: 1.732050807569

    test 3964 243 243.116554283961 Phi(tan=1.97252, x=-0.452177, y=-0.891928): 1.962610505505
    test 3965 243 243.038870615950 Beta(tan=1.96591, x=-0.453386, y=-0.891314): 1.962610505505
    test 3966 243 242.961033158986 Theta(tan=1.95932, x=-0.454596, y=-0.890698): 1.962610505505
    test 3967 243 243.000000000000 Mu(tan=1.96261, x=-0.45399, y=-0.891007): 1.962610505505
    test 3968 243 242.961171598977 Chi(tan=1.95933, x=-0.454594, y=-0.890699): 1.962610505505
    test 3969 243 243.012950815476 Xi(tan=1.96371, x=-0.453789, y=-0.891109): 1.962610505505

    test 3970 243 243.116554283961 Phi(tan=1.97252, x=-1, y=-1.97252): 1.962610505505
    test 3971 243 243.038870615950 Beta(tan=1.96591, x=-1, y=-1.96591): 1.962610505505
    test 3972 243 242.961033158986 Theta(tan=1.95932, x=-1, y=-1.95932): 1.962610505505
    test 3973 243 243.000000000000 Mu(tan=1.96261, x=-0.45399, y=-0.891007): 1.962610505505
    test 3974 243 242.961171598977 Chi(tan=1.95933, x=-1, y=-1.95933), iteration=3: 1.962610505505
    test 3975 243 243.012950815476 Xi(tan=1.96371, x=-0.911653, y=-1.79022), iteration=2: 1.962610505505

    test 3976 246 246.107038637362 Phi(tan=2.25738, x=-0.405029, y=-0.914304): 2.246036773904
    test 3977 246 246.035699594795 Beta(tan=2.24981, x=-0.406167, y=-0.913799): 2.246036773904
    test 3978 246 245.964199834179 Theta(tan=2.24227, x=-0.407307, y=-0.913291): 2.246036773904
    test 3979 246 246.000000000000 Mu(tan=2.24604, x=-0.406737, y=-0.913545): 2.246036773904
    test 3980 246 245.964333509830 Chi(tan=2.24228, x=-0.407305, y=-0.913292): 2.246036773904
    test 3981 246 246.011895004556 Xi(tan=2.24729, x=-0.406547, y=-0.91363): 2.246036773904

    test 3982 246 246.107038637362 Phi(tan=2.25738, x=-1, y=-2.25738): 2.246036773904
    test 3983 246 246.035699594795 Beta(tan=2.24981, x=-1, y=-2.24981): 2.246036773904
    test 3984 246 245.964199834179 Theta(tan=2.24227, x=-1, y=-2.24227): 2.246036773904
    test 3985 246 246.000000000000 Mu(tan=2.24604, x=-0.406737, y=-0.913545): 2.246036773904
    test 3986 246 245.964333509830 Chi(tan=2.24228, x=-1, y=-2.24228), iteration=3: 2.246036773904
    test 3987 246 246.011895004556 Xi(tan=2.24729, x=-0.816745, y=-1.83546), iteration=3: 2.246036773904

    test 3988 249 249.096357137472 Phi(tan=2.61824, x=-0.356797, y=-0.934182): 2.605089064694
    test 3989 249 249.032139081563 Beta(tan=2.60946, x=-0.357844, y=-0.933781): 2.605089064694
    test 3990 249 248.967760387396 Theta(tan=2.60071, x=-0.358893, y=-0.933379): 2.605089064694
    test 3991 249 249.000000000000 Mu(tan=2.60509, x=-0.358368, y=-0.93358): 2.605089064694
    test 3992 249 248.967886080496 Chi(tan=2.60073, x=-0.358891, y=-0.933379): 2.605089064694
    test 3993 249 249.010709226392 Xi(tan=2.60655, x=-0.358193, y=-0.933647): 2.605089064694

    test 3994 249 249.096357137472 Phi(tan=2.61824, x=-1, y=-2.61824): 2.605089064694
    test 3995 249 249.032139081563 Beta(tan=2.60946, x=-1, y=-2.60946): 2.605089064694
    test 3996 249 248.967760387396 Theta(tan=2.60071, x=-1, y=-2.60071): 2.605089064694
    test 3997 249 249.000000000000 Mu(tan=2.60509, x=-0.358368, y=-0.93358): 2.605089064694
    test 3998 249 248.967886080496 Chi(tan=2.60073, x=-1, y=-2.60073), iteration=3: 2.605089064694
    test 3999 249 249.010709226392 Xi(tan=2.60655, x=-0.719603, y=-1.87568), iteration=3: 2.605089064694

    test 4000 252 252.084626804899 Phi(tan=3.09322, x=-0.307612, y=-0.951512): 3.077683537175
    test 4001 252 252.028228084417 Beta(tan=3.08285, x=-0.308548, y=-0.951209): 3.077683537175
    test 4002 252 251.971675808314 Theta(tan=3.07251, x=-0.309487, y=-0.950904): 3.077683537175
    test 4003 252 252.000000000000 Mu(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 4004 252 251.971790388449 Chi(tan=3.07254, x=-0.309485, y=-0.950904): 3.077683537175
    test 4005 252 252.009406472364 Xi(tan=3.0794, x=-0.308861, y=-0.951107): 3.077683537175

    test 4006 252 252.084626804899 Phi(tan=3.09322, x=-1, y=-3.09322): 3.077683537175
    test 4007 252 252.028228084417 Beta(tan=3.08285, x=-1, y=-3.08285): 3.077683537175
    test 4008 252 251.971675808314 Theta(tan=3.07251, x=-1, y=-3.07251): 3.077683537175
    test 4009 252 252.000000000000 Mu(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 4010 252 251.971790388449 Chi(tan=3.07254, x=-1, y=-3.07254), iteration=3: 3.077683537175
    test 4011 252 252.009406472364 Xi(tan=3.0794, x=-0.620495, y=-1.91076), iteration=3: 3.077683537175

    test 4012 255 255.071975852574 Phi(tan=3.75089, x=-0.257605, y=-0.96625): 3.732050807569
    test 4013 255 255.024009380191 Beta(tan=3.73832, x=-0.258414, y=-0.966034): 3.732050807569
    test 4014 255 254.975903126796 Theta(tan=3.72578, x=-0.259225, y=-0.965817): 3.732050807569
    test 4015 255 255.000000000000 Mu(tan=3.73205, x=-0.258819, y=-0.965926): 3.732050807569
    test 4016 255 254.976003662210 Chi(tan=3.72581, x=-0.259224, y=-0.965817): 3.732050807569
    test 4017 255 255.008000999926 Xi(tan=3.73414, x=-0.258684, y=-0.965962): 3.732050807569

    test 4018 255 255.071975852574 Phi(tan=3.75089, x=-1, y=-3.75089): 3.732050807569
    test 4019 255 255.024009380191 Beta(tan=3.73832, x=-1, y=-3.73832): 3.732050807569
    test 4020 255 254.975903126796 Theta(tan=3.72578, x=-1, y=-3.72578): 3.732050807569
    test 4021 255 255.000000000000 Mu(tan=3.73205, x=-0.258819, y=-0.965926): 3.732050807569
    test 4022 255 254.976003662210 Chi(tan=3.72581, x=-1, y=-3.72581), iteration=3: 3.732050807569
    test 4023 255 255.008000999926 Xi(tan=3.73414, x=-0.519691, y=-1.9406), iteration=3: 3.732050807569

    test 4024 258 258.058542294726 Phi(tan=4.72838, x=-0.206912, y=-0.97836): 4.704630109478
    test 4025 258 258.019529048960 Beta(tan=4.71253, x=-0.207578, y=-0.978218): 4.704630109478
    test 4026 258 257.980395886833 Theta(tan=4.69673, x=-0.208246, y=-0.978076): 4.704630109478
    test 4027 258 258.000000000000 Mu(tan=4.70463, x=-0.207912, y=-0.978148): 4.704630109478
    test 4028 258 257.980479749733 Chi(tan=4.69676, x=-0.208245, y=-0.978077): 4.704630109478
    test 4029 258 258.006508177097 Xi(tan=4.70726, x=-0.207801, y=-0.978171): 4.704630109478

    test 4030 258 258.058542294726 Phi(tan=4.72838, x=-1, y=-4.72838): 4.704630109478
    test 4031 258 258.019529048960 Beta(tan=4.71253, x=-1, y=-4.71253): 4.704630109478
    test 4032 258 257.980395886833 Theta(tan=4.69673, x=-1, y=-4.69673): 4.704630109478
    test 4033 258 258.000000000000 Mu(tan=4.70463, x=-0.207912, y=-0.978148): 4.704630109478
    test 4034 258 257.980479749733 Chi(tan=4.69676, x=-1, y=-4.69676), iteration=2: 4.704630109478
    test 4035 258 258.006508177097 Xi(tan=4.70726, x=-0.417467, y=-1.96513), iteration=2: 4.704630109478

    test 4036 261 261.044472460742 Phi(tan=6.34563, x=-0.155668, y=-0.987809): 6.313751514675
    test 4037 261 261.014835975351 Beta(tan=6.32435, x=-0.156179, y=-0.987729): 6.313751514675
    test 4038 261 260.985104661672 Theta(tan=6.30315, x=-0.156691, y=-0.987648): 6.313751514675
    test 4039 261 261.000000000000 Mu(tan=6.31375, x=-0.156434, y=-0.987688): 6.313751514675
    test 4040 261 260.985169623641 Chi(tan=6.30319, x=-0.15669, y=-0.987648): 6.313751514675
    test 4041 261 261.004944315431 Xi(tan=6.31728, x=-0.156349, y=-0.987702): 6.313751514675

    test 4042 261 261.044472460742 Phi(tan=6.34563, x=-1, y=-6.34563): 6.313751514675
    test 4043 261 261.014835975351 Beta(tan=6.32435, x=-1, y=-6.32435): 6.313751514675
    test 4044 261 260.985104661672 Theta(tan=6.30315, x=-1, y=-6.30315): 6.313751514675
    test 4045 261 261.000000000000 Mu(tan=6.31375, x=-0.156434, y=-0.987688): 6.313751514675
    test 4046 261 260.985169623641 Chi(tan=6.30319, x=-1, y=-6.30319), iteration=3: 6.313751514675
    test 4047 261 261.004944315431 Xi(tan=6.31728, x=-0.314102, y=-1.98427), iteration=3: 6.313751514675

    test 4048 264 264.029919429066 Phi(tan=9.5624, x=-0.104009, y=-0.994576): 9.514364454223
    test 4049 264 264.009981321799 Beta(tan=9.53033, x=-0.104355, y=-0.99454): 9.514364454223
    test 4050 264 263.989977604222 Theta(tan=9.49838, x=-0.104702, y=-0.994504): 9.514364454223
    test 4051 264 264.000000000000 Mu(tan=9.51436, x=-0.104528, y=-0.994522): 9.514364454223
    test 4052 264 263.990021917793 Chi(tan=9.49845, x=-0.104702, y=-0.994504): 9.514364454223
    test 4053 264 264.003326493225 Xi(tan=9.51968, x=-0.104471, y=-0.994528): 9.514364454223

    test 4054 264 264.029919429066 Phi(tan=9.5624, x=-1, y=-9.5624): 9.514364454223
    test 4055 264 264.009981321799 Beta(tan=9.53033, x=-1, y=-9.53033): 9.514364454223
    test 4056 264 263.989977604222 Theta(tan=9.49838, x=-1, y=-9.49838): 9.514364454223
    test 4057 264 264.000000000000 Mu(tan=9.51436, x=-0.104528, y=-0.994522): 9.514364454223
    test 4058 264 263.990021917793 Chi(tan=9.49845, x=-1, y=-9.49845), iteration=3: 9.514364454223
    test 4059 264 264.003326493225 Xi(tan=9.51968, x=-0.20988, y=-1.99799), iteration=2: 9.514364454223

    test 4060 267 267.015041396677 Phi(tan=19.1775, x=-0.0520738, y=-0.998643): 19.081136687728
    test 4061 267 267.005017979129 Beta(tan=19.1132, x=-0.0522485, y=-0.998634): 19.081136687728
    test 4062 267 266.994961026315 Theta(tan=19.0491, x=-0.0524238, y=-0.998625): 19.081136687728
    test 4063 267 267.000000000000 Mu(tan=19.0811, x=-0.052336, y=-0.99863): 19.081136687728
    test 4064 267 266.994983489318 Chi(tan=19.0492, x=-0.0524234, y=-0.998625): 19.081136687728
    test 4065 267 267.001672370834 Xi(tan=19.0918, x=-0.0523068, y=-0.998631): 19.081136687728

    test 4066 267 267.015041396677 Phi(tan=19.1775, x=-1, y=-19.1775): 19.081136687728
    test 4067 267 267.005017979129 Beta(tan=19.1132, x=-1, y=-19.1132): 19.081136687728
    test 4068 267 266.994961026315 Theta(tan=19.0491, x=-1, y=-19.0491): 19.081136687728
    test 4069 267 267.000000000000 Mu(tan=19.0811, x=-0.052336, y=-0.99863): 19.081136687728
    test 4070 267 266.994983489318 Chi(tan=19.0492, x=-1, y=-19.0492), iteration=3: 19.081136687728
    test 4071 267 267.001672370834 Xi(tan=19.0918, x=-0.105083, y=-2.00623), iteration=3: 19.081136687728

    test 4072 270 270.000000000000 Phi(tan=-inf, x=0.0, y=-1): -inf
    test 4073 270 270.000000000000 Beta(tan=-inf, x=0.0, y=-1): -inf
    test 4074 270 270.000000000000 Theta(tan=-inf, x=0.0, y=-1): -inf
    test 4075 270 270.000000000000 Mu(tan=-inf, x=0.0, y=-1): -inf
    test 4076 270 270.000000000000 Chi(tan=-inf, x=0.0, y=-1): -inf
    test 4077 270 270.000000000000 Xi(tan=-inf, x=0.0, y=-1): -inf

    test 4078 270 270.000000000000 Phi(tan=-inf, x=0.0, y=-1): -inf
    test 4079 270 270.000000000000 Beta(tan=-inf, x=0.0, y=-1): -inf
    test 4080 270 270.000000000000 Theta(tan=-inf, x=0.0, y=-1): -inf
    test 4081 270 270.000000000000 Mu(tan=-inf, x=0.0, y=-1): -inf
    test 4082 270 270.000000000000 Chi(tan=-inf, x=0.0, y=-1): -inf
    test 4083 270 270.000000000000 Xi(tan=-inf, x=0.0, y=-1): -inf

    test 4084 273 272.984958603323 Phi(tan=-19.1775, x=0.0520738, y=-0.998643): -19.081136687728
    test 4085 273 272.994982020871 Beta(tan=-19.1132, x=0.0522485, y=-0.998634): -19.081136687728
    test 4086 273 273.005038973685 Theta(tan=-19.0491, x=0.0524238, y=-0.998625): -19.081136687728
    test 4087 273 273.000000000000 Mu(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 4088 273 273.005016510682 Chi(tan=-19.0492, x=0.0524234, y=-0.998625): -19.081136687728
    test 4089 273 272.998327629166 Xi(tan=-19.0918, x=0.0523068, y=-0.998631): -19.081136687728

    test 4090 273 272.984958603323 Phi(tan=-19.1775, x=1.0, y=-19.1775): -19.081136687728
    test 4091 273 272.994982020871 Beta(tan=-19.1132, x=1.0, y=-19.1132): -19.081136687728
    test 4092 273 273.005038973685 Theta(tan=-19.0491, x=1.0, y=-19.0491): -19.081136687728
    test 4093 273 273.000000000000 Mu(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 4094 273 273.005016510682 Chi(tan=-19.0492, x=1.0, y=-19.0492), iteration=3: -19.081136687728
    test 4095 273 272.998327629166 Xi(tan=-19.0918, x=0.105083, y=-2.00623), iteration=3: -19.081136687728

    test 4096 276 275.970080570934 Phi(tan=-9.5624, x=0.104009, y=-0.994576): -9.514364454223
    test 4097 276 275.990018678201 Beta(tan=-9.53033, x=0.104355, y=-0.99454): -9.514364454223
    test 4098 276 276.010022395778 Theta(tan=-9.49838, x=0.104702, y=-0.994504): -9.514364454223
    test 4099 276 276.000000000000 Mu(tan=-9.51436, x=0.104528, y=-0.994522): -9.514364454223
    test 4100 276 276.009978082207 Chi(tan=-9.49845, x=0.104702, y=-0.994504): -9.514364454223
    test 4101 276 275.996673506775 Xi(tan=-9.51968, x=0.104471, y=-0.994528): -9.514364454223

    test 4102 276 275.970080570934 Phi(tan=-9.5624, x=1.0, y=-9.5624): -9.514364454223
    test 4103 276 275.990018678201 Beta(tan=-9.53033, x=1.0, y=-9.53033): -9.514364454223
    test 4104 276 276.010022395778 Theta(tan=-9.49838, x=1.0, y=-9.49838): -9.514364454223
    test 4105 276 276.000000000000 Mu(tan=-9.51436, x=0.104528, y=-0.994522): -9.514364454223
    test 4106 276 276.009978082207 Chi(tan=-9.49845, x=1.0, y=-9.49845), iteration=3: -9.514364454223
    test 4107 276 275.996673506775 Xi(tan=-9.51968, x=0.20988, y=-1.99799), iteration=2: -9.514364454223

    test 4108 279 278.955527539258 Phi(tan=-6.34563, x=0.155668, y=-0.987809): -6.313751514675
    test 4109 279 278.985164024649 Beta(tan=-6.32435, x=0.156179, y=-0.987729): -6.313751514675
    test 4110 279 279.014895338328 Theta(tan=-6.30315, x=0.156691, y=-0.987648): -6.313751514675
    test 4111 279 279.000000000000 Mu(tan=-6.31375, x=0.156434, y=-0.987688): -6.313751514675
    test 4112 279 279.014830376359 Chi(tan=-6.30319, x=0.15669, y=-0.987648): -6.313751514675
    test 4113 279 278.995055684569 Xi(tan=-6.31728, x=0.156349, y=-0.987702): -6.313751514675

    test 4114 279 278.955527539258 Phi(tan=-6.34563, x=1.0, y=-6.34563): -6.313751514675
    test 4115 279 278.985164024649 Beta(tan=-6.32435, x=1.0, y=-6.32435): -6.313751514675
    test 4116 279 279.014895338328 Theta(tan=-6.30315, x=1.0, y=-6.30315): -6.313751514675
    test 4117 279 279.000000000000 Mu(tan=-6.31375, x=0.156434, y=-0.987688): -6.313751514675
    test 4118 279 279.014830376359 Chi(tan=-6.30319, x=1.0, y=-6.30319), iteration=3: -6.313751514675
    test 4119 279 278.995055684569 Xi(tan=-6.31728, x=0.314102, y=-1.98427), iteration=3: -6.313751514675

    test 4120 282 281.941457705274 Phi(tan=-4.72838, x=0.206912, y=-0.97836): -4.704630109478
    test 4121 282 281.980470951040 Beta(tan=-4.71253, x=0.207578, y=-0.978218): -4.704630109478
    test 4122 282 282.019604113166 Theta(tan=-4.69673, x=0.208246, y=-0.978076): -4.704630109478
    test 4123 282 282.000000000000 Mu(tan=-4.70463, x=0.207912, y=-0.978148): -4.704630109478
    test 4124 282 282.019520250267 Chi(tan=-4.69676, x=0.208245, y=-0.978077): -4.704630109478
    test 4125 282 281.993491822903 Xi(tan=-4.70726, x=0.207801, y=-0.978171): -4.704630109478

    test 4126 282 281.941457705274 Phi(tan=-4.72838, x=1.0, y=-4.72838): -4.704630109478
    test 4127 282 281.980470951040 Beta(tan=-4.71253, x=1.0, y=-4.71253): -4.704630109478
    test 4128 282 282.019604113166 Theta(tan=-4.69673, x=1.0, y=-4.69673): -4.704630109478
    test 4129 282 282.000000000000 Mu(tan=-4.70463, x=0.207912, y=-0.978148): -4.704630109478
    test 4130 282 282.019520250267 Chi(tan=-4.69676, x=1.0, y=-4.69676), iteration=2: -4.704630109478
    test 4131 282 281.993491822903 Xi(tan=-4.70726, x=0.417467, y=-1.96513), iteration=2: -4.704630109478

    test 4132 285 284.928024147426 Phi(tan=-3.75089, x=0.257605, y=-0.96625): -3.732050807569
    test 4133 285 284.975990619809 Beta(tan=-3.73832, x=0.258414, y=-0.966034): -3.732050807569
    test 4134 285 285.024096873204 Theta(tan=-3.72578, x=0.259225, y=-0.965817): -3.732050807569
    test 4135 285 285.000000000000 Mu(tan=-3.73205, x=0.258819, y=-0.965926): -3.732050807569
    test 4136 285 285.023996337790 Chi(tan=-3.72581, x=0.259224, y=-0.965817): -3.732050807569
    test 4137 285 284.991999000074 Xi(tan=-3.73414, x=0.258684, y=-0.965962): -3.732050807569

    test 4138 285 284.928024147426 Phi(tan=-3.75089, x=1.0, y=-3.75089): -3.732050807569
    test 4139 285 284.975990619809 Beta(tan=-3.73832, x=1.0, y=-3.73832): -3.732050807569
    test 4140 285 285.024096873204 Theta(tan=-3.72578, x=1.0, y=-3.72578): -3.732050807569
    test 4141 285 285.000000000000 Mu(tan=-3.73205, x=0.258819, y=-0.965926): -3.732050807569
    test 4142 285 285.023996337790 Chi(tan=-3.72581, x=1.0, y=-3.72581), iteration=3: -3.732050807569
    test 4143 285 284.991999000074 Xi(tan=-3.73414, x=0.519691, y=-1.9406), iteration=3: -3.732050807569

    test 4144 288 287.915373195101 Phi(tan=-3.09322, x=0.307612, y=-0.951512): -3.077683537175
    test 4145 288 287.971771915583 Beta(tan=-3.08285, x=0.308548, y=-0.951209): -3.077683537175
    test 4146 288 288.028324191686 Theta(tan=-3.07251, x=0.309487, y=-0.950904): -3.077683537175
    test 4147 288 288.000000000000 Mu(tan=-3.07768, x=0.309017, y=-0.951057): -3.077683537175
    test 4148 288 288.028209611551 Chi(tan=-3.07254, x=0.309485, y=-0.950904): -3.077683537175
    test 4149 288 287.990593527636 Xi(tan=-3.0794, x=0.308861, y=-0.951107): -3.077683537175

    test 4150 288 287.915373195101 Phi(tan=-3.09322, x=1.0, y=-3.09322): -3.077683537175
    test 4151 288 287.971771915583 Beta(tan=-3.08285, x=1.0, y=-3.08285): -3.077683537175
    test 4152 288 288.028324191686 Theta(tan=-3.07251, x=1.0, y=-3.07251): -3.077683537175
    test 4153 288 288.000000000000 Mu(tan=-3.07768, x=0.309017, y=-0.951057): -3.077683537175
    test 4154 288 288.028209611551 Chi(tan=-3.07254, x=1.0, y=-3.07254), iteration=3: -3.077683537175
    test 4155 288 287.990593527636 Xi(tan=-3.0794, x=0.620495, y=-1.91076), iteration=3: -3.077683537175

    test 4156 291 290.903642862528 Phi(tan=-2.61824, x=0.356797, y=-0.934182): -2.605089064694
    test 4157 291 290.967860918437 Beta(tan=-2.60946, x=0.357844, y=-0.933781): -2.605089064694
    test 4158 291 291.032239612604 Theta(tan=-2.60071, x=0.358893, y=-0.933379): -2.605089064694
    test 4159 291 291.000000000000 Mu(tan=-2.60509, x=0.358368, y=-0.93358): -2.605089064694
    test 4160 291 291.032113919504 Chi(tan=-2.60073, x=0.358891, y=-0.933379): -2.605089064694
    test 4161 291 290.989290773608 Xi(tan=-2.60655, x=0.358193, y=-0.933647): -2.605089064694

    test 4162 291 290.903642862528 Phi(tan=-2.61824, x=1.0, y=-2.61824): -2.605089064694
    test 4163 291 290.967860918437 Beta(tan=-2.60946, x=1.0, y=-2.60946): -2.605089064694
    test 4164 291 291.032239612604 Theta(tan=-2.60071, x=1.0, y=-2.60071): -2.605089064694
    test 4165 291 291.000000000000 Mu(tan=-2.60509, x=0.358368, y=-0.93358): -2.605089064694
    test 4166 291 291.032113919504 Chi(tan=-2.60073, x=1.0, y=-2.60073), iteration=3: -2.605089064694
    test 4167 291 290.989290773608 Xi(tan=-2.60655, x=0.719603, y=-1.87568), iteration=2: -2.605089064694

    test 4168 294 293.892961362638 Phi(tan=-2.25738, x=0.405029, y=-0.914304): -2.246036773904
    test 4169 294 293.964300405205 Beta(tan=-2.24981, x=0.406167, y=-0.913799): -2.246036773904
    test 4170 294 294.035800165821 Theta(tan=-2.24227, x=0.407307, y=-0.913291): -2.246036773904
    test 4171 294 294.000000000000 Mu(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 4172 294 294.035666490170 Chi(tan=-2.24228, x=0.407305, y=-0.913292): -2.246036773904
    test 4173 294 293.988104995444 Xi(tan=-2.24729, x=0.406547, y=-0.91363): -2.246036773904

    test 4174 294 293.892961362638 Phi(tan=-2.25738, x=1.0, y=-2.25738): -2.246036773904
    test 4175 294 293.964300405205 Beta(tan=-2.24981, x=1.0, y=-2.24981): -2.246036773904
    test 4176 294 294.035800165821 Theta(tan=-2.24227, x=1.0, y=-2.24227): -2.246036773904
    test 4177 294 294.000000000000 Mu(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 4178 294 294.035666490170 Chi(tan=-2.24228, x=1.0, y=-2.24228), iteration=3: -2.246036773904
    test 4179 294 293.988104995444 Xi(tan=-2.24729, x=0.816745, y=-1.83546), iteration=3: -2.246036773904

    test 4180 297 296.883445716039 Phi(tan=-1.97252, x=0.452177, y=-0.891928): -1.962610505505
    test 4181 297 296.961129384050 Beta(tan=-1.96591, x=0.453386, y=-0.891314): -1.962610505505
    test 4182 297 297.038966841014 Theta(tan=-1.95932, x=0.454596, y=-0.890698): -1.962610505505
    test 4183 297 297.000000000000 Mu(tan=-1.96261, x=0.45399, y=-0.891007): -1.962610505505
    test 4184 297 297.038828401023 Chi(tan=-1.95933, x=0.454594, y=-0.890699): -1.962610505505
    test 4185 297 296.987049184524 Xi(tan=-1.96371, x=0.453789, y=-0.891109): -1.962610505505

    test 4186 297 296.883445716039 Phi(tan=-1.97252, x=1.0, y=-1.97252): -1.962610505505
    test 4187 297 296.961129384050 Beta(tan=-1.96591, x=1.0, y=-1.96591): -1.962610505505
    test 4188 297 297.038966841014 Theta(tan=-1.95932, x=1.0, y=-1.95932): -1.962610505505
    test 4189 297 297.000000000000 Mu(tan=-1.96261, x=0.45399, y=-0.891007): -1.962610505505
    test 4190 297 297.038828401023 Chi(tan=-1.95933, x=1.0, y=-1.95933), iteration=3: -1.962610505505
    test 4191 297 296.987049184524 Xi(tan=-1.96371, x=0.911653, y=-1.79022), iteration=3: -1.962610505505

    test 4192 300 299.875200469702 Phi(tan=-1.7408, x=0.498112, y=-0.867112): -1.732050807569
    test 4193 300 299.958382667233 Beta(tan=-1.73496, x=0.499371, y=-0.866388): -1.732050807569
    test 4194 300 300.041705015092 Theta(tan=-1.72914, x=0.50063, y=-0.865661): -1.732050807569
    test 4195 300 300.000000000000 Mu(tan=-1.73205, x=0.5, y=-0.866025): -1.732050807569
    test 4196 300 300.041565004922 Chi(tan=-1.72915, x=0.500628, y=-0.865662): -1.732050807569
    test 4197 300 299.986134923838 Xi(tan=-1.73302, x=0.49979, y=-0.866146): -1.732050807569

    test 4198 300 299.875200469702 Phi(tan=-1.7408, x=1.0, y=-1.7408): -1.732050807569
    test 4199 300 299.958382667233 Beta(tan=-1.73496, x=1.0, y=-1.73496): -1.732050807569
    test 4200 300 300.041705015092 Theta(tan=-1.72914, x=1.0, y=-1.72914): -1.732050807569
    test 4201 300 300.000000000000 Mu(tan=-1.73205, x=0.5, y=-0.866025): -1.732050807569
    test 4202 300 300.041565004922 Chi(tan=-1.72915, x=1.0, y=-1.72915), iteration=3: -1.732050807569
    test 4203 300 299.986134923838 Xi(tan=-1.73302, x=1.00407, y=-1.74007), iteration=2: -1.732050807569

    test 4204 303 302.868316539332 Phi(tan=-1.54764, x=0.54271, y=-0.83992): -1.539864963815
    test 4205 303 302.956090486754 Beta(tan=-1.54245, x=0.543996, y=-0.839088): -1.539864963815
    test 4206 303 303.043984828414 Theta(tan=-1.53728, x=0.545283, y=-0.838252): -1.539864963815
    test 4207 303 303.000000000000 Mu(tan=-1.53986, x=0.544639, y=-0.838671): -1.539864963815
    test 4208 303 303.043846309896 Chi(tan=-1.53729, x=0.545281, y=-0.838254): -1.539864963815
    test 4209 303 302.985372260437 Xi(tan=-1.54073, x=0.544425, y=-0.83881): -1.539864963815

    test 4210 303 302.868316539332 Phi(tan=-1.54764, x=1.0, y=-1.54764): -1.539864963815
    test 4211 303 302.956090486754 Beta(tan=-1.54245, x=1.0, y=-1.54245): -1.539864963815
    test 4212 303 303.043984828414 Theta(tan=-1.53728, x=1.0, y=-1.53728): -1.539864963815
    test 4213 303 303.000000000000 Mu(tan=-1.53986, x=0.544639, y=-0.838671): -1.539864963815
    test 4214 303 303.043846309896 Chi(tan=-1.53729, x=1.0, y=-1.53729), iteration=3: -1.539864963815
    test 4215 303 302.985372260437 Xi(tan=-1.54073, x=1.09374, y=-1.68515), iteration=2: -1.539864963815

    test 4216 306 305.862870188589 Phi(tan=-1.38333, x=0.585847, y=-0.810421): -1.376381920471
    test 4217 306 305.954278157197 Beta(tan=-1.37869, x=0.587139, y=-0.809486): -1.376381920471
    test 4218 306 306.045781505815 Theta(tan=-1.37407, x=0.588431, y=-0.808547): -1.376381920471
    test 4219 306 306.000000000000 Mu(tan=-1.37638, x=0.587785, y=-0.809017): -1.376381920471
    test 4220 306 306.045647308130 Chi(tan=-1.37408, x=0.58843, y=-0.808548): -1.376381920471
    test 4221 306 305.984769594047 Xi(tan=-1.37715, x=0.58757, y=-0.809173): -1.376381920471

    test 4222 306 305.862870188589 Phi(tan=-1.38333, x=1.0, y=-1.38333): -1.376381920471
    test 4223 306 305.954278157197 Beta(tan=-1.37869, x=1.0, y=-1.37869): -1.376381920471
    test 4224 306 306.045781505815 Theta(tan=-1.37407, x=1.0, y=-1.37407): -1.376381920471
    test 4225 306 306.000000000000 Mu(tan=-1.37638, x=0.587785, y=-0.809017): -1.376381920471
    test 4226 306 306.045647308130 Chi(tan=-1.37408, x=1.0, y=-1.37408), iteration=3: -1.376381920471
    test 4227 306 305.984769594047 Xi(tan=-1.37715, x=1.18042, y=-1.62561), iteration=3: -1.376381920471

    test 4228 309 308.858922157346 Phi(tan=-1.24113, x=0.627405, y=-0.778693): -1.234897156535
    test 4229 309 308.952965789707 Beta(tan=-1.23697, x=0.628682, y=-0.777662): -1.234897156535
    test 4230 309 309.047075619188 Theta(tan=-1.23282, x=0.629959, y=-0.776629): -1.234897156535
    test 4231 309 309.000000000000 Mu(tan=-1.2349, x=0.62932, y=-0.777146): -1.234897156535
    test 4232 309 309.046948250528 Chi(tan=-1.23283, x=0.629957, y=-0.77663): -1.234897156535
    test 4233 309 308.984333583145 Xi(tan=-1.23559, x=0.629108, y=-0.777318): -1.234897156535

    test 4234 309 308.858922157346 Phi(tan=-1.24113, x=1.0, y=-1.24113): -1.234897156535
    test 4235 309 308.952965789707 Beta(tan=-1.23697, x=1.0, y=-1.23697): -1.234897156535
    test 4236 309 309.047075619188 Theta(tan=-1.23282, x=1.0, y=-1.23282): -1.234897156535
    test 4237 309 309.000000000000 Mu(tan=-1.2349, x=0.62932, y=-0.777146): -1.234897156535
    test 4238 309 309.046948250528 Chi(tan=-1.23283, x=1.0, y=-1.23283), iteration=3: -1.234897156535
    test 4239 309 308.984333583145 Xi(tan=-1.23559, x=1.26387, y=-1.56162), iteration=2: -1.234897156535

    test 4240 312 311.856516950077 Phi(tan=-1.11622, x=0.667267, y=-0.744818): -1.110612514829
    test 4241 312 311.952168060623 Beta(tan=-1.11248, x=0.66851, y=-0.743703): -1.110612514829
    test 4242 312 312.047853289137 Theta(tan=-1.10875, x=0.669751, y=-0.742586): -1.110612514829
    test 4243 312 312.000000000000 Mu(tan=-1.11061, x=0.669131, y=-0.743145): -1.110612514829
    test 4244 312 312.047734863814 Chi(tan=-1.10875, x=0.66975, y=-0.742587): -1.110612514829
    test 4245 312 311.984069069601 Xi(tan=-1.11123, x=0.668924, y=-0.743331): -1.110612514829

    test 4246 312 311.856516950077 Phi(tan=-1.11622, x=1.0, y=-1.11622): -1.110612514829
    test 4247 312 311.952168060623 Beta(tan=-1.11248, x=1.0, y=-1.11248): -1.110612514829
    test 4248 312 312.047853289137 Theta(tan=-1.10875, x=1.0, y=-1.10875): -1.110612514829
    test 4249 312 312.000000000000 Mu(tan=-1.11061, x=0.669131, y=-0.743145): -1.110612514829
    test 4250 312 312.047734863814 Chi(tan=-1.10875, x=1.0, y=-1.10875), iteration=2: -1.110612514829
    test 4251 312 311.984069069601 Xi(tan=-1.11123, x=1.34385, y=-1.49334), iteration=3: -1.110612514829

    test 4252 315 314.855682294112 Phi(tan=-1.00505, x=0.705323, y=-0.708886): -1.000000000000
    test 4253 315 314.951894037750 Beta(tan=-1.00168, x=0.706513, y=-0.7077): -1.000000000000
    test 4254 315 315.048106323978 Theta(tan=-0.998322, x=0.7077, y=-0.706513): -1.000000000000
    test 4255 315 315.000000000000 Mu(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 4256 315 315.047998507775 Chi(tan=-0.998326, x=0.707699, y=-0.706514): -1.000000000000
    test 4257 315 314.983979022806 Xi(tan=-1.00056, x=0.706909, y=-0.707304): -1.000000000000

    test 4258 315 314.855682294112 Phi(tan=-1.00505, x=1.0, y=-1.00505): -1.000000000000
    test 4259 315 314.951894037750 Beta(tan=-1.00168, x=1.0, y=-1.00168): -1.000000000000
    test 4260 315 315.048106323978 Theta(tan=-0.998322, x=1.0, y=-0.998322): -1.000000000000
    test 4261 315 315.000000000000 Mu(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 4262 315 315.047998507775 Chi(tan=-0.998326, x=1.0, y=-0.998326), iteration=3: -1.000000000000
    test 4263 315 314.983979022806 Xi(tan=-1.00056, x=1.42017, y=-1.42096), iteration=2: -1.000000000000

    test 4264 318 317.856428776038 Phi(tan=-0.904952, x=0.741466, y=-0.670991): -0.900404044298
    test 4265 318 317.952147066741 Beta(tan=-0.901917, x=0.742586, y=-0.669751): -0.900404044298
    test 4266 318 318.047832295130 Theta(tan=-0.898894, x=0.743703, y=-0.66851): -0.900404044298
    test 4267 318 318.000000000000 Mu(tan=-0.900404, x=0.743145, y=-0.669131): -0.900404044298
    test 4268 318 318.047736270873 Chi(tan=-0.898897, x=0.743702, y=-0.668511): -0.900404044298
    test 4269 318 317.984064504032 Xi(tan=-0.900908, x=0.742959, y=-0.669337): -0.900404044298

    test 4270 318 317.856428776038 Phi(tan=-0.904952, x=1.0, y=-0.904952): -0.900404044298
    test 4271 318 317.952147066741 Beta(tan=-0.901917, x=1.0, y=-0.901917): -0.900404044298
    test 4272 318 318.047832295130 Theta(tan=-0.898894, x=1.0, y=-0.898894): -0.900404044298
    test 4273 318 318.000000000000 Mu(tan=-0.900404, x=0.743145, y=-0.669131): -0.900404044298
    test 4274 318 318.047736270873 Chi(tan=-0.898897, x=1.0, y=-0.898897), iteration=3: -0.900404044298
    test 4275 318 317.984064504032 Xi(tan=-0.900908, x=1.49259, y=-1.34469), iteration=3: -0.900404044298

    test 4276 321 320.858749662796 Phi(tan=-0.813874, x=0.775592, y=-0.631234): -0.809784033195
    test 4277 321 320.952924719459 Beta(tan=-0.811145, x=0.776629, y=-0.629959): -0.809784033195
    test 4278 321 321.047034548704 Theta(tan=-0.808426, x=0.777662, y=-0.628682): -0.809784033195
    test 4279 321 321.000000000000 Mu(tan=-0.809784, x=0.777146, y=-0.62932): -0.809784033195
    test 4280 321 321.046951003152 Chi(tan=-0.808428, x=0.777661, y=-0.628683): -0.809784033195
    test 4281 321 320.984324651541 Xi(tan=-0.810237, x=0.776974, y=-0.629533): -0.809784033195

    test 4282 321 320.858749662796 Phi(tan=-0.813874, x=1.0, y=-0.813874): -0.809784033195
    test 4283 321 320.952924719459 Beta(tan=-0.811145, x=1.0, y=-0.811145): -0.809784033195
    test 4284 321 321.047034548704 Theta(tan=-0.808426, x=1.0, y=-0.808426): -0.809784033195
    test 4285 321 321.000000000000 Mu(tan=-0.809784, x=0.777146, y=-0.62932): -0.809784033195
    test 4286 321 321.046951003152 Chi(tan=-0.808428, x=1.0, y=-0.808428), iteration=2: -0.809784033195
    test 4287 321 320.984324651541 Xi(tan=-0.810237, x=1.56092, y=-1.26472), iteration=2: -0.809784033195

    test 4288 324 323.862620912178 Phi(tan=-0.730212, x=0.807605, y=-0.589723): -0.726542528005
    test 4289 324 323.954218805520 Beta(tan=-0.727764, x=0.808547, y=-0.588431): -0.726542528005
    test 4290 324 324.045722153815 Theta(tan=-0.725324, x=0.809486, y=-0.587139): -0.726542528005
    test 4291 324 324.000000000000 Mu(tan=-0.726543, x=0.809017, y=-0.587785): -0.726542528005
    test 4292 324 324.045651286019 Chi(tan=-0.725326, x=0.809485, y=-0.58714): -0.726542528005
    test 4293 324 323.984756686758 Xi(tan=-0.726949, x=0.808861, y=-0.588): -0.726542528005

    test 4294 324 323.862620912178 Phi(tan=-0.730212, x=1.0, y=-0.730212): -0.726542528005
    test 4295 324 323.954218805520 Beta(tan=-0.727764, x=1.0, y=-0.727764): -0.726542528005
    test 4296 324 324.045722153815 Theta(tan=-0.725324, x=1.0, y=-0.725324): -0.726542528005
    test 4297 324 324.000000000000 Mu(tan=-0.726543, x=0.809017, y=-0.587785): -0.726542528005
    test 4298 324 324.045651286019 Chi(tan=-0.725326, x=1.0, y=-0.725326), iteration=3: -0.726542528005
    test 4299 324 323.984756686758 Xi(tan=-0.726949, x=1.62498, y=-1.18128), iteration=2: -0.726542528005

    test 4300 327 326.868001375396 Phi(tan=-0.652688, x=0.837414, y=-0.54657): -0.649407593198
    test 4301 327 326.956015447561 Beta(tan=-0.6505, x=0.838252, y=-0.545283): -0.649407593198
    test 4302 327 327.043909788845 Theta(tan=-0.648319, x=0.839088, y=-0.543996): -0.649407593198
    test 4303 327 327.000000000000 Mu(tan=-0.649408, x=0.838671, y=-0.544639): -0.649407593198
    test 4304 327 327.043851339199 Chi(tan=-0.64832, x=0.839087, y=-0.543997): -0.649407593198
    test 4305 327 326.985355941569 Xi(tan=-0.649771, x=0.838531, y=-0.544853): -0.649407593198

    test 4306 327 326.868001375396 Phi(tan=-0.652688, x=1.0, y=-0.652688): -0.649407593198
    test 4307 327 326.956015447561 Beta(tan=-0.6505, x=1.0, y=-0.6505): -0.649407593198
    test 4308 327 327.043909788845 Theta(tan=-0.648319, x=1.0, y=-0.648319): -0.649407593198
    test 4309 327 327.000000000000 Mu(tan=-0.649408, x=0.838671, y=-0.544639): -0.649407593198
    test 4310 327 327.043851339199 Chi(tan=-0.64832, x=1.0, y=-0.64832), iteration=3: -0.649407593198
    test 4311 327 326.985355941569 Xi(tan=-0.649771, x=1.68459, y=-1.0946), iteration=3: -0.649407593198

    test 4312 330 329.874833192166 Phi(tan=-0.580267, x=0.864931, y=-0.501891): -0.577350269190
    test 4313 330 329.958295220056 Beta(tan=-0.578321, x=0.865661, y=-0.50063): -0.577350269190
    test 4314 330 330.041617567521 Theta(tan=-0.576382, x=0.866388, y=-0.499371): -0.577350269190
    test 4315 330 330.000000000000 Mu(tan=-0.57735, x=0.866025, y=-0.5): -0.577350269190
    test 4316 330 330.041570865839 Chi(tan=-0.576383, x=0.866388, y=-0.499372): -0.577350269190
    test 4317 330 329.986115906599 Xi(tan=-0.577673, x=0.865904, y=-0.50021): -0.577350269190

    test 4318 330 329.874833192166 Phi(tan=-0.580267, x=1.0, y=-0.580267): -0.577350269190
    test 4319 330 329.958295220056 Beta(tan=-0.578321, x=1.0, y=-0.578321): -0.577350269190
    test 4320 330 330.041617567521 Theta(tan=-0.576382, x=1.0, y=-0.576382): -0.577350269190
    test 4321 330 330.000000000000 Mu(tan=-0.57735, x=0.866025, y=-0.5): -0.577350269190
    test 4322 330 330.041570865839 Chi(tan=-0.576383, x=1.0, y=-0.576383), iteration=2: -0.577350269190
    test 4323 330 329.986115906599 Xi(tan=-0.577673, x=1.73958, y=-1.00491), iteration=2: -0.577350269190

    test 4324 333 332.883042376477 Phi(tan=-0.512099, x=0.890078, y=-0.455808): -0.509525449494
    test 4325 333 332.961033350715 Beta(tan=-0.510382, x=0.890698, y=-0.454596): -0.509525449494
    test 4326 333 333.038870807301 Theta(tan=-0.508671, x=0.891314, y=-0.453386): -0.509525449494
    test 4327 333 333.000000000000 Mu(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494
    test 4328 333 333.038834837406 Chi(tan=-0.508672, x=0.891314, y=-0.453386): -0.509525449494
    test 4329 333 332.987028300052 Xi(tan=-0.509811, x=0.890904, y=-0.454192): -0.509525449494

    test 4330 333 332.883042376477 Phi(tan=-0.512099, x=1.0, y=-0.512099): -0.509525449494
    test 4331 333 332.961033350715 Beta(tan=-0.510382, x=1.0, y=-0.510382): -0.509525449494
    test 4332 333 333.038870807301 Theta(tan=-0.508671, x=1.0, y=-0.508671): -0.509525449494
    test 4333 333 333.000000000000 Mu(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494
    test 4334 333 333.038834837406 Chi(tan=-0.508672, x=1.0, y=-0.508672), iteration=3: -0.509525449494
    test 4335 333 332.987028300052 Xi(tan=-0.509811, x=1.78981, y=-0.912463), iteration=2: -0.509525449494

    test 4336 336 335.892539588775 Phi(tan=-0.447478, x=0.912781, y=-0.408449): -0.445228685309
    test 4337 336 335.964199982805 Beta(tan=-0.445978, x=0.913291, y=-0.407307): -0.445228685309
    test 4338 336 336.035699743087 Theta(tan=-0.444482, x=0.913799, y=-0.406167): -0.445228685309
    test 4339 336 336.000000000000 Mu(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 4340 336 336.035673220720 Chi(tan=-0.444483, x=0.913799, y=-0.406168): -0.445228685309
    test 4341 336 335.988083156490 Xi(tan=-0.445478, x=0.913461, y=-0.406927): -0.445228685309

    test 4342 336 335.892539588775 Phi(tan=-0.447478, x=1.0, y=-0.447478): -0.445228685309
    test 4343 336 335.964199982805 Beta(tan=-0.445978, x=1.0, y=-0.445978): -0.445228685309
    test 4344 336 336.035699743087 Theta(tan=-0.444482, x=1.0, y=-0.444482): -0.445228685309
    test 4345 336 336.000000000000 Mu(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 4346 336 336.035673220720 Chi(tan=-0.444483, x=1.0, y=-0.444483), iteration=2: -0.445228685309
    test 4347 336 335.988083156490 Xi(tan=-0.445478, x=1.83512, y=-0.817507), iteration=3: -0.445228685309

    test 4348 339 338.903221087852 Phi(tan=-0.385803, x=0.932974, y=-0.359944): -0.383864035035
    test 4349 339 338.967760495904 Beta(tan=-0.38451, x=0.933379, y=-0.358893): -0.383864035035
    test 4350 339 339.032139189801 Theta(tan=-0.383221, x=0.933781, y=-0.357844): -0.383864035035
    test 4351 339 339.000000000000 Mu(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035
    test 4352 339 339.032120650064 Chi(tan=-0.383221, x=0.933781, y=-0.357845): -0.383864035035
    test 4353 339 338.989268934636 Xi(tan=-0.384079, x=0.933513, y=-0.358543): -0.383864035035

    test 4354 339 338.903221087852 Phi(tan=-0.385803, x=1.0, y=-0.385803): -0.383864035035
    test 4355 339 338.967760495904 Beta(tan=-0.38451, x=1.0, y=-0.38451): -0.383864035035
    test 4356 339 339.032139189801 Theta(tan=-0.383221, x=1.0, y=-0.383221): -0.383864035035
    test 4357 339 339.000000000000 Mu(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035
    test 4358 339 339.032120650064 Chi(tan=-0.383221, x=1.0, y=-0.383221), iteration=3: -0.383864035035
    test 4359 339 338.989268934636 Xi(tan=-0.384079, x=1.87541, y=-0.720305), iteration=3: -0.383864035035

    test 4360 342 341.914969853244 Phi(tan=-0.326561, x=0.950597, y=-0.310428): -0.324919696233
    test 4361 342 341.971675881873 Beta(tan=-0.325466, x=0.950904, y=-0.309487): -0.324919696233
    test 4362 342 342.028228157776 Theta(tan=-0.324375, x=0.951209, y=-0.308548): -0.324919696233
    test 4363 342 342.000000000000 Mu(tan=-0.32492, x=0.951057, y=-0.309017): -0.324919696233
    test 4364 342 342.028216047963 Chi(tan=-0.324375, x=0.951209, y=-0.308549): -0.324919696233
    test 4365 342 341.990572643116 Xi(tan=-0.325102, x=0.951006, y=-0.309173): -0.324919696233

    test 4366 342 341.914969853244 Phi(tan=-0.326561, x=1.0, y=-0.326561): -0.324919696233
    test 4367 342 341.971675881873 Beta(tan=-0.325466, x=1.0, y=-0.325466): -0.324919696233
    test 4368 342 342.028228157776 Theta(tan=-0.324375, x=1.0, y=-0.324375): -0.324919696233
    test 4369 342 342.000000000000 Mu(tan=-0.32492, x=0.951057, y=-0.309017): -0.324919696233
    test 4370 342 342.028216047963 Chi(tan=-0.324375, x=1.0, y=-0.324375), iteration=3: -0.324919696233
    test 4371 342 341.990572643116 Xi(tan=-0.325102, x=1.91055, y=-0.621123), iteration=3: -0.324919696233

    test 4372 345 344.927656866509 Phi(tan=-0.269303, x=0.965598, y=-0.260038): -0.267949192431
    test 4373 345 344.975903172079 Beta(tan=-0.2684, x=0.965817, y=-0.259225): -0.267949192431
    test 4374 345 345.024009425342 Theta(tan=-0.2675, x=0.966034, y=-0.258414): -0.267949192431
    test 4375 345 345.000000000000 Mu(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431
    test 4376 345 345.024002198750 Chi(tan=-0.2675, x=0.966034, y=-0.258414): -0.267949192431
    test 4377 345 344.991979982763 Xi(tan=-0.268099, x=0.96589, y=-0.258954): -0.267949192431

    test 4378 345 344.927656866509 Phi(tan=-0.269303, x=1.0, y=-0.269303): -0.267949192431
    test 4379 345 344.975903172079 Beta(tan=-0.2684, x=1.0, y=-0.2684): -0.267949192431
    test 4380 345 345.024009425342 Theta(tan=-0.2675, x=1.0, y=-0.2675): -0.267949192431
    test 4381 345 345.000000000000 Mu(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431
    test 4382 345 345.024002198750 Chi(tan=-0.2675, x=1.0, y=-0.2675), iteration=3: -0.267949192431
    test 4383 345 344.991979982763 Xi(tan=-0.268099, x=1.94045, y=-0.520234), iteration=2: -0.267949192431

    test 4384 348 347.941142537455 Phi(tan=-0.21363, x=0.977934, y=-0.208916): -0.212556561670
    test 4385 348 347.980395911211 Beta(tan=-0.212914, x=0.978076, y=-0.208246): -0.212556561670
    test 4386 348 348.019529073263 Theta(tan=-0.2122, x=0.978218, y=-0.207578): -0.212556561670
    test 4387 348 348.000000000000 Mu(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670
    test 4388 348 348.019525279620 Chi(tan=-0.2122, x=0.978218, y=-0.207578): -0.212556561670
    test 4389 348 347.993475503952 Xi(tan=-0.212676, x=0.978124, y=-0.208023): -0.212556561670

    test 4390 348 347.941142537455 Phi(tan=-0.21363, x=1.0, y=-0.21363): -0.212556561670
    test 4391 348 347.980395911211 Beta(tan=-0.212914, x=1.0, y=-0.212914): -0.212556561670
    test 4392 348 348.019529073263 Theta(tan=-0.2122, x=1.0, y=-0.2122): -0.212556561670
    test 4393 348 348.000000000000 Mu(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670
    test 4394 348 348.019525279620 Chi(tan=-0.2122, x=1.0, y=-0.2122), iteration=3: -0.212556561670
    test 4395 348 347.993475503952 Xi(tan=-0.212676, x=1.96503, y=-0.417914), iteration=3: -0.212556561670

    test 4396 351 350.955278259134 Phi(tan=-0.159185, x=0.987566, y=-0.157205): -0.158384440325
    test 4397 351 350.985104672364 Beta(tan=-0.158651, x=0.987648, y=-0.156691): -0.158384440325
    test 4398 351 351.014835986008 Theta(tan=-0.158119, x=0.987729, y=-0.156179): -0.158384440325
    test 4399 351 351.000000000000 Mu(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325
    test 4400 351 351.014834354295 Chi(tan=-0.158119, x=0.987729, y=-0.156179): -0.158384440325
    test 4401 351 350.995042777201 Xi(tan=-0.158473, x=0.987675, y=-0.15652): -0.158384440325

    test 4402 351 350.955278259134 Phi(tan=-0.159185, x=1.0, y=-0.159185): -0.158384440325
    test 4403 351 350.985104672364 Beta(tan=-0.158651, x=1.0, y=-0.158651): -0.158384440325
    test 4404 351 351.014835986008 Theta(tan=-0.158119, x=1.0, y=-0.158119): -0.158384440325
    test 4405 351 351.000000000000 Mu(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325
    test 4406 351 351.014834354295 Chi(tan=-0.158119, x=1.0, y=-0.158119), iteration=3: -0.158384440325
    test 4407 351 350.995042777201 Xi(tan=-0.158473, x=1.98422, y=-0.314445), iteration=2: -0.158384440325

    test 4408 354 353.969908073482 Phi(tan=-0.105635, x=0.994467, y=-0.105051): -0.105104235266
    test 4409 354 353.989977607478 Beta(tan=-0.105281, x=0.994504, y=-0.104702): -0.105104235266
    test 4410 354 354.009981325045 Theta(tan=-0.104928, x=0.99454, y=-0.104355): -0.105104235266
    test 4411 354 354.000000000000 Mu(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266
    test 4412 354 354.009980834868 Chi(tan=-0.104928, x=0.99454, y=-0.104355): -0.105104235266
    test 4413 354 353.996664575109 Xi(tan=-0.105163, x=0.994516, y=-0.104586): -0.105104235266

    test 4414 354 353.969908073482 Phi(tan=-0.105635, x=1.0, y=-0.105635): -0.105104235266
    test 4415 354 353.989977607478 Beta(tan=-0.105281, x=1.0, y=-0.105281): -0.105104235266
    test 4416 354 354.009981325045 Theta(tan=-0.104928, x=1.0, y=-0.104928): -0.105104235266
    test 4417 354 354.000000000000 Mu(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266
    test 4418 354 354.009980834868 Chi(tan=-0.104928, x=1.0, y=-0.104928), iteration=3: -0.105104235266
    test 4419 354 353.996664575109 Xi(tan=-0.105163, x=1.99796, y=-0.210112), iteration=2: -0.105104235266

    test 4420 357 356.984870427697 Phi(tan=-0.0526726, x=0.998616, y=-0.0525997): -0.052407779283
    test 4421 357 356.994961026729 Beta(tan=-0.052496, x=0.998625, y=-0.0524238): -0.052407779283
    test 4422 357 357.005017979541 Theta(tan=-0.05232, x=0.998634, y=-0.0522485): -0.052407779283
    test 4423 357 357.000000000000 Mu(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 4424 357 357.005017917762 Chi(tan=-0.05232, x=0.998634, y=-0.0522485): -0.052407779283
    test 4425 357 356.998323063562 Xi(tan=-0.0524371, x=0.998628, y=-0.0523652): -0.052407779283

    test 4426 357 356.984870427697 Phi(tan=-0.0526726, x=1.0, y=-0.0526726): -0.052407779283
    test 4427 357 356.994961026729 Beta(tan=-0.052496, x=1.0, y=-0.052496): -0.052407779283
    test 4428 357 357.005017979541 Theta(tan=-0.05232, x=1.0, y=-0.05232): -0.052407779283
    test 4429 357 357.000000000000 Mu(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 4430 357 357.005017917762 Chi(tan=-0.05232, x=1.0, y=-0.05232), iteration=3: -0.052407779283
    test 4431 357 356.998323063562 Xi(tan=-0.0524371, x=2.00622, y=-0.105201), iteration=3: -0.052407779283

    test 4432  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 4433  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 4434  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 4435  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 4436  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 4437  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 4438  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 4439  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 4440  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 4441  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 4442  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 4443  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 4444  3 3.000000000000 Phi(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283
    test 4445  3 2.989959849669 Beta(tan=0.0522321, x=0.998639, y=0.052161): 0.052407779283
    test 4446  3 2.979953179189 Theta(tan=0.0520569, x=0.998648, y=0.0519865): 0.052407779283
    test 4447  3 2.984946069468 Mu(tan=0.0521443, x=0.998643, y=0.0520736): 0.052407779283
    test 4448  3 2.979953240044 Chi(tan=0.0520569, x=0.998648, y=0.0519866): 0.052407779283
    test 4449  3 2.986614621754 Xi(tan=0.0521735, x=0.998642, y=0.0521027): 0.052407779283

    test 4450  3 3.000000000000 Phi(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283
    test 4451  3 2.989959849669 Beta(tan=0.0522321, x=0.99863, y=0.0521605): 0.052407779283
    test 4452  3 2.979953179189 Theta(tan=0.0520569, x=0.99863, y=0.0519856): 0.052407779283
    test 4453  3 2.984946069468 Mu(tan=0.0521443, x=0.998643, y=0.0520736), iteration=3: 0.052407779283
    test 4454  3 2.979953240044 Chi(tan=0.0520569, x=1.0, y=0.0520569), iteration=3: 0.052407779283
    test 4455  3 2.986614621754 Xi(tan=0.0521735, x=2.00625, y=0.104673), iteration=3: 0.052407779283

    test 4456  6 6.000000000000 Phi(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266
    test 4457  6 5.980029153726 Beta(tan=0.104752, x=0.994558, y=0.104182): 0.105104235266
    test 4458  6 5.960123814783 Theta(tan=0.104401, x=0.994594, y=0.103836): 0.105104235266
    test 4459  6 5.970056046956 Mu(tan=0.104576, x=0.994576, y=0.104009): 0.105104235266
    test 4460  6 5.960124297710 Chi(tan=0.104401, x=0.994594, y=0.103836): 0.105104235266
    test 4461  6 5.973375069156 Xi(tan=0.104634, x=0.99457, y=0.104066): 0.105104235266

    test 4462  6 6.000000000000 Phi(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266
    test 4463  6 5.980029153726 Beta(tan=0.104752, x=0.994522, y=0.104178): 0.105104235266
    test 4464  6 5.960123814783 Theta(tan=0.104401, x=0.994522, y=0.103829): 0.105104235266
    test 4465  6 5.970056046956 Mu(tan=0.104576, x=0.994576, y=0.104009), iteration=3: 0.105104235266
    test 4466  6 5.960124297710 Chi(tan=0.104401, x=1.0, y=0.104401), iteration=3: 0.105104235266
    test 4467  6 5.973375069156 Xi(tan=0.104634, x=1.99807, y=0.209067), iteration=2: 0.105104235266

    test 4468  9 9.000000000000 Phi(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325
    test 4469  9 8.970316191157 Beta(tan=0.157853, x=0.987769, y=0.155923): 0.158384440325
    test 4470  9 8.940727074963 Theta(tan=0.157324, x=0.98785, y=0.155413): 0.158384440325
    test 4471  9 8.955492089230 Mu(tan=0.157588, x=0.98781, y=0.155667): 0.158384440325
    test 4472  9 8.940728682981 Chi(tan=0.157324, x=0.98785, y=0.155413): 0.158384440325
    test 4473  9 8.960425606106 Xi(tan=0.157676, x=0.987796, y=0.155752): 0.158384440325

    test 4474  9 9.000000000000 Phi(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325
    test 4475  9 8.970316191157 Beta(tan=0.157853, x=0.987688, y=0.15591): 0.158384440325
    test 4476  9 8.940727074963 Theta(tan=0.157324, x=0.987688, y=0.155387): 0.158384440325
    test 4477  9 8.955492089230 Mu(tan=0.157588, x=0.98781, y=0.155667), iteration=3: 0.158384440325
    test 4478  9 8.940728682981 Chi(tan=0.157324, x=1.0, y=0.157324), iteration=3: 0.158384440325
    test 4479  9 8.960425606106 Xi(tan=0.157676, x=1.98446, y=0.312903), iteration=2: 0.158384440325

    test 4480 12 12.000000000000 Phi(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670
    test 4481 12 11.960926901992 Beta(tan=0.211844, x=0.978289, y=0.207245): 0.212556561670
    test 4482 12 11.921973572506 Theta(tan=0.211134, x=0.97843, y=0.206579): 0.212556561670
    test 4483 12 11.941412867810 Mu(tan=0.211488, x=0.97836, y=0.206911): 0.212556561670
    test 4484 12 11.921977312469 Chi(tan=0.211134, x=0.97843, y=0.20658): 0.212556561670
    test 4485 12 11.947907388565 Xi(tan=0.211606, x=0.978336, y=0.207022): 0.212556561670

    test 4486 12 12.000000000000 Phi(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670
    test 4487 12 11.960926901992 Beta(tan=0.211844, x=0.978148, y=0.207215): 0.212556561670
    test 4488 12 11.921973572506 Theta(tan=0.211134, x=0.978148, y=0.20652): 0.212556561670
    test 4489 12 11.941412867810 Mu(tan=0.211488, x=0.97836, y=0.206911), iteration=3: 0.212556561670
    test 4490 12 11.921977312469 Chi(tan=0.211134, x=1.0, y=0.211134), iteration=3: 0.212556561670
    test 4491 12 11.947907388565 Xi(tan=0.211606, x=1.96546, y=0.415904), iteration=3: 0.212556561670

    test 4492 15 15.000000000000 Phi(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431
    test 4493 15 14.951963747366 Beta(tan=0.267051, x=0.966142, y=0.258009): 0.267949192431
    test 4494 15 14.904067139653 Theta(tan=0.266155, x=0.966358, y=0.257201): 0.267949192431
    test 4495 15 14.927971869417 Mu(tan=0.266602, x=0.96625, y=0.257605): 0.267949192431
    test 4496 15 14.904074267391 Chi(tan=0.266156, x=0.966358, y=0.257202): 0.267949192431
    test 4497 15 14.935956949387 Xi(tan=0.266752, x=0.966215, y=0.257739): 0.267949192431

    test 4498 15 15.000000000000 Phi(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431
    test 4499 15 14.951963747366 Beta(tan=0.267051, x=0.965926, y=0.257951): 0.267949192431
    test 4500 15 14.904067139653 Theta(tan=0.266155, x=0.965926, y=0.257086): 0.267949192431
    test 4501 15 14.927971869417 Mu(tan=0.266602, x=0.96625, y=0.257605), iteration=3: 0.267949192431
    test 4502 15 14.904074267391 Chi(tan=0.266156, x=1.0, y=0.266156), iteration=3: 0.267949192431
    test 4503 15 14.935956949387 Xi(tan=0.266752, x=1.94111, y=0.517793), iteration=3: 0.267949192431

    test 4504 18 18.000000000000 Phi(tan=0.32492, x=0.951057, y=0.309017): 0.324919696233
    test 4505 18 17.943524604789 Beta(tan=0.32383, x=0.951361, y=0.308079): 0.324919696233
    test 4506 18 17.887202665849 Theta(tan=0.322745, x=0.951663, y=0.307144): 0.324919696233
    test 4507 18 17.915315747772 Mu(tan=0.323286, x=0.951512, y=0.307611): 0.324919696233
    test 4508 18 17.887214616853 Chi(tan=0.322745, x=0.951663, y=0.307144): 0.324919696233
    test 4509 18 17.924704729404 Xi(tan=0.323467, x=0.951462, y=0.307767): 0.324919696233

    test 4510 18 18.000000000000 Phi(tan=0.32492, x=0.951057, y=0.309017): 0.324919696233
    test 4511 18 17.943524604789 Beta(tan=0.32383, x=0.951057, y=0.307981): 0.324919696233
    test 4512 18 17.887202665849 Theta(tan=0.322745, x=0.951057, y=0.306948): 0.324919696233
    test 4513 18 17.915315747772 Mu(tan=0.323286, x=0.951512, y=0.307611), iteration=3: 0.324919696233
    test 4514 18 17.887214616853 Chi(tan=0.322745, x=1.0, y=0.322745), iteration=2: 0.324919696233
    test 4515 18 17.924704729404 Xi(tan=0.323467, x=1.91147, y=0.618298), iteration=3: 0.324919696233

    test 4516 21 21.000000000000 Phi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 4517 21 20.935701709947 Beta(tan=0.382577, x=0.933982, y=0.35732): 0.383864035035
    test 4518 21 20.871564019024 Theta(tan=0.381294, x=0.934381, y=0.356274): 0.383864035035
    test 4519 21 20.903582743391 Mu(tan=0.381935, x=0.934182, y=0.356796): 0.383864035035
    test 4520 21 20.871582327745 Chi(tan=0.381295, x=0.934381, y=0.356275): 0.383864035035
    test 4521 21 20.914273669704 Xi(tan=0.382148, x=0.934116, y=0.356971): 0.383864035035

    test 4522 21 21.000000000000 Phi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 4523 21 20.935701709947 Beta(tan=0.382577, x=0.93358, y=0.357166): 0.383864035035
    test 4524 21 20.871564019024 Theta(tan=0.381294, x=0.93358, y=0.355969): 0.383864035035
    test 4525 21 20.903582743391 Mu(tan=0.381935, x=0.934182, y=0.356796), iteration=3: 0.383864035035
    test 4526 21 20.871582327745 Chi(tan=0.381295, x=1.0, y=0.381295), iteration=2: 0.383864035035
    test 4527 21 20.914273669704 Xi(tan=0.382148, x=1.87662, y=0.717147), iteration=3: 0.383864035035

    test 4528 24 24.000000000000 Phi(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309
    test 4529 24 23.928580656019 Beta(tan=0.443736, x=0.914052, y=0.405598): 0.445228685309
    test 4530 24 23.857322070702 Theta(tan=0.442248, x=0.914555, y=0.40446): 0.445228685309
    test 4531 24 23.892901187501 Mu(tan=0.442991, x=0.914304, y=0.405028): 0.445228685309
    test 4532 24 23.857348282082 Chi(tan=0.442249, x=0.914555, y=0.404461): 0.445228685309
    test 4533 24 23.904777879573 Xi(tan=0.443239, x=0.91422, y=0.405218): 0.445228685309

    test 4534 24 24.000000000000 Phi(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309
    test 4535 24 23.928580656019 Beta(tan=0.443736, x=0.913545, y=0.405373): 0.445228685309
    test 4536 24 23.857322070702 Theta(tan=0.442248, x=0.913545, y=0.404014): 0.445228685309
    test 4537 24 23.892901187501 Mu(tan=0.442991, x=0.914304, y=0.405028), iteration=3: 0.445228685309
    test 4538 24 23.857348282082 Chi(tan=0.442249, x=1.0, y=0.442249), iteration=3: 0.445228685309
    test 4539 24 23.904777879573 Xi(tan=0.443239, x=1.83665, y=0.814074), iteration=3: 0.445228685309

    test 4540 27 27.000000000000 Phi(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494
    test 4541 27 26.922239461028 Beta(tan=0.507817, x=0.891622, y=0.452781): 0.509525449494
    test 4542 27 26.844632844859 Theta(tan=0.506114, x=0.892234, y=0.451573): 0.509525449494
    test 4543 27 26.883388105679 Mu(tan=0.506964, x=0.891929, y=0.452176): 0.509525449494
    test 4544 27 26.844668422078 Chi(tan=0.506115, x=0.892234, y=0.451573): 0.509525449494
    test 4545 27 26.896321394068 Xi(tan=0.507248, x=0.891827, y=0.452377): 0.509525449494

    test 4546 27 27.000000000000 Phi(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494
    test 4547 27 26.922239461028 Beta(tan=0.507817, x=0.891007, y=0.452468): 0.509525449494
    test 4548 27 26.844632844859 Theta(tan=0.506114, x=0.891007, y=0.450951): 0.509525449494
    test 4549 27 26.883388105679 Mu(tan=0.506964, x=0.891929, y=0.452176), iteration=2: 0.509525449494
    test 4550 27 26.844668422078 Chi(tan=0.506115, x=1.0, y=0.506115), iteration=3: 0.509525449494
    test 4551 27 26.896321394068 Xi(tan=0.507248, x=1.79166, y=0.908817), iteration=2: 0.509525449494

    test 4552 30 30.000000000000 Phi(tan=0.57735, x=0.866025, y=0.5): 0.577350269190
    test 4553 30 29.916747713236 Beta(tan=0.575415, x=0.866751, y=0.498741): 0.577350269190
    test 4554 30 29.833635809829 Theta(tan=0.573485, x=0.867474, y=0.497483): 0.577350269190
    test 4555 30 29.875147936061 Mu(tan=0.574448, x=0.867113, y=0.498112): 0.577350269190
    test 4556 30 29.833682042481 Chi(tan=0.573486, x=0.867473, y=0.497484): 0.577350269190
    test 4557 30 29.888997034460 Xi(tan=0.57477, x=0.866992, y=0.498321): 0.577350269190

    test 4558 30 30.000000000000 Phi(tan=0.57735, x=0.866025, y=0.5): 0.577350269190
    test 4559 30 29.916747713236 Beta(tan=0.575415, x=0.866025, y=0.498324): 0.577350269190
    test 4560 30 29.833635809829 Theta(tan=0.573485, x=0.866025, y=0.496653): 0.577350269190
    test 4561 30 29.875147936061 Mu(tan=0.574448, x=0.867113, y=0.498112), iteration=3: 0.577350269190
    test 4562 30 29.833682042481 Chi(tan=0.573486, x=1.0, y=0.573486), iteration=2: 0.577350269190
    test 4563 30 29.888997034460 Xi(tan=0.57477, x=1.74177, y=1.00112), iteration=3: 0.577350269190

    test 4564 33 33.000000000000 Phi(tan=0.649408, x=0.838671, y=0.544639): 0.649407593198
    test 4565 33 32.912165803903 Beta(tan=0.64723, x=0.839505, y=0.543353): 0.649407593198
    test 4566 33 32.824452331856 Theta(tan=0.64506, x=0.840335, y=0.542067): 0.649407593198
    test 4567 33 32.868271376142 Mu(tan=0.646144, x=0.839921, y=0.542709): 0.649407593198
    test 4568 33 32.824510248806 Chi(tan=0.645062, x=0.840335, y=0.542068): 0.649407593198
    test 4569 33 32.882885384008 Xi(tan=0.646505, x=0.839782, y=0.542924): 0.649407593198

    test 4570 33 33.000000000000 Phi(tan=0.649408, x=0.838671, y=0.544639): 0.649407593198
    test 4571 33 32.912165803903 Beta(tan=0.64723, x=0.838671, y=0.542813): 0.649407593198
    test 4572 33 32.824452331856 Theta(tan=0.64506, x=0.838671, y=0.540993): 0.649407593198
    test 4573 33 32.868271376142 Mu(tan=0.646144, x=0.839921, y=0.542709), iteration=3: 0.649407593198
    test 4574 33 32.824510248806 Chi(tan=0.645062, x=1.0, y=0.645062), iteration=3: 0.649407593198
    test 4575 33 32.882885384008 Xi(tan=0.646505, x=1.68711, y=1.09072), iteration=3: 0.649407593198

    test 4576 36 36.000000000000 Phi(tan=0.726543, x=0.809017, y=0.587785): 0.726542528005
    test 4577 36 35.908544256035 Beta(tan=0.724107, x=0.809954, y=0.586493): 0.726542528005
    test 4578 36 35.817184307945 Theta(tan=0.721679, x=0.810888, y=0.585201): 0.726542528005
    test 4579 36 35.862834371158 Mu(tan=0.722891, x=0.810422, y=0.585847): 0.726542528005
    test 4580 36 35.817254598968 Chi(tan=0.721681, x=0.810888, y=0.585202): 0.726542528005
    test 4581 36 35.878053890609 Xi(tan=0.723296, x=0.810266, y=0.586062): 0.726542528005

    test 4582 36 36.000000000000 Phi(tan=0.726543, x=0.809017, y=0.587785): 0.726542528005
    test 4583 36 35.908544256035 Beta(tan=0.724107, x=0.809017, y=0.585815): 0.726542528005
    test 4584 36 35.817184307945 Theta(tan=0.721679, x=0.809017, y=0.58385): 0.726542528005
    test 4585 36 35.862834371158 Mu(tan=0.722891, x=0.810422, y=0.585847), iteration=2: 0.726542528005
    test 4586 36 35.817254598968 Chi(tan=0.721681, x=1.0, y=0.721681), iteration=3: 0.726542528005
    test 4587 36 35.878053890609 Xi(tan=0.723296, x=1.62781, y=1.17739), iteration=3: 0.726542528005

    test 4588 39 39.000000000000 Phi(tan=0.809784, x=0.777146, y=0.62932): 0.809784033195
    test 4589 39 38.905923156872 Beta(tan=0.807069, x=0.778178, y=0.628044): 0.809784033195
    test 4590 39 38.811912994521 Theta(tan=0.804363, x=0.779208, y=0.626766): 0.809784033195
    test 4591 39 38.858897255896 Mu(tan=0.805715, x=0.778693, y=0.627405): 0.809784033195
    test 4592 39 38.811995944515 Chi(tan=0.804365, x=0.779207, y=0.626767): 0.809784033195
    test 4593 39 38.874556106726 Xi(tan=0.806165, x=0.778522, y=0.627617): 0.809784033195

    test 4594 39 39.000000000000 Phi(tan=0.809784, x=0.777146, y=0.62932): 0.809784033195
    test 4595 39 38.905923156872 Beta(tan=0.807069, x=0.777146, y=0.62721): 0.809784033195
    test 4596 39 38.811912994521 Theta(tan=0.804363, x=0.777146, y=0.625107): 0.809784033195
    test 4597 39 38.858897255896 Mu(tan=0.805715, x=0.778693, y=0.627405), iteration=2: 0.809784033195
    test 4598 39 38.811995944515 Chi(tan=0.804365, x=1.0, y=0.804365), iteration=3: 0.809784033195
    test 4599 39 38.874556106726 Xi(tan=0.806165, x=1.56403, y=1.26087), iteration=3: 0.809784033195

    test 4600 42 42.000000000000 Phi(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 4601 42 41.904331700939 Beta(tan=0.897385, x=0.744261, y=0.667889): 0.900404044298
    test 4602 42 41.808698047037 Theta(tan=0.894376, x=0.745375, y=0.666646): 0.900404044298
    test 4603 42 41.856504060443 Mu(tan=0.895879, x=0.744818, y=0.667267): 0.900404044298
    test 4604 42 41.808793486106 Chi(tan=0.894379, x=0.745374, y=0.666647): 0.900404044298
    test 4605 42 41.872431075863 Xi(tan=0.896381, x=0.744633, y=0.667474): 0.900404044298

    test 4606 42 42.000000000000 Phi(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 4607 42 41.904331700939 Beta(tan=0.897385, x=0.743145, y=0.666887): 0.900404044298
    test 4608 42 41.808698047037 Theta(tan=0.894376, x=0.743145, y=0.664651): 0.900404044298
    test 4609 42 41.856504060443 Mu(tan=0.895879, x=0.744818, y=0.667267), iteration=3: 0.900404044298
    test 4610 42 41.808793486106 Chi(tan=0.894379, x=1.0, y=0.894379), iteration=3: 0.900404044298
    test 4611 42 41.872431075863 Xi(tan=0.896381, x=1.49595, y=1.34094), iteration=3: 0.900404044298

    test 4612 45 45.000000000000 Phi(tan=1.0, x=0.707107, y=0.707107): 1.000000000000
    test 4613 45 44.903787849420 Beta(tan=0.996647, x=0.708293, y=0.705918): 1.000000000000
    test 4614 45 44.807576784018 Theta(tan=0.993306, x=0.709478, y=0.704728): 1.000000000000
    test 4615 45 44.855681988907 Mu(tan=0.994975, x=0.708886, y=0.705323): 1.000000000000
    test 4616 45 44.807684056089 Chi(tan=0.993309, x=0.709476, y=0.704729): 1.000000000000
    test 4617 45 44.871702873434 Xi(tan=0.995532, x=0.708688, y=0.705522): 1.000000000000

    test 4618 45 45.000000000000 Phi(tan=1.0, x=0.707107, y=0.707107): 1.000000000000
    test 4619 45 44.903787849420 Beta(tan=0.996647, x=0.707107, y=0.704736): 1.000000000000
    test 4620 45 44.807576784018 Theta(tan=0.993306, x=0.707107, y=0.702373): 1.000000000000
    test 4621 45 44.855681988907 Mu(tan=0.994975, x=0.708886, y=0.705323), iteration=2: 1.000000000000
    test 4622 45 44.807684056089 Chi(tan=0.993309, x=1.0, y=0.993309), iteration=3: 1.000000000000
    test 4623 45 44.871702873434 Xi(tan=0.995532, x=1.42374, y=1.41738), iteration=2: 1.000000000000

    test 4624 48 48.000000000000 Phi(tan=1.11061, x=0.669131, y=0.743145): 1.110612514829
    test 4625 48 47.904298110495 Beta(tan=1.10689, x=0.670371, y=0.742026): 1.110612514829
    test 4626 48 47.808563687131 Theta(tan=1.10318, x=0.67161, y=0.740905): 1.110612514829
    test 4627 48 47.856441078504 Mu(tan=1.10503, x=0.670991, y=0.741466): 1.110612514829
    test 4628 48 47.808681638983 Chi(tan=1.10318, x=0.671608, y=0.740906): 1.110612514829
    test 4629 48 47.872380308425 Xi(tan=1.10565, x=0.670784, y=0.741653): 1.110612514829

    test 4630 48 48.000000000000 Phi(tan=1.11061, x=0.669131, y=0.743145): 1.110612514829
    test 4631 48 47.904298110495 Beta(tan=1.10689, x=0.669131, y=0.740653): 1.110612514829
    test 4632 48 47.808563687131 Theta(tan=1.10318, x=0.669131, y=0.73817): 1.110612514829
    test 4633 48 47.856441078504 Mu(tan=1.10503, x=0.670991, y=0.741466), iteration=3: 1.110612514829
    test 4634 48 47.808681638983 Chi(tan=1.10318, x=1.0, y=1.10318), iteration=3: 1.110612514829
    test 4635 48 47.872380308425 Xi(tan=1.10565, x=1.34759, y=1.48997), iteration=2: 1.110612514829

    test 4636 51 51.000000000000 Phi(tan=1.2349, x=0.62932, y=0.777146): 1.234897156535
    test 4637 51 50.905857444036 Beta(tan=1.23076, x=0.630596, y=0.776111): 1.234897156535
    test 4638 51 50.811650146691 Theta(tan=1.22663, x=0.631872, y=0.775073): 1.234897156535
    test 4639 51 50.858774044602 Mu(tan=1.22869, x=0.631234, y=0.775592): 1.234897156535
    test 4640 51 50.811777138431 Chi(tan=1.22664, x=0.63187, y=0.775074): 1.234897156535
    test 4641 51 50.874456790611 Xi(tan=1.22938, x=0.631022, y=0.775765): 1.234897156535

    test 4642 51 51.000000000000 Phi(tan=1.2349, x=0.62932, y=0.777146): 1.234897156535
    test 4643 51 50.905857444036 Beta(tan=1.23076, x=0.62932, y=0.77454): 1.234897156535
    test 4644 51 50.811650146691 Theta(tan=1.22663, x=0.62932, y=0.771943): 1.234897156535
    test 4645 51 50.858774044602 Mu(tan=1.22869, x=0.631234, y=0.775592), iteration=3: 1.234897156535
    test 4646 51 50.811777138431 Chi(tan=1.22664, x=1.0, y=1.22664), iteration=3: 1.234897156535
    test 4647 51 50.874456790611 Xi(tan=1.22938, x=1.26771, y=1.5585), iteration=2: 1.234897156535

    test 4648 54 54.000000000000 Phi(tan=1.37638, x=0.587785, y=0.809017): 1.376381920471
    test 4649 54 53.908449292751 Beta(tan=1.37177, x=0.589077, y=0.808077): 1.376381920471
    test 4650 54 53.816804459552 Theta(tan=1.36717, x=0.590369, y=0.807133): 1.376381920471
    test 4651 54 53.862656315380 Mu(tan=1.36947, x=0.589723, y=0.807606): 1.376381920471
    test 4652 54 53.816938396628 Chi(tan=1.36717, x=0.590367, y=0.807135): 1.376381920471
    test 4653 54 53.877910366370 Xi(tan=1.37023, x=0.589508, y=0.807763): 1.376381920471

    test 4654 54 54.000000000000 Phi(tan=1.37638, x=0.587785, y=0.809017): 1.376381920471
    test 4655 54 53.908449292751 Beta(tan=1.37177, x=0.587785, y=0.806305): 1.376381920471
    test 4656 54 53.816804459552 Theta(tan=1.36717, x=0.587785, y=0.803601): 1.376381920471
    test 4657 54 53.862656315380 Mu(tan=1.36947, x=0.589723, y=0.807606), iteration=2: 1.376381920471
    test 4658 54 53.816938396628 Chi(tan=1.36717, x=1.0, y=1.36717), iteration=3: 1.376381920471
    test 4659 54 53.877910366370 Xi(tan=1.37023, x=1.18431, y=1.62278), iteration=2: 1.376381920471

    test 4660 57 57.000000000000 Phi(tan=1.53986, x=0.544639, y=0.838671): 1.539864963815
    test 4661 57 56.912045740495 Beta(tan=1.5347, x=0.545926, y=0.837834): 1.539864963815
    test 4662 57 56.823972083650 Theta(tan=1.52956, x=0.547213, y=0.836993): 1.539864963815
    test 4663 57 56.868046257702 Mu(tan=1.53213, x=0.546569, y=0.837414): 1.539864963815
    test 4664 57 56.824110469549 Chi(tan=1.52956, x=0.547211, y=0.836995): 1.539864963815
    test 4665 57 56.882703924297 Xi(tan=1.53299, x=0.546355, y=0.837554): 1.539864963815

    test 4666 57 57.000000000000 Phi(tan=1.53986, x=0.544639, y=0.838671): 1.539864963815
    test 4667 57 56.912045740495 Beta(tan=1.5347, x=0.544639, y=0.835859): 1.539864963815
    test 4668 57 56.823972083650 Theta(tan=1.52956, x=0.544639, y=0.833056): 1.539864963815
    test 4669 57 56.868046257702 Mu(tan=1.53213, x=0.546569, y=0.837414), iteration=3: 1.539864963815
    test 4670 57 56.824110469549 Chi(tan=1.52956, x=1.0, y=1.52956), iteration=3: 1.539864963815
    test 4671 57 56.882703924297 Xi(tan=1.53299, x=1.09762, y=1.68263), iteration=2: 1.539864963815

    test 4672 60 60.000000000000 Phi(tan=1.73205, x=0.5, y=0.866025): 1.732050807569
    test 4673 60 59.916607797021 Beta(tan=1.72624, x=0.50126, y=0.865297): 1.732050807569
    test 4674 60 59.833076150493 Theta(tan=1.72046, x=0.502521, y=0.864565): 1.732050807569
    test 4675 60 59.874885593644 Mu(tan=1.72335, x=0.50189, y=0.864932): 1.732050807569
    test 4676 60 59.833216158350 Chi(tan=1.72047, x=0.502519, y=0.864566): 1.732050807569
    test 4677 60 59.888785569885 Xi(tan=1.72431, x=0.50168, y=0.865053): 1.732050807569

    test 4678 60 60.000000000000 Phi(tan=1.73205, x=0.5, y=0.866025): 1.732050807569
    test 4679 60 59.916607797021 Beta(tan=1.72624, x=0.5, y=0.863122): 1.732050807569
    test 4680 60 59.833076150493 Theta(tan=1.72046, x=0.5, y=0.860228): 1.732050807569
    test 4681 60 59.874885593644 Mu(tan=1.72335, x=0.50189, y=0.864932), iteration=2: 1.732050807569
    test 4682 60 59.833216158350 Chi(tan=1.72047, x=1.0, y=1.72047), iteration=2: 1.732050807569
    test 4683 60 59.888785569885 Xi(tan=1.72431, x=1.00787, y=1.73787), iteration=2: 1.732050807569

    test 4684 63 63.000000000000 Phi(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 4685 63 62.922085806991 Beta(tan=1.95603, x=0.455202, y=0.890388): 1.962610505505
    test 4686 63 62.844018233783 Theta(tan=1.94947, x=0.456414, y=0.889767): 1.962610505505
    test 4687 63 62.883100004844 Mu(tan=1.95275, x=0.455807, y=0.890078): 1.962610505505
    test 4688 63 62.844156794245 Chi(tan=1.94948, x=0.456412, y=0.889768): 1.962610505505
    test 4689 63 62.896089166605 Xi(tan=1.95384, x=0.455606, y=0.890182): 1.962610505505

    test 4690 63 63.000000000000 Phi(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 4691 63 62.922085806991 Beta(tan=1.95603, x=0.45399, y=0.888019): 1.962610505505
    test 4692 63 62.844018233783 Theta(tan=1.94947, x=0.45399, y=0.885042): 1.962610505505
    test 4693 63 62.883100004844 Mu(tan=1.95275, x=0.455807, y=0.890078), iteration=3: 1.962610505505
    test 4694 63 62.844156794245 Chi(tan=1.94948, x=1.0, y=1.94948), iteration=3: 1.962610505505
    test 4695 63 62.896089166605 Xi(tan=1.95384, x=0.915303, y=1.78836), iteration=3: 1.962610505505

    test 4696 66 66.000000000000 Phi(tan=2.24604, x=0.406737, y=0.913545): 2.246036773904
    test 4697 66 65.928419979560 Beta(tan=2.23851, x=0.407878, y=0.913037): 2.246036773904
    test 4698 66 65.856679369063 Theta(tan=2.231, x=0.409021, y=0.912525): 2.246036773904
    test 4699 66 65.892599919595 Mu(tan=2.23475, x=0.408448, y=0.912781): 2.246036773904
    test 4700 66 65.856813271004 Chi(tan=2.23101, x=0.409018, y=0.912526): 2.246036773904
    test 4701 66 65.904535038645 Xi(tan=2.236, x=0.408258, y=0.912866): 2.246036773904

    test 4702 66 66.000000000000 Phi(tan=2.24604, x=0.406737, y=0.913545): 2.246036773904
    test 4703 66 65.928419979560 Beta(tan=2.23851, x=0.406737, y=0.910483): 2.246036773904
    test 4704 66 65.856679369063 Theta(tan=2.231, x=0.406737, y=0.90743): 2.246036773904
    test 4705 66 65.892599919595 Mu(tan=2.23475, x=0.408448, y=0.912781), iteration=3: 2.246036773904
    test 4706 66 65.856813271004 Chi(tan=2.23101, x=1.0, y=2.23101), iteration=3: 2.246036773904
    test 4707 66 65.904535038645 Xi(tan=2.236, x=0.820183, y=1.83393), iteration=3: 2.246036773904

    test 4708 69 69.000000000000 Phi(tan=2.60509, x=0.358368, y=0.93358): 2.605089064694
    test 4709 69 68.935541033395 Beta(tan=2.59635, x=0.359418, y=0.933177): 2.605089064694
    test 4710 69 68.870921315869 Theta(tan=2.58765, x=0.36047, y=0.932771): 2.605089064694
    test 4711 69 68.903281475251 Mu(tan=2.592, x=0.359943, y=0.932974): 2.605089064694
    test 4712 69 68.871047315925 Chi(tan=2.58767, x=0.360468, y=0.932772): 2.605089064694
    test 4713 69 68.914030828615 Xi(tan=2.59345, x=0.359768, y=0.933042): 2.605089064694

    test 4714 69 69.000000000000 Phi(tan=2.60509, x=0.358368, y=0.93358): 2.605089064694
    test 4715 69 68.935541033395 Beta(tan=2.59635, x=0.358368, y=0.93045): 2.605089064694
    test 4716 69 68.870921315869 Theta(tan=2.58765, x=0.358368, y=0.927331): 2.605089064694
    test 4717 69 68.903281475251 Mu(tan=2.592, x=0.359943, y=0.932974), iteration=2: 2.605089064694
    test 4718 69 68.871047315925 Chi(tan=2.58767, x=1.0, y=2.58767), iteration=3: 2.605089064694
    test 4719 69 68.914030828615 Xi(tan=2.59345, x=0.722767, y=1.87446), iteration=3: 2.605089064694

    test 4720 72 72.000000000000 Phi(tan=3.07768, x=0.309017, y=0.951057): 3.077683537175
    test 4721 72 71.943370950484 Beta(tan=3.06736, x=0.309957, y=0.950751): 3.077683537175
    test 4722 72 71.886588050489 Theta(tan=3.05708, x=0.310899, y=0.950443): 3.077683537175
    test 4723 72 71.915027646278 Mu(tan=3.06222, x=0.310427, y=0.950597): 3.077683537175
    test 4724 72 71.886702986922 Chi(tan=3.0571, x=0.310897, y=0.950444): 3.077683537175
    test 4725 72 71.924472501487 Xi(tan=3.06393, x=0.31027, y=0.950648): 3.077683537175

    test 4726 72 72.000000000000 Phi(tan=3.07768, x=0.309017, y=0.951057): 3.077683537175
    test 4727 72 71.943370950484 Beta(tan=3.06736, x=0.309017, y=0.947868): 3.077683537175
    test 4728 72 71.886588050489 Theta(tan=3.05708, x=0.309017, y=0.94469): 3.077683537175
    test 4729 72 71.915027646278 Mu(tan=3.06222, x=0.310427, y=0.950597), iteration=2: 3.077683537175
    test 4730 72 71.886702986922 Chi(tan=3.0571, x=1.0, y=3.0571), iteration=3: 3.077683537175
    test 4731 72 71.924472501487 Xi(tan=3.06393, x=0.623327, y=1.90983), iteration=3: 3.077683537175

    test 4732 75 75.000000000000 Phi(tan=3.73205, x=0.258819, y=0.965926): 3.732050807569
    test 4733 75 74.951823830757 Beta(tan=3.71954, x=0.259631, y=0.965708): 3.732050807569
    test 4734 75 74.903507474004 Theta(tan=3.70707, x=0.260445, y=0.965489): 3.732050807569
    test 4735 75 74.927709526028 Mu(tan=3.7133, x=0.260038, y=0.965599): 3.732050807569
    test 4736 75 74.903608380168 Chi(tan=3.70709, x=0.260444, y=0.965489): 3.732050807569
    test 4737 75 74.935745484143 Xi(tan=3.71538, x=0.259902, y=0.965635): 3.732050807569

    test 4738 75 75.000000000000 Phi(tan=3.73205, x=0.258819, y=0.965926): 3.732050807569
    test 4739 75 74.951823830757 Beta(tan=3.71954, x=0.258819, y=0.962687): 3.732050807569
    test 4740 75 74.903507474004 Theta(tan=3.70707, x=0.258819, y=0.95946): 3.732050807569
    test 4741 75 74.927709526028 Mu(tan=3.7133, x=0.260038, y=0.965599), iteration=3: 3.732050807569
    test 4742 75 74.903608380168 Chi(tan=3.70709, x=1.0, y=3.70709), iteration=2: 3.732050807569
    test 4743 75 74.935745484143 Xi(tan=3.71538, x=0.522138, y=1.93994), iteration=2: 3.732050807569

    test 4744 78 78.000000000000 Phi(tan=4.70463, x=0.207912, y=0.978148): 4.704630109478
    test 4745 78 77.960806838131 Beta(tan=4.68886, x=0.208581, y=0.978005): 4.704630109478
    test 4746 78 77.921493317051 Theta(tan=4.67314, x=0.209252, y=0.977862): 4.704630109478
    test 4747 78 77.941187748255 Mu(tan=4.681, x=0.208916, y=0.977934): 4.704630109478
    test 4748 78 77.921577529661 Chi(tan=4.67317, x=0.20925, y=0.977862): 4.704630109478
    test 4749 78 77.947725928085 Xi(tan=4.68361, x=0.208804, y=0.977958): 4.704630109478

    test 4750 78 78.000000000000 Phi(tan=4.70463, x=0.207912, y=0.978148): 4.704630109478
    test 4751 78 77.960806838131 Beta(tan=4.68886, x=0.207912, y=0.974868): 4.704630109478
    test 4752 78 77.921493317051 Theta(tan=4.67314, x=0.207912, y=0.9716): 4.704630109478
    test 4753 78 77.941187748255 Mu(tan=4.681, x=0.208916, y=0.977934), iteration=3: 4.704630109478
    test 4754 78 77.921577529661 Chi(tan=4.67317, x=1.0, y=4.67317), iteration=3: 4.704630109478
    test 4755 78 77.947725928085 Xi(tan=4.68361, x=0.419483, y=1.9647), iteration=2: 4.704630109478

    test 4756 81 81.000000000000 Phi(tan=6.31375, x=0.156434, y=0.987688): 6.313751514675
    test 4757 81 80.970221227440 Beta(tan=6.29258, x=0.156948, y=0.987607): 6.313751514675
    test 4758 81 80.940347219637 Theta(tan=6.27148, x=0.157463, y=0.987525): 6.313751514675
    test 4759 81 80.955314032385 Mu(tan=6.28204, x=0.157205, y=0.987566): 6.313751514675
    test 4760 81 80.940412477244 Chi(tan=6.27153, x=0.157462, y=0.987525): 6.313751514675
    test 4761 81 80.960282081132 Xi(tan=6.28555, x=0.157119, y=0.98758): 6.313751514675

    test 4762 81 81.000000000000 Phi(tan=6.31375, x=0.156434, y=0.987688): 6.313751514675
    test 4763 81 80.970221227440 Beta(tan=6.29258, x=0.156434, y=0.984377): 6.313751514675
    test 4764 81 80.940347219637 Theta(tan=6.27148, x=0.156434, y=0.981076): 6.313751514675
    test 4765 81 80.955314032385 Mu(tan=6.28204, x=0.157205, y=0.987566), iteration=3: 6.313751514675
    test 4766 81 80.940412477244 Chi(tan=6.27153, x=1.0, y=6.27153), iteration=2: 6.313751514675
    test 4767 81 80.960282081132 Xi(tan=6.28555, x=0.315649, y=1.98403), iteration=3: 6.313751514675

    test 4768 84 84.000000000000 Phi(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 4769 84 83.979963440552 Beta(tan=9.48246, x=0.104876, y=0.994485): 9.514364454223
    test 4770 84 83.959860961536 Theta(tan=9.45067, x=0.105225, y=0.994448): 9.514364454223
    test 4771 84 83.969932834829 Mu(tan=9.46657, x=0.10505, y=0.994467): 9.514364454223
    test 4772 84 83.959905488972 Chi(tan=9.45074, x=0.105224, y=0.994449): 9.514364454223
    test 4773 84 83.973275752467 Xi(tan=9.47186, x=0.104992, y=0.994473): 9.514364454223

    test 4774 84 84.000000000000 Phi(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 4775 84 83.979963440552 Beta(tan=9.48246, x=0.104528, y=0.991187): 9.514364454223
    test 4776 84 83.959860961536 Theta(tan=9.45067, x=0.104528, y=0.987864): 9.514364454223
    test 4777 84 83.969932834829 Mu(tan=9.46657, x=0.10505, y=0.994467), iteration=3: 9.514364454223
    test 4778 84 83.959905488972 Chi(tan=9.45074, x=1.0, y=9.45074), iteration=3: 9.514364454223
    test 4779 84 83.973275752467 Xi(tan=9.47186, x=0.210927, y=1.99788), iteration=3: 9.514364454223

    test 4780 87 87.000000000000 Phi(tan=19.0811, x=0.052336, y=0.99863): 19.081136687728
    test 4781 87 86.989926259040 Beta(tan=19.0172, x=0.0525115, y=0.99862): 19.081136687728
    test 4782 87 86.979818816318 Theta(tan=18.9534, x=0.0526877, y=0.998611): 19.081136687728
    test 4783 87 86.984883087073 Mu(tan=18.9853, x=0.0525994, y=0.998616): 19.081136687728
    test 4784 87 86.979841391469 Chi(tan=18.9535, x=0.0526873, y=0.998611): 19.081136687728
    test 4785 87 86.986563854002 Xi(tan=18.9959, x=0.0525701, y=0.998617): 19.081136687728

    test 4786 87 87.000000000000 Phi(tan=19.0811, x=0.052336, y=0.99863): 19.081136687728
    test 4787 87 86.989926259040 Beta(tan=19.0172, x=0.052336, y=0.995281): 19.081136687728
    test 4788 87 86.979818816318 Theta(tan=18.9534, x=0.052336, y=0.991944): 19.081136687728
    test 4789 87 86.984883087073 Mu(tan=18.9853, x=0.0525994, y=0.998616), iteration=3: 19.081136687728
    test 4790 87 86.979841391469 Chi(tan=18.9535, x=1.0, y=18.9535), iteration=3: 19.081136687728
    test 4791 87 86.986563854002 Xi(tan=18.9959, x=0.105612, y=2.0062), iteration=3: 19.081136687728

    test 4792 90 90.000000000000 Phi(tan=inf, x=0.0, y=1.0): inf
    test 4793 90 90.000000000000 Beta(tan=inf, x=0.0, y=1.0): inf
    test 4794 90 90.000000000000 Theta(tan=inf, x=0.0, y=1.0): inf
    test 4795 90 90.000000000000 Mu(tan=inf, x=0.0, y=1.0): inf
    test 4796 90 90.000000000000 Chi(tan=inf, x=0.0, y=1.0): inf
    test 4797 90 90.000000000000 Xi(tan=inf, x=0.0, y=1.0): inf

    test 4798 90 90.000000000000 Phi(tan=inf, x=0.0, y=1.0): inf
    test 4799 90 90.000000000000 Beta(tan=inf, x=0.0, y=1.0): inf
    test 4800 90 90.000000000000 Theta(tan=inf, x=0.0, y=1.0): inf
    test 4801 90 90.000000000000 Mu(tan=inf, x=0.0, y=1.0): inf
    test 4802 90 90.000000000000 Chi(tan=inf, x=0.0, y=1.0): inf
    test 4803 90 90.000000000000 Xi(tan=inf, x=0.0, y=1.0): inf

    test 4804 93 93.000000000000 Phi(tan=-19.0811, x=-0.052336, y=0.99863): -19.081136687728
    test 4805 93 93.010073740960 Beta(tan=-19.0172, x=-0.0525115, y=0.99862): -19.081136687728
    test 4806 93 93.020181183682 Theta(tan=-18.9534, x=-0.0526877, y=0.998611): -19.081136687728
    test 4807 93 93.015116912927 Mu(tan=-18.9853, x=-0.0525994, y=0.998616): -19.081136687728
    test 4808 93 93.020158608531 Chi(tan=-18.9535, x=-0.0526873, y=0.998611): -19.081136687728
    test 4809 93 93.013436145998 Xi(tan=-18.9959, x=-0.0525701, y=0.998617): -19.081136687728

    test 4810 93 93.000000000000 Phi(tan=-19.0811, x=-0.052336, y=0.99863): -19.081136687728
    test 4811 93 93.010073740960 Beta(tan=-19.0172, x=-0.052336, y=0.995281): -19.081136687728
    test 4812 93 93.020181183682 Theta(tan=-18.9534, x=-0.052336, y=0.991944): -19.081136687728
    test 4813 93 93.015116912927 Mu(tan=-18.9853, x=-0.0525994, y=0.998616), iteration=3: -19.081136687728
    test 4814 93 93.020158608531 Chi(tan=-18.9535, x=-1, y=18.9535), iteration=2: -19.081136687728
    test 4815 93 93.013436145998 Xi(tan=-18.9959, x=-0.105612, y=2.0062), iteration=2: -19.081136687728

    test 4816 96 96.000000000000 Phi(tan=-9.51436, x=-0.104528, y=0.994522): -9.514364454223
    test 4817 96 96.020036559448 Beta(tan=-9.48246, x=-0.104876, y=0.994485): -9.514364454223
    test 4818 96 96.040139038464 Theta(tan=-9.45067, x=-0.105225, y=0.994448): -9.514364454223
    test 4819 96 96.030067165171 Mu(tan=-9.46657, x=-0.10505, y=0.994467): -9.514364454223
    test 4820 96 96.040094511028 Chi(tan=-9.45074, x=-0.105224, y=0.994449): -9.514364454223
    test 4821 96 96.026724247533 Xi(tan=-9.47186, x=-0.104992, y=0.994473): -9.514364454223

    test 4822 96 96.000000000000 Phi(tan=-9.51436, x=-0.104528, y=0.994522): -9.514364454223
    test 4823 96 96.020036559448 Beta(tan=-9.48246, x=-0.104528, y=0.991187): -9.514364454223
    test 4824 96 96.040139038464 Theta(tan=-9.45067, x=-0.104528, y=0.987864): -9.514364454223
    test 4825 96 96.030067165171 Mu(tan=-9.46657, x=-0.10505, y=0.994467), iteration=3: -9.514364454223
    test 4826 96 96.040094511028 Chi(tan=-9.45074, x=-1, y=9.45074), iteration=3: -9.514364454223
    test 4827 96 96.026724247533 Xi(tan=-9.47186, x=-0.210927, y=1.99788), iteration=3: -9.514364454223

    test 4828 99 99.000000000000 Phi(tan=-6.31375, x=-0.156434, y=0.987688): -6.313751514675
    test 4829 99 99.029778772560 Beta(tan=-6.29258, x=-0.156948, y=0.987607): -6.313751514675
    test 4830 99 99.059652780362 Theta(tan=-6.27148, x=-0.157463, y=0.987525): -6.313751514675
    test 4831 99 99.044685967615 Mu(tan=-6.28204, x=-0.157205, y=0.987566): -6.313751514675
    test 4832 99 99.059587522756 Chi(tan=-6.27153, x=-0.157462, y=0.987525): -6.313751514675
    test 4833 99 99.039717918868 Xi(tan=-6.28555, x=-0.157119, y=0.98758): -6.313751514675

    test 4834 99 99.000000000000 Phi(tan=-6.31375, x=-0.156434, y=0.987688): -6.313751514675
    test 4835 99 99.029778772560 Beta(tan=-6.29258, x=-0.156434, y=0.984377): -6.313751514675
    test 4836 99 99.059652780362 Theta(tan=-6.27148, x=-0.156434, y=0.981076): -6.313751514675
    test 4837 99 99.044685967615 Mu(tan=-6.28204, x=-0.157205, y=0.987566), iteration=3: -6.313751514675
    test 4838 99 99.059587522756 Chi(tan=-6.27153, x=-1, y=6.27153), iteration=3: -6.313751514675
    test 4839 99 99.039717918868 Xi(tan=-6.28555, x=-0.315649, y=1.98403), iteration=3: -6.313751514675

    test 4840 102 102.000000000000 Phi(tan=-4.70463, x=-0.207912, y=0.978148): -4.704630109478
    test 4841 102 102.039193161869 Beta(tan=-4.68886, x=-0.208581, y=0.978005): -4.704630109478
    test 4842 102 102.078506682949 Theta(tan=-4.67314, x=-0.209252, y=0.977862): -4.704630109478
    test 4843 102 102.058812251745 Mu(tan=-4.681, x=-0.208916, y=0.977934): -4.704630109478
    test 4844 102 102.078422470339 Chi(tan=-4.67317, x=-0.20925, y=0.977862): -4.704630109478
    test 4845 102 102.052274071915 Xi(tan=-4.68361, x=-0.208804, y=0.977958): -4.704630109478

    test 4846 102 102.000000000000 Phi(tan=-4.70463, x=-0.207912, y=0.978148): -4.704630109478
    test 4847 102 102.039193161869 Beta(tan=-4.68886, x=-0.207912, y=0.974868): -4.704630109478
    test 4848 102 102.078506682949 Theta(tan=-4.67314, x=-0.207912, y=0.9716): -4.704630109478
    test 4849 102 102.058812251745 Mu(tan=-4.681, x=-0.208916, y=0.977934), iteration=3: -4.704630109478
    test 4850 102 102.078422470339 Chi(tan=-4.67317, x=-1, y=4.67317), iteration=2: -4.704630109478
    test 4851 102 102.052274071915 Xi(tan=-4.68361, x=-0.419483, y=1.9647), iteration=3: -4.704630109478

    test 4852 105 105.000000000000 Phi(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 4853 105 105.048176169243 Beta(tan=-3.71954, x=-0.259631, y=0.965708): -3.732050807569
    test 4854 105 105.096492525996 Theta(tan=-3.70707, x=-0.260445, y=0.965489): -3.732050807569
    test 4855 105 105.072290473972 Mu(tan=-3.7133, x=-0.260038, y=0.965599): -3.732050807569
    test 4856 105 105.096391619832 Chi(tan=-3.70709, x=-0.260444, y=0.965489): -3.732050807569
    test 4857 105 105.064254515857 Xi(tan=-3.71538, x=-0.259902, y=0.965635): -3.732050807569

    test 4858 105 105.000000000000 Phi(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 4859 105 105.048176169243 Beta(tan=-3.71954, x=-0.258819, y=0.962687): -3.732050807569
    test 4860 105 105.096492525996 Theta(tan=-3.70707, x=-0.258819, y=0.95946): -3.732050807569
    test 4861 105 105.072290473972 Mu(tan=-3.7133, x=-0.260038, y=0.965599), iteration=3: -3.732050807569
    test 4862 105 105.096391619832 Chi(tan=-3.70709, x=-1, y=3.70709), iteration=2: -3.732050807569
    test 4863 105 105.064254515857 Xi(tan=-3.71538, x=-0.522138, y=1.93994), iteration=2: -3.732050807569

    test 4864 108 108.000000000000 Phi(tan=-3.07768, x=-0.309017, y=0.951057): -3.077683537175
    test 4865 108 108.056629049516 Beta(tan=-3.06736, x=-0.309957, y=0.950751): -3.077683537175
    test 4866 108 108.113411949511 Theta(tan=-3.05708, x=-0.310899, y=0.950443): -3.077683537175
    test 4867 108 108.084972353722 Mu(tan=-3.06222, x=-0.310427, y=0.950597): -3.077683537175
    test 4868 108 108.113297013078 Chi(tan=-3.0571, x=-0.310897, y=0.950444): -3.077683537175
    test 4869 108 108.075527498513 Xi(tan=-3.06393, x=-0.31027, y=0.950648): -3.077683537175

    test 4870 108 108.000000000000 Phi(tan=-3.07768, x=-0.309017, y=0.951057): -3.077683537175
    test 4871 108 108.056629049516 Beta(tan=-3.06736, x=-0.309017, y=0.947868): -3.077683537175
    test 4872 108 108.113411949511 Theta(tan=-3.05708, x=-0.309017, y=0.94469): -3.077683537175
    test 4873 108 108.084972353722 Mu(tan=-3.06222, x=-0.310427, y=0.950597), iteration=3: -3.077683537175
    test 4874 108 108.113297013078 Chi(tan=-3.0571, x=-1, y=3.0571), iteration=3: -3.077683537175
    test 4875 108 108.075527498513 Xi(tan=-3.06393, x=-0.623327, y=1.90983), iteration=3: -3.077683537175

    test 4876 111 111.000000000000 Phi(tan=-2.60509, x=-0.358368, y=0.93358): -2.605089064694
    test 4877 111 111.064458966605 Beta(tan=-2.59635, x=-0.359418, y=0.933177): -2.605089064694
    test 4878 111 111.129078684131 Theta(tan=-2.58765, x=-0.36047, y=0.932771): -2.605089064694
    test 4879 111 111.096718524749 Mu(tan=-2.592, x=-0.359943, y=0.932974): -2.605089064694
    test 4880 111 111.128952684075 Chi(tan=-2.58767, x=-0.360468, y=0.932772): -2.605089064694
    test 4881 111 111.085969171385 Xi(tan=-2.59345, x=-0.359768, y=0.933042): -2.605089064694

    test 4882 111 111.000000000000 Phi(tan=-2.60509, x=-0.358368, y=0.93358): -2.605089064694
    test 4883 111 111.064458966605 Beta(tan=-2.59635, x=-0.358368, y=0.93045): -2.605089064694
    test 4884 111 111.129078684131 Theta(tan=-2.58765, x=-0.358368, y=0.927331): -2.605089064694
    test 4885 111 111.096718524749 Mu(tan=-2.592, x=-0.359943, y=0.932974), iteration=3: -2.605089064694
    test 4886 111 111.128952684075 Chi(tan=-2.58767, x=-1, y=2.58767), iteration=3: -2.605089064694
    test 4887 111 111.085969171385 Xi(tan=-2.59345, x=-0.722767, y=1.87446), iteration=3: -2.605089064694

    test 4888 114 114.000000000000 Phi(tan=-2.24604, x=-0.406737, y=0.913545): -2.246036773904
    test 4889 114 114.071580020440 Beta(tan=-2.23851, x=-0.407878, y=0.913037): -2.246036773904
    test 4890 114 114.143320630937 Theta(tan=-2.231, x=-0.409021, y=0.912525): -2.246036773904
    test 4891 114 114.107400080405 Mu(tan=-2.23475, x=-0.408448, y=0.912781): -2.246036773904
    test 4892 114 114.143186728996 Chi(tan=-2.23101, x=-0.409018, y=0.912526): -2.246036773904
    test 4893 114 114.095464961355 Xi(tan=-2.236, x=-0.408258, y=0.912866): -2.246036773904

    test 4894 114 114.000000000000 Phi(tan=-2.24604, x=-0.406737, y=0.913545): -2.246036773904
    test 4895 114 114.071580020440 Beta(tan=-2.23851, x=-0.406737, y=0.910483): -2.246036773904
    test 4896 114 114.143320630937 Theta(tan=-2.231, x=-0.406737, y=0.90743): -2.246036773904
    test 4897 114 114.107400080405 Mu(tan=-2.23475, x=-0.408448, y=0.912781), iteration=3: -2.246036773904
    test 4898 114 114.143186728996 Chi(tan=-2.23101, x=-1, y=2.23101), iteration=3: -2.246036773904
    test 4899 114 114.095464961355 Xi(tan=-2.236, x=-0.820183, y=1.83393), iteration=3: -2.246036773904

    test 4900 117 117.000000000000 Phi(tan=-1.96261, x=-0.45399, y=0.891007): -1.962610505505
    test 4901 117 117.077914193009 Beta(tan=-1.95603, x=-0.455202, y=0.890388): -1.962610505505
    test 4902 117 117.155981766217 Theta(tan=-1.94947, x=-0.456414, y=0.889767): -1.962610505505
    test 4903 117 117.116899995156 Mu(tan=-1.95275, x=-0.455807, y=0.890078): -1.962610505505
    test 4904 117 117.155843205755 Chi(tan=-1.94948, x=-0.456412, y=0.889768): -1.962610505505
    test 4905 117 117.103910833395 Xi(tan=-1.95384, x=-0.455606, y=0.890182): -1.962610505505

    test 4906 117 117.000000000000 Phi(tan=-1.96261, x=-0.45399, y=0.891007): -1.962610505505
    test 4907 117 117.077914193009 Beta(tan=-1.95603, x=-0.45399, y=0.888019): -1.962610505505
    test 4908 117 117.155981766217 Theta(tan=-1.94947, x=-0.45399, y=0.885042): -1.962610505505
    test 4909 117 117.116899995156 Mu(tan=-1.95275, x=-0.455807, y=0.890078), iteration=3: -1.962610505505
    test 4910 117 117.155843205755 Chi(tan=-1.94948, x=-1, y=1.94948), iteration=3: -1.962610505505
    test 4911 117 117.103910833395 Xi(tan=-1.95384, x=-0.915303, y=1.78836), iteration=2: -1.962610505505

    test 4912 120 120.000000000000 Phi(tan=-1.73205, x=-0.5, y=0.866025): -1.732050807569
    test 4913 120 120.083392202979 Beta(tan=-1.72624, x=-0.50126, y=0.865297): -1.732050807569
    test 4914 120 120.166923849507 Theta(tan=-1.72046, x=-0.502521, y=0.864565): -1.732050807569
    test 4915 120 120.125114406356 Mu(tan=-1.72335, x=-0.50189, y=0.864932): -1.732050807569
    test 4916 120 120.166783841650 Chi(tan=-1.72047, x=-0.502519, y=0.864566): -1.732050807569
    test 4917 120 120.111214430115 Xi(tan=-1.72431, x=-0.50168, y=0.865053): -1.732050807569

    test 4918 120 120.000000000000 Phi(tan=-1.73205, x=-0.5, y=0.866025): -1.732050807569
    test 4919 120 120.083392202979 Beta(tan=-1.72624, x=-0.5, y=0.863122): -1.732050807569
    test 4920 120 120.166923849507 Theta(tan=-1.72046, x=-0.5, y=0.860228): -1.732050807569
    test 4921 120 120.125114406356 Mu(tan=-1.72335, x=-0.50189, y=0.864932), iteration=2: -1.732050807569
    test 4922 120 120.166783841650 Chi(tan=-1.72047, x=-1, y=1.72047), iteration=3: -1.732050807569
    test 4923 120 120.111214430115 Xi(tan=-1.72431, x=-1.00787, y=1.73787), iteration=3: -1.732050807569

    test 4924 123 123.000000000000 Phi(tan=-1.53986, x=-0.544639, y=0.838671): -1.539864963815
    test 4925 123 123.087954259505 Beta(tan=-1.5347, x=-0.545926, y=0.837834): -1.539864963815
    test 4926 123 123.176027916350 Theta(tan=-1.52956, x=-0.547213, y=0.836993): -1.539864963815
    test 4927 123 123.131953742298 Mu(tan=-1.53213, x=-0.546569, y=0.837414): -1.539864963815
    test 4928 123 123.175889530451 Chi(tan=-1.52956, x=-0.547211, y=0.836995): -1.539864963815
    test 4929 123 123.117296075703 Xi(tan=-1.53299, x=-0.546355, y=0.837554): -1.539864963815

    test 4930 123 123.000000000000 Phi(tan=-1.53986, x=-0.544639, y=0.838671): -1.539864963815
    test 4931 123 123.087954259505 Beta(tan=-1.5347, x=-0.544639, y=0.835859): -1.539864963815
    test 4932 123 123.176027916350 Theta(tan=-1.52956, x=-0.544639, y=0.833056): -1.539864963815
    test 4933 123 123.131953742298 Mu(tan=-1.53213, x=-0.546569, y=0.837414), iteration=3: -1.539864963815
    test 4934 123 123.175889530451 Chi(tan=-1.52956, x=-1, y=1.52956), iteration=3: -1.539864963815
    test 4935 123 123.117296075703 Xi(tan=-1.53299, x=-1.09762, y=1.68263), iteration=2: -1.539864963815

    test 4936 126 126.000000000000 Phi(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 4937 126 126.091550707249 Beta(tan=-1.37177, x=-0.589077, y=0.808077): -1.376381920471
    test 4938 126 126.183195540448 Theta(tan=-1.36717, x=-0.590369, y=0.807133): -1.376381920471
    test 4939 126 126.137343684620 Mu(tan=-1.36947, x=-0.589723, y=0.807606): -1.376381920471
    test 4940 126 126.183061603372 Chi(tan=-1.36717, x=-0.590367, y=0.807135): -1.376381920471
    test 4941 126 126.122089633630 Xi(tan=-1.37023, x=-0.589508, y=0.807763): -1.376381920471

    test 4942 126 126.000000000000 Phi(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 4943 126 126.091550707249 Beta(tan=-1.37177, x=-0.587785, y=0.806305): -1.376381920471
    test 4944 126 126.183195540448 Theta(tan=-1.36717, x=-0.587785, y=0.803601): -1.376381920471
    test 4945 126 126.137343684620 Mu(tan=-1.36947, x=-0.589723, y=0.807606), iteration=2: -1.376381920471
    test 4946 126 126.183061603372 Chi(tan=-1.36717, x=-1, y=1.36717), iteration=3: -1.376381920471
    test 4947 126 126.122089633630 Xi(tan=-1.37023, x=-1.18431, y=1.62278), iteration=2: -1.376381920471

    test 4948 129 129.000000000000 Phi(tan=-1.2349, x=-0.62932, y=0.777146): -1.234897156535
    test 4949 129 129.094142555964 Beta(tan=-1.23076, x=-0.630596, y=0.776111): -1.234897156535
    test 4950 129 129.188349853309 Theta(tan=-1.22663, x=-0.631872, y=0.775073): -1.234897156535
    test 4951 129 129.141225955398 Mu(tan=-1.22869, x=-0.631234, y=0.775592): -1.234897156535
    test 4952 129 129.188222861569 Chi(tan=-1.22664, x=-0.63187, y=0.775074): -1.234897156535
    test 4953 129 129.125543209389 Xi(tan=-1.22938, x=-0.631022, y=0.775765): -1.234897156535

    test 4954 129 129.000000000000 Phi(tan=-1.2349, x=-0.62932, y=0.777146): -1.234897156535
    test 4955 129 129.094142555964 Beta(tan=-1.23076, x=-0.62932, y=0.77454): -1.234897156535
    test 4956 129 129.188349853309 Theta(tan=-1.22663, x=-0.62932, y=0.771943): -1.234897156535
    test 4957 129 129.141225955398 Mu(tan=-1.22869, x=-0.631234, y=0.775592), iteration=3: -1.234897156535
    test 4958 129 129.188222861569 Chi(tan=-1.22664, x=-1, y=1.22664), iteration=3: -1.234897156535
    test 4959 129 129.125543209389 Xi(tan=-1.22938, x=-1.26771, y=1.5585), iteration=2: -1.234897156535

    test 4960 132 132.000000000000 Phi(tan=-1.11061, x=-0.669131, y=0.743145): -1.110612514829
    test 4961 132 132.095701889505 Beta(tan=-1.10689, x=-0.670371, y=0.742026): -1.110612514829
    test 4962 132 132.191436312869 Theta(tan=-1.10318, x=-0.67161, y=0.740905): -1.110612514829
    test 4963 132 132.143558921496 Mu(tan=-1.10503, x=-0.670991, y=0.741466): -1.110612514829
    test 4964 132 132.191318361017 Chi(tan=-1.10318, x=-0.671608, y=0.740906): -1.110612514829
    test 4965 132 132.127619691575 Xi(tan=-1.10565, x=-0.670784, y=0.741653): -1.110612514829

    test 4966 132 132.000000000000 Phi(tan=-1.11061, x=-0.669131, y=0.743145): -1.110612514829
    test 4967 132 132.095701889505 Beta(tan=-1.10689, x=-0.669131, y=0.740653): -1.110612514829
    test 4968 132 132.191436312869 Theta(tan=-1.10318, x=-0.669131, y=0.73817): -1.110612514829
    test 4969 132 132.143558921496 Mu(tan=-1.10503, x=-0.670991, y=0.741466), iteration=3: -1.110612514829
    test 4970 132 132.191318361017 Chi(tan=-1.10318, x=-1, y=1.10318), iteration=3: -1.110612514829
    test 4971 132 132.127619691575 Xi(tan=-1.10565, x=-1.34759, y=1.48997), iteration=2: -1.110612514829

    test 4972 135 135.000000000000 Phi(tan=-1, x=-0.707107, y=0.707107): -1.000000000000
    test 4973 135 135.096212150580 Beta(tan=-0.996647, x=-0.708293, y=0.705918): -1.000000000000
    test 4974 135 135.192423215982 Theta(tan=-0.993306, x=-0.709478, y=0.704728): -1.000000000000
    test 4975 135 135.144318011093 Mu(tan=-0.994975, x=-0.708886, y=0.705323): -1.000000000000
    test 4976 135 135.192315943911 Chi(tan=-0.993309, x=-0.709476, y=0.704729): -1.000000000000
    test 4977 135 135.128297126566 Xi(tan=-0.995532, x=-0.708688, y=0.705522): -1.000000000000

    test 4978 135 135.000000000000 Phi(tan=-1, x=-0.707107, y=0.707107): -1.000000000000
    test 4979 135 135.096212150580 Beta(tan=-0.996647, x=-0.707107, y=0.704736): -1.000000000000
    test 4980 135 135.192423215982 Theta(tan=-0.993306, x=-0.707107, y=0.702373): -1.000000000000
    test 4981 135 135.144318011093 Mu(tan=-0.994975, x=-0.708886, y=0.705323), iteration=2: -1.000000000000
    test 4982 135 135.192315943911 Chi(tan=-0.993309, x=-1, y=0.993309), iteration=3: -1.000000000000
    test 4983 135 135.128297126566 Xi(tan=-0.995532, x=-1.42374, y=1.41738), iteration=3: -1.000000000000

    test 4984 138 138.000000000000 Phi(tan=-0.900404, x=-0.743145, y=0.669131): -0.900404044298
    test 4985 138 138.095668299061 Beta(tan=-0.897385, x=-0.744261, y=0.667889): -0.900404044298
    test 4986 138 138.191301952963 Theta(tan=-0.894376, x=-0.745375, y=0.666646): -0.900404044298
    test 4987 138 138.143495939557 Mu(tan=-0.895879, x=-0.744818, y=0.667267): -0.900404044298
    test 4988 138 138.191206513894 Chi(tan=-0.894379, x=-0.745374, y=0.666647): -0.900404044298
    test 4989 138 138.127568924137 Xi(tan=-0.896381, x=-0.744633, y=0.667474): -0.900404044298

    test 4990 138 138.000000000000 Phi(tan=-0.900404, x=-0.743145, y=0.669131): -0.900404044298
    test 4991 138 138.095668299061 Beta(tan=-0.897385, x=-0.743145, y=0.666887): -0.900404044298
    test 4992 138 138.191301952963 Theta(tan=-0.894376, x=-0.743145, y=0.664651): -0.900404044298
    test 4993 138 138.143495939557 Mu(tan=-0.895879, x=-0.744818, y=0.667267), iteration=3: -0.900404044298
    test 4994 138 138.191206513894 Chi(tan=-0.894379, x=-1, y=0.894379), iteration=3: -0.900404044298
    test 4995 138 138.127568924137 Xi(tan=-0.896381, x=-1.49595, y=1.34094), iteration=3: -0.900404044298

    test 4996 141 141.000000000000 Phi(tan=-0.809784, x=-0.777146, y=0.62932): -0.809784033195
    test 4997 141 141.094076843128 Beta(tan=-0.807069, x=-0.778178, y=0.628044): -0.809784033195
    test 4998 141 141.188087005479 Theta(tan=-0.804363, x=-0.779208, y=0.626766): -0.809784033195
    test 4999 141 141.141102744104 Mu(tan=-0.805715, x=-0.778693, y=0.627405): -0.809784033195
    test 5000 141 141.188004055485 Chi(tan=-0.804365, x=-0.779207, y=0.626767): -0.809784033195
    test 5001 141 141.125443893274 Xi(tan=-0.806165, x=-0.778522, y=0.627617): -0.809784033195

    test 5002 141 141.000000000000 Phi(tan=-0.809784, x=-0.777146, y=0.62932): -0.809784033195
    test 5003 141 141.094076843128 Beta(tan=-0.807069, x=-0.777146, y=0.62721): -0.809784033195
    test 5004 141 141.188087005479 Theta(tan=-0.804363, x=-0.777146, y=0.625107): -0.809784033195
    test 5005 141 141.141102744104 Mu(tan=-0.805715, x=-0.778693, y=0.627405), iteration=2: -0.809784033195
    test 5006 141 141.188004055485 Chi(tan=-0.804365, x=-1, y=0.804365), iteration=3: -0.809784033195
    test 5007 141 141.125443893274 Xi(tan=-0.806165, x=-1.56403, y=1.26087), iteration=3: -0.809784033195

    test 5008 144 144.000000000000 Phi(tan=-0.726543, x=-0.809017, y=0.587785): -0.726542528005
    test 5009 144 144.091455743965 Beta(tan=-0.724107, x=-0.809954, y=0.586493): -0.726542528005
    test 5010 144 144.182815692055 Theta(tan=-0.721679, x=-0.810888, y=0.585201): -0.726542528005
    test 5011 144 144.137165628842 Mu(tan=-0.722891, x=-0.810422, y=0.585847): -0.726542528005
    test 5012 144 144.182745401032 Chi(tan=-0.721681, x=-0.810888, y=0.585202): -0.726542528005
    test 5013 144 144.121946109391 Xi(tan=-0.723296, x=-0.810266, y=0.586062): -0.726542528005

    test 5014 144 144.000000000000 Phi(tan=-0.726543, x=-0.809017, y=0.587785): -0.726542528005
    test 5015 144 144.091455743965 Beta(tan=-0.724107, x=-0.809017, y=0.585815): -0.726542528005
    test 5016 144 144.182815692055 Theta(tan=-0.721679, x=-0.809017, y=0.58385): -0.726542528005
    test 5017 144 144.137165628842 Mu(tan=-0.722891, x=-0.810422, y=0.585847), iteration=2: -0.726542528005
    test 5018 144 144.182745401032 Chi(tan=-0.721681, x=-1, y=0.721681), iteration=3: -0.726542528005
    test 5019 144 144.121946109391 Xi(tan=-0.723296, x=-1.62781, y=1.17739), iteration=3: -0.726542528005

    test 5020 147 147.000000000000 Phi(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 5021 147 147.087834196097 Beta(tan=-0.64723, x=-0.839505, y=0.543353): -0.649407593198
    test 5022 147 147.175547668144 Theta(tan=-0.64506, x=-0.840335, y=0.542067): -0.649407593198
    test 5023 147 147.131728623858 Mu(tan=-0.646144, x=-0.839921, y=0.542709): -0.649407593198
    test 5024 147 147.175489751194 Chi(tan=-0.645062, x=-0.840335, y=0.542068): -0.649407593198
    test 5025 147 147.117114615992 Xi(tan=-0.646505, x=-0.839782, y=0.542924): -0.649407593198

    test 5026 147 147.000000000000 Phi(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 5027 147 147.087834196097 Beta(tan=-0.64723, x=-0.838671, y=0.542813): -0.649407593198
    test 5028 147 147.175547668144 Theta(tan=-0.64506, x=-0.838671, y=0.540993): -0.649407593198
    test 5029 147 147.131728623858 Mu(tan=-0.646144, x=-0.839921, y=0.542709), iteration=3: -0.649407593198
    test 5030 147 147.175489751194 Chi(tan=-0.645062, x=-1, y=0.645062), iteration=3: -0.649407593198
    test 5031 147 147.117114615992 Xi(tan=-0.646505, x=-1.68711, y=1.09072), iteration=3: -0.649407593198

    test 5032 150 150.000000000000 Phi(tan=-0.57735, x=-0.866025, y=0.5): -0.577350269190
    test 5033 150 150.083252286764 Beta(tan=-0.575415, x=-0.866751, y=0.498741): -0.577350269190
    test 5034 150 150.166364190171 Theta(tan=-0.573485, x=-0.867474, y=0.497483): -0.577350269190
    test 5035 150 150.124852063939 Mu(tan=-0.574448, x=-0.867113, y=0.498112): -0.577350269190
    test 5036 150 150.166317957519 Chi(tan=-0.573486, x=-0.867473, y=0.497484): -0.577350269190
    test 5037 150 150.111002965540 Xi(tan=-0.57477, x=-0.866992, y=0.498321): -0.577350269190

    test 5038 150 150.000000000000 Phi(tan=-0.57735, x=-0.866025, y=0.5): -0.577350269190
    test 5039 150 150.083252286764 Beta(tan=-0.575415, x=-0.866025, y=0.498324): -0.577350269190
    test 5040 150 150.166364190171 Theta(tan=-0.573485, x=-0.866025, y=0.496653): -0.577350269190
    test 5041 150 150.124852063939 Mu(tan=-0.574448, x=-0.867113, y=0.498112), iteration=3: -0.577350269190
    test 5042 150 150.166317957519 Chi(tan=-0.573486, x=-1, y=0.573486), iteration=2: -0.577350269190
    test 5043 150 150.111002965540 Xi(tan=-0.57477, x=-1.74177, y=1.00112), iteration=3: -0.577350269190

    test 5044 153 153.000000000000 Phi(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494
    test 5045 153 153.077760538972 Beta(tan=-0.507817, x=-0.891622, y=0.452781): -0.509525449494
    test 5046 153 153.155367155141 Theta(tan=-0.506114, x=-0.892234, y=0.451573): -0.509525449494
    test 5047 153 153.116611894321 Mu(tan=-0.506964, x=-0.891929, y=0.452176): -0.509525449494
    test 5048 153 153.155331577922 Chi(tan=-0.506115, x=-0.892234, y=0.451573): -0.509525449494
    test 5049 153 153.103678605932 Xi(tan=-0.507248, x=-0.891827, y=0.452377): -0.509525449494

    test 5050 153 153.000000000000 Phi(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494
    test 5051 153 153.077760538972 Beta(tan=-0.507817, x=-0.891007, y=0.452468): -0.509525449494
    test 5052 153 153.155367155141 Theta(tan=-0.506114, x=-0.891007, y=0.450951): -0.509525449494
    test 5053 153 153.116611894321 Mu(tan=-0.506964, x=-0.891929, y=0.452176), iteration=3: -0.509525449494
    test 5054 153 153.155331577922 Chi(tan=-0.506115, x=-1, y=0.506115), iteration=3: -0.509525449494
    test 5055 153 153.103678605932 Xi(tan=-0.507248, x=-1.79166, y=0.908817), iteration=3: -0.509525449494

    test 5056 156 156.000000000000 Phi(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309
    test 5057 156 156.071419343981 Beta(tan=-0.443736, x=-0.914052, y=0.405598): -0.445228685309
    test 5058 156 156.142677929298 Theta(tan=-0.442248, x=-0.914555, y=0.40446): -0.445228685309
    test 5059 156 156.107098812499 Mu(tan=-0.442991, x=-0.914304, y=0.405028): -0.445228685309
    test 5060 156 156.142651717918 Chi(tan=-0.442249, x=-0.914555, y=0.404461): -0.445228685309
    test 5061 156 156.095222120427 Xi(tan=-0.443239, x=-0.91422, y=0.405218): -0.445228685309

    test 5062 156 156.000000000000 Phi(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309
    test 5063 156 156.071419343981 Beta(tan=-0.443736, x=-0.913545, y=0.405373): -0.445228685309
    test 5064 156 156.142677929298 Theta(tan=-0.442248, x=-0.913545, y=0.404014): -0.445228685309
    test 5065 156 156.107098812499 Mu(tan=-0.442991, x=-0.914304, y=0.405028), iteration=3: -0.445228685309
    test 5066 156 156.142651717918 Chi(tan=-0.442249, x=-1, y=0.442249), iteration=3: -0.445228685309
    test 5067 156 156.095222120427 Xi(tan=-0.443239, x=-1.83665, y=0.814074), iteration=3: -0.445228685309

    test 5068 159 159.000000000000 Phi(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035
    test 5069 159 159.064298290053 Beta(tan=-0.382577, x=-0.933982, y=0.35732): -0.383864035035
    test 5070 159 159.128435980976 Theta(tan=-0.381294, x=-0.934381, y=0.356274): -0.383864035035
    test 5071 159 159.096417256609 Mu(tan=-0.381935, x=-0.934182, y=0.356796): -0.383864035035
    test 5072 159 159.128417672255 Chi(tan=-0.381295, x=-0.934381, y=0.356275): -0.383864035035
    test 5073 159 159.085726330296 Xi(tan=-0.382148, x=-0.934116, y=0.356971): -0.383864035035

    test 5074 159 159.000000000000 Phi(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035
    test 5075 159 159.064298290053 Beta(tan=-0.382577, x=-0.93358, y=0.357166): -0.383864035035
    test 5076 159 159.128435980976 Theta(tan=-0.381294, x=-0.93358, y=0.355969): -0.383864035035
    test 5077 159 159.096417256609 Mu(tan=-0.381935, x=-0.934182, y=0.356796), iteration=3: -0.383864035035
    test 5078 159 159.128417672255 Chi(tan=-0.381295, x=-1, y=0.381295), iteration=2: -0.383864035035
    test 5079 159 159.085726330296 Xi(tan=-0.382148, x=-1.87662, y=0.717147), iteration=3: -0.383864035035

    test 5080 162 162.000000000000 Phi(tan=-0.32492, x=-0.951057, y=0.309017): -0.324919696233
    test 5081 162 162.056475395211 Beta(tan=-0.32383, x=-0.951361, y=0.308079): -0.324919696233
    test 5082 162 162.112797334151 Theta(tan=-0.322745, x=-0.951663, y=0.307144): -0.324919696233
    test 5083 162 162.084684252228 Mu(tan=-0.323286, x=-0.951512, y=0.307611): -0.324919696233
    test 5084 162 162.112785383147 Chi(tan=-0.322745, x=-0.951663, y=0.307144): -0.324919696233
    test 5085 162 162.075295270596 Xi(tan=-0.323467, x=-0.951462, y=0.307767): -0.324919696233

    test 5086 162 162.000000000000 Phi(tan=-0.32492, x=-0.951057, y=0.309017): -0.324919696233
    test 5087 162 162.056475395211 Beta(tan=-0.32383, x=-0.951057, y=0.307981): -0.324919696233
    test 5088 162 162.112797334151 Theta(tan=-0.322745, x=-0.951057, y=0.306948): -0.324919696233
    test 5089 162 162.084684252228 Mu(tan=-0.323286, x=-0.951512, y=0.307611), iteration=3: -0.324919696233
    test 5090 162 162.112785383147 Chi(tan=-0.322745, x=-1, y=0.322745), iteration=3: -0.324919696233
    test 5091 162 162.075295270596 Xi(tan=-0.323467, x=-1.91147, y=0.618298), iteration=3: -0.324919696233

    test 5092 165 165.000000000000 Phi(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431
    test 5093 165 165.048036252634 Beta(tan=-0.267051, x=-0.966142, y=0.258009): -0.267949192431
    test 5094 165 165.095932860347 Theta(tan=-0.266155, x=-0.966358, y=0.257201): -0.267949192431
    test 5095 165 165.072028130583 Mu(tan=-0.266602, x=-0.96625, y=0.257605): -0.267949192431
    test 5096 165 165.095925732609 Chi(tan=-0.266156, x=-0.966358, y=0.257202): -0.267949192431
    test 5097 165 165.064043050613 Xi(tan=-0.266752, x=-0.966215, y=0.257739): -0.267949192431

    test 5098 165 165.000000000000 Phi(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431
    test 5099 165 165.048036252634 Beta(tan=-0.267051, x=-0.965926, y=0.257951): -0.267949192431
    test 5100 165 165.095932860347 Theta(tan=-0.266155, x=-0.965926, y=0.257086): -0.267949192431
    test 5101 165 165.072028130583 Mu(tan=-0.266602, x=-0.96625, y=0.257605), iteration=3: -0.267949192431
    test 5102 165 165.095925732609 Chi(tan=-0.266156, x=-1, y=0.266156), iteration=3: -0.267949192431
    test 5103 165 165.064043050613 Xi(tan=-0.266752, x=-1.94111, y=0.517793), iteration=3: -0.267949192431

    test 5104 168 168.000000000000 Phi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 5105 168 168.039073098008 Beta(tan=-0.211844, x=-0.978289, y=0.207245): -0.212556561670
    test 5106 168 168.078026427494 Theta(tan=-0.211134, x=-0.97843, y=0.206579): -0.212556561670
    test 5107 168 168.058587132190 Mu(tan=-0.211488, x=-0.97836, y=0.206911): -0.212556561670
    test 5108 168 168.078022687531 Chi(tan=-0.211134, x=-0.97843, y=0.20658): -0.212556561670
    test 5109 168 168.052092611435 Xi(tan=-0.211606, x=-0.978336, y=0.207022): -0.212556561670

    test 5110 168 168.000000000000 Phi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 5111 168 168.039073098008 Beta(tan=-0.211844, x=-0.978148, y=0.207215): -0.212556561670
    test 5112 168 168.078026427494 Theta(tan=-0.211134, x=-0.978148, y=0.20652): -0.212556561670
    test 5113 168 168.058587132190 Mu(tan=-0.211488, x=-0.97836, y=0.206911), iteration=3: -0.212556561670
    test 5114 168 168.078022687531 Chi(tan=-0.211134, x=-1, y=0.211134), iteration=3: -0.212556561670
    test 5115 168 168.052092611435 Xi(tan=-0.211606, x=-1.96546, y=0.415904), iteration=3: -0.212556561670

    test 5116 171 171.000000000000 Phi(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325
    test 5117 171 171.029683808843 Beta(tan=-0.157853, x=-0.987769, y=0.155923): -0.158384440325
    test 5118 171 171.059272925037 Theta(tan=-0.157324, x=-0.98785, y=0.155413): -0.158384440325
    test 5119 171 171.044507910770 Mu(tan=-0.157588, x=-0.98781, y=0.155667): -0.158384440325
    test 5120 171 171.059271317019 Chi(tan=-0.157324, x=-0.98785, y=0.155413): -0.158384440325
    test 5121 171 171.039574393894 Xi(tan=-0.157676, x=-0.987796, y=0.155752): -0.158384440325

    test 5122 171 171.000000000000 Phi(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325
    test 5123 171 171.029683808843 Beta(tan=-0.157853, x=-0.987688, y=0.15591): -0.158384440325
    test 5124 171 171.059272925037 Theta(tan=-0.157324, x=-0.987688, y=0.155387): -0.158384440325
    test 5125 171 171.044507910770 Mu(tan=-0.157588, x=-0.98781, y=0.155667), iteration=3: -0.158384440325
    test 5126 171 171.059271317019 Chi(tan=-0.157324, x=-1, y=0.157324), iteration=3: -0.158384440325
    test 5127 171 171.039574393894 Xi(tan=-0.157676, x=-1.98446, y=0.312903), iteration=2: -0.158384440325

    test 5128 174 174.000000000000 Phi(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266
    test 5129 174 174.019970846274 Beta(tan=-0.104752, x=-0.994558, y=0.104182): -0.105104235266
    test 5130 174 174.039876185217 Theta(tan=-0.104401, x=-0.994594, y=0.103836): -0.105104235266
    test 5131 174 174.029943953044 Mu(tan=-0.104576, x=-0.994576, y=0.104009): -0.105104235266
    test 5132 174 174.039875702290 Chi(tan=-0.104401, x=-0.994594, y=0.103836): -0.105104235266
    test 5133 174 174.026624930844 Xi(tan=-0.104634, x=-0.99457, y=0.104066): -0.105104235266

    test 5134 174 174.000000000000 Phi(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266
    test 5135 174 174.019970846274 Beta(tan=-0.104752, x=-0.994522, y=0.104178): -0.105104235266
    test 5136 174 174.039876185217 Theta(tan=-0.104401, x=-0.994522, y=0.103829): -0.105104235266
    test 5137 174 174.029943953044 Mu(tan=-0.104576, x=-0.994576, y=0.104009), iteration=3: -0.105104235266
    test 5138 174 174.039875702290 Chi(tan=-0.104401, x=-1, y=0.104401), iteration=3: -0.105104235266
    test 5139 174 174.026624930844 Xi(tan=-0.104634, x=-1.99807, y=0.209067), iteration=3: -0.105104235266

    test 5140 177 177.000000000000 Phi(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283
    test 5141 177 177.010040150331 Beta(tan=-0.0522321, x=-0.998639, y=0.052161): -0.052407779283
    test 5142 177 177.020046820811 Theta(tan=-0.0520569, x=-0.998648, y=0.0519865): -0.052407779283
    test 5143 177 177.015053930532 Mu(tan=-0.0521443, x=-0.998643, y=0.0520736): -0.052407779283
    test 5144 177 177.020046759956 Chi(tan=-0.0520569, x=-0.998648, y=0.0519866): -0.052407779283
    test 5145 177 177.013385378246 Xi(tan=-0.0521735, x=-0.998642, y=0.0521027): -0.052407779283

    test 5146 177 177.000000000000 Phi(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283
    test 5147 177 177.010040150331 Beta(tan=-0.0522321, x=-0.99863, y=0.0521605): -0.052407779283
    test 5148 177 177.020046820811 Theta(tan=-0.0520569, x=-0.99863, y=0.0519856): -0.052407779283
    test 5149 177 177.015053930532 Mu(tan=-0.0521443, x=-0.998643, y=0.0520736), iteration=3: -0.052407779283
    test 5150 177 177.020046759956 Chi(tan=-0.0520569, x=-1, y=0.0520569), iteration=3: -0.052407779283
    test 5151 177 177.013385378246 Xi(tan=-0.0521735, x=-2.00625, y=0.104673), iteration=3: -0.052407779283

    test 5152 180 180.000000000000 Phi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 5153 180 180.000000000000 Beta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 5154 180 180.000000000000 Theta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 5155 180 180.000000000000 Mu(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 5156 180 180.000000000000 Chi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 5157 180 180.000000000000 Xi(tan=0.0, x=-1, y=0.0): 0.000000000000

    test 5158 180 180.000000000000 Phi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 5159 180 180.000000000000 Beta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 5160 180 180.000000000000 Theta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 5161 180 180.000000000000 Mu(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 5162 180 180.000000000000 Chi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 5163 180 180.000000000000 Xi(tan=0.0, x=-1, y=0.0): 0.000000000000

    test 5164 183 183.000000000000 Phi(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283
    test 5165 183 182.989959849669 Beta(tan=0.0522321, x=-0.998639, y=-0.052161): 0.052407779283
    test 5166 183 182.979953179189 Theta(tan=0.0520569, x=-0.998648, y=-0.0519865): 0.052407779283
    test 5167 183 182.984946069468 Mu(tan=0.0521443, x=-0.998643, y=-0.0520736): 0.052407779283
    test 5168 183 182.979953240044 Chi(tan=0.0520569, x=-0.998648, y=-0.0519866): 0.052407779283
    test 5169 183 182.986614621754 Xi(tan=0.0521735, x=-0.998642, y=-0.0521027): 0.052407779283

    test 5170 183 183.000000000000 Phi(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283
    test 5171 183 182.989959849669 Beta(tan=0.0522321, x=-0.99863, y=-0.0521605): 0.052407779283
    test 5172 183 182.979953179189 Theta(tan=0.0520569, x=-0.99863, y=-0.0519856): 0.052407779283
    test 5173 183 182.984946069468 Mu(tan=0.0521443, x=-0.998643, y=-0.0520736), iteration=3: 0.052407779283
    test 5174 183 182.979953240044 Chi(tan=0.0520569, x=-1, y=-0.0520569), iteration=3: 0.052407779283
    test 5175 183 182.986614621754 Xi(tan=0.0521735, x=-2.00625, y=-0.104673), iteration=3: 0.052407779283

    test 5176 186 186.000000000000 Phi(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266
    test 5177 186 185.980029153726 Beta(tan=0.104752, x=-0.994558, y=-0.104182): 0.105104235266
    test 5178 186 185.960123814783 Theta(tan=0.104401, x=-0.994594, y=-0.103836): 0.105104235266
    test 5179 186 185.970056046956 Mu(tan=0.104576, x=-0.994576, y=-0.104009): 0.105104235266
    test 5180 186 185.960124297710 Chi(tan=0.104401, x=-0.994594, y=-0.103836): 0.105104235266
    test 5181 186 185.973375069156 Xi(tan=0.104634, x=-0.99457, y=-0.104066): 0.105104235266

    test 5182 186 186.000000000000 Phi(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266
    test 5183 186 185.980029153726 Beta(tan=0.104752, x=-0.994522, y=-0.104178): 0.105104235266
    test 5184 186 185.960123814783 Theta(tan=0.104401, x=-0.994522, y=-0.103829): 0.105104235266
    test 5185 186 185.970056046956 Mu(tan=0.104576, x=-0.994576, y=-0.104009), iteration=3: 0.105104235266
    test 5186 186 185.960124297710 Chi(tan=0.104401, x=-1, y=-0.104401), iteration=3: 0.105104235266
    test 5187 186 185.973375069156 Xi(tan=0.104634, x=-1.99807, y=-0.209067), iteration=2: 0.105104235266

    test 5188 189 189.000000000000 Phi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 5189 189 188.970316191157 Beta(tan=0.157853, x=-0.987769, y=-0.155923): 0.158384440325
    test 5190 189 188.940727074962 Theta(tan=0.157324, x=-0.98785, y=-0.155413): 0.158384440325
    test 5191 189 188.955492089230 Mu(tan=0.157588, x=-0.98781, y=-0.155667): 0.158384440325
    test 5192 189 188.940728682981 Chi(tan=0.157324, x=-0.98785, y=-0.155413): 0.158384440325
    test 5193 189 188.960425606106 Xi(tan=0.157676, x=-0.987796, y=-0.155752): 0.158384440325

    test 5194 189 189.000000000000 Phi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 5195 189 188.970316191157 Beta(tan=0.157853, x=-0.987688, y=-0.15591): 0.158384440325
    test 5196 189 188.940727074963 Theta(tan=0.157324, x=-0.987688, y=-0.155387): 0.158384440325
    test 5197 189 188.955492089230 Mu(tan=0.157588, x=-0.98781, y=-0.155667), iteration=3: 0.158384440325
    test 5198 189 188.940728682981 Chi(tan=0.157324, x=-1, y=-0.157324), iteration=3: 0.158384440325
    test 5199 189 188.960425606106 Xi(tan=0.157676, x=-1.98446, y=-0.312903), iteration=2: 0.158384440325

    test 5200 192 192.000000000000 Phi(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670
    test 5201 192 191.960926901992 Beta(tan=0.211844, x=-0.978289, y=-0.207245): 0.212556561670
    test 5202 192 191.921973572506 Theta(tan=0.211134, x=-0.97843, y=-0.206579): 0.212556561670
    test 5203 192 191.941412867810 Mu(tan=0.211488, x=-0.97836, y=-0.206911): 0.212556561670
    test 5204 192 191.921977312469 Chi(tan=0.211134, x=-0.97843, y=-0.20658): 0.212556561670
    test 5205 192 191.947907388565 Xi(tan=0.211606, x=-0.978336, y=-0.207022): 0.212556561670

    test 5206 192 192.000000000000 Phi(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670
    test 5207 192 191.960926901992 Beta(tan=0.211844, x=-0.978148, y=-0.207215): 0.212556561670
    test 5208 192 191.921973572506 Theta(tan=0.211134, x=-0.978148, y=-0.20652): 0.212556561670
    test 5209 192 191.941412867810 Mu(tan=0.211488, x=-0.97836, y=-0.206911), iteration=3: 0.212556561670
    test 5210 192 191.921977312469 Chi(tan=0.211134, x=-1, y=-0.211134), iteration=3: 0.212556561670
    test 5211 192 191.947907388565 Xi(tan=0.211606, x=-1.96546, y=-0.415904), iteration=3: 0.212556561670

    test 5212 195 195.000000000000 Phi(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431
    test 5213 195 194.951963747366 Beta(tan=0.267051, x=-0.966142, y=-0.258009): 0.267949192431
    test 5214 195 194.904067139653 Theta(tan=0.266155, x=-0.966358, y=-0.257201): 0.267949192431
    test 5215 195 194.927971869417 Mu(tan=0.266602, x=-0.96625, y=-0.257605): 0.267949192431
    test 5216 195 194.904074267391 Chi(tan=0.266156, x=-0.966358, y=-0.257202): 0.267949192431
    test 5217 195 194.935956949387 Xi(tan=0.266752, x=-0.966215, y=-0.257739): 0.267949192431

    test 5218 195 195.000000000000 Phi(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431
    test 5219 195 194.951963747366 Beta(tan=0.267051, x=-0.965926, y=-0.257951): 0.267949192431
    test 5220 195 194.904067139653 Theta(tan=0.266155, x=-0.965926, y=-0.257086): 0.267949192431
    test 5221 195 194.927971869417 Mu(tan=0.266602, x=-0.96625, y=-0.257605), iteration=3: 0.267949192431
    test 5222 195 194.904074267391 Chi(tan=0.266156, x=-1, y=-0.266156), iteration=3: 0.267949192431
    test 5223 195 194.935956949387 Xi(tan=0.266752, x=-1.94111, y=-0.517793), iteration=3: 0.267949192431

    test 5224 198 198.000000000000 Phi(tan=0.32492, x=-0.951057, y=-0.309017): 0.324919696233
    test 5225 198 197.943524604789 Beta(tan=0.32383, x=-0.951361, y=-0.308079): 0.324919696233
    test 5226 198 197.887202665849 Theta(tan=0.322745, x=-0.951663, y=-0.307144): 0.324919696233
    test 5227 198 197.915315747772 Mu(tan=0.323286, x=-0.951512, y=-0.307611): 0.324919696233
    test 5228 198 197.887214616853 Chi(tan=0.322745, x=-0.951663, y=-0.307144): 0.324919696233
    test 5229 198 197.924704729404 Xi(tan=0.323467, x=-0.951462, y=-0.307767): 0.324919696233

    test 5230 198 198.000000000000 Phi(tan=0.32492, x=-0.951057, y=-0.309017): 0.324919696233
    test 5231 198 197.943524604789 Beta(tan=0.32383, x=-0.951057, y=-0.307981): 0.324919696233
    test 5232 198 197.887202665849 Theta(tan=0.322745, x=-0.951057, y=-0.306948): 0.324919696233
    test 5233 198 197.915315747772 Mu(tan=0.323286, x=-0.951512, y=-0.307611), iteration=3: 0.324919696233
    test 5234 198 197.887214616853 Chi(tan=0.322745, x=-1, y=-0.322745), iteration=2: 0.324919696233
    test 5235 198 197.924704729404 Xi(tan=0.323467, x=-1.91147, y=-0.618298), iteration=3: 0.324919696233

    test 5236 201 201.000000000000 Phi(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035
    test 5237 201 200.935701709947 Beta(tan=0.382577, x=-0.933982, y=-0.35732): 0.383864035035
    test 5238 201 200.871564019024 Theta(tan=0.381294, x=-0.934381, y=-0.356274): 0.383864035035
    test 5239 201 200.903582743391 Mu(tan=0.381935, x=-0.934182, y=-0.356796): 0.383864035035
    test 5240 201 200.871582327745 Chi(tan=0.381295, x=-0.934381, y=-0.356275): 0.383864035035
    test 5241 201 200.914273669704 Xi(tan=0.382148, x=-0.934116, y=-0.356971): 0.383864035035

    test 5242 201 201.000000000000 Phi(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035
    test 5243 201 200.935701709947 Beta(tan=0.382577, x=-0.93358, y=-0.357166): 0.383864035035
    test 5244 201 200.871564019024 Theta(tan=0.381294, x=-0.93358, y=-0.355969): 0.383864035035
    test 5245 201 200.903582743391 Mu(tan=0.381935, x=-0.934182, y=-0.356796), iteration=3: 0.383864035035
    test 5246 201 200.871582327745 Chi(tan=0.381295, x=-1, y=-0.381295), iteration=2: 0.383864035035
    test 5247 201 200.914273669704 Xi(tan=0.382148, x=-1.87662, y=-0.717147), iteration=3: 0.383864035035

    test 5248 204 204.000000000000 Phi(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309
    test 5249 204 203.928580656019 Beta(tan=0.443736, x=-0.914052, y=-0.405598): 0.445228685309
    test 5250 204 203.857322070702 Theta(tan=0.442248, x=-0.914555, y=-0.40446): 0.445228685309
    test 5251 204 203.892901187501 Mu(tan=0.442991, x=-0.914304, y=-0.405028): 0.445228685309
    test 5252 204 203.857348282082 Chi(tan=0.442249, x=-0.914555, y=-0.404461): 0.445228685309
    test 5253 204 203.904777879573 Xi(tan=0.443239, x=-0.91422, y=-0.405218): 0.445228685309

    test 5254 204 204.000000000000 Phi(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309
    test 5255 204 203.928580656019 Beta(tan=0.443736, x=-0.913545, y=-0.405373): 0.445228685309
    test 5256 204 203.857322070702 Theta(tan=0.442248, x=-0.913545, y=-0.404014): 0.445228685309
    test 5257 204 203.892901187501 Mu(tan=0.442991, x=-0.914304, y=-0.405028), iteration=3: 0.445228685309
    test 5258 204 203.857348282082 Chi(tan=0.442249, x=-1, y=-0.442249), iteration=3: 0.445228685309
    test 5259 204 203.904777879573 Xi(tan=0.443239, x=-1.83665, y=-0.814074), iteration=3: 0.445228685309

    test 5260 207 207.000000000000 Phi(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494
    test 5261 207 206.922239461028 Beta(tan=0.507817, x=-0.891622, y=-0.452781): 0.509525449494
    test 5262 207 206.844632844859 Theta(tan=0.506114, x=-0.892234, y=-0.451573): 0.509525449494
    test 5263 207 206.883388105679 Mu(tan=0.506964, x=-0.891929, y=-0.452176): 0.509525449494
    test 5264 207 206.844668422078 Chi(tan=0.506115, x=-0.892234, y=-0.451573): 0.509525449494
    test 5265 207 206.896321394068 Xi(tan=0.507248, x=-0.891827, y=-0.452377): 0.509525449494

    test 5266 207 207.000000000000 Phi(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494
    test 5267 207 206.922239461028 Beta(tan=0.507817, x=-0.891007, y=-0.452468): 0.509525449494
    test 5268 207 206.844632844859 Theta(tan=0.506114, x=-0.891007, y=-0.450951): 0.509525449494
    test 5269 207 206.883388105679 Mu(tan=0.506964, x=-0.891929, y=-0.452176), iteration=2: 0.509525449494
    test 5270 207 206.844668422078 Chi(tan=0.506115, x=-1, y=-0.506115), iteration=3: 0.509525449494
    test 5271 207 206.896321394068 Xi(tan=0.507248, x=-1.79166, y=-0.908817), iteration=2: 0.509525449494

    test 5272 210 210.000000000000 Phi(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 5273 210 209.916747713236 Beta(tan=0.575415, x=-0.866751, y=-0.498741): 0.577350269190
    test 5274 210 209.833635809829 Theta(tan=0.573485, x=-0.867474, y=-0.497483): 0.577350269190
    test 5275 210 209.875147936061 Mu(tan=0.574448, x=-0.867113, y=-0.498112): 0.577350269190
    test 5276 210 209.833682042481 Chi(tan=0.573486, x=-0.867473, y=-0.497484): 0.577350269190
    test 5277 210 209.888997034460 Xi(tan=0.57477, x=-0.866992, y=-0.498321): 0.577350269190

    test 5278 210 210.000000000000 Phi(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 5279 210 209.916747713236 Beta(tan=0.575415, x=-0.866025, y=-0.498324): 0.577350269190
    test 5280 210 209.833635809829 Theta(tan=0.573485, x=-0.866025, y=-0.496653): 0.577350269190
    test 5281 210 209.875147936061 Mu(tan=0.574448, x=-0.867113, y=-0.498112), iteration=3: 0.577350269190
    test 5282 210 209.833682042481 Chi(tan=0.573486, x=-1, y=-0.573486), iteration=2: 0.577350269190
    test 5283 210 209.888997034460 Xi(tan=0.57477, x=-1.74177, y=-1.00112), iteration=3: 0.577350269190

    test 5284 213 213.000000000000 Phi(tan=0.649408, x=-0.838671, y=-0.544639): 0.649407593198
    test 5285 213 212.912165803903 Beta(tan=0.64723, x=-0.839505, y=-0.543353): 0.649407593198
    test 5286 213 212.824452331856 Theta(tan=0.64506, x=-0.840335, y=-0.542067): 0.649407593198
    test 5287 213 212.868271376142 Mu(tan=0.646144, x=-0.839921, y=-0.542709): 0.649407593198
    test 5288 213 212.824510248806 Chi(tan=0.645062, x=-0.840335, y=-0.542068): 0.649407593198
    test 5289 213 212.882885384008 Xi(tan=0.646505, x=-0.839782, y=-0.542924): 0.649407593198

    test 5290 213 213.000000000000 Phi(tan=0.649408, x=-0.838671, y=-0.544639): 0.649407593198
    test 5291 213 212.912165803903 Beta(tan=0.64723, x=-0.838671, y=-0.542813): 0.649407593198
    test 5292 213 212.824452331856 Theta(tan=0.64506, x=-0.838671, y=-0.540993): 0.649407593198
    test 5293 213 212.868271376142 Mu(tan=0.646144, x=-0.839921, y=-0.542709), iteration=3: 0.649407593198
    test 5294 213 212.824510248806 Chi(tan=0.645062, x=-1, y=-0.645062), iteration=3: 0.649407593198
    test 5295 213 212.882885384008 Xi(tan=0.646505, x=-1.68711, y=-1.09072), iteration=3: 0.649407593198

    test 5296 216 216.000000000000 Phi(tan=0.726543, x=-0.809017, y=-0.587785): 0.726542528005
    test 5297 216 215.908544256035 Beta(tan=0.724107, x=-0.809954, y=-0.586493): 0.726542528005
    test 5298 216 215.817184307945 Theta(tan=0.721679, x=-0.810888, y=-0.585201): 0.726542528005
    test 5299 216 215.862834371158 Mu(tan=0.722891, x=-0.810422, y=-0.585847): 0.726542528005
    test 5300 216 215.817254598968 Chi(tan=0.721681, x=-0.810888, y=-0.585202): 0.726542528005
    test 5301 216 215.878053890609 Xi(tan=0.723296, x=-0.810266, y=-0.586062): 0.726542528005

    test 5302 216 216.000000000000 Phi(tan=0.726543, x=-0.809017, y=-0.587785): 0.726542528005
    test 5303 216 215.908544256035 Beta(tan=0.724107, x=-0.809017, y=-0.585815): 0.726542528005
    test 5304 216 215.817184307945 Theta(tan=0.721679, x=-0.809017, y=-0.58385): 0.726542528005
    test 5305 216 215.862834371158 Mu(tan=0.722891, x=-0.810422, y=-0.585847), iteration=2: 0.726542528005
    test 5306 216 215.817254598968 Chi(tan=0.721681, x=-1, y=-0.721681), iteration=3: 0.726542528005
    test 5307 216 215.878053890609 Xi(tan=0.723296, x=-1.62781, y=-1.17739), iteration=3: 0.726542528005

    test 5308 219 219.000000000000 Phi(tan=0.809784, x=-0.777146, y=-0.62932): 0.809784033195
    test 5309 219 218.905923156872 Beta(tan=0.807069, x=-0.778178, y=-0.628044): 0.809784033195
    test 5310 219 218.811912994521 Theta(tan=0.804363, x=-0.779208, y=-0.626766): 0.809784033195
    test 5311 219 218.858897255896 Mu(tan=0.805715, x=-0.778693, y=-0.627405): 0.809784033195
    test 5312 219 218.811995944515 Chi(tan=0.804365, x=-0.779207, y=-0.626767): 0.809784033195
    test 5313 219 218.874556106726 Xi(tan=0.806165, x=-0.778522, y=-0.627617): 0.809784033195

    test 5314 219 219.000000000000 Phi(tan=0.809784, x=-0.777146, y=-0.62932): 0.809784033195
    test 5315 219 218.905923156872 Beta(tan=0.807069, x=-0.777146, y=-0.62721): 0.809784033195
    test 5316 219 218.811912994521 Theta(tan=0.804363, x=-0.777146, y=-0.625107): 0.809784033195
    test 5317 219 218.858897255896 Mu(tan=0.805715, x=-0.778693, y=-0.627405), iteration=2: 0.809784033195
    test 5318 219 218.811995944515 Chi(tan=0.804365, x=-1, y=-0.804365), iteration=3: 0.809784033195
    test 5319 219 218.874556106726 Xi(tan=0.806165, x=-1.56403, y=-1.26087), iteration=3: 0.809784033195

    test 5320 222 222.000000000000 Phi(tan=0.900404, x=-0.743145, y=-0.669131): 0.900404044298
    test 5321 222 221.904331700939 Beta(tan=0.897385, x=-0.744261, y=-0.667889): 0.900404044298
    test 5322 222 221.808698047037 Theta(tan=0.894376, x=-0.745375, y=-0.666646): 0.900404044298
    test 5323 222 221.856504060443 Mu(tan=0.895879, x=-0.744818, y=-0.667267): 0.900404044298
    test 5324 222 221.808793486106 Chi(tan=0.894379, x=-0.745374, y=-0.666647): 0.900404044298
    test 5325 222 221.872431075863 Xi(tan=0.896381, x=-0.744633, y=-0.667474): 0.900404044298

    test 5326 222 222.000000000000 Phi(tan=0.900404, x=-0.743145, y=-0.669131): 0.900404044298
    test 5327 222 221.904331700939 Beta(tan=0.897385, x=-0.743145, y=-0.666887): 0.900404044298
    test 5328 222 221.808698047037 Theta(tan=0.894376, x=-0.743145, y=-0.664651): 0.900404044298
    test 5329 222 221.856504060443 Mu(tan=0.895879, x=-0.744818, y=-0.667267), iteration=3: 0.900404044298
    test 5330 222 221.808793486106 Chi(tan=0.894379, x=-1, y=-0.894379), iteration=3: 0.900404044298
    test 5331 222 221.872431075863 Xi(tan=0.896381, x=-1.49595, y=-1.34094), iteration=3: 0.900404044298

    test 5332 225 225.000000000000 Phi(tan=1.0, x=-0.707107, y=-0.707107): 1.000000000000
    test 5333 225 224.903787849420 Beta(tan=0.996647, x=-0.708293, y=-0.705918): 1.000000000000
    test 5334 225 224.807576784018 Theta(tan=0.993306, x=-0.709478, y=-0.704728): 1.000000000000
    test 5335 225 224.855681988907 Mu(tan=0.994975, x=-0.708886, y=-0.705323): 1.000000000000
    test 5336 225 224.807684056089 Chi(tan=0.993309, x=-0.709476, y=-0.704729): 1.000000000000
    test 5337 225 224.871702873434 Xi(tan=0.995532, x=-0.708688, y=-0.705522): 1.000000000000

    test 5338 225 225.000000000000 Phi(tan=1.0, x=-0.707107, y=-0.707107): 1.000000000000
    test 5339 225 224.903787849420 Beta(tan=0.996647, x=-0.707107, y=-0.704736): 1.000000000000
    test 5340 225 224.807576784018 Theta(tan=0.993306, x=-0.707107, y=-0.702373): 1.000000000000
    test 5341 225 224.855681988907 Mu(tan=0.994975, x=-0.708886, y=-0.705323), iteration=2: 1.000000000000
    test 5342 225 224.807684056089 Chi(tan=0.993309, x=-1, y=-0.993309), iteration=3: 1.000000000000
    test 5343 225 224.871702873434 Xi(tan=0.995532, x=-1.42374, y=-1.41738), iteration=2: 1.000000000000

    test 5344 228 228.000000000000 Phi(tan=1.11061, x=-0.669131, y=-0.743145): 1.110612514829
    test 5345 228 227.904298110495 Beta(tan=1.10689, x=-0.670371, y=-0.742026): 1.110612514829
    test 5346 228 227.808563687131 Theta(tan=1.10318, x=-0.67161, y=-0.740905): 1.110612514829
    test 5347 228 227.856441078504 Mu(tan=1.10503, x=-0.670991, y=-0.741466): 1.110612514829
    test 5348 228 227.808681638983 Chi(tan=1.10318, x=-0.671608, y=-0.740906): 1.110612514829
    test 5349 228 227.872380308425 Xi(tan=1.10565, x=-0.670784, y=-0.741653): 1.110612514829

    test 5350 228 228.000000000000 Phi(tan=1.11061, x=-0.669131, y=-0.743145): 1.110612514829
    test 5351 228 227.904298110495 Beta(tan=1.10689, x=-0.669131, y=-0.740653): 1.110612514829
    test 5352 228 227.808563687131 Theta(tan=1.10318, x=-0.669131, y=-0.73817): 1.110612514829
    test 5353 228 227.856441078504 Mu(tan=1.10503, x=-0.670991, y=-0.741466), iteration=3: 1.110612514829
    test 5354 228 227.808681638983 Chi(tan=1.10318, x=-1, y=-1.10318), iteration=3: 1.110612514829
    test 5355 228 227.872380308425 Xi(tan=1.10565, x=-1.34759, y=-1.48997), iteration=2: 1.110612514829

    test 5356 231 231.000000000000 Phi(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 5357 231 230.905857444036 Beta(tan=1.23076, x=-0.630596, y=-0.776111): 1.234897156535
    test 5358 231 230.811650146691 Theta(tan=1.22663, x=-0.631872, y=-0.775073): 1.234897156535
    test 5359 231 230.858774044602 Mu(tan=1.22869, x=-0.631234, y=-0.775592): 1.234897156535
    test 5360 231 230.811777138431 Chi(tan=1.22664, x=-0.63187, y=-0.775074): 1.234897156535
    test 5361 231 230.874456790611 Xi(tan=1.22938, x=-0.631022, y=-0.775765): 1.234897156535

    test 5362 231 231.000000000000 Phi(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 5363 231 230.905857444036 Beta(tan=1.23076, x=-0.62932, y=-0.77454): 1.234897156535
    test 5364 231 230.811650146691 Theta(tan=1.22663, x=-0.62932, y=-0.771943): 1.234897156535
    test 5365 231 230.858774044602 Mu(tan=1.22869, x=-0.631234, y=-0.775592), iteration=3: 1.234897156535
    test 5366 231 230.811777138431 Chi(tan=1.22664, x=-1, y=-1.22664), iteration=3: 1.234897156535
    test 5367 231 230.874456790611 Xi(tan=1.22938, x=-1.26771, y=-1.5585), iteration=2: 1.234897156535

    test 5368 234 234.000000000000 Phi(tan=1.37638, x=-0.587785, y=-0.809017): 1.376381920471
    test 5369 234 233.908449292751 Beta(tan=1.37177, x=-0.589077, y=-0.808077): 1.376381920471
    test 5370 234 233.816804459552 Theta(tan=1.36717, x=-0.590369, y=-0.807133): 1.376381920471
    test 5371 234 233.862656315380 Mu(tan=1.36947, x=-0.589723, y=-0.807606): 1.376381920471
    test 5372 234 233.816938396628 Chi(tan=1.36717, x=-0.590367, y=-0.807135): 1.376381920471
    test 5373 234 233.877910366370 Xi(tan=1.37023, x=-0.589508, y=-0.807763): 1.376381920471

    test 5374 234 234.000000000000 Phi(tan=1.37638, x=-0.587785, y=-0.809017): 1.376381920471
    test 5375 234 233.908449292751 Beta(tan=1.37177, x=-0.587785, y=-0.806305): 1.376381920471
    test 5376 234 233.816804459552 Theta(tan=1.36717, x=-0.587785, y=-0.803601): 1.376381920471
    test 5377 234 233.862656315380 Mu(tan=1.36947, x=-0.589723, y=-0.807606), iteration=2: 1.376381920471
    test 5378 234 233.816938396628 Chi(tan=1.36717, x=-1, y=-1.36717), iteration=3: 1.376381920471
    test 5379 234 233.877910366370 Xi(tan=1.37023, x=-1.18431, y=-1.62278), iteration=2: 1.376381920471

    test 5380 237 237.000000000000 Phi(tan=1.53986, x=-0.544639, y=-0.838671): 1.539864963815
    test 5381 237 236.912045740495 Beta(tan=1.5347, x=-0.545926, y=-0.837834): 1.539864963815
    test 5382 237 236.823972083650 Theta(tan=1.52956, x=-0.547213, y=-0.836993): 1.539864963815
    test 5383 237 236.868046257702 Mu(tan=1.53213, x=-0.546569, y=-0.837414): 1.539864963815
    test 5384 237 236.824110469549 Chi(tan=1.52956, x=-0.547211, y=-0.836995): 1.539864963815
    test 5385 237 236.882703924297 Xi(tan=1.53299, x=-0.546355, y=-0.837554): 1.539864963815

    test 5386 237 237.000000000000 Phi(tan=1.53986, x=-0.544639, y=-0.838671): 1.539864963815
    test 5387 237 236.912045740495 Beta(tan=1.5347, x=-0.544639, y=-0.835859): 1.539864963815
    test 5388 237 236.823972083650 Theta(tan=1.52956, x=-0.544639, y=-0.833056): 1.539864963815
    test 5389 237 236.868046257702 Mu(tan=1.53213, x=-0.546569, y=-0.837414), iteration=3: 1.539864963815
    test 5390 237 236.824110469549 Chi(tan=1.52956, x=-1, y=-1.52956), iteration=3: 1.539864963815
    test 5391 237 236.882703924297 Xi(tan=1.53299, x=-1.09762, y=-1.68263), iteration=2: 1.539864963815

    test 5392 240 240.000000000000 Phi(tan=1.73205, x=-0.5, y=-0.866025): 1.732050807569
    test 5393 240 239.916607797021 Beta(tan=1.72624, x=-0.50126, y=-0.865297): 1.732050807569
    test 5394 240 239.833076150493 Theta(tan=1.72046, x=-0.502521, y=-0.864565): 1.732050807569
    test 5395 240 239.874885593644 Mu(tan=1.72335, x=-0.50189, y=-0.864932): 1.732050807569
    test 5396 240 239.833216158350 Chi(tan=1.72047, x=-0.502519, y=-0.864566): 1.732050807569
    test 5397 240 239.888785569885 Xi(tan=1.72431, x=-0.50168, y=-0.865053): 1.732050807569

    test 5398 240 240.000000000000 Phi(tan=1.73205, x=-0.5, y=-0.866025): 1.732050807569
    test 5399 240 239.916607797021 Beta(tan=1.72624, x=-0.5, y=-0.863122): 1.732050807569
    test 5400 240 239.833076150493 Theta(tan=1.72046, x=-0.5, y=-0.860228): 1.732050807569
    test 5401 240 239.874885593644 Mu(tan=1.72335, x=-0.50189, y=-0.864932), iteration=2: 1.732050807569
    test 5402 240 239.833216158350 Chi(tan=1.72047, x=-1, y=-1.72047), iteration=2: 1.732050807569
    test 5403 240 239.888785569885 Xi(tan=1.72431, x=-1.00787, y=-1.73787), iteration=2: 1.732050807569

    test 5404 243 243.000000000000 Phi(tan=1.96261, x=-0.45399, y=-0.891007): 1.962610505505
    test 5405 243 242.922085806991 Beta(tan=1.95603, x=-0.455202, y=-0.890388): 1.962610505505
    test 5406 243 242.844018233783 Theta(tan=1.94947, x=-0.456414, y=-0.889767): 1.962610505505
    test 5407 243 242.883100004844 Mu(tan=1.95275, x=-0.455807, y=-0.890078): 1.962610505505
    test 5408 243 242.844156794245 Chi(tan=1.94948, x=-0.456412, y=-0.889768): 1.962610505505
    test 5409 243 242.896089166605 Xi(tan=1.95384, x=-0.455606, y=-0.890182): 1.962610505505

    test 5410 243 243.000000000000 Phi(tan=1.96261, x=-0.45399, y=-0.891007): 1.962610505505
    test 5411 243 242.922085806991 Beta(tan=1.95603, x=-0.45399, y=-0.888019): 1.962610505505
    test 5412 243 242.844018233783 Theta(tan=1.94947, x=-0.45399, y=-0.885042): 1.962610505505
    test 5413 243 242.883100004844 Mu(tan=1.95275, x=-0.455807, y=-0.890078), iteration=3: 1.962610505505
    test 5414 243 242.844156794245 Chi(tan=1.94948, x=-1, y=-1.94948), iteration=3: 1.962610505505
    test 5415 243 242.896089166605 Xi(tan=1.95384, x=-0.915303, y=-1.78836), iteration=3: 1.962610505505

    test 5416 246 246.000000000000 Phi(tan=2.24604, x=-0.406737, y=-0.913545): 2.246036773904
    test 5417 246 245.928419979560 Beta(tan=2.23851, x=-0.407878, y=-0.913037): 2.246036773904
    test 5418 246 245.856679369063 Theta(tan=2.231, x=-0.409021, y=-0.912525): 2.246036773904
    test 5419 246 245.892599919595 Mu(tan=2.23475, x=-0.408448, y=-0.912781): 2.246036773904
    test 5420 246 245.856813271004 Chi(tan=2.23101, x=-0.409018, y=-0.912526): 2.246036773904
    test 5421 246 245.904535038645 Xi(tan=2.236, x=-0.408258, y=-0.912866): 2.246036773904

    test 5422 246 246.000000000000 Phi(tan=2.24604, x=-0.406737, y=-0.913545): 2.246036773904
    test 5423 246 245.928419979560 Beta(tan=2.23851, x=-0.406737, y=-0.910483): 2.246036773904
    test 5424 246 245.856679369063 Theta(tan=2.231, x=-0.406737, y=-0.90743): 2.246036773904
    test 5425 246 245.892599919595 Mu(tan=2.23475, x=-0.408448, y=-0.912781), iteration=3: 2.246036773904
    test 5426 246 245.856813271004 Chi(tan=2.23101, x=-1, y=-2.23101), iteration=3: 2.246036773904
    test 5427 246 245.904535038645 Xi(tan=2.236, x=-0.820183, y=-1.83393), iteration=3: 2.246036773904

    test 5428 249 249.000000000000 Phi(tan=2.60509, x=-0.358368, y=-0.93358): 2.605089064694
    test 5429 249 248.935541033395 Beta(tan=2.59635, x=-0.359418, y=-0.933177): 2.605089064694
    test 5430 249 248.870921315869 Theta(tan=2.58765, x=-0.36047, y=-0.932771): 2.605089064694
    test 5431 249 248.903281475251 Mu(tan=2.592, x=-0.359943, y=-0.932974): 2.605089064694
    test 5432 249 248.871047315925 Chi(tan=2.58767, x=-0.360468, y=-0.932772): 2.605089064694
    test 5433 249 248.914030828615 Xi(tan=2.59345, x=-0.359768, y=-0.933042): 2.605089064694

    test 5434 249 249.000000000000 Phi(tan=2.60509, x=-0.358368, y=-0.93358): 2.605089064694
    test 5435 249 248.935541033395 Beta(tan=2.59635, x=-0.358368, y=-0.93045): 2.605089064694
    test 5436 249 248.870921315869 Theta(tan=2.58765, x=-0.358368, y=-0.927331): 2.605089064694
    test 5437 249 248.903281475251 Mu(tan=2.592, x=-0.359943, y=-0.932974), iteration=2: 2.605089064694
    test 5438 249 248.871047315925 Chi(tan=2.58767, x=-1, y=-2.58767), iteration=3: 2.605089064694
    test 5439 249 248.914030828615 Xi(tan=2.59345, x=-0.722767, y=-1.87446), iteration=3: 2.605089064694

    test 5440 252 252.000000000000 Phi(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 5441 252 251.943370950484 Beta(tan=3.06736, x=-0.309957, y=-0.950751): 3.077683537175
    test 5442 252 251.886588050489 Theta(tan=3.05708, x=-0.310899, y=-0.950443): 3.077683537175
    test 5443 252 251.915027646278 Mu(tan=3.06222, x=-0.310427, y=-0.950597): 3.077683537175
    test 5444 252 251.886702986922 Chi(tan=3.0571, x=-0.310897, y=-0.950444): 3.077683537175
    test 5445 252 251.924472501487 Xi(tan=3.06393, x=-0.31027, y=-0.950648): 3.077683537175

    test 5446 252 252.000000000000 Phi(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 5447 252 251.943370950484 Beta(tan=3.06736, x=-0.309017, y=-0.947868): 3.077683537175
    test 5448 252 251.886588050489 Theta(tan=3.05708, x=-0.309017, y=-0.94469): 3.077683537175
    test 5449 252 251.915027646278 Mu(tan=3.06222, x=-0.310427, y=-0.950597), iteration=2: 3.077683537175
    test 5450 252 251.886702986922 Chi(tan=3.0571, x=-1, y=-3.0571), iteration=3: 3.077683537175
    test 5451 252 251.924472501487 Xi(tan=3.06393, x=-0.623327, y=-1.90983), iteration=3: 3.077683537175

    test 5452 255 255.000000000000 Phi(tan=3.73205, x=-0.258819, y=-0.965926): 3.732050807569
    test 5453 255 254.951823830757 Beta(tan=3.71954, x=-0.259631, y=-0.965708): 3.732050807569
    test 5454 255 254.903507474004 Theta(tan=3.70707, x=-0.260445, y=-0.965489): 3.732050807569
    test 5455 255 254.927709526028 Mu(tan=3.7133, x=-0.260038, y=-0.965599): 3.732050807569
    test 5456 255 254.903608380168 Chi(tan=3.70709, x=-0.260444, y=-0.965489): 3.732050807569
    test 5457 255 254.935745484143 Xi(tan=3.71538, x=-0.259902, y=-0.965635): 3.732050807569

    test 5458 255 255.000000000000 Phi(tan=3.73205, x=-0.258819, y=-0.965926): 3.732050807569
    test 5459 255 254.951823830757 Beta(tan=3.71954, x=-0.258819, y=-0.962687): 3.732050807569
    test 5460 255 254.903507474004 Theta(tan=3.70707, x=-0.258819, y=-0.95946): 3.732050807569
    test 5461 255 254.927709526028 Mu(tan=3.7133, x=-0.260038, y=-0.965599), iteration=3: 3.732050807569
    test 5462 255 254.903608380168 Chi(tan=3.70709, x=-1, y=-3.70709), iteration=2: 3.732050807569
    test 5463 255 254.935745484143 Xi(tan=3.71538, x=-0.522138, y=-1.93994), iteration=2: 3.732050807569

    test 5464 258 258.000000000000 Phi(tan=4.70463, x=-0.207912, y=-0.978148): 4.704630109478
    test 5465 258 257.960806838131 Beta(tan=4.68886, x=-0.208581, y=-0.978005): 4.704630109478
    test 5466 258 257.921493317051 Theta(tan=4.67314, x=-0.209252, y=-0.977862): 4.704630109478
    test 5467 258 257.941187748255 Mu(tan=4.681, x=-0.208916, y=-0.977934): 4.704630109478
    test 5468 258 257.921577529661 Chi(tan=4.67317, x=-0.20925, y=-0.977862): 4.704630109478
    test 5469 258 257.947725928085 Xi(tan=4.68361, x=-0.208804, y=-0.977958): 4.704630109478

    test 5470 258 258.000000000000 Phi(tan=4.70463, x=-0.207912, y=-0.978148): 4.704630109478
    test 5471 258 257.960806838131 Beta(tan=4.68886, x=-0.207912, y=-0.974868): 4.704630109478
    test 5472 258 257.921493317051 Theta(tan=4.67314, x=-0.207912, y=-0.9716): 4.704630109478
    test 5473 258 257.941187748255 Mu(tan=4.681, x=-0.208916, y=-0.977934), iteration=3: 4.704630109478
    test 5474 258 257.921577529661 Chi(tan=4.67317, x=-1, y=-4.67317), iteration=3: 4.704630109478
    test 5475 258 257.947725928085 Xi(tan=4.68361, x=-0.419483, y=-1.9647), iteration=2: 4.704630109478

    test 5476 261 261.000000000000 Phi(tan=6.31375, x=-0.156434, y=-0.987688): 6.313751514675
    test 5477 261 260.970221227440 Beta(tan=6.29258, x=-0.156948, y=-0.987607): 6.313751514675
    test 5478 261 260.940347219637 Theta(tan=6.27148, x=-0.157463, y=-0.987525): 6.313751514675
    test 5479 261 260.955314032385 Mu(tan=6.28204, x=-0.157205, y=-0.987566): 6.313751514675
    test 5480 261 260.940412477244 Chi(tan=6.27153, x=-0.157462, y=-0.987525): 6.313751514675
    test 5481 261 260.960282081132 Xi(tan=6.28555, x=-0.157119, y=-0.98758): 6.313751514675

    test 5482 261 261.000000000000 Phi(tan=6.31375, x=-0.156434, y=-0.987688): 6.313751514675
    test 5483 261 260.970221227440 Beta(tan=6.29258, x=-0.156434, y=-0.984377): 6.313751514675
    test 5484 261 260.940347219637 Theta(tan=6.27148, x=-0.156434, y=-0.981076): 6.313751514675
    test 5485 261 260.955314032385 Mu(tan=6.28204, x=-0.157205, y=-0.987566), iteration=3: 6.313751514675
    test 5486 261 260.940412477244 Chi(tan=6.27153, x=-1, y=-6.27153), iteration=2: 6.313751514675
    test 5487 261 260.960282081132 Xi(tan=6.28555, x=-0.315649, y=-1.98403), iteration=3: 6.313751514675

    test 5488 264 264.000000000000 Phi(tan=9.51436, x=-0.104528, y=-0.994522): 9.514364454223
    test 5489 264 263.979963440552 Beta(tan=9.48246, x=-0.104876, y=-0.994485): 9.514364454223
    test 5490 264 263.959860961536 Theta(tan=9.45067, x=-0.105225, y=-0.994448): 9.514364454223
    test 5491 264 263.969932834829 Mu(tan=9.46657, x=-0.10505, y=-0.994467): 9.514364454223
    test 5492 264 263.959905488972 Chi(tan=9.45074, x=-0.105224, y=-0.994449): 9.514364454223
    test 5493 264 263.973275752467 Xi(tan=9.47186, x=-0.104992, y=-0.994473): 9.514364454223

    test 5494 264 264.000000000000 Phi(tan=9.51436, x=-0.104528, y=-0.994522): 9.514364454223
    test 5495 264 263.979963440552 Beta(tan=9.48246, x=-0.104528, y=-0.991187): 9.514364454223
    test 5496 264 263.959860961536 Theta(tan=9.45067, x=-0.104528, y=-0.987864): 9.514364454223
    test 5497 264 263.969932834829 Mu(tan=9.46657, x=-0.10505, y=-0.994467), iteration=3: 9.514364454223
    test 5498 264 263.959905488972 Chi(tan=9.45074, x=-1, y=-9.45074), iteration=3: 9.514364454223
    test 5499 264 263.973275752467 Xi(tan=9.47186, x=-0.210927, y=-1.99788), iteration=3: 9.514364454223

    test 5500 267 267.000000000000 Phi(tan=19.0811, x=-0.052336, y=-0.99863): 19.081136687728
    test 5501 267 266.989926259040 Beta(tan=19.0172, x=-0.0525115, y=-0.99862): 19.081136687728
    test 5502 267 266.979818816318 Theta(tan=18.9534, x=-0.0526877, y=-0.998611): 19.081136687728
    test 5503 267 266.984883087073 Mu(tan=18.9853, x=-0.0525994, y=-0.998616): 19.081136687728
    test 5504 267 266.979841391469 Chi(tan=18.9535, x=-0.0526873, y=-0.998611): 19.081136687728
    test 5505 267 266.986563854002 Xi(tan=18.9959, x=-0.0525701, y=-0.998617): 19.081136687728

    test 5506 267 267.000000000000 Phi(tan=19.0811, x=-0.052336, y=-0.99863): 19.081136687728
    test 5507 267 266.989926259040 Beta(tan=19.0172, x=-0.052336, y=-0.995281): 19.081136687728
    test 5508 267 266.979818816318 Theta(tan=18.9534, x=-0.052336, y=-0.991944): 19.081136687728
    test 5509 267 266.984883087073 Mu(tan=18.9853, x=-0.0525994, y=-0.998616), iteration=3: 19.081136687728
    test 5510 267 266.979841391469 Chi(tan=18.9535, x=-1, y=-18.9535), iteration=3: 19.081136687728
    test 5511 267 266.986563854002 Xi(tan=18.9959, x=-0.105612, y=-2.0062), iteration=3: 19.081136687728

    test 5512 270 270.000000000000 Phi(tan=-inf, x=0.0, y=-1): -inf
    test 5513 270 270.000000000000 Beta(tan=-inf, x=0.0, y=-1): -inf
    test 5514 270 270.000000000000 Theta(tan=-inf, x=0.0, y=-1): -inf
    test 5515 270 270.000000000000 Mu(tan=-inf, x=0.0, y=-1): -inf
    test 5516 270 270.000000000000 Chi(tan=-inf, x=0.0, y=-1): -inf
    test 5517 270 270.000000000000 Xi(tan=-inf, x=0.0, y=-1): -inf

    test 5518 270 270.000000000000 Phi(tan=-inf, x=0.0, y=-1): -inf
    test 5519 270 270.000000000000 Beta(tan=-inf, x=0.0, y=-1): -inf
    test 5520 270 270.000000000000 Theta(tan=-inf, x=0.0, y=-1): -inf
    test 5521 270 270.000000000000 Mu(tan=-inf, x=0.0, y=-1): -inf
    test 5522 270 270.000000000000 Chi(tan=-inf, x=0.0, y=-1): -inf
    test 5523 270 270.000000000000 Xi(tan=-inf, x=0.0, y=-1): -inf

    test 5524 273 273.000000000000 Phi(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 5525 273 273.010073740960 Beta(tan=-19.0172, x=0.0525115, y=-0.99862): -19.081136687728
    test 5526 273 273.020181183682 Theta(tan=-18.9534, x=0.0526877, y=-0.998611): -19.081136687728
    test 5527 273 273.015116912927 Mu(tan=-18.9853, x=0.0525994, y=-0.998616): -19.081136687728
    test 5528 273 273.020158608531 Chi(tan=-18.9535, x=0.0526873, y=-0.998611): -19.081136687728
    test 5529 273 273.013436145998 Xi(tan=-18.9959, x=0.0525701, y=-0.998617): -19.081136687728

    test 5530 273 273.000000000000 Phi(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 5531 273 273.010073740960 Beta(tan=-19.0172, x=0.052336, y=-0.995281): -19.081136687728
    test 5532 273 273.020181183682 Theta(tan=-18.9534, x=0.052336, y=-0.991944): -19.081136687728
    test 5533 273 273.015116912927 Mu(tan=-18.9853, x=0.0525994, y=-0.998616), iteration=3: -19.081136687728
    test 5534 273 273.020158608531 Chi(tan=-18.9535, x=1.0, y=-18.9535), iteration=2: -19.081136687728
    test 5535 273 273.013436145998 Xi(tan=-18.9959, x=0.105612, y=-2.0062), iteration=2: -19.081136687728

    test 5536 276 276.000000000000 Phi(tan=-9.51436, x=0.104528, y=-0.994522): -9.514364454223
    test 5537 276 276.020036559448 Beta(tan=-9.48246, x=0.104876, y=-0.994485): -9.514364454223
    test 5538 276 276.040139038464 Theta(tan=-9.45067, x=0.105225, y=-0.994448): -9.514364454223
    test 5539 276 276.030067165171 Mu(tan=-9.46657, x=0.10505, y=-0.994467): -9.514364454223
    test 5540 276 276.040094511028 Chi(tan=-9.45074, x=0.105224, y=-0.994449): -9.514364454223
    test 5541 276 276.026724247533 Xi(tan=-9.47186, x=0.104992, y=-0.994473): -9.514364454223

    test 5542 276 276.000000000000 Phi(tan=-9.51436, x=0.104528, y=-0.994522): -9.514364454223
    test 5543 276 276.020036559448 Beta(tan=-9.48246, x=0.104528, y=-0.991187): -9.514364454223
    test 5544 276 276.040139038464 Theta(tan=-9.45067, x=0.104528, y=-0.987864): -9.514364454223
    test 5545 276 276.030067165171 Mu(tan=-9.46657, x=0.10505, y=-0.994467), iteration=3: -9.514364454223
    test 5546 276 276.040094511028 Chi(tan=-9.45074, x=1.0, y=-9.45074), iteration=3: -9.514364454223
    test 5547 276 276.026724247533 Xi(tan=-9.47186, x=0.210927, y=-1.99788), iteration=3: -9.514364454223

    test 5548 279 279.000000000000 Phi(tan=-6.31375, x=0.156434, y=-0.987688): -6.313751514675
    test 5549 279 279.029778772560 Beta(tan=-6.29258, x=0.156948, y=-0.987607): -6.313751514675
    test 5550 279 279.059652780363 Theta(tan=-6.27148, x=0.157463, y=-0.987525): -6.313751514675
    test 5551 279 279.044685967615 Mu(tan=-6.28204, x=0.157205, y=-0.987566): -6.313751514675
    test 5552 279 279.059587522756 Chi(tan=-6.27153, x=0.157462, y=-0.987525): -6.313751514675
    test 5553 279 279.039717918868 Xi(tan=-6.28555, x=0.157119, y=-0.98758): -6.313751514675

    test 5554 279 279.000000000000 Phi(tan=-6.31375, x=0.156434, y=-0.987688): -6.313751514675
    test 5555 279 279.029778772560 Beta(tan=-6.29258, x=0.156434, y=-0.984377): -6.313751514675
    test 5556 279 279.059652780363 Theta(tan=-6.27148, x=0.156434, y=-0.981076): -6.313751514675
    test 5557 279 279.044685967615 Mu(tan=-6.28204, x=0.157205, y=-0.987566), iteration=3: -6.313751514675
    test 5558 279 279.059587522756 Chi(tan=-6.27153, x=1.0, y=-6.27153), iteration=3: -6.313751514675
    test 5559 279 279.039717918868 Xi(tan=-6.28555, x=0.315649, y=-1.98403), iteration=3: -6.313751514675

    test 5560 282 282.000000000000 Phi(tan=-4.70463, x=0.207912, y=-0.978148): -4.704630109478
    test 5561 282 282.039193161869 Beta(tan=-4.68886, x=0.208581, y=-0.978005): -4.704630109478
    test 5562 282 282.078506682949 Theta(tan=-4.67314, x=0.209252, y=-0.977862): -4.704630109478
    test 5563 282 282.058812251745 Mu(tan=-4.681, x=0.208916, y=-0.977934): -4.704630109478
    test 5564 282 282.078422470339 Chi(tan=-4.67317, x=0.20925, y=-0.977862): -4.704630109478
    test 5565 282 282.052274071915 Xi(tan=-4.68361, x=0.208804, y=-0.977958): -4.704630109478

    test 5566 282 282.000000000000 Phi(tan=-4.70463, x=0.207912, y=-0.978148): -4.704630109478
    test 5567 282 282.039193161869 Beta(tan=-4.68886, x=0.207912, y=-0.974868): -4.704630109478
    test 5568 282 282.078506682949 Theta(tan=-4.67314, x=0.207912, y=-0.9716): -4.704630109478
    test 5569 282 282.058812251745 Mu(tan=-4.681, x=0.208916, y=-0.977934), iteration=3: -4.704630109478
    test 5570 282 282.078422470339 Chi(tan=-4.67317, x=1.0, y=-4.67317), iteration=2: -4.704630109478
    test 5571 282 282.052274071915 Xi(tan=-4.68361, x=0.419483, y=-1.9647), iteration=3: -4.704630109478

    test 5572 285 285.000000000000 Phi(tan=-3.73205, x=0.258819, y=-0.965926): -3.732050807569
    test 5573 285 285.048176169243 Beta(tan=-3.71954, x=0.259631, y=-0.965708): -3.732050807569
    test 5574 285 285.096492525996 Theta(tan=-3.70707, x=0.260445, y=-0.965489): -3.732050807569
    test 5575 285 285.072290473972 Mu(tan=-3.7133, x=0.260038, y=-0.965599): -3.732050807569
    test 5576 285 285.096391619832 Chi(tan=-3.70709, x=0.260444, y=-0.965489): -3.732050807569
    test 5577 285 285.064254515857 Xi(tan=-3.71538, x=0.259902, y=-0.965635): -3.732050807569

    test 5578 285 285.000000000000 Phi(tan=-3.73205, x=0.258819, y=-0.965926): -3.732050807569
    test 5579 285 285.048176169243 Beta(tan=-3.71954, x=0.258819, y=-0.962687): -3.732050807569
    test 5580 285 285.096492525996 Theta(tan=-3.70707, x=0.258819, y=-0.95946): -3.732050807569
    test 5581 285 285.072290473972 Mu(tan=-3.7133, x=0.260038, y=-0.965599), iteration=3: -3.732050807569
    test 5582 285 285.096391619832 Chi(tan=-3.70709, x=1.0, y=-3.70709), iteration=2: -3.732050807569
    test 5583 285 285.064254515857 Xi(tan=-3.71538, x=0.522138, y=-1.93994), iteration=2: -3.732050807569

    test 5584 288 288.000000000000 Phi(tan=-3.07768, x=0.309017, y=-0.951057): -3.077683537175
    test 5585 288 288.056629049516 Beta(tan=-3.06736, x=0.309957, y=-0.950751): -3.077683537175
    test 5586 288 288.113411949511 Theta(tan=-3.05708, x=0.310899, y=-0.950443): -3.077683537175
    test 5587 288 288.084972353722 Mu(tan=-3.06222, x=0.310427, y=-0.950597): -3.077683537175
    test 5588 288 288.113297013078 Chi(tan=-3.0571, x=0.310897, y=-0.950444): -3.077683537175
    test 5589 288 288.075527498513 Xi(tan=-3.06393, x=0.31027, y=-0.950648): -3.077683537175

    test 5590 288 288.000000000000 Phi(tan=-3.07768, x=0.309017, y=-0.951057): -3.077683537175
    test 5591 288 288.056629049516 Beta(tan=-3.06736, x=0.309017, y=-0.947868): -3.077683537175
    test 5592 288 288.113411949511 Theta(tan=-3.05708, x=0.309017, y=-0.94469): -3.077683537175
    test 5593 288 288.084972353722 Mu(tan=-3.06222, x=0.310427, y=-0.950597), iteration=3: -3.077683537175
    test 5594 288 288.113297013078 Chi(tan=-3.0571, x=1.0, y=-3.0571), iteration=3: -3.077683537175
    test 5595 288 288.075527498513 Xi(tan=-3.06393, x=0.623327, y=-1.90983), iteration=3: -3.077683537175

    test 5596 291 291.000000000000 Phi(tan=-2.60509, x=0.358368, y=-0.93358): -2.605089064694
    test 5597 291 291.064458966605 Beta(tan=-2.59635, x=0.359418, y=-0.933177): -2.605089064694
    test 5598 291 291.129078684131 Theta(tan=-2.58765, x=0.36047, y=-0.932771): -2.605089064694
    test 5599 291 291.096718524749 Mu(tan=-2.592, x=0.359943, y=-0.932974): -2.605089064694
    test 5600 291 291.128952684075 Chi(tan=-2.58767, x=0.360468, y=-0.932772): -2.605089064694
    test 5601 291 291.085969171385 Xi(tan=-2.59345, x=0.359768, y=-0.933042): -2.605089064694

    test 5602 291 291.000000000000 Phi(tan=-2.60509, x=0.358368, y=-0.93358): -2.605089064694
    test 5603 291 291.064458966605 Beta(tan=-2.59635, x=0.358368, y=-0.93045): -2.605089064694
    test 5604 291 291.129078684131 Theta(tan=-2.58765, x=0.358368, y=-0.927331): -2.605089064694
    test 5605 291 291.096718524749 Mu(tan=-2.592, x=0.359943, y=-0.932974), iteration=3: -2.605089064694
    test 5606 291 291.128952684075 Chi(tan=-2.58767, x=1.0, y=-2.58767), iteration=3: -2.605089064694
    test 5607 291 291.085969171385 Xi(tan=-2.59345, x=0.722767, y=-1.87446), iteration=3: -2.605089064694

    test 5608 294 294.000000000000 Phi(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 5609 294 294.071580020440 Beta(tan=-2.23851, x=0.407878, y=-0.913037): -2.246036773904
    test 5610 294 294.143320630937 Theta(tan=-2.231, x=0.409021, y=-0.912525): -2.246036773904
    test 5611 294 294.107400080405 Mu(tan=-2.23475, x=0.408448, y=-0.912781): -2.246036773904
    test 5612 294 294.143186728996 Chi(tan=-2.23101, x=0.409018, y=-0.912526): -2.246036773904
    test 5613 294 294.095464961355 Xi(tan=-2.236, x=0.408258, y=-0.912866): -2.246036773904

    test 5614 294 294.000000000000 Phi(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 5615 294 294.071580020440 Beta(tan=-2.23851, x=0.406737, y=-0.910483): -2.246036773904
    test 5616 294 294.143320630937 Theta(tan=-2.231, x=0.406737, y=-0.90743): -2.246036773904
    test 5617 294 294.107400080405 Mu(tan=-2.23475, x=0.408448, y=-0.912781), iteration=3: -2.246036773904
    test 5618 294 294.143186728996 Chi(tan=-2.23101, x=1.0, y=-2.23101), iteration=3: -2.246036773904
    test 5619 294 294.095464961355 Xi(tan=-2.236, x=0.820183, y=-1.83393), iteration=3: -2.246036773904

    test 5620 297 297.000000000000 Phi(tan=-1.96261, x=0.45399, y=-0.891007): -1.962610505505
    test 5621 297 297.077914193009 Beta(tan=-1.95603, x=0.455202, y=-0.890388): -1.962610505505
    test 5622 297 297.155981766217 Theta(tan=-1.94947, x=0.456414, y=-0.889767): -1.962610505505
    test 5623 297 297.116899995156 Mu(tan=-1.95275, x=0.455807, y=-0.890078): -1.962610505505
    test 5624 297 297.155843205755 Chi(tan=-1.94948, x=0.456412, y=-0.889768): -1.962610505505
    test 5625 297 297.103910833395 Xi(tan=-1.95384, x=0.455606, y=-0.890182): -1.962610505505

    test 5626 297 297.000000000000 Phi(tan=-1.96261, x=0.45399, y=-0.891007): -1.962610505505
    test 5627 297 297.077914193009 Beta(tan=-1.95603, x=0.45399, y=-0.888019): -1.962610505505
    test 5628 297 297.155981766217 Theta(tan=-1.94947, x=0.45399, y=-0.885042): -1.962610505505
    test 5629 297 297.116899995156 Mu(tan=-1.95275, x=0.455807, y=-0.890078), iteration=3: -1.962610505505
    test 5630 297 297.155843205755 Chi(tan=-1.94948, x=1.0, y=-1.94948), iteration=3: -1.962610505505
    test 5631 297 297.103910833395 Xi(tan=-1.95384, x=0.915303, y=-1.78836), iteration=2: -1.962610505505

    test 5632 300 300.000000000000 Phi(tan=-1.73205, x=0.5, y=-0.866025): -1.732050807569
    test 5633 300 300.083392202979 Beta(tan=-1.72624, x=0.50126, y=-0.865297): -1.732050807569
    test 5634 300 300.166923849507 Theta(tan=-1.72046, x=0.502521, y=-0.864565): -1.732050807569
    test 5635 300 300.125114406356 Mu(tan=-1.72335, x=0.50189, y=-0.864932): -1.732050807569
    test 5636 300 300.166783841650 Chi(tan=-1.72047, x=0.502519, y=-0.864566): -1.732050807569
    test 5637 300 300.111214430115 Xi(tan=-1.72431, x=0.50168, y=-0.865053): -1.732050807569

    test 5638 300 300.000000000000 Phi(tan=-1.73205, x=0.5, y=-0.866025): -1.732050807569
    test 5639 300 300.083392202979 Beta(tan=-1.72624, x=0.5, y=-0.863122): -1.732050807569
    test 5640 300 300.166923849507 Theta(tan=-1.72046, x=0.5, y=-0.860228): -1.732050807569
    test 5641 300 300.125114406356 Mu(tan=-1.72335, x=0.50189, y=-0.864932), iteration=2: -1.732050807569
    test 5642 300 300.166783841650 Chi(tan=-1.72047, x=1.0, y=-1.72047), iteration=3: -1.732050807569
    test 5643 300 300.111214430115 Xi(tan=-1.72431, x=1.00787, y=-1.73787), iteration=3: -1.732050807569

    test 5644 303 303.000000000000 Phi(tan=-1.53986, x=0.544639, y=-0.838671): -1.539864963815
    test 5645 303 303.087954259505 Beta(tan=-1.5347, x=0.545926, y=-0.837834): -1.539864963815
    test 5646 303 303.176027916350 Theta(tan=-1.52956, x=0.547213, y=-0.836993): -1.539864963815
    test 5647 303 303.131953742298 Mu(tan=-1.53213, x=0.546569, y=-0.837414): -1.539864963815
    test 5648 303 303.175889530451 Chi(tan=-1.52956, x=0.547211, y=-0.836995): -1.539864963815
    test 5649 303 303.117296075703 Xi(tan=-1.53299, x=0.546355, y=-0.837554): -1.539864963815

    test 5650 303 303.000000000000 Phi(tan=-1.53986, x=0.544639, y=-0.838671): -1.539864963815
    test 5651 303 303.087954259505 Beta(tan=-1.5347, x=0.544639, y=-0.835859): -1.539864963815
    test 5652 303 303.176027916350 Theta(tan=-1.52956, x=0.544639, y=-0.833056): -1.539864963815
    test 5653 303 303.131953742298 Mu(tan=-1.53213, x=0.546569, y=-0.837414), iteration=3: -1.539864963815
    test 5654 303 303.175889530451 Chi(tan=-1.52956, x=1.0, y=-1.52956), iteration=3: -1.539864963815
    test 5655 303 303.117296075703 Xi(tan=-1.53299, x=1.09762, y=-1.68263), iteration=2: -1.539864963815

    test 5656 306 306.000000000000 Phi(tan=-1.37638, x=0.587785, y=-0.809017): -1.376381920471
    test 5657 306 306.091550707249 Beta(tan=-1.37177, x=0.589077, y=-0.808077): -1.376381920471
    test 5658 306 306.183195540448 Theta(tan=-1.36717, x=0.590369, y=-0.807133): -1.376381920471
    test 5659 306 306.137343684620 Mu(tan=-1.36947, x=0.589723, y=-0.807606): -1.376381920471
    test 5660 306 306.183061603372 Chi(tan=-1.36717, x=0.590367, y=-0.807135): -1.376381920471
    test 5661 306 306.122089633630 Xi(tan=-1.37023, x=0.589508, y=-0.807763): -1.376381920471

    test 5662 306 306.000000000000 Phi(tan=-1.37638, x=0.587785, y=-0.809017): -1.376381920471
    test 5663 306 306.091550707249 Beta(tan=-1.37177, x=0.587785, y=-0.806305): -1.376381920471
    test 5664 306 306.183195540448 Theta(tan=-1.36717, x=0.587785, y=-0.803601): -1.376381920471
    test 5665 306 306.137343684620 Mu(tan=-1.36947, x=0.589723, y=-0.807606), iteration=2: -1.376381920471
    test 5666 306 306.183061603372 Chi(tan=-1.36717, x=1.0, y=-1.36717), iteration=3: -1.376381920471
    test 5667 306 306.122089633630 Xi(tan=-1.37023, x=1.18431, y=-1.62278), iteration=2: -1.376381920471

    test 5668 309 309.000000000000 Phi(tan=-1.2349, x=0.62932, y=-0.777146): -1.234897156535
    test 5669 309 309.094142555964 Beta(tan=-1.23076, x=0.630596, y=-0.776111): -1.234897156535
    test 5670 309 309.188349853309 Theta(tan=-1.22663, x=0.631872, y=-0.775073): -1.234897156535
    test 5671 309 309.141225955398 Mu(tan=-1.22869, x=0.631234, y=-0.775592): -1.234897156535
    test 5672 309 309.188222861569 Chi(tan=-1.22664, x=0.63187, y=-0.775074): -1.234897156535
    test 5673 309 309.125543209389 Xi(tan=-1.22938, x=0.631022, y=-0.775765): -1.234897156535

    test 5674 309 309.000000000000 Phi(tan=-1.2349, x=0.62932, y=-0.777146): -1.234897156535
    test 5675 309 309.094142555964 Beta(tan=-1.23076, x=0.62932, y=-0.77454): -1.234897156535
    test 5676 309 309.188349853309 Theta(tan=-1.22663, x=0.62932, y=-0.771943): -1.234897156535
    test 5677 309 309.141225955398 Mu(tan=-1.22869, x=0.631234, y=-0.775592), iteration=3: -1.234897156535
    test 5678 309 309.188222861569 Chi(tan=-1.22664, x=1.0, y=-1.22664), iteration=3: -1.234897156535
    test 5679 309 309.125543209389 Xi(tan=-1.22938, x=1.26771, y=-1.5585), iteration=2: -1.234897156535

    test 5680 312 312.000000000000 Phi(tan=-1.11061, x=0.669131, y=-0.743145): -1.110612514829
    test 5681 312 312.095701889505 Beta(tan=-1.10689, x=0.670371, y=-0.742026): -1.110612514829
    test 5682 312 312.191436312869 Theta(tan=-1.10318, x=0.67161, y=-0.740905): -1.110612514829
    test 5683 312 312.143558921496 Mu(tan=-1.10503, x=0.670991, y=-0.741466): -1.110612514829
    test 5684 312 312.191318361017 Chi(tan=-1.10318, x=0.671608, y=-0.740906): -1.110612514829
    test 5685 312 312.127619691575 Xi(tan=-1.10565, x=0.670784, y=-0.741653): -1.110612514829

    test 5686 312 312.000000000000 Phi(tan=-1.11061, x=0.669131, y=-0.743145): -1.110612514829
    test 5687 312 312.095701889505 Beta(tan=-1.10689, x=0.669131, y=-0.740653): -1.110612514829
    test 5688 312 312.191436312869 Theta(tan=-1.10318, x=0.669131, y=-0.73817): -1.110612514829
    test 5689 312 312.143558921496 Mu(tan=-1.10503, x=0.670991, y=-0.741466), iteration=3: -1.110612514829
    test 5690 312 312.191318361017 Chi(tan=-1.10318, x=1.0, y=-1.10318), iteration=3: -1.110612514829
    test 5691 312 312.127619691575 Xi(tan=-1.10565, x=1.34759, y=-1.48997), iteration=2: -1.110612514829

    test 5692 315 315.000000000000 Phi(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 5693 315 315.096212150580 Beta(tan=-0.996647, x=0.708293, y=-0.705918): -1.000000000000
    test 5694 315 315.192423215982 Theta(tan=-0.993306, x=0.709478, y=-0.704728): -1.000000000000
    test 5695 315 315.144318011093 Mu(tan=-0.994975, x=0.708886, y=-0.705323): -1.000000000000
    test 5696 315 315.192315943911 Chi(tan=-0.993309, x=0.709476, y=-0.704729): -1.000000000000
    test 5697 315 315.128297126566 Xi(tan=-0.995532, x=0.708688, y=-0.705522): -1.000000000000

    test 5698 315 315.000000000000 Phi(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 5699 315 315.096212150580 Beta(tan=-0.996647, x=0.707107, y=-0.704736): -1.000000000000
    test 5700 315 315.192423215982 Theta(tan=-0.993306, x=0.707107, y=-0.702373): -1.000000000000
    test 5701 315 315.144318011093 Mu(tan=-0.994975, x=0.708886, y=-0.705323), iteration=2: -1.000000000000
    test 5702 315 315.192315943911 Chi(tan=-0.993309, x=1.0, y=-0.993309), iteration=3: -1.000000000000
    test 5703 315 315.128297126566 Xi(tan=-0.995532, x=1.42374, y=-1.41738), iteration=3: -1.000000000000

    test 5704 318 318.000000000000 Phi(tan=-0.900404, x=0.743145, y=-0.669131): -0.900404044298
    test 5705 318 318.095668299061 Beta(tan=-0.897385, x=0.744261, y=-0.667889): -0.900404044298
    test 5706 318 318.191301952963 Theta(tan=-0.894376, x=0.745375, y=-0.666646): -0.900404044298
    test 5707 318 318.143495939557 Mu(tan=-0.895879, x=0.744818, y=-0.667267): -0.900404044298
    test 5708 318 318.191206513894 Chi(tan=-0.894379, x=0.745374, y=-0.666647): -0.900404044298
    test 5709 318 318.127568924137 Xi(tan=-0.896381, x=0.744633, y=-0.667474): -0.900404044298

    test 5710 318 318.000000000000 Phi(tan=-0.900404, x=0.743145, y=-0.669131): -0.900404044298
    test 5711 318 318.095668299061 Beta(tan=-0.897385, x=0.743145, y=-0.666887): -0.900404044298
    test 5712 318 318.191301952963 Theta(tan=-0.894376, x=0.743145, y=-0.664651): -0.900404044298
    test 5713 318 318.143495939557 Mu(tan=-0.895879, x=0.744818, y=-0.667267), iteration=3: -0.900404044298
    test 5714 318 318.191206513894 Chi(tan=-0.894379, x=1.0, y=-0.894379), iteration=3: -0.900404044298
    test 5715 318 318.127568924137 Xi(tan=-0.896381, x=1.49595, y=-1.34094), iteration=3: -0.900404044298

    test 5716 321 321.000000000000 Phi(tan=-0.809784, x=0.777146, y=-0.62932): -0.809784033195
    test 5717 321 321.094076843128 Beta(tan=-0.807069, x=0.778178, y=-0.628044): -0.809784033195
    test 5718 321 321.188087005479 Theta(tan=-0.804363, x=0.779208, y=-0.626766): -0.809784033195
    test 5719 321 321.141102744104 Mu(tan=-0.805715, x=0.778693, y=-0.627405): -0.809784033195
    test 5720 321 321.188004055485 Chi(tan=-0.804365, x=0.779207, y=-0.626767): -0.809784033195
    test 5721 321 321.125443893274 Xi(tan=-0.806165, x=0.778522, y=-0.627617): -0.809784033195

    test 5722 321 321.000000000000 Phi(tan=-0.809784, x=0.777146, y=-0.62932): -0.809784033195
    test 5723 321 321.094076843128 Beta(tan=-0.807069, x=0.777146, y=-0.62721): -0.809784033195
    test 5724 321 321.188087005479 Theta(tan=-0.804363, x=0.777146, y=-0.625107): -0.809784033195
    test 5725 321 321.141102744104 Mu(tan=-0.805715, x=0.778693, y=-0.627405), iteration=2: -0.809784033195
    test 5726 321 321.188004055485 Chi(tan=-0.804365, x=1.0, y=-0.804365), iteration=3: -0.809784033195
    test 5727 321 321.125443893274 Xi(tan=-0.806165, x=1.56403, y=-1.26087), iteration=3: -0.809784033195

    test 5728 324 324.000000000000 Phi(tan=-0.726543, x=0.809017, y=-0.587785): -0.726542528005
    test 5729 324 324.091455743965 Beta(tan=-0.724107, x=0.809954, y=-0.586493): -0.726542528005
    test 5730 324 324.182815692055 Theta(tan=-0.721679, x=0.810888, y=-0.585201): -0.726542528005
    test 5731 324 324.137165628842 Mu(tan=-0.722891, x=0.810422, y=-0.585847): -0.726542528005
    test 5732 324 324.182745401032 Chi(tan=-0.721681, x=0.810888, y=-0.585202): -0.726542528005
    test 5733 324 324.121946109391 Xi(tan=-0.723296, x=0.810266, y=-0.586062): -0.726542528005

    test 5734 324 324.000000000000 Phi(tan=-0.726543, x=0.809017, y=-0.587785): -0.726542528005
    test 5735 324 324.091455743965 Beta(tan=-0.724107, x=0.809017, y=-0.585815): -0.726542528005
    test 5736 324 324.182815692055 Theta(tan=-0.721679, x=0.809017, y=-0.58385): -0.726542528005
    test 5737 324 324.137165628842 Mu(tan=-0.722891, x=0.810422, y=-0.585847), iteration=2: -0.726542528005
    test 5738 324 324.182745401032 Chi(tan=-0.721681, x=1.0, y=-0.721681), iteration=3: -0.726542528005
    test 5739 324 324.121946109391 Xi(tan=-0.723296, x=1.62781, y=-1.17739), iteration=3: -0.726542528005

    test 5740 327 327.000000000000 Phi(tan=-0.649408, x=0.838671, y=-0.544639): -0.649407593198
    test 5741 327 327.087834196097 Beta(tan=-0.64723, x=0.839505, y=-0.543353): -0.649407593198
    test 5742 327 327.175547668144 Theta(tan=-0.64506, x=0.840335, y=-0.542067): -0.649407593198
    test 5743 327 327.131728623858 Mu(tan=-0.646144, x=0.839921, y=-0.542709): -0.649407593198
    test 5744 327 327.175489751193 Chi(tan=-0.645062, x=0.840335, y=-0.542068): -0.649407593198
    test 5745 327 327.117114615992 Xi(tan=-0.646505, x=0.839782, y=-0.542924): -0.649407593198

    test 5746 327 327.000000000000 Phi(tan=-0.649408, x=0.838671, y=-0.544639): -0.649407593198
    test 5747 327 327.087834196097 Beta(tan=-0.64723, x=0.838671, y=-0.542813): -0.649407593198
    test 5748 327 327.175547668144 Theta(tan=-0.64506, x=0.838671, y=-0.540993): -0.649407593198
    test 5749 327 327.131728623858 Mu(tan=-0.646144, x=0.839921, y=-0.542709), iteration=3: -0.649407593198
    test 5750 327 327.175489751193 Chi(tan=-0.645062, x=1.0, y=-0.645062), iteration=3: -0.649407593198
    test 5751 327 327.117114615992 Xi(tan=-0.646505, x=1.68711, y=-1.09072), iteration=3: -0.649407593198

    test 5752 330 330.000000000000 Phi(tan=-0.57735, x=0.866025, y=-0.5): -0.577350269190
    test 5753 330 330.083252286764 Beta(tan=-0.575415, x=0.866751, y=-0.498741): -0.577350269190
    test 5754 330 330.166364190171 Theta(tan=-0.573485, x=0.867474, y=-0.497483): -0.577350269190
    test 5755 330 330.124852063939 Mu(tan=-0.574448, x=0.867113, y=-0.498112): -0.577350269190
    test 5756 330 330.166317957519 Chi(tan=-0.573486, x=0.867473, y=-0.497484): -0.577350269190
    test 5757 330 330.111002965540 Xi(tan=-0.57477, x=0.866992, y=-0.498321): -0.577350269190

    test 5758 330 330.000000000000 Phi(tan=-0.57735, x=0.866025, y=-0.5): -0.577350269190
    test 5759 330 330.083252286764 Beta(tan=-0.575415, x=0.866025, y=-0.498324): -0.577350269190
    test 5760 330 330.166364190171 Theta(tan=-0.573485, x=0.866025, y=-0.496653): -0.577350269190
    test 5761 330 330.124852063939 Mu(tan=-0.574448, x=0.867113, y=-0.498112), iteration=3: -0.577350269190
    test 5762 330 330.166317957519 Chi(tan=-0.573486, x=1.0, y=-0.573486), iteration=2: -0.577350269190
    test 5763 330 330.111002965540 Xi(tan=-0.57477, x=1.74177, y=-1.00112), iteration=3: -0.577350269190

    test 5764 333 333.000000000000 Phi(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494
    test 5765 333 333.077760538972 Beta(tan=-0.507817, x=0.891622, y=-0.452781): -0.509525449494
    test 5766 333 333.155367155141 Theta(tan=-0.506114, x=0.892234, y=-0.451573): -0.509525449494
    test 5767 333 333.116611894321 Mu(tan=-0.506964, x=0.891929, y=-0.452176): -0.509525449494
    test 5768 333 333.155331577922 Chi(tan=-0.506115, x=0.892234, y=-0.451573): -0.509525449494
    test 5769 333 333.103678605932 Xi(tan=-0.507248, x=0.891827, y=-0.452377): -0.509525449494

    test 5770 333 333.000000000000 Phi(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494
    test 5771 333 333.077760538972 Beta(tan=-0.507817, x=0.891007, y=-0.452468): -0.509525449494
    test 5772 333 333.155367155141 Theta(tan=-0.506114, x=0.891007, y=-0.450951): -0.509525449494
    test 5773 333 333.116611894321 Mu(tan=-0.506964, x=0.891929, y=-0.452176), iteration=3: -0.509525449494
    test 5774 333 333.155331577922 Chi(tan=-0.506115, x=1.0, y=-0.506115), iteration=3: -0.509525449494
    test 5775 333 333.103678605932 Xi(tan=-0.507248, x=1.79166, y=-0.908817), iteration=3: -0.509525449494

    test 5776 336 336.000000000000 Phi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 5777 336 336.071419343981 Beta(tan=-0.443736, x=0.914052, y=-0.405598): -0.445228685309
    test 5778 336 336.142677929298 Theta(tan=-0.442248, x=0.914555, y=-0.40446): -0.445228685309
    test 5779 336 336.107098812499 Mu(tan=-0.442991, x=0.914304, y=-0.405028): -0.445228685309
    test 5780 336 336.142651717918 Chi(tan=-0.442249, x=0.914555, y=-0.404461): -0.445228685309
    test 5781 336 336.095222120427 Xi(tan=-0.443239, x=0.91422, y=-0.405218): -0.445228685309

    test 5782 336 336.000000000000 Phi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 5783 336 336.071419343981 Beta(tan=-0.443736, x=0.913545, y=-0.405373): -0.445228685309
    test 5784 336 336.142677929298 Theta(tan=-0.442248, x=0.913545, y=-0.404014): -0.445228685309
    test 5785 336 336.107098812499 Mu(tan=-0.442991, x=0.914304, y=-0.405028), iteration=3: -0.445228685309
    test 5786 336 336.142651717918 Chi(tan=-0.442249, x=1.0, y=-0.442249), iteration=3: -0.445228685309
    test 5787 336 336.095222120427 Xi(tan=-0.443239, x=1.83665, y=-0.814074), iteration=3: -0.445228685309

    test 5788 339 339.000000000000 Phi(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035
    test 5789 339 339.064298290053 Beta(tan=-0.382577, x=0.933982, y=-0.35732): -0.383864035035
    test 5790 339 339.128435980976 Theta(tan=-0.381294, x=0.934381, y=-0.356274): -0.383864035035
    test 5791 339 339.096417256609 Mu(tan=-0.381935, x=0.934182, y=-0.356796): -0.383864035035
    test 5792 339 339.128417672255 Chi(tan=-0.381295, x=0.934381, y=-0.356275): -0.383864035035
    test 5793 339 339.085726330296 Xi(tan=-0.382148, x=0.934116, y=-0.356971): -0.383864035035

    test 5794 339 339.000000000000 Phi(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035
    test 5795 339 339.064298290053 Beta(tan=-0.382577, x=0.93358, y=-0.357166): -0.383864035035
    test 5796 339 339.128435980976 Theta(tan=-0.381294, x=0.93358, y=-0.355969): -0.383864035035
    test 5797 339 339.096417256609 Mu(tan=-0.381935, x=0.934182, y=-0.356796), iteration=3: -0.383864035035
    test 5798 339 339.128417672255 Chi(tan=-0.381295, x=1.0, y=-0.381295), iteration=2: -0.383864035035
    test 5799 339 339.085726330296 Xi(tan=-0.382148, x=1.87662, y=-0.717147), iteration=3: -0.383864035035

    test 5800 342 342.000000000000 Phi(tan=-0.32492, x=0.951057, y=-0.309017): -0.324919696233
    test 5801 342 342.056475395211 Beta(tan=-0.32383, x=0.951361, y=-0.308079): -0.324919696233
    test 5802 342 342.112797334151 Theta(tan=-0.322745, x=0.951663, y=-0.307144): -0.324919696233
    test 5803 342 342.084684252228 Mu(tan=-0.323286, x=0.951512, y=-0.307611): -0.324919696233
    test 5804 342 342.112785383147 Chi(tan=-0.322745, x=0.951663, y=-0.307144): -0.324919696233
    test 5805 342 342.075295270596 Xi(tan=-0.323467, x=0.951462, y=-0.307767): -0.324919696233

    test 5806 342 342.000000000000 Phi(tan=-0.32492, x=0.951057, y=-0.309017): -0.324919696233
    test 5807 342 342.056475395211 Beta(tan=-0.32383, x=0.951057, y=-0.307981): -0.324919696233
    test 5808 342 342.112797334151 Theta(tan=-0.322745, x=0.951057, y=-0.306948): -0.324919696233
    test 5809 342 342.084684252228 Mu(tan=-0.323286, x=0.951512, y=-0.307611), iteration=3: -0.324919696233
    test 5810 342 342.112785383147 Chi(tan=-0.322745, x=1.0, y=-0.322745), iteration=3: -0.324919696233
    test 5811 342 342.075295270596 Xi(tan=-0.323467, x=1.91147, y=-0.618298), iteration=3: -0.324919696233

    test 5812 345 345.000000000000 Phi(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431
    test 5813 345 345.048036252634 Beta(tan=-0.267051, x=0.966142, y=-0.258009): -0.267949192431
    test 5814 345 345.095932860347 Theta(tan=-0.266155, x=0.966358, y=-0.257201): -0.267949192431
    test 5815 345 345.072028130583 Mu(tan=-0.266602, x=0.96625, y=-0.257605): -0.267949192431
    test 5816 345 345.095925732609 Chi(tan=-0.266156, x=0.966358, y=-0.257202): -0.267949192431
    test 5817 345 345.064043050613 Xi(tan=-0.266752, x=0.966215, y=-0.257739): -0.267949192431

    test 5818 345 345.000000000000 Phi(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431
    test 5819 345 345.048036252634 Beta(tan=-0.267051, x=0.965926, y=-0.257951): -0.267949192431
    test 5820 345 345.095932860347 Theta(tan=-0.266155, x=0.965926, y=-0.257086): -0.267949192431
    test 5821 345 345.072028130583 Mu(tan=-0.266602, x=0.96625, y=-0.257605), iteration=3: -0.267949192431
    test 5822 345 345.095925732609 Chi(tan=-0.266156, x=1.0, y=-0.266156), iteration=3: -0.267949192431
    test 5823 345 345.064043050613 Xi(tan=-0.266752, x=1.94111, y=-0.517793), iteration=3: -0.267949192431

    test 5824 348 348.000000000000 Phi(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670
    test 5825 348 348.039073098008 Beta(tan=-0.211844, x=0.978289, y=-0.207245): -0.212556561670
    test 5826 348 348.078026427494 Theta(tan=-0.211134, x=0.97843, y=-0.206579): -0.212556561670
    test 5827 348 348.058587132190 Mu(tan=-0.211488, x=0.97836, y=-0.206911): -0.212556561670
    test 5828 348 348.078022687531 Chi(tan=-0.211134, x=0.97843, y=-0.20658): -0.212556561670
    test 5829 348 348.052092611435 Xi(tan=-0.211606, x=0.978336, y=-0.207022): -0.212556561670

    test 5830 348 348.000000000000 Phi(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670
    test 5831 348 348.039073098008 Beta(tan=-0.211844, x=0.978148, y=-0.207215): -0.212556561670
    test 5832 348 348.078026427494 Theta(tan=-0.211134, x=0.978148, y=-0.20652): -0.212556561670
    test 5833 348 348.058587132190 Mu(tan=-0.211488, x=0.97836, y=-0.206911), iteration=3: -0.212556561670
    test 5834 348 348.078022687531 Chi(tan=-0.211134, x=1.0, y=-0.211134), iteration=3: -0.212556561670
    test 5835 348 348.052092611435 Xi(tan=-0.211606, x=1.96546, y=-0.415904), iteration=3: -0.212556561670

    test 5836 351 351.000000000000 Phi(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325
    test 5837 351 351.029683808843 Beta(tan=-0.157853, x=0.987769, y=-0.155923): -0.158384440325
    test 5838 351 351.059272925037 Theta(tan=-0.157324, x=0.98785, y=-0.155413): -0.158384440325
    test 5839 351 351.044507910770 Mu(tan=-0.157588, x=0.98781, y=-0.155667): -0.158384440325
    test 5840 351 351.059271317019 Chi(tan=-0.157324, x=0.98785, y=-0.155413): -0.158384440325
    test 5841 351 351.039574393894 Xi(tan=-0.157676, x=0.987796, y=-0.155752): -0.158384440325

    test 5842 351 351.000000000000 Phi(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325
    test 5843 351 351.029683808843 Beta(tan=-0.157853, x=0.987688, y=-0.15591): -0.158384440325
    test 5844 351 351.059272925037 Theta(tan=-0.157324, x=0.987688, y=-0.155387): -0.158384440325
    test 5845 351 351.044507910770 Mu(tan=-0.157588, x=0.98781, y=-0.155667), iteration=3: -0.158384440325
    test 5846 351 351.059271317019 Chi(tan=-0.157324, x=1.0, y=-0.157324), iteration=3: -0.158384440325
    test 5847 351 351.039574393894 Xi(tan=-0.157676, x=1.98446, y=-0.312903), iteration=2: -0.158384440325

    test 5848 354 354.000000000000 Phi(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266
    test 5849 354 354.019970846274 Beta(tan=-0.104752, x=0.994558, y=-0.104182): -0.105104235266
    test 5850 354 354.039876185217 Theta(tan=-0.104401, x=0.994594, y=-0.103836): -0.105104235266
    test 5851 354 354.029943953044 Mu(tan=-0.104576, x=0.994576, y=-0.104009): -0.105104235266
    test 5852 354 354.039875702290 Chi(tan=-0.104401, x=0.994594, y=-0.103836): -0.105104235266
    test 5853 354 354.026624930844 Xi(tan=-0.104634, x=0.99457, y=-0.104066): -0.105104235266

    test 5854 354 354.000000000000 Phi(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266
    test 5855 354 354.019970846274 Beta(tan=-0.104752, x=0.994522, y=-0.104178): -0.105104235266
    test 5856 354 354.039876185217 Theta(tan=-0.104401, x=0.994522, y=-0.103829): -0.105104235266
    test 5857 354 354.029943953044 Mu(tan=-0.104576, x=0.994576, y=-0.104009), iteration=3: -0.105104235266
    test 5858 354 354.039875702290 Chi(tan=-0.104401, x=1.0, y=-0.104401), iteration=3: -0.105104235266
    test 5859 354 354.026624930844 Xi(tan=-0.104634, x=1.99807, y=-0.209067), iteration=3: -0.105104235266

    test 5860 357 357.000000000000 Phi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 5861 357 357.010040150331 Beta(tan=-0.0522321, x=0.998639, y=-0.052161): -0.052407779283
    test 5862 357 357.020046820811 Theta(tan=-0.0520569, x=0.998648, y=-0.0519865): -0.052407779283
    test 5863 357 357.015053930532 Mu(tan=-0.0521443, x=0.998643, y=-0.0520736): -0.052407779283
    test 5864 357 357.020046759956 Chi(tan=-0.0520569, x=0.998648, y=-0.0519866): -0.052407779283
    test 5865 357 357.013385378246 Xi(tan=-0.0521735, x=0.998642, y=-0.0521027): -0.052407779283

    test 5866 357 357.000000000000 Phi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 5867 357 357.010040150331 Beta(tan=-0.0522321, x=0.99863, y=-0.0521605): -0.052407779283
    test 5868 357 357.020046820811 Theta(tan=-0.0520569, x=0.99863, y=-0.0519856): -0.052407779283
    test 5869 357 357.015053930532 Mu(tan=-0.0521443, x=0.998643, y=-0.0520736), iteration=3: -0.052407779283
    test 5870 357 357.020046759956 Chi(tan=-0.0520569, x=1.0, y=-0.0520569), iteration=3: -0.052407779283
    test 5871 357 357.013385378246 Xi(tan=-0.0521735, x=2.00625, y=-0.104673), iteration=3: -0.052407779283

    test 5872  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 5873  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 5874  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 5875  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 5876  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 5877  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 5878  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 5879  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 5880  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 5881  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 5882  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 5883  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 5884  3 3.020181183682 Phi(tan=0.052761, x=0.998611, y=0.0526877): 0.052407779283
    test 5885  3 3.010073740960 Beta(tan=0.0525841, x=0.99862, y=0.0525115): 0.052407779283
    test 5886  3 3.000000000000 Theta(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283
    test 5887  3 3.005026356287 Mu(tan=0.0524957, x=0.998625, y=0.0524236): 0.052407779283
    test 5888  3 3.000000062090 Chi(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283
    test 5889  3 3.006706092006 Xi(tan=0.0525251, x=0.998623, y=0.0524528): 0.052407779283

    test 5890  3 3.020181183682 Phi(tan=0.052761, x=0.99863, y=0.0526887): 0.052407779283
    test 5891  3 3.010073740960 Beta(tan=0.0525841, x=0.99863, y=0.052512): 0.052407779283
    test 5892  3 3.000000000000 Theta(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283
    test 5893  3 3.005026356287 Mu(tan=0.0524957, x=0.998625, y=0.0524236), iteration=3: 0.052407779283
    test 5894  3 3.000000062090 Chi(tan=0.0524078, x=1.0, y=0.0524078), iteration=3: 0.052407779283
    test 5895  3 3.006706092006 Xi(tan=0.0525251, x=2.00621, y=0.105377), iteration=3: 0.052407779283

    test 5896  6 6.040139038464 Phi(tan=0.105813, x=0.994448, y=0.105225): 0.105104235266
    test 5897  6 6.020036559448 Beta(tan=0.105458, x=0.994485, y=0.104876): 0.105104235266
    test 5898  6 6.000000000000 Theta(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266
    test 5899  6 6.009997713806 Mu(tan=0.105281, x=0.994504, y=0.104702): 0.105104235266
    test 5900  6 6.000000492613 Chi(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266
    test 5901  6 6.013338614428 Xi(tan=0.10534, x=0.994498, y=0.10476): 0.105104235266

    test 5902  6 6.040139038464 Phi(tan=0.105813, x=0.994522, y=0.105233): 0.105104235266
    test 5903  6 6.020036559448 Beta(tan=0.105458, x=0.994522, y=0.10488): 0.105104235266
    test 5904  6 6.000000000000 Theta(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266
    test 5905  6 6.009997713806 Mu(tan=0.105281, x=0.994504, y=0.104702), iteration=3: 0.105104235266
    test 5906  6 6.000000492613 Chi(tan=0.105104, x=1.0, y=0.105104), iteration=3: 0.105104235266
    test 5907  6 6.013338614428 Xi(tan=0.10534, x=1.99793, y=0.210461), iteration=3: 0.105104235266

    test 5908  9 9.059652780363 Phi(tan=0.159452, x=0.987525, y=0.157463): 0.158384440325
    test 5909  9 9.029778772560 Beta(tan=0.158917, x=0.987607, y=0.156948): 0.158384440325
    test 5910  9 9.000000000000 Theta(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325
    test 5911  9 9.014859673134 Mu(tan=0.15865, x=0.987648, y=0.156691): 0.158384440325
    test 5912  9 9.000001639674 Chi(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325
    test 5913  9 9.019824807860 Xi(tan=0.158739, x=0.987634, y=0.156776): 0.158384440325

    test 5914  9 9.059652780363 Phi(tan=0.159452, x=0.987688, y=0.157489): 0.158384440325
    test 5915  9 9.029778772560 Beta(tan=0.158917, x=0.987688, y=0.156961): 0.158384440325
    test 5916  9 9.000000000000 Theta(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325
    test 5917  9 9.014859673134 Mu(tan=0.15865, x=0.987648, y=0.156691), iteration=2: 0.158384440325
    test 5918  9 9.000001639674 Chi(tan=0.158384, x=1.0, y=0.158384), iteration=3: 0.158384440325
    test 5919  9 9.019824807860 Xi(tan=0.158739, x=1.98414, y=0.31496), iteration=3: 0.158384440325

    test 5920 12 12.078506682949 Phi(tan=0.213989, x=0.977862, y=0.209252): 0.212556561670
    test 5921 12 12.039193161869 Beta(tan=0.213272, x=0.978005, y=0.208581): 0.212556561670
    test 5922 12 12.000000000000 Theta(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670
    test 5923 12 12.019559027133 Mu(tan=0.212913, x=0.978077, y=0.208246): 0.212556561670
    test 5924 12 12.000003811672 Chi(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670
    test 5925 12 12.026093524194 Xi(tan=0.213033, x=0.978053, y=0.208357): 0.212556561670

    test 5926 12 12.078506682949 Phi(tan=0.213989, x=0.978148, y=0.209313): 0.212556561670
    test 5927 12 12.039193161869 Beta(tan=0.213272, x=0.978148, y=0.208611): 0.212556561670
    test 5928 12 12.000000000000 Theta(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670
    test 5929 12 12.019559027133 Mu(tan=0.212913, x=0.978077, y=0.208246), iteration=3: 0.212556561670
    test 5930 12 12.000003811672 Chi(tan=0.212557, x=1.0, y=0.212557), iteration=3: 0.212556561670
    test 5931 12 12.026093524194 Xi(tan=0.213033, x=1.96489, y=0.418585), iteration=3: 0.212556561670

    test 5932 15 15.096492525996 Phi(tan=0.269755, x=0.965489, y=0.260445): 0.267949192431
    test 5933 15 15.048176169243 Beta(tan=0.268851, x=0.965708, y=0.259631): 0.267949192431
    test 5934 15 15.000000000000 Theta(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431
    test 5935 15 15.024044341118 Mu(tan=0.268399, x=0.965817, y=0.259224): 0.267949192431
    test 5936 15 15.000007259778 Chi(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431
    test 5937 15 15.032076009754 Xi(tan=0.268549, x=0.965781, y=0.25936): 0.267949192431

    test 5938 15 15.096492525996 Phi(tan=0.269755, x=0.965926, y=0.260563): 0.267949192431
    test 5939 15 15.048176169243 Beta(tan=0.268851, x=0.965926, y=0.25969): 0.267949192431
    test 5940 15 15.000000000000 Theta(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431
    test 5941 15 15.024044341118 Mu(tan=0.268399, x=0.965817, y=0.259224), iteration=2: 0.267949192431
    test 5942 15 15.000007259778 Chi(tan=0.267949, x=1.0, y=0.267949), iteration=2: 0.267949192431
    test 5943 15 15.032076009754 Xi(tan=0.268549, x=1.94023, y=0.521049), iteration=2: 0.267949192431

    test 5944 18 18.113411949511 Phi(tan=0.327109, x=0.950443, y=0.310899): 0.324919696233
    test 5945 18 18.056629049516 Beta(tan=0.326013, x=0.950751, y=0.309957): 0.324919696233
    test 5946 18 18.000000000000 Theta(tan=0.32492, x=0.951057, y=0.309017): 0.324919696233
    test 5947 18 18.028266514038 Mu(tan=0.325465, x=0.950904, y=0.309486): 0.324919696233
    test 5948 18 18.000012163097 Chi(tan=0.32492, x=0.951056, y=0.309017): 0.324919696233
    test 5949 18 18.037706661705 Xi(tan=0.325647, x=0.950853, y=0.309643): 0.324919696233

    test 5950 18 18.113411949511 Phi(tan=0.327109, x=0.951057, y=0.3111): 0.324919696233
    test 5951 18 18.056629049516 Beta(tan=0.326013, x=0.951057, y=0.310057): 0.324919696233
    test 5952 18 18.000000000000 Theta(tan=0.32492, x=0.951057, y=0.309017): 0.324919696233
    test 5953 18 18.028266514038 Mu(tan=0.325465, x=0.950904, y=0.309486), iteration=3: 0.324919696233
    test 5954 18 18.000012163097 Chi(tan=0.32492, x=1.0, y=0.32492), iteration=3: 0.324919696233
    test 5955 18 18.037706661705 Xi(tan=0.325647, x=1.91024, y=0.622066), iteration=3: 0.324919696233

    test 5956 21 21.129078684131 Phi(tan=0.386451, x=0.932771, y=0.36047): 0.383864035035
    test 5957 21 21.064458966605 Beta(tan=0.385155, x=0.933177, y=0.359418): 0.383864035035
    test 5958 21 21.000000000000 Theta(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 5959 21 21.032179314629 Mu(tan=0.384509, x=0.933379, y=0.358892): 0.383864035035
    test 5960 21 21.000018617196 Chi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 5961 21 21.042923749309 Xi(tan=0.384724, x=0.933312, y=0.359067): 0.383864035035

    test 5962 21 21.129078684131 Phi(tan=0.386451, x=0.93358, y=0.360783): 0.383864035035
    test 5963 21 21.064458966605 Beta(tan=0.385155, x=0.93358, y=0.359574): 0.383864035035
    test 5964 21 21.000000000000 Theta(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 5965 21 21.032179314629 Mu(tan=0.384509, x=0.933379, y=0.358892), iteration=3: 0.383864035035
    test 5966 21 21.000018617196 Chi(tan=0.383864, x=1.0, y=0.383864), iteration=3: 0.383864035035
    test 5967 21 21.042923749309 Xi(tan=0.384724, x=1.875, y=0.721359), iteration=3: 0.383864035035

    test 5968 24 24.143320630937 Phi(tan=0.448229, x=0.912525, y=0.409021): 0.445228685309
    test 5969 24 24.071580020440 Beta(tan=0.446726, x=0.913037, y=0.407878): 0.445228685309
    test 5970 24 24.000000000000 Theta(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309
    test 5971 24 24.035739886741 Mu(tan=0.445976, x=0.913292, y=0.407306): 0.445228685309
    test 5972 24 24.000026626565 Chi(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309
    test 5973 24 24.047670092028 Xi(tan=0.446226, x=0.913207, y=0.407497): 0.445228685309

    test 5974 24 24.143320630937 Phi(tan=0.448229, x=0.913545, y=0.409478): 0.445228685309
    test 5975 24 24.071580020440 Beta(tan=0.446726, x=0.913545, y=0.408105): 0.445228685309
    test 5976 24 24.000000000000 Theta(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309
    test 5977 24 24.035739886741 Mu(tan=0.445976, x=0.913292, y=0.407306), iteration=3: 0.445228685309
    test 5978 24 24.000026626565 Chi(tan=0.445229, x=1.0, y=0.445229), iteration=3: 0.445228685309
    test 5979 24 24.047670092028 Xi(tan=0.446226, x=1.83461, y=0.818652), iteration=3: 0.445228685309

    test 5980 27 27.155981766217 Phi(tan=0.512959, x=0.889767, y=0.456414): 0.509525449494
    test 5981 27 27.077914193009 Beta(tan=0.51124, x=0.890388, y=0.455202): 0.509525449494
    test 5982 27 27.000000000000 Theta(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494
    test 5983 27 27.038909218353 Mu(tan=0.510381, x=0.890698, y=0.454595): 0.509525449494
    test 5984 27 27.000036101352 Chi(tan=0.509526, x=0.891006, y=0.453991): 0.509525449494
    test 5985 27 27.051893686958 Xi(tan=0.510667, x=0.890595, y=0.454797): 0.509525449494

    test 5986 27 27.155981766217 Phi(tan=0.512959, x=0.891007, y=0.45705): 0.509525449494
    test 5987 27 27.077914193009 Beta(tan=0.51124, x=0.891007, y=0.455518): 0.509525449494
    test 5988 27 27.000000000000 Theta(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494
    test 5989 27 27.038909218353 Mu(tan=0.510381, x=0.890698, y=0.454595), iteration=2: 0.509525449494
    test 5990 27 27.000036101352 Chi(tan=0.509526, x=1.0, y=0.509526), iteration=3: 0.509525449494
    test 5991 27 27.051893686958 Xi(tan=0.510667, x=1.78919, y=0.913679), iteration=3: 0.509525449494

    test 5992 30 30.166923849507 Phi(tan=0.581241, x=0.864565, y=0.502521): 0.577350269190
    test 5993 30 30.083392202979 Beta(tan=0.579293, x=0.865297, y=0.50126): 0.577350269190
    test 5994 30 30.000000000000 Theta(tan=0.57735, x=0.866025, y=0.5): 0.577350269190
    test 5995 30 30.041652569165 Mu(tan=0.57832, x=0.865662, y=0.500629): 0.577350269190
    test 5996 30 30.000046858553 Chi(tan=0.577351, x=0.866025, y=0.500001): 0.577350269190
    test 5997 30 30.055548278686 Xi(tan=0.578644, x=0.86554, y=0.500839): 0.577350269190

    test 5998 30 30.166923849507 Phi(tan=0.581241, x=0.866025, y=0.50337): 0.577350269190
    test 5999 30 30.083392202979 Beta(tan=0.579293, x=0.866025, y=0.501682): 0.577350269190
    test 6000 30 30.000000000000 Theta(tan=0.57735, x=0.866025, y=0.5): 0.577350269190
    test 6001 30 30.041652569165 Mu(tan=0.57832, x=0.865662, y=0.500629), iteration=3: 0.577350269190
    test 6002 30 30.000046858553 Chi(tan=0.577351, x=1.0, y=0.577351), iteration=2: 0.577350269190
    test 6003 30 30.055548278686 Xi(tan=0.578644, x=1.73885, y=1.00618), iteration=3: 0.577350269190

    test 6004 33 33.176027916350 Phi(tan=0.653784, x=0.836993, y=0.547213): 0.649407593198
    test 6005 33 33.087954259505 Beta(tan=0.651592, x=0.837834, y=0.545926): 0.649407593198
    test 6006 33 33.000000000000 Theta(tan=0.649408, x=0.838671, y=0.544639): 0.649407593198
    test 6007 33 33.043939852046 Mu(tan=0.650498, x=0.838253, y=0.545282): 0.649407593198
    test 6008 33 33.000058627624 Chi(tan=0.649409, x=0.83867, y=0.54464): 0.649407593198
    test 6009 33 33.058593865297 Xi(tan=0.650863, x=0.838113, y=0.545496): 0.649407593198

    test 6010 33 33.176027916350 Phi(tan=0.653784, x=0.838671, y=0.54831): 0.649407593198
    test 6011 33 33.087954259505 Beta(tan=0.651592, x=0.838671, y=0.546471): 0.649407593198
    test 6012 33 33.000000000000 Theta(tan=0.649408, x=0.838671, y=0.544639): 0.649407593198
    test 6013 33 33.043939852046 Mu(tan=0.650498, x=0.838253, y=0.545282), iteration=3: 0.649407593198
    test 6014 33 33.000058627624 Chi(tan=0.649409, x=1.0, y=0.649409), iteration=2: 0.649407593198
    test 6015 33 33.058593865297 Xi(tan=0.650863, x=1.68375, y=1.09589), iteration=3: 0.649407593198

    test 6016 36 36.183195540448 Phi(tan=0.731439, x=0.807133, y=0.590369): 0.726542528005
    test 6017 36 36.091550707249 Beta(tan=0.728987, x=0.808077, y=0.589077): 0.726542528005
    test 6018 36 36.000000000000 Theta(tan=0.726543, x=0.809017, y=0.587785): 0.726542528005
    test 6019 36 36.045745964132 Mu(tan=0.727763, x=0.808547, y=0.588431): 0.726542528005
    test 6020 36 36.000071060279 Chi(tan=0.726544, x=0.809016, y=0.587786): 0.726542528005
    test 6021 36 36.060997135037 Xi(tan=0.72817, x=0.808391, y=0.588646): 0.726542528005

    test 6022 36 36.183195540448 Phi(tan=0.731439, x=0.809017, y=0.591747): 0.726542528005
    test 6023 36 36.091550707249 Beta(tan=0.728987, x=0.809017, y=0.589763): 0.726542528005
    test 6024 36 36.000000000000 Theta(tan=0.726543, x=0.809017, y=0.587785): 0.726542528005
    test 6025 36 36.045745964132 Mu(tan=0.727763, x=0.808547, y=0.588431), iteration=3: 0.726542528005
    test 6026 36 36.000071060279 Chi(tan=0.726544, x=1.0, y=0.726544), iteration=3: 0.726542528005
    test 6027 36 36.060997135037 Xi(tan=0.72817, x=1.62404, y=1.18258), iteration=2: 0.726542528005

    test 6028 39 39.188349853309 Phi(tan=0.815242, x=0.775073, y=0.631872): 0.809784033195
    test 6029 39 39.094142555964 Beta(tan=0.812508, x=0.776111, y=0.630596): 0.809784033195
    test 6030 39 39.000000000000 Theta(tan=0.809784, x=0.777146, y=0.62932): 0.809784033195
    test 6031 39 39.047051063854 Mu(tan=0.811145, x=0.776629, y=0.629958): 0.809784033195
    test 6032 39 39.000083744047 Chi(tan=0.809786, x=0.777145, y=0.629322): 0.809784033195
    test 6033 39 39.062731828892 Xi(tan=0.811598, x=0.776456, y=0.630171): 0.809784033195

    test 6034 39 39.188349853309 Phi(tan=0.815242, x=0.777146, y=0.633562): 0.809784033195
    test 6035 39 39.094142555964 Beta(tan=0.812508, x=0.777146, y=0.631437): 0.809784033195
    test 6036 39 39.000000000000 Theta(tan=0.809784, x=0.777146, y=0.62932): 0.809784033195
    test 6037 39 39.047051063854 Mu(tan=0.811145, x=0.776629, y=0.629958), iteration=3: 0.809784033195
    test 6038 39 39.000083744047 Chi(tan=0.809786, x=1.0, y=0.809786), iteration=3: 0.809784033195
    test 6039 39 39.062731828892 Xi(tan=0.811598, x=1.55989, y=1.266), iteration=2: 0.809784033195

    test 6040 42 42.191436312869 Phi(tan=0.906472, x=0.740905, y=0.67161): 0.900404044298
    test 6041 42 42.095701889505 Beta(tan=0.903433, x=0.742026, y=0.670371): 0.900404044298
    test 6042 42 42.000000000000 Theta(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 6043 42 42.047840790779 Mu(tan=0.901917, x=0.742586, y=0.669751): 0.900404044298
    test 6044 42 42.000096219009 Chi(tan=0.900407, x=0.743144, y=0.669132): 0.900404044298
    test 6045 42 42.063779025222 Xi(tan=0.902422, x=0.7424, y=0.669957): 0.900404044298

    test 6046 42 42.191436312869 Phi(tan=0.906472, x=0.743145, y=0.67364): 0.900404044298
    test 6047 42 42.095701889505 Beta(tan=0.903433, x=0.743145, y=0.671382): 0.900404044298
    test 6048 42 42.000000000000 Theta(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 6049 42 42.047840790779 Mu(tan=0.901917, x=0.742586, y=0.669751), iteration=2: 0.900404044298
    test 6050 42 42.000096219009 Chi(tan=0.900407, x=1.0, y=0.900407), iteration=2: 0.900404044298
    test 6051 42 42.063779025222 Xi(tan=0.902422, x=1.49147, y=1.34593), iteration=2: 0.900404044298

    test 6052 45 45.192423215982 Phi(tan=1.00674, x=0.704728, y=0.709478): 1.000000000000
    test 6053 45 45.096212150580 Beta(tan=1.00336, x=0.705918, y=0.708293): 1.000000000000
    test 6054 45 45.000000000000 Theta(tan=1.0, x=0.707107, y=0.707107): 1.000000000000
    test 6055 45 45.048106425714 Mu(tan=1.00168, x=0.706513, y=0.7077): 1.000000000000
    test 6056 45 45.000107996977 Chi(tan=1.0, x=0.707105, y=0.707108): 1.000000000000
    test 6057 45 45.064127343445 Xi(tan=1.00224, x=0.706315, y=0.707898): 1.000000000000

    test 6058 45 45.192423215982 Phi(tan=1.00674, x=0.707107, y=0.711872): 1.000000000000
    test 6059 45 45.096212150580 Beta(tan=1.00336, x=0.707107, y=0.709486): 1.000000000000
    test 6060 45 45.000000000000 Theta(tan=1.0, x=0.707107, y=0.707107): 1.000000000000
    test 6061 45 45.048106425714 Mu(tan=1.00168, x=0.706513, y=0.7077), iteration=2: 1.000000000000
    test 6062 45 45.000107996977 Chi(tan=1.0, x=1.0, y=1.0), iteration=2: 1.000000000000
    test 6063 45 45.064127343445 Xi(tan=1.00224, x=1.41897, y=1.42215), iteration=2: 1.000000000000

    test 6064 48 48.191301952963 Phi(tan=1.1181, x=0.666646, y=0.745375): 1.110612514829
    test 6065 48 48.095668299061 Beta(tan=1.11435, x=0.667889, y=0.744261): 1.110612514829
    test 6066 48 48.000000000000 Theta(tan=1.11061, x=0.669131, y=0.743145): 1.110612514829
    test 6067 48 48.047844989212 Mu(tan=1.11248, x=0.66851, y=0.743703): 1.110612514829
    test 6068 48 48.000118582274 Chi(tan=1.11062, x=0.669129, y=0.743146): 1.110612514829
    test 6069 48 48.063773064711 Xi(tan=1.1131, x=0.668303, y=0.743889): 1.110612514829

    test 6070 48 48.191301952963 Phi(tan=1.1181, x=0.669131, y=0.748153): 1.110612514829
    test 6071 48 48.095668299061 Beta(tan=1.11435, x=0.669131, y=0.745645): 1.110612514829
    test 6072 48 48.000000000000 Theta(tan=1.11061, x=0.669131, y=0.743145): 1.110612514829
    test 6073 48 48.047844989212 Mu(tan=1.11248, x=0.66851, y=0.743703), iteration=3: 1.110612514829
    test 6074 48 48.000118582274 Chi(tan=1.11062, x=1.0, y=1.11062), iteration=3: 1.110612514829
    test 6075 48 48.063773064711 Xi(tan=1.1131, x=1.34261, y=1.49446), iteration=2: 1.110612514829

    test 6076 51 51.188087005479 Phi(tan=1.24322, x=0.626766, y=0.779208): 1.234897156535
    test 6077 51 51.094076843128 Beta(tan=1.23905, x=0.628044, y=0.778178): 1.234897156535
    test 6078 51 51.000000000000 Theta(tan=1.2349, x=0.62932, y=0.777146): 1.234897156535
    test 6079 51 51.047059277252 Mu(tan=1.23697, x=0.628682, y=0.777663): 1.234897156535
    test 6080 51 51.000127493216 Chi(tan=1.2349, x=0.629319, y=0.777147): 1.234897156535
    test 6081 51 51.062720168394 Xi(tan=1.23766, x=0.628469, y=0.777834): 1.234897156535

    test 6082 51 51.188087005479 Phi(tan=1.24322, x=0.62932, y=0.782384): 1.234897156535
    test 6083 51 51.094076843128 Beta(tan=1.23905, x=0.62932, y=0.77976): 1.234897156535
    test 6084 51 51.000000000000 Theta(tan=1.2349, x=0.62932, y=0.777146): 1.234897156535
    test 6085 51 51.047059277252 Mu(tan=1.23697, x=0.628682, y=0.777663), iteration=3: 1.234897156535
    test 6086 51 51.000127493216 Chi(tan=1.2349, x=1.0, y=1.2349), iteration=3: 1.234897156535
    test 6087 51 51.062720168394 Xi(tan=1.23766, x=1.26258, y=1.56265), iteration=3: 1.234897156535

    test 6088 54 54.182815692055 Phi(tan=1.38566, x=0.585201, y=0.810888): 1.376381920471
    test 6089 54 54.091455743965 Beta(tan=1.38101, x=0.586493, y=0.809954): 1.376381920471
    test 6090 54 54.000000000000 Theta(tan=1.37638, x=0.587785, y=0.809017): 1.376381920471
    test 6091 54 54.045757833575 Mu(tan=1.3787, x=0.587139, y=0.809486): 1.376381920471
    test 6092 54 54.000134283342 Chi(tan=1.37639, x=0.587783, y=0.809018): 1.376381920471
    test 6093 54 54.060980284207 Xi(tan=1.37947, x=0.586924, y=0.809642): 1.376381920471

    test 6094 54 54.182815692055 Phi(tan=1.38566, x=0.587785, y=0.814469): 1.376381920471
    test 6095 54 54.091455743965 Beta(tan=1.38101, x=0.587785, y=0.811739): 1.376381920471
    test 6096 54 54.000000000000 Theta(tan=1.37638, x=0.587785, y=0.809017): 1.376381920471
    test 6097 54 54.045757833575 Mu(tan=1.3787, x=0.587139, y=0.809486), iteration=2: 1.376381920471
    test 6098 54 54.000134283342 Chi(tan=1.37639, x=1.0, y=1.37639), iteration=3: 1.376381920471
    test 6099 54 54.060980284207 Xi(tan=1.37947, x=1.17912, y=1.62655), iteration=2: 1.376381920471

    test 6100 57 57.175547668144 Phi(tan=1.55024, x=0.542067, y=0.840335): 1.539864963815
    test 6101 57 57.087834196097 Beta(tan=1.54505, x=0.543353, y=0.839505): 1.539864963815
    test 6102 57 57.000000000000 Theta(tan=1.53986, x=0.544639, y=0.838671): 1.539864963815
    test 6103 57 57.043954858841 Mu(tan=1.54245, x=0.543995, y=0.839088): 1.539864963815
    test 6104 57 57.000138561478 Chi(tan=1.53987, x=0.544637, y=0.838672): 1.539864963815
    test 6105 57 57.058572560645 Xi(tan=1.54332, x=0.543781, y=0.839227): 1.539864963815

    test 6106 57 57.175547668144 Phi(tan=1.55024, x=0.544639, y=0.844323): 1.539864963815
    test 6107 57 57.087834196097 Beta(tan=1.54505, x=0.544639, y=0.841492): 1.539864963815
    test 6108 57 57.000000000000 Theta(tan=1.53986, x=0.544639, y=0.838671): 1.539864963815
    test 6109 57 57.043954858841 Mu(tan=1.54245, x=0.543995, y=0.839088), iteration=3: 1.539864963815
    test 6110 57 57.000138561478 Chi(tan=1.53987, x=1.0, y=1.53987), iteration=2: 1.539864963815
    test 6111 57 57.058572560645 Xi(tan=1.54332, x=1.09245, y=1.68599), iteration=3: 1.539864963815

    test 6112 60 60.166364190171 Phi(tan=1.74372, x=0.497483, y=0.867474): 1.732050807569
    test 6113 60 60.083252286764 Beta(tan=1.73788, x=0.498741, y=0.866751): 1.732050807569
    test 6114 60 60.000000000000 Theta(tan=1.73205, x=0.5, y=0.866025): 1.732050807569
    test 6115 60 60.041670057501 Mu(tan=1.73496, x=0.49937, y=0.866389): 1.732050807569
    test 6116 60 60.000140009756 Chi(tan=1.73206, x=0.499998, y=0.866027): 1.732050807569
    test 6117 60 60.055523451376 Xi(tan=1.73593, x=0.499161, y=0.86651): 1.732050807569

    test 6118 60 60.166364190171 Phi(tan=1.74372, x=0.5, y=0.871862): 1.732050807569
    test 6119 60 60.083252286764 Beta(tan=1.73788, x=0.5, y=0.868939): 1.732050807569
    test 6120 60 60.000000000000 Theta(tan=1.73205, x=0.5, y=0.866025): 1.732050807569
    test 6121 60 60.041670057501 Mu(tan=1.73496, x=0.49937, y=0.866389), iteration=2: 1.732050807569
    test 6122 60 60.000140009756 Chi(tan=1.73206, x=1.0, y=1.73206), iteration=3: 1.732050807569
    test 6123 60 60.055523451376 Xi(tan=1.73593, x=1.0028, y=1.7408), iteration=3: 1.732050807569

    test 6124 63 63.155367155141 Phi(tan=1.97584, x=0.451573, y=0.892234): 1.962610505505
    test 6125 63 63.077760538972 Beta(tan=1.96921, x=0.452781, y=0.891622): 1.962610505505
    test 6126 63 63.000000000000 Theta(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 6127 63 63.038928423958 Mu(tan=1.96591, x=0.453385, y=0.891315): 1.962610505505
    test 6128 63 63.000138398794 Chi(tan=1.96262, x=0.453988, y=0.891008): 1.962610505505
    test 6129 63 63.051866422105 Xi(tan=1.96701, x=0.453184, y=0.891417): 1.962610505505

    test 6130 63 63.155367155141 Phi(tan=1.97584, x=0.45399, y=0.897011): 1.962610505505
    test 6131 63 63.077760538972 Beta(tan=1.96921, x=0.45399, y=0.894004): 1.962610505505
    test 6132 63 63.000000000000 Theta(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 6133 63 63.038928423958 Mu(tan=1.96591, x=0.453385, y=0.891315), iteration=2: 1.962610505505
    test 6134 63 63.000138398794 Chi(tan=1.96262, x=1.0, y=1.96262), iteration=3: 1.962610505505
    test 6135 63 63.051866422105 Xi(tan=1.96701, x=0.910437, y=1.79084), iteration=3: 1.962610505505

    test 6136 66 66.142677929298 Phi(tan=2.26117, x=0.40446, y=0.914555): 2.246036773904
    test 6137 66 66.071419343981 Beta(tan=2.25359, x=0.405598, y=0.914052): 2.246036773904
    test 6138 66 66.000000000000 Theta(tan=2.24604, x=0.406737, y=0.913545): 2.246036773904
    test 6139 66 66.035759970273 Mu(tan=2.24981, x=0.406166, y=0.913799): 2.246036773904
    test 6140 66 66.000133599388 Chi(tan=2.24605, x=0.406735, y=0.913546): 2.246036773904
    test 6141 66 66.047641581266 Xi(tan=2.25107, x=0.405977, y=0.913883): 2.246036773904

    test 6142 66 66.142677929298 Phi(tan=2.26117, x=0.406737, y=0.919702): 2.246036773904
    test 6143 66 66.071419343981 Beta(tan=2.25359, x=0.406737, y=0.916619): 2.246036773904
    test 6144 66 66.000000000000 Theta(tan=2.24604, x=0.406737, y=0.913545): 2.246036773904
    test 6145 66 66.035759970273 Mu(tan=2.24981, x=0.406166, y=0.913799), iteration=3: 2.246036773904
    test 6146 66 66.000133599388 Chi(tan=2.24605, x=1.0, y=2.24605), iteration=3: 2.246036773904
    test 6147 66 66.047641581266 Xi(tan=2.25107, x=0.815599, y=1.83597), iteration=2: 2.246036773904

    test 6148 69 69.128435980976 Phi(tan=2.62265, x=0.356274, y=0.934381): 2.605089064694
    test 6149 69 69.064298290053 Beta(tan=2.61385, x=0.35732, y=0.933982): 2.605089064694
    test 6150 69 69.000000000000 Theta(tan=2.60509, x=0.358368, y=0.93358): 2.605089064694
    test 6151 69 69.032199398354 Mu(tan=2.60947, x=0.357843, y=0.933782): 2.605089064694
    test 6152 69 69.000125590184 Chi(tan=2.60511, x=0.358366, y=0.933581): 2.605089064694
    test 6153 69 69.042895238706 Xi(tan=2.61093, x=0.357669, y=0.933848): 2.605089064694

    test 6154 69 69.128435980976 Phi(tan=2.62265, x=0.358368, y=0.939872): 2.605089064694
    test 6155 69 69.064298290053 Beta(tan=2.61385, x=0.358368, y=0.936721): 2.605089064694
    test 6156 69 69.000000000000 Theta(tan=2.60509, x=0.358368, y=0.93358): 2.605089064694
    test 6157 69 69.032199398354 Mu(tan=2.60947, x=0.357843, y=0.933782), iteration=3: 2.605089064694
    test 6158 69 69.000125590184 Chi(tan=2.60511, x=1.0, y=2.60511), iteration=3: 2.605089064694
    test 6159 69 69.042895238706 Xi(tan=2.61093, x=0.71855, y=1.87608), iteration=2: 2.605089064694

    test 6160 72 72.112797334151 Phi(tan=3.09843, x=0.307144, y=0.951663): 3.077683537175
    test 6161 72 72.056475395211 Beta(tan=3.08804, x=0.308079, y=0.951361): 3.077683537175
    test 6162 72 72.000000000000 Theta(tan=3.07768, x=0.309017, y=0.951057): 3.077683537175
    test 6163 72 72.028285720189 Mu(tan=3.08286, x=0.308547, y=0.951209): 3.077683537175
    test 6164 72 72.000114461007 Chi(tan=3.0777, x=0.309015, y=0.951057): 3.077683537175
    test 6165 72 72.037679397301 Xi(tan=3.08458, x=0.308391, y=0.95126): 3.077683537175

    test 6166 72 72.112797334151 Phi(tan=3.09843, x=0.309017, y=0.957466): 3.077683537175
    test 6167 72 72.056475395211 Beta(tan=3.08804, x=0.309017, y=0.954256): 3.077683537175
    test 6168 72 72.000000000000 Theta(tan=3.07768, x=0.309017, y=0.951057): 3.077683537175
    test 6169 72 72.028285720189 Mu(tan=3.08286, x=0.308547, y=0.951209), iteration=2: 3.077683537175
    test 6170 72 72.000114461007 Chi(tan=3.0777, x=1.0, y=3.0777), iteration=3: 3.077683537175
    test 6171 72 72.037679397301 Xi(tan=3.08458, x=0.619552, y=1.91106), iteration=3: 3.077683537175

    test 6172 75 75.095932860347 Phi(tan=3.7572, x=0.257201, y=0.966358): 3.732050807569
    test 6173 75 75.048036252634 Beta(tan=3.74461, x=0.258009, y=0.966142): 3.732050807569
    test 6174 75 75.000000000000 Theta(tan=3.73205, x=0.258819, y=0.965926): 3.732050807569
    test 6175 75 75.024061830258 Mu(tan=3.73833, x=0.258413, y=0.966034): 3.732050807569
    test 6176 75 75.000100411670 Chi(tan=3.73208, x=0.258817, y=0.965926): 3.732050807569
    test 6177 75 75.032051183105 Xi(tan=3.74042, x=0.258279, y=0.96607): 3.732050807569

    test 6178 75 75.095932860347 Phi(tan=3.7572, x=0.258819, y=0.972436): 3.732050807569
    test 6179 75 75.048036252634 Beta(tan=3.74461, x=0.258819, y=0.969175): 3.732050807569
    test 6180 75 75.000000000000 Theta(tan=3.73205, x=0.258819, y=0.965926): 3.732050807569
    test 6181 75 75.024061830258 Mu(tan=3.73833, x=0.258413, y=0.966034), iteration=3: 3.732050807569
    test 6182 75 75.000100411670 Chi(tan=3.73208, x=1.0, y=3.73208), iteration=3: 3.732050807569
    test 6183 75 75.032051183105 Xi(tan=3.74042, x=0.518877, y=1.94082), iteration=2: 3.732050807569

    test 6184 78 78.078026427494 Phi(tan=4.73634, x=0.206579, y=0.97843): 4.704630109478
    test 6185 78 78.039073098008 Beta(tan=4.72046, x=0.207245, y=0.978289): 4.704630109478
    test 6186 78 78.000000000000 Theta(tan=4.70463, x=0.207912, y=0.978148): 4.704630109478
    test 6187 78 78.019574034851 Mu(tan=4.71255, x=0.207578, y=0.978219): 4.704630109478
    test 6188 78 78.000083746317 Chi(tan=4.70466, x=0.20791, y=0.978148): 4.704630109478
    test 6189 78 78.026072220300 Xi(tan=4.71518, x=0.207467, y=0.978242): 4.704630109478

    test 6190 78 78.078026427494 Phi(tan=4.73634, x=0.207912, y=0.98474): 4.704630109478
    test 6191 78 78.039073098008 Beta(tan=4.72046, x=0.207912, y=0.981438): 4.704630109478
    test 6192 78 78.000000000000 Theta(tan=4.70463, x=0.207912, y=0.978148): 4.704630109478
    test 6193 78 78.019574034851 Mu(tan=4.71255, x=0.207578, y=0.978219), iteration=3: 4.704630109478
    test 6194 78 78.000083746317 Chi(tan=4.70466, x=1.0, y=4.70466), iteration=3: 4.704630109478
    test 6195 78 78.026072220300 Xi(tan=4.71518, x=0.416796, y=1.96527), iteration=3: 4.704630109478

    test 6196 81 81.059272925037 Phi(tan=6.3563, x=0.155413, y=0.98785): 6.313751514675
    test 6197 81 81.029683808843 Beta(tan=6.33499, x=0.155923, y=0.987769): 6.313751514675
    test 6198 81 81.000000000000 Theta(tan=6.31375, x=0.156434, y=0.987688): 6.313751514675
    test 6199 81 81.014871543461 Mu(tan=6.32438, x=0.156178, y=0.987729): 6.313751514675
    test 6200 81 81.000064863493 Chi(tan=6.3138, x=0.156433, y=0.987689): 6.313751514675
    test 6201 81 81.019807957756 Xi(tan=6.32791, x=0.156093, y=0.987742): 6.313751514675

    test 6202 81 81.059272925037 Phi(tan=6.3563, x=0.156434, y=0.994345): 6.313751514675
    test 6203 81 81.029683808843 Beta(tan=6.33499, x=0.156434, y=0.991011): 6.313751514675
    test 6204 81 81.000000000000 Theta(tan=6.31375, x=0.156434, y=0.987688): 6.313751514675
    test 6205 81 81.014871543461 Mu(tan=6.32438, x=0.156178, y=0.987729), iteration=2: 6.313751514675
    test 6206 81 81.000064863493 Chi(tan=6.3138, x=1.0, y=6.3138), iteration=3: 6.313751514675
    test 6207 81 81.019807957756 Xi(tan=6.32791, x=0.313588, y=1.98435), iteration=3: 6.313751514675

    test 6208 84 84.039876185217 Phi(tan=9.57849, x=0.103836, y=0.994594): 9.514364454223
    test 6209 84 84.019970846274 Beta(tan=9.54637, x=0.104182, y=0.994558): 9.514364454223
    test 6210 84 84.000000000000 Theta(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 6211 84 84.010005927895 Mu(tan=9.53037, x=0.104355, y=0.99454): 9.514364454223
    test 6212 84 84.000044242373 Chi(tan=9.51444, x=0.104528, y=0.994522): 9.514364454223
    test 6213 84 84.013326954497 Xi(tan=9.5357, x=0.104297, y=0.994546): 9.514364454223

    test 6214 84 84.039876185217 Phi(tan=9.57849, x=0.104528, y=1.00122): 9.514364454223
    test 6215 84 84.019970846274 Beta(tan=9.54637, x=0.104528, y=0.997868): 9.514364454223
    test 6216 84 84.000000000000 Theta(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 6217 84 84.010005927895 Mu(tan=9.53037, x=0.104355, y=0.99454), iteration=3: 9.514364454223
    test 6218 84 84.000044242373 Chi(tan=9.51444, x=1.0, y=9.51444), iteration=2: 9.514364454223
    test 6219 84 84.013326954497 Xi(tan=9.5357, x=0.209531, y=1.99802), iteration=3: 9.514364454223

    test 6220 87 87.020046820811 Phi(tan=19.2097, x=0.0519865, y=0.998648): 19.081136687728
    test 6221 87 87.010040150331 Beta(tan=19.1453, x=0.052161, y=0.998639): 19.081136687728
    test 6222 87 87.000000000000 Theta(tan=19.0811, x=0.052336, y=0.99863): 19.081136687728
    test 6223 87 87.005030555098 Mu(tan=19.1132, x=0.0522483, y=0.998634): 19.081136687728
    test 6224 87 87.000022425679 Chi(tan=19.0813, x=0.0523356, y=0.99863): 19.081136687728
    test 6225 87 87.006700131805 Xi(tan=19.1239, x=0.0522192, y=0.998636): 19.081136687728

    test 6226 87 87.020046820811 Phi(tan=19.2097, x=0.052336, y=1.00536): 19.081136687728
    test 6227 87 87.010040150331 Beta(tan=19.1453, x=0.052336, y=1.00199): 19.081136687728
    test 6228 87 87.000000000000 Theta(tan=19.0811, x=0.052336, y=0.99863): 19.081136687728
    test 6229 87 87.005030555098 Mu(tan=19.1132, x=0.0522483, y=0.998634), iteration=3: 19.081136687728
    test 6230 87 87.000022425679 Chi(tan=19.0813, x=1.0, y=19.0813), iteration=3: 19.081136687728
    test 6231 87 87.006700131805 Xi(tan=19.1239, x=0.104907, y=2.00624), iteration=3: 19.081136687728

    test 6232 90 90.000000000000 Phi(tan=inf, x=0.0, y=1.0): inf
    test 6233 90 90.000000000000 Beta(tan=inf, x=0.0, y=1.0): inf
    test 6234 90 90.000000000000 Theta(tan=inf, x=0.0, y=1.0): inf
    test 6235 90 90.000000000000 Mu(tan=inf, x=0.0, y=1.0): inf
    test 6236 90 90.000000000000 Chi(tan=inf, x=0.0, y=1.0): inf
    test 6237 90 90.000000000000 Xi(tan=inf, x=0.0, y=1.0): inf

    test 6238 90 90.000000000000 Phi(tan=inf, x=0.0, y=1.0): inf
    test 6239 90 90.000000000000 Beta(tan=inf, x=0.0, y=1.0): inf
    test 6240 90 90.000000000000 Theta(tan=inf, x=0.0, y=1.0): inf
    test 6241 90 90.000000000000 Mu(tan=inf, x=0.0, y=1.0): inf
    test 6242 90 90.000000000000 Chi(tan=inf, x=0.0, y=1.0): inf
    test 6243 90 90.000000000000 Xi(tan=inf, x=0.0, y=1.0): inf

    test 6244 93 92.979953179189 Phi(tan=-19.2097, x=-0.0519865, y=0.998648): -19.081136687728
    test 6245 93 92.989959849669 Beta(tan=-19.1453, x=-0.052161, y=0.998639): -19.081136687728
    test 6246 93 93.000000000000 Theta(tan=-19.0811, x=-0.052336, y=0.99863): -19.081136687728
    test 6247 93 92.994969444902 Mu(tan=-19.1132, x=-0.0522483, y=0.998634): -19.081136687728
    test 6248 93 92.999977574321 Chi(tan=-19.0813, x=-0.0523356, y=0.99863): -19.081136687728
    test 6249 93 92.993299868195 Xi(tan=-19.1239, x=-0.0522192, y=0.998636): -19.081136687728

    test 6250 93 92.979953179189 Phi(tan=-19.2097, x=-0.052336, y=1.00536): -19.081136687728
    test 6251 93 92.989959849669 Beta(tan=-19.1453, x=-0.052336, y=1.00199): -19.081136687728
    test 6252 93 93.000000000000 Theta(tan=-19.0811, x=-0.052336, y=0.99863): -19.081136687728
    test 6253 93 92.994969444902 Mu(tan=-19.1132, x=-0.0522483, y=0.998634), iteration=3: -19.081136687728
    test 6254 93 92.999977574321 Chi(tan=-19.0813, x=-1, y=19.0813), iteration=3: -19.081136687728
    test 6255 93 92.993299868195 Xi(tan=-19.1239, x=-0.104907, y=2.00624), iteration=3: -19.081136687728

    test 6256 96 95.960123814783 Phi(tan=-9.57849, x=-0.103836, y=0.994594): -9.514364454223
    test 6257 96 95.980029153726 Beta(tan=-9.54637, x=-0.104182, y=0.994558): -9.514364454223
    test 6258 96 96.000000000000 Theta(tan=-9.51436, x=-0.104528, y=0.994522): -9.514364454223
    test 6259 96 95.989994072105 Mu(tan=-9.53037, x=-0.104355, y=0.99454): -9.514364454223
    test 6260 96 95.999955757627 Chi(tan=-9.51444, x=-0.104528, y=0.994522): -9.514364454223
    test 6261 96 95.986673045503 Xi(tan=-9.5357, x=-0.104297, y=0.994546): -9.514364454223

    test 6262 96 95.960123814783 Phi(tan=-9.57849, x=-0.104528, y=1.00122): -9.514364454223
    test 6263 96 95.980029153726 Beta(tan=-9.54637, x=-0.104528, y=0.997868): -9.514364454223
    test 6264 96 96.000000000000 Theta(tan=-9.51436, x=-0.104528, y=0.994522): -9.514364454223
    test 6265 96 95.989994072105 Mu(tan=-9.53037, x=-0.104355, y=0.99454), iteration=3: -9.514364454223
    test 6266 96 95.999955757627 Chi(tan=-9.51444, x=-1, y=9.51444), iteration=2: -9.514364454223
    test 6267 96 95.986673045503 Xi(tan=-9.5357, x=-0.209531, y=1.99802), iteration=2: -9.514364454223

    test 6268 99 98.940727074963 Phi(tan=-6.3563, x=-0.155413, y=0.98785): -6.313751514675
    test 6269 99 98.970316191157 Beta(tan=-6.33499, x=-0.155923, y=0.987769): -6.313751514675
    test 6270 99 99.000000000000 Theta(tan=-6.31375, x=-0.156434, y=0.987688): -6.313751514675
    test 6271 99 98.985128456539 Mu(tan=-6.32438, x=-0.156178, y=0.987729): -6.313751514675
    test 6272 99 98.999935136507 Chi(tan=-6.3138, x=-0.156433, y=0.987689): -6.313751514675
    test 6273 99 98.980192042244 Xi(tan=-6.32791, x=-0.156093, y=0.987742): -6.313751514675

    test 6274 99 98.940727074963 Phi(tan=-6.3563, x=-0.156434, y=0.994345): -6.313751514675
    test 6275 99 98.970316191157 Beta(tan=-6.33499, x=-0.156434, y=0.991011): -6.313751514675
    test 6276 99 99.000000000000 Theta(tan=-6.31375, x=-0.156434, y=0.987688): -6.313751514675
    test 6277 99 98.985128456539 Mu(tan=-6.32438, x=-0.156178, y=0.987729), iteration=3: -6.313751514675
    test 6278 99 98.999935136507 Chi(tan=-6.3138, x=-1, y=6.3138), iteration=3: -6.313751514675
    test 6279 99 98.980192042244 Xi(tan=-6.32791, x=-0.313588, y=1.98435), iteration=2: -6.313751514675

    test 6280 102 101.921973572506 Phi(tan=-4.73634, x=-0.206579, y=0.97843): -4.704630109478
    test 6281 102 101.960926901992 Beta(tan=-4.72046, x=-0.207245, y=0.978289): -4.704630109478
    test 6282 102 102.000000000000 Theta(tan=-4.70463, x=-0.207912, y=0.978148): -4.704630109478
    test 6283 102 101.980425965149 Mu(tan=-4.71255, x=-0.207578, y=0.978219): -4.704630109478
    test 6284 102 101.999916253683 Chi(tan=-4.70466, x=-0.20791, y=0.978148): -4.704630109478
    test 6285 102 101.973927779700 Xi(tan=-4.71518, x=-0.207467, y=0.978242): -4.704630109478

    test 6286 102 101.921973572506 Phi(tan=-4.73634, x=-0.207912, y=0.98474): -4.704630109478
    test 6287 102 101.960926901992 Beta(tan=-4.72046, x=-0.207912, y=0.981438): -4.704630109478
    test 6288 102 102.000000000000 Theta(tan=-4.70463, x=-0.207912, y=0.978148): -4.704630109478
    test 6289 102 101.980425965149 Mu(tan=-4.71255, x=-0.207578, y=0.978219), iteration=3: -4.704630109478
    test 6290 102 101.999916253683 Chi(tan=-4.70466, x=-1, y=4.70466), iteration=3: -4.704630109478
    test 6291 102 101.973927779700 Xi(tan=-4.71518, x=-0.416796, y=1.96527), iteration=3: -4.704630109478

    test 6292 105 104.904067139653 Phi(tan=-3.7572, x=-0.257201, y=0.966358): -3.732050807569
    test 6293 105 104.951963747366 Beta(tan=-3.74461, x=-0.258009, y=0.966142): -3.732050807569
    test 6294 105 105.000000000000 Theta(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 6295 105 104.975938169742 Mu(tan=-3.73833, x=-0.258413, y=0.966034): -3.732050807569
    test 6296 105 104.999899588330 Chi(tan=-3.73208, x=-0.258817, y=0.965926): -3.732050807569
    test 6297 105 104.967948816895 Xi(tan=-3.74042, x=-0.258279, y=0.96607): -3.732050807569

    test 6298 105 104.904067139653 Phi(tan=-3.7572, x=-0.258819, y=0.972436): -3.732050807569
    test 6299 105 104.951963747366 Beta(tan=-3.74461, x=-0.258819, y=0.969175): -3.732050807569
    test 6300 105 105.000000000000 Theta(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 6301 105 104.975938169742 Mu(tan=-3.73833, x=-0.258413, y=0.966034), iteration=3: -3.732050807569
    test 6302 105 104.999899588330 Chi(tan=-3.73208, x=-1, y=3.73208), iteration=3: -3.732050807569
    test 6303 105 104.967948816895 Xi(tan=-3.74042, x=-0.518877, y=1.94082), iteration=2: -3.732050807569

    test 6304 108 107.887202665849 Phi(tan=-3.09843, x=-0.307144, y=0.951663): -3.077683537175
    test 6305 108 107.943524604789 Beta(tan=-3.08804, x=-0.308079, y=0.951361): -3.077683537175
    test 6306 108 108.000000000000 Theta(tan=-3.07768, x=-0.309017, y=0.951057): -3.077683537175
    test 6307 108 107.971714279811 Mu(tan=-3.08286, x=-0.308547, y=0.951209): -3.077683537175
    test 6308 108 107.999885538993 Chi(tan=-3.0777, x=-0.309015, y=0.951057): -3.077683537175
    test 6309 108 107.962320602699 Xi(tan=-3.08458, x=-0.308391, y=0.95126): -3.077683537175

    test 6310 108 107.887202665849 Phi(tan=-3.09843, x=-0.309017, y=0.957466): -3.077683537175
    test 6311 108 107.943524604789 Beta(tan=-3.08804, x=-0.309017, y=0.954256): -3.077683537175
    test 6312 108 108.000000000000 Theta(tan=-3.07768, x=-0.309017, y=0.951057): -3.077683537175
    test 6313 108 107.971714279811 Mu(tan=-3.08286, x=-0.308547, y=0.951209), iteration=3: -3.077683537175
    test 6314 108 107.999885538993 Chi(tan=-3.0777, x=-1, y=3.0777), iteration=3: -3.077683537175
    test 6315 108 107.962320602699 Xi(tan=-3.08458, x=-0.619552, y=1.91106), iteration=3: -3.077683537175

    test 6316 111 110.871564019024 Phi(tan=-2.62265, x=-0.356274, y=0.934381): -2.605089064694
    test 6317 111 110.935701709947 Beta(tan=-2.61385, x=-0.35732, y=0.933982): -2.605089064694
    test 6318 111 111.000000000000 Theta(tan=-2.60509, x=-0.358368, y=0.93358): -2.605089064694
    test 6319 111 110.967800601646 Mu(tan=-2.60947, x=-0.357843, y=0.933782): -2.605089064694
    test 6320 111 110.999874409816 Chi(tan=-2.60511, x=-0.358366, y=0.933581): -2.605089064694
    test 6321 111 110.957104761294 Xi(tan=-2.61093, x=-0.357669, y=0.933848): -2.605089064694

    test 6322 111 110.871564019024 Phi(tan=-2.62265, x=-0.358368, y=0.939872): -2.605089064694
    test 6323 111 110.935701709947 Beta(tan=-2.61385, x=-0.358368, y=0.936721): -2.605089064694
    test 6324 111 111.000000000000 Theta(tan=-2.60509, x=-0.358368, y=0.93358): -2.605089064694
    test 6325 111 110.967800601646 Mu(tan=-2.60947, x=-0.357843, y=0.933782), iteration=2: -2.605089064694
    test 6326 111 110.999874409816 Chi(tan=-2.60511, x=-1, y=2.60511), iteration=3: -2.605089064694
    test 6327 111 110.957104761294 Xi(tan=-2.61093, x=-0.71855, y=1.87608), iteration=3: -2.605089064694

    test 6328 114 113.857322070702 Phi(tan=-2.26117, x=-0.40446, y=0.914555): -2.246036773904
    test 6329 114 113.928580656019 Beta(tan=-2.25359, x=-0.405598, y=0.914052): -2.246036773904
    test 6330 114 114.000000000000 Theta(tan=-2.24604, x=-0.406737, y=0.913545): -2.246036773904
    test 6331 114 113.964240029727 Mu(tan=-2.24981, x=-0.406166, y=0.913799): -2.246036773904
    test 6332 114 113.999866400612 Chi(tan=-2.24605, x=-0.406735, y=0.913546): -2.246036773904
    test 6333 114 113.952358418734 Xi(tan=-2.25107, x=-0.405977, y=0.913883): -2.246036773904

    test 6334 114 113.857322070702 Phi(tan=-2.26117, x=-0.406737, y=0.919702): -2.246036773904
    test 6335 114 113.928580656019 Beta(tan=-2.25359, x=-0.406737, y=0.916619): -2.246036773904
    test 6336 114 114.000000000000 Theta(tan=-2.24604, x=-0.406737, y=0.913545): -2.246036773904
    test 6337 114 113.964240029727 Mu(tan=-2.24981, x=-0.406166, y=0.913799), iteration=3: -2.246036773904
    test 6338 114 113.999866400612 Chi(tan=-2.24605, x=-1, y=2.24605), iteration=3: -2.246036773904
    test 6339 114 113.952358418734 Xi(tan=-2.25107, x=-0.815599, y=1.83597), iteration=2: -2.246036773904

    test 6340 117 116.844632844859 Phi(tan=-1.97584, x=-0.451573, y=0.892234): -1.962610505505
    test 6341 117 116.922239461028 Beta(tan=-1.96921, x=-0.452781, y=0.891622): -1.962610505505
    test 6342 117 117.000000000000 Theta(tan=-1.96261, x=-0.45399, y=0.891007): -1.962610505505
    test 6343 117 116.961071576042 Mu(tan=-1.96591, x=-0.453385, y=0.891315): -1.962610505505
    test 6344 117 116.999861601206 Chi(tan=-1.96262, x=-0.453988, y=0.891008): -1.962610505505
    test 6345 117 116.948133577895 Xi(tan=-1.96701, x=-0.453184, y=0.891417): -1.962610505505

    test 6346 117 116.844632844859 Phi(tan=-1.97584, x=-0.45399, y=0.897011): -1.962610505505
    test 6347 117 116.922239461028 Beta(tan=-1.96921, x=-0.45399, y=0.894004): -1.962610505505
    test 6348 117 117.000000000000 Theta(tan=-1.96261, x=-0.45399, y=0.891007): -1.962610505505
    test 6349 117 116.961071576042 Mu(tan=-1.96591, x=-0.453385, y=0.891315), iteration=2: -1.962610505505
    test 6350 117 116.999861601206 Chi(tan=-1.96262, x=-1, y=1.96262), iteration=3: -1.962610505505
    test 6351 117 116.948133577895 Xi(tan=-1.96701, x=-0.910437, y=1.79084), iteration=3: -1.962610505505

    test 6352 120 119.833635809829 Phi(tan=-1.74372, x=-0.497483, y=0.867474): -1.732050807569
    test 6353 120 119.916747713236 Beta(tan=-1.73788, x=-0.498741, y=0.866751): -1.732050807569
    test 6354 120 120.000000000000 Theta(tan=-1.73205, x=-0.5, y=0.866025): -1.732050807569
    test 6355 120 119.958329942499 Mu(tan=-1.73496, x=-0.49937, y=0.866389): -1.732050807569
    test 6356 120 119.999859990244 Chi(tan=-1.73206, x=-0.499998, y=0.866027): -1.732050807569
    test 6357 120 119.944476548624 Xi(tan=-1.73593, x=-0.499161, y=0.86651): -1.732050807569

    test 6358 120 119.833635809829 Phi(tan=-1.74372, x=-0.5, y=0.871862): -1.732050807569
    test 6359 120 119.916747713236 Beta(tan=-1.73788, x=-0.5, y=0.868939): -1.732050807569
    test 6360 120 120.000000000000 Theta(tan=-1.73205, x=-0.5, y=0.866025): -1.732050807569
    test 6361 120 119.958329942499 Mu(tan=-1.73496, x=-0.49937, y=0.866389), iteration=3: -1.732050807569
    test 6362 120 119.999859990244 Chi(tan=-1.73206, x=-1, y=1.73206), iteration=3: -1.732050807569
    test 6363 120 119.944476548624 Xi(tan=-1.73593, x=-1.0028, y=1.7408), iteration=2: -1.732050807569

    test 6364 123 122.824452331856 Phi(tan=-1.55024, x=-0.542067, y=0.840335): -1.539864963815
    test 6365 123 122.912165803903 Beta(tan=-1.54505, x=-0.543353, y=0.839505): -1.539864963815
    test 6366 123 123.000000000000 Theta(tan=-1.53986, x=-0.544639, y=0.838671): -1.539864963815
    test 6367 123 122.956045141159 Mu(tan=-1.54245, x=-0.543995, y=0.839088): -1.539864963815
    test 6368 123 122.999861438522 Chi(tan=-1.53987, x=-0.544637, y=0.838672): -1.539864963815
    test 6369 123 122.941427439355 Xi(tan=-1.54332, x=-0.543781, y=0.839227): -1.539864963815

    test 6370 123 122.824452331856 Phi(tan=-1.55024, x=-0.544639, y=0.844323): -1.539864963815
    test 6371 123 122.912165803903 Beta(tan=-1.54505, x=-0.544639, y=0.841492): -1.539864963815
    test 6372 123 123.000000000000 Theta(tan=-1.53986, x=-0.544639, y=0.838671): -1.539864963815
    test 6373 123 122.956045141160 Mu(tan=-1.54245, x=-0.543995, y=0.839088), iteration=3: -1.539864963815
    test 6374 123 122.999861438522 Chi(tan=-1.53987, x=-1, y=1.53987), iteration=2: -1.539864963815
    test 6375 123 122.941427439355 Xi(tan=-1.54332, x=-1.09245, y=1.68599), iteration=3: -1.539864963815

    test 6376 126 125.817184307945 Phi(tan=-1.38566, x=-0.585201, y=0.810888): -1.376381920471
    test 6377 126 125.908544256035 Beta(tan=-1.38101, x=-0.586493, y=0.809954): -1.376381920471
    test 6378 126 126.000000000000 Theta(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 6379 126 125.954242166425 Mu(tan=-1.3787, x=-0.587139, y=0.809486): -1.376381920471
    test 6380 126 125.999865716658 Chi(tan=-1.37639, x=-0.587783, y=0.809018): -1.376381920471
    test 6381 126 125.939019715793 Xi(tan=-1.37947, x=-0.586924, y=0.809642): -1.376381920471

    test 6382 126 125.817184307945 Phi(tan=-1.38566, x=-0.587785, y=0.814469): -1.376381920471
    test 6383 126 125.908544256035 Beta(tan=-1.38101, x=-0.587785, y=0.811739): -1.376381920471
    test 6384 126 126.000000000000 Theta(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 6385 126 125.954242166425 Mu(tan=-1.3787, x=-0.587139, y=0.809486), iteration=2: -1.376381920471
    test 6386 126 125.999865716658 Chi(tan=-1.37639, x=-1, y=1.37639), iteration=3: -1.376381920471
    test 6387 126 125.939019715793 Xi(tan=-1.37947, x=-1.17912, y=1.62655), iteration=2: -1.376381920471

    test 6388 129 128.811912994521 Phi(tan=-1.24322, x=-0.626766, y=0.779208): -1.234897156535
    test 6389 129 128.905923156872 Beta(tan=-1.23905, x=-0.628044, y=0.778178): -1.234897156535
    test 6390 129 129.000000000000 Theta(tan=-1.2349, x=-0.62932, y=0.777146): -1.234897156535
    test 6391 129 128.952940722748 Mu(tan=-1.23697, x=-0.628682, y=0.777663): -1.234897156535
    test 6392 129 128.999872506784 Chi(tan=-1.2349, x=-0.629319, y=0.777147): -1.234897156535
    test 6393 129 128.937279831606 Xi(tan=-1.23766, x=-0.628469, y=0.777834): -1.234897156535

    test 6394 129 128.811912994521 Phi(tan=-1.24322, x=-0.62932, y=0.782384): -1.234897156535
    test 6395 129 128.905923156872 Beta(tan=-1.23905, x=-0.62932, y=0.77976): -1.234897156535
    test 6396 129 129.000000000000 Theta(tan=-1.2349, x=-0.62932, y=0.777146): -1.234897156535
    test 6397 129 128.952940722748 Mu(tan=-1.23697, x=-0.628682, y=0.777663), iteration=3: -1.234897156535
    test 6398 129 128.999872506784 Chi(tan=-1.2349, x=-1, y=1.2349), iteration=3: -1.234897156535
    test 6399 129 128.937279831606 Xi(tan=-1.23766, x=-1.26258, y=1.56265), iteration=3: -1.234897156535

    test 6400 132 131.808698047037 Phi(tan=-1.1181, x=-0.666646, y=0.745375): -1.110612514829
    test 6401 132 131.904331700939 Beta(tan=-1.11435, x=-0.667889, y=0.744261): -1.110612514829
    test 6402 132 132.000000000000 Theta(tan=-1.11061, x=-0.669131, y=0.743145): -1.110612514829
    test 6403 132 131.952155010788 Mu(tan=-1.11248, x=-0.66851, y=0.743703): -1.110612514829
    test 6404 132 131.999881417726 Chi(tan=-1.11062, x=-0.669129, y=0.743146): -1.110612514829
    test 6405 132 131.936226935289 Xi(tan=-1.1131, x=-0.668303, y=0.743889): -1.110612514829

    test 6406 132 131.808698047037 Phi(tan=-1.1181, x=-0.669131, y=0.748153): -1.110612514829
    test 6407 132 131.904331700939 Beta(tan=-1.11435, x=-0.669131, y=0.745645): -1.110612514829
    test 6408 132 132.000000000000 Theta(tan=-1.11061, x=-0.669131, y=0.743145): -1.110612514829
    test 6409 132 131.952155010788 Mu(tan=-1.11248, x=-0.66851, y=0.743703), iteration=3: -1.110612514829
    test 6410 132 131.999881417726 Chi(tan=-1.11062, x=-1, y=1.11062), iteration=3: -1.110612514829
    test 6411 132 131.936226935289 Xi(tan=-1.1131, x=-1.34261, y=1.49446), iteration=2: -1.110612514829

    test 6412 135 134.807576784018 Phi(tan=-1.00674, x=-0.704728, y=0.709478): -1.000000000000
    test 6413 135 134.903787849420 Beta(tan=-1.00336, x=-0.705918, y=0.708293): -1.000000000000
    test 6414 135 135.000000000000 Theta(tan=-1, x=-0.707107, y=0.707107): -1.000000000000
    test 6415 135 134.951893574286 Mu(tan=-1.00168, x=-0.706513, y=0.7077): -1.000000000000
    test 6416 135 134.999892003023 Chi(tan=-1, x=-0.707105, y=0.707108): -1.000000000000
    test 6417 135 134.935872656555 Xi(tan=-1.00224, x=-0.706315, y=0.707898): -1.000000000000

    test 6418 135 134.807576784018 Phi(tan=-1.00674, x=-0.707107, y=0.711872): -1.000000000000
    test 6419 135 134.903787849420 Beta(tan=-1.00336, x=-0.707107, y=0.709486): -1.000000000000
    test 6420 135 135.000000000000 Theta(tan=-1, x=-0.707107, y=0.707107): -1.000000000000
    test 6421 135 134.951893574286 Mu(tan=-1.00168, x=-0.706513, y=0.7077), iteration=2: -1.000000000000
    test 6422 135 134.999892003023 Chi(tan=-1, x=-1, y=1.0), iteration=3: -1.000000000000
    test 6423 135 134.935872656555 Xi(tan=-1.00224, x=-1.41897, y=1.42215), iteration=2: -1.000000000000

    test 6424 138 137.808563687131 Phi(tan=-0.906472, x=-0.740905, y=0.67161): -0.900404044298
    test 6425 138 137.904298110495 Beta(tan=-0.903433, x=-0.742026, y=0.670371): -0.900404044298
    test 6426 138 138.000000000000 Theta(tan=-0.900404, x=-0.743145, y=0.669131): -0.900404044298
    test 6427 138 137.952159209221 Mu(tan=-0.901917, x=-0.742586, y=0.669751): -0.900404044298
    test 6428 138 137.999903780991 Chi(tan=-0.900407, x=-0.743144, y=0.669132): -0.900404044298
    test 6429 138 137.936220974778 Xi(tan=-0.902422, x=-0.7424, y=0.669957): -0.900404044298

    test 6430 138 137.808563687131 Phi(tan=-0.906472, x=-0.743145, y=0.67364): -0.900404044298
    test 6431 138 137.904298110495 Beta(tan=-0.903433, x=-0.743145, y=0.671382): -0.900404044298
    test 6432 138 138.000000000000 Theta(tan=-0.900404, x=-0.743145, y=0.669131): -0.900404044298
    test 6433 138 137.952159209221 Mu(tan=-0.901917, x=-0.742586, y=0.669751), iteration=2: -0.900404044298
    test 6434 138 137.999903780991 Chi(tan=-0.900407, x=-1, y=0.900407), iteration=2: -0.900404044298
    test 6435 138 137.936220974778 Xi(tan=-0.902422, x=-1.49147, y=1.34593), iteration=2: -0.900404044298

    test 6436 141 140.811650146691 Phi(tan=-0.815242, x=-0.775073, y=0.631872): -0.809784033195
    test 6437 141 140.905857444036 Beta(tan=-0.812508, x=-0.776111, y=0.630596): -0.809784033195
    test 6438 141 141.000000000000 Theta(tan=-0.809784, x=-0.777146, y=0.62932): -0.809784033195
    test 6439 141 140.952948936146 Mu(tan=-0.811145, x=-0.776629, y=0.629958): -0.809784033195
    test 6440 141 140.999916255953 Chi(tan=-0.809786, x=-0.777145, y=0.629322): -0.809784033195
    test 6441 141 140.937268171108 Xi(tan=-0.811598, x=-0.776456, y=0.630171): -0.809784033195

    test 6442 141 140.811650146691 Phi(tan=-0.815242, x=-0.777146, y=0.633562): -0.809784033195
    test 6443 141 140.905857444036 Beta(tan=-0.812508, x=-0.777146, y=0.631437): -0.809784033195
    test 6444 141 141.000000000000 Theta(tan=-0.809784, x=-0.777146, y=0.62932): -0.809784033195
    test 6445 141 140.952948936146 Mu(tan=-0.811145, x=-0.776629, y=0.629958), iteration=3: -0.809784033195
    test 6446 141 140.999916255953 Chi(tan=-0.809786, x=-1, y=0.809786), iteration=3: -0.809784033195
    test 6447 141 140.937268171108 Xi(tan=-0.811598, x=-1.55989, y=1.266), iteration=2: -0.809784033195

    test 6448 144 143.816804459552 Phi(tan=-0.731439, x=-0.807133, y=0.590369): -0.726542528005
    test 6449 144 143.908449292751 Beta(tan=-0.728987, x=-0.808077, y=0.589077): -0.726542528005
    test 6450 144 144.000000000000 Theta(tan=-0.726543, x=-0.809017, y=0.587785): -0.726542528005
    test 6451 144 143.954254035868 Mu(tan=-0.727763, x=-0.808547, y=0.588431): -0.726542528005
    test 6452 144 143.999928939721 Chi(tan=-0.726544, x=-0.809016, y=0.587786): -0.726542528005
    test 6453 144 143.939002864963 Xi(tan=-0.72817, x=-0.808391, y=0.588646): -0.726542528005

    test 6454 144 143.816804459552 Phi(tan=-0.731439, x=-0.809017, y=0.591747): -0.726542528005
    test 6455 144 143.908449292751 Beta(tan=-0.728987, x=-0.809017, y=0.589763): -0.726542528005
    test 6456 144 144.000000000000 Theta(tan=-0.726543, x=-0.809017, y=0.587785): -0.726542528005
    test 6457 144 143.954254035868 Mu(tan=-0.727763, x=-0.808547, y=0.588431), iteration=3: -0.726542528005
    test 6458 144 143.999928939721 Chi(tan=-0.726544, x=-1, y=0.726544), iteration=3: -0.726542528005
    test 6459 144 143.939002864963 Xi(tan=-0.72817, x=-1.62404, y=1.18258), iteration=2: -0.726542528005

    test 6460 147 146.823972083650 Phi(tan=-0.653784, x=-0.836993, y=0.547213): -0.649407593198
    test 6461 147 146.912045740495 Beta(tan=-0.651592, x=-0.837834, y=0.545926): -0.649407593198
    test 6462 147 147.000000000000 Theta(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 6463 147 146.956060147954 Mu(tan=-0.650498, x=-0.838253, y=0.545282): -0.649407593198
    test 6464 147 146.999941372376 Chi(tan=-0.649409, x=-0.83867, y=0.54464): -0.649407593198
    test 6465 147 146.941406134703 Xi(tan=-0.650863, x=-0.838113, y=0.545496): -0.649407593198

    test 6466 147 146.823972083650 Phi(tan=-0.653784, x=-0.838671, y=0.54831): -0.649407593198
    test 6467 147 146.912045740495 Beta(tan=-0.651592, x=-0.838671, y=0.546471): -0.649407593198
    test 6468 147 147.000000000000 Theta(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 6469 147 146.956060147954 Mu(tan=-0.650498, x=-0.838253, y=0.545282), iteration=3: -0.649407593198
    test 6470 147 146.999941372376 Chi(tan=-0.649409, x=-1, y=0.649409), iteration=2: -0.649407593198
    test 6471 147 146.941406134703 Xi(tan=-0.650863, x=-1.68375, y=1.09589), iteration=3: -0.649407593198

    test 6472 150 149.833076150493 Phi(tan=-0.581241, x=-0.864565, y=0.502521): -0.577350269190
    test 6473 150 149.916607797021 Beta(tan=-0.579293, x=-0.865297, y=0.50126): -0.577350269190
    test 6474 150 150.000000000000 Theta(tan=-0.57735, x=-0.866025, y=0.5): -0.577350269190
    test 6475 150 149.958347430835 Mu(tan=-0.57832, x=-0.865662, y=0.500629): -0.577350269190
    test 6476 150 149.999953141447 Chi(tan=-0.577351, x=-0.866025, y=0.500001): -0.577350269190
    test 6477 150 149.944451721314 Xi(tan=-0.578644, x=-0.86554, y=0.500839): -0.577350269190

    test 6478 150 149.833076150493 Phi(tan=-0.581241, x=-0.866025, y=0.50337): -0.577350269190
    test 6479 150 149.916607797021 Beta(tan=-0.579293, x=-0.866025, y=0.501682): -0.577350269190
    test 6480 150 150.000000000000 Theta(tan=-0.57735, x=-0.866025, y=0.5): -0.577350269190
    test 6481 150 149.958347430835 Mu(tan=-0.57832, x=-0.865662, y=0.500629), iteration=3: -0.577350269190
    test 6482 150 149.999953141447 Chi(tan=-0.577351, x=-1, y=0.577351), iteration=3: -0.577350269190
    test 6483 150 149.944451721314 Xi(tan=-0.578644, x=-1.73885, y=1.00618), iteration=3: -0.577350269190

    test 6484 153 152.844018233783 Phi(tan=-0.512959, x=-0.889767, y=0.456414): -0.509525449494
    test 6485 153 152.922085806991 Beta(tan=-0.51124, x=-0.890388, y=0.455202): -0.509525449494
    test 6486 153 153.000000000000 Theta(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494
    test 6487 153 152.961090781647 Mu(tan=-0.510381, x=-0.890698, y=0.454595): -0.509525449494
    test 6488 153 152.999963898648 Chi(tan=-0.509526, x=-0.891006, y=0.453991): -0.509525449494
    test 6489 153 152.948106313042 Xi(tan=-0.510667, x=-0.890595, y=0.454797): -0.509525449494

    test 6490 153 152.844018233783 Phi(tan=-0.512959, x=-0.891007, y=0.45705): -0.509525449494
    test 6491 153 152.922085806991 Beta(tan=-0.51124, x=-0.891007, y=0.455518): -0.509525449494
    test 6492 153 153.000000000000 Theta(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494
    test 6493 153 152.961090781647 Mu(tan=-0.510381, x=-0.890698, y=0.454595), iteration=2: -0.509525449494
    test 6494 153 152.999963898648 Chi(tan=-0.509526, x=-1, y=0.509526), iteration=3: -0.509525449494
    test 6495 153 152.948106313042 Xi(tan=-0.510667, x=-1.78919, y=0.913679), iteration=3: -0.509525449494

    test 6496 156 155.856679369063 Phi(tan=-0.448229, x=-0.912525, y=0.409021): -0.445228685309
    test 6497 156 155.928419979560 Beta(tan=-0.446726, x=-0.913037, y=0.407878): -0.445228685309
    test 6498 156 156.000000000000 Theta(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309
    test 6499 156 155.964260113259 Mu(tan=-0.445976, x=-0.913292, y=0.407306): -0.445228685309
    test 6500 156 155.999973373435 Chi(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309
    test 6501 156 155.952329907972 Xi(tan=-0.446226, x=-0.913207, y=0.407497): -0.445228685309

    test 6502 156 155.856679369063 Phi(tan=-0.448229, x=-0.913545, y=0.409478): -0.445228685309
    test 6503 156 155.928419979560 Beta(tan=-0.446726, x=-0.913545, y=0.408105): -0.445228685309
    test 6504 156 156.000000000000 Theta(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309
    test 6505 156 155.964260113259 Mu(tan=-0.445976, x=-0.913292, y=0.407306), iteration=3: -0.445228685309
    test 6506 156 155.999973373435 Chi(tan=-0.445229, x=-1, y=0.445229), iteration=3: -0.445228685309
    test 6507 156 155.952329907972 Xi(tan=-0.446226, x=-1.83461, y=0.818652), iteration=3: -0.445228685309

    test 6508 159 158.870921315869 Phi(tan=-0.386451, x=-0.932771, y=0.36047): -0.383864035035
    test 6509 159 158.935541033395 Beta(tan=-0.385155, x=-0.933177, y=0.359418): -0.383864035035
    test 6510 159 159.000000000000 Theta(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035
    test 6511 159 158.967820685371 Mu(tan=-0.384509, x=-0.933379, y=0.358892): -0.383864035035
    test 6512 159 158.999981382804 Chi(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035
    test 6513 159 158.957076250691 Xi(tan=-0.384724, x=-0.933312, y=0.359067): -0.383864035035

    test 6514 159 158.870921315869 Phi(tan=-0.386451, x=-0.93358, y=0.360783): -0.383864035035
    test 6515 159 158.935541033395 Beta(tan=-0.385155, x=-0.93358, y=0.359574): -0.383864035035
    test 6516 159 159.000000000000 Theta(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035
    test 6517 159 158.967820685371 Mu(tan=-0.384509, x=-0.933379, y=0.358892), iteration=3: -0.383864035035
    test 6518 159 158.999981382804 Chi(tan=-0.383864, x=-1, y=0.383864), iteration=3: -0.383864035035
    test 6519 159 158.957076250691 Xi(tan=-0.384724, x=-1.875, y=0.721359), iteration=3: -0.383864035035

    test 6520 162 161.886588050489 Phi(tan=-0.327109, x=-0.950443, y=0.310899): -0.324919696233
    test 6521 162 161.943370950484 Beta(tan=-0.326013, x=-0.950751, y=0.309957): -0.324919696233
    test 6522 162 162.000000000000 Theta(tan=-0.32492, x=-0.951057, y=0.309017): -0.324919696233
    test 6523 162 161.971733485962 Mu(tan=-0.325465, x=-0.950904, y=0.309486): -0.324919696233
    test 6524 162 161.999987836903 Chi(tan=-0.32492, x=-0.951056, y=0.309017): -0.324919696233
    test 6525 162 161.962293338295 Xi(tan=-0.325647, x=-0.950853, y=0.309643): -0.324919696233

    test 6526 162 161.886588050489 Phi(tan=-0.327109, x=-0.951057, y=0.3111): -0.324919696233
    test 6527 162 161.943370950484 Beta(tan=-0.326013, x=-0.951057, y=0.310057): -0.324919696233
    test 6528 162 162.000000000000 Theta(tan=-0.32492, x=-0.951057, y=0.309017): -0.324919696233
    test 6529 162 161.971733485962 Mu(tan=-0.325465, x=-0.950904, y=0.309486), iteration=3: -0.324919696233
    test 6530 162 161.999987836903 Chi(tan=-0.32492, x=-1, y=0.32492), iteration=2: -0.324919696233
    test 6531 162 161.962293338295 Xi(tan=-0.325647, x=-1.91024, y=0.622066), iteration=3: -0.324919696233

    test 6532 165 164.903507474004 Phi(tan=-0.269755, x=-0.965489, y=0.260445): -0.267949192431
    test 6533 165 164.951823830757 Beta(tan=-0.268851, x=-0.965708, y=0.259631): -0.267949192431
    test 6534 165 165.000000000000 Theta(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431
    test 6535 165 164.975955658882 Mu(tan=-0.268399, x=-0.965817, y=0.259224): -0.267949192431
    test 6536 165 164.999992740222 Chi(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431
    test 6537 165 164.967923990246 Xi(tan=-0.268549, x=-0.965781, y=0.25936): -0.267949192431

    test 6538 165 164.903507474004 Phi(tan=-0.269755, x=-0.965926, y=0.260563): -0.267949192431
    test 6539 165 164.951823830757 Beta(tan=-0.268851, x=-0.965926, y=0.25969): -0.267949192431
    test 6540 165 165.000000000000 Theta(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431
    test 6541 165 164.975955658882 Mu(tan=-0.268399, x=-0.965817, y=0.259224), iteration=2: -0.267949192431
    test 6542 165 164.999992740222 Chi(tan=-0.267949, x=-1, y=0.267949), iteration=2: -0.267949192431
    test 6543 165 164.967923990246 Xi(tan=-0.268549, x=-1.94023, y=0.521049), iteration=2: -0.267949192431

    test 6544 168 167.921493317051 Phi(tan=-0.213989, x=-0.977862, y=0.209252): -0.212556561670
    test 6545 168 167.960806838131 Beta(tan=-0.213272, x=-0.978005, y=0.208581): -0.212556561670
    test 6546 168 168.000000000000 Theta(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 6547 168 167.980440972867 Mu(tan=-0.212913, x=-0.978077, y=0.208246): -0.212556561670
    test 6548 168 167.999996188328 Chi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 6549 168 167.973906475806 Xi(tan=-0.213033, x=-0.978053, y=0.208357): -0.212556561670

    test 6550 168 167.921493317051 Phi(tan=-0.213989, x=-0.978148, y=0.209313): -0.212556561670
    test 6551 168 167.960806838131 Beta(tan=-0.213272, x=-0.978148, y=0.208611): -0.212556561670
    test 6552 168 168.000000000000 Theta(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 6553 168 167.980440972867 Mu(tan=-0.212913, x=-0.978077, y=0.208246), iteration=3: -0.212556561670
    test 6554 168 167.999996188328 Chi(tan=-0.212557, x=-1, y=0.212557), iteration=3: -0.212556561670
    test 6555 168 167.973906475806 Xi(tan=-0.213033, x=-1.96489, y=0.418585), iteration=3: -0.212556561670

    test 6556 171 170.940347219637 Phi(tan=-0.159452, x=-0.987525, y=0.157463): -0.158384440325
    test 6557 171 170.970221227440 Beta(tan=-0.158917, x=-0.987607, y=0.156948): -0.158384440325
    test 6558 171 171.000000000000 Theta(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325
    test 6559 171 170.985140326866 Mu(tan=-0.15865, x=-0.987648, y=0.156691): -0.158384440325
    test 6560 171 170.999998360326 Chi(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325
    test 6561 171 170.980175192140 Xi(tan=-0.158739, x=-0.987634, y=0.156776): -0.158384440325

    test 6562 171 170.940347219637 Phi(tan=-0.159452, x=-0.987688, y=0.157489): -0.158384440325
    test 6563 171 170.970221227440 Beta(tan=-0.158917, x=-0.987688, y=0.156961): -0.158384440325
    test 6564 171 171.000000000000 Theta(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325
    test 6565 171 170.985140326866 Mu(tan=-0.15865, x=-0.987648, y=0.156691), iteration=3: -0.158384440325
    test 6566 171 170.999998360326 Chi(tan=-0.158384, x=-1, y=0.158384), iteration=3: -0.158384440325
    test 6567 171 170.980175192140 Xi(tan=-0.158739, x=-1.98414, y=0.31496), iteration=3: -0.158384440325

    test 6568 174 173.959860961536 Phi(tan=-0.105813, x=-0.994448, y=0.105225): -0.105104235266
    test 6569 174 173.979963440552 Beta(tan=-0.105458, x=-0.994485, y=0.104876): -0.105104235266
    test 6570 174 174.000000000000 Theta(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266
    test 6571 174 173.990002286194 Mu(tan=-0.105281, x=-0.994504, y=0.104702): -0.105104235266
    test 6572 174 173.999999507387 Chi(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266
    test 6573 174 173.986661385572 Xi(tan=-0.10534, x=-0.994498, y=0.10476): -0.105104235266

    test 6574 174 173.959860961536 Phi(tan=-0.105813, x=-0.994522, y=0.105233): -0.105104235266
    test 6575 174 173.979963440552 Beta(tan=-0.105458, x=-0.994522, y=0.10488): -0.105104235266
    test 6576 174 174.000000000000 Theta(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266
    test 6577 174 173.990002286194 Mu(tan=-0.105281, x=-0.994504, y=0.104702), iteration=3: -0.105104235266
    test 6578 174 173.999999507387 Chi(tan=-0.105104, x=-1, y=0.105104), iteration=3: -0.105104235266
    test 6579 174 173.986661385572 Xi(tan=-0.10534, x=-1.99793, y=0.210461), iteration=3: -0.105104235266

    test 6580 177 176.979818816318 Phi(tan=-0.052761, x=-0.998611, y=0.0526877): -0.052407779283
    test 6581 177 176.989926259040 Beta(tan=-0.0525841, x=-0.99862, y=0.0525115): -0.052407779283
    test 6582 177 177.000000000000 Theta(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283
    test 6583 177 176.994973643712 Mu(tan=-0.0524957, x=-0.998625, y=0.0524236): -0.052407779283
    test 6584 177 176.999999937910 Chi(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283
    test 6585 177 176.993293907994 Xi(tan=-0.0525251, x=-0.998623, y=0.0524528): -0.052407779283

    test 6586 177 176.979818816318 Phi(tan=-0.052761, x=-0.99863, y=0.0526887): -0.052407779283
    test 6587 177 176.989926259040 Beta(tan=-0.0525841, x=-0.99863, y=0.052512): -0.052407779283
    test 6588 177 177.000000000000 Theta(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283
    test 6589 177 176.994973643712 Mu(tan=-0.0524957, x=-0.998625, y=0.0524236), iteration=3: -0.052407779283
    test 6590 177 176.999999937910 Chi(tan=-0.0524078, x=-1, y=0.0524078), iteration=3: -0.052407779283
    test 6591 177 176.993293907994 Xi(tan=-0.0525251, x=-2.00621, y=0.105377), iteration=3: -0.052407779283

    test 6592 180 180.000000000000 Phi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 6593 180 180.000000000000 Beta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 6594 180 180.000000000000 Theta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 6595 180 180.000000000000 Mu(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 6596 180 180.000000000000 Chi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 6597 180 180.000000000000 Xi(tan=0.0, x=-1, y=0.0): 0.000000000000

    test 6598 180 180.000000000000 Phi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 6599 180 180.000000000000 Beta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 6600 180 180.000000000000 Theta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 6601 180 180.000000000000 Mu(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 6602 180 180.000000000000 Chi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 6603 180 180.000000000000 Xi(tan=0.0, x=-1, y=0.0): 0.000000000000

    test 6604 183 183.020181183682 Phi(tan=0.052761, x=-0.998611, y=-0.0526877): 0.052407779283
    test 6605 183 183.010073740960 Beta(tan=0.0525841, x=-0.99862, y=-0.0525115): 0.052407779283
    test 6606 183 183.000000000000 Theta(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283
    test 6607 183 183.005026356287 Mu(tan=0.0524957, x=-0.998625, y=-0.0524236): 0.052407779283
    test 6608 183 183.000000062090 Chi(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283
    test 6609 183 183.006706092006 Xi(tan=0.0525251, x=-0.998623, y=-0.0524528): 0.052407779283

    test 6610 183 183.020181183682 Phi(tan=0.052761, x=-0.99863, y=-0.0526887): 0.052407779283
    test 6611 183 183.010073740960 Beta(tan=0.0525841, x=-0.99863, y=-0.052512): 0.052407779283
    test 6612 183 183.000000000000 Theta(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283
    test 6613 183 183.005026356287 Mu(tan=0.0524957, x=-0.998625, y=-0.0524236), iteration=3: 0.052407779283
    test 6614 183 183.000000062090 Chi(tan=0.0524078, x=-1, y=-0.0524078), iteration=3: 0.052407779283
    test 6615 183 183.006706092006 Xi(tan=0.0525251, x=-2.00621, y=-0.105377), iteration=3: 0.052407779283

    test 6616 186 186.040139038464 Phi(tan=0.105813, x=-0.994448, y=-0.105225): 0.105104235266
    test 6617 186 186.020036559448 Beta(tan=0.105458, x=-0.994485, y=-0.104876): 0.105104235266
    test 6618 186 186.000000000000 Theta(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266
    test 6619 186 186.009997713806 Mu(tan=0.105281, x=-0.994504, y=-0.104702): 0.105104235266
    test 6620 186 186.000000492613 Chi(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266
    test 6621 186 186.013338614428 Xi(tan=0.10534, x=-0.994498, y=-0.10476): 0.105104235266

    test 6622 186 186.040139038464 Phi(tan=0.105813, x=-0.994522, y=-0.105233): 0.105104235266
    test 6623 186 186.020036559448 Beta(tan=0.105458, x=-0.994522, y=-0.10488): 0.105104235266
    test 6624 186 186.000000000000 Theta(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266
    test 6625 186 186.009997713806 Mu(tan=0.105281, x=-0.994504, y=-0.104702), iteration=3: 0.105104235266
    test 6626 186 186.000000492613 Chi(tan=0.105104, x=-1, y=-0.105104), iteration=3: 0.105104235266
    test 6627 186 186.013338614428 Xi(tan=0.10534, x=-1.99793, y=-0.210461), iteration=3: 0.105104235266

    test 6628 189 189.059652780363 Phi(tan=0.159452, x=-0.987525, y=-0.157463): 0.158384440325
    test 6629 189 189.029778772560 Beta(tan=0.158917, x=-0.987607, y=-0.156948): 0.158384440325
    test 6630 189 189.000000000000 Theta(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 6631 189 189.014859673134 Mu(tan=0.15865, x=-0.987648, y=-0.156691): 0.158384440325
    test 6632 189 189.000001639674 Chi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 6633 189 189.019824807860 Xi(tan=0.158739, x=-0.987634, y=-0.156776): 0.158384440325

    test 6634 189 189.059652780363 Phi(tan=0.159452, x=-0.987688, y=-0.157489): 0.158384440325
    test 6635 189 189.029778772560 Beta(tan=0.158917, x=-0.987688, y=-0.156961): 0.158384440325
    test 6636 189 189.000000000000 Theta(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 6637 189 189.014859673134 Mu(tan=0.15865, x=-0.987648, y=-0.156691), iteration=2: 0.158384440325
    test 6638 189 189.000001639674 Chi(tan=0.158384, x=-1, y=-0.158384), iteration=3: 0.158384440325
    test 6639 189 189.019824807860 Xi(tan=0.158739, x=-1.98414, y=-0.31496), iteration=3: 0.158384440325

    test 6640 192 192.078506682949 Phi(tan=0.213989, x=-0.977862, y=-0.209252): 0.212556561670
    test 6641 192 192.039193161869 Beta(tan=0.213272, x=-0.978005, y=-0.208581): 0.212556561670
    test 6642 192 192.000000000000 Theta(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670
    test 6643 192 192.019559027133 Mu(tan=0.212913, x=-0.978077, y=-0.208246): 0.212556561670
    test 6644 192 192.000003811672 Chi(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670
    test 6645 192 192.026093524194 Xi(tan=0.213033, x=-0.978053, y=-0.208357): 0.212556561670

    test 6646 192 192.078506682949 Phi(tan=0.213989, x=-0.978148, y=-0.209313): 0.212556561670
    test 6647 192 192.039193161869 Beta(tan=0.213272, x=-0.978148, y=-0.208611): 0.212556561670
    test 6648 192 192.000000000000 Theta(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670
    test 6649 192 192.019559027133 Mu(tan=0.212913, x=-0.978077, y=-0.208246), iteration=3: 0.212556561670
    test 6650 192 192.000003811672 Chi(tan=0.212557, x=-1, y=-0.212557), iteration=3: 0.212556561670
    test 6651 192 192.026093524194 Xi(tan=0.213033, x=-1.96489, y=-0.418585), iteration=3: 0.212556561670

    test 6652 195 195.096492525996 Phi(tan=0.269755, x=-0.965489, y=-0.260445): 0.267949192431
    test 6653 195 195.048176169243 Beta(tan=0.268851, x=-0.965708, y=-0.259631): 0.267949192431
    test 6654 195 195.000000000000 Theta(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431
    test 6655 195 195.024044341118 Mu(tan=0.268399, x=-0.965817, y=-0.259224): 0.267949192431
    test 6656 195 195.000007259778 Chi(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431
    test 6657 195 195.032076009754 Xi(tan=0.268549, x=-0.965781, y=-0.25936): 0.267949192431

    test 6658 195 195.096492525996 Phi(tan=0.269755, x=-0.965926, y=-0.260563): 0.267949192431
    test 6659 195 195.048176169243 Beta(tan=0.268851, x=-0.965926, y=-0.25969): 0.267949192431
    test 6660 195 195.000000000000 Theta(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431
    test 6661 195 195.024044341118 Mu(tan=0.268399, x=-0.965817, y=-0.259224), iteration=2: 0.267949192431
    test 6662 195 195.000007259778 Chi(tan=0.267949, x=-1, y=-0.267949), iteration=2: 0.267949192431
    test 6663 195 195.032076009754 Xi(tan=0.268549, x=-1.94023, y=-0.521049), iteration=2: 0.267949192431

    test 6664 198 198.113411949511 Phi(tan=0.327109, x=-0.950443, y=-0.310899): 0.324919696233
    test 6665 198 198.056629049516 Beta(tan=0.326013, x=-0.950751, y=-0.309957): 0.324919696233
    test 6666 198 198.000000000000 Theta(tan=0.32492, x=-0.951057, y=-0.309017): 0.324919696233
    test 6667 198 198.028266514038 Mu(tan=0.325465, x=-0.950904, y=-0.309486): 0.324919696233
    test 6668 198 198.000012163097 Chi(tan=0.32492, x=-0.951056, y=-0.309017): 0.324919696233
    test 6669 198 198.037706661705 Xi(tan=0.325647, x=-0.950853, y=-0.309643): 0.324919696233

    test 6670 198 198.113411949511 Phi(tan=0.327109, x=-0.951057, y=-0.3111): 0.324919696233
    test 6671 198 198.056629049516 Beta(tan=0.326013, x=-0.951057, y=-0.310057): 0.324919696233
    test 6672 198 198.000000000000 Theta(tan=0.32492, x=-0.951057, y=-0.309017): 0.324919696233
    test 6673 198 198.028266514038 Mu(tan=0.325465, x=-0.950904, y=-0.309486), iteration=3: 0.324919696233
    test 6674 198 198.000012163097 Chi(tan=0.32492, x=-1, y=-0.32492), iteration=3: 0.324919696233
    test 6675 198 198.037706661705 Xi(tan=0.325647, x=-1.91024, y=-0.622066), iteration=3: 0.324919696233

    test 6676 201 201.129078684131 Phi(tan=0.386451, x=-0.932771, y=-0.36047): 0.383864035035
    test 6677 201 201.064458966605 Beta(tan=0.385155, x=-0.933177, y=-0.359418): 0.383864035035
    test 6678 201 201.000000000000 Theta(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035
    test 6679 201 201.032179314629 Mu(tan=0.384509, x=-0.933379, y=-0.358892): 0.383864035035
    test 6680 201 201.000018617196 Chi(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035
    test 6681 201 201.042923749309 Xi(tan=0.384724, x=-0.933312, y=-0.359067): 0.383864035035

    test 6682 201 201.129078684131 Phi(tan=0.386451, x=-0.93358, y=-0.360783): 0.383864035035
    test 6683 201 201.064458966605 Beta(tan=0.385155, x=-0.93358, y=-0.359574): 0.383864035035
    test 6684 201 201.000000000000 Theta(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035
    test 6685 201 201.032179314629 Mu(tan=0.384509, x=-0.933379, y=-0.358892), iteration=3: 0.383864035035
    test 6686 201 201.000018617196 Chi(tan=0.383864, x=-1, y=-0.383864), iteration=3: 0.383864035035
    test 6687 201 201.042923749309 Xi(tan=0.384724, x=-1.875, y=-0.721359), iteration=3: 0.383864035035

    test 6688 204 204.143320630937 Phi(tan=0.448229, x=-0.912525, y=-0.409021): 0.445228685309
    test 6689 204 204.071580020440 Beta(tan=0.446726, x=-0.913037, y=-0.407878): 0.445228685309
    test 6690 204 204.000000000000 Theta(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309
    test 6691 204 204.035739886741 Mu(tan=0.445976, x=-0.913292, y=-0.407306): 0.445228685309
    test 6692 204 204.000026626565 Chi(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309
    test 6693 204 204.047670092028 Xi(tan=0.446226, x=-0.913207, y=-0.407497): 0.445228685309

    test 6694 204 204.143320630937 Phi(tan=0.448229, x=-0.913545, y=-0.409478): 0.445228685309
    test 6695 204 204.071580020440 Beta(tan=0.446726, x=-0.913545, y=-0.408105): 0.445228685309
    test 6696 204 204.000000000000 Theta(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309
    test 6697 204 204.035739886741 Mu(tan=0.445976, x=-0.913292, y=-0.407306), iteration=3: 0.445228685309
    test 6698 204 204.000026626565 Chi(tan=0.445229, x=-1, y=-0.445229), iteration=3: 0.445228685309
    test 6699 204 204.047670092028 Xi(tan=0.446226, x=-1.83461, y=-0.818652), iteration=3: 0.445228685309

    test 6700 207 207.155981766217 Phi(tan=0.512959, x=-0.889767, y=-0.456414): 0.509525449494
    test 6701 207 207.077914193009 Beta(tan=0.51124, x=-0.890388, y=-0.455202): 0.509525449494
    test 6702 207 207.000000000000 Theta(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494
    test 6703 207 207.038909218353 Mu(tan=0.510381, x=-0.890698, y=-0.454595): 0.509525449494
    test 6704 207 207.000036101352 Chi(tan=0.509526, x=-0.891006, y=-0.453991): 0.509525449494
    test 6705 207 207.051893686958 Xi(tan=0.510667, x=-0.890595, y=-0.454797): 0.509525449494

    test 6706 207 207.155981766217 Phi(tan=0.512959, x=-0.891007, y=-0.45705): 0.509525449494
    test 6707 207 207.077914193009 Beta(tan=0.51124, x=-0.891007, y=-0.455518): 0.509525449494
    test 6708 207 207.000000000000 Theta(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494
    test 6709 207 207.038909218353 Mu(tan=0.510381, x=-0.890698, y=-0.454595), iteration=2: 0.509525449494
    test 6710 207 207.000036101352 Chi(tan=0.509526, x=-1, y=-0.509526), iteration=3: 0.509525449494
    test 6711 207 207.051893686958 Xi(tan=0.510667, x=-1.78919, y=-0.913679), iteration=3: 0.509525449494

    test 6712 210 210.166923849507 Phi(tan=0.581241, x=-0.864565, y=-0.502521): 0.577350269190
    test 6713 210 210.083392202979 Beta(tan=0.579293, x=-0.865297, y=-0.50126): 0.577350269190
    test 6714 210 210.000000000000 Theta(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 6715 210 210.041652569165 Mu(tan=0.57832, x=-0.865662, y=-0.500629): 0.577350269190
    test 6716 210 210.000046858553 Chi(tan=0.577351, x=-0.866025, y=-0.500001): 0.577350269190
    test 6717 210 210.055548278686 Xi(tan=0.578644, x=-0.86554, y=-0.500839): 0.577350269190

    test 6718 210 210.166923849507 Phi(tan=0.581241, x=-0.866025, y=-0.50337): 0.577350269190
    test 6719 210 210.083392202979 Beta(tan=0.579293, x=-0.866025, y=-0.501682): 0.577350269190
    test 6720 210 210.000000000000 Theta(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 6721 210 210.041652569165 Mu(tan=0.57832, x=-0.865662, y=-0.500629), iteration=3: 0.577350269190
    test 6722 210 210.000046858553 Chi(tan=0.577351, x=-1, y=-0.577351), iteration=2: 0.577350269190
    test 6723 210 210.055548278686 Xi(tan=0.578644, x=-1.73885, y=-1.00618), iteration=3: 0.577350269190

    test 6724 213 213.176027916350 Phi(tan=0.653784, x=-0.836993, y=-0.547213): 0.649407593198
    test 6725 213 213.087954259505 Beta(tan=0.651592, x=-0.837834, y=-0.545926): 0.649407593198
    test 6726 213 213.000000000000 Theta(tan=0.649408, x=-0.838671, y=-0.544639): 0.649407593198
    test 6727 213 213.043939852046 Mu(tan=0.650498, x=-0.838253, y=-0.545282): 0.649407593198
    test 6728 213 213.000058627624 Chi(tan=0.649409, x=-0.83867, y=-0.54464): 0.649407593198
    test 6729 213 213.058593865297 Xi(tan=0.650863, x=-0.838113, y=-0.545496): 0.649407593198

    test 6730 213 213.176027916350 Phi(tan=0.653784, x=-0.838671, y=-0.54831): 0.649407593198
    test 6731 213 213.087954259505 Beta(tan=0.651592, x=-0.838671, y=-0.546471): 0.649407593198
    test 6732 213 213.000000000000 Theta(tan=0.649408, x=-0.838671, y=-0.544639): 0.649407593198
    test 6733 213 213.043939852046 Mu(tan=0.650498, x=-0.838253, y=-0.545282), iteration=3: 0.649407593198
    test 6734 213 213.000058627624 Chi(tan=0.649409, x=-1, y=-0.649409), iteration=2: 0.649407593198
    test 6735 213 213.058593865297 Xi(tan=0.650863, x=-1.68375, y=-1.09589), iteration=3: 0.649407593198

    test 6736 216 216.183195540448 Phi(tan=0.731439, x=-0.807133, y=-0.590369): 0.726542528005
    test 6737 216 216.091550707249 Beta(tan=0.728987, x=-0.808077, y=-0.589077): 0.726542528005
    test 6738 216 216.000000000000 Theta(tan=0.726543, x=-0.809017, y=-0.587785): 0.726542528005
    test 6739 216 216.045745964132 Mu(tan=0.727763, x=-0.808547, y=-0.588431): 0.726542528005
    test 6740 216 216.000071060279 Chi(tan=0.726544, x=-0.809016, y=-0.587786): 0.726542528005
    test 6741 216 216.060997135037 Xi(tan=0.72817, x=-0.808391, y=-0.588646): 0.726542528005

    test 6742 216 216.183195540448 Phi(tan=0.731439, x=-0.809017, y=-0.591747): 0.726542528005
    test 6743 216 216.091550707249 Beta(tan=0.728987, x=-0.809017, y=-0.589763): 0.726542528005
    test 6744 216 216.000000000000 Theta(tan=0.726543, x=-0.809017, y=-0.587785): 0.726542528005
    test 6745 216 216.045745964132 Mu(tan=0.727763, x=-0.808547, y=-0.588431), iteration=3: 0.726542528005
    test 6746 216 216.000071060279 Chi(tan=0.726544, x=-1, y=-0.726544), iteration=3: 0.726542528005
    test 6747 216 216.060997135037 Xi(tan=0.72817, x=-1.62404, y=-1.18258), iteration=2: 0.726542528005

    test 6748 219 219.188349853309 Phi(tan=0.815242, x=-0.775073, y=-0.631872): 0.809784033195
    test 6749 219 219.094142555964 Beta(tan=0.812508, x=-0.776111, y=-0.630596): 0.809784033195
    test 6750 219 219.000000000000 Theta(tan=0.809784, x=-0.777146, y=-0.62932): 0.809784033195
    test 6751 219 219.047051063854 Mu(tan=0.811145, x=-0.776629, y=-0.629958): 0.809784033195
    test 6752 219 219.000083744047 Chi(tan=0.809786, x=-0.777145, y=-0.629322): 0.809784033195
    test 6753 219 219.062731828892 Xi(tan=0.811598, x=-0.776456, y=-0.630171): 0.809784033195

    test 6754 219 219.188349853309 Phi(tan=0.815242, x=-0.777146, y=-0.633562): 0.809784033195
    test 6755 219 219.094142555964 Beta(tan=0.812508, x=-0.777146, y=-0.631437): 0.809784033195
    test 6756 219 219.000000000000 Theta(tan=0.809784, x=-0.777146, y=-0.62932): 0.809784033195
    test 6757 219 219.047051063854 Mu(tan=0.811145, x=-0.776629, y=-0.629958), iteration=3: 0.809784033195
    test 6758 219 219.000083744047 Chi(tan=0.809786, x=-1, y=-0.809786), iteration=3: 0.809784033195
    test 6759 219 219.062731828892 Xi(tan=0.811598, x=-1.55989, y=-1.266), iteration=2: 0.809784033195

    test 6760 222 222.191436312869 Phi(tan=0.906472, x=-0.740905, y=-0.67161): 0.900404044298
    test 6761 222 222.095701889505 Beta(tan=0.903433, x=-0.742026, y=-0.670371): 0.900404044298
    test 6762 222 222.000000000000 Theta(tan=0.900404, x=-0.743145, y=-0.669131): 0.900404044298
    test 6763 222 222.047840790779 Mu(tan=0.901917, x=-0.742586, y=-0.669751): 0.900404044298
    test 6764 222 222.000096219009 Chi(tan=0.900407, x=-0.743144, y=-0.669132): 0.900404044298
    test 6765 222 222.063779025222 Xi(tan=0.902422, x=-0.7424, y=-0.669957): 0.900404044298

    test 6766 222 222.191436312869 Phi(tan=0.906472, x=-0.743145, y=-0.67364): 0.900404044298
    test 6767 222 222.095701889505 Beta(tan=0.903433, x=-0.743145, y=-0.671382): 0.900404044298
    test 6768 222 222.000000000000 Theta(tan=0.900404, x=-0.743145, y=-0.669131): 0.900404044298
    test 6769 222 222.047840790779 Mu(tan=0.901917, x=-0.742586, y=-0.669751), iteration=2: 0.900404044298
    test 6770 222 222.000096219009 Chi(tan=0.900407, x=-1, y=-0.900407), iteration=2: 0.900404044298
    test 6771 222 222.063779025222 Xi(tan=0.902422, x=-1.49147, y=-1.34593), iteration=2: 0.900404044298

    test 6772 225 225.192423215982 Phi(tan=1.00674, x=-0.704728, y=-0.709478): 1.000000000000
    test 6773 225 225.096212150580 Beta(tan=1.00336, x=-0.705918, y=-0.708293): 1.000000000000
    test 6774 225 225.000000000000 Theta(tan=1.0, x=-0.707107, y=-0.707107): 1.000000000000
    test 6775 225 225.048106425714 Mu(tan=1.00168, x=-0.706513, y=-0.7077): 1.000000000000
    test 6776 225 225.000107996977 Chi(tan=1.0, x=-0.707105, y=-0.707108): 1.000000000000
    test 6777 225 225.064127343445 Xi(tan=1.00224, x=-0.706315, y=-0.707898): 1.000000000000

    test 6778 225 225.192423215982 Phi(tan=1.00674, x=-0.707107, y=-0.711872): 1.000000000000
    test 6779 225 225.096212150580 Beta(tan=1.00336, x=-0.707107, y=-0.709486): 1.000000000000
    test 6780 225 225.000000000000 Theta(tan=1.0, x=-0.707107, y=-0.707107): 1.000000000000
    test 6781 225 225.048106425714 Mu(tan=1.00168, x=-0.706513, y=-0.7077), iteration=2: 1.000000000000
    test 6782 225 225.000107996977 Chi(tan=1.0, x=-1, y=-1), iteration=2: 1.000000000000
    test 6783 225 225.064127343445 Xi(tan=1.00224, x=-1.41897, y=-1.42215), iteration=2: 1.000000000000

    test 6784 228 228.191301952963 Phi(tan=1.1181, x=-0.666646, y=-0.745375): 1.110612514829
    test 6785 228 228.095668299061 Beta(tan=1.11435, x=-0.667889, y=-0.744261): 1.110612514829
    test 6786 228 228.000000000000 Theta(tan=1.11061, x=-0.669131, y=-0.743145): 1.110612514829
    test 6787 228 228.047844989212 Mu(tan=1.11248, x=-0.66851, y=-0.743703): 1.110612514829
    test 6788 228 228.000118582274 Chi(tan=1.11062, x=-0.669129, y=-0.743146): 1.110612514829
    test 6789 228 228.063773064711 Xi(tan=1.1131, x=-0.668303, y=-0.743889): 1.110612514829

    test 6790 228 228.191301952963 Phi(tan=1.1181, x=-0.669131, y=-0.748153): 1.110612514829
    test 6791 228 228.095668299061 Beta(tan=1.11435, x=-0.669131, y=-0.745645): 1.110612514829
    test 6792 228 228.000000000000 Theta(tan=1.11061, x=-0.669131, y=-0.743145): 1.110612514829
    test 6793 228 228.047844989212 Mu(tan=1.11248, x=-0.66851, y=-0.743703), iteration=3: 1.110612514829
    test 6794 228 228.000118582274 Chi(tan=1.11062, x=-1, y=-1.11062), iteration=3: 1.110612514829
    test 6795 228 228.063773064711 Xi(tan=1.1131, x=-1.34261, y=-1.49446), iteration=2: 1.110612514829

    test 6796 231 231.188087005479 Phi(tan=1.24322, x=-0.626766, y=-0.779208): 1.234897156535
    test 6797 231 231.094076843128 Beta(tan=1.23905, x=-0.628044, y=-0.778178): 1.234897156535
    test 6798 231 231.000000000000 Theta(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 6799 231 231.047059277252 Mu(tan=1.23697, x=-0.628682, y=-0.777663): 1.234897156535
    test 6800 231 231.000127493216 Chi(tan=1.2349, x=-0.629319, y=-0.777147): 1.234897156535
    test 6801 231 231.062720168394 Xi(tan=1.23766, x=-0.628469, y=-0.777834): 1.234897156535

    test 6802 231 231.188087005479 Phi(tan=1.24322, x=-0.62932, y=-0.782384): 1.234897156535
    test 6803 231 231.094076843128 Beta(tan=1.23905, x=-0.62932, y=-0.77976): 1.234897156535
    test 6804 231 231.000000000000 Theta(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 6805 231 231.047059277252 Mu(tan=1.23697, x=-0.628682, y=-0.777663), iteration=3: 1.234897156535
    test 6806 231 231.000127493216 Chi(tan=1.2349, x=-1, y=-1.2349), iteration=3: 1.234897156535
    test 6807 231 231.062720168394 Xi(tan=1.23766, x=-1.26258, y=-1.56265), iteration=3: 1.234897156535

    test 6808 234 234.182815692055 Phi(tan=1.38566, x=-0.585201, y=-0.810888): 1.376381920471
    test 6809 234 234.091455743965 Beta(tan=1.38101, x=-0.586493, y=-0.809954): 1.376381920471
    test 6810 234 234.000000000000 Theta(tan=1.37638, x=-0.587785, y=-0.809017): 1.376381920471
    test 6811 234 234.045757833575 Mu(tan=1.3787, x=-0.587139, y=-0.809486): 1.376381920471
    test 6812 234 234.000134283342 Chi(tan=1.37639, x=-0.587783, y=-0.809018): 1.376381920471
    test 6813 234 234.060980284207 Xi(tan=1.37947, x=-0.586924, y=-0.809642): 1.376381920471

    test 6814 234 234.182815692055 Phi(tan=1.38566, x=-0.587785, y=-0.814469): 1.376381920471
    test 6815 234 234.091455743965 Beta(tan=1.38101, x=-0.587785, y=-0.811739): 1.376381920471
    test 6816 234 234.000000000000 Theta(tan=1.37638, x=-0.587785, y=-0.809017): 1.376381920471
    test 6817 234 234.045757833575 Mu(tan=1.3787, x=-0.587139, y=-0.809486), iteration=2: 1.376381920471
    test 6818 234 234.000134283342 Chi(tan=1.37639, x=-1, y=-1.37639), iteration=3: 1.376381920471
    test 6819 234 234.060980284207 Xi(tan=1.37947, x=-1.17912, y=-1.62655), iteration=2: 1.376381920471

    test 6820 237 237.175547668144 Phi(tan=1.55024, x=-0.542067, y=-0.840335): 1.539864963815
    test 6821 237 237.087834196097 Beta(tan=1.54505, x=-0.543353, y=-0.839505): 1.539864963815
    test 6822 237 237.000000000000 Theta(tan=1.53986, x=-0.544639, y=-0.838671): 1.539864963815
    test 6823 237 237.043954858840 Mu(tan=1.54245, x=-0.543995, y=-0.839088): 1.539864963815
    test 6824 237 237.000138561478 Chi(tan=1.53987, x=-0.544637, y=-0.838672): 1.539864963815
    test 6825 237 237.058572560645 Xi(tan=1.54332, x=-0.543781, y=-0.839227): 1.539864963815

    test 6826 237 237.175547668144 Phi(tan=1.55024, x=-0.544639, y=-0.844323): 1.539864963815
    test 6827 237 237.087834196097 Beta(tan=1.54505, x=-0.544639, y=-0.841492): 1.539864963815
    test 6828 237 237.000000000000 Theta(tan=1.53986, x=-0.544639, y=-0.838671): 1.539864963815
    test 6829 237 237.043954858840 Mu(tan=1.54245, x=-0.543995, y=-0.839088), iteration=3: 1.539864963815
    test 6830 237 237.000138561478 Chi(tan=1.53987, x=-1, y=-1.53987), iteration=2: 1.539864963815
    test 6831 237 237.058572560645 Xi(tan=1.54332, x=-1.09245, y=-1.68599), iteration=3: 1.539864963815

    test 6832 240 240.166364190171 Phi(tan=1.74372, x=-0.497483, y=-0.867474): 1.732050807569
    test 6833 240 240.083252286764 Beta(tan=1.73788, x=-0.498741, y=-0.866751): 1.732050807569
    test 6834 240 240.000000000000 Theta(tan=1.73205, x=-0.5, y=-0.866025): 1.732050807569
    test 6835 240 240.041670057501 Mu(tan=1.73496, x=-0.49937, y=-0.866389): 1.732050807569
    test 6836 240 240.000140009756 Chi(tan=1.73206, x=-0.499998, y=-0.866027): 1.732050807569
    test 6837 240 240.055523451376 Xi(tan=1.73593, x=-0.499161, y=-0.86651): 1.732050807569

    test 6838 240 240.166364190171 Phi(tan=1.74372, x=-0.5, y=-0.871862): 1.732050807569
    test 6839 240 240.083252286764 Beta(tan=1.73788, x=-0.5, y=-0.868939): 1.732050807569
    test 6840 240 240.000000000000 Theta(tan=1.73205, x=-0.5, y=-0.866025): 1.732050807569
    test 6841 240 240.041670057501 Mu(tan=1.73496, x=-0.49937, y=-0.866389), iteration=2: 1.732050807569
    test 6842 240 240.000140009756 Chi(tan=1.73206, x=-1, y=-1.73206), iteration=3: 1.732050807569
    test 6843 240 240.055523451376 Xi(tan=1.73593, x=-1.0028, y=-1.7408), iteration=3: 1.732050807569

    test 6844 243 243.155367155141 Phi(tan=1.97584, x=-0.451573, y=-0.892234): 1.962610505505
    test 6845 243 243.077760538972 Beta(tan=1.96921, x=-0.452781, y=-0.891622): 1.962610505505
    test 6846 243 243.000000000000 Theta(tan=1.96261, x=-0.45399, y=-0.891007): 1.962610505505
    test 6847 243 243.038928423958 Mu(tan=1.96591, x=-0.453385, y=-0.891315): 1.962610505505
    test 6848 243 243.000138398794 Chi(tan=1.96262, x=-0.453988, y=-0.891008): 1.962610505505
    test 6849 243 243.051866422105 Xi(tan=1.96701, x=-0.453184, y=-0.891417): 1.962610505505

    test 6850 243 243.155367155141 Phi(tan=1.97584, x=-0.45399, y=-0.897011): 1.962610505505
    test 6851 243 243.077760538972 Beta(tan=1.96921, x=-0.45399, y=-0.894004): 1.962610505505
    test 6852 243 243.000000000000 Theta(tan=1.96261, x=-0.45399, y=-0.891007): 1.962610505505
    test 6853 243 243.038928423958 Mu(tan=1.96591, x=-0.453385, y=-0.891315), iteration=2: 1.962610505505
    test 6854 243 243.000138398794 Chi(tan=1.96262, x=-1, y=-1.96262), iteration=3: 1.962610505505
    test 6855 243 243.051866422105 Xi(tan=1.96701, x=-0.910437, y=-1.79084), iteration=3: 1.962610505505

    test 6856 246 246.142677929298 Phi(tan=2.26117, x=-0.40446, y=-0.914555): 2.246036773904
    test 6857 246 246.071419343981 Beta(tan=2.25359, x=-0.405598, y=-0.914052): 2.246036773904
    test 6858 246 246.000000000000 Theta(tan=2.24604, x=-0.406737, y=-0.913545): 2.246036773904
    test 6859 246 246.035759970273 Mu(tan=2.24981, x=-0.406166, y=-0.913799): 2.246036773904
    test 6860 246 246.000133599388 Chi(tan=2.24605, x=-0.406735, y=-0.913546): 2.246036773904
    test 6861 246 246.047641581266 Xi(tan=2.25107, x=-0.405977, y=-0.913883): 2.246036773904

    test 6862 246 246.142677929298 Phi(tan=2.26117, x=-0.406737, y=-0.919702): 2.246036773904
    test 6863 246 246.071419343981 Beta(tan=2.25359, x=-0.406737, y=-0.916619): 2.246036773904
    test 6864 246 246.000000000000 Theta(tan=2.24604, x=-0.406737, y=-0.913545): 2.246036773904
    test 6865 246 246.035759970273 Mu(tan=2.24981, x=-0.406166, y=-0.913799), iteration=3: 2.246036773904
    test 6866 246 246.000133599388 Chi(tan=2.24605, x=-1, y=-2.24605), iteration=3: 2.246036773904
    test 6867 246 246.047641581266 Xi(tan=2.25107, x=-0.815599, y=-1.83597), iteration=2: 2.246036773904

    test 6868 249 249.128435980976 Phi(tan=2.62265, x=-0.356274, y=-0.934381): 2.605089064694
    test 6869 249 249.064298290053 Beta(tan=2.61385, x=-0.35732, y=-0.933982): 2.605089064694
    test 6870 249 249.000000000000 Theta(tan=2.60509, x=-0.358368, y=-0.93358): 2.605089064694
    test 6871 249 249.032199398354 Mu(tan=2.60947, x=-0.357843, y=-0.933782): 2.605089064694
    test 6872 249 249.000125590184 Chi(tan=2.60511, x=-0.358366, y=-0.933581): 2.605089064694
    test 6873 249 249.042895238706 Xi(tan=2.61093, x=-0.357669, y=-0.933848): 2.605089064694

    test 6874 249 249.128435980976 Phi(tan=2.62265, x=-0.358368, y=-0.939872): 2.605089064694
    test 6875 249 249.064298290053 Beta(tan=2.61385, x=-0.358368, y=-0.936721): 2.605089064694
    test 6876 249 249.000000000000 Theta(tan=2.60509, x=-0.358368, y=-0.93358): 2.605089064694
    test 6877 249 249.032199398354 Mu(tan=2.60947, x=-0.357843, y=-0.933782), iteration=3: 2.605089064694
    test 6878 249 249.000125590184 Chi(tan=2.60511, x=-1, y=-2.60511), iteration=3: 2.605089064694
    test 6879 249 249.042895238706 Xi(tan=2.61093, x=-0.71855, y=-1.87608), iteration=2: 2.605089064694

    test 6880 252 252.112797334151 Phi(tan=3.09843, x=-0.307144, y=-0.951663): 3.077683537175
    test 6881 252 252.056475395211 Beta(tan=3.08804, x=-0.308079, y=-0.951361): 3.077683537175
    test 6882 252 252.000000000000 Theta(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 6883 252 252.028285720189 Mu(tan=3.08286, x=-0.308547, y=-0.951209): 3.077683537175
    test 6884 252 252.000114461007 Chi(tan=3.0777, x=-0.309015, y=-0.951057): 3.077683537175
    test 6885 252 252.037679397301 Xi(tan=3.08458, x=-0.308391, y=-0.95126): 3.077683537175

    test 6886 252 252.112797334151 Phi(tan=3.09843, x=-0.309017, y=-0.957466): 3.077683537175
    test 6887 252 252.056475395211 Beta(tan=3.08804, x=-0.309017, y=-0.954256): 3.077683537175
    test 6888 252 252.000000000000 Theta(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 6889 252 252.028285720189 Mu(tan=3.08286, x=-0.308547, y=-0.951209), iteration=2: 3.077683537175
    test 6890 252 252.000114461007 Chi(tan=3.0777, x=-1, y=-3.0777), iteration=3: 3.077683537175
    test 6891 252 252.037679397301 Xi(tan=3.08458, x=-0.619552, y=-1.91106), iteration=3: 3.077683537175

    test 6892 255 255.095932860347 Phi(tan=3.7572, x=-0.257201, y=-0.966358): 3.732050807569
    test 6893 255 255.048036252634 Beta(tan=3.74461, x=-0.258009, y=-0.966142): 3.732050807569
    test 6894 255 255.000000000000 Theta(tan=3.73205, x=-0.258819, y=-0.965926): 3.732050807569
    test 6895 255 255.024061830258 Mu(tan=3.73833, x=-0.258413, y=-0.966034): 3.732050807569
    test 6896 255 255.000100411670 Chi(tan=3.73208, x=-0.258817, y=-0.965926): 3.732050807569
    test 6897 255 255.032051183104 Xi(tan=3.74042, x=-0.258279, y=-0.96607): 3.732050807569

    test 6898 255 255.095932860347 Phi(tan=3.7572, x=-0.258819, y=-0.972436): 3.732050807569
    test 6899 255 255.048036252634 Beta(tan=3.74461, x=-0.258819, y=-0.969175): 3.732050807569
    test 6900 255 255.000000000000 Theta(tan=3.73205, x=-0.258819, y=-0.965926): 3.732050807569
    test 6901 255 255.024061830258 Mu(tan=3.73833, x=-0.258413, y=-0.966034), iteration=3: 3.732050807569
    test 6902 255 255.000100411670 Chi(tan=3.73208, x=-1, y=-3.73208), iteration=3: 3.732050807569
    test 6903 255 255.032051183104 Xi(tan=3.74042, x=-0.518877, y=-1.94082), iteration=2: 3.732050807569

    test 6904 258 258.078026427494 Phi(tan=4.73634, x=-0.206579, y=-0.97843): 4.704630109478
    test 6905 258 258.039073098008 Beta(tan=4.72046, x=-0.207245, y=-0.978289): 4.704630109478
    test 6906 258 258.000000000000 Theta(tan=4.70463, x=-0.207912, y=-0.978148): 4.704630109478
    test 6907 258 258.019574034851 Mu(tan=4.71255, x=-0.207578, y=-0.978219): 4.704630109478
    test 6908 258 258.000083746317 Chi(tan=4.70466, x=-0.20791, y=-0.978148): 4.704630109478
    test 6909 258 258.026072220300 Xi(tan=4.71518, x=-0.207467, y=-0.978242): 4.704630109478

    test 6910 258 258.078026427494 Phi(tan=4.73634, x=-0.207912, y=-0.98474): 4.704630109478
    test 6911 258 258.039073098008 Beta(tan=4.72046, x=-0.207912, y=-0.981438): 4.704630109478
    test 6912 258 258.000000000000 Theta(tan=4.70463, x=-0.207912, y=-0.978148): 4.704630109478
    test 6913 258 258.019574034851 Mu(tan=4.71255, x=-0.207578, y=-0.978219), iteration=3: 4.704630109478
    test 6914 258 258.000083746317 Chi(tan=4.70466, x=-1, y=-4.70466), iteration=3: 4.704630109478
    test 6915 258 258.026072220300 Xi(tan=4.71518, x=-0.416796, y=-1.96527), iteration=3: 4.704630109478

    test 6916 261 261.059272925037 Phi(tan=6.3563, x=-0.155413, y=-0.98785): 6.313751514675
    test 6917 261 261.029683808843 Beta(tan=6.33499, x=-0.155923, y=-0.987769): 6.313751514675
    test 6918 261 261.000000000000 Theta(tan=6.31375, x=-0.156434, y=-0.987688): 6.313751514675
    test 6919 261 261.014871543461 Mu(tan=6.32438, x=-0.156178, y=-0.987729): 6.313751514675
    test 6920 261 261.000064863493 Chi(tan=6.3138, x=-0.156433, y=-0.987689): 6.313751514675
    test 6921 261 261.019807957756 Xi(tan=6.32791, x=-0.156093, y=-0.987742): 6.313751514675

    test 6922 261 261.059272925037 Phi(tan=6.3563, x=-0.156434, y=-0.994345): 6.313751514675
    test 6923 261 261.029683808843 Beta(tan=6.33499, x=-0.156434, y=-0.991011): 6.313751514675
    test 6924 261 261.000000000000 Theta(tan=6.31375, x=-0.156434, y=-0.987688): 6.313751514675
    test 6925 261 261.014871543461 Mu(tan=6.32438, x=-0.156178, y=-0.987729), iteration=2: 6.313751514675
    test 6926 261 261.000064863493 Chi(tan=6.3138, x=-1, y=-6.3138), iteration=3: 6.313751514675
    test 6927 261 261.019807957756 Xi(tan=6.32791, x=-0.313588, y=-1.98435), iteration=3: 6.313751514675

    test 6928 264 264.039876185217 Phi(tan=9.57849, x=-0.103836, y=-0.994594): 9.514364454223
    test 6929 264 264.019970846274 Beta(tan=9.54637, x=-0.104182, y=-0.994558): 9.514364454223
    test 6930 264 264.000000000000 Theta(tan=9.51436, x=-0.104528, y=-0.994522): 9.514364454223
    test 6931 264 264.010005927895 Mu(tan=9.53037, x=-0.104355, y=-0.99454): 9.514364454223
    test 6932 264 264.000044242373 Chi(tan=9.51444, x=-0.104528, y=-0.994522): 9.514364454223
    test 6933 264 264.013326954497 Xi(tan=9.5357, x=-0.104297, y=-0.994546): 9.514364454223

    test 6934 264 264.039876185217 Phi(tan=9.57849, x=-0.104528, y=-1.00122): 9.514364454223
    test 6935 264 264.019970846274 Beta(tan=9.54637, x=-0.104528, y=-0.997868): 9.514364454223
    test 6936 264 264.000000000000 Theta(tan=9.51436, x=-0.104528, y=-0.994522): 9.514364454223
    test 6937 264 264.010005927895 Mu(tan=9.53037, x=-0.104355, y=-0.99454), iteration=3: 9.514364454223
    test 6938 264 264.000044242373 Chi(tan=9.51444, x=-1, y=-9.51444), iteration=2: 9.514364454223
    test 6939 264 264.013326954497 Xi(tan=9.5357, x=-0.209531, y=-1.99802), iteration=3: 9.514364454223

    test 6940 267 267.020046820811 Phi(tan=19.2097, x=-0.0519865, y=-0.998648): 19.081136687728
    test 6941 267 267.010040150331 Beta(tan=19.1453, x=-0.052161, y=-0.998639): 19.081136687728
    test 6942 267 267.000000000000 Theta(tan=19.0811, x=-0.052336, y=-0.99863): 19.081136687728
    test 6943 267 267.005030555098 Mu(tan=19.1132, x=-0.0522483, y=-0.998634): 19.081136687728
    test 6944 267 267.000022425679 Chi(tan=19.0813, x=-0.0523356, y=-0.99863): 19.081136687728
    test 6945 267 267.006700131805 Xi(tan=19.1239, x=-0.0522192, y=-0.998636): 19.081136687728

    test 6946 267 267.020046820811 Phi(tan=19.2097, x=-0.052336, y=-1.00536): 19.081136687728
    test 6947 267 267.010040150331 Beta(tan=19.1453, x=-0.052336, y=-1.00199): 19.081136687728
    test 6948 267 267.000000000000 Theta(tan=19.0811, x=-0.052336, y=-0.99863): 19.081136687728
    test 6949 267 267.005030555098 Mu(tan=19.1132, x=-0.0522483, y=-0.998634), iteration=3: 19.081136687728
    test 6950 267 267.000022425679 Chi(tan=19.0813, x=-1, y=-19.0813), iteration=3: 19.081136687728
    test 6951 267 267.006700131805 Xi(tan=19.1239, x=-0.104907, y=-2.00624), iteration=3: 19.081136687728

    test 6952 270 270.000000000000 Phi(tan=-inf, x=0.0, y=-1): -inf
    test 6953 270 270.000000000000 Beta(tan=-inf, x=0.0, y=-1): -inf
    test 6954 270 270.000000000000 Theta(tan=-inf, x=0.0, y=-1): -inf
    test 6955 270 270.000000000000 Mu(tan=-inf, x=0.0, y=-1): -inf
    test 6956 270 270.000000000000 Chi(tan=-inf, x=0.0, y=-1): -inf
    test 6957 270 270.000000000000 Xi(tan=-inf, x=0.0, y=-1): -inf

    test 6958 270 270.000000000000 Phi(tan=-inf, x=0.0, y=-1): -inf
    test 6959 270 270.000000000000 Beta(tan=-inf, x=0.0, y=-1): -inf
    test 6960 270 270.000000000000 Theta(tan=-inf, x=0.0, y=-1): -inf
    test 6961 270 270.000000000000 Mu(tan=-inf, x=0.0, y=-1): -inf
    test 6962 270 270.000000000000 Chi(tan=-inf, x=0.0, y=-1): -inf
    test 6963 270 270.000000000000 Xi(tan=-inf, x=0.0, y=-1): -inf

    test 6964 273 272.979953179189 Phi(tan=-19.2097, x=0.0519865, y=-0.998648): -19.081136687728
    test 6965 273 272.989959849669 Beta(tan=-19.1453, x=0.052161, y=-0.998639): -19.081136687728
    test 6966 273 273.000000000000 Theta(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 6967 273 272.994969444902 Mu(tan=-19.1132, x=0.0522483, y=-0.998634): -19.081136687728
    test 6968 273 272.999977574321 Chi(tan=-19.0813, x=0.0523356, y=-0.99863): -19.081136687728
    test 6969 273 272.993299868195 Xi(tan=-19.1239, x=0.0522192, y=-0.998636): -19.081136687728

    test 6970 273 272.979953179189 Phi(tan=-19.2097, x=0.052336, y=-1.00536): -19.081136687728
    test 6971 273 272.989959849669 Beta(tan=-19.1453, x=0.052336, y=-1.00199): -19.081136687728
    test 6972 273 273.000000000000 Theta(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 6973 273 272.994969444902 Mu(tan=-19.1132, x=0.0522483, y=-0.998634), iteration=3: -19.081136687728
    test 6974 273 272.999977574321 Chi(tan=-19.0813, x=1.0, y=-19.0813), iteration=3: -19.081136687728
    test 6975 273 272.993299868195 Xi(tan=-19.1239, x=0.104907, y=-2.00624), iteration=3: -19.081136687728

    test 6976 276 275.960123814783 Phi(tan=-9.57849, x=0.103836, y=-0.994594): -9.514364454223
    test 6977 276 275.980029153726 Beta(tan=-9.54637, x=0.104182, y=-0.994558): -9.514364454223
    test 6978 276 276.000000000000 Theta(tan=-9.51436, x=0.104528, y=-0.994522): -9.514364454223
    test 6979 276 275.989994072105 Mu(tan=-9.53037, x=0.104355, y=-0.99454): -9.514364454223
    test 6980 276 275.999955757627 Chi(tan=-9.51444, x=0.104528, y=-0.994522): -9.514364454223
    test 6981 276 275.986673045503 Xi(tan=-9.5357, x=0.104297, y=-0.994546): -9.514364454223

    test 6982 276 275.960123814783 Phi(tan=-9.57849, x=0.104528, y=-1.00122): -9.514364454223
    test 6983 276 275.980029153726 Beta(tan=-9.54637, x=0.104528, y=-0.997868): -9.514364454223
    test 6984 276 276.000000000000 Theta(tan=-9.51436, x=0.104528, y=-0.994522): -9.514364454223
    test 6985 276 275.989994072105 Mu(tan=-9.53037, x=0.104355, y=-0.99454), iteration=3: -9.514364454223
    test 6986 276 275.999955757627 Chi(tan=-9.51444, x=1.0, y=-9.51444), iteration=2: -9.514364454223
    test 6987 276 275.986673045503 Xi(tan=-9.5357, x=0.209531, y=-1.99802), iteration=2: -9.514364454223

    test 6988 279 278.940727074963 Phi(tan=-6.3563, x=0.155413, y=-0.98785): -6.313751514675
    test 6989 279 278.970316191157 Beta(tan=-6.33499, x=0.155923, y=-0.987769): -6.313751514675
    test 6990 279 279.000000000000 Theta(tan=-6.31375, x=0.156434, y=-0.987688): -6.313751514675
    test 6991 279 278.985128456539 Mu(tan=-6.32438, x=0.156178, y=-0.987729): -6.313751514675
    test 6992 279 278.999935136507 Chi(tan=-6.3138, x=0.156433, y=-0.987689): -6.313751514675
    test 6993 279 278.980192042244 Xi(tan=-6.32791, x=0.156093, y=-0.987742): -6.313751514675

    test 6994 279 278.940727074963 Phi(tan=-6.3563, x=0.156434, y=-0.994345): -6.313751514675
    test 6995 279 278.970316191157 Beta(tan=-6.33499, x=0.156434, y=-0.991011): -6.313751514675
    test 6996 279 279.000000000000 Theta(tan=-6.31375, x=0.156434, y=-0.987688): -6.313751514675
    test 6997 279 278.985128456539 Mu(tan=-6.32438, x=0.156178, y=-0.987729), iteration=3: -6.313751514675
    test 6998 279 278.999935136507 Chi(tan=-6.3138, x=1.0, y=-6.3138), iteration=3: -6.313751514675
    test 6999 279 278.980192042244 Xi(tan=-6.32791, x=0.313588, y=-1.98435), iteration=2: -6.313751514675

    test 7000 282 281.921973572506 Phi(tan=-4.73634, x=0.206579, y=-0.97843): -4.704630109478
    test 7001 282 281.960926901992 Beta(tan=-4.72046, x=0.207245, y=-0.978289): -4.704630109478
    test 7002 282 282.000000000000 Theta(tan=-4.70463, x=0.207912, y=-0.978148): -4.704630109478
    test 7003 282 281.980425965149 Mu(tan=-4.71255, x=0.207578, y=-0.978219): -4.704630109478
    test 7004 282 281.999916253683 Chi(tan=-4.70466, x=0.20791, y=-0.978148): -4.704630109478
    test 7005 282 281.973927779700 Xi(tan=-4.71518, x=0.207467, y=-0.978242): -4.704630109478

    test 7006 282 281.921973572506 Phi(tan=-4.73634, x=0.207912, y=-0.98474): -4.704630109478
    test 7007 282 281.960926901992 Beta(tan=-4.72046, x=0.207912, y=-0.981438): -4.704630109478
    test 7008 282 282.000000000000 Theta(tan=-4.70463, x=0.207912, y=-0.978148): -4.704630109478
    test 7009 282 281.980425965149 Mu(tan=-4.71255, x=0.207578, y=-0.978219), iteration=3: -4.704630109478
    test 7010 282 281.999916253683 Chi(tan=-4.70466, x=1.0, y=-4.70466), iteration=3: -4.704630109478
    test 7011 282 281.973927779700 Xi(tan=-4.71518, x=0.416796, y=-1.96527), iteration=3: -4.704630109478

    test 7012 285 284.904067139653 Phi(tan=-3.7572, x=0.257201, y=-0.966358): -3.732050807569
    test 7013 285 284.951963747366 Beta(tan=-3.74461, x=0.258009, y=-0.966142): -3.732050807569
    test 7014 285 285.000000000000 Theta(tan=-3.73205, x=0.258819, y=-0.965926): -3.732050807569
    test 7015 285 284.975938169742 Mu(tan=-3.73833, x=0.258413, y=-0.966034): -3.732050807569
    test 7016 285 284.999899588330 Chi(tan=-3.73208, x=0.258817, y=-0.965926): -3.732050807569
    test 7017 285 284.967948816896 Xi(tan=-3.74042, x=0.258279, y=-0.96607): -3.732050807569

    test 7018 285 284.904067139653 Phi(tan=-3.7572, x=0.258819, y=-0.972436): -3.732050807569
    test 7019 285 284.951963747366 Beta(tan=-3.74461, x=0.258819, y=-0.969175): -3.732050807569
    test 7020 285 285.000000000000 Theta(tan=-3.73205, x=0.258819, y=-0.965926): -3.732050807569
    test 7021 285 284.975938169742 Mu(tan=-3.73833, x=0.258413, y=-0.966034), iteration=3: -3.732050807569
    test 7022 285 284.999899588330 Chi(tan=-3.73208, x=1.0, y=-3.73208), iteration=3: -3.732050807569
    test 7023 285 284.967948816896 Xi(tan=-3.74042, x=0.518877, y=-1.94082), iteration=2: -3.732050807569

    test 7024 288 287.887202665849 Phi(tan=-3.09843, x=0.307144, y=-0.951663): -3.077683537175
    test 7025 288 287.943524604789 Beta(tan=-3.08804, x=0.308079, y=-0.951361): -3.077683537175
    test 7026 288 288.000000000000 Theta(tan=-3.07768, x=0.309017, y=-0.951057): -3.077683537175
    test 7027 288 287.971714279811 Mu(tan=-3.08286, x=0.308547, y=-0.951209): -3.077683537175
    test 7028 288 287.999885538993 Chi(tan=-3.0777, x=0.309015, y=-0.951057): -3.077683537175
    test 7029 288 287.962320602699 Xi(tan=-3.08458, x=0.308391, y=-0.95126): -3.077683537175

    test 7030 288 287.887202665849 Phi(tan=-3.09843, x=0.309017, y=-0.957466): -3.077683537175
    test 7031 288 287.943524604789 Beta(tan=-3.08804, x=0.309017, y=-0.954256): -3.077683537175
    test 7032 288 288.000000000000 Theta(tan=-3.07768, x=0.309017, y=-0.951057): -3.077683537175
    test 7033 288 287.971714279811 Mu(tan=-3.08286, x=0.308547, y=-0.951209), iteration=3: -3.077683537175
    test 7034 288 287.999885538993 Chi(tan=-3.0777, x=1.0, y=-3.0777), iteration=3: -3.077683537175
    test 7035 288 287.962320602699 Xi(tan=-3.08458, x=0.619552, y=-1.91106), iteration=3: -3.077683537175

    test 7036 291 290.871564019024 Phi(tan=-2.62265, x=0.356274, y=-0.934381): -2.605089064694
    test 7037 291 290.935701709947 Beta(tan=-2.61385, x=0.35732, y=-0.933982): -2.605089064694
    test 7038 291 291.000000000000 Theta(tan=-2.60509, x=0.358368, y=-0.93358): -2.605089064694
    test 7039 291 290.967800601646 Mu(tan=-2.60947, x=0.357843, y=-0.933782): -2.605089064694
    test 7040 291 290.999874409816 Chi(tan=-2.60511, x=0.358366, y=-0.933581): -2.605089064694
    test 7041 291 290.957104761294 Xi(tan=-2.61093, x=0.357669, y=-0.933848): -2.605089064694

    test 7042 291 290.871564019024 Phi(tan=-2.62265, x=0.358368, y=-0.939872): -2.605089064694
    test 7043 291 290.935701709947 Beta(tan=-2.61385, x=0.358368, y=-0.936721): -2.605089064694
    test 7044 291 291.000000000000 Theta(tan=-2.60509, x=0.358368, y=-0.93358): -2.605089064694
    test 7045 291 290.967800601646 Mu(tan=-2.60947, x=0.357843, y=-0.933782), iteration=2: -2.605089064694
    test 7046 291 290.999874409816 Chi(tan=-2.60511, x=1.0, y=-2.60511), iteration=3: -2.605089064694
    test 7047 291 290.957104761294 Xi(tan=-2.61093, x=0.71855, y=-1.87608), iteration=3: -2.605089064694

    test 7048 294 293.857322070702 Phi(tan=-2.26117, x=0.40446, y=-0.914555): -2.246036773904
    test 7049 294 293.928580656019 Beta(tan=-2.25359, x=0.405598, y=-0.914052): -2.246036773904
    test 7050 294 294.000000000000 Theta(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 7051 294 293.964240029727 Mu(tan=-2.24981, x=0.406166, y=-0.913799): -2.246036773904
    test 7052 294 293.999866400612 Chi(tan=-2.24605, x=0.406735, y=-0.913546): -2.246036773904
    test 7053 294 293.952358418734 Xi(tan=-2.25107, x=0.405977, y=-0.913883): -2.246036773904

    test 7054 294 293.857322070702 Phi(tan=-2.26117, x=0.406737, y=-0.919702): -2.246036773904
    test 7055 294 293.928580656019 Beta(tan=-2.25359, x=0.406737, y=-0.916619): -2.246036773904
    test 7056 294 294.000000000000 Theta(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 7057 294 293.964240029727 Mu(tan=-2.24981, x=0.406166, y=-0.913799), iteration=3: -2.246036773904
    test 7058 294 293.999866400612 Chi(tan=-2.24605, x=1.0, y=-2.24605), iteration=3: -2.246036773904
    test 7059 294 293.952358418734 Xi(tan=-2.25107, x=0.815599, y=-1.83597), iteration=2: -2.246036773904

    test 7060 297 296.844632844859 Phi(tan=-1.97584, x=0.451573, y=-0.892234): -1.962610505505
    test 7061 297 296.922239461028 Beta(tan=-1.96921, x=0.452781, y=-0.891622): -1.962610505505
    test 7062 297 297.000000000000 Theta(tan=-1.96261, x=0.45399, y=-0.891007): -1.962610505505
    test 7063 297 296.961071576042 Mu(tan=-1.96591, x=0.453385, y=-0.891315): -1.962610505505
    test 7064 297 296.999861601206 Chi(tan=-1.96262, x=0.453988, y=-0.891008): -1.962610505505
    test 7065 297 296.948133577895 Xi(tan=-1.96701, x=0.453184, y=-0.891417): -1.962610505505

    test 7066 297 296.844632844859 Phi(tan=-1.97584, x=0.45399, y=-0.897011): -1.962610505505
    test 7067 297 296.922239461028 Beta(tan=-1.96921, x=0.45399, y=-0.894004): -1.962610505505
    test 7068 297 297.000000000000 Theta(tan=-1.96261, x=0.45399, y=-0.891007): -1.962610505505
    test 7069 297 296.961071576042 Mu(tan=-1.96591, x=0.453385, y=-0.891315), iteration=2: -1.962610505505
    test 7070 297 296.999861601206 Chi(tan=-1.96262, x=1.0, y=-1.96262), iteration=3: -1.962610505505
    test 7071 297 296.948133577895 Xi(tan=-1.96701, x=0.910437, y=-1.79084), iteration=3: -1.962610505505

    test 7072 300 299.833635809829 Phi(tan=-1.74372, x=0.497483, y=-0.867474): -1.732050807569
    test 7073 300 299.916747713236 Beta(tan=-1.73788, x=0.498741, y=-0.866751): -1.732050807569
    test 7074 300 300.000000000000 Theta(tan=-1.73205, x=0.5, y=-0.866025): -1.732050807569
    test 7075 300 299.958329942499 Mu(tan=-1.73496, x=0.49937, y=-0.866389): -1.732050807569
    test 7076 300 299.999859990244 Chi(tan=-1.73206, x=0.499998, y=-0.866027): -1.732050807569
    test 7077 300 299.944476548624 Xi(tan=-1.73593, x=0.499161, y=-0.86651): -1.732050807569

    test 7078 300 299.833635809829 Phi(tan=-1.74372, x=0.5, y=-0.871862): -1.732050807569
    test 7079 300 299.916747713236 Beta(tan=-1.73788, x=0.5, y=-0.868939): -1.732050807569
    test 7080 300 300.000000000000 Theta(tan=-1.73205, x=0.5, y=-0.866025): -1.732050807569
    test 7081 300 299.958329942499 Mu(tan=-1.73496, x=0.49937, y=-0.866389), iteration=3: -1.732050807569
    test 7082 300 299.999859990244 Chi(tan=-1.73206, x=1.0, y=-1.73206), iteration=3: -1.732050807569
    test 7083 300 299.944476548624 Xi(tan=-1.73593, x=1.0028, y=-1.7408), iteration=2: -1.732050807569

    test 7084 303 302.824452331856 Phi(tan=-1.55024, x=0.542067, y=-0.840335): -1.539864963815
    test 7085 303 302.912165803903 Beta(tan=-1.54505, x=0.543353, y=-0.839505): -1.539864963815
    test 7086 303 303.000000000000 Theta(tan=-1.53986, x=0.544639, y=-0.838671): -1.539864963815
    test 7087 303 302.956045141160 Mu(tan=-1.54245, x=0.543995, y=-0.839088): -1.539864963815
    test 7088 303 302.999861438522 Chi(tan=-1.53987, x=0.544637, y=-0.838672): -1.539864963815
    test 7089 303 302.941427439355 Xi(tan=-1.54332, x=0.543781, y=-0.839227): -1.539864963815

    test 7090 303 302.824452331856 Phi(tan=-1.55024, x=0.544639, y=-0.844323): -1.539864963815
    test 7091 303 302.912165803903 Beta(tan=-1.54505, x=0.544639, y=-0.841492): -1.539864963815
    test 7092 303 303.000000000000 Theta(tan=-1.53986, x=0.544639, y=-0.838671): -1.539864963815
    test 7093 303 302.956045141160 Mu(tan=-1.54245, x=0.543995, y=-0.839088), iteration=3: -1.539864963815
    test 7094 303 302.999861438522 Chi(tan=-1.53987, x=1.0, y=-1.53987), iteration=2: -1.539864963815
    test 7095 303 302.941427439355 Xi(tan=-1.54332, x=1.09245, y=-1.68599), iteration=3: -1.539864963815

    test 7096 306 305.817184307945 Phi(tan=-1.38566, x=0.585201, y=-0.810888): -1.376381920471
    test 7097 306 305.908544256035 Beta(tan=-1.38101, x=0.586493, y=-0.809954): -1.376381920471
    test 7098 306 306.000000000000 Theta(tan=-1.37638, x=0.587785, y=-0.809017): -1.376381920471
    test 7099 306 305.954242166425 Mu(tan=-1.3787, x=0.587139, y=-0.809486): -1.376381920471
    test 7100 306 305.999865716658 Chi(tan=-1.37639, x=0.587783, y=-0.809018): -1.376381920471
    test 7101 306 305.939019715793 Xi(tan=-1.37947, x=0.586924, y=-0.809642): -1.376381920471

    test 7102 306 305.817184307945 Phi(tan=-1.38566, x=0.587785, y=-0.814469): -1.376381920471
    test 7103 306 305.908544256035 Beta(tan=-1.38101, x=0.587785, y=-0.811739): -1.376381920471
    test 7104 306 306.000000000000 Theta(tan=-1.37638, x=0.587785, y=-0.809017): -1.376381920471
    test 7105 306 305.954242166425 Mu(tan=-1.3787, x=0.587139, y=-0.809486), iteration=2: -1.376381920471
    test 7106 306 305.999865716658 Chi(tan=-1.37639, x=1.0, y=-1.37639), iteration=3: -1.376381920471
    test 7107 306 305.939019715793 Xi(tan=-1.37947, x=1.17912, y=-1.62655), iteration=2: -1.376381920471

    test 7108 309 308.811912994521 Phi(tan=-1.24322, x=0.626766, y=-0.779208): -1.234897156535
    test 7109 309 308.905923156872 Beta(tan=-1.23905, x=0.628044, y=-0.778178): -1.234897156535
    test 7110 309 309.000000000000 Theta(tan=-1.2349, x=0.62932, y=-0.777146): -1.234897156535
    test 7111 309 308.952940722748 Mu(tan=-1.23697, x=0.628682, y=-0.777663): -1.234897156535
    test 7112 309 308.999872506784 Chi(tan=-1.2349, x=0.629319, y=-0.777147): -1.234897156535
    test 7113 309 308.937279831606 Xi(tan=-1.23766, x=0.628469, y=-0.777834): -1.234897156535

    test 7114 309 308.811912994521 Phi(tan=-1.24322, x=0.62932, y=-0.782384): -1.234897156535
    test 7115 309 308.905923156872 Beta(tan=-1.23905, x=0.62932, y=-0.77976): -1.234897156535
    test 7116 309 309.000000000000 Theta(tan=-1.2349, x=0.62932, y=-0.777146): -1.234897156535
    test 7117 309 308.952940722748 Mu(tan=-1.23697, x=0.628682, y=-0.777663), iteration=3: -1.234897156535
    test 7118 309 308.999872506784 Chi(tan=-1.2349, x=1.0, y=-1.2349), iteration=3: -1.234897156535
    test 7119 309 308.937279831606 Xi(tan=-1.23766, x=1.26258, y=-1.56265), iteration=3: -1.234897156535

    test 7120 312 311.808698047037 Phi(tan=-1.1181, x=0.666646, y=-0.745375): -1.110612514829
    test 7121 312 311.904331700939 Beta(tan=-1.11435, x=0.667889, y=-0.744261): -1.110612514829
    test 7122 312 312.000000000000 Theta(tan=-1.11061, x=0.669131, y=-0.743145): -1.110612514829
    test 7123 312 311.952155010788 Mu(tan=-1.11248, x=0.66851, y=-0.743703): -1.110612514829
    test 7124 312 311.999881417726 Chi(tan=-1.11062, x=0.669129, y=-0.743146): -1.110612514829
    test 7125 312 311.936226935289 Xi(tan=-1.1131, x=0.668303, y=-0.743889): -1.110612514829

    test 7126 312 311.808698047037 Phi(tan=-1.1181, x=0.669131, y=-0.748153): -1.110612514829
    test 7127 312 311.904331700939 Beta(tan=-1.11435, x=0.669131, y=-0.745645): -1.110612514829
    test 7128 312 312.000000000000 Theta(tan=-1.11061, x=0.669131, y=-0.743145): -1.110612514829
    test 7129 312 311.952155010788 Mu(tan=-1.11248, x=0.66851, y=-0.743703), iteration=3: -1.110612514829
    test 7130 312 311.999881417726 Chi(tan=-1.11062, x=1.0, y=-1.11062), iteration=3: -1.110612514829
    test 7131 312 311.936226935289 Xi(tan=-1.1131, x=1.34261, y=-1.49446), iteration=2: -1.110612514829

    test 7132 315 314.807576784018 Phi(tan=-1.00674, x=0.704728, y=-0.709478): -1.000000000000
    test 7133 315 314.903787849420 Beta(tan=-1.00336, x=0.705918, y=-0.708293): -1.000000000000
    test 7134 315 315.000000000000 Theta(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 7135 315 314.951893574286 Mu(tan=-1.00168, x=0.706513, y=-0.7077): -1.000000000000
    test 7136 315 314.999892003023 Chi(tan=-1, x=0.707105, y=-0.707108): -1.000000000000
    test 7137 315 314.935872656555 Xi(tan=-1.00224, x=0.706315, y=-0.707898): -1.000000000000

    test 7138 315 314.807576784018 Phi(tan=-1.00674, x=0.707107, y=-0.711872): -1.000000000000
    test 7139 315 314.903787849420 Beta(tan=-1.00336, x=0.707107, y=-0.709486): -1.000000000000
    test 7140 315 315.000000000000 Theta(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 7141 315 314.951893574286 Mu(tan=-1.00168, x=0.706513, y=-0.7077), iteration=2: -1.000000000000
    test 7142 315 314.999892003023 Chi(tan=-1, x=1.0, y=-1), iteration=3: -1.000000000000
    test 7143 315 314.935872656555 Xi(tan=-1.00224, x=1.41897, y=-1.42215), iteration=2: -1.000000000000

    test 7144 318 317.808563687131 Phi(tan=-0.906472, x=0.740905, y=-0.67161): -0.900404044298
    test 7145 318 317.904298110495 Beta(tan=-0.903433, x=0.742026, y=-0.670371): -0.900404044298
    test 7146 318 318.000000000000 Theta(tan=-0.900404, x=0.743145, y=-0.669131): -0.900404044298
    test 7147 318 317.952159209221 Mu(tan=-0.901917, x=0.742586, y=-0.669751): -0.900404044298
    test 7148 318 317.999903780991 Chi(tan=-0.900407, x=0.743144, y=-0.669132): -0.900404044298
    test 7149 318 317.936220974778 Xi(tan=-0.902422, x=0.7424, y=-0.669957): -0.900404044298

    test 7150 318 317.808563687131 Phi(tan=-0.906472, x=0.743145, y=-0.67364): -0.900404044298
    test 7151 318 317.904298110495 Beta(tan=-0.903433, x=0.743145, y=-0.671382): -0.900404044298
    test 7152 318 318.000000000000 Theta(tan=-0.900404, x=0.743145, y=-0.669131): -0.900404044298
    test 7153 318 317.952159209221 Mu(tan=-0.901917, x=0.742586, y=-0.669751), iteration=2: -0.900404044298
    test 7154 318 317.999903780991 Chi(tan=-0.900407, x=1.0, y=-0.900407), iteration=2: -0.900404044298
    test 7155 318 317.936220974778 Xi(tan=-0.902422, x=1.49147, y=-1.34593), iteration=2: -0.900404044298

    test 7156 321 320.811650146691 Phi(tan=-0.815242, x=0.775073, y=-0.631872): -0.809784033195
    test 7157 321 320.905857444036 Beta(tan=-0.812508, x=0.776111, y=-0.630596): -0.809784033195
    test 7158 321 321.000000000000 Theta(tan=-0.809784, x=0.777146, y=-0.62932): -0.809784033195
    test 7159 321 320.952948936146 Mu(tan=-0.811145, x=0.776629, y=-0.629958): -0.809784033195
    test 7160 321 320.999916255953 Chi(tan=-0.809786, x=0.777145, y=-0.629322): -0.809784033195
    test 7161 321 320.937268171108 Xi(tan=-0.811598, x=0.776456, y=-0.630171): -0.809784033195

    test 7162 321 320.811650146691 Phi(tan=-0.815242, x=0.777146, y=-0.633562): -0.809784033195
    test 7163 321 320.905857444036 Beta(tan=-0.812508, x=0.777146, y=-0.631437): -0.809784033195
    test 7164 321 321.000000000000 Theta(tan=-0.809784, x=0.777146, y=-0.62932): -0.809784033195
    test 7165 321 320.952948936146 Mu(tan=-0.811145, x=0.776629, y=-0.629958), iteration=3: -0.809784033195
    test 7166 321 320.999916255953 Chi(tan=-0.809786, x=1.0, y=-0.809786), iteration=3: -0.809784033195
    test 7167 321 320.937268171108 Xi(tan=-0.811598, x=1.55989, y=-1.266), iteration=2: -0.809784033195

    test 7168 324 323.816804459552 Phi(tan=-0.731439, x=0.807133, y=-0.590369): -0.726542528005
    test 7169 324 323.908449292751 Beta(tan=-0.728987, x=0.808077, y=-0.589077): -0.726542528005
    test 7170 324 324.000000000000 Theta(tan=-0.726543, x=0.809017, y=-0.587785): -0.726542528005
    test 7171 324 323.954254035868 Mu(tan=-0.727763, x=0.808547, y=-0.588431): -0.726542528005
    test 7172 324 323.999928939721 Chi(tan=-0.726544, x=0.809016, y=-0.587786): -0.726542528005
    test 7173 324 323.939002864963 Xi(tan=-0.72817, x=0.808391, y=-0.588646): -0.726542528005

    test 7174 324 323.816804459552 Phi(tan=-0.731439, x=0.809017, y=-0.591747): -0.726542528005
    test 7175 324 323.908449292751 Beta(tan=-0.728987, x=0.809017, y=-0.589763): -0.726542528005
    test 7176 324 324.000000000000 Theta(tan=-0.726543, x=0.809017, y=-0.587785): -0.726542528005
    test 7177 324 323.954254035868 Mu(tan=-0.727763, x=0.808547, y=-0.588431), iteration=3: -0.726542528005
    test 7178 324 323.999928939721 Chi(tan=-0.726544, x=1.0, y=-0.726544), iteration=3: -0.726542528005
    test 7179 324 323.939002864963 Xi(tan=-0.72817, x=1.62404, y=-1.18258), iteration=2: -0.726542528005

    test 7180 327 326.823972083650 Phi(tan=-0.653784, x=0.836993, y=-0.547213): -0.649407593198
    test 7181 327 326.912045740495 Beta(tan=-0.651592, x=0.837834, y=-0.545926): -0.649407593198
    test 7182 327 327.000000000000 Theta(tan=-0.649408, x=0.838671, y=-0.544639): -0.649407593198
    test 7183 327 326.956060147954 Mu(tan=-0.650498, x=0.838253, y=-0.545282): -0.649407593198
    test 7184 327 326.999941372376 Chi(tan=-0.649409, x=0.83867, y=-0.54464): -0.649407593198
    test 7185 327 326.941406134703 Xi(tan=-0.650863, x=0.838113, y=-0.545496): -0.649407593198

    test 7186 327 326.823972083650 Phi(tan=-0.653784, x=0.838671, y=-0.54831): -0.649407593198
    test 7187 327 326.912045740495 Beta(tan=-0.651592, x=0.838671, y=-0.546471): -0.649407593198
    test 7188 327 327.000000000000 Theta(tan=-0.649408, x=0.838671, y=-0.544639): -0.649407593198
    test 7189 327 326.956060147954 Mu(tan=-0.650498, x=0.838253, y=-0.545282), iteration=3: -0.649407593198
    test 7190 327 326.999941372376 Chi(tan=-0.649409, x=1.0, y=-0.649409), iteration=2: -0.649407593198
    test 7191 327 326.941406134703 Xi(tan=-0.650863, x=1.68375, y=-1.09589), iteration=3: -0.649407593198

    test 7192 330 329.833076150493 Phi(tan=-0.581241, x=0.864565, y=-0.502521): -0.577350269190
    test 7193 330 329.916607797021 Beta(tan=-0.579293, x=0.865297, y=-0.50126): -0.577350269190
    test 7194 330 330.000000000000 Theta(tan=-0.57735, x=0.866025, y=-0.5): -0.577350269190
    test 7195 330 329.958347430835 Mu(tan=-0.57832, x=0.865662, y=-0.500629): -0.577350269190
    test 7196 330 329.999953141447 Chi(tan=-0.577351, x=0.866025, y=-0.500001): -0.577350269190
    test 7197 330 329.944451721314 Xi(tan=-0.578644, x=0.86554, y=-0.500839): -0.577350269190

    test 7198 330 329.833076150493 Phi(tan=-0.581241, x=0.866025, y=-0.50337): -0.577350269190
    test 7199 330 329.916607797021 Beta(tan=-0.579293, x=0.866025, y=-0.501682): -0.577350269190
    test 7200 330 330.000000000000 Theta(tan=-0.57735, x=0.866025, y=-0.5): -0.577350269190
    test 7201 330 329.958347430835 Mu(tan=-0.57832, x=0.865662, y=-0.500629), iteration=3: -0.577350269190
    test 7202 330 329.999953141447 Chi(tan=-0.577351, x=1.0, y=-0.577351), iteration=3: -0.577350269190
    test 7203 330 329.944451721314 Xi(tan=-0.578644, x=1.73885, y=-1.00618), iteration=3: -0.577350269190

    test 7204 333 332.844018233783 Phi(tan=-0.512959, x=0.889767, y=-0.456414): -0.509525449494
    test 7205 333 332.922085806991 Beta(tan=-0.51124, x=0.890388, y=-0.455202): -0.509525449494
    test 7206 333 333.000000000000 Theta(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494
    test 7207 333 332.961090781647 Mu(tan=-0.510381, x=0.890698, y=-0.454595): -0.509525449494
    test 7208 333 332.999963898648 Chi(tan=-0.509526, x=0.891006, y=-0.453991): -0.509525449494
    test 7209 333 332.948106313042 Xi(tan=-0.510667, x=0.890595, y=-0.454797): -0.509525449494

    test 7210 333 332.844018233783 Phi(tan=-0.512959, x=0.891007, y=-0.45705): -0.509525449494
    test 7211 333 332.922085806991 Beta(tan=-0.51124, x=0.891007, y=-0.455518): -0.509525449494
    test 7212 333 333.000000000000 Theta(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494
    test 7213 333 332.961090781647 Mu(tan=-0.510381, x=0.890698, y=-0.454595), iteration=2: -0.509525449494
    test 7214 333 332.999963898648 Chi(tan=-0.509526, x=1.0, y=-0.509526), iteration=3: -0.509525449494
    test 7215 333 332.948106313042 Xi(tan=-0.510667, x=1.78919, y=-0.913679), iteration=3: -0.509525449494

    test 7216 336 335.856679369063 Phi(tan=-0.448229, x=0.912525, y=-0.409021): -0.445228685309
    test 7217 336 335.928419979560 Beta(tan=-0.446726, x=0.913037, y=-0.407878): -0.445228685309
    test 7218 336 336.000000000000 Theta(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 7219 336 335.964260113259 Mu(tan=-0.445976, x=0.913292, y=-0.407306): -0.445228685309
    test 7220 336 335.999973373434 Chi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 7221 336 335.952329907972 Xi(tan=-0.446226, x=0.913207, y=-0.407497): -0.445228685309

    test 7222 336 335.856679369063 Phi(tan=-0.448229, x=0.913545, y=-0.409478): -0.445228685309
    test 7223 336 335.928419979560 Beta(tan=-0.446726, x=0.913545, y=-0.408105): -0.445228685309
    test 7224 336 336.000000000000 Theta(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 7225 336 335.964260113259 Mu(tan=-0.445976, x=0.913292, y=-0.407306), iteration=3: -0.445228685309
    test 7226 336 335.999973373434 Chi(tan=-0.445229, x=1.0, y=-0.445229), iteration=3: -0.445228685309
    test 7227 336 335.952329907972 Xi(tan=-0.446226, x=1.83461, y=-0.818652), iteration=3: -0.445228685309

    test 7228 339 338.870921315869 Phi(tan=-0.386451, x=0.932771, y=-0.36047): -0.383864035035
    test 7229 339 338.935541033395 Beta(tan=-0.385155, x=0.933177, y=-0.359418): -0.383864035035
    test 7230 339 339.000000000000 Theta(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035
    test 7231 339 338.967820685371 Mu(tan=-0.384509, x=0.933379, y=-0.358892): -0.383864035035
    test 7232 339 338.999981382804 Chi(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035
    test 7233 339 338.957076250691 Xi(tan=-0.384724, x=0.933312, y=-0.359067): -0.383864035035

    test 7234 339 338.870921315869 Phi(tan=-0.386451, x=0.93358, y=-0.360783): -0.383864035035
    test 7235 339 338.935541033395 Beta(tan=-0.385155, x=0.93358, y=-0.359574): -0.383864035035
    test 7236 339 339.000000000000 Theta(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035
    test 7237 339 338.967820685371 Mu(tan=-0.384509, x=0.933379, y=-0.358892), iteration=3: -0.383864035035
    test 7238 339 338.999981382804 Chi(tan=-0.383864, x=1.0, y=-0.383864), iteration=3: -0.383864035035
    test 7239 339 338.957076250691 Xi(tan=-0.384724, x=1.875, y=-0.721359), iteration=3: -0.383864035035

    test 7240 342 341.886588050489 Phi(tan=-0.327109, x=0.950443, y=-0.310899): -0.324919696233
    test 7241 342 341.943370950484 Beta(tan=-0.326013, x=0.950751, y=-0.309957): -0.324919696233
    test 7242 342 342.000000000000 Theta(tan=-0.32492, x=0.951057, y=-0.309017): -0.324919696233
    test 7243 342 341.971733485962 Mu(tan=-0.325465, x=0.950904, y=-0.309486): -0.324919696233
    test 7244 342 341.999987836903 Chi(tan=-0.32492, x=0.951056, y=-0.309017): -0.324919696233
    test 7245 342 341.962293338295 Xi(tan=-0.325647, x=0.950853, y=-0.309643): -0.324919696233

    test 7246 342 341.886588050489 Phi(tan=-0.327109, x=0.951057, y=-0.3111): -0.324919696233
    test 7247 342 341.943370950484 Beta(tan=-0.326013, x=0.951057, y=-0.310057): -0.324919696233
    test 7248 342 342.000000000000 Theta(tan=-0.32492, x=0.951057, y=-0.309017): -0.324919696233
    test 7249 342 341.971733485962 Mu(tan=-0.325465, x=0.950904, y=-0.309486), iteration=3: -0.324919696233
    test 7250 342 341.999987836903 Chi(tan=-0.32492, x=1.0, y=-0.32492), iteration=2: -0.324919696233
    test 7251 342 341.962293338295 Xi(tan=-0.325647, x=1.91024, y=-0.622066), iteration=3: -0.324919696233

    test 7252 345 344.903507474004 Phi(tan=-0.269755, x=0.965489, y=-0.260445): -0.267949192431
    test 7253 345 344.951823830757 Beta(tan=-0.268851, x=0.965708, y=-0.259631): -0.267949192431
    test 7254 345 345.000000000000 Theta(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431
    test 7255 345 344.975955658882 Mu(tan=-0.268399, x=0.965817, y=-0.259224): -0.267949192431
    test 7256 345 344.999992740222 Chi(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431
    test 7257 345 344.967923990246 Xi(tan=-0.268549, x=0.965781, y=-0.25936): -0.267949192431

    test 7258 345 344.903507474004 Phi(tan=-0.269755, x=0.965926, y=-0.260563): -0.267949192431
    test 7259 345 344.951823830757 Beta(tan=-0.268851, x=0.965926, y=-0.25969): -0.267949192431
    test 7260 345 345.000000000000 Theta(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431
    test 7261 345 344.975955658882 Mu(tan=-0.268399, x=0.965817, y=-0.259224), iteration=2: -0.267949192431
    test 7262 345 344.999992740222 Chi(tan=-0.267949, x=1.0, y=-0.267949), iteration=2: -0.267949192431
    test 7263 345 344.967923990246 Xi(tan=-0.268549, x=1.94023, y=-0.521049), iteration=2: -0.267949192431

    test 7264 348 347.921493317051 Phi(tan=-0.213989, x=0.977862, y=-0.209252): -0.212556561670
    test 7265 348 347.960806838131 Beta(tan=-0.213272, x=0.978005, y=-0.208581): -0.212556561670
    test 7266 348 348.000000000000 Theta(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670
    test 7267 348 347.980440972867 Mu(tan=-0.212913, x=0.978077, y=-0.208246): -0.212556561670
    test 7268 348 347.999996188328 Chi(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670
    test 7269 348 347.973906475806 Xi(tan=-0.213033, x=0.978053, y=-0.208357): -0.212556561670

    test 7270 348 347.921493317051 Phi(tan=-0.213989, x=0.978148, y=-0.209313): -0.212556561670
    test 7271 348 347.960806838131 Beta(tan=-0.213272, x=0.978148, y=-0.208611): -0.212556561670
    test 7272 348 348.000000000000 Theta(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670
    test 7273 348 347.980440972867 Mu(tan=-0.212913, x=0.978077, y=-0.208246), iteration=3: -0.212556561670
    test 7274 348 347.999996188328 Chi(tan=-0.212557, x=1.0, y=-0.212557), iteration=3: -0.212556561670
    test 7275 348 347.973906475806 Xi(tan=-0.213033, x=1.96489, y=-0.418585), iteration=3: -0.212556561670

    test 7276 351 350.940347219637 Phi(tan=-0.159452, x=0.987525, y=-0.157463): -0.158384440325
    test 7277 351 350.970221227440 Beta(tan=-0.158917, x=0.987607, y=-0.156948): -0.158384440325
    test 7278 351 351.000000000000 Theta(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325
    test 7279 351 350.985140326866 Mu(tan=-0.15865, x=0.987648, y=-0.156691): -0.158384440325
    test 7280 351 350.999998360326 Chi(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325
    test 7281 351 350.980175192140 Xi(tan=-0.158739, x=0.987634, y=-0.156776): -0.158384440325

    test 7282 351 350.940347219637 Phi(tan=-0.159452, x=0.987688, y=-0.157489): -0.158384440325
    test 7283 351 350.970221227440 Beta(tan=-0.158917, x=0.987688, y=-0.156961): -0.158384440325
    test 7284 351 351.000000000000 Theta(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325
    test 7285 351 350.985140326866 Mu(tan=-0.15865, x=0.987648, y=-0.156691), iteration=3: -0.158384440325
    test 7286 351 350.999998360326 Chi(tan=-0.158384, x=1.0, y=-0.158384), iteration=3: -0.158384440325
    test 7287 351 350.980175192140 Xi(tan=-0.158739, x=1.98414, y=-0.31496), iteration=3: -0.158384440325

    test 7288 354 353.959860961536 Phi(tan=-0.105813, x=0.994448, y=-0.105225): -0.105104235266
    test 7289 354 353.979963440552 Beta(tan=-0.105458, x=0.994485, y=-0.104876): -0.105104235266
    test 7290 354 354.000000000000 Theta(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266
    test 7291 354 353.990002286194 Mu(tan=-0.105281, x=0.994504, y=-0.104702): -0.105104235266
    test 7292 354 353.999999507387 Chi(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266
    test 7293 354 353.986661385572 Xi(tan=-0.10534, x=0.994498, y=-0.10476): -0.105104235266

    test 7294 354 353.959860961536 Phi(tan=-0.105813, x=0.994522, y=-0.105233): -0.105104235266
    test 7295 354 353.979963440552 Beta(tan=-0.105458, x=0.994522, y=-0.10488): -0.105104235266
    test 7296 354 354.000000000000 Theta(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266
    test 7297 354 353.990002286194 Mu(tan=-0.105281, x=0.994504, y=-0.104702), iteration=3: -0.105104235266
    test 7298 354 353.999999507387 Chi(tan=-0.105104, x=1.0, y=-0.105104), iteration=3: -0.105104235266
    test 7299 354 353.986661385572 Xi(tan=-0.10534, x=1.99793, y=-0.210461), iteration=3: -0.105104235266

    test 7300 357 356.979818816318 Phi(tan=-0.052761, x=0.998611, y=-0.0526877): -0.052407779283
    test 7301 357 356.989926259040 Beta(tan=-0.0525841, x=0.99862, y=-0.0525115): -0.052407779283
    test 7302 357 357.000000000000 Theta(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 7303 357 356.994973643713 Mu(tan=-0.0524957, x=0.998625, y=-0.0524236): -0.052407779283
    test 7304 357 356.999999937910 Chi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 7305 357 356.993293907994 Xi(tan=-0.0525251, x=0.998623, y=-0.0524528): -0.052407779283

    test 7306 357 356.979818816318 Phi(tan=-0.052761, x=0.99863, y=-0.0526887): -0.052407779283
    test 7307 357 356.989926259040 Beta(tan=-0.0525841, x=0.99863, y=-0.052512): -0.052407779283
    test 7308 357 357.000000000000 Theta(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 7309 357 356.994973643713 Mu(tan=-0.0524957, x=0.998625, y=-0.0524236), iteration=3: -0.052407779283
    test 7310 357 356.999999937910 Chi(tan=-0.0524078, x=1.0, y=-0.0524078), iteration=3: -0.052407779283
    test 7311 357 356.993293907994 Xi(tan=-0.0525251, x=2.00621, y=-0.105377), iteration=3: -0.052407779283

    test 7312  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 7313  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 7314  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 7315  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 7316  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 7317  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 7318  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 7319  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 7320  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 7321  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 7322  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 7323  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 7324  3 3.013445148042 Phi(tan=0.0526431, x=0.998617, y=0.0525703): 0.052407779283
    test 7325  3 3.003360165488 Beta(tan=0.0524666, x=0.998626, y=0.0523945): 0.052407779283
    test 7326  3 2.993308810634 Theta(tan=0.0522907, x=0.998636, y=0.0522193): 0.052407779283
    test 7327  3 2.998323996974 Mu(tan=0.0523784, x=0.998631, y=0.0523067): 0.052407779283
    test 7328  3 2.993308872310 Chi(tan=0.0522907, x=0.998636, y=0.0522193): 0.052407779283
    test 7329  3 3.000000000000 Xi(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283

    test 7330  3 3.013445148042 Phi(tan=0.0526431, x=1.0, y=0.0526431): 0.052407779283
    test 7331  3 3.003360165488 Beta(tan=0.0524666, x=1.0, y=0.0524666): 0.052407779283
    test 7332  3 2.993308810634 Theta(tan=0.0522907, x=1.0, y=0.0522907): 0.052407779283
    test 7333  3 2.998323996974 Mu(tan=0.0523784, x=0.998631, y=0.0523067), iteration=3: 0.052407779283
    test 7334  3 2.993308872310 Chi(tan=0.0522907, x=1.0, y=0.0522907), iteration=3: 0.052407779283
    test 7335  3 3.000000000000 Xi(tan=0.0524078, x=0.99863, y=0.052336): 0.052407779283

    test 7336  6 6.026741855578 Phi(tan=0.105576, x=0.994473, y=0.104993): 0.105104235266
    test 7337  6 6.006683307191 Beta(tan=0.105222, x=0.99451, y=0.104644): 0.105104235266
    test 7338  6 5.986690540835 Theta(tan=0.104869, x=0.994546, y=0.104297): 0.105104235266
    test 7339  6 5.996666401006 Mu(tan=0.105045, x=0.994528, y=0.104471): 0.105104235266
    test 7340  6 5.986691030201 Chi(tan=0.104869, x=0.994546, y=0.104297): 0.105104235266
    test 7341  6 6.000000000000 Xi(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266

    test 7342  6 6.026741855578 Phi(tan=0.105576, x=1.0, y=0.105576): 0.105104235266
    test 7343  6 6.006683307191 Beta(tan=0.105222, x=1.0, y=0.105222): 0.105104235266
    test 7344  6 5.986690540835 Theta(tan=0.104869, x=1.0, y=0.104869): 0.105104235266
    test 7345  6 5.996666401006 Mu(tan=0.105045, x=0.994528, y=0.104471), iteration=3: 0.105104235266
    test 7346  6 5.986691030201 Chi(tan=0.104869, x=1.0, y=0.104869), iteration=2: 0.105104235266
    test 7347  6 6.000000000000 Xi(tan=0.105104, x=0.994522, y=0.104528): 0.105104235266

    test 7348  9 9.039743358381 Phi(tan=0.159096, x=0.98758, y=0.15712): 0.158384440325
    test 7349  9 9.009932816166 Beta(tan=0.158562, x=0.987661, y=0.156606): 0.158384440325
    test 7350  9 8.980217328283 Theta(tan=0.158031, x=0.987742, y=0.156093): 0.158384440325
    test 7351  9 8.995045415532 Mu(tan=0.158296, x=0.987702, y=0.156349): 0.158384440325
    test 7352  9 8.980218957347 Chi(tan=0.158031, x=0.987742, y=0.156093): 0.158384440325
    test 7353  9 9.000000000000 Xi(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325

    test 7354  9 9.039743358381 Phi(tan=0.159096, x=1.0, y=0.159096): 0.158384440325
    test 7355  9 9.009932816166 Beta(tan=0.158562, x=1.0, y=0.158562): 0.158384440325
    test 7356  9 8.980217328283 Theta(tan=0.158031, x=1.0, y=0.158031): 0.158384440325
    test 7357  9 8.995045415532 Mu(tan=0.158296, x=0.987702, y=0.156349), iteration=3: 0.158384440325
    test 7358  9 8.980218957347 Chi(tan=0.158031, x=1.0, y=0.158031), iteration=3: 0.158384440325
    test 7359  9 9.000000000000 Xi(tan=0.158384, x=0.987688, y=0.156434): 0.158384440325

    test 7360 12 12.052306224184 Phi(tan=0.213511, x=0.977957, y=0.208805): 0.212556561670
    test 7361 12 12.013072908209 Beta(tan=0.212795, x=0.9781, y=0.208135): 0.212556561670
    test 7362 12 11.973959754709 Theta(tan=0.212082, x=0.978242, y=0.207467): 0.212556561670
    test 7363 12 11.993478839061 Mu(tan=0.212438, x=0.978171, y=0.2078): 0.212556561670
    test 7364 12 11.973963542352 Chi(tan=0.212082, x=0.978242, y=0.207467): 0.212556561670
    test 7365 12 12.000000000000 Xi(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670

    test 7366 12 12.052306224184 Phi(tan=0.213511, x=1.0, y=0.213511): 0.212556561670
    test 7367 12 12.013072908209 Beta(tan=0.212795, x=1.0, y=0.212795): 0.212556561670
    test 7368 12 11.973959754709 Theta(tan=0.212082, x=1.0, y=0.212082): 0.212556561670
    test 7369 12 11.993478839061 Mu(tan=0.212438, x=0.978171, y=0.2078), iteration=3: 0.212556561670
    test 7370 12 11.973963542352 Chi(tan=0.212082, x=1.0, y=0.212082), iteration=3: 0.212556561670
    test 7371 12 12.000000000000 Xi(tan=0.212557, x=0.978148, y=0.207912): 0.212556561670

    test 7372 15 15.064291967519 Phi(tan=0.269152, x=0.965635, y=0.259903): 0.267949192431
    test 7373 15 15.016069023903 Beta(tan=0.26825, x=0.965853, y=0.25909): 0.267949192431
    test 7374 15 14.967986087430 Theta(tan=0.26735, x=0.96607, y=0.258279): 0.267949192431
    test 7375 15 14.991983868478 Mu(tan=0.267799, x=0.965962, y=0.258684): 0.267949192431
    test 7376 15 14.967993302979 Chi(tan=0.267351, x=0.96607, y=0.258279): 0.267949192431
    test 7377 15 15.000000000000 Xi(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431

    test 7378 15 15.064291967519 Phi(tan=0.269152, x=1.0, y=0.269152): 0.267949192431
    test 7379 15 15.016069023903 Beta(tan=0.26825, x=1.0, y=0.26825): 0.267949192431
    test 7380 15 14.967986087430 Theta(tan=0.26735, x=1.0, y=0.26735): 0.267949192431
    test 7381 15 14.991983868478 Mu(tan=0.267799, x=0.965962, y=0.258684), iteration=2: 0.267949192431
    test 7382 15 14.967993302979 Chi(tan=0.267351, x=1.0, y=0.267351), iteration=3: 0.267949192431
    test 7383 15 15.000000000000 Xi(tan=0.267949, x=0.965926, y=0.258819): 0.267949192431

    test 7384 18 18.075568604072 Phi(tan=0.326378, x=0.950648, y=0.310271): 0.324919696233
    test 7385 18 18.018888214106 Beta(tan=0.325284, x=0.950955, y=0.309331): 0.324919696233
    test 7386 18 17.962361544145 Theta(tan=0.324194, x=0.951259, y=0.308392): 0.324919696233
    test 7387 18 17.990576909174 Mu(tan=0.324738, x=0.951107, y=0.308861): 0.324919696233
    test 7388 18 17.962373636225 Chi(tan=0.324194, x=0.951259, y=0.308392): 0.324919696233
    test 7389 18 18.000000000000 Xi(tan=0.32492, x=0.951057, y=0.309017): 0.324919696233

    test 7390 18 18.075568604072 Phi(tan=0.326378, x=1.0, y=0.326378): 0.324919696233
    test 7391 18 18.018888214106 Beta(tan=0.325284, x=1.0, y=0.325284): 0.324919696233
    test 7392 18 17.962361544145 Theta(tan=0.324194, x=1.0, y=0.324194): 0.324919696233
    test 7393 18 17.990576909174 Mu(tan=0.324738, x=0.951107, y=0.308861), iteration=3: 0.324919696233
    test 7394 18 17.962373636225 Chi(tan=0.324194, x=1.0, y=0.324194), iteration=2: 0.324919696233
    test 7395 18 18.000000000000 Xi(tan=0.32492, x=0.951057, y=0.309017): 0.324919696233

    test 7396 21 21.086012125911 Phi(tan=0.385587, x=0.933041, y=0.359769): 0.383864035035
    test 7397 21 21.021499506340 Beta(tan=0.384295, x=0.933446, y=0.358718): 0.383864035035
    test 7398 21 20.957147588487 Theta(tan=0.383006, x=0.933848, y=0.35767): 0.383864035035
    test 7399 21 20.989273394164 Mu(tan=0.383649, x=0.933648, y=0.358193): 0.383864035035
    test 7400 21 20.957166102443 Chi(tan=0.383007, x=0.933848, y=0.35767): 0.383864035035
    test 7401 21 21.000000000000 Xi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035

    test 7402 21 21.086012125911 Phi(tan=0.385587, x=1.0, y=0.385587): 0.383864035035
    test 7403 21 21.021499506340 Beta(tan=0.384295, x=1.0, y=0.384295): 0.383864035035
    test 7404 21 20.957147588487 Theta(tan=0.383006, x=1.0, y=0.383006): 0.383864035035
    test 7405 21 20.989273394164 Mu(tan=0.383649, x=0.933648, y=0.358193), iteration=2: 0.383864035035
    test 7406 21 20.957166102443 Chi(tan=0.383007, x=1.0, y=0.383007), iteration=2: 0.383864035035
    test 7407 21 21.000000000000 Xi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035

    test 7408 24 24.095507880115 Phi(tan=0.447228, x=0.912866, y=0.408259): 0.445228685309
    test 7409 24 24.023874247822 Beta(tan=0.445728, x=0.913376, y=0.407117): 0.445228685309
    test 7410 24 23.952401263615 Theta(tan=0.444234, x=0.913883, y=0.405978): 0.445228685309
    test 7411 24 23.988087614209 Mu(tan=0.44498, x=0.91363, y=0.406547): 0.445228685309
    test 7412 24 23.952427751299 Chi(tan=0.444234, x=0.913883, y=0.405978): 0.445228685309
    test 7413 24 24.000000000000 Xi(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309

    test 7414 24 24.095507880115 Phi(tan=0.447228, x=1.0, y=0.447228): 0.445228685309
    test 7415 24 24.023874247822 Beta(tan=0.445728, x=1.0, y=0.445728): 0.445228685309
    test 7416 24 23.952401263615 Theta(tan=0.444234, x=1.0, y=0.444234): 0.445228685309
    test 7417 24 23.988087614209 Mu(tan=0.44498, x=0.91363, y=0.406547), iteration=2: 0.445228685309
    test 7418 24 23.952427751299 Chi(tan=0.444234, x=1.0, y=0.444234), iteration=3: 0.445228685309
    test 7419 24 24.000000000000 Xi(tan=0.445229, x=0.913545, y=0.406737): 0.445228685309

    test 7420 27 27.103951834859 Phi(tan=0.511813, x=0.890181, y=0.455606): 0.509525449494
    test 7421 27 27.025986421242 Beta(tan=0.510097, x=0.890801, y=0.454395): 0.509525449494
    test 7422 27 26.948174570835 Theta(tan=0.508387, x=0.891417, y=0.453184): 0.509525449494
    test 7423 27 26.987032560847 Mu(tan=0.50924, x=0.891109, y=0.453789): 0.509525449494
    test 7424 27 26.948210496967 Chi(tan=0.508387, x=0.891417, y=0.453185): 0.509525449494
    test 7425 27 27.000000000000 Xi(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494

    test 7426 27 27.103951834859 Phi(tan=0.511813, x=1.0, y=0.511813): 0.509525449494
    test 7427 27 27.025986421242 Beta(tan=0.510097, x=1.0, y=0.510097): 0.509525449494
    test 7428 27 26.948174570835 Theta(tan=0.508387, x=1.0, y=0.508387): 0.509525449494
    test 7429 27 26.987032560847 Mu(tan=0.50924, x=0.891109, y=0.453789), iteration=3: 0.509525449494
    test 7430 27 26.948210496967 Chi(tan=0.508387, x=1.0, y=0.508387), iteration=3: 0.509525449494
    test 7431 27 27.000000000000 Xi(tan=0.509525, x=0.891007, y=0.45399): 0.509525449494

    test 7432 30 30.111251718648 Phi(tan=0.579942, x=0.865053, y=0.501681): 0.577350269190
    test 7433 30 30.027812929728 Beta(tan=0.577998, x=0.865783, y=0.50042): 0.577350269190
    test 7434 30 29.944513899906 Theta(tan=0.57606, x=0.866509, y=0.499161): 0.577350269190
    test 7435 30 29.986119784065 Mu(tan=0.577027, x=0.866147, y=0.49979): 0.577350269190
    test 7436 30 29.944560549356 Chi(tan=0.576061, x=0.866509, y=0.499162): 0.577350269190
    test 7437 30 30.000000000000 Xi(tan=0.57735, x=0.866025, y=0.5): 0.577350269190

    test 7438 30 30.111251718648 Phi(tan=0.579942, x=1.0, y=0.579942): 0.577350269190
    test 7439 30 30.027812929728 Beta(tan=0.577998, x=1.0, y=0.577998): 0.577350269190
    test 7440 30 29.944513899906 Theta(tan=0.57606, x=1.0, y=0.57606): 0.577350269190
    test 7441 30 29.986119784065 Mu(tan=0.577027, x=0.866147, y=0.49979), iteration=3: 0.577350269190
    test 7442 30 29.944560549356 Chi(tan=0.576061, x=1.0, y=0.576061), iteration=3: 0.577350269190
    test 7443 30 30.000000000000 Xi(tan=0.57735, x=0.866025, y=0.5): 0.577350269190

    test 7444 33 33.117328020294 Phi(tan=0.652323, x=0.837554, y=0.546355): 0.649407593198
    test 7445 33 33.029333847894 Beta(tan=0.650136, x=0.838392, y=0.545068): 0.649407593198
    test 7446 33 32.941459517261 Theta(tan=0.647956, x=0.839227, y=0.543782): 0.649407593198
    test 7447 33 32.985359266176 Mu(tan=0.649044, x=0.83881, y=0.544425): 0.649407593198
    test 7448 33 32.941517907636 Chi(tan=0.647957, x=0.839226, y=0.543783): 0.649407593198
    test 7449 33 33.000000000000 Xi(tan=0.649408, x=0.838671, y=0.544639): 0.649407593198

    test 7450 33 33.117328020294 Phi(tan=0.652323, x=1.0, y=0.652323): 0.649407593198
    test 7451 33 33.029333847894 Beta(tan=0.650136, x=1.0, y=0.650136): 0.649407593198
    test 7452 33 32.941459517261 Theta(tan=0.647956, x=1.0, y=0.647956): 0.649407593198
    test 7453 33 32.985359266176 Mu(tan=0.649044, x=0.83881, y=0.544425), iteration=2: 0.649407593198
    test 7454 33 32.941517907636 Chi(tan=0.647957, x=1.0, y=0.647957), iteration=3: 0.649407593198
    test 7455 33 33.000000000000 Xi(tan=0.649408, x=0.838671, y=0.544639): 0.649407593198

    test 7456 36 36.122114839176 Phi(tan=0.729804, x=0.807762, y=0.589508): 0.726542528005
    test 7457 36 36.030532636313 Beta(tan=0.727357, x=0.808704, y=0.588216): 0.726542528005
    test 7458 36 35.939045117908 Theta(tan=0.724918, x=0.809642, y=0.586924): 0.726542528005
    test 7459 36 35.984759313255 Mu(tan=0.726136, x=0.809173, y=0.58757): 0.726542528005
    test 7460 36 35.939115921590 Chi(tan=0.72492, x=0.809641, y=0.586925): 0.726542528005
    test 7461 36 36.000000000000 Xi(tan=0.726543, x=0.809017, y=0.587785): 0.726542528005

    test 7462 36 36.122114839176 Phi(tan=0.729804, x=1.0, y=0.729804): 0.726542528005
    test 7463 36 36.030532636313 Beta(tan=0.727357, x=1.0, y=0.727357): 0.726542528005
    test 7464 36 35.939045117908 Theta(tan=0.724918, x=1.0, y=0.724918): 0.726542528005
    test 7465 36 35.984759313255 Mu(tan=0.726136, x=0.809173, y=0.58757), iteration=2: 0.726542528005
    test 7466 36 35.939115921590 Chi(tan=0.72492, x=1.0, y=0.72492), iteration=3: 0.726542528005
    test 7467 36 36.000000000000 Xi(tan=0.726543, x=0.809017, y=0.587785): 0.726542528005

    test 7468 39 39.125560577445 Phi(tan=0.813419, x=0.775765, y=0.631022): 0.809784033195
    test 7469 39 39.031396317244 Beta(tan=0.810692, x=0.776801, y=0.629746): 0.809784033195
    test 7470 39 38.937297446215 Theta(tan=0.807974, x=0.777834, y=0.62847): 0.809784033195
    test 7471 39 38.984326465296 Mu(tan=0.809331, x=0.777318, y=0.629108): 0.809784033195
    test 7472 39 38.937380925633 Chi(tan=0.807976, x=0.777833, y=0.628471): 0.809784033195
    test 7473 39 39.000000000000 Xi(tan=0.809784, x=0.777146, y=0.62932): 0.809784033195

    test 7474 39 39.125560577445 Phi(tan=0.813419, x=1.0, y=0.813419): 0.809784033195
    test 7475 39 39.031396317244 Beta(tan=0.810692, x=1.0, y=0.810692): 0.809784033195
    test 7476 39 38.937297446215 Theta(tan=0.807974, x=1.0, y=0.807974): 0.809784033195
    test 7477 39 38.984326465296 Mu(tan=0.809331, x=0.777318, y=0.629108), iteration=3: 0.809784033195
    test 7478 39 38.937380925633 Chi(tan=0.807976, x=1.0, y=0.807976), iteration=2: 0.809784033195
    test 7479 39 39.000000000000 Xi(tan=0.809784, x=0.777146, y=0.62932): 0.809784033195

    test 7480 42 42.127628467909 Phi(tan=0.904446, x=0.741652, y=0.670784): 0.900404044298
    test 7481 42 42.031915609918 Beta(tan=0.901413, x=0.742772, y=0.669544): 0.900404044298
    test 7482 42 41.936235990174 Theta(tan=0.898391, x=0.743889, y=0.668303): 0.900404044298
    test 7483 42 41.984065426020 Mu(tan=0.899901, x=0.743331, y=0.668924): 0.900404044298
    test 7484 42 41.936331949525 Chi(tan=0.898394, x=0.743888, y=0.668304): 0.900404044298
    test 7485 42 42.000000000000 Xi(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298

    test 7486 42 42.127628467909 Phi(tan=0.904446, x=1.0, y=0.904446): 0.900404044298
    test 7487 42 42.031915609918 Beta(tan=0.901413, x=1.0, y=0.901413): 0.900404044298
    test 7488 42 41.936235990174 Theta(tan=0.898391, x=1.0, y=0.898391): 0.900404044298
    test 7489 42 41.984065426020 Mu(tan=0.899901, x=0.743331, y=0.668924), iteration=2: 0.900404044298
    test 7490 42 41.936331949525 Chi(tan=0.898394, x=1.0, y=0.898394), iteration=3: 0.900404044298
    test 7491 42 42.000000000000 Xi(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298

    test 7492 45 45.128296933521 Phi(tan=1.00449, x=0.705522, y=0.708688): 1.000000000000
    test 7493 45 45.032085024228 Beta(tan=1.00112, x=0.706711, y=0.707503): 1.000000000000
    test 7494 45 44.935872753045 Theta(tan=0.997764, x=0.707898, y=0.706315): 1.000000000000
    test 7495 45 44.983979013031 Mu(tan=0.999441, x=0.707304, y=0.706909): 1.000000000000
    test 7496 45 44.935980508977 Chi(tan=0.997768, x=0.707896, y=0.706316): 1.000000000000
    test 7497 45 45.000000000000 Xi(tan=1.0, x=0.707107, y=0.707107): 1.000000000000

    test 7498 45 45.128296933521 Phi(tan=1.00449, x=1.0, y=1.00449): 1.000000000000
    test 7499 45 45.032085024228 Beta(tan=1.00112, x=1.0, y=1.00112): 1.000000000000
    test 7500 45 44.935872753045 Theta(tan=0.997764, x=1.0, y=0.997764): 1.000000000000
    test 7501 45 44.983979013031 Mu(tan=0.999441, x=0.707304, y=0.706909), iteration=2: 1.000000000000
    test 7502 45 44.935980508977 Chi(tan=0.997768, x=1.0, y=0.997768), iteration=3: 1.000000000000
    test 7503 45 45.000000000000 Xi(tan=1.0, x=0.707107, y=0.707107): 1.000000000000

    test 7504 48 48.127559776414 Phi(tan=1.1156, x=0.667474, y=0.744633): 1.110612514829
    test 7505 48 48.031902912136 Beta(tan=1.11186, x=0.668717, y=0.743517): 1.110612514829
    test 7506 48 47.936212105525 Theta(tan=1.10813, x=0.669958, y=0.742399): 1.110612514829
    test 7507 48 47.984068128807 Mu(tan=1.10999, x=0.669337, y=0.742959): 1.110612514829
    test 7508 48 47.936330478490 Chi(tan=1.10813, x=0.669956, y=0.742401): 1.110612514829
    test 7509 48 48.000000000000 Xi(tan=1.11061, x=0.669131, y=0.743145): 1.110612514829

    test 7510 48 48.127559776414 Phi(tan=1.1156, x=1.0, y=1.1156): 1.110612514829
    test 7511 48 48.031902912136 Beta(tan=1.11186, x=1.0, y=1.11186): 1.110612514829
    test 7512 48 47.936212105525 Theta(tan=1.10813, x=1.0, y=1.10813): 1.110612514829
    test 7513 48 47.984068128807 Mu(tan=1.10999, x=0.669337, y=0.742959), iteration=3: 1.110612514829
    test 7514 48 47.936330478490 Chi(tan=1.10813, x=1.0, y=1.10813), iteration=2: 1.110612514829
    test 7515 48 48.000000000000 Xi(tan=1.11061, x=0.669131, y=0.743145): 1.110612514829

    test 7516 51 51.125426196540 Phi(tan=1.24044, x=0.627618, y=0.778522): 1.234897156535
    test 7517 51 51.031371476626 Beta(tan=1.23628, x=0.628895, y=0.77749): 1.234897156535
    test 7518 51 50.937250720782 Theta(tan=1.23214, x=0.630171, y=0.776456): 1.234897156535
    test 7519 51 50.984331752747 Mu(tan=1.23421, x=0.629533, y=0.776974): 1.234897156535
    test 7520 51 50.937378047856 Chi(tan=1.23214, x=0.630169, y=0.776458): 1.234897156535
    test 7521 51 51.000000000000 Xi(tan=1.2349, x=0.62932, y=0.777146): 1.234897156535

    test 7522 51 51.125426196540 Phi(tan=1.24044, x=1.0, y=1.24044): 1.234897156535
    test 7523 51 51.031371476626 Beta(tan=1.23628, x=1.0, y=1.23628): 1.234897156535
    test 7524 51 50.937250720782 Theta(tan=1.23214, x=1.0, y=1.23214): 1.234897156535
    test 7525 51 50.984331752747 Mu(tan=1.23421, x=0.629533, y=0.776974), iteration=3: 1.234897156535
    test 7526 51 50.937378047856 Chi(tan=1.23214, x=1.0, y=1.23214), iteration=2: 1.234897156535
    test 7527 51 51.000000000000 Xi(tan=1.2349, x=0.62932, y=0.777146): 1.234897156535

    test 7528 54 54.121920641841 Phi(tan=1.38256, x=0.586062, y=0.810266): 1.376381920471
    test 7529 54 54.030496738498 Beta(tan=1.37792, x=0.587355, y=0.80933): 1.376381920471
    test 7530 54 53.938977593805 Theta(tan=1.3733, x=0.588647, y=0.808391): 1.376381920471
    test 7531 54 53.984766954283 Mu(tan=1.37561, x=0.588, y=0.808861): 1.376381920471
    test 7532 54 53.939111762844 Chi(tan=1.37331, x=0.588645, y=0.808392): 1.376381920471
    test 7533 54 54.000000000000 Xi(tan=1.37638, x=0.587785, y=0.809017): 1.376381920471

    test 7534 54 54.121920641841 Phi(tan=1.38256, x=1.0, y=1.38256): 1.376381920471
    test 7535 54 54.030496738498 Beta(tan=1.37792, x=1.0, y=1.37792): 1.376381920471
    test 7536 54 53.938977593805 Theta(tan=1.3733, x=1.0, y=1.3733): 1.376381920471
    test 7537 54 53.984766954283 Mu(tan=1.37561, x=0.588, y=0.808861), iteration=3: 1.376381920471
    test 7538 54 53.939111762844 Chi(tan=1.37331, x=1.0, y=1.37331), iteration=2: 1.376381920471
    test 7539 54 54.000000000000 Xi(tan=1.37638, x=0.587785, y=0.809017): 1.376381920471

    test 7540 57 57.117082493740 Phi(tan=1.54678, x=0.542924, y=0.839782): 1.539864963815
    test 7541 57 57.029288461770 Beta(tan=1.54159, x=0.54421, y=0.838949): 1.539864963815
    test 7542 57 56.941374145597 Theta(tan=1.53642, x=0.545497, y=0.838113): 1.539864963815
    test 7543 57 56.985368926835 Mu(tan=1.539, x=0.544853, y=0.838531): 1.539864963815
    test 7544 57 56.941512649681 Chi(tan=1.53643, x=0.545495, y=0.838114): 1.539864963815
    test 7545 57 57.000000000000 Xi(tan=1.53986, x=0.544639, y=0.838671): 1.539864963815

    test 7546 57 57.117082493740 Phi(tan=1.54678, x=1.0, y=1.54678): 1.539864963815
    test 7547 57 57.029288461770 Beta(tan=1.54159, x=1.0, y=1.54159): 1.539864963815
    test 7548 57 56.941374145597 Theta(tan=1.53642, x=1.0, y=1.53642): 1.539864963815
    test 7549 57 56.985368926835 Mu(tan=1.539, x=0.544853, y=0.838531), iteration=3: 1.539864963815
    test 7550 57 56.941512649681 Chi(tan=1.53643, x=1.0, y=1.53643), iteration=2: 1.539864963815
    test 7551 57 57.000000000000 Xi(tan=1.53986, x=0.544639, y=0.838671): 1.539864963815

    test 7552 60 60.110965593414 Phi(tan=1.73982, x=0.498322, y=0.866992): 1.732050807569
    test 7553 60 60.027760038868 Beta(tan=1.73399, x=0.49958, y=0.866268): 1.732050807569
    test 7554 60 59.944414411815 Theta(tan=1.72818, x=0.50084, y=0.86554): 1.732050807569
    test 7555 60 59.986131042139 Mu(tan=1.73108, x=0.50021, y=0.865904): 1.732050807569
    test 7556 60 59.944554421991 Chi(tan=1.72819, x=0.500838, y=0.865541): 1.732050807569
    test 7557 60 60.000000000000 Xi(tan=1.73205, x=0.5, y=0.866025): 1.732050807569

    test 7558 60 60.110965593414 Phi(tan=1.73982, x=1.0, y=1.73982): 1.732050807569
    test 7559 60 60.027760038868 Beta(tan=1.73399, x=1.0, y=1.73399): 1.732050807569
    test 7560 60 59.944414411815 Theta(tan=1.72818, x=1.0, y=1.72818): 1.732050807569
    test 7561 60 59.986131042139 Mu(tan=1.73108, x=0.50021, y=0.865904), iteration=2: 1.732050807569
    test 7562 60 59.944554421991 Chi(tan=1.72819, x=1.0, y=1.72819), iteration=3: 1.732050807569
    test 7563 60 60.000000000000 Xi(tan=1.73205, x=0.5, y=0.866025): 1.732050807569

    test 7564 63 63.103637615859 Phi(tan=1.97142, x=0.452378, y=0.891826): 1.962610505505
    test 7565 63 63.025928337212 Beta(tan=1.96481, x=0.453587, y=0.891212): 1.962610505505
    test 7566 63 62.948065314408 Theta(tan=1.95822, x=0.454798, y=0.890595): 1.962610505505
    test 7567 63 62.987044924306 Mu(tan=1.96151, x=0.454192, y=0.890904): 1.962610505505
    test 7568 63 62.948203767989 Chi(tan=1.95823, x=0.454796, y=0.890596): 1.962610505505
    test 7569 63 63.000000000000 Xi(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505

    test 7570 63 63.103637615859 Phi(tan=1.97142, x=1.0, y=1.97142): 1.962610505505
    test 7571 63 63.025928337212 Beta(tan=1.96481, x=1.0, y=1.96481): 1.962610505505
    test 7572 63 62.948065314408 Theta(tan=1.95822, x=1.0, y=1.95822): 1.962610505505
    test 7573 63 62.987044924306 Mu(tan=1.96151, x=0.454192, y=0.890904), iteration=2: 1.962610505505
    test 7574 63 62.948203767989 Chi(tan=1.95823, x=1.0, y=1.95823), iteration=3: 1.962610505505
    test 7575 63 63.000000000000 Xi(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505

    test 7576 66 66.095179300139 Phi(tan=2.25612, x=0.405219, y=0.91422): 2.246036773904
    test 7577 66 66.023813509162 Beta(tan=2.24855, x=0.406357, y=0.913714): 2.246036773904
    test 7578 66 65.952287013872 Theta(tan=2.24101, x=0.407497, y=0.913206): 2.246036773904
    test 7579 66 65.988100542712 Mu(tan=2.24478, x=0.406926, y=0.913461): 2.246036773904
    test 7580 66 65.952420714799 Chi(tan=2.24103, x=0.407495, y=0.913207): 2.246036773904
    test 7581 66 66.000000000000 Xi(tan=2.24604, x=0.406737, y=0.913545): 2.246036773904

    test 7582 66 66.095179300139 Phi(tan=2.25612, x=1.0, y=2.25612): 2.246036773904
    test 7583 66 66.023813509162 Beta(tan=2.24855, x=1.0, y=2.24855): 2.246036773904
    test 7584 66 65.952287013872 Theta(tan=2.24101, x=1.0, y=2.24101): 2.246036773904
    test 7585 66 65.988100542712 Mu(tan=2.24478, x=0.406926, y=0.913461), iteration=3: 2.246036773904
    test 7586 66 65.952420714799 Chi(tan=2.24103, x=1.0, y=2.24103), iteration=3: 2.246036773904
    test 7587 66 66.000000000000 Xi(tan=2.24604, x=0.406737, y=0.913545): 2.246036773904

    test 7588 69 69.085683545448 Phi(tan=2.61678, x=0.356971, y=0.934115): 2.605089064694
    test 7589 69 69.021438767616 Beta(tan=2.60801, x=0.358019, y=0.933714): 2.605089064694
    test 7590 69 68.957033338687 Theta(tan=2.59926, x=0.359068, y=0.933311): 2.605089064694
    test 7591 69 68.989286322673 Mu(tan=2.60363, x=0.358543, y=0.933513): 2.605089064694
    test 7592 69 68.957159065949 Chi(tan=2.59928, x=0.359066, y=0.933312): 2.605089064694
    test 7593 69 69.000000000000 Xi(tan=2.60509, x=0.358368, y=0.93358): 2.605089064694

    test 7594 69 69.085683545448 Phi(tan=2.61678, x=1.0, y=2.61678): 2.605089064694
    test 7595 69 69.021438767616 Beta(tan=2.60801, x=1.0, y=2.60801): 2.605089064694
    test 7596 69 68.957033338687 Theta(tan=2.59926, x=1.0, y=2.59926): 2.605089064694
    test 7597 69 68.989286322673 Mu(tan=2.60363, x=0.358543, y=0.933513), iteration=3: 2.605089064694
    test 7598 69 68.957159065949 Chi(tan=2.59928, x=1.0, y=2.59928), iteration=2: 2.605089064694
    test 7599 69 69.000000000000 Xi(tan=2.60509, x=0.358368, y=0.93358): 2.605089064694

    test 7600 72 72.075254383698 Phi(tan=3.09149, x=0.307768, y=0.951462): 3.077683537175
    test 7601 72 72.018830129897 Beta(tan=3.08113, x=0.308704, y=0.951158): 3.077683537175
    test 7602 72 71.962252287555 Theta(tan=3.0708, x=0.309644, y=0.950853): 3.077683537175
    test 7603 72 71.990589272651 Mu(tan=3.07596, x=0.309173, y=0.951006): 3.077683537175
    test 7604 72 71.962366907267 Chi(tan=3.07082, x=0.309642, y=0.950853): 3.077683537175
    test 7605 72 72.000000000000 Xi(tan=3.07768, x=0.309017, y=0.951057): 3.077683537175

    test 7606 72 72.075254383698 Phi(tan=3.09149, x=1.0, y=3.09149): 3.077683537175
    test 7607 72 72.018830129897 Beta(tan=3.08113, x=1.0, y=3.08113): 3.077683537175
    test 7608 72 71.962252287555 Theta(tan=3.0708, x=1.0, y=3.0708): 3.077683537175
    test 7609 72 71.990589272651 Mu(tan=3.07596, x=0.309173, y=0.951006), iteration=2: 3.077683537175
    test 7610 72 71.962366907267 Chi(tan=3.07082, x=1.0, y=3.07082), iteration=3: 3.077683537175
    test 7611 72 72.000000000000 Xi(tan=3.07768, x=0.309017, y=0.951057): 3.077683537175

    test 7612 75 75.064005840259 Phi(tan=3.7488, x=0.25774, y=0.966214): 3.732050807569
    test 7613 75 75.016016132778 Beta(tan=3.73623, x=0.258549, y=0.965998): 3.732050807569
    test 7614 75 74.967886599098 Theta(tan=3.7237, x=0.25936, y=0.965781): 3.732050807569
    test 7615 75 74.991995126578 Mu(tan=3.72997, x=0.258954, y=0.96589): 3.732050807569
    test 7616 75 74.967987175642 Chi(tan=3.72373, x=0.259359, y=0.965781): 3.732050807569
    test 7617 75 75.000000000000 Xi(tan=3.73205, x=0.258819, y=0.965926): 3.732050807569

    test 7618 75 75.064005840259 Phi(tan=3.7488, x=1.0, y=3.7488): 3.732050807569
    test 7619 75 75.016016132778 Beta(tan=3.73623, x=1.0, y=3.73623): 3.732050807569
    test 7620 75 74.967886599098 Theta(tan=3.7237, x=1.0, y=3.7237): 3.732050807569
    test 7621 75 74.991995126578 Mu(tan=3.72997, x=0.258954, y=0.96589), iteration=3: 3.732050807569
    test 7622 75 74.967987175642 Chi(tan=3.72373, x=1.0, y=3.72373), iteration=3: 3.732050807569
    test 7623 75 75.000000000000 Xi(tan=3.73205, x=0.258819, y=0.965926): 3.732050807569

    test 7624 78 78.052060695305 Phi(tan=4.72574, x=0.207023, y=0.978336): 4.704630109478
    test 7625 78 78.013027521782 Beta(tan=4.7099, x=0.207689, y=0.978195): 4.704630109478
    test 7626 78 77.973874382769 Theta(tan=4.6941, x=0.208358, y=0.978053): 4.704630109478
    test 7627 78 77.993488499751 Mu(tan=4.702, x=0.208023, y=0.978124): 4.704630109478
    test 7628 78 77.973958284429 Chi(tan=4.69414, x=0.208356, y=0.978053): 4.704630109478
    test 7629 78 78.000000000000 Xi(tan=4.70463, x=0.207912, y=0.978148): 4.704630109478

    test 7630 78 78.052060695305 Phi(tan=4.72574, x=1.0, y=4.72574): 4.704630109478
    test 7631 78 78.013027521782 Beta(tan=4.7099, x=1.0, y=4.7099): 4.704630109478
    test 7632 78 77.973874382769 Theta(tan=4.6941, x=1.0, y=4.6941): 4.704630109478
    test 7633 78 77.993488499751 Mu(tan=4.702, x=0.208023, y=0.978124), iteration=3: 4.704630109478
    test 7634 78 77.973958284429 Chi(tan=4.69414, x=1.0, y=4.69414), iteration=3: 4.704630109478
    test 7635 78 78.000000000000 Xi(tan=4.70463, x=0.207912, y=0.978148): 4.704630109478

    test 7636 81 81.039549158822 Phi(tan=6.34208, x=0.155753, y=0.987796): 6.313751514675
    test 7637 81 81.009896918061 Beta(tan=6.32082, x=0.156264, y=0.987715): 6.313751514675
    test 7638 81 80.980149803915 Theta(tan=6.29963, x=0.156777, y=0.987634): 6.313751514675
    test 7639 81 80.995053056590 Mu(tan=6.31023, x=0.15652, y=0.987675): 6.313751514675
    test 7640 81 80.980214798632 Chi(tan=6.29967, x=0.156776, y=0.987634): 6.313751514675
    test 7641 81 81.000000000000 Xi(tan=6.31375, x=0.156434, y=0.987688): 6.313751514675

    test 7642 81 81.039549158822 Phi(tan=6.34208, x=1.0, y=6.34208): 6.313751514675
    test 7643 81 81.009896918061 Beta(tan=6.32082, x=1.0, y=6.32082): 6.313751514675
    test 7644 81 80.980149803915 Theta(tan=6.29963, x=1.0, y=6.29963): 6.313751514675
    test 7645 81 80.995053056590 Mu(tan=6.31023, x=0.15652, y=0.987675), iteration=3: 6.313751514675
    test 7646 81 80.980214798632 Chi(tan=6.29967, x=1.0, y=6.29967), iteration=3: 6.313751514675
    test 7647 81 81.000000000000 Xi(tan=6.31375, x=0.156434, y=0.987688): 6.313751514675

    test 7648 84 84.026607472936 Phi(tan=9.55706, x=0.104067, y=0.99457): 9.514364454223
    test 7649 84 84.006658466345 Beta(tan=9.52501, x=0.104413, y=0.994534): 9.514364454223
    test 7650 84 83.986643815196 Theta(tan=9.49308, x=0.10476, y=0.994498): 9.514364454223
    test 7651 84 83.996671688480 Mu(tan=9.50905, x=0.104586, y=0.994516): 9.514364454223
    test 7652 84 83.986688152448 Chi(tan=9.49315, x=0.10476, y=0.994498): 9.514364454223
    test 7653 84 84.000000000000 Xi(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223

    test 7654 84 84.026607472936 Phi(tan=9.55706, x=1.0, y=9.55706): 9.514364454223
    test 7655 84 84.006658466345 Beta(tan=9.52501, x=1.0, y=9.52501): 9.514364454223
    test 7656 84 83.986643815196 Theta(tan=9.49308, x=1.0, y=9.49308): 9.514364454223
    test 7657 84 83.996671688480 Mu(tan=9.50905, x=0.104586, y=0.994516), iteration=2: 9.514364454223
    test 7658 84 83.986688152448 Chi(tan=9.49315, x=1.0, y=9.49315), iteration=3: 9.514364454223
    test 7659 84 84.000000000000 Xi(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223

    test 7660 87 87.013376455595 Phi(tan=19.1668, x=0.0521028, y=0.998642): 19.081136687728
    test 7661 87 87.003347467582 Beta(tan=19.1025, x=0.0522776, y=0.998633): 19.081136687728
    test 7662 87 86.993284925872 Theta(tan=19.0384, x=0.052453, y=0.998623): 19.081136687728
    test 7663 87 86.998326699774 Mu(tan=19.0705, x=0.0523651, y=0.998628): 19.081136687728
    test 7664 87 86.993307401289 Chi(tan=19.0386, x=0.0524526, y=0.998623): 19.081136687728
    test 7665 87 87.000000000000 Xi(tan=19.0811, x=0.052336, y=0.99863): 19.081136687728

    test 7666 87 87.013376455595 Phi(tan=19.1668, x=1.0, y=19.1668): 19.081136687728
    test 7667 87 87.003347467582 Beta(tan=19.1025, x=1.0, y=19.1025): 19.081136687728
    test 7668 87 86.993284925872 Theta(tan=19.0384, x=1.0, y=19.0384): 19.081136687728
    test 7669 87 86.998326699774 Mu(tan=19.0705, x=0.0523651, y=0.998628), iteration=3: 19.081136687728
    test 7670 87 86.993307401289 Chi(tan=19.0386, x=1.0, y=19.0386), iteration=3: 19.081136687728
    test 7671 87 87.000000000000 Xi(tan=19.0811, x=0.052336, y=0.99863): 19.081136687728

    test 7672 90 90.000000000000 Phi(tan=inf, x=0.0, y=1.0): inf
    test 7673 90 90.000000000000 Beta(tan=inf, x=0.0, y=1.0): inf
    test 7674 90 90.000000000000 Theta(tan=inf, x=0.0, y=1.0): inf
    test 7675 90 90.000000000000 Mu(tan=inf, x=0.0, y=1.0): inf
    test 7676 90 90.000000000000 Chi(tan=inf, x=0.0, y=1.0): inf
    test 7677 90 90.000000000000 Xi(tan=inf, x=0.0, y=1.0): inf

    test 7678 90 90.000000000000 Phi(tan=inf, x=0.0, y=1.0): inf
    test 7679 90 90.000000000000 Beta(tan=inf, x=0.0, y=1.0): inf
    test 7680 90 90.000000000000 Theta(tan=inf, x=0.0, y=1.0): inf
    test 7681 90 90.000000000000 Mu(tan=inf, x=0.0, y=1.0): inf
    test 7682 90 90.000000000000 Chi(tan=inf, x=0.0, y=1.0): inf
    test 7683 90 90.000000000000 Xi(tan=inf, x=0.0, y=1.0): inf

    test 7684 93 92.986623544405 Phi(tan=-19.1668, x=-0.0521028, y=0.998642): -19.081136687728
    test 7685 93 92.996652532418 Beta(tan=-19.1025, x=-0.0522776, y=0.998633): -19.081136687728
    test 7686 93 93.006715074128 Theta(tan=-19.0384, x=-0.052453, y=0.998623): -19.081136687728
    test 7687 93 93.001673300226 Mu(tan=-19.0705, x=-0.0523651, y=0.998628): -19.081136687728
    test 7688 93 93.006692598711 Chi(tan=-19.0386, x=-0.0524526, y=0.998623): -19.081136687728
    test 7689 93 93.000000000000 Xi(tan=-19.0811, x=-0.052336, y=0.99863): -19.081136687728

    test 7690 93 92.986623544405 Phi(tan=-19.1668, x=-1, y=19.1668): -19.081136687728
    test 7691 93 92.996652532418 Beta(tan=-19.1025, x=-1, y=19.1025): -19.081136687728
    test 7692 93 93.006715074128 Theta(tan=-19.0384, x=-1, y=19.0384): -19.081136687728
    test 7693 93 93.001673300226 Mu(tan=-19.0705, x=-0.0523651, y=0.998628), iteration=2: -19.081136687728
    test 7694 93 93.006692598711 Chi(tan=-19.0386, x=-1, y=19.0386), iteration=3: -19.081136687728
    test 7695 93 93.000000000000 Xi(tan=-19.0811, x=-0.052336, y=0.99863): -19.081136687728

    test 7696 96 95.973392527064 Phi(tan=-9.55706, x=-0.104067, y=0.99457): -9.514364454223
    test 7697 96 95.993341533655 Beta(tan=-9.52501, x=-0.104413, y=0.994534): -9.514364454223
    test 7698 96 96.013356184804 Theta(tan=-9.49308, x=-0.10476, y=0.994498): -9.514364454223
    test 7699 96 96.003328311520 Mu(tan=-9.50905, x=-0.104586, y=0.994516): -9.514364454223
    test 7700 96 96.013311847552 Chi(tan=-9.49315, x=-0.10476, y=0.994498): -9.514364454223
    test 7701 96 96.000000000000 Xi(tan=-9.51436, x=-0.104528, y=0.994522): -9.514364454223

    test 7702 96 95.973392527064 Phi(tan=-9.55706, x=-1, y=9.55706): -9.514364454223
    test 7703 96 95.993341533655 Beta(tan=-9.52501, x=-1, y=9.52501): -9.514364454223
    test 7704 96 96.013356184804 Theta(tan=-9.49308, x=-1, y=9.49308): -9.514364454223
    test 7705 96 96.003328311520 Mu(tan=-9.50905, x=-0.104586, y=0.994516), iteration=2: -9.514364454223
    test 7706 96 96.013311847552 Chi(tan=-9.49315, x=-1, y=9.49315), iteration=3: -9.514364454223
    test 7707 96 96.000000000000 Xi(tan=-9.51436, x=-0.104528, y=0.994522): -9.514364454223

    test 7708 99 98.960450841178 Phi(tan=-6.34208, x=-0.155753, y=0.987796): -6.313751514675
    test 7709 99 98.990103081939 Beta(tan=-6.32082, x=-0.156264, y=0.987715): -6.313751514675
    test 7710 99 99.019850196085 Theta(tan=-6.29963, x=-0.156777, y=0.987634): -6.313751514675
    test 7711 99 99.004946943410 Mu(tan=-6.31023, x=-0.15652, y=0.987675): -6.313751514675
    test 7712 99 99.019785201368 Chi(tan=-6.29967, x=-0.156776, y=0.987634): -6.313751514675
    test 7713 99 99.000000000000 Xi(tan=-6.31375, x=-0.156434, y=0.987688): -6.313751514675

    test 7714 99 98.960450841178 Phi(tan=-6.34208, x=-1, y=6.34208): -6.313751514675
    test 7715 99 98.990103081939 Beta(tan=-6.32082, x=-1, y=6.32082): -6.313751514675
    test 7716 99 99.019850196085 Theta(tan=-6.29963, x=-1, y=6.29963): -6.313751514675
    test 7717 99 99.004946943410 Mu(tan=-6.31023, x=-0.15652, y=0.987675), iteration=3: -6.313751514675
    test 7718 99 99.019785201368 Chi(tan=-6.29967, x=-1, y=6.29967), iteration=3: -6.313751514675
    test 7719 99 99.000000000000 Xi(tan=-6.31375, x=-0.156434, y=0.987688): -6.313751514675

    test 7720 102 101.947939304695 Phi(tan=-4.72574, x=-0.207023, y=0.978336): -4.704630109478
    test 7721 102 101.986972478218 Beta(tan=-4.7099, x=-0.207689, y=0.978195): -4.704630109478
    test 7722 102 102.026125617231 Theta(tan=-4.6941, x=-0.208358, y=0.978053): -4.704630109478
    test 7723 102 102.006511500249 Mu(tan=-4.702, x=-0.208023, y=0.978124): -4.704630109478
    test 7724 102 102.026041715571 Chi(tan=-4.69414, x=-0.208356, y=0.978053): -4.704630109478
    test 7725 102 102.000000000000 Xi(tan=-4.70463, x=-0.207912, y=0.978148): -4.704630109478

    test 7726 102 101.947939304695 Phi(tan=-4.72574, x=-1, y=4.72574): -4.704630109478
    test 7727 102 101.986972478218 Beta(tan=-4.7099, x=-1, y=4.7099): -4.704630109478
    test 7728 102 102.026125617231 Theta(tan=-4.6941, x=-1, y=4.6941): -4.704630109478
    test 7729 102 102.006511500249 Mu(tan=-4.702, x=-0.208023, y=0.978124), iteration=3: -4.704630109478
    test 7730 102 102.026041715571 Chi(tan=-4.69414, x=-1, y=4.69414), iteration=3: -4.704630109478
    test 7731 102 102.000000000000 Xi(tan=-4.70463, x=-0.207912, y=0.978148): -4.704630109478

    test 7732 105 104.935994159741 Phi(tan=-3.7488, x=-0.25774, y=0.966214): -3.732050807569
    test 7733 105 104.983983867222 Beta(tan=-3.73623, x=-0.258549, y=0.965998): -3.732050807569
    test 7734 105 105.032113400902 Theta(tan=-3.7237, x=-0.25936, y=0.965781): -3.732050807569
    test 7735 105 105.008004873422 Mu(tan=-3.72997, x=-0.258954, y=0.96589): -3.732050807569
    test 7736 105 105.032012824358 Chi(tan=-3.72373, x=-0.259359, y=0.965781): -3.732050807569
    test 7737 105 105.000000000000 Xi(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569

    test 7738 105 104.935994159741 Phi(tan=-3.7488, x=-1, y=3.7488): -3.732050807569
    test 7739 105 104.983983867222 Beta(tan=-3.73623, x=-1, y=3.73623): -3.732050807569
    test 7740 105 105.032113400902 Theta(tan=-3.7237, x=-1, y=3.7237): -3.732050807569
    test 7741 105 105.008004873422 Mu(tan=-3.72997, x=-0.258954, y=0.96589), iteration=3: -3.732050807569
    test 7742 105 105.032012824358 Chi(tan=-3.72373, x=-1, y=3.72373), iteration=3: -3.732050807569
    test 7743 105 105.000000000000 Xi(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569

    test 7744 108 107.924745616302 Phi(tan=-3.09149, x=-0.307768, y=0.951462): -3.077683537175
    test 7745 108 107.981169870103 Beta(tan=-3.08113, x=-0.308704, y=0.951158): -3.077683537175
    test 7746 108 108.037747712445 Theta(tan=-3.0708, x=-0.309644, y=0.950853): -3.077683537175
    test 7747 108 108.009410727349 Mu(tan=-3.07596, x=-0.309173, y=0.951006): -3.077683537175
    test 7748 108 108.037633092733 Chi(tan=-3.07082, x=-0.309642, y=0.950853): -3.077683537175
    test 7749 108 108.000000000000 Xi(tan=-3.07768, x=-0.309017, y=0.951057): -3.077683537175

    test 7750 108 107.924745616302 Phi(tan=-3.09149, x=-1, y=3.09149): -3.077683537175
    test 7751 108 107.981169870103 Beta(tan=-3.08113, x=-1, y=3.08113): -3.077683537175
    test 7752 108 108.037747712445 Theta(tan=-3.0708, x=-1, y=3.0708): -3.077683537175
    test 7753 108 108.009410727349 Mu(tan=-3.07596, x=-0.309173, y=0.951006), iteration=2: -3.077683537175
    test 7754 108 108.037633092733 Chi(tan=-3.07082, x=-1, y=3.07082), iteration=3: -3.077683537175
    test 7755 108 108.000000000000 Xi(tan=-3.07768, x=-0.309017, y=0.951057): -3.077683537175

    test 7756 111 110.914316454552 Phi(tan=-2.61678, x=-0.356971, y=0.934115): -2.605089064694
    test 7757 111 110.978561232384 Beta(tan=-2.60801, x=-0.358019, y=0.933714): -2.605089064694
    test 7758 111 111.042966661313 Theta(tan=-2.59926, x=-0.359068, y=0.933311): -2.605089064694
    test 7759 111 111.010713677327 Mu(tan=-2.60363, x=-0.358543, y=0.933513): -2.605089064694
    test 7760 111 111.042840934051 Chi(tan=-2.59928, x=-0.359066, y=0.933312): -2.605089064694
    test 7761 111 111.000000000000 Xi(tan=-2.60509, x=-0.358368, y=0.93358): -2.605089064694

    test 7762 111 110.914316454552 Phi(tan=-2.61678, x=-1, y=2.61678): -2.605089064694
    test 7763 111 110.978561232384 Beta(tan=-2.60801, x=-1, y=2.60801): -2.605089064694
    test 7764 111 111.042966661313 Theta(tan=-2.59926, x=-1, y=2.59926): -2.605089064694
    test 7765 111 111.010713677327 Mu(tan=-2.60363, x=-0.358543, y=0.933513), iteration=3: -2.605089064694
    test 7766 111 111.042840934051 Chi(tan=-2.59928, x=-1, y=2.59928), iteration=3: -2.605089064694
    test 7767 111 111.000000000000 Xi(tan=-2.60509, x=-0.358368, y=0.93358): -2.605089064694

    test 7768 114 113.904820699861 Phi(tan=-2.25612, x=-0.405219, y=0.91422): -2.246036773904
    test 7769 114 113.976186490838 Beta(tan=-2.24855, x=-0.406357, y=0.913714): -2.246036773904
    test 7770 114 114.047712986128 Theta(tan=-2.24101, x=-0.407497, y=0.913206): -2.246036773904
    test 7771 114 114.011899457288 Mu(tan=-2.24478, x=-0.406926, y=0.913461): -2.246036773904
    test 7772 114 114.047579285201 Chi(tan=-2.24103, x=-0.407495, y=0.913207): -2.246036773904
    test 7773 114 114.000000000000 Xi(tan=-2.24604, x=-0.406737, y=0.913545): -2.246036773904

    test 7774 114 113.904820699861 Phi(tan=-2.25612, x=-1, y=2.25612): -2.246036773904
    test 7775 114 113.976186490838 Beta(tan=-2.24855, x=-1, y=2.24855): -2.246036773904
    test 7776 114 114.047712986128 Theta(tan=-2.24101, x=-1, y=2.24101): -2.246036773904
    test 7777 114 114.011899457288 Mu(tan=-2.24478, x=-0.406926, y=0.913461), iteration=3: -2.246036773904
    test 7778 114 114.047579285201 Chi(tan=-2.24103, x=-1, y=2.24103), iteration=3: -2.246036773904
    test 7779 114 114.000000000000 Xi(tan=-2.24604, x=-0.406737, y=0.913545): -2.246036773904

    test 7780 117 116.896362384141 Phi(tan=-1.97142, x=-0.452378, y=0.891826): -1.962610505505
    test 7781 117 116.974071662788 Beta(tan=-1.96481, x=-0.453587, y=0.891212): -1.962610505505
    test 7782 117 117.051934685592 Theta(tan=-1.95822, x=-0.454798, y=0.890595): -1.962610505505
    test 7783 117 117.012955075694 Mu(tan=-1.96151, x=-0.454192, y=0.890904): -1.962610505505
    test 7784 117 117.051796232011 Chi(tan=-1.95823, x=-0.454796, y=0.890596): -1.962610505505
    test 7785 117 117.000000000000 Xi(tan=-1.96261, x=-0.45399, y=0.891007): -1.962610505505

    test 7786 117 116.896362384141 Phi(tan=-1.97142, x=-1, y=1.97142): -1.962610505505
    test 7787 117 116.974071662788 Beta(tan=-1.96481, x=-1, y=1.96481): -1.962610505505
    test 7788 117 117.051934685592 Theta(tan=-1.95822, x=-1, y=1.95822): -1.962610505505
    test 7789 117 117.012955075694 Mu(tan=-1.96151, x=-0.454192, y=0.890904), iteration=2: -1.962610505505
    test 7790 117 117.051796232011 Chi(tan=-1.95823, x=-1, y=1.95823), iteration=3: -1.962610505505
    test 7791 117 117.000000000000 Xi(tan=-1.96261, x=-0.45399, y=0.891007): -1.962610505505

    test 7792 120 119.889034406586 Phi(tan=-1.73982, x=-0.498322, y=0.866992): -1.732050807569
    test 7793 120 119.972239961132 Beta(tan=-1.73399, x=-0.49958, y=0.866268): -1.732050807569
    test 7794 120 120.055585588185 Theta(tan=-1.72818, x=-0.50084, y=0.86554): -1.732050807569
    test 7795 120 120.013868957861 Mu(tan=-1.73108, x=-0.50021, y=0.865904): -1.732050807569
    test 7796 120 120.055445578009 Chi(tan=-1.72819, x=-0.500838, y=0.865541): -1.732050807569
    test 7797 120 120.000000000000 Xi(tan=-1.73205, x=-0.5, y=0.866025): -1.732050807569

    test 7798 120 119.889034406586 Phi(tan=-1.73982, x=-1, y=1.73982): -1.732050807569
    test 7799 120 119.972239961132 Beta(tan=-1.73399, x=-1, y=1.73399): -1.732050807569
    test 7800 120 120.055585588185 Theta(tan=-1.72818, x=-1, y=1.72818): -1.732050807569
    test 7801 120 120.013868957861 Mu(tan=-1.73108, x=-0.50021, y=0.865904), iteration=3: -1.732050807569
    test 7802 120 120.055445578009 Chi(tan=-1.72819, x=-1, y=1.72819), iteration=3: -1.732050807569
    test 7803 120 120.000000000000 Xi(tan=-1.73205, x=-0.5, y=0.866025): -1.732050807569

    test 7804 123 122.882917506260 Phi(tan=-1.54678, x=-0.542924, y=0.839782): -1.539864963815
    test 7805 123 122.970711538230 Beta(tan=-1.54159, x=-0.54421, y=0.838949): -1.539864963815
    test 7806 123 123.058625854403 Theta(tan=-1.53642, x=-0.545497, y=0.838113): -1.539864963815
    test 7807 123 123.014631073165 Mu(tan=-1.539, x=-0.544853, y=0.838531): -1.539864963815
    test 7808 123 123.058487350319 Chi(tan=-1.53643, x=-0.545495, y=0.838114): -1.539864963815
    test 7809 123 123.000000000000 Xi(tan=-1.53986, x=-0.544639, y=0.838671): -1.539864963815

    test 7810 123 122.882917506260 Phi(tan=-1.54678, x=-1, y=1.54678): -1.539864963815
    test 7811 123 122.970711538230 Beta(tan=-1.54159, x=-1, y=1.54159): -1.539864963815
    test 7812 123 123.058625854403 Theta(tan=-1.53642, x=-1, y=1.53642): -1.539864963815
    test 7813 123 123.014631073165 Mu(tan=-1.539, x=-0.544853, y=0.838531), iteration=3: -1.539864963815
    test 7814 123 123.058487350319 Chi(tan=-1.53643, x=-1, y=1.53643), iteration=2: -1.539864963815
    test 7815 123 123.000000000000 Xi(tan=-1.53986, x=-0.544639, y=0.838671): -1.539864963815

    test 7816 126 125.878079358159 Phi(tan=-1.38256, x=-0.586062, y=0.810266): -1.376381920471
    test 7817 126 125.969503261502 Beta(tan=-1.37792, x=-0.587355, y=0.80933): -1.376381920471
    test 7818 126 126.061022406195 Theta(tan=-1.3733, x=-0.588647, y=0.808391): -1.376381920471
    test 7819 126 126.015233045717 Mu(tan=-1.37561, x=-0.588, y=0.808861): -1.376381920471
    test 7820 126 126.060888237156 Chi(tan=-1.37331, x=-0.588645, y=0.808392): -1.376381920471
    test 7821 126 126.000000000000 Xi(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471

    test 7822 126 125.878079358159 Phi(tan=-1.38256, x=-1, y=1.38256): -1.376381920471
    test 7823 126 125.969503261502 Beta(tan=-1.37792, x=-1, y=1.37792): -1.376381920471
    test 7824 126 126.061022406195 Theta(tan=-1.3733, x=-1, y=1.3733): -1.376381920471
    test 7825 126 126.015233045717 Mu(tan=-1.37561, x=-0.588, y=0.808861), iteration=3: -1.376381920471
    test 7826 126 126.060888237156 Chi(tan=-1.37331, x=-1, y=1.37331), iteration=2: -1.376381920471
    test 7827 126 126.000000000000 Xi(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471

    test 7828 129 128.874573803460 Phi(tan=-1.24044, x=-0.627618, y=0.778522): -1.234897156535
    test 7829 129 128.968628523374 Beta(tan=-1.23628, x=-0.628895, y=0.77749): -1.234897156535
    test 7830 129 129.062749279218 Theta(tan=-1.23214, x=-0.630171, y=0.776456): -1.234897156535
    test 7831 129 129.015668247253 Mu(tan=-1.23421, x=-0.629533, y=0.776974): -1.234897156535
    test 7832 129 129.062621952144 Chi(tan=-1.23214, x=-0.630169, y=0.776458): -1.234897156535
    test 7833 129 129.000000000000 Xi(tan=-1.2349, x=-0.62932, y=0.777146): -1.234897156535

    test 7834 129 128.874573803460 Phi(tan=-1.24044, x=-1, y=1.24044): -1.234897156535
    test 7835 129 128.968628523374 Beta(tan=-1.23628, x=-1, y=1.23628): -1.234897156535
    test 7836 129 129.062749279218 Theta(tan=-1.23214, x=-1, y=1.23214): -1.234897156535
    test 7837 129 129.015668247253 Mu(tan=-1.23421, x=-0.629533, y=0.776974), iteration=3: -1.234897156535
    test 7838 129 129.062621952144 Chi(tan=-1.23214, x=-1, y=1.23214), iteration=2: -1.234897156535
    test 7839 129 129.000000000000 Xi(tan=-1.2349, x=-0.62932, y=0.777146): -1.234897156535

    test 7840 132 131.872440223586 Phi(tan=-1.1156, x=-0.667474, y=0.744633): -1.110612514829
    test 7841 132 131.968097087864 Beta(tan=-1.11186, x=-0.668717, y=0.743517): -1.110612514829
    test 7842 132 132.063787894475 Theta(tan=-1.10813, x=-0.669958, y=0.742399): -1.110612514829
    test 7843 132 132.015931871193 Mu(tan=-1.10999, x=-0.669337, y=0.742959): -1.110612514829
    test 7844 132 132.063669521510 Chi(tan=-1.10813, x=-0.669956, y=0.742401): -1.110612514829
    test 7845 132 132.000000000000 Xi(tan=-1.11061, x=-0.669131, y=0.743145): -1.110612514829

    test 7846 132 131.872440223586 Phi(tan=-1.1156, x=-1, y=1.1156): -1.110612514829
    test 7847 132 131.968097087864 Beta(tan=-1.11186, x=-1, y=1.11186): -1.110612514829
    test 7848 132 132.063787894475 Theta(tan=-1.10813, x=-1, y=1.10813): -1.110612514829
    test 7849 132 132.015931871193 Mu(tan=-1.10999, x=-0.669337, y=0.742959), iteration=3: -1.110612514829
    test 7850 132 132.063669521510 Chi(tan=-1.10813, x=-1, y=1.10813), iteration=2: -1.110612514829
    test 7851 132 132.000000000000 Xi(tan=-1.11061, x=-0.669131, y=0.743145): -1.110612514829

    test 7852 135 134.871703066479 Phi(tan=-1.00449, x=-0.705522, y=0.708688): -1.000000000000
    test 7853 135 134.967914975772 Beta(tan=-1.00112, x=-0.706711, y=0.707503): -1.000000000000
    test 7854 135 135.064127246955 Theta(tan=-0.997764, x=-0.707898, y=0.706315): -1.000000000000
    test 7855 135 135.016020986969 Mu(tan=-0.999441, x=-0.707304, y=0.706909): -1.000000000000
    test 7856 135 135.064019491023 Chi(tan=-0.997768, x=-0.707896, y=0.706316): -1.000000000000
    test 7857 135 135.000000000000 Xi(tan=-1, x=-0.707107, y=0.707107): -1.000000000000

    test 7858 135 134.871703066479 Phi(tan=-1.00449, x=-1, y=1.00449): -1.000000000000
    test 7859 135 134.967914975772 Beta(tan=-1.00112, x=-1, y=1.00112): -1.000000000000
    test 7860 135 135.064127246955 Theta(tan=-0.997764, x=-1, y=0.997764): -1.000000000000
    test 7861 135 135.016020986969 Mu(tan=-0.999441, x=-0.707304, y=0.706909), iteration=2: -1.000000000000
    test 7862 135 135.064019491023 Chi(tan=-0.997768, x=-1, y=0.997768), iteration=3: -1.000000000000
    test 7863 135 135.000000000000 Xi(tan=-1, x=-0.707107, y=0.707107): -1.000000000000

    test 7864 138 137.872371532091 Phi(tan=-0.904446, x=-0.741652, y=0.670784): -0.900404044298
    test 7865 138 137.968084390082 Beta(tan=-0.901413, x=-0.742772, y=0.669544): -0.900404044298
    test 7866 138 138.063764009826 Theta(tan=-0.898391, x=-0.743889, y=0.668303): -0.900404044298
    test 7867 138 138.015934573980 Mu(tan=-0.899901, x=-0.743331, y=0.668924): -0.900404044298
    test 7868 138 138.063668050475 Chi(tan=-0.898394, x=-0.743888, y=0.668304): -0.900404044298
    test 7869 138 138.000000000000 Xi(tan=-0.900404, x=-0.743145, y=0.669131): -0.900404044298

    test 7870 138 137.872371532091 Phi(tan=-0.904446, x=-1, y=0.904446): -0.900404044298
    test 7871 138 137.968084390082 Beta(tan=-0.901413, x=-1, y=0.901413): -0.900404044298
    test 7872 138 138.063764009826 Theta(tan=-0.898391, x=-1, y=0.898391): -0.900404044298
    test 7873 138 138.015934573980 Mu(tan=-0.899901, x=-0.743331, y=0.668924), iteration=2: -0.900404044298
    test 7874 138 138.063668050475 Chi(tan=-0.898394, x=-1, y=0.898394), iteration=3: -0.900404044298
    test 7875 138 138.000000000000 Xi(tan=-0.900404, x=-0.743145, y=0.669131): -0.900404044298

    test 7876 141 140.874439422555 Phi(tan=-0.813419, x=-0.775765, y=0.631022): -0.809784033195
    test 7877 141 140.968603682756 Beta(tan=-0.810692, x=-0.776801, y=0.629746): -0.809784033195
    test 7878 141 141.062702553785 Theta(tan=-0.807974, x=-0.777834, y=0.62847): -0.809784033195
    test 7879 141 141.015673534704 Mu(tan=-0.809331, x=-0.777318, y=0.629108): -0.809784033195
    test 7880 141 141.062619074367 Chi(tan=-0.807976, x=-0.777833, y=0.628471): -0.809784033195
    test 7881 141 141.000000000000 Xi(tan=-0.809784, x=-0.777146, y=0.62932): -0.809784033195

    test 7882 141 140.874439422555 Phi(tan=-0.813419, x=-1, y=0.813419): -0.809784033195
    test 7883 141 140.968603682756 Beta(tan=-0.810692, x=-1, y=0.810692): -0.809784033195
    test 7884 141 141.062702553785 Theta(tan=-0.807974, x=-1, y=0.807974): -0.809784033195
    test 7885 141 141.015673534704 Mu(tan=-0.809331, x=-0.777318, y=0.629108), iteration=3: -0.809784033195
    test 7886 141 141.062619074367 Chi(tan=-0.807976, x=-1, y=0.807976), iteration=2: -0.809784033195
    test 7887 141 141.000000000000 Xi(tan=-0.809784, x=-0.777146, y=0.62932): -0.809784033195

    test 7888 144 143.877885160824 Phi(tan=-0.729804, x=-0.807762, y=0.589508): -0.726542528005
    test 7889 144 143.969467363687 Beta(tan=-0.727357, x=-0.808704, y=0.588216): -0.726542528005
    test 7890 144 144.060954882092 Theta(tan=-0.724918, x=-0.809642, y=0.586924): -0.726542528005
    test 7891 144 144.015240686745 Mu(tan=-0.726136, x=-0.809173, y=0.58757): -0.726542528005
    test 7892 144 144.060884078410 Chi(tan=-0.72492, x=-0.809641, y=0.586925): -0.726542528005
    test 7893 144 144.000000000000 Xi(tan=-0.726543, x=-0.809017, y=0.587785): -0.726542528005

    test 7894 144 143.877885160824 Phi(tan=-0.729804, x=-1, y=0.729804): -0.726542528005
    test 7895 144 143.969467363687 Beta(tan=-0.727357, x=-1, y=0.727357): -0.726542528005
    test 7896 144 144.060954882092 Theta(tan=-0.724918, x=-1, y=0.724918): -0.726542528005
    test 7897 144 144.015240686745 Mu(tan=-0.726136, x=-0.809173, y=0.58757), iteration=2: -0.726542528005
    test 7898 144 144.060884078410 Chi(tan=-0.72492, x=-1, y=0.72492), iteration=3: -0.726542528005
    test 7899 144 144.000000000000 Xi(tan=-0.726543, x=-0.809017, y=0.587785): -0.726542528005

    test 7900 147 146.882671979706 Phi(tan=-0.652323, x=-0.837554, y=0.546355): -0.649407593198
    test 7901 147 146.970666152106 Beta(tan=-0.650136, x=-0.838392, y=0.545068): -0.649407593198
    test 7902 147 147.058540482739 Theta(tan=-0.647956, x=-0.839227, y=0.543782): -0.649407593198
    test 7903 147 147.014640733824 Mu(tan=-0.649044, x=-0.83881, y=0.544425): -0.649407593198
    test 7904 147 147.058482092364 Chi(tan=-0.647957, x=-0.839226, y=0.543783): -0.649407593198
    test 7905 147 147.000000000000 Xi(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198

    test 7906 147 146.882671979706 Phi(tan=-0.652323, x=-1, y=0.652323): -0.649407593198
    test 7907 147 146.970666152106 Beta(tan=-0.650136, x=-1, y=0.650136): -0.649407593198
    test 7908 147 147.058540482739 Theta(tan=-0.647956, x=-1, y=0.647956): -0.649407593198
    test 7909 147 147.014640733824 Mu(tan=-0.649044, x=-0.83881, y=0.544425), iteration=2: -0.649407593198
    test 7910 147 147.058482092364 Chi(tan=-0.647957, x=-1, y=0.647957), iteration=3: -0.649407593198
    test 7911 147 147.000000000000 Xi(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198

    test 7912 150 149.888748281352 Phi(tan=-0.579942, x=-0.865053, y=0.501681): -0.577350269190
    test 7913 150 149.972187070272 Beta(tan=-0.577998, x=-0.865783, y=0.50042): -0.577350269190
    test 7914 150 150.055486100094 Theta(tan=-0.57606, x=-0.866509, y=0.499161): -0.577350269190
    test 7915 150 150.013880215935 Mu(tan=-0.577027, x=-0.866147, y=0.49979): -0.577350269190
    test 7916 150 150.055439450644 Chi(tan=-0.576061, x=-0.866509, y=0.499162): -0.577350269190
    test 7917 150 150.000000000000 Xi(tan=-0.57735, x=-0.866025, y=0.5): -0.577350269190

    test 7918 150 149.888748281352 Phi(tan=-0.579942, x=-1, y=0.579942): -0.577350269190
    test 7919 150 149.972187070272 Beta(tan=-0.577998, x=-1, y=0.577998): -0.577350269190
    test 7920 150 150.055486100094 Theta(tan=-0.57606, x=-1, y=0.57606): -0.577350269190
    test 7921 150 150.013880215935 Mu(tan=-0.577027, x=-0.866147, y=0.49979), iteration=3: -0.577350269190
    test 7922 150 150.055439450644 Chi(tan=-0.576061, x=-1, y=0.576061), iteration=3: -0.577350269190
    test 7923 150 150.000000000000 Xi(tan=-0.57735, x=-0.866025, y=0.5): -0.577350269190

    test 7924 153 152.896048165141 Phi(tan=-0.511813, x=-0.890181, y=0.455606): -0.509525449494
    test 7925 153 152.974013578758 Beta(tan=-0.510097, x=-0.890801, y=0.454395): -0.509525449494
    test 7926 153 153.051825429165 Theta(tan=-0.508387, x=-0.891417, y=0.453184): -0.509525449494
    test 7927 153 153.012967439153 Mu(tan=-0.50924, x=-0.891109, y=0.453789): -0.509525449494
    test 7928 153 153.051789503033 Chi(tan=-0.508387, x=-0.891417, y=0.453185): -0.509525449494
    test 7929 153 153.000000000000 Xi(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494

    test 7930 153 152.896048165141 Phi(tan=-0.511813, x=-1, y=0.511813): -0.509525449494
    test 7931 153 152.974013578758 Beta(tan=-0.510097, x=-1, y=0.510097): -0.509525449494
    test 7932 153 153.051825429165 Theta(tan=-0.508387, x=-1, y=0.508387): -0.509525449494
    test 7933 153 153.012967439153 Mu(tan=-0.50924, x=-0.891109, y=0.453789), iteration=3: -0.509525449494
    test 7934 153 153.051789503033 Chi(tan=-0.508387, x=-1, y=0.508387), iteration=2: -0.509525449494
    test 7935 153 153.000000000000 Xi(tan=-0.509525, x=-0.891007, y=0.45399): -0.509525449494

    test 7936 156 155.904492119885 Phi(tan=-0.447228, x=-0.912866, y=0.408259): -0.445228685309
    test 7937 156 155.976125752178 Beta(tan=-0.445728, x=-0.913376, y=0.407117): -0.445228685309
    test 7938 156 156.047598736385 Theta(tan=-0.444234, x=-0.913883, y=0.405978): -0.445228685309
    test 7939 156 156.011912385791 Mu(tan=-0.44498, x=-0.91363, y=0.406547): -0.445228685309
    test 7940 156 156.047572248701 Chi(tan=-0.444234, x=-0.913883, y=0.405978): -0.445228685309
    test 7941 156 156.000000000000 Xi(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309

    test 7942 156 155.904492119885 Phi(tan=-0.447228, x=-1, y=0.447228): -0.445228685309
    test 7943 156 155.976125752178 Beta(tan=-0.445728, x=-1, y=0.445728): -0.445228685309
    test 7944 156 156.047598736385 Theta(tan=-0.444234, x=-1, y=0.444234): -0.445228685309
    test 7945 156 156.011912385791 Mu(tan=-0.44498, x=-0.91363, y=0.406547), iteration=2: -0.445228685309
    test 7946 156 156.047572248701 Chi(tan=-0.444234, x=-1, y=0.444234), iteration=3: -0.445228685309
    test 7947 156 156.000000000000 Xi(tan=-0.445229, x=-0.913545, y=0.406737): -0.445228685309

    test 7948 159 158.913987874089 Phi(tan=-0.385587, x=-0.933041, y=0.359769): -0.383864035035
    test 7949 159 158.978500493660 Beta(tan=-0.384295, x=-0.933446, y=0.358718): -0.383864035035
    test 7950 159 159.042852411513 Theta(tan=-0.383006, x=-0.933848, y=0.35767): -0.383864035035
    test 7951 159 159.010726605836 Mu(tan=-0.383649, x=-0.933648, y=0.358193): -0.383864035035
    test 7952 159 159.042833897557 Chi(tan=-0.383007, x=-0.933848, y=0.35767): -0.383864035035
    test 7953 159 159.000000000000 Xi(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035

    test 7954 159 158.913987874089 Phi(tan=-0.385587, x=-1, y=0.385587): -0.383864035035
    test 7955 159 158.978500493660 Beta(tan=-0.384295, x=-1, y=0.384295): -0.383864035035
    test 7956 159 159.042852411513 Theta(tan=-0.383006, x=-1, y=0.383006): -0.383864035035
    test 7957 159 159.010726605836 Mu(tan=-0.383649, x=-0.933648, y=0.358193), iteration=3: -0.383864035035
    test 7958 159 159.042833897557 Chi(tan=-0.383007, x=-1, y=0.383007), iteration=2: -0.383864035035
    test 7959 159 159.000000000000 Xi(tan=-0.383864, x=-0.93358, y=0.358368): -0.383864035035

    test 7960 162 161.924431395928 Phi(tan=-0.326378, x=-0.950648, y=0.310271): -0.324919696233
    test 7961 162 161.981111785894 Beta(tan=-0.325284, x=-0.950955, y=0.309331): -0.324919696233
    test 7962 162 162.037638455855 Theta(tan=-0.324194, x=-0.951259, y=0.308392): -0.324919696233
    test 7963 162 162.009423090826 Mu(tan=-0.324738, x=-0.951107, y=0.308861): -0.324919696233
    test 7964 162 162.037626363775 Chi(tan=-0.324194, x=-0.951259, y=0.308392): -0.324919696233
    test 7965 162 162.000000000000 Xi(tan=-0.32492, x=-0.951057, y=0.309017): -0.324919696233

    test 7966 162 161.924431395928 Phi(tan=-0.326378, x=-1, y=0.326378): -0.324919696233
    test 7967 162 161.981111785894 Beta(tan=-0.325284, x=-1, y=0.325284): -0.324919696233
    test 7968 162 162.037638455855 Theta(tan=-0.324194, x=-1, y=0.324194): -0.324919696233
    test 7969 162 162.009423090826 Mu(tan=-0.324738, x=-0.951107, y=0.308861), iteration=3: -0.324919696233
    test 7970 162 162.037626363775 Chi(tan=-0.324194, x=-1, y=0.324194), iteration=2: -0.324919696233
    test 7971 162 162.000000000000 Xi(tan=-0.32492, x=-0.951057, y=0.309017): -0.324919696233

    test 7972 165 164.935708032481 Phi(tan=-0.269152, x=-0.965635, y=0.259903): -0.267949192431
    test 7973 165 164.983930976097 Beta(tan=-0.26825, x=-0.965853, y=0.25909): -0.267949192431
    test 7974 165 165.032013912570 Theta(tan=-0.26735, x=-0.96607, y=0.258279): -0.267949192431
    test 7975 165 165.008016131522 Mu(tan=-0.267799, x=-0.965962, y=0.258684): -0.267949192431
    test 7976 165 165.032006697021 Chi(tan=-0.267351, x=-0.96607, y=0.258279): -0.267949192431
    test 7977 165 165.000000000000 Xi(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431

    test 7978 165 164.935708032481 Phi(tan=-0.269152, x=-1, y=0.269152): -0.267949192431
    test 7979 165 164.983930976097 Beta(tan=-0.26825, x=-1, y=0.26825): -0.267949192431
    test 7980 165 165.032013912570 Theta(tan=-0.26735, x=-1, y=0.26735): -0.267949192431
    test 7981 165 165.008016131522 Mu(tan=-0.267799, x=-0.965962, y=0.258684), iteration=2: -0.267949192431
    test 7982 165 165.032006697021 Chi(tan=-0.267351, x=-1, y=0.267351), iteration=3: -0.267949192431
    test 7983 165 165.000000000000 Xi(tan=-0.267949, x=-0.965926, y=0.258819): -0.267949192431

    test 7984 168 167.947693775816 Phi(tan=-0.213511, x=-0.977957, y=0.208805): -0.212556561670
    test 7985 168 167.986927091791 Beta(tan=-0.212795, x=-0.9781, y=0.208135): -0.212556561670
    test 7986 168 168.026040245291 Theta(tan=-0.212082, x=-0.978242, y=0.207467): -0.212556561670
    test 7987 168 168.006521160939 Mu(tan=-0.212438, x=-0.978171, y=0.2078): -0.212556561670
    test 7988 168 168.026036457648 Chi(tan=-0.212082, x=-0.978242, y=0.207467): -0.212556561670
    test 7989 168 168.000000000000 Xi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670

    test 7990 168 167.947693775816 Phi(tan=-0.213511, x=-1, y=0.213511): -0.212556561670
    test 7991 168 167.986927091791 Beta(tan=-0.212795, x=-1, y=0.212795): -0.212556561670
    test 7992 168 168.026040245291 Theta(tan=-0.212082, x=-1, y=0.212082): -0.212556561670
    test 7993 168 168.006521160939 Mu(tan=-0.212438, x=-0.978171, y=0.2078), iteration=3: -0.212556561670
    test 7994 168 168.026036457648 Chi(tan=-0.212082, x=-1, y=0.212082), iteration=3: -0.212556561670
    test 7995 168 168.000000000000 Xi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670

    test 7996 171 170.960256641619 Phi(tan=-0.159096, x=-0.98758, y=0.15712): -0.158384440325
    test 7997 171 170.990067183834 Beta(tan=-0.158562, x=-0.987661, y=0.156606): -0.158384440325
    test 7998 171 171.019782671717 Theta(tan=-0.158031, x=-0.987742, y=0.156093): -0.158384440325
    test 7999 171 171.004954584468 Mu(tan=-0.158296, x=-0.987702, y=0.156349): -0.158384440325
    test 8000 171 171.019781042653 Chi(tan=-0.158031, x=-0.987742, y=0.156093): -0.158384440325
    test 8001 171 171.000000000000 Xi(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325

    test 8002 171 170.960256641619 Phi(tan=-0.159096, x=-1, y=0.159096): -0.158384440325
    test 8003 171 170.990067183834 Beta(tan=-0.158562, x=-1, y=0.158562): -0.158384440325
    test 8004 171 171.019782671717 Theta(tan=-0.158031, x=-1, y=0.158031): -0.158384440325
    test 8005 171 171.004954584468 Mu(tan=-0.158296, x=-0.987702, y=0.156349), iteration=3: -0.158384440325
    test 8006 171 171.019781042653 Chi(tan=-0.158031, x=-1, y=0.158031), iteration=3: -0.158384440325
    test 8007 171 171.000000000000 Xi(tan=-0.158384, x=-0.987688, y=0.156434): -0.158384440325

    test 8008 174 173.973258144422 Phi(tan=-0.105576, x=-0.994473, y=0.104993): -0.105104235266
    test 8009 174 173.993316692809 Beta(tan=-0.105222, x=-0.99451, y=0.104644): -0.105104235266
    test 8010 174 174.013309459165 Theta(tan=-0.104869, x=-0.994546, y=0.104297): -0.105104235266
    test 8011 174 174.003333598994 Mu(tan=-0.105045, x=-0.994528, y=0.104471): -0.105104235266
    test 8012 174 174.013308969799 Chi(tan=-0.104869, x=-0.994546, y=0.104297): -0.105104235266
    test 8013 174 174.000000000000 Xi(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266

    test 8014 174 173.973258144422 Phi(tan=-0.105576, x=-1, y=0.105576): -0.105104235266
    test 8015 174 173.993316692809 Beta(tan=-0.105222, x=-1, y=0.105222): -0.105104235266
    test 8016 174 174.013309459165 Theta(tan=-0.104869, x=-1, y=0.104869): -0.105104235266
    test 8017 174 174.003333598994 Mu(tan=-0.105045, x=-0.994528, y=0.104471), iteration=3: -0.105104235266
    test 8018 174 174.013308969799 Chi(tan=-0.104869, x=-1, y=0.104869), iteration=3: -0.105104235266
    test 8019 174 174.000000000000 Xi(tan=-0.105104, x=-0.994522, y=0.104528): -0.105104235266

    test 8020 177 176.986554851958 Phi(tan=-0.0526431, x=-0.998617, y=0.0525703): -0.052407779283
    test 8021 177 176.996639834512 Beta(tan=-0.0524666, x=-0.998626, y=0.0523945): -0.052407779283
    test 8022 177 177.006691189366 Theta(tan=-0.0522907, x=-0.998636, y=0.0522193): -0.052407779283
    test 8023 177 177.001676003026 Mu(tan=-0.0523784, x=-0.998631, y=0.0523067): -0.052407779283
    test 8024 177 177.006691127690 Chi(tan=-0.0522907, x=-0.998636, y=0.0522193): -0.052407779283
    test 8025 177 177.000000000000 Xi(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283

    test 8026 177 176.986554851958 Phi(tan=-0.0526431, x=-1, y=0.0526431): -0.052407779283
    test 8027 177 176.996639834512 Beta(tan=-0.0524666, x=-1, y=0.0524666): -0.052407779283
    test 8028 177 177.006691189366 Theta(tan=-0.0522907, x=-1, y=0.0522907): -0.052407779283
    test 8029 177 177.001676003026 Mu(tan=-0.0523784, x=-0.998631, y=0.0523067), iteration=3: -0.052407779283
    test 8030 177 177.006691127690 Chi(tan=-0.0522907, x=-1, y=0.0522907), iteration=3: -0.052407779283
    test 8031 177 177.000000000000 Xi(tan=-0.0524078, x=-0.99863, y=0.052336): -0.052407779283

    test 8032 180 180.000000000000 Phi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 8033 180 180.000000000000 Beta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 8034 180 180.000000000000 Theta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 8035 180 180.000000000000 Mu(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 8036 180 180.000000000000 Chi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 8037 180 180.000000000000 Xi(tan=0.0, x=-1, y=0.0): 0.000000000000

    test 8038 180 180.000000000000 Phi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 8039 180 180.000000000000 Beta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 8040 180 180.000000000000 Theta(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 8041 180 180.000000000000 Mu(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 8042 180 180.000000000000 Chi(tan=0.0, x=-1, y=0.0): 0.000000000000
    test 8043 180 180.000000000000 Xi(tan=0.0, x=-1, y=0.0): 0.000000000000

    test 8044 183 183.013445148042 Phi(tan=0.0526431, x=-0.998617, y=-0.0525703): 0.052407779283
    test 8045 183 183.003360165488 Beta(tan=0.0524666, x=-0.998626, y=-0.0523945): 0.052407779283
    test 8046 183 182.993308810634 Theta(tan=0.0522907, x=-0.998636, y=-0.0522193): 0.052407779283
    test 8047 183 182.998323996974 Mu(tan=0.0523784, x=-0.998631, y=-0.0523067): 0.052407779283
    test 8048 183 182.993308872310 Chi(tan=0.0522907, x=-0.998636, y=-0.0522193): 0.052407779283
    test 8049 183 183.000000000000 Xi(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283

    test 8050 183 183.013445148042 Phi(tan=0.0526431, x=-1, y=-0.0526431): 0.052407779283
    test 8051 183 183.003360165488 Beta(tan=0.0524666, x=-1, y=-0.0524666): 0.052407779283
    test 8052 183 182.993308810634 Theta(tan=0.0522907, x=-1, y=-0.0522907): 0.052407779283
    test 8053 183 182.998323996974 Mu(tan=0.0523784, x=-0.998631, y=-0.0523067), iteration=3: 0.052407779283
    test 8054 183 182.993308872310 Chi(tan=0.0522907, x=-1, y=-0.0522907), iteration=3: 0.052407779283
    test 8055 183 183.000000000000 Xi(tan=0.0524078, x=-0.99863, y=-0.052336): 0.052407779283

    test 8056 186 186.026741855578 Phi(tan=0.105576, x=-0.994473, y=-0.104993): 0.105104235266
    test 8057 186 186.006683307191 Beta(tan=0.105222, x=-0.99451, y=-0.104644): 0.105104235266
    test 8058 186 185.986690540835 Theta(tan=0.104869, x=-0.994546, y=-0.104297): 0.105104235266
    test 8059 186 185.996666401006 Mu(tan=0.105045, x=-0.994528, y=-0.104471): 0.105104235266
    test 8060 186 185.986691030201 Chi(tan=0.104869, x=-0.994546, y=-0.104297): 0.105104235266
    test 8061 186 186.000000000000 Xi(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266

    test 8062 186 186.026741855578 Phi(tan=0.105576, x=-1, y=-0.105576): 0.105104235266
    test 8063 186 186.006683307191 Beta(tan=0.105222, x=-1, y=-0.105222): 0.105104235266
    test 8064 186 185.986690540835 Theta(tan=0.104869, x=-1, y=-0.104869): 0.105104235266
    test 8065 186 185.996666401006 Mu(tan=0.105045, x=-0.994528, y=-0.104471), iteration=3: 0.105104235266
    test 8066 186 185.986691030201 Chi(tan=0.104869, x=-1, y=-0.104869), iteration=2: 0.105104235266
    test 8067 186 186.000000000000 Xi(tan=0.105104, x=-0.994522, y=-0.104528): 0.105104235266

    test 8068 189 189.039743358381 Phi(tan=0.159096, x=-0.98758, y=-0.15712): 0.158384440325
    test 8069 189 189.009932816166 Beta(tan=0.158562, x=-0.987661, y=-0.156606): 0.158384440325
    test 8070 189 188.980217328283 Theta(tan=0.158031, x=-0.987742, y=-0.156093): 0.158384440325
    test 8071 189 188.995045415532 Mu(tan=0.158296, x=-0.987702, y=-0.156349): 0.158384440325
    test 8072 189 188.980218957347 Chi(tan=0.158031, x=-0.987742, y=-0.156093): 0.158384440325
    test 8073 189 189.000000000000 Xi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325

    test 8074 189 189.039743358381 Phi(tan=0.159096, x=-1, y=-0.159096): 0.158384440325
    test 8075 189 189.009932816166 Beta(tan=0.158562, x=-1, y=-0.158562): 0.158384440325
    test 8076 189 188.980217328283 Theta(tan=0.158031, x=-1, y=-0.158031): 0.158384440325
    test 8077 189 188.995045415532 Mu(tan=0.158296, x=-0.987702, y=-0.156349), iteration=3: 0.158384440325
    test 8078 189 188.980218957347 Chi(tan=0.158031, x=-1, y=-0.158031), iteration=3: 0.158384440325
    test 8079 189 189.000000000000 Xi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325

    test 8080 192 192.052306224184 Phi(tan=0.213511, x=-0.977957, y=-0.208805): 0.212556561670
    test 8081 192 192.013072908209 Beta(tan=0.212795, x=-0.9781, y=-0.208135): 0.212556561670
    test 8082 192 191.973959754709 Theta(tan=0.212082, x=-0.978242, y=-0.207467): 0.212556561670
    test 8083 192 191.993478839061 Mu(tan=0.212438, x=-0.978171, y=-0.2078): 0.212556561670
    test 8084 192 191.973963542352 Chi(tan=0.212082, x=-0.978242, y=-0.207467): 0.212556561670
    test 8085 192 192.000000000000 Xi(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670

    test 8086 192 192.052306224184 Phi(tan=0.213511, x=-1, y=-0.213511): 0.212556561670
    test 8087 192 192.013072908209 Beta(tan=0.212795, x=-1, y=-0.212795): 0.212556561670
    test 8088 192 191.973959754709 Theta(tan=0.212082, x=-1, y=-0.212082): 0.212556561670
    test 8089 192 191.993478839061 Mu(tan=0.212438, x=-0.978171, y=-0.2078), iteration=3: 0.212556561670
    test 8090 192 191.973963542352 Chi(tan=0.212082, x=-1, y=-0.212082), iteration=3: 0.212556561670
    test 8091 192 192.000000000000 Xi(tan=0.212557, x=-0.978148, y=-0.207912): 0.212556561670

    test 8092 195 195.064291967519 Phi(tan=0.269152, x=-0.965635, y=-0.259903): 0.267949192431
    test 8093 195 195.016069023903 Beta(tan=0.26825, x=-0.965853, y=-0.25909): 0.267949192431
    test 8094 195 194.967986087430 Theta(tan=0.26735, x=-0.96607, y=-0.258279): 0.267949192431
    test 8095 195 194.991983868478 Mu(tan=0.267799, x=-0.965962, y=-0.258684): 0.267949192431
    test 8096 195 194.967993302979 Chi(tan=0.267351, x=-0.96607, y=-0.258279): 0.267949192431
    test 8097 195 195.000000000000 Xi(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431

    test 8098 195 195.064291967519 Phi(tan=0.269152, x=-1, y=-0.269152): 0.267949192431
    test 8099 195 195.016069023903 Beta(tan=0.26825, x=-1, y=-0.26825): 0.267949192431
    test 8100 195 194.967986087430 Theta(tan=0.26735, x=-1, y=-0.26735): 0.267949192431
    test 8101 195 194.991983868478 Mu(tan=0.267799, x=-0.965962, y=-0.258684), iteration=2: 0.267949192431
    test 8102 195 194.967993302979 Chi(tan=0.267351, x=-1, y=-0.267351), iteration=3: 0.267949192431
    test 8103 195 195.000000000000 Xi(tan=0.267949, x=-0.965926, y=-0.258819): 0.267949192431

    test 8104 198 198.075568604072 Phi(tan=0.326378, x=-0.950648, y=-0.310271): 0.324919696233
    test 8105 198 198.018888214106 Beta(tan=0.325284, x=-0.950955, y=-0.309331): 0.324919696233
    test 8106 198 197.962361544145 Theta(tan=0.324194, x=-0.951259, y=-0.308392): 0.324919696233
    test 8107 198 197.990576909174 Mu(tan=0.324738, x=-0.951107, y=-0.308861): 0.324919696233
    test 8108 198 197.962373636225 Chi(tan=0.324194, x=-0.951259, y=-0.308392): 0.324919696233
    test 8109 198 198.000000000000 Xi(tan=0.32492, x=-0.951057, y=-0.309017): 0.324919696233

    test 8110 198 198.075568604072 Phi(tan=0.326378, x=-1, y=-0.326378): 0.324919696233
    test 8111 198 198.018888214106 Beta(tan=0.325284, x=-1, y=-0.325284): 0.324919696233
    test 8112 198 197.962361544145 Theta(tan=0.324194, x=-1, y=-0.324194): 0.324919696233
    test 8113 198 197.990576909174 Mu(tan=0.324738, x=-0.951107, y=-0.308861), iteration=3: 0.324919696233
    test 8114 198 197.962373636225 Chi(tan=0.324194, x=-1, y=-0.324194), iteration=2: 0.324919696233
    test 8115 198 198.000000000000 Xi(tan=0.32492, x=-0.951057, y=-0.309017): 0.324919696233

    test 8116 201 201.086012125911 Phi(tan=0.385587, x=-0.933041, y=-0.359769): 0.383864035035
    test 8117 201 201.021499506340 Beta(tan=0.384295, x=-0.933446, y=-0.358718): 0.383864035035
    test 8118 201 200.957147588487 Theta(tan=0.383006, x=-0.933848, y=-0.35767): 0.383864035035
    test 8119 201 200.989273394164 Mu(tan=0.383649, x=-0.933648, y=-0.358193): 0.383864035035
    test 8120 201 200.957166102443 Chi(tan=0.383007, x=-0.933848, y=-0.35767): 0.383864035035
    test 8121 201 201.000000000000 Xi(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035

    test 8122 201 201.086012125911 Phi(tan=0.385587, x=-1, y=-0.385587): 0.383864035035
    test 8123 201 201.021499506340 Beta(tan=0.384295, x=-1, y=-0.384295): 0.383864035035
    test 8124 201 200.957147588487 Theta(tan=0.383006, x=-1, y=-0.383006): 0.383864035035
    test 8125 201 200.989273394164 Mu(tan=0.383649, x=-0.933648, y=-0.358193), iteration=2: 0.383864035035
    test 8126 201 200.957166102443 Chi(tan=0.383007, x=-1, y=-0.383007), iteration=2: 0.383864035035
    test 8127 201 201.000000000000 Xi(tan=0.383864, x=-0.93358, y=-0.358368): 0.383864035035

    test 8128 204 204.095507880115 Phi(tan=0.447228, x=-0.912866, y=-0.408259): 0.445228685309
    test 8129 204 204.023874247822 Beta(tan=0.445728, x=-0.913376, y=-0.407117): 0.445228685309
    test 8130 204 203.952401263615 Theta(tan=0.444234, x=-0.913883, y=-0.405978): 0.445228685309
    test 8131 204 203.988087614209 Mu(tan=0.44498, x=-0.91363, y=-0.406547): 0.445228685309
    test 8132 204 203.952427751299 Chi(tan=0.444234, x=-0.913883, y=-0.405978): 0.445228685309
    test 8133 204 204.000000000000 Xi(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309

    test 8134 204 204.095507880115 Phi(tan=0.447228, x=-1, y=-0.447228): 0.445228685309
    test 8135 204 204.023874247822 Beta(tan=0.445728, x=-1, y=-0.445728): 0.445228685309
    test 8136 204 203.952401263615 Theta(tan=0.444234, x=-1, y=-0.444234): 0.445228685309
    test 8137 204 203.988087614209 Mu(tan=0.44498, x=-0.91363, y=-0.406547), iteration=2: 0.445228685309
    test 8138 204 203.952427751299 Chi(tan=0.444234, x=-1, y=-0.444234), iteration=3: 0.445228685309
    test 8139 204 204.000000000000 Xi(tan=0.445229, x=-0.913545, y=-0.406737): 0.445228685309

    test 8140 207 207.103951834859 Phi(tan=0.511813, x=-0.890181, y=-0.455606): 0.509525449494
    test 8141 207 207.025986421242 Beta(tan=0.510097, x=-0.890801, y=-0.454395): 0.509525449494
    test 8142 207 206.948174570835 Theta(tan=0.508387, x=-0.891417, y=-0.453184): 0.509525449494
    test 8143 207 206.987032560847 Mu(tan=0.50924, x=-0.891109, y=-0.453789): 0.509525449494
    test 8144 207 206.948210496967 Chi(tan=0.508387, x=-0.891417, y=-0.453185): 0.509525449494
    test 8145 207 207.000000000000 Xi(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494

    test 8146 207 207.103951834859 Phi(tan=0.511813, x=-1, y=-0.511813): 0.509525449494
    test 8147 207 207.025986421242 Beta(tan=0.510097, x=-1, y=-0.510097): 0.509525449494
    test 8148 207 206.948174570835 Theta(tan=0.508387, x=-1, y=-0.508387): 0.509525449494
    test 8149 207 206.987032560847 Mu(tan=0.50924, x=-0.891109, y=-0.453789), iteration=3: 0.509525449494
    test 8150 207 206.948210496967 Chi(tan=0.508387, x=-1, y=-0.508387), iteration=3: 0.509525449494
    test 8151 207 207.000000000000 Xi(tan=0.509525, x=-0.891007, y=-0.45399): 0.509525449494

    test 8152 210 210.111251718648 Phi(tan=0.579942, x=-0.865053, y=-0.501681): 0.577350269190
    test 8153 210 210.027812929728 Beta(tan=0.577998, x=-0.865783, y=-0.50042): 0.577350269190
    test 8154 210 209.944513899906 Theta(tan=0.57606, x=-0.866509, y=-0.499161): 0.577350269190
    test 8155 210 209.986119784065 Mu(tan=0.577027, x=-0.866147, y=-0.49979): 0.577350269190
    test 8156 210 209.944560549356 Chi(tan=0.576061, x=-0.866509, y=-0.499162): 0.577350269190
    test 8157 210 210.000000000000 Xi(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190

    test 8158 210 210.111251718648 Phi(tan=0.579942, x=-1, y=-0.579942): 0.577350269190
    test 8159 210 210.027812929728 Beta(tan=0.577998, x=-1, y=-0.577998): 0.577350269190
    test 8160 210 209.944513899906 Theta(tan=0.57606, x=-1, y=-0.57606): 0.577350269190
    test 8161 210 209.986119784065 Mu(tan=0.577027, x=-0.866147, y=-0.49979), iteration=3: 0.577350269190
    test 8162 210 209.944560549356 Chi(tan=0.576061, x=-1, y=-0.576061), iteration=3: 0.577350269190
    test 8163 210 210.000000000000 Xi(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190

    test 8164 213 213.117328020294 Phi(tan=0.652323, x=-0.837554, y=-0.546355): 0.649407593198
    test 8165 213 213.029333847894 Beta(tan=0.650136, x=-0.838392, y=-0.545068): 0.649407593198
    test 8166 213 212.941459517261 Theta(tan=0.647956, x=-0.839227, y=-0.543782): 0.649407593198
    test 8167 213 212.985359266176 Mu(tan=0.649044, x=-0.83881, y=-0.544425): 0.649407593198
    test 8168 213 212.941517907636 Chi(tan=0.647957, x=-0.839226, y=-0.543783): 0.649407593198
    test 8169 213 213.000000000000 Xi(tan=0.649408, x=-0.838671, y=-0.544639): 0.649407593198

    test 8170 213 213.117328020294 Phi(tan=0.652323, x=-1, y=-0.652323): 0.649407593198
    test 8171 213 213.029333847894 Beta(tan=0.650136, x=-1, y=-0.650136): 0.649407593198
    test 8172 213 212.941459517261 Theta(tan=0.647956, x=-1, y=-0.647956): 0.649407593198
    test 8173 213 212.985359266176 Mu(tan=0.649044, x=-0.83881, y=-0.544425), iteration=2: 0.649407593198
    test 8174 213 212.941517907636 Chi(tan=0.647957, x=-1, y=-0.647957), iteration=3: 0.649407593198
    test 8175 213 213.000000000000 Xi(tan=0.649408, x=-0.838671, y=-0.544639): 0.649407593198

    test 8176 216 216.122114839176 Phi(tan=0.729804, x=-0.807762, y=-0.589508): 0.726542528005
    test 8177 216 216.030532636313 Beta(tan=0.727357, x=-0.808704, y=-0.588216): 0.726542528005
    test 8178 216 215.939045117908 Theta(tan=0.724918, x=-0.809642, y=-0.586924): 0.726542528005
    test 8179 216 215.984759313255 Mu(tan=0.726136, x=-0.809173, y=-0.58757): 0.726542528005
    test 8180 216 215.939115921590 Chi(tan=0.72492, x=-0.809641, y=-0.586925): 0.726542528005
    test 8181 216 216.000000000000 Xi(tan=0.726543, x=-0.809017, y=-0.587785): 0.726542528005

    test 8182 216 216.122114839176 Phi(tan=0.729804, x=-1, y=-0.729804): 0.726542528005
    test 8183 216 216.030532636313 Beta(tan=0.727357, x=-1, y=-0.727357): 0.726542528005
    test 8184 216 215.939045117908 Theta(tan=0.724918, x=-1, y=-0.724918): 0.726542528005
    test 8185 216 215.984759313255 Mu(tan=0.726136, x=-0.809173, y=-0.58757), iteration=2: 0.726542528005
    test 8186 216 215.939115921590 Chi(tan=0.72492, x=-1, y=-0.72492), iteration=3: 0.726542528005
    test 8187 216 216.000000000000 Xi(tan=0.726543, x=-0.809017, y=-0.587785): 0.726542528005

    test 8188 219 219.125560577445 Phi(tan=0.813419, x=-0.775765, y=-0.631022): 0.809784033195
    test 8189 219 219.031396317244 Beta(tan=0.810692, x=-0.776801, y=-0.629746): 0.809784033195
    test 8190 219 218.937297446215 Theta(tan=0.807974, x=-0.777834, y=-0.62847): 0.809784033195
    test 8191 219 218.984326465296 Mu(tan=0.809331, x=-0.777318, y=-0.629108): 0.809784033195
    test 8192 219 218.937380925633 Chi(tan=0.807976, x=-0.777833, y=-0.628471): 0.809784033195
    test 8193 219 219.000000000000 Xi(tan=0.809784, x=-0.777146, y=-0.62932): 0.809784033195

    test 8194 219 219.125560577445 Phi(tan=0.813419, x=-1, y=-0.813419): 0.809784033195
    test 8195 219 219.031396317244 Beta(tan=0.810692, x=-1, y=-0.810692): 0.809784033195
    test 8196 219 218.937297446215 Theta(tan=0.807974, x=-1, y=-0.807974): 0.809784033195
    test 8197 219 218.984326465296 Mu(tan=0.809331, x=-0.777318, y=-0.629108), iteration=3: 0.809784033195
    test 8198 219 218.937380925633 Chi(tan=0.807976, x=-1, y=-0.807976), iteration=2: 0.809784033195
    test 8199 219 219.000000000000 Xi(tan=0.809784, x=-0.777146, y=-0.62932): 0.809784033195

    test 8200 222 222.127628467909 Phi(tan=0.904446, x=-0.741652, y=-0.670784): 0.900404044298
    test 8201 222 222.031915609918 Beta(tan=0.901413, x=-0.742772, y=-0.669544): 0.900404044298
    test 8202 222 221.936235990174 Theta(tan=0.898391, x=-0.743889, y=-0.668303): 0.900404044298
    test 8203 222 221.984065426020 Mu(tan=0.899901, x=-0.743331, y=-0.668924): 0.900404044298
    test 8204 222 221.936331949525 Chi(tan=0.898394, x=-0.743888, y=-0.668304): 0.900404044298
    test 8205 222 222.000000000000 Xi(tan=0.900404, x=-0.743145, y=-0.669131): 0.900404044298

    test 8206 222 222.127628467909 Phi(tan=0.904446, x=-1, y=-0.904446): 0.900404044298
    test 8207 222 222.031915609918 Beta(tan=0.901413, x=-1, y=-0.901413): 0.900404044298
    test 8208 222 221.936235990174 Theta(tan=0.898391, x=-1, y=-0.898391): 0.900404044298
    test 8209 222 221.984065426020 Mu(tan=0.899901, x=-0.743331, y=-0.668924), iteration=2: 0.900404044298
    test 8210 222 221.936331949525 Chi(tan=0.898394, x=-1, y=-0.898394), iteration=3: 0.900404044298
    test 8211 222 222.000000000000 Xi(tan=0.900404, x=-0.743145, y=-0.669131): 0.900404044298

    test 8212 225 225.128296933521 Phi(tan=1.00449, x=-0.705522, y=-0.708688): 1.000000000000
    test 8213 225 225.032085024228 Beta(tan=1.00112, x=-0.706711, y=-0.707503): 1.000000000000
    test 8214 225 224.935872753045 Theta(tan=0.997764, x=-0.707898, y=-0.706315): 1.000000000000
    test 8215 225 224.983979013031 Mu(tan=0.999441, x=-0.707304, y=-0.706909): 1.000000000000
    test 8216 225 224.935980508977 Chi(tan=0.997768, x=-0.707896, y=-0.706316): 1.000000000000
    test 8217 225 225.000000000000 Xi(tan=1.0, x=-0.707107, y=-0.707107): 1.000000000000

    test 8218 225 225.128296933521 Phi(tan=1.00449, x=-1, y=-1.00449): 1.000000000000
    test 8219 225 225.032085024228 Beta(tan=1.00112, x=-1, y=-1.00112): 1.000000000000
    test 8220 225 224.935872753045 Theta(tan=0.997764, x=-1, y=-0.997764): 1.000000000000
    test 8221 225 224.983979013031 Mu(tan=0.999441, x=-0.707304, y=-0.706909), iteration=2: 1.000000000000
    test 8222 225 224.935980508977 Chi(tan=0.997768, x=-1, y=-0.997768), iteration=3: 1.000000000000
    test 8223 225 225.000000000000 Xi(tan=1.0, x=-0.707107, y=-0.707107): 1.000000000000

    test 8224 228 228.127559776414 Phi(tan=1.1156, x=-0.667474, y=-0.744633): 1.110612514829
    test 8225 228 228.031902912136 Beta(tan=1.11186, x=-0.668717, y=-0.743517): 1.110612514829
    test 8226 228 227.936212105525 Theta(tan=1.10813, x=-0.669958, y=-0.742399): 1.110612514829
    test 8227 228 227.984068128807 Mu(tan=1.10999, x=-0.669337, y=-0.742959): 1.110612514829
    test 8228 228 227.936330478490 Chi(tan=1.10813, x=-0.669956, y=-0.742401): 1.110612514829
    test 8229 228 228.000000000000 Xi(tan=1.11061, x=-0.669131, y=-0.743145): 1.110612514829

    test 8230 228 228.127559776414 Phi(tan=1.1156, x=-1, y=-1.1156): 1.110612514829
    test 8231 228 228.031902912136 Beta(tan=1.11186, x=-1, y=-1.11186): 1.110612514829
    test 8232 228 227.936212105525 Theta(tan=1.10813, x=-1, y=-1.10813): 1.110612514829
    test 8233 228 227.984068128807 Mu(tan=1.10999, x=-0.669337, y=-0.742959), iteration=3: 1.110612514829
    test 8234 228 227.936330478490 Chi(tan=1.10813, x=-1, y=-1.10813), iteration=2: 1.110612514829
    test 8235 228 228.000000000000 Xi(tan=1.11061, x=-0.669131, y=-0.743145): 1.110612514829

    test 8236 231 231.125426196540 Phi(tan=1.24044, x=-0.627618, y=-0.778522): 1.234897156535
    test 8237 231 231.031371476626 Beta(tan=1.23628, x=-0.628895, y=-0.77749): 1.234897156535
    test 8238 231 230.937250720782 Theta(tan=1.23214, x=-0.630171, y=-0.776456): 1.234897156535
    test 8239 231 230.984331752747 Mu(tan=1.23421, x=-0.629533, y=-0.776974): 1.234897156535
    test 8240 231 230.937378047856 Chi(tan=1.23214, x=-0.630169, y=-0.776458): 1.234897156535
    test 8241 231 231.000000000000 Xi(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535

    test 8242 231 231.125426196540 Phi(tan=1.24044, x=-1, y=-1.24044): 1.234897156535
    test 8243 231 231.031371476626 Beta(tan=1.23628, x=-1, y=-1.23628): 1.234897156535
    test 8244 231 230.937250720782 Theta(tan=1.23214, x=-1, y=-1.23214): 1.234897156535
    test 8245 231 230.984331752747 Mu(tan=1.23421, x=-0.629533, y=-0.776974), iteration=3: 1.234897156535
    test 8246 231 230.937378047856 Chi(tan=1.23214, x=-1, y=-1.23214), iteration=2: 1.234897156535
    test 8247 231 231.000000000000 Xi(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535

    test 8248 234 234.121920641841 Phi(tan=1.38256, x=-0.586062, y=-0.810266): 1.376381920471
    test 8249 234 234.030496738498 Beta(tan=1.37792, x=-0.587355, y=-0.80933): 1.376381920471
    test 8250 234 233.938977593805 Theta(tan=1.3733, x=-0.588647, y=-0.808391): 1.376381920471
    test 8251 234 233.984766954283 Mu(tan=1.37561, x=-0.588, y=-0.808861): 1.376381920471
    test 8252 234 233.939111762844 Chi(tan=1.37331, x=-0.588645, y=-0.808392): 1.376381920471
    test 8253 234 234.000000000000 Xi(tan=1.37638, x=-0.587785, y=-0.809017): 1.376381920471

    test 8254 234 234.121920641841 Phi(tan=1.38256, x=-1, y=-1.38256): 1.376381920471
    test 8255 234 234.030496738498 Beta(tan=1.37792, x=-1, y=-1.37792): 1.376381920471
    test 8256 234 233.938977593805 Theta(tan=1.3733, x=-1, y=-1.3733): 1.376381920471
    test 8257 234 233.984766954283 Mu(tan=1.37561, x=-0.588, y=-0.808861), iteration=3: 1.376381920471
    test 8258 234 233.939111762844 Chi(tan=1.37331, x=-1, y=-1.37331), iteration=2: 1.376381920471
    test 8259 234 234.000000000000 Xi(tan=1.37638, x=-0.587785, y=-0.809017): 1.376381920471

    test 8260 237 237.117082493740 Phi(tan=1.54678, x=-0.542924, y=-0.839782): 1.539864963815
    test 8261 237 237.029288461770 Beta(tan=1.54159, x=-0.54421, y=-0.838949): 1.539864963815
    test 8262 237 236.941374145597 Theta(tan=1.53642, x=-0.545497, y=-0.838113): 1.539864963815
    test 8263 237 236.985368926835 Mu(tan=1.539, x=-0.544853, y=-0.838531): 1.539864963815
    test 8264 237 236.941512649681 Chi(tan=1.53643, x=-0.545495, y=-0.838114): 1.539864963815
    test 8265 237 237.000000000000 Xi(tan=1.53986, x=-0.544639, y=-0.838671): 1.539864963815

    test 8266 237 237.117082493740 Phi(tan=1.54678, x=-1, y=-1.54678): 1.539864963815
    test 8267 237 237.029288461770 Beta(tan=1.54159, x=-1, y=-1.54159): 1.539864963815
    test 8268 237 236.941374145597 Theta(tan=1.53642, x=-1, y=-1.53642): 1.539864963815
    test 8269 237 236.985368926835 Mu(tan=1.539, x=-0.544853, y=-0.838531), iteration=3: 1.539864963815
    test 8270 237 236.941512649681 Chi(tan=1.53643, x=-1, y=-1.53643), iteration=2: 1.539864963815
    test 8271 237 237.000000000000 Xi(tan=1.53986, x=-0.544639, y=-0.838671): 1.539864963815

    test 8272 240 240.110965593414 Phi(tan=1.73982, x=-0.498322, y=-0.866992): 1.732050807569
    test 8273 240 240.027760038868 Beta(tan=1.73399, x=-0.49958, y=-0.866268): 1.732050807569
    test 8274 240 239.944414411815 Theta(tan=1.72818, x=-0.50084, y=-0.86554): 1.732050807569
    test 8275 240 239.986131042139 Mu(tan=1.73108, x=-0.50021, y=-0.865904): 1.732050807569
    test 8276 240 239.944554421991 Chi(tan=1.72819, x=-0.500838, y=-0.865541): 1.732050807569
    test 8277 240 240.000000000000 Xi(tan=1.73205, x=-0.5, y=-0.866025): 1.732050807569

    test 8278 240 240.110965593414 Phi(tan=1.73982, x=-1, y=-1.73982): 1.732050807569
    test 8279 240 240.027760038868 Beta(tan=1.73399, x=-1, y=-1.73399): 1.732050807569
    test 8280 240 239.944414411815 Theta(tan=1.72818, x=-1, y=-1.72818): 1.732050807569
    test 8281 240 239.986131042139 Mu(tan=1.73108, x=-0.50021, y=-0.865904), iteration=2: 1.732050807569
    test 8282 240 239.944554421991 Chi(tan=1.72819, x=-1, y=-1.72819), iteration=3: 1.732050807569
    test 8283 240 240.000000000000 Xi(tan=1.73205, x=-0.5, y=-0.866025): 1.732050807569

    test 8284 243 243.103637615859 Phi(tan=1.97142, x=-0.452378, y=-0.891826): 1.962610505505
    test 8285 243 243.025928337212 Beta(tan=1.96481, x=-0.453587, y=-0.891212): 1.962610505505
    test 8286 243 242.948065314408 Theta(tan=1.95822, x=-0.454798, y=-0.890595): 1.962610505505
    test 8287 243 242.987044924306 Mu(tan=1.96151, x=-0.454192, y=-0.890904): 1.962610505505
    test 8288 243 242.948203767989 Chi(tan=1.95823, x=-0.454796, y=-0.890596): 1.962610505505
    test 8289 243 243.000000000000 Xi(tan=1.96261, x=-0.45399, y=-0.891007): 1.962610505505

    test 8290 243 243.103637615859 Phi(tan=1.97142, x=-1, y=-1.97142): 1.962610505505
    test 8291 243 243.025928337212 Beta(tan=1.96481, x=-1, y=-1.96481): 1.962610505505
    test 8292 243 242.948065314408 Theta(tan=1.95822, x=-1, y=-1.95822): 1.962610505505
    test 8293 243 242.987044924306 Mu(tan=1.96151, x=-0.454192, y=-0.890904), iteration=2: 1.962610505505
    test 8294 243 242.948203767989 Chi(tan=1.95823, x=-1, y=-1.95823), iteration=3: 1.962610505505
    test 8295 243 243.000000000000 Xi(tan=1.96261, x=-0.45399, y=-0.891007): 1.962610505505

    test 8296 246 246.095179300139 Phi(tan=2.25612, x=-0.405219, y=-0.91422): 2.246036773904
    test 8297 246 246.023813509162 Beta(tan=2.24855, x=-0.406357, y=-0.913714): 2.246036773904
    test 8298 246 245.952287013872 Theta(tan=2.24101, x=-0.407497, y=-0.913206): 2.246036773904
    test 8299 246 245.988100542712 Mu(tan=2.24478, x=-0.406926, y=-0.913461): 2.246036773904
    test 8300 246 245.952420714799 Chi(tan=2.24103, x=-0.407495, y=-0.913207): 2.246036773904
    test 8301 246 246.000000000000 Xi(tan=2.24604, x=-0.406737, y=-0.913545): 2.246036773904

    test 8302 246 246.095179300139 Phi(tan=2.25612, x=-1, y=-2.25612): 2.246036773904
    test 8303 246 246.023813509162 Beta(tan=2.24855, x=-1, y=-2.24855): 2.246036773904
    test 8304 246 245.952287013872 Theta(tan=2.24101, x=-1, y=-2.24101): 2.246036773904
    test 8305 246 245.988100542712 Mu(tan=2.24478, x=-0.406926, y=-0.913461), iteration=3: 2.246036773904
    test 8306 246 245.952420714799 Chi(tan=2.24103, x=-1, y=-2.24103), iteration=3: 2.246036773904
    test 8307 246 246.000000000000 Xi(tan=2.24604, x=-0.406737, y=-0.913545): 2.246036773904

    test 8308 249 249.085683545448 Phi(tan=2.61678, x=-0.356971, y=-0.934115): 2.605089064694
    test 8309 249 249.021438767616 Beta(tan=2.60801, x=-0.358019, y=-0.933714): 2.605089064694
    test 8310 249 248.957033338687 Theta(tan=2.59926, x=-0.359068, y=-0.933311): 2.605089064694
    test 8311 249 248.989286322673 Mu(tan=2.60363, x=-0.358543, y=-0.933513): 2.605089064694
    test 8312 249 248.957159065949 Chi(tan=2.59928, x=-0.359066, y=-0.933312): 2.605089064694
    test 8313 249 249.000000000000 Xi(tan=2.60509, x=-0.358368, y=-0.93358): 2.605089064694

    test 8314 249 249.085683545448 Phi(tan=2.61678, x=-1, y=-2.61678): 2.605089064694
    test 8315 249 249.021438767616 Beta(tan=2.60801, x=-1, y=-2.60801): 2.605089064694
    test 8316 249 248.957033338687 Theta(tan=2.59926, x=-1, y=-2.59926): 2.605089064694
    test 8317 249 248.989286322673 Mu(tan=2.60363, x=-0.358543, y=-0.933513), iteration=3: 2.605089064694
    test 8318 249 248.957159065949 Chi(tan=2.59928, x=-1, y=-2.59928), iteration=2: 2.605089064694
    test 8319 249 249.000000000000 Xi(tan=2.60509, x=-0.358368, y=-0.93358): 2.605089064694

    test 8320 252 252.075254383698 Phi(tan=3.09149, x=-0.307768, y=-0.951462): 3.077683537175
    test 8321 252 252.018830129897 Beta(tan=3.08113, x=-0.308704, y=-0.951158): 3.077683537175
    test 8322 252 251.962252287555 Theta(tan=3.0708, x=-0.309644, y=-0.950853): 3.077683537175
    test 8323 252 251.990589272651 Mu(tan=3.07596, x=-0.309173, y=-0.951006): 3.077683537175
    test 8324 252 251.962366907267 Chi(tan=3.07082, x=-0.309642, y=-0.950853): 3.077683537175
    test 8325 252 252.000000000000 Xi(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175

    test 8326 252 252.075254383698 Phi(tan=3.09149, x=-1, y=-3.09149): 3.077683537175
    test 8327 252 252.018830129897 Beta(tan=3.08113, x=-1, y=-3.08113): 3.077683537175
    test 8328 252 251.962252287555 Theta(tan=3.0708, x=-1, y=-3.0708): 3.077683537175
    test 8329 252 251.990589272651 Mu(tan=3.07596, x=-0.309173, y=-0.951006), iteration=2: 3.077683537175
    test 8330 252 251.962366907267 Chi(tan=3.07082, x=-1, y=-3.07082), iteration=3: 3.077683537175
    test 8331 252 252.000000000000 Xi(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175

    test 8332 255 255.064005840259 Phi(tan=3.7488, x=-0.25774, y=-0.966214): 3.732050807569
    test 8333 255 255.016016132778 Beta(tan=3.73623, x=-0.258549, y=-0.965998): 3.732050807569
    test 8334 255 254.967886599098 Theta(tan=3.7237, x=-0.25936, y=-0.965781): 3.732050807569
    test 8335 255 254.991995126578 Mu(tan=3.72997, x=-0.258954, y=-0.96589): 3.732050807569
    test 8336 255 254.967987175642 Chi(tan=3.72373, x=-0.259359, y=-0.965781): 3.732050807569
    test 8337 255 255.000000000000 Xi(tan=3.73205, x=-0.258819, y=-0.965926): 3.732050807569

    test 8338 255 255.064005840259 Phi(tan=3.7488, x=-1, y=-3.7488): 3.732050807569
    test 8339 255 255.016016132778 Beta(tan=3.73623, x=-1, y=-3.73623): 3.732050807569
    test 8340 255 254.967886599098 Theta(tan=3.7237, x=-1, y=-3.7237): 3.732050807569
    test 8341 255 254.991995126578 Mu(tan=3.72997, x=-0.258954, y=-0.96589), iteration=3: 3.732050807569
    test 8342 255 254.967987175642 Chi(tan=3.72373, x=-1, y=-3.72373), iteration=3: 3.732050807569
    test 8343 255 255.000000000000 Xi(tan=3.73205, x=-0.258819, y=-0.965926): 3.732050807569

    test 8344 258 258.052060695305 Phi(tan=4.72574, x=-0.207023, y=-0.978336): 4.704630109478
    test 8345 258 258.013027521782 Beta(tan=4.7099, x=-0.207689, y=-0.978195): 4.704630109478
    test 8346 258 257.973874382769 Theta(tan=4.6941, x=-0.208358, y=-0.978053): 4.704630109478
    test 8347 258 257.993488499751 Mu(tan=4.702, x=-0.208023, y=-0.978124): 4.704630109478
    test 8348 258 257.973958284429 Chi(tan=4.69414, x=-0.208356, y=-0.978053): 4.704630109478
    test 8349 258 258.000000000000 Xi(tan=4.70463, x=-0.207912, y=-0.978148): 4.704630109478

    test 8350 258 258.052060695305 Phi(tan=4.72574, x=-1, y=-4.72574): 4.704630109478
    test 8351 258 258.013027521782 Beta(tan=4.7099, x=-1, y=-4.7099): 4.704630109478
    test 8352 258 257.973874382769 Theta(tan=4.6941, x=-1, y=-4.6941): 4.704630109478
    test 8353 258 257.993488499751 Mu(tan=4.702, x=-0.208023, y=-0.978124), iteration=3: 4.704630109478
    test 8354 258 257.973958284429 Chi(tan=4.69414, x=-1, y=-4.69414), iteration=3: 4.704630109478
    test 8355 258 258.000000000000 Xi(tan=4.70463, x=-0.207912, y=-0.978148): 4.704630109478

    test 8356 261 261.039549158822 Phi(tan=6.34208, x=-0.155753, y=-0.987796): 6.313751514675
    test 8357 261 261.009896918061 Beta(tan=6.32082, x=-0.156264, y=-0.987715): 6.313751514675
    test 8358 261 260.980149803915 Theta(tan=6.29963, x=-0.156777, y=-0.987634): 6.313751514675
    test 8359 261 260.995053056590 Mu(tan=6.31023, x=-0.15652, y=-0.987675): 6.313751514675
    test 8360 261 260.980214798632 Chi(tan=6.29967, x=-0.156776, y=-0.987634): 6.313751514675
    test 8361 261 261.000000000000 Xi(tan=6.31375, x=-0.156434, y=-0.987688): 6.313751514675

    test 8362 261 261.039549158822 Phi(tan=6.34208, x=-1, y=-6.34208): 6.313751514675
    test 8363 261 261.009896918061 Beta(tan=6.32082, x=-1, y=-6.32082): 6.313751514675
    test 8364 261 260.980149803915 Theta(tan=6.29963, x=-1, y=-6.29963): 6.313751514675
    test 8365 261 260.995053056590 Mu(tan=6.31023, x=-0.15652, y=-0.987675), iteration=3: 6.313751514675
    test 8366 261 260.980214798632 Chi(tan=6.29967, x=-1, y=-6.29967), iteration=3: 6.313751514675
    test 8367 261 261.000000000000 Xi(tan=6.31375, x=-0.156434, y=-0.987688): 6.313751514675

    test 8368 264 264.026607472936 Phi(tan=9.55706, x=-0.104067, y=-0.99457): 9.514364454223
    test 8369 264 264.006658466345 Beta(tan=9.52501, x=-0.104413, y=-0.994534): 9.514364454223
    test 8370 264 263.986643815196 Theta(tan=9.49308, x=-0.10476, y=-0.994498): 9.514364454223
    test 8371 264 263.996671688480 Mu(tan=9.50905, x=-0.104586, y=-0.994516): 9.514364454223
    test 8372 264 263.986688152448 Chi(tan=9.49315, x=-0.10476, y=-0.994498): 9.514364454223
    test 8373 264 264.000000000000 Xi(tan=9.51436, x=-0.104528, y=-0.994522): 9.514364454223

    test 8374 264 264.026607472936 Phi(tan=9.55706, x=-1, y=-9.55706): 9.514364454223
    test 8375 264 264.006658466345 Beta(tan=9.52501, x=-1, y=-9.52501): 9.514364454223
    test 8376 264 263.986643815196 Theta(tan=9.49308, x=-1, y=-9.49308): 9.514364454223
    test 8377 264 263.996671688480 Mu(tan=9.50905, x=-0.104586, y=-0.994516), iteration=2: 9.514364454223
    test 8378 264 263.986688152448 Chi(tan=9.49315, x=-1, y=-9.49315), iteration=3: 9.514364454223
    test 8379 264 264.000000000000 Xi(tan=9.51436, x=-0.104528, y=-0.994522): 9.514364454223

    test 8380 267 267.013376455595 Phi(tan=19.1668, x=-0.0521028, y=-0.998642): 19.081136687728
    test 8381 267 267.003347467582 Beta(tan=19.1025, x=-0.0522776, y=-0.998633): 19.081136687728
    test 8382 267 266.993284925872 Theta(tan=19.0384, x=-0.052453, y=-0.998623): 19.081136687728
    test 8383 267 266.998326699774 Mu(tan=19.0705, x=-0.0523651, y=-0.998628): 19.081136687728
    test 8384 267 266.993307401289 Chi(tan=19.0386, x=-0.0524526, y=-0.998623): 19.081136687728
    test 8385 267 267.000000000000 Xi(tan=19.0811, x=-0.052336, y=-0.99863): 19.081136687728

    test 8386 267 267.013376455595 Phi(tan=19.1668, x=-1, y=-19.1668): 19.081136687728
    test 8387 267 267.003347467582 Beta(tan=19.1025, x=-1, y=-19.1025): 19.081136687728
    test 8388 267 266.993284925872 Theta(tan=19.0384, x=-1, y=-19.0384): 19.081136687728
    test 8389 267 266.998326699774 Mu(tan=19.0705, x=-0.0523651, y=-0.998628), iteration=3: 19.081136687728
    test 8390 267 266.993307401289 Chi(tan=19.0386, x=-1, y=-19.0386), iteration=3: 19.081136687728
    test 8391 267 267.000000000000 Xi(tan=19.0811, x=-0.052336, y=-0.99863): 19.081136687728

    test 8392 270 270.000000000000 Phi(tan=-inf, x=0.0, y=-1): -inf
    test 8393 270 270.000000000000 Beta(tan=-inf, x=0.0, y=-1): -inf
    test 8394 270 270.000000000000 Theta(tan=-inf, x=0.0, y=-1): -inf
    test 8395 270 270.000000000000 Mu(tan=-inf, x=0.0, y=-1): -inf
    test 8396 270 270.000000000000 Chi(tan=-inf, x=0.0, y=-1): -inf
    test 8397 270 270.000000000000 Xi(tan=-inf, x=0.0, y=-1): -inf

    test 8398 270 270.000000000000 Phi(tan=-inf, x=0.0, y=-1): -inf
    test 8399 270 270.000000000000 Beta(tan=-inf, x=0.0, y=-1): -inf
    test 8400 270 270.000000000000 Theta(tan=-inf, x=0.0, y=-1): -inf
    test 8401 270 270.000000000000 Mu(tan=-inf, x=0.0, y=-1): -inf
    test 8402 270 270.000000000000 Chi(tan=-inf, x=0.0, y=-1): -inf
    test 8403 270 270.000000000000 Xi(tan=-inf, x=0.0, y=-1): -inf

    test 8404 273 272.986623544405 Phi(tan=-19.1668, x=0.0521028, y=-0.998642): -19.081136687728
    test 8405 273 272.996652532418 Beta(tan=-19.1025, x=0.0522776, y=-0.998633): -19.081136687728
    test 8406 273 273.006715074128 Theta(tan=-19.0384, x=0.052453, y=-0.998623): -19.081136687728
    test 8407 273 273.001673300226 Mu(tan=-19.0705, x=0.0523651, y=-0.998628): -19.081136687728
    test 8408 273 273.006692598711 Chi(tan=-19.0386, x=0.0524526, y=-0.998623): -19.081136687728
    test 8409 273 273.000000000000 Xi(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728

    test 8410 273 272.986623544405 Phi(tan=-19.1668, x=1.0, y=-19.1668): -19.081136687728
    test 8411 273 272.996652532418 Beta(tan=-19.1025, x=1.0, y=-19.1025): -19.081136687728
    test 8412 273 273.006715074128 Theta(tan=-19.0384, x=1.0, y=-19.0384): -19.081136687728
    test 8413 273 273.001673300226 Mu(tan=-19.0705, x=0.0523651, y=-0.998628), iteration=2: -19.081136687728
    test 8414 273 273.006692598711 Chi(tan=-19.0386, x=1.0, y=-19.0386), iteration=3: -19.081136687728
    test 8415 273 273.000000000000 Xi(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728

    test 8416 276 275.973392527064 Phi(tan=-9.55706, x=0.104067, y=-0.99457): -9.514364454223
    test 8417 276 275.993341533655 Beta(tan=-9.52501, x=0.104413, y=-0.994534): -9.514364454223
    test 8418 276 276.013356184804 Theta(tan=-9.49308, x=0.10476, y=-0.994498): -9.514364454223
    test 8419 276 276.003328311520 Mu(tan=-9.50905, x=0.104586, y=-0.994516): -9.514364454223
    test 8420 276 276.013311847552 Chi(tan=-9.49315, x=0.10476, y=-0.994498): -9.514364454223
    test 8421 276 276.000000000000 Xi(tan=-9.51436, x=0.104528, y=-0.994522): -9.514364454223

    test 8422 276 275.973392527064 Phi(tan=-9.55706, x=1.0, y=-9.55706): -9.514364454223
    test 8423 276 275.993341533655 Beta(tan=-9.52501, x=1.0, y=-9.52501): -9.514364454223
    test 8424 276 276.013356184804 Theta(tan=-9.49308, x=1.0, y=-9.49308): -9.514364454223
    test 8425 276 276.003328311520 Mu(tan=-9.50905, x=0.104586, y=-0.994516), iteration=2: -9.514364454223
    test 8426 276 276.013311847552 Chi(tan=-9.49315, x=1.0, y=-9.49315), iteration=3: -9.514364454223
    test 8427 276 276.000000000000 Xi(tan=-9.51436, x=0.104528, y=-0.994522): -9.514364454223

    test 8428 279 278.960450841178 Phi(tan=-6.34208, x=0.155753, y=-0.987796): -6.313751514675
    test 8429 279 278.990103081939 Beta(tan=-6.32082, x=0.156264, y=-0.987715): -6.313751514675
    test 8430 279 279.019850196085 Theta(tan=-6.29963, x=0.156777, y=-0.987634): -6.313751514675
    test 8431 279 279.004946943410 Mu(tan=-6.31023, x=0.15652, y=-0.987675): -6.313751514675
    test 8432 279 279.019785201368 Chi(tan=-6.29967, x=0.156776, y=-0.987634): -6.313751514675
    test 8433 279 279.000000000000 Xi(tan=-6.31375, x=0.156434, y=-0.987688): -6.313751514675

    test 8434 279 278.960450841178 Phi(tan=-6.34208, x=1.0, y=-6.34208): -6.313751514675
    test 8435 279 278.990103081939 Beta(tan=-6.32082, x=1.0, y=-6.32082): -6.313751514675
    test 8436 279 279.019850196085 Theta(tan=-6.29963, x=1.0, y=-6.29963): -6.313751514675
    test 8437 279 279.004946943410 Mu(tan=-6.31023, x=0.15652, y=-0.987675), iteration=3: -6.313751514675
    test 8438 279 279.019785201368 Chi(tan=-6.29967, x=1.0, y=-6.29967), iteration=3: -6.313751514675
    test 8439 279 279.000000000000 Xi(tan=-6.31375, x=0.156434, y=-0.987688): -6.313751514675

    test 8440 282 281.947939304695 Phi(tan=-4.72574, x=0.207023, y=-0.978336): -4.704630109478
    test 8441 282 281.986972478218 Beta(tan=-4.7099, x=0.207689, y=-0.978195): -4.704630109478
    test 8442 282 282.026125617231 Theta(tan=-4.6941, x=0.208358, y=-0.978053): -4.704630109478
    test 8443 282 282.006511500249 Mu(tan=-4.702, x=0.208023, y=-0.978124): -4.704630109478
    test 8444 282 282.026041715571 Chi(tan=-4.69414, x=0.208356, y=-0.978053): -4.704630109478
    test 8445 282 282.000000000000 Xi(tan=-4.70463, x=0.207912, y=-0.978148): -4.704630109478

    test 8446 282 281.947939304695 Phi(tan=-4.72574, x=1.0, y=-4.72574): -4.704630109478
    test 8447 282 281.986972478218 Beta(tan=-4.7099, x=1.0, y=-4.7099): -4.704630109478
    test 8448 282 282.026125617231 Theta(tan=-4.6941, x=1.0, y=-4.6941): -4.704630109478
    test 8449 282 282.006511500249 Mu(tan=-4.702, x=0.208023, y=-0.978124), iteration=3: -4.704630109478
    test 8450 282 282.026041715571 Chi(tan=-4.69414, x=1.0, y=-4.69414), iteration=3: -4.704630109478
    test 8451 282 282.000000000000 Xi(tan=-4.70463, x=0.207912, y=-0.978148): -4.704630109478

    test 8452 285 284.935994159741 Phi(tan=-3.7488, x=0.25774, y=-0.966214): -3.732050807569
    test 8453 285 284.983983867222 Beta(tan=-3.73623, x=0.258549, y=-0.965998): -3.732050807569
    test 8454 285 285.032113400902 Theta(tan=-3.7237, x=0.25936, y=-0.965781): -3.732050807569
    test 8455 285 285.008004873422 Mu(tan=-3.72997, x=0.258954, y=-0.96589): -3.732050807569
    test 8456 285 285.032012824358 Chi(tan=-3.72373, x=0.259359, y=-0.965781): -3.732050807569
    test 8457 285 285.000000000000 Xi(tan=-3.73205, x=0.258819, y=-0.965926): -3.732050807569

    test 8458 285 284.935994159741 Phi(tan=-3.7488, x=1.0, y=-3.7488): -3.732050807569
    test 8459 285 284.983983867222 Beta(tan=-3.73623, x=1.0, y=-3.73623): -3.732050807569
    test 8460 285 285.032113400902 Theta(tan=-3.7237, x=1.0, y=-3.7237): -3.732050807569
    test 8461 285 285.008004873422 Mu(tan=-3.72997, x=0.258954, y=-0.96589), iteration=3: -3.732050807569
    test 8462 285 285.032012824358 Chi(tan=-3.72373, x=1.0, y=-3.72373), iteration=3: -3.732050807569
    test 8463 285 285.000000000000 Xi(tan=-3.73205, x=0.258819, y=-0.965926): -3.732050807569

    test 8464 288 287.924745616302 Phi(tan=-3.09149, x=0.307768, y=-0.951462): -3.077683537175
    test 8465 288 287.981169870103 Beta(tan=-3.08113, x=0.308704, y=-0.951158): -3.077683537175
    test 8466 288 288.037747712445 Theta(tan=-3.0708, x=0.309644, y=-0.950853): -3.077683537175
    test 8467 288 288.009410727349 Mu(tan=-3.07596, x=0.309173, y=-0.951006): -3.077683537175
    test 8468 288 288.037633092733 Chi(tan=-3.07082, x=0.309642, y=-0.950853): -3.077683537175
    test 8469 288 288.000000000000 Xi(tan=-3.07768, x=0.309017, y=-0.951057): -3.077683537175

    test 8470 288 287.924745616302 Phi(tan=-3.09149, x=1.0, y=-3.09149): -3.077683537175
    test 8471 288 287.981169870103 Beta(tan=-3.08113, x=1.0, y=-3.08113): -3.077683537175
    test 8472 288 288.037747712445 Theta(tan=-3.0708, x=1.0, y=-3.0708): -3.077683537175
    test 8473 288 288.009410727349 Mu(tan=-3.07596, x=0.309173, y=-0.951006), iteration=2: -3.077683537175
    test 8474 288 288.037633092733 Chi(tan=-3.07082, x=1.0, y=-3.07082), iteration=3: -3.077683537175
    test 8475 288 288.000000000000 Xi(tan=-3.07768, x=0.309017, y=-0.951057): -3.077683537175

    test 8476 291 290.914316454552 Phi(tan=-2.61678, x=0.356971, y=-0.934115): -2.605089064694
    test 8477 291 290.978561232384 Beta(tan=-2.60801, x=0.358019, y=-0.933714): -2.605089064694
    test 8478 291 291.042966661313 Theta(tan=-2.59926, x=0.359068, y=-0.933311): -2.605089064694
    test 8479 291 291.010713677327 Mu(tan=-2.60363, x=0.358543, y=-0.933513): -2.605089064694
    test 8480 291 291.042840934051 Chi(tan=-2.59928, x=0.359066, y=-0.933312): -2.605089064694
    test 8481 291 291.000000000000 Xi(tan=-2.60509, x=0.358368, y=-0.93358): -2.605089064694

    test 8482 291 290.914316454552 Phi(tan=-2.61678, x=1.0, y=-2.61678): -2.605089064694
    test 8483 291 290.978561232384 Beta(tan=-2.60801, x=1.0, y=-2.60801): -2.605089064694
    test 8484 291 291.042966661313 Theta(tan=-2.59926, x=1.0, y=-2.59926): -2.605089064694
    test 8485 291 291.010713677327 Mu(tan=-2.60363, x=0.358543, y=-0.933513), iteration=3: -2.605089064694
    test 8486 291 291.042840934051 Chi(tan=-2.59928, x=1.0, y=-2.59928), iteration=3: -2.605089064694
    test 8487 291 291.000000000000 Xi(tan=-2.60509, x=0.358368, y=-0.93358): -2.605089064694

    test 8488 294 293.904820699861 Phi(tan=-2.25612, x=0.405219, y=-0.91422): -2.246036773904
    test 8489 294 293.976186490838 Beta(tan=-2.24855, x=0.406357, y=-0.913714): -2.246036773904
    test 8490 294 294.047712986128 Theta(tan=-2.24101, x=0.407497, y=-0.913206): -2.246036773904
    test 8491 294 294.011899457288 Mu(tan=-2.24478, x=0.406926, y=-0.913461): -2.246036773904
    test 8492 294 294.047579285201 Chi(tan=-2.24103, x=0.407495, y=-0.913207): -2.246036773904
    test 8493 294 294.000000000000 Xi(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904

    test 8494 294 293.904820699861 Phi(tan=-2.25612, x=1.0, y=-2.25612): -2.246036773904
    test 8495 294 293.976186490838 Beta(tan=-2.24855, x=1.0, y=-2.24855): -2.246036773904
    test 8496 294 294.047712986128 Theta(tan=-2.24101, x=1.0, y=-2.24101): -2.246036773904
    test 8497 294 294.011899457288 Mu(tan=-2.24478, x=0.406926, y=-0.913461), iteration=3: -2.246036773904
    test 8498 294 294.047579285201 Chi(tan=-2.24103, x=1.0, y=-2.24103), iteration=3: -2.246036773904
    test 8499 294 294.000000000000 Xi(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904

    test 8500 297 296.896362384141 Phi(tan=-1.97142, x=0.452378, y=-0.891826): -1.962610505505
    test 8501 297 296.974071662788 Beta(tan=-1.96481, x=0.453587, y=-0.891212): -1.962610505505
    test 8502 297 297.051934685592 Theta(tan=-1.95822, x=0.454798, y=-0.890595): -1.962610505505
    test 8503 297 297.012955075694 Mu(tan=-1.96151, x=0.454192, y=-0.890904): -1.962610505505
    test 8504 297 297.051796232011 Chi(tan=-1.95823, x=0.454796, y=-0.890596): -1.962610505505
    test 8505 297 297.000000000000 Xi(tan=-1.96261, x=0.45399, y=-0.891007): -1.962610505505

    test 8506 297 296.896362384141 Phi(tan=-1.97142, x=1.0, y=-1.97142): -1.962610505505
    test 8507 297 296.974071662788 Beta(tan=-1.96481, x=1.0, y=-1.96481): -1.962610505505
    test 8508 297 297.051934685592 Theta(tan=-1.95822, x=1.0, y=-1.95822): -1.962610505505
    test 8509 297 297.012955075694 Mu(tan=-1.96151, x=0.454192, y=-0.890904), iteration=2: -1.962610505505
    test 8510 297 297.051796232011 Chi(tan=-1.95823, x=1.0, y=-1.95823), iteration=3: -1.962610505505
    test 8511 297 297.000000000000 Xi(tan=-1.96261, x=0.45399, y=-0.891007): -1.962610505505

    test 8512 300 299.889034406586 Phi(tan=-1.73982, x=0.498322, y=-0.866992): -1.732050807569
    test 8513 300 299.972239961132 Beta(tan=-1.73399, x=0.49958, y=-0.866268): -1.732050807569
    test 8514 300 300.055585588185 Theta(tan=-1.72818, x=0.50084, y=-0.86554): -1.732050807569
    test 8515 300 300.013868957861 Mu(tan=-1.73108, x=0.50021, y=-0.865904): -1.732050807569
    test 8516 300 300.055445578009 Chi(tan=-1.72819, x=0.500838, y=-0.865541): -1.732050807569
    test 8517 300 300.000000000000 Xi(tan=-1.73205, x=0.5, y=-0.866025): -1.732050807569

    test 8518 300 299.889034406586 Phi(tan=-1.73982, x=1.0, y=-1.73982): -1.732050807569
    test 8519 300 299.972239961132 Beta(tan=-1.73399, x=1.0, y=-1.73399): -1.732050807569
    test 8520 300 300.055585588185 Theta(tan=-1.72818, x=1.0, y=-1.72818): -1.732050807569
    test 8521 300 300.013868957861 Mu(tan=-1.73108, x=0.50021, y=-0.865904), iteration=3: -1.732050807569
    test 8522 300 300.055445578009 Chi(tan=-1.72819, x=1.0, y=-1.72819), iteration=3: -1.732050807569
    test 8523 300 300.000000000000 Xi(tan=-1.73205, x=0.5, y=-0.866025): -1.732050807569

    test 8524 303 302.882917506260 Phi(tan=-1.54678, x=0.542924, y=-0.839782): -1.539864963815
    test 8525 303 302.970711538230 Beta(tan=-1.54159, x=0.54421, y=-0.838949): -1.539864963815
    test 8526 303 303.058625854403 Theta(tan=-1.53642, x=0.545497, y=-0.838113): -1.539864963815
    test 8527 303 303.014631073165 Mu(tan=-1.539, x=0.544853, y=-0.838531): -1.539864963815
    test 8528 303 303.058487350319 Chi(tan=-1.53643, x=0.545495, y=-0.838114): -1.539864963815
    test 8529 303 303.000000000000 Xi(tan=-1.53986, x=0.544639, y=-0.838671): -1.539864963815

    test 8530 303 302.882917506260 Phi(tan=-1.54678, x=1.0, y=-1.54678): -1.539864963815
    test 8531 303 302.970711538230 Beta(tan=-1.54159, x=1.0, y=-1.54159): -1.539864963815
    test 8532 303 303.058625854403 Theta(tan=-1.53642, x=1.0, y=-1.53642): -1.539864963815
    test 8533 303 303.014631073165 Mu(tan=-1.539, x=0.544853, y=-0.838531), iteration=3: -1.539864963815
    test 8534 303 303.058487350319 Chi(tan=-1.53643, x=1.0, y=-1.53643), iteration=2: -1.539864963815
    test 8535 303 303.000000000000 Xi(tan=-1.53986, x=0.544639, y=-0.838671): -1.539864963815

    test 8536 306 305.878079358159 Phi(tan=-1.38256, x=0.586062, y=-0.810266): -1.376381920471
    test 8537 306 305.969503261502 Beta(tan=-1.37792, x=0.587355, y=-0.80933): -1.376381920471
    test 8538 306 306.061022406195 Theta(tan=-1.3733, x=0.588647, y=-0.808391): -1.376381920471
    test 8539 306 306.015233045717 Mu(tan=-1.37561, x=0.588, y=-0.808861): -1.376381920471
    test 8540 306 306.060888237156 Chi(tan=-1.37331, x=0.588645, y=-0.808392): -1.376381920471
    test 8541 306 306.000000000000 Xi(tan=-1.37638, x=0.587785, y=-0.809017): -1.376381920471

    test 8542 306 305.878079358159 Phi(tan=-1.38256, x=1.0, y=-1.38256): -1.376381920471
    test 8543 306 305.969503261502 Beta(tan=-1.37792, x=1.0, y=-1.37792): -1.376381920471
    test 8544 306 306.061022406195 Theta(tan=-1.3733, x=1.0, y=-1.3733): -1.376381920471
    test 8545 306 306.015233045717 Mu(tan=-1.37561, x=0.588, y=-0.808861), iteration=3: -1.376381920471
    test 8546 306 306.060888237156 Chi(tan=-1.37331, x=1.0, y=-1.37331), iteration=2: -1.376381920471
    test 8547 306 306.000000000000 Xi(tan=-1.37638, x=0.587785, y=-0.809017): -1.376381920471

    test 8548 309 308.874573803460 Phi(tan=-1.24044, x=0.627618, y=-0.778522): -1.234897156535
    test 8549 309 308.968628523374 Beta(tan=-1.23628, x=0.628895, y=-0.77749): -1.234897156535
    test 8550 309 309.062749279218 Theta(tan=-1.23214, x=0.630171, y=-0.776456): -1.234897156535
    test 8551 309 309.015668247253 Mu(tan=-1.23421, x=0.629533, y=-0.776974): -1.234897156535
    test 8552 309 309.062621952144 Chi(tan=-1.23214, x=0.630169, y=-0.776458): -1.234897156535
    test 8553 309 309.000000000000 Xi(tan=-1.2349, x=0.62932, y=-0.777146): -1.234897156535

    test 8554 309 308.874573803460 Phi(tan=-1.24044, x=1.0, y=-1.24044): -1.234897156535
    test 8555 309 308.968628523374 Beta(tan=-1.23628, x=1.0, y=-1.23628): -1.234897156535
    test 8556 309 309.062749279218 Theta(tan=-1.23214, x=1.0, y=-1.23214): -1.234897156535
    test 8557 309 309.015668247253 Mu(tan=-1.23421, x=0.629533, y=-0.776974), iteration=3: -1.234897156535
    test 8558 309 309.062621952144 Chi(tan=-1.23214, x=1.0, y=-1.23214), iteration=2: -1.234897156535
    test 8559 309 309.000000000000 Xi(tan=-1.2349, x=0.62932, y=-0.777146): -1.234897156535

    test 8560 312 311.872440223586 Phi(tan=-1.1156, x=0.667474, y=-0.744633): -1.110612514829
    test 8561 312 311.968097087864 Beta(tan=-1.11186, x=0.668717, y=-0.743517): -1.110612514829
    test 8562 312 312.063787894475 Theta(tan=-1.10813, x=0.669958, y=-0.742399): -1.110612514829
    test 8563 312 312.015931871193 Mu(tan=-1.10999, x=0.669337, y=-0.742959): -1.110612514829
    test 8564 312 312.063669521510 Chi(tan=-1.10813, x=0.669956, y=-0.742401): -1.110612514829
    test 8565 312 312.000000000000 Xi(tan=-1.11061, x=0.669131, y=-0.743145): -1.110612514829

    test 8566 312 311.872440223586 Phi(tan=-1.1156, x=1.0, y=-1.1156): -1.110612514829
    test 8567 312 311.968097087864 Beta(tan=-1.11186, x=1.0, y=-1.11186): -1.110612514829
    test 8568 312 312.063787894475 Theta(tan=-1.10813, x=1.0, y=-1.10813): -1.110612514829
    test 8569 312 312.015931871193 Mu(tan=-1.10999, x=0.669337, y=-0.742959), iteration=3: -1.110612514829
    test 8570 312 312.063669521510 Chi(tan=-1.10813, x=1.0, y=-1.10813), iteration=2: -1.110612514829
    test 8571 312 312.000000000000 Xi(tan=-1.11061, x=0.669131, y=-0.743145): -1.110612514829

    test 8572 315 314.871703066479 Phi(tan=-1.00449, x=0.705522, y=-0.708688): -1.000000000000
    test 8573 315 314.967914975772 Beta(tan=-1.00112, x=0.706711, y=-0.707503): -1.000000000000
    test 8574 315 315.064127246955 Theta(tan=-0.997764, x=0.707898, y=-0.706315): -1.000000000000
    test 8575 315 315.016020986969 Mu(tan=-0.999441, x=0.707304, y=-0.706909): -1.000000000000
    test 8576 315 315.064019491023 Chi(tan=-0.997768, x=0.707896, y=-0.706316): -1.000000000000
    test 8577 315 315.000000000000 Xi(tan=-1, x=0.707107, y=-0.707107): -1.000000000000

    test 8578 315 314.871703066479 Phi(tan=-1.00449, x=1.0, y=-1.00449): -1.000000000000
    test 8579 315 314.967914975772 Beta(tan=-1.00112, x=1.0, y=-1.00112): -1.000000000000
    test 8580 315 315.064127246955 Theta(tan=-0.997764, x=1.0, y=-0.997764): -1.000000000000
    test 8581 315 315.016020986969 Mu(tan=-0.999441, x=0.707304, y=-0.706909), iteration=2: -1.000000000000
    test 8582 315 315.064019491023 Chi(tan=-0.997768, x=1.0, y=-0.997768), iteration=3: -1.000000000000
    test 8583 315 315.000000000000 Xi(tan=-1, x=0.707107, y=-0.707107): -1.000000000000

    test 8584 318 317.872371532090 Phi(tan=-0.904446, x=0.741652, y=-0.670784): -0.900404044298
    test 8585 318 317.968084390082 Beta(tan=-0.901413, x=0.742772, y=-0.669544): -0.900404044298
    test 8586 318 318.063764009826 Theta(tan=-0.898391, x=0.743889, y=-0.668303): -0.900404044298
    test 8587 318 318.015934573980 Mu(tan=-0.899901, x=0.743331, y=-0.668924): -0.900404044298
    test 8588 318 318.063668050475 Chi(tan=-0.898394, x=0.743888, y=-0.668304): -0.900404044298
    test 8589 318 318.000000000000 Xi(tan=-0.900404, x=0.743145, y=-0.669131): -0.900404044298

    test 8590 318 317.872371532090 Phi(tan=-0.904446, x=1.0, y=-0.904446): -0.900404044298
    test 8591 318 317.968084390082 Beta(tan=-0.901413, x=1.0, y=-0.901413): -0.900404044298
    test 8592 318 318.063764009826 Theta(tan=-0.898391, x=1.0, y=-0.898391): -0.900404044298
    test 8593 318 318.015934573980 Mu(tan=-0.899901, x=0.743331, y=-0.668924), iteration=2: -0.900404044298
    test 8594 318 318.063668050475 Chi(tan=-0.898394, x=1.0, y=-0.898394), iteration=3: -0.900404044298
    test 8595 318 318.000000000000 Xi(tan=-0.900404, x=0.743145, y=-0.669131): -0.900404044298

    test 8596 321 320.874439422555 Phi(tan=-0.813419, x=0.775765, y=-0.631022): -0.809784033195
    test 8597 321 320.968603682756 Beta(tan=-0.810692, x=0.776801, y=-0.629746): -0.809784033195
    test 8598 321 321.062702553785 Theta(tan=-0.807974, x=0.777834, y=-0.62847): -0.809784033195
    test 8599 321 321.015673534704 Mu(tan=-0.809331, x=0.777318, y=-0.629108): -0.809784033195
    test 8600 321 321.062619074367 Chi(tan=-0.807976, x=0.777833, y=-0.628471): -0.809784033195
    test 8601 321 321.000000000000 Xi(tan=-0.809784, x=0.777146, y=-0.62932): -0.809784033195

    test 8602 321 320.874439422555 Phi(tan=-0.813419, x=1.0, y=-0.813419): -0.809784033195
    test 8603 321 320.968603682756 Beta(tan=-0.810692, x=1.0, y=-0.810692): -0.809784033195
    test 8604 321 321.062702553785 Theta(tan=-0.807974, x=1.0, y=-0.807974): -0.809784033195
    test 8605 321 321.015673534704 Mu(tan=-0.809331, x=0.777318, y=-0.629108), iteration=3: -0.809784033195
    test 8606 321 321.062619074367 Chi(tan=-0.807976, x=1.0, y=-0.807976), iteration=2: -0.809784033195
    test 8607 321 321.000000000000 Xi(tan=-0.809784, x=0.777146, y=-0.62932): -0.809784033195

    test 8608 324 323.877885160824 Phi(tan=-0.729804, x=0.807762, y=-0.589508): -0.726542528005
    test 8609 324 323.969467363687 Beta(tan=-0.727357, x=0.808704, y=-0.588216): -0.726542528005
    test 8610 324 324.060954882092 Theta(tan=-0.724918, x=0.809642, y=-0.586924): -0.726542528005
    test 8611 324 324.015240686745 Mu(tan=-0.726136, x=0.809173, y=-0.58757): -0.726542528005
    test 8612 324 324.060884078410 Chi(tan=-0.72492, x=0.809641, y=-0.586925): -0.726542528005
    test 8613 324 324.000000000000 Xi(tan=-0.726543, x=0.809017, y=-0.587785): -0.726542528005

    test 8614 324 323.877885160824 Phi(tan=-0.729804, x=1.0, y=-0.729804): -0.726542528005
    test 8615 324 323.969467363687 Beta(tan=-0.727357, x=1.0, y=-0.727357): -0.726542528005
    test 8616 324 324.060954882092 Theta(tan=-0.724918, x=1.0, y=-0.724918): -0.726542528005
    test 8617 324 324.015240686745 Mu(tan=-0.726136, x=0.809173, y=-0.58757), iteration=2: -0.726542528005
    test 8618 324 324.060884078410 Chi(tan=-0.72492, x=1.0, y=-0.72492), iteration=3: -0.726542528005
    test 8619 324 324.000000000000 Xi(tan=-0.726543, x=0.809017, y=-0.587785): -0.726542528005

    test 8620 327 326.882671979706 Phi(tan=-0.652323, x=0.837554, y=-0.546355): -0.649407593198
    test 8621 327 326.970666152106 Beta(tan=-0.650136, x=0.838392, y=-0.545068): -0.649407593198
    test 8622 327 327.058540482739 Theta(tan=-0.647956, x=0.839227, y=-0.543782): -0.649407593198
    test 8623 327 327.014640733824 Mu(tan=-0.649044, x=0.83881, y=-0.544425): -0.649407593198
    test 8624 327 327.058482092364 Chi(tan=-0.647957, x=0.839226, y=-0.543783): -0.649407593198
    test 8625 327 327.000000000000 Xi(tan=-0.649408, x=0.838671, y=-0.544639): -0.649407593198

    test 8626 327 326.882671979706 Phi(tan=-0.652323, x=1.0, y=-0.652323): -0.649407593198
    test 8627 327 326.970666152106 Beta(tan=-0.650136, x=1.0, y=-0.650136): -0.649407593198
    test 8628 327 327.058540482739 Theta(tan=-0.647956, x=1.0, y=-0.647956): -0.649407593198
    test 8629 327 327.014640733824 Mu(tan=-0.649044, x=0.83881, y=-0.544425), iteration=2: -0.649407593198
    test 8630 327 327.058482092364 Chi(tan=-0.647957, x=1.0, y=-0.647957), iteration=3: -0.649407593198
    test 8631 327 327.000000000000 Xi(tan=-0.649408, x=0.838671, y=-0.544639): -0.649407593198

    test 8632 330 329.888748281352 Phi(tan=-0.579942, x=0.865053, y=-0.501681): -0.577350269190
    test 8633 330 329.972187070272 Beta(tan=-0.577998, x=0.865783, y=-0.50042): -0.577350269190
    test 8634 330 330.055486100094 Theta(tan=-0.57606, x=0.866509, y=-0.499161): -0.577350269190
    test 8635 330 330.013880215935 Mu(tan=-0.577027, x=0.866147, y=-0.49979): -0.577350269190
    test 8636 330 330.055439450644 Chi(tan=-0.576061, x=0.866509, y=-0.499162): -0.577350269190
    test 8637 330 330.000000000000 Xi(tan=-0.57735, x=0.866025, y=-0.5): -0.577350269190

    test 8638 330 329.888748281352 Phi(tan=-0.579942, x=1.0, y=-0.579942): -0.577350269190
    test 8639 330 329.972187070272 Beta(tan=-0.577998, x=1.0, y=-0.577998): -0.577350269190
    test 8640 330 330.055486100094 Theta(tan=-0.57606, x=1.0, y=-0.57606): -0.577350269190
    test 8641 330 330.013880215935 Mu(tan=-0.577027, x=0.866147, y=-0.49979), iteration=3: -0.577350269190
    test 8642 330 330.055439450644 Chi(tan=-0.576061, x=1.0, y=-0.576061), iteration=3: -0.577350269190
    test 8643 330 330.000000000000 Xi(tan=-0.57735, x=0.866025, y=-0.5): -0.577350269190

    test 8644 333 332.896048165141 Phi(tan=-0.511813, x=0.890181, y=-0.455606): -0.509525449494
    test 8645 333 332.974013578758 Beta(tan=-0.510097, x=0.890801, y=-0.454395): -0.509525449494
    test 8646 333 333.051825429165 Theta(tan=-0.508387, x=0.891417, y=-0.453184): -0.509525449494
    test 8647 333 333.012967439153 Mu(tan=-0.50924, x=0.891109, y=-0.453789): -0.509525449494
    test 8648 333 333.051789503033 Chi(tan=-0.508387, x=0.891417, y=-0.453185): -0.509525449494
    test 8649 333 333.000000000000 Xi(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494

    test 8650 333 332.896048165141 Phi(tan=-0.511813, x=1.0, y=-0.511813): -0.509525449494
    test 8651 333 332.974013578758 Beta(tan=-0.510097, x=1.0, y=-0.510097): -0.509525449494
    test 8652 333 333.051825429165 Theta(tan=-0.508387, x=1.0, y=-0.508387): -0.509525449494
    test 8653 333 333.012967439153 Mu(tan=-0.50924, x=0.891109, y=-0.453789), iteration=3: -0.509525449494
    test 8654 333 333.051789503033 Chi(tan=-0.508387, x=1.0, y=-0.508387), iteration=2: -0.509525449494
    test 8655 333 333.000000000000 Xi(tan=-0.509525, x=0.891007, y=-0.45399): -0.509525449494

    test 8656 336 335.904492119885 Phi(tan=-0.447228, x=0.912866, y=-0.408259): -0.445228685309
    test 8657 336 335.976125752178 Beta(tan=-0.445728, x=0.913376, y=-0.407117): -0.445228685309
    test 8658 336 336.047598736385 Theta(tan=-0.444234, x=0.913883, y=-0.405978): -0.445228685309
    test 8659 336 336.011912385791 Mu(tan=-0.44498, x=0.91363, y=-0.406547): -0.445228685309
    test 8660 336 336.047572248701 Chi(tan=-0.444234, x=0.913883, y=-0.405978): -0.445228685309
    test 8661 336 336.000000000000 Xi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309

    test 8662 336 335.904492119885 Phi(tan=-0.447228, x=1.0, y=-0.447228): -0.445228685309
    test 8663 336 335.976125752178 Beta(tan=-0.445728, x=1.0, y=-0.445728): -0.445228685309
    test 8664 336 336.047598736385 Theta(tan=-0.444234, x=1.0, y=-0.444234): -0.445228685309
    test 8665 336 336.011912385791 Mu(tan=-0.44498, x=0.91363, y=-0.406547), iteration=2: -0.445228685309
    test 8666 336 336.047572248701 Chi(tan=-0.444234, x=1.0, y=-0.444234), iteration=3: -0.445228685309
    test 8667 336 336.000000000000 Xi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309

    test 8668 339 338.913987874089 Phi(tan=-0.385587, x=0.933041, y=-0.359769): -0.383864035035
    test 8669 339 338.978500493660 Beta(tan=-0.384295, x=0.933446, y=-0.358718): -0.383864035035
    test 8670 339 339.042852411513 Theta(tan=-0.383006, x=0.933848, y=-0.35767): -0.383864035035
    test 8671 339 339.010726605836 Mu(tan=-0.383649, x=0.933648, y=-0.358193): -0.383864035035
    test 8672 339 339.042833897557 Chi(tan=-0.383007, x=0.933848, y=-0.35767): -0.383864035035
    test 8673 339 339.000000000000 Xi(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035

    test 8674 339 338.913987874089 Phi(tan=-0.385587, x=1.0, y=-0.385587): -0.383864035035
    test 8675 339 338.978500493660 Beta(tan=-0.384295, x=1.0, y=-0.384295): -0.383864035035
    test 8676 339 339.042852411513 Theta(tan=-0.383006, x=1.0, y=-0.383006): -0.383864035035
    test 8677 339 339.010726605836 Mu(tan=-0.383649, x=0.933648, y=-0.358193), iteration=3: -0.383864035035
    test 8678 339 339.042833897557 Chi(tan=-0.383007, x=1.0, y=-0.383007), iteration=2: -0.383864035035
    test 8679 339 339.000000000000 Xi(tan=-0.383864, x=0.93358, y=-0.358368): -0.383864035035

    test 8680 342 341.924431395928 Phi(tan=-0.326378, x=0.950648, y=-0.310271): -0.324919696233
    test 8681 342 341.981111785894 Beta(tan=-0.325284, x=0.950955, y=-0.309331): -0.324919696233
    test 8682 342 342.037638455855 Theta(tan=-0.324194, x=0.951259, y=-0.308392): -0.324919696233
    test 8683 342 342.009423090826 Mu(tan=-0.324738, x=0.951107, y=-0.308861): -0.324919696233
    test 8684 342 342.037626363775 Chi(tan=-0.324194, x=0.951259, y=-0.308392): -0.324919696233
    test 8685 342 342.000000000000 Xi(tan=-0.32492, x=0.951057, y=-0.309017): -0.324919696233

    test 8686 342 341.924431395928 Phi(tan=-0.326378, x=1.0, y=-0.326378): -0.324919696233
    test 8687 342 341.981111785894 Beta(tan=-0.325284, x=1.0, y=-0.325284): -0.324919696233
    test 8688 342 342.037638455855 Theta(tan=-0.324194, x=1.0, y=-0.324194): -0.324919696233
    test 8689 342 342.009423090826 Mu(tan=-0.324738, x=0.951107, y=-0.308861), iteration=3: -0.324919696233
    test 8690 342 342.037626363775 Chi(tan=-0.324194, x=1.0, y=-0.324194), iteration=2: -0.324919696233
    test 8691 342 342.000000000000 Xi(tan=-0.32492, x=0.951057, y=-0.309017): -0.324919696233

    test 8692 345 344.935708032481 Phi(tan=-0.269152, x=0.965635, y=-0.259903): -0.267949192431
    test 8693 345 344.983930976097 Beta(tan=-0.26825, x=0.965853, y=-0.25909): -0.267949192431
    test 8694 345 345.032013912570 Theta(tan=-0.26735, x=0.96607, y=-0.258279): -0.267949192431
    test 8695 345 345.008016131522 Mu(tan=-0.267799, x=0.965962, y=-0.258684): -0.267949192431
    test 8696 345 345.032006697021 Chi(tan=-0.267351, x=0.96607, y=-0.258279): -0.267949192431
    test 8697 345 345.000000000000 Xi(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431

    test 8698 345 344.935708032481 Phi(tan=-0.269152, x=1.0, y=-0.269152): -0.267949192431
    test 8699 345 344.983930976097 Beta(tan=-0.26825, x=1.0, y=-0.26825): -0.267949192431
    test 8700 345 345.032013912570 Theta(tan=-0.26735, x=1.0, y=-0.26735): -0.267949192431
    test 8701 345 345.008016131522 Mu(tan=-0.267799, x=0.965962, y=-0.258684), iteration=2: -0.267949192431
    test 8702 345 345.032006697021 Chi(tan=-0.267351, x=1.0, y=-0.267351), iteration=3: -0.267949192431
    test 8703 345 345.000000000000 Xi(tan=-0.267949, x=0.965926, y=-0.258819): -0.267949192431

    test 8704 348 347.947693775816 Phi(tan=-0.213511, x=0.977957, y=-0.208805): -0.212556561670
    test 8705 348 347.986927091791 Beta(tan=-0.212795, x=0.9781, y=-0.208135): -0.212556561670
    test 8706 348 348.026040245291 Theta(tan=-0.212082, x=0.978242, y=-0.207467): -0.212556561670
    test 8707 348 348.006521160939 Mu(tan=-0.212438, x=0.978171, y=-0.2078): -0.212556561670
    test 8708 348 348.026036457648 Chi(tan=-0.212082, x=0.978242, y=-0.207467): -0.212556561670
    test 8709 348 348.000000000000 Xi(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670

    test 8710 348 347.947693775816 Phi(tan=-0.213511, x=1.0, y=-0.213511): -0.212556561670
    test 8711 348 347.986927091791 Beta(tan=-0.212795, x=1.0, y=-0.212795): -0.212556561670
    test 8712 348 348.026040245291 Theta(tan=-0.212082, x=1.0, y=-0.212082): -0.212556561670
    test 8713 348 348.006521160939 Mu(tan=-0.212438, x=0.978171, y=-0.2078), iteration=3: -0.212556561670
    test 8714 348 348.026036457648 Chi(tan=-0.212082, x=1.0, y=-0.212082), iteration=3: -0.212556561670
    test 8715 348 348.000000000000 Xi(tan=-0.212557, x=0.978148, y=-0.207912): -0.212556561670

    test 8716 351 350.960256641619 Phi(tan=-0.159096, x=0.98758, y=-0.15712): -0.158384440325
    test 8717 351 350.990067183834 Beta(tan=-0.158562, x=0.987661, y=-0.156606): -0.158384440325
    test 8718 351 351.019782671717 Theta(tan=-0.158031, x=0.987742, y=-0.156093): -0.158384440325
    test 8719 351 351.004954584468 Mu(tan=-0.158296, x=0.987702, y=-0.156349): -0.158384440325
    test 8720 351 351.019781042653 Chi(tan=-0.158031, x=0.987742, y=-0.156093): -0.158384440325
    test 8721 351 351.000000000000 Xi(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325

    test 8722 351 350.960256641619 Phi(tan=-0.159096, x=1.0, y=-0.159096): -0.158384440325
    test 8723 351 350.990067183834 Beta(tan=-0.158562, x=1.0, y=-0.158562): -0.158384440325
    test 8724 351 351.019782671717 Theta(tan=-0.158031, x=1.0, y=-0.158031): -0.158384440325
    test 8725 351 351.004954584468 Mu(tan=-0.158296, x=0.987702, y=-0.156349), iteration=3: -0.158384440325
    test 8726 351 351.019781042653 Chi(tan=-0.158031, x=1.0, y=-0.158031), iteration=3: -0.158384440325
    test 8727 351 351.000000000000 Xi(tan=-0.158384, x=0.987688, y=-0.156434): -0.158384440325

    test 8728 354 353.973258144422 Phi(tan=-0.105576, x=0.994473, y=-0.104993): -0.105104235266
    test 8729 354 353.993316692809 Beta(tan=-0.105222, x=0.99451, y=-0.104644): -0.105104235266
    test 8730 354 354.013309459165 Theta(tan=-0.104869, x=0.994546, y=-0.104297): -0.105104235266
    test 8731 354 354.003333598994 Mu(tan=-0.105045, x=0.994528, y=-0.104471): -0.105104235266
    test 8732 354 354.013308969799 Chi(tan=-0.104869, x=0.994546, y=-0.104297): -0.105104235266
    test 8733 354 354.000000000000 Xi(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266

    test 8734 354 353.973258144422 Phi(tan=-0.105576, x=1.0, y=-0.105576): -0.105104235266
    test 8735 354 353.993316692809 Beta(tan=-0.105222, x=1.0, y=-0.105222): -0.105104235266
    test 8736 354 354.013309459165 Theta(tan=-0.104869, x=1.0, y=-0.104869): -0.105104235266
    test 8737 354 354.003333598994 Mu(tan=-0.105045, x=0.994528, y=-0.104471), iteration=3: -0.105104235266
    test 8738 354 354.013308969799 Chi(tan=-0.104869, x=1.0, y=-0.104869), iteration=3: -0.105104235266
    test 8739 354 354.000000000000 Xi(tan=-0.105104, x=0.994522, y=-0.104528): -0.105104235266

    test 8740 357 356.986554851958 Phi(tan=-0.0526431, x=0.998617, y=-0.0525703): -0.052407779283
    test 8741 357 356.996639834512 Beta(tan=-0.0524666, x=0.998626, y=-0.0523945): -0.052407779283
    test 8742 357 357.006691189366 Theta(tan=-0.0522907, x=0.998636, y=-0.0522193): -0.052407779283
    test 8743 357 357.001676003026 Mu(tan=-0.0523784, x=0.998631, y=-0.0523067): -0.052407779283
    test 8744 357 357.006691127690 Chi(tan=-0.0522907, x=0.998636, y=-0.0522193): -0.052407779283
    test 8745 357 357.000000000000 Xi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283

    test 8746 357 356.986554851958 Phi(tan=-0.0526431, x=1.0, y=-0.0526431): -0.052407779283
    test 8747 357 356.996639834512 Beta(tan=-0.0524666, x=1.0, y=-0.0524666): -0.052407779283
    test 8748 357 357.006691189366 Theta(tan=-0.0522907, x=1.0, y=-0.0522907): -0.052407779283
    test 8749 357 357.001676003026 Mu(tan=-0.0523784, x=0.998631, y=-0.0523067), iteration=3: -0.052407779283
    test 8750 357 357.006691127690 Chi(tan=-0.0522907, x=1.0, y=-0.0522907), iteration=3: -0.052407779283
    test 8751 357 357.000000000000 Xi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283

    test 8752 abs: AuxAngle(tan=2.0, x=1.0, y=2.0)
    test 8753 add: AuxAngle(tan=-1.33333, x=-3, y=4.0)
    test 8754 eq : True
    test 8755 float: 2.0
    test 8756 sub: AuxAngle(tan=0.0, x=1.0, y=0.0)
    test 8757 neg: AuxAngle(tan=-2, x=1.0, y=-2)
    test 8758 ne : False
    test 8759 pos: AuxAngle(tan=2.0, x=1.0, y=2.0)
    test 8760 iadd: AuxAngle(tan=-1.33333, x=-3, y=4.0)
    test 8761 isub: AuxAngle(tan=0.0, x=1.0, y=0.0)
    test 8762 radd: AuxAngle(tan=0.0, x=1.0, y=0.0)
    test 8763 rsub: AuxAngle(tan=0.0, x=1.0, y=0.0)

    6 tests skipped (6): no numpy

    all 8763 testAuxilats.py tests passed, 6 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 4.457 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testAzimuthal.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Equidistant from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.EquidistantExact from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.EquidistantGeodSolve from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.EquidistantKarney from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.Gnomonic from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.GnomonicExact from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.GnomonicGeodSolve from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.GnomonicKarney from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.LambertEqualArea from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.Orthographic from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.Stereographic from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testAzimuthal.py line 11
# lazily imported pygeodesy.ellipsoidalKarney by testAzimuthal.py line 11
# lazily imported pygeodesy.ellipsoidalNvector by testAzimuthal.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testAzimuthal.py line 11
# lazily imported pygeodesy.F_D from .dms by testAzimuthal.py line 11
# lazily imported pygeodesy.fstr from .streprs by testAzimuthal.py line 11
# lazily imported pygeodesy.hypot from .fmath by testAzimuthal.py line 11
# lazily imported pygeodesy.IntersectionError from .errors by testAzimuthal.py line 11
# lazily imported pygeodesy.latlonDMS from .dms by testAzimuthal.py line 11
# lazily imported pygeodesy.latlonDMS_ from .dms by testAzimuthal.py line 11
# lazily imported pygeodesy.vincentys from .formy by testAzimuthal.py line 11
# lazily imported pygeodesy.Azimuthal7Tuple from .azimuthal by testAzimuthal.py line 138
# lazily imported pygeodesy.equidistant from .azimuthal by testAzimuthal.py line 138
# lazily imported pygeodesy.gnomonic from .azimuthal by testAzimuthal.py line 138
# lazily imported pygeodesy.NAN from .constants by testAzimuthal.py line 138

    testing testAzimuthal.py 24.05.16 (module pygeodesy.azimuthal 24.06.11) isLazy=3
    test 1 Equidistant(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 2 forward: -37467.812512, 230294.518853, 50.9, 1.8, 350.759218, 1.000223
    test 3 reverse: -37467.812512, 230294.518853, 50.9, 1.8, 350.759218, 1.000223
    test 4 iteration: None
    test 5 copy(Equidistant): (<class 'pygeodesy.azimuthal.Equidistant'>, True)
    test 6 Equidistant.copy(): (<class 'pygeodesy.azimuthal.Equidistant'>, True)
    test 7 reverse: -38000.0, 230000.0, 50.897321, 1.792455, 350.61849, 1.000222
    test 8 forward: -38000.0, 230000.0, 50.897321, 1.792455, 350.61849, 1.000222
    test 9 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 10 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 11 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 12 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 13 Equidistant(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 14 forward: 170420.92566, -293667.828613, 48.833333, 2.333333, 149.872606, 1.000472
    test 15 reverse: 170420.92566, -293667.828613, 48.833333, 2.333333, 149.872606, 1.000472
    test 16 iteration: None
    test 17 hypot: 339535.102  FAILED, KNOWN, expected 338901.865
    test 18 antipodal: (170420.92566, -293667.828613, -48.833333, -177.666667, 0.0, 1.000472, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 19 Gnomonic(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 20 forward: -37484.520018, 230397.210923, 50.9, 1.8, 350.759218, 1.000669
    test 21 reverse: -37484.520018, 230397.210923, 50.9, 1.8, 350.759218, 1.000223
    test 22 iteration: None
    test 23 copy(Gnomonic): (<class 'pygeodesy.azimuthal.Gnomonic'>, True)
    test 24 Gnomonic.copy(): (<class 'pygeodesy.azimuthal.Gnomonic'>, True)
    test 25 reverse: -38000.0, 230000.0, 50.896405, 1.792706, 350.61849, 1.000222
    test 26 forward: -38000.0, 230000.0, 50.896405, 1.792706, 350.61849, 1.000667
    test 27 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 28 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 29 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 30 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 31 Gnomonic(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 32 forward: 170581.851218, -293945.134107, 48.833333, 2.333333, 149.872606, 1.001416
    test 33 reverse: 170581.851218, -293945.134107, 48.833333, 2.333333, 149.872606, 1.000472
    test 34 iteration: None
    test 35 hypot: 339855.719  FAILED, KNOWN, expected 338901.865
    test 36 antipodal: (170581.851218, -293945.134107, -48.833333, -177.666667, 0.0, 1.000472, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
    test 37 EquidistantExact(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
# lazily imported pygeodesy.elliptic by gx.py line 426
    test 38 forward: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 39 reverse: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 40 iteration: None
    test 41 copy(EquidistantExact): (<class 'pygeodesy.azimuthal.EquidistantExact'>, True)
    test 42 EquidistantExact.copy(): (<class 'pygeodesy.azimuthal.EquidistantExact'>, True)
    test 43 reverse: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 44 forward: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 45 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 46 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 47 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 48 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 49 EquidistantExact(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 50 forward: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 51 reverse: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 52 iteration: None
    test 53 hypot: 339238.516  FAILED, KNOWN, expected 338901.865
    test 54 antipodal: (170617.186469, -293210.754313, -48.833333, -177.666667, 0.0, 0.999529, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 55 GnomonicExact(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 56 forward: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 57 reverse: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 58 iteration: 3
    test 59 copy(GnomonicExact): (<class 'pygeodesy.azimuthal.GnomonicExact'>, True)
    test 60 GnomonicExact.copy(): (<class 'pygeodesy.azimuthal.GnomonicExact'>, True)
    test 61 reverse: -38000.0, 230000.0, 50.899044, 1.793528, 350.205718, 0.999333
    test 62 forward: -37999.995965, 229999.975581, 50.899044, 1.793528, 350.205718, 0.999334
    test 63 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 64 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 65 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 66 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 67 GnomonicExact(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 68 forward: 170778.089295, -293487.270649, 48.833333, 2.333333, 151.589952, 0.998587
    test 69 reverse: 170778.089295, -293487.270649, 48.833333, 2.333334, 151.589953, 0.998588
    test 70 iteration: 3
    test 71 hypot: 339558.439  FAILED, KNOWN, expected 338901.963
    test 72 antipodal: (170778.089295, -293487.270649, -48.833333, -177.666666, 0.0, 0.998588, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))


    14 tests skipped (14): no geographiclib
    test 73 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E Random +/- 45
    test 74 pygeodesy.ellipsoidalExact: 41.990055°S, 024.179681°E, 11.715103°N, 071.680929°W  d 38530.8 meter  Spherical
    test 75 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E, 11.864862°N, 071.674285°W  d 8.12921e-09 meter  EquidistantExact
    test 76 pygeodesy.ellipsoidalExact: 41.936978°S, 024.127747°E, 11.690503°N, 071.854789°W  d 43599.2 meter  Equidistant
    test 77 pygeodesy.ellipsoidalExact: 0, 0, ., 3, 9, 0, 0, 9, 7, °, S, ,,  , 0, 0, 0, ., 0, 5, 8, 4, 6, 7, °, W  00.922%, 000.243% of Random
    test 78 pygeodesy.ellipsoidalExact: 42.133328°S, 023.949270°E, 22.453872°S, 051.830937°E  d 23691.8 meter  Spherical
    test 79 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E, 22.458913°S, 051.907856°E  d 5.77456e-09 meter  EquidistantExact
    test 80 pygeodesy.ellipsoidalExact: 42.087558°S, 023.948057°E, 22.470769°S, 051.910267°E  d 28425.9 meter  Equidistant
    test 81 pygeodesy.ellipsoidalExact: 0, 0, ., 2, 3, 9, 5, 1, 6, °, S, ,,  , 0, 0, 0, ., 1, 2, 1, 2, 2, 3, °, E  00.566%, 000.504% of Random
    test 82 pygeodesy.ellipsoidalExact: 42.284008°S, 024.107043°E, 04.217951°N, 021.387386°E  d 5707.88 meter  Spherical
    test 83 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E, 04.288195°N, 021.363180°E  d 2.14057e-09 meter  EquidistantExact
    test 84 pygeodesy.ellipsoidalExact: 42.241899°S, 024.080892°E, 04.341151°N, 021.428141°E  d 9509.56 meter  Equidistant
    test 85 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 8, 5, 1, 7, 6, °, S, ,,  , 0, 0, 0, ., 0, 1, 1, 6, 1, 2, °, W  00.201%, 000.048% of Random
    test 86 pygeodesy.ellipsoidalExact: 42.036806°S, 023.948770°E, 04.382705°N, 082.668961°E  d 33744.2 meter  Spherical
    test 87 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E, 04.446643°N, 082.648014°E  d 8.66038e-09 meter  EquidistantExact
    test 88 pygeodesy.ellipsoidalExact: 41.997530°S, 023.847154°E, 04.138293°N, 082.713734°E  d 40949.5 meter  Equidistant
    test 89 pygeodesy.ellipsoidalExact: 0, 0, ., 3, 2, 9, 5, 4, 5, °, S, ,,  , 0, 0, 0, ., 2, 2, 2, 1, 2, 6, °, E  00.779%, 000.923% of Random
    test 90 pygeodesy.ellipsoidalExact: 40.901095°S, 024.982546°E, 51.067721°S, 015.231567°E  d 175718 meter  Spherical
    test 91 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E, 49.859357°S, 016.988396°E  d 7.71879e-08 meter  EquidistantExact
    test 92 pygeodesy.ellipsoidalExact: 40.634922°S, 025.104677°E, 51.619170°S, 014.207283°E  d 206873 meter  Equidistant
    test 93 pygeodesy.ellipsoidalExact: 0, 1, ., 6, 9, 2, 1, 5, 3, °, S, ,,  , 0, 0, 1, ., 0, 3, 5, 3, 9, 7, °, W  03.998%, 004.302% of Random
    test 94 pygeodesy.ellipsoidalExact: 42.766244°S, 022.706786°E, 33.465585°S, 036.257158°E  d 122081 meter  Spherical
    test 95 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E, 34.357675°S, 035.519951°E  d 2.27904e-08 meter  EquidistantExact
    test 96 pygeodesy.ellipsoidalExact: 42.910469°S, 022.265004°E, 33.535776°S, 036.203206°E  d 161589 meter  Equidistant
    test 97 pygeodesy.ellipsoidalExact: 0, 0, ., 5, 8, 3, 3, 9, 4, °, N, ,,  , 0, 0, 1, ., 8, 0, 4, 2, 7, 6, °, E  01.378%, 007.496% of Random
    test 98 pygeodesy.ellipsoidalExact: 42.034406°S, 024.245845°E, 21.192786°N, 061.880390°W  d 35631.5 meter  Spherical
    test 99 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E, 21.406524°N, 061.797918°W  d 6.61617e-09 meter  EquidistantExact
    test 100 pygeodesy.ellipsoidalExact: 41.999982°S, 024.213873°E, 21.198013°N, 061.961091°W  d 38246.8 meter  Equidistant
    test 101 pygeodesy.ellipsoidalExact: 0, 0, ., 3, 2, 7, 0, 9, 3, °, S, ,,  , 0, 0, 0, ., 1, 4, 4, 5, 9, 3, °, W  00.773%, 000.601% of Random
    test 102 pygeodesy.ellipsoidalExact: 42.157224°S, 024.132987°E, 71.410016°S, 055.219821°W  d 19585.7 meter  Spherical
    test 103 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E, 71.582294°S, 054.437790°W  d 1.03155e-08 meter  EquidistantExact
    test 104 pygeodesy.ellipsoidalExact: 42.107705°S, 024.078479°E, 71.115290°S, 055.526798°W  d 24378.9 meter  Equidistant
    test 105 pygeodesy.ellipsoidalExact: 0, 0, ., 2, 1, 9, 3, 7, 0, °, S, ,,  , 0, 0, 0, ., 0, 0, 9, 1, 9, 9, °, W  00.518%, 000.038% of Random
    test 106 pygeodesy.ellipsoidalExact: 41.962648°S, 024.152357°E, 53.596729°S, 001.419460°W  d 41057.5 meter  Spherical
    test 107 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E, 53.733923°S, 000.727217°W  d 1.10384e-08 meter  EquidistantExact
    test 108 pygeodesy.ellipsoidalExact: 41.871687°S, 024.144331°E, 53.480983°S, 001.801117°W  d 50961.8 meter  Equidistant
    test 109 pygeodesy.ellipsoidalExact: 0, 0, ., 4, 5, 5, 3, 8, 7, °, S, ,,  , 0, 0, 0, ., 0, 7, 5, 0, 5, 1, °, W  01.076%, 000.312% of Random
    test 110 pygeodesy.ellipsoidalExact: 42.042362°S, 024.381908°E, 45.314334°S, 016.133283°W  d 40830.6 meter  Spherical
    test 111 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E, 45.569760°S, 015.718651°W  d 2.42246e-09 meter  EquidistantExact
    test 112 pygeodesy.ellipsoidalExact: 41.991504°S, 024.403864°E, 45.244875°S, 016.190139°W  d 46410.5 meter  Equidistant
    test 113 pygeodesy.ellipsoidalExact: 0, 0, ., 3, 3, 5, 5, 7, 1, °, S, ,,  , 0, 0, 0, ., 3, 3, 4, 5, 8, 4, °, W  00.793%, 001.390% of Random
    test 114 pygeodesy.ellipsoidalExact: 42.107722°S, 024.192129°E, 32.409262°N, 029.208739°W  d 26392.2 meter  Spherical
    test 115 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E, 32.654501°N, 029.098597°W  d 2.57141e-09 meter  EquidistantExact
    test 116 pygeodesy.ellipsoidalExact: 42.075981°S, 024.151071°E, 32.424041°N, 029.221180°W  d 28697.1 meter  Equidistant
    test 117 pygeodesy.ellipsoidalExact: 0, 0, ., 2, 5, 1, 0, 9, 4, °, S, ,,  , 0, 0, 0, ., 0, 8, 1, 7, 9, 1, °, W  00.593%, 000.340% of Random
    test 118 pygeodesy.ellipsoidalExact: 42.185077°S, 024.182101°E, 13.230660°N, 015.966326°W  d 18315.4 meter  Spherical
    test 119 pygeodesy.ellipsoidalExact: 42.327075°S, 024.069280°E, 13.413263°N, 015.913486°W  d 1.97337e-09 meter  EquidistantExact
    test 120 pygeodesy.ellipsoidalExact: 42.191354°S, 024.131012°E, 13.314829°N, 015.926058°W  d 15912.9 meter  Equidistant
    test 121 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 3, 5, 7, 2, 1, °, S, ,,  , 0, 0, 0, ., 0, 6, 1, 7, 3, 2, °, W  00.321%, 000.256% of Random
    test 122 pygeodesy.ellipsoidalExact: 0, 1, ., 6, 9, 2, 1, 5, 3, °, N, ,,  , 0, 0, 1, ., 8, 0, 4, 2, 7, 6, °, E  03.998%, 007.496% of Random, max

    test 123 pygeodesy.ellipsoidalVincenty: 01.813135°N, 007.580930°W Random +/- 45
    test 124 pygeodesy.ellipsoidalVincenty: 01.691419°N, 007.638323°W, 38.869021°S, 016.710357°W  d 14897 meter  Spherical
    test 125 pygeodesy.ellipsoidalVincenty: 01.813135°N, 007.580930°W, 38.963910°S, 016.621586°W  d 5.39801e-06 meter  EquidistantExact
    test 126 pygeodesy.ellipsoidalVincenty: 01.724946°N, 007.738935°W, 38.870945°S, 016.686353°W  d 20104.1 meter  Equidistant
    test 127 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 8, 8, 1, 8, 9, °, N, ,,  , 0, 0, 0, ., 1, 5, 8, 0, 0, 5, °, E  04.864%, 002.084% of Random
./pygeodesy/azimuthal.py:636: DeprecationWarning: Property_RO L{pygeodesy.ellipsoids.Ellipsoid.geodesic} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
./pygeodesy/azimuthal.py:942: DeprecationWarning: Property_RO L{pygeodesy.ellipsoids.Ellipsoid.geodesic} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
    test 128 pygeodesy.ellipsoidalVincenty: too distant (7.12e+06): invalid  FAILED, KNOWN, expected Spherical
    test 129 pygeodesy.ellipsoidalVincenty: too distant (7.1e+06): invalid  FAILED, KNOWN, expected EquidistantExact
    test 130 pygeodesy.ellipsoidalVincenty: too distant (7.1e+06): invalid  FAILED, KNOWN, expected Equidistant
    test 131 pygeodesy.ellipsoidalVincenty: 01.671346°N, 007.555015°W, 34.273774°S, 021.713986°E  d 15941.3 meter  Spherical
    test 132 pygeodesy.ellipsoidalVincenty: 01.813135°N, 007.580930°W, 34.415951°S, 021.636657°E  d 6.63578e-06 meter  EquidistantExact
    test 133 pygeodesy.ellipsoidalVincenty: 01.724913°N, 007.431917°W, 34.268022°S, 021.718951°E  d 19237.1 meter  Equidistant
    test 134 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 8, 8, 2, 2, 1, °, N, ,,  , 0, 0, 0, ., 1, 4, 9, 0, 1, 3, °, W  04.866%, 001.966% of Random
    test 135 pygeodesy.ellipsoidalVincenty: 01.694407°N, 007.543481°W, 40.155211°S, 006.031093°E  d 13773.8 meter  Spherical
    test 136 pygeodesy.ellipsoidalVincenty: 01.813135°N, 007.580930°W, 40.252869°S, 005.934956°E  d 4.26264e-06 meter  EquidistantExact
    test 137 pygeodesy.ellipsoidalVincenty: 01.743260°N, 007.458738°W, 40.157205°S, 006.000080°E  d 15637.9 meter  Equidistant
    test 138 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 6, 9, 8, 7, 4, °, N, ,,  , 0, 0, 0, ., 1, 2, 2, 1, 9, 2, °, W  03.854%, 001.612% of Random
    test 139 pygeodesy.ellipsoidalVincenty: 01.493915°N, 007.310485°W, 05.475554°S, 001.140158°W  d 46384.7 meter  Spherical
    test 140 pygeodesy.ellipsoidalVincenty: 01.813135°N, 007.580930°W, 05.815994°S, 000.909614°W  d 5.63328e-05 meter  EquidistantExact
    test 141 pygeodesy.ellipsoidalVincenty: 02.064954°N, 007.904733°W, 06.115072°S, 000.655569°W  d 45531.8 meter  Equidistant
    test 142 pygeodesy.ellipsoidalVincenty: 0, 0, ., 2, 5, 1, 8, 1, 9, °, S, ,,  , 0, 0, 0, ., 3, 2, 3, 8, 0, 3, °, E  13.889%, 004.271% of Random
    test 143 pygeodesy.ellipsoidalVincenty: 01.745839°N, 007.574608°W, 13.801127°N, 006.919937°E  d 7474.47 meter  Spherical
    test 144 pygeodesy.ellipsoidalVincenty: 01.813135°N, 007.580930°W, 13.910241°N, 006.777002°E  d 8.68112e-06 meter  EquidistantExact
    test 145 pygeodesy.ellipsoidalVincenty: 01.860318°N, 007.624504°W, 13.859094°N, 006.831342°E  d 7122.2 meter  Equidistant
    test 146 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 4, 7, 1, 8, 3, °, S, ,,  , 0, 0, 0, ., 0, 4, 3, 5, 7, 5, °, E  02.602%, 000.575% of Random
    test 147 pygeodesy.ellipsoidalVincenty: 01.808626°N, 007.563795°W, 23.903473°S, 007.832025°W  d 1970.64 meter  Spherical
    test 148 pygeodesy.ellipsoidalVincenty: 01.813135°N, 007.580930°W, 23.911142°S, 007.843639°W  d 1.54408e-07 meter  EquidistantExact
    test 149 pygeodesy.ellipsoidalVincenty: 01.950549°N, 007.534638°W, 23.976059°S, 007.817458°W  d 16043.9 meter  Equidistant
    test 150 pygeodesy.ellipsoidalVincenty: 0, 0, ., 1, 3, 7, 4, 1, 5, °, S, ,,  , 0, 0, 0, ., 0, 4, 6, 2, 9, 2, °, W  07.579%, 000.611% of Random
    test 151 pygeodesy.ellipsoidalVincenty: 01.960608°N, 007.517702°W, 41.864918°N, 027.165410°E  d 17759.6 meter  Spherical
    test 152 pygeodesy.ellipsoidalVincenty: 01.813135°N, 007.580930°W, 42.025426°N, 027.067434°E  d 1.02602e-05 meter  EquidistantExact
    test 153 pygeodesy.ellipsoidalVincenty: 01.903666°N, 007.395880°W, 41.901810°N, 027.131244°E  d 22893.5 meter  Equidistant
    test 154 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 9, 0, 5, 3, 1, °, S, ,,  , 0, 0, 0, ., 1, 8, 5, 0, 5, 0, °, W  04.993%, 002.441% of Random
    test 155 pygeodesy.ellipsoidalVincenty: 01.718842°N, 007.534562°W, 23.892326°S, 024.681402°W  d 11633.1 meter  Spherical
    test 156 pygeodesy.ellipsoidalVincenty: 01.813135°N, 007.580930°W, 23.971632°S, 024.637941°W  d 8.09393e-07 meter  EquidistantExact
    test 157 pygeodesy.ellipsoidalVincenty: 01.771493°N, 007.563284°W, 23.889116°S, 024.714752°W  d 5005.68 meter  Equidistant
    test 158 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 4, 1, 6, 4, 2, °, N, ,,  , 0, 0, 0, ., 0, 1, 7, 6, 4, 6, °, W  02.297%, 000.233% of Random
    test 159 pygeodesy.ellipsoidalVincenty: 01.952781°N, 007.574654°W, 18.554607°N, 016.128072°E  d 15457.3 meter  Spherical
    test 160 pygeodesy.ellipsoidalVincenty: 01.813135°N, 007.580930°W, 18.608102°N, 016.139594°E  d 8.89506e-06 meter  EquidistantExact
    test 161 pygeodesy.ellipsoidalVincenty: 01.930535°N, 007.361228°W, 18.408328°N, 016.089500°E  d 27677.4 meter  Equidistant
    test 162 pygeodesy.ellipsoidalVincenty: 0, 0, ., 1, 1, 7, 4, 0, 0, °, S, ,,  , 0, 0, 0, ., 2, 1, 9, 7, 0, 2, °, W  06.475%, 002.898% of Random
    test 163 pygeodesy.ellipsoidalVincenty: 01.654808°N, 007.709753°W, 00.867024°S, 003.428178°E  d 22626.5 meter  Spherical
    test 164 pygeodesy.ellipsoidalVincenty: 01.813135°N, 007.580930°W, 00.698956°S, 003.372163°E  d 1.68682e-06 meter  EquidistantExact
    test 165 pygeodesy.ellipsoidalVincenty: 01.741429°N, 007.650163°W, 00.762984°S, 003.411553°E  d 11054.8 meter  Equidistant
    test 166 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 7, 1, 7, 0, 6, °, N, ,,  , 0, 0, 0, ., 0, 6, 9, 2, 3, 3, °, E  03.955%, 000.913% of Random
    test 167 pygeodesy.ellipsoidalVincenty: 01.908854°N, 008.076340°W, 06.681172°N, 033.268940°W  d 56126.9 meter  Spherical
    test 168 pygeodesy.ellipsoidalVincenty: 01.813135°N, 007.580930°W, 06.832511°N, 033.758788°W  d 4.70514e-06 meter  EquidistantExact
    test 169 pygeodesy.ellipsoidalVincenty: 01.860231°N, 007.759216°W, 06.747588°N, 033.572318°W  d 20508.8 meter  Equidistant
    test 170 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 4, 7, 0, 9, 6, °, S, ,,  , 0, 0, 0, ., 1, 7, 8, 2, 8, 7, °, E  02.598%, 002.352% of Random
    test 171 pygeodesy.ellipsoidalVincenty: 0, 0, ., 2, 5, 1, 8, 1, 9, °, N, ,,  , 0, 0, 0, ., 3, 2, 3, 8, 0, 3, °, E  13.889%, 004.271% of Random, max

    test 172 Equidistant(10, 80): 1.37704, 0.24656
    test 173 Equidistant(10, 80): 10.0, 80.0
    test 174 Gnomonic(10, 80): 5.67128, 1.01543
    test 175 Gnomonic(10, 80): 10.0, 80.0
    test 176 LambertEqualArea(10, 80): 1.26747, 0.22694
    test 177 LambertEqualArea(10, 80): 10.0, 80.0
    test 178 Orthographic(10, 80): 0.96985, 0.17365
    test 179 Orthographic(10, 80): 10.0, 80.0
    test 180 Stereographic(10, 80): 1.65643, 0.29658
    test 181 Stereographic(10, 80): 10.0, 80.0
    test 182 Equidistant(20, 20): 0.33454, 0.35601
    test 183 Equidistant(20, 20): 20.0, 20.0
    test 184 Gnomonic(20, 20): 0.36397, 0.38733
    test 185 Gnomonic(20, 20): 20.0, 20.0
    test 186 LambertEqualArea(20, 20): 0.33123, 0.35248
    test 187 LambertEqualArea(20, 20): 20.0, 20.0
    test 188 Orthographic(20, 20): 0.32139, 0.34202
    test 189 Orthographic(20, 20): 20.0, 20.0
    test 190 Stereographic(20, 20): 0.34136, 0.36327
    test 191 Stereographic(20, 20): 20.0, 20.0
    test 192 Equidistant(40, 40): 0.57386, 0.74912
    test 193 Equidistant(40, 40): 40.0, 40.0
    test 194 Gnomonic(40, 40): 0.8391, 1.09537
    test 195 Gnomonic(40, 40): 40.0, 40.0
    test 196 LambertEqualArea(40, 40): 0.55281, 0.72164
    test 197 LambertEqualArea(40, 40): 40.0, 40.0
    test 198 Orthographic(40, 40): 0.4924, 0.64279
    test 199 Orthographic(40, 40): 40.0, 40.0
    test 200 Stereographic(40, 40): 0.62062, 0.81016
    test 201 Stereographic(40, 40): 40.0, 40.0
    test 202 Equidistant(60, 60): 0.58948, 1.17896
    test 203 Equidistant(60, 60): 60.0, 60.0
    test 204 Gnomonic(60, 60): 1.73205, 3.4641
    test 205 Gnomonic(60, 60): 60.0, 60.0
    test 206 LambertEqualArea(60, 60): 0.54772, 1.09545
    test 207 LambertEqualArea(60, 60): 60.0, 60.0
    test 208 Orthographic(60, 60): 0.43301, 0.86603
    test 209 Orthographic(60, 60): 60.0, 60.0
    test 210 Stereographic(60, 60): 0.69282, 1.38564
    test 211 Stereographic(60, 60): 60.0, 60.0
    test 212 Equidistant(70, 80): 0.50997, 1.42273
    test 213 Equidistant(70, 80): 70.0, 80.0
    test 214 Gnomonic(70, 80): 5.67128, 15.82209
    test 215 Gnomonic(70, 80): 70.0, 80.0
    test 216 LambertEqualArea(70, 80): 0.4628, 1.29114
    test 217 LambertEqualArea(70, 80): 70.0, 80.0
    test 218 Orthographic(70, 80): 0.33682, 0.93969
    test 219 Orthographic(70, 80): 70.0, 80.0
    test 220 Stereographic(70, 80): 0.63588, 1.77402
    test 221 Stereographic(70, 80): 70.0, 80.0
    test 222 Equidistant(80, 80): 0.26358, 1.51792
    test 223 Equidistant(80, 80): 80.0, 80.0
    test 224 Gnomonic(80, 80): 5.67128, 32.65961
    test 225 Gnomonic(80, 80): 80.0, 80.0
    test 226 LambertEqualArea(80, 80): 0.23828, 1.37219
    test 227 LambertEqualArea(80, 80): 80.0, 80.0
    test 228 Orthographic(80, 80): 0.17101, 0.98481
    test 229 Orthographic(80, 80): 80.0, 80.0
    test 230 Stereographic(80, 80): 0.33201, 1.91196
    test 231 Stereographic(80, 80): 80.0, 80.0
    test 232 Equidistant(80, 10): 0.04281, 1.39829
    test 233 Equidistant(80, 10): 80.0, 10.0
    test 234 Gnomonic(80, 10): 0.17633, 5.75877
    test 235 Gnomonic(80, 10): 80.0, 10.0
    test 236 LambertEqualArea(80, 10): 0.03941, 1.28702
    test 237 LambertEqualArea(80, 10): 80.0, 10.0
    test 238 Orthographic(80, 10): 0.03015, 0.98481
    test 239 Orthographic(80, 10): 80.0, 10.0
    test 240 Stereographic(80, 10): 0.0515, 1.68198
    test 241 Stereographic(80, 10): 80.0, 10.0

    test 242 function: equidistant
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1053
    test 243 equatoradius: 1.0
    test 244 flattening: 0.0
    test 245 iteration: None
    test 246 latlon0: (0.0, 0.0)
    test 247 latlon0: (1.0, 2.0)
    test 248 name: coverage
    test 249 radius: 1.0

    test 250 function: gnomonic
    test 251 equatoradius: 1.0
    test 252 flattening: 0.0
    test 253 iteration: None
    test 254 latlon0: (0.0, 0.0)
    test 255 latlon0: (1.0, 2.0)
    test 256 name: coverage
    test 257 radius: 1.0
    test 258 NANing: (NAN, NAN, 0.0, 0.0, 0.0, 1.0, None)

    9 of 258 testAzimuthal.py tests (3.5%) FAILED, incl. 7 KNOWN plus 2 DeprecationWarnings, 14 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 4.794 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testBasics.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.EPS from .constants by testBasics.py line 11
# lazily imported pygeodesy.EPS0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.INF from .constants by testBasics.py line 11
# lazily imported pygeodesy.INT0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.NAN from .constants by testBasics.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.NINF from .constants by testBasics.py line 11
# lazily imported pygeodesy.halfs2 from .basics by testBasics.py line 11
# lazily imported pygeodesy.isclose from .constants by testBasics.py line 11
# lazily imported pygeodesy.isfinite from .constants by testBasics.py line 11
# lazily imported pygeodesy.isint0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.isiterable from .basics by testBasics.py line 11
# lazily imported pygeodesy.isiterablen from .basics by testBasics.py line 11
# lazily imported pygeodesy.isneg0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.isninf from .constants by testBasics.py line 11
# lazily imported pygeodesy.isscalar from .basics by testBasics.py line 11
# lazily imported pygeodesy.map1 from .basics by testBasics.py line 11
# lazily imported pygeodesy.remainder from .constants by testBasics.py line 11
# lazily imported pygeodesy.splice from .basics by testBasics.py line 11

    testing testBasics.py 24.05.15 (module pygeodesy.basics 24.06.15) isLazy=3
    test 1 clips: test/t....ics.py
    test 2 halfs2: ('test/test', 'Basics.py')

    test 3 isfinite(0): True
    test 4 isint(0): True
    test 5 isint(0+0.5): False
    test 6 isninf(0): False
    test 7 isscalar(0): True

    test 8 isfinite(0.0): True
    test 9 isint(0.0): True
    test 10 isint(0.0+0.5): False
    test 11 isninf(0.0): False
    test 12 isscalar(0.0): True

    test 13 isfinite(1): True
    test 14 isint(1): True
    test 15 isint(1+0.5): False
    test 16 isninf(1): False
    test 17 isscalar(1): True

    test 18 isfinite(1.0): True
    test 19 isint(1.0): True
    test 20 isint(1.0+0.5): False
    test 21 isninf(1.0): False
    test 22 isscalar(1.0): True

    test 23 isfinite(1e+300): True
    test 24 isint(1e+300): True
    test 25 isint(1e+300+0.5): True
    test 26 isninf(1e+300): False
    test 27 isscalar(1e+300): True

    test 28 isfinite(-1e+300): True
    test 29 isint(-1e+300): True
    test 30 isint(-1e+300+0.5): True
    test 31 isninf(-1e+300): False
    test 32 isscalar(-1e+300): True

    test 33 isfinite(inf): False
    test 34 isint(inf): False
    test 35 isint(inf+0.5): False
    test 36 isninf(inf): False
    test 37 isscalar(inf): True

    test 38 isfinite(inf): False
    test 39 isint(inf): False
    test 40 isint(inf+0.5): False
    test 41 isninf(inf): False
    test 42 isscalar(inf): True

    test 43 isfinite(nan): False
    test 44 isint(nan): False
    test 45 isint(nan+0.5): False
    test 46 isninf(nan): False
    test 47 isscalar(nan): True

    test 48 isfinite(-0.0): True
    test 49 isint(-0.0): True
    test 50 isint(-0.0+0.5): False
    test 51 isninf(-0.0): False
    test 52 isscalar(-0.0): True

    test 53 isfinite(-inf): False
    test 54 isint(-inf): False
    test 55 isint(-inf+0.5): False
    test 56 isninf(-inf): True
    test 57 isscalar(-inf): True

    test 58 isfinite(complex): True
    test 59 isfinite(complex): False

    test 60 isint0(INT0): True
    test 61 isint0(False): False
    test 62 isint0(None): False
    test 63 isint0(0): True
    test 64 isint0(0.): False
    test 65 isint0(0.0): True

    test 66 isneg0(NEG0): True
    test 67 isneg0(0.0): False
    test 68 isneg0(INF): False
    test 69 isneg0(NAN): False

    test 70 type(C.r_o): property_RO
    test 71 type(c.r_o): <class 'bool'>
    test 72 c.r_o: True
    test 73 c.r_o = False: immutable property_RO: C.r_o = False
    test 74 c.a, c.b: (None, None)
    test 75 d.a, d.b: (True, False)
    test 76 c.a, c.b: (None, None)
    test 77 splice: ((0, 2, 4, 6, 8), (1, 3, 5, 7, 9))
    test 78 splice: ((0, 3, 6, 9), (1, 4, 7), (2, 5, 8))
    test 79 splice: ((0, 3, 6, 9), (1, 4, 7, -1), (2, 5, 8, -1))
    test 80 splice: ((0, 5, 10), (1, 6, 11), (2, 7), (3, 8), (4, 9))

    test 81 remainder(181, 360): -179.0
    test 82 remainder(181, -360): -179.0
    test 83 remainder(181, inf): 181.0
    test 84 remainder(181, nan): nan
    test 85 remainder(181, -inf): 181.0
    test 86 remainder(-181, 360): 179.0
    test 87 remainder(-181, -360): 179.0
    test 88 remainder(-181, inf): -181.0
    test 89 remainder(-181, nan): nan
    test 90 remainder(-181, -inf): -181.0
    test 91 remainder(179, 360): 179.0
    test 92 remainder(179, -360): 179.0
    test 93 remainder(179, inf): 179.0
    test 94 remainder(179, nan): nan
    test 95 remainder(179, -inf): 179.0
    test 96 remainder(-179, 360): -179.0
    test 97 remainder(-179, -360): -179.0
    test 98 remainder(-179, inf): -179.0
    test 99 remainder(-179, nan): nan
    test 100 remainder(-179, -inf): -179.0
    test 101 remainder(inf, 360): math domain error
    test 102 remainder(inf, -360): math domain error
    test 103 remainder(inf, inf): math domain error
    test 104 remainder(inf, nan): nan
    test 105 remainder(inf, -inf): math domain error
    test 106 remainder(nan, 360): nan
    test 107 remainder(nan, -360): nan
    test 108 remainder(nan, inf): nan
    test 109 remainder(nan, nan): nan
    test 110 remainder(nan, -inf): nan
    test 111 remainder(-inf, 360): math domain error
    test 112 remainder(-inf, -360): math domain error
    test 113 remainder(-inf, inf): math domain error
    test 114 remainder(-inf, nan): nan
    test 115 remainder(-inf, -inf): math domain error
    test 116 isclose: True
    test 117 isclose: False

    test 118 isiterable(dict): True
    test 119 isiterablen(dict): True
    test 120 isiterable(map): True
    test 121 isiterablen(map): False
    test 122 isiterable(list): True
    test 123 isiterablen(list): True
    test 124 isiterable(range): True
    test 125 isiterablen(range): True
    test 126 isiterable(tuple): True
    test 127 isiterablen(tuple): True
    test 128 isiterable(set): True
    test 129 isiterablen(set): False

    all 129 testBasics.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 423.908 us

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testBooleans.py
./test/testBooleans.py:50: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  self.test(areaOf.__name__, areaOf(b) == areaOf(t), True)
./pygeodesy/ellipsoidalKarney.py:139: DeprecationWarning: Property_RO L{pygeodesy.ellipsoids.Ellipsoid.geodesic} has been DEPRECATED, use property C{geodesicw}.
  return fabs(_polygon(datum.ellipsoid.geodesic, points, True, False, wrap))
./test/testBooleans.py:53: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.perimeterOf} has been DEPRECATED, use function L{ellipsoidalExact.perimeterOf} or L{ellipsoidalKarney.perimeterOf}.
  self.test(periOf.__name__, periOf(b, closed=True) == periOf(t, closed=True), True)
./pygeodesy/ellipsoidalKarney.py:352: DeprecationWarning: Property_RO L{pygeodesy.ellipsoids.Ellipsoid.geodesic} has been DEPRECATED, use property C{geodesicw}.
  return _polygon(datum.ellipsoid.geodesic, points, closed, True, wrap)
./test/testBooleans.py:82: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  self.test(areaOf.__name__, areaOf(b) == areaOf(t), True)
./test/testBooleans.py:85: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.perimeterOf} has been DEPRECATED, use function L{ellipsoidalExact.perimeterOf} or L{ellipsoidalKarney.perimeterOf}.
  self.test(periOf.__name__, periOf(b, closed=True) == periOf(t, closed=True), True)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.BooleanFHP from .booleans by testBooleans.py line 11
# lazily imported pygeodesy.BooleanGH from .booleans by testBooleans.py line 11
# lazily imported pygeodesy.isenclosedBy from .points by testBooleans.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testBooleans.py line 95
# lazily imported pygeodesy.ellipsoidalVincenty by testBooleans.py line 95
# lazily imported pygeodesy.sphericalNvector by testBooleans.py line 95
# lazily imported pygeodesy.sphericalTrigonometry by testBooleans.py line 95

    testing testBooleans.py 23.03.31 isLazy=3

    testing(pygeodesy.ellipsoidalExact, 24.06.11)
    test 1 and: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 2 or: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 3 minus: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 4 rev_d: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=10.0, lon=0.0, height=1.0), (lat=10.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=7.0, lon=5.0, height=2.0))
    test 5 iand: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 6 ior: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 7 sum: BooleanGH[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 8 GH ==: True
    test 9 equalTo: True
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
# lazily imported pygeodesy.elliptic by gx.py line 426
    test 10 areaOf: True
    test 11 enclosed: True
    test 12 enclosed: False
    test 13 perimeterOf: True

    test 14 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 15 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 16 and: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 17 or: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 18 iand: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 19 ior: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 20 sum: BooleanFHP[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 21 FHP ==: True
    test 22 equalTo: True
    test 23 areaOf: True
    test 24 enclosed: True
    test 25 enclosed: False
    test 26 perimeterOf: True

    test 27 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 28 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    testing(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 29 and: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 30 or: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 31 minus: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 32 rev_d: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=10.0, lon=0.0, height=1.0), (lat=10.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=7.0, lon=5.0, height=2.0))
    test 33 iand: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 34 ior: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 35 sum: BooleanGH[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 36 GH ==: True
    test 37 equalTo: True
# lazily imported pygeodesy.ellipsoidalKarney by ellipsoidalVincenty.py line 399
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1053
    test 38 areaOf: True
    test 39 enclosed: True
    test 40 enclosed: False
    test 41 perimeterOf: True

    test 42 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 43 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 44 and: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 45 or: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 46 iand: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 47 ior: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 48 sum: BooleanFHP[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 49 FHP ==: True
    test 50 equalTo: True
    test 51 areaOf: True
    test 52 enclosed: True
    test 53 enclosed: False
    test 54 perimeterOf: True

    test 55 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 56 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    testing(pygeodesy.sphericalNvector, 24.06.11)
    test 57 and: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 58 or: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 59 minus: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 60 rev_d: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=10.0, lon=0.0, height=1.0), (lat=10.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=7.0, lon=5.0, height=2.0))
    test 61 iand: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 62 ior: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 63 sum: BooleanGH[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 64 GH ==: True
    test 65 equalTo: True
    test 66 areaOf: True
    test 67 enclosed: True
    test 68 enclosed: False
    test 69 perimeterOf: True

    test 70 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 71 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 72 and: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 73 or: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 74 iand: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 75 ior: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 76 sum: BooleanFHP[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 77 FHP ==: True
    test 78 equalTo: True
    test 79 areaOf: True
    test 80 enclosed: True
    test 81 enclosed: False
    test 82 perimeterOf: True

    test 83 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 84 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    testing(pygeodesy.sphericalTrigonometry, 24.06.21)
    test 85 and: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 86 or: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 87 minus: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 88 rev_d: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=10.0, lon=0.0, height=1.0), (lat=10.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=7.0, lon=5.0, height=2.0))
    test 89 iand: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 90 ior: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 91 sum: BooleanGH[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 92 GH ==: True
    test 93 equalTo: True
    test 94 areaOf: True
    test 95 enclosed: True
    test 96 enclosed: False
    test 97 perimeterOf: True

    test 98 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 99 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 100 and: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 101 or: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 102 iand: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 103 ior: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 104 sum: BooleanFHP[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 105 FHP ==: True
    test 106 equalTo: True
    test 107 areaOf: True
    test 108 enclosed: True
    test 109 enclosed: False
    test 110 perimeterOf: True

    test 111 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 112 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    16 of 112 testBooleans.py tests (14.3%) FAILED, incl. 16 DeprecationWarnings (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 569.679 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testCartesian.py
./test/testCartesian.py:43: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertDatum} has been DEPRECATED, use method L{toDatum}.
  d = c.convertDatum(datum2)
./test/testCartesian.py:44: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertDatum} has been DEPRECATED, use method L{toDatum}.
  t = d.convertDatum(datum)
<string>:1: DeprecationWarning: method L{pygeodesy.trf.RefFrame.__matmul__} has been DEPRECATED on 2024.02.16, use method C{B{point}.toRefFrame}.
./test/testCartesian.py:43: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertDatum} has been DEPRECATED, use method L{toDatum}.
  d = c.convertDatum(datum2)
./test/testCartesian.py:44: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertDatum} has been DEPRECATED, use method L{toDatum}.
  t = d.convertDatum(datum)
./test/testCartesian.py:43: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertDatum} has been DEPRECATED, use method L{toDatum}.
  d = c.convertDatum(datum2)
./test/testCartesian.py:44: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertDatum} has been DEPRECATED, use method L{toDatum}.
  t = d.convertDatum(datum)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.R_M from .constants by testCartesian.py line 11
# lazily imported pygeodesy.classname from .named by testCartesian.py line 11
# lazily imported pygeodesy.Datums from .datums by testCartesian.py line 11
# lazily imported pygeodesy.degrees from .utily by testCartesian.py line 11
# lazily imported pygeodesy.fstr from .streprs by testCartesian.py line 11
# lazily imported pygeodesy.Height from .units by testCartesian.py line 11
# lazily imported pygeodesy.modulename from .named by testCartesian.py line 11
# lazily imported pygeodesy.rtp2xyz from .cartesianBase by testCartesian.py line 11
# lazily imported pygeodesy.xyz2rtp from .cartesianBase by testCartesian.py line 11
# lazily imported pygeodesy.RefFrames from .trf by testCartesian.py line 11
# lazily imported pygeodesy.Transforms from .datums by testCartesian.py line 11
# lazily imported pygeodesy.XyzLocal from .ltpTuples by testCartesian.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testCartesian.py line 193
# lazily imported pygeodesy.ellipsoidalNvector by testCartesian.py line 193
# lazily imported pygeodesy.ellipsoidalVincenty by testCartesian.py line 193
# lazily imported pygeodesy.sphericalNvector by testCartesian.py line 193
# lazily imported pygeodesy.sphericalTrigonometry by testCartesian.py line 193

    testing testCartesian.py 24.06.09 isLazy=3

    testCartesian(pygeodesy.sphericalNvector, 24.06.11)
    test 1 Cartesian0: [3980581, 97, 4966825]
    test 2 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 3 isEllipsoidal: False
    test 4 isSpherical: True
    test 5 copy(Cartesian): (<class 'pygeodesy.sphericalNvector.Cartesian'>, True)
    test 6 Cartesian.copy(): (<class 'pygeodesy.sphericalNvector.Cartesian'>, True)
    test 7 height: -5918.380258
    test 8 height4: (3984282.2, 97.1, 4971443.2, -5918.4)
    test 9 height4: [3984282.2, 97.1, 4971443.2]
    test 10 height3: (3980581.0, 97.0, 4966825.0)
    test 11 Nvector: Nvector(0.62538, 0.00002, 0.78032, -5918.38)
    test 12 Nvector3: (0.625, 0.0, 0.78, -5918.38)
    test 13 Nvector6: (0.625377, 0.000015, 0.780323, -5918.38)
    test 14 LatLon: 50.0379°N, 008.5622°E
    test 15 LatLon: 51.47°N, 000.4543°E
    test 16 LatLon: 40.633365°N, 073.783328°W
    test 17 LatLon: 33.95°N, 118.4°W
    test 18 LatLon: 41.32°S, 174.81°E
    test 19 LatLon: 40.96°N, 005.5°E
    test 20 LatLon: 40.1°N, 116.6°E
    test 21 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 22 copy: True
    test 23 __eq__: True
    test 24 __ne__: False
    test 25 Cartesian: <class 'pygeodesy.sphericalNvector.Cartesian'>
    test 26 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 27 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 28 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 29 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 30 isequalTo: <class 'bool'>
    test 31 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 32 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 33 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 34 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 35 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 36 toLatLon: <class 'pygeodesy.sphericalNvector.LatLon'>
    test 37 toNvector: <class 'pygeodesy.sphericalNvector.Nvector'>
    test 38 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 39 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 40 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 41 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 42 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 43 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 44 isequalTo: <class 'bool'>
    test 45 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 46 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 47 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 48 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 49 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 50 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 51 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 52 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 53 sphericalNvector.Cartesian.intersections2: 37.673442°N, 090.234036°W
    test 54 sphericalNvector.Cartesian.intersections2: 36.109987°N, 090.95367°W
    test 55 sphericalNvector.Cartesian.intersections2: [-0.032779, -0.784769, 0.61892]
    test 56 sphericalNvector.Cartesian.intersections2: 38.237342°N, 092.391779°W
    test 57 sphericalNvector.Cartesian.intersections2: [0.025768, -0.798347, 0.601646]
    test 58 sphericalNvector.Cartesian.intersections2: 36.987868°N, 088.151309°W
# lazily imported pygeodesy.trilaterate3d2 from .vector3d by testCartesian.py line 141

    2 tests skipped (2): No module named 'numpy': required by vector2d._numpy
    test 59 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 60 vector3d.intersections2: 0.0312613
    test 61 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 62 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    test 63 xyz2rtp: 37.417, 36.699, 63.435
    test 64 xyz2rtp: <class 'pygeodesy.cartesianBase.RadiusThetaPhi3Tuple'>
    test 65 rtp2xyz: 10.0, 20.0, 30.0
    test 66 rtp2xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 67 toCartesian: Cartesian(10.0, 20.0, 30.0)
    test 68 toRtp: Test(r=37.416574, theta=36.699225, phi=63.434949)
# lazily imported pygeodesy.ltp by cartesianBase.py line 419

    test 69 destinationXyz: Tuple(x=10.175954, y=20.351908, z=32.201182, lat=54.754059, lon=63.434949, height=-6370969.342158, C=4, M=None, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 70 destinationXyz: Cartesian(10.176, 20.352, 32.201)

    testCartesian(pygeodesy.sphericalTrigonometry, 24.06.21)
    test 71 Cartesian0: [3980581, 97, 4966825]
    test 72 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 73 isEllipsoidal: False
    test 74 isSpherical: True
    test 75 copy(Cartesian): (<class 'pygeodesy.sphericalTrigonometry.Cartesian'>, True)
    test 76 Cartesian.copy(): (<class 'pygeodesy.sphericalTrigonometry.Cartesian'>, True)
    test 77 height: -5918.380258
    test 78 height4: (3984282.2, 97.1, 4971443.2, -5918.4)
    test 79 height4: [3984282.2, 97.1, 4971443.2]
    test 80 height3: (3980581.0, 97.0, 4966825.0)
    test 81 Vector4Tuple: 0.625376979, 1.52393751e-05, 0.780322775, -5918.38026
    test 82 LatLon: 50.0379°N, 008.5622°E
    test 83 LatLon: 51.47°N, 000.4543°E
    test 84 LatLon: 40.633365°N, 073.783328°W
    test 85 LatLon: 33.95°N, 118.4°W
    test 86 LatLon: 41.32°S, 174.81°E
    test 87 LatLon: 40.96°N, 005.5°E
    test 88 LatLon: 40.1°N, 116.6°E
    test 89 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 90 copy: True
    test 91 __eq__: True
    test 92 __ne__: False
    test 93 Cartesian: <class 'pygeodesy.sphericalTrigonometry.Cartesian'>
    test 94 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 95 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 96 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 97 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 98 isequalTo: <class 'bool'>
    test 99 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 100 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 101 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 102 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 103 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 104 toLatLon: <class 'pygeodesy.sphericalTrigonometry.LatLon'>
    test 105 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 106 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 107 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 108 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 109 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 110 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 111 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 112 isequalTo: <class 'bool'>
    test 113 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 114 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 115 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 116 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 117 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 118 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 119 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 120 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 121 sphericalTrigonometry.Cartesian.intersections2: 37.673442°N, 090.234036°W
    test 122 sphericalTrigonometry.Cartesian.intersections2: 36.109987°N, 090.95367°W
    test 123 sphericalTrigonometry.Cartesian.intersections2: [-0.032779, -0.784769, 0.61892]
    test 124 sphericalTrigonometry.Cartesian.intersections2: 38.237342°N, 092.391779°W
    test 125 sphericalTrigonometry.Cartesian.intersections2: [0.025768, -0.798347, 0.601646]
    test 126 sphericalTrigonometry.Cartesian.intersections2: 36.987868°N, 088.151309°W

    2 tests skipped (4): No module named 'numpy': required by vector2d._numpy
    test 127 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 128 vector3d.intersections2: 0.0312613
    test 129 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 130 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    test 131 xyz2rtp: 37.417, 36.699, 63.435
    test 132 xyz2rtp: <class 'pygeodesy.cartesianBase.RadiusThetaPhi3Tuple'>
    test 133 rtp2xyz: 10.0, 20.0, 30.0
    test 134 rtp2xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 135 toCartesian: Cartesian(10.0, 20.0, 30.0)
    test 136 toRtp: Test(r=37.416574, theta=36.699225, phi=63.434949)

    test 137 destinationXyz: Tuple(x=10.175954, y=20.351908, z=32.201182, lat=54.754059, lon=63.434949, height=-6370969.342158, C=4, M=None, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 138 destinationXyz: Cartesian(10.176, 20.352, 32.201)

    testCartesian(pygeodesy.ellipsoidalNvector, 24.06.15)
    test 139 Cartesian0: [3980581, 97, 4966825]
    test 140 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 141 isEllipsoidal: True
    test 142 isSpherical: False
    test 143 copy(Cartesian): (<class 'pygeodesy.ellipsoidalNvector.Cartesian'>, True)
    test 144 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalNvector.Cartesian'>, True)
    test 145 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 146 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 147 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 148 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 149 height: 0.242887
    test 150 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 151 height4: [3980580.8, 97.0, 4966824.8]
    test 152 height3: (3980581.0, 97.0, 4966825.0)
    test 153 Nvector: Nvector(0.62282, 0.00002, 0.78237, +0.24)
    test 154 Nvector3: (0.623, 0.0, 0.782, +0.24)
    test 155 Nvector6: (0.622818, 0.000015, 0.782367, +0.24)
    test 156 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 157 LatLon: 51.47°N, 000.4543°E, -0.00m  FAILED, KNOWN, expected 51.47°N, 000.4543°E
    test 158 LatLon: 40.633365°N, 073.783328°W, +0.00m  FAILED, KNOWN, expected 40.633365°N, 073.783328°W
    test 159 LatLon: 33.95°N, 118.4°W
    test 160 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 161 LatLon: 40.96°N, 005.5°E, -0.00m  FAILED, KNOWN, expected 40.96°N, 005.5°E
    test 162 LatLon: 40.1°N, 116.6°E, -0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 163 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 164 copy: True
    test 165 __eq__: True
    test 166 __ne__: False
    test 167 Cartesian: <class 'pygeodesy.ellipsoidalNvector.Cartesian'>
    test 168 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 169 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 170 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 171 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 172 isequalTo: <class 'bool'>
    test 173 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 174 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 175 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 176 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 177 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 178 toLatLon: <class 'pygeodesy.ellipsoidalNvector.LatLon'>
    test 179 toNvector: <class 'pygeodesy.ellipsoidalNvector.Nvector'>
    test 180 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 181 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 182 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 183 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 184 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 185 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 186 isequalTo: <class 'bool'>
    test 187 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 188 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 189 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 190 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 191 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 192 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 193 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 194 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 195 ellipsoidalNvector.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 196 ellipsoidalNvector.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 197 ellipsoidalNvector.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 198 ellipsoidalNvector.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 199 ellipsoidalNvector.Cartesian.intersections2: 0.0312613
    test 200 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 201 vector3d.intersections2: 0.0312613
    test 202 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 203 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    test 204 xyz2rtp: 37.417, 36.699, 63.435
    test 205 xyz2rtp: <class 'pygeodesy.cartesianBase.RadiusThetaPhi3Tuple'>
    test 206 rtp2xyz: 10.0, 20.0, 30.0
    test 207 rtp2xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 208 toCartesian: Cartesian(10.0, 20.0, 30.0)
    test 209 toRtp: Test(r=37.416574, theta=36.699225, phi=63.434949)

    test 210 destinationXyz: Tuple(x=9.553253, y=19.106505, z=32.000521, lat=89.971452, lon=63.434949, height=-6356720.308402, C=1, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 211 destinationXyz: Cartesian(9.553, 19.107, 32.001)

    testCartesian(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 212 Cartesian0: [3980581, 97, 4966825]
    test 213 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 214 isEllipsoidal: True
    test 215 isSpherical: False
    test 216 copy(Cartesian): (<class 'pygeodesy.ellipsoidalVincenty.Cartesian'>, True)
    test 217 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalVincenty.Cartesian'>, True)
    test 218 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 219 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 220 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 221 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 222 height: 0.242887
    test 223 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 224 height4: [3980580.8, 97.0, 4966824.8]
    test 225 height3: (3980581.0, 97.0, 4966825.0)
    test 226 Vector4Tuple: 0.622817765, 1.51770114e-05, 0.782366942, 0.242886808
    test 227 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 228 LatLon: 51.47°N, 000.4543°E, -0.00m  FAILED, KNOWN, expected 51.47°N, 000.4543°E
    test 229 LatLon: 40.633365°N, 073.783328°W, +0.00m  FAILED, KNOWN, expected 40.633365°N, 073.783328°W
    test 230 LatLon: 33.95°N, 118.4°W
    test 231 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 232 LatLon: 40.96°N, 005.5°E, -0.00m  FAILED, KNOWN, expected 40.96°N, 005.5°E
    test 233 LatLon: 40.1°N, 116.6°E, -0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 234 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 235 copy: True
    test 236 __eq__: True
    test 237 __ne__: False
    test 238 Cartesian: <class 'pygeodesy.ellipsoidalVincenty.Cartesian'>
    test 239 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 240 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 241 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 242 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 243 isequalTo: <class 'bool'>
    test 244 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 245 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 246 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 247 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 248 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 249 toLatLon: <class 'pygeodesy.ellipsoidalVincenty.LatLon'>
    test 250 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 251 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 252 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 253 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 254 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 255 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 256 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 257 isequalTo: <class 'bool'>
    test 258 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 259 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 260 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 261 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 262 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 263 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 264 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 265 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 266 ellipsoidalVincenty.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 267 ellipsoidalVincenty.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 268 ellipsoidalVincenty.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 269 ellipsoidalVincenty.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 270 ellipsoidalVincenty.Cartesian.intersections2: 0.0312613
    test 271 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 272 vector3d.intersections2: 0.0312613
    test 273 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 274 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    test 275 xyz2rtp: 37.417, 36.699, 63.435
    test 276 xyz2rtp: <class 'pygeodesy.cartesianBase.RadiusThetaPhi3Tuple'>
    test 277 rtp2xyz: 10.0, 20.0, 30.0
    test 278 rtp2xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 279 toCartesian: Cartesian(10.0, 20.0, 30.0)
    test 280 toRtp: Test(r=37.416574, theta=36.699225, phi=63.434949)

    test 281 destinationXyz: Tuple(x=9.553253, y=19.106505, z=32.000521, lat=89.971452, lon=63.434949, height=-6356720.308402, C=1, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 282 destinationXyz: Cartesian(9.553, 19.107, 32.001)

    testCartesian(pygeodesy.ellipsoidalExact, 24.06.11)
    test 283 Cartesian0: [3980581, 97, 4966825]
    test 284 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 285 isEllipsoidal: True
    test 286 isSpherical: False
    test 287 copy(Cartesian): (<class 'pygeodesy.ellipsoidalExact.Cartesian'>, True)
    test 288 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalExact.Cartesian'>, True)
    test 289 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 290 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 291 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 292 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 293 height: 0.242887
    test 294 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 295 height4: [3980580.8, 97.0, 4966824.8]
    test 296 height3: (3980581.0, 97.0, 4966825.0)
    test 297 Vector4Tuple: 0.622817765, 1.51770114e-05, 0.782366942, 0.242886808
    test 298 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 299 LatLon: 51.47°N, 000.4543°E
    test 300 LatLon: 40.633365°N, 073.783328°W
    test 301 LatLon: 33.95°N, 118.4°W, +0.00m  FAILED, KNOWN, expected 33.95°N, 118.4°W
    test 302 LatLon: 41.32°S, 174.81°E
    test 303 LatLon: 40.96°N, 005.5°E
    test 304 LatLon: 40.1°N, 116.6°E
    test 305 LatLon: 37.6°N, 122.4°W
    test 306 copy: True
    test 307 __eq__: True
    test 308 __ne__: False
    test 309 Cartesian: <class 'pygeodesy.ellipsoidalExact.Cartesian'>
    test 310 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 311 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 312 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 313 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 314 isequalTo: <class 'bool'>
    test 315 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 316 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 317 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 318 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 319 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 320 toLatLon: <class 'pygeodesy.ellipsoidalExact.LatLon'>
    test 321 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 322 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 323 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 324 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 325 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 326 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 327 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 328 isequalTo: <class 'bool'>
    test 329 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 330 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 331 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 332 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 333 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 334 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 335 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 336 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 337 ellipsoidalExact.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 338 ellipsoidalExact.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 339 ellipsoidalExact.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 340 ellipsoidalExact.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 341 ellipsoidalExact.Cartesian.intersections2: 0.0312613
    test 342 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 343 vector3d.intersections2: 0.0312613
    test 344 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 345 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    test 346 xyz2rtp: 37.417, 36.699, 63.435
    test 347 xyz2rtp: <class 'pygeodesy.cartesianBase.RadiusThetaPhi3Tuple'>
    test 348 rtp2xyz: 10.0, 20.0, 30.0
    test 349 rtp2xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 350 toCartesian: Cartesian(10.0, 20.0, 30.0)
    test 351 toRtp: Test(r=37.416574, theta=36.699225, phi=63.434949)

    test 352 destinationXyz: Tuple(x=9.553253, y=19.106506, z=32.000521, lat=89.971452, lon=63.434949, height=-6356720.308402, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 353 destinationXyz: Cartesian(9.553, 19.107, 32.001)

    27 of 353 testCartesian.py tests (7.6%) FAILED, incl. 18 KNOWN plus 9 DeprecationWarnings, 4 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 22.350 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testClasses.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.itemsorted from .basics by testClasses.py line 13
# lazily imported pygeodesy.Property from .props by testClasses.py line 13
# lazily imported pygeodesy.Property_RO from .props by testClasses.py line 13
# lazily imported pygeodesy.SciPyWarning from .errors by testClasses.py line 13
# lazily imported pygeodesy.Str_ from .interns by testClasses.py line 13
# lazily imported pygeodesy.ellipsoidalExact by testClasses.py line 78
# lazily imported pygeodesy.ellipsoidalKarney by testClasses.py line 78
# lazily imported pygeodesy.ellipsoidalNvector by testClasses.py line 78
# lazily imported pygeodesy.ellipsoidalVincenty by testClasses.py line 78
# lazily imported pygeodesy.sphericalNvector by testClasses.py line 78
# lazily imported pygeodesy.sphericalTrigonometry by testClasses.py line 78

    testing testClasses.py 23.03.27 isLazy=3

    testCartesianAttrs(23.03.27)
    test 1 angleTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 2 apply() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 3 attrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 4 bearing() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 5 cassini() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 6 circin6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 7 circum3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 8 circum4_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 9 classname Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 10 classnaming _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 11 classof() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 12 cmp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 13 collins() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 14 collins5() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 15 convertDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 16 convertRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 17 copy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 18 cross() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 19 crosserrors _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 20 datum _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 21 destinationXyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 22 dividedBy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 23 dot() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 24 dup() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 25 Ecef property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 26 ellipsoidalCartesian property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 27 epoch _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 28 equals() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 29 equirectangular() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 30 euclid Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 31 hartzell() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 32 height Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 33 height3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 34 height4() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 35 homogeneous property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 36 intermediateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 37 intersections2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 38 iscolinearWith() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 39 isconjugateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 40 isEllipsoidal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 41 isequalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 42 isSpherical Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 43 iteration property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 44 latlon Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 45 latlonheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 46 latlonheightdatum Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 47 length Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 48 length2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 49 meeus2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 50 methodname() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 51 minus() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 52 minus_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 53 name _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 54 named Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 55 named2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 56 named3 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 57 named4 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 58 nearestOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 59 nearestOn6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 60 negate() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 61 others() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 62 parse() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 63 philam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 64 philamheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 65 philamheightdatum Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 66 pierlot() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 67 pierlotx() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 68 plus() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 69 plus_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 70 radii11() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 71 reframe _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 72 rename() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 73 renamed() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 74 Roc2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 75 rotate() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 76 rotateAround() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 77 sizeof property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 78 soddy4() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 79 sphericalCartesian property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 80 sum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 81 tienstra() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 82 tienstra7() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 83 times() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 84 times_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 85 to2ab() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 86 to2ll() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 87 to3llh() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 88 to3xyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 89 toDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 90 toEcef() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 91 toLatLon() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 92 toLocal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 93 toLtp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 94 toNvector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 95 toRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 96 toRepr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 97 toRtp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 98 toStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 99 toStr2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 100 toTransform() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 101 toTransforms_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 102 toVector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 103 trilaterate2d2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 104 trilaterate3d2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 105 unit() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 106 x Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 107 x2y2z2 property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 108 xyz Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 109 y Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 110 z Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry

    testCartesianMro(23.03.27)
    test 111 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.Cartesian, pygeodesy.sphericalBase.CartesianSphericalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 112 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.Cartesian, pygeodesy.sphericalBase.CartesianSphericalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 113 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 114 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 115 pygeodesy.ellipsoidalKarney: pygeodesy.ellipsoidalKarney.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 116 pygeodesy.ellipsoidalExact: pygeodesy.ellipsoidalExact.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testLatLonAttrs(23.03.27)
    test 117 alongTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 118 antipode() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 119 attrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 120 bearingTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 121 bearingTo2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 122 bounds() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 123 boundsOf() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 124 chordTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 125 circin6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 126 circum3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 127 circum4_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 128 classname Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 129 classnaming _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 130 classof() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 131 clipid property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 132 compassAngle() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 133 compassAngleTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 134 convergence _Deprecated_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 135 convertDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 136 convertRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 137 copy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 138 cosineAndoyerLambertTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 139 cosineForsytheAndoyerLambertTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 140 cosineLawTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 141 crossingParallels() method: pygeodesy.sphericalTrigonometry
    test 142 crossTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 143 datum _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 144 deltaTo() method: pygeodesy.ellipsoidalNvector
    test 145 destination() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 146 destination2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 147 destinationNed() method: pygeodesy.ellipsoidalNvector
    test 148 destinationXyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 149 distanceTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 150 distanceTo2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 151 distanceTo3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 152 dup() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 153 Ecef property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 154 elevation2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 155 ellipsoid() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 156 ellipsoidalLatLon property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 157 ellipsoids() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 158 epoch _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 159 epsilon _NamedProperty: pygeodesy.ellipsoidalVincenty
    test 160 equals() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 161 equals3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 162 Equidistant Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 163 equirectangularTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 164 euclideanTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 165 finalBearingOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 166 finalBearingTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 167 flatLocalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 168 flatPolarTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 169 gamma property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 170 geodesic property_RO: pygeodesy.ellipsoidalVincenty
    test 171 geodesic Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney
    test 172 geodesicx Property_RO: pygeodesy.ellipsoidalExact
    test 173 geoidHeight2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 174 greatCircle() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 175 greatCircleTo() method: pygeodesy.sphericalNvector
    test 176 hartzell() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 177 haversineTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 178 height Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 179 height4() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 180 heightStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 181 hubenyTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 182 initialBearingTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 183 intermediateChordTo() method: pygeodesy.sphericalNvector
    test 184 intermediateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 185 intersecant2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 186 intersection() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 187 intersection2() method: pygeodesy.sphericalNvector
    test 188 intersection3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 189 intersections2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 190 isantipode() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 191 isantipodeTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 192 isEllipsoidal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 193 isEnclosedBy() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 194 isenclosedBy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 195 isequalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 196 isequalTo3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 197 isnormal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 198 isSpherical Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 199 isWithin() method: pygeodesy.sphericalNvector
    test 200 iswithin() method: pygeodesy.sphericalNvector
    test 201 iteration property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 202 iterations _NamedProperty: pygeodesy.ellipsoidalVincenty
    test 203 lam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 204 lat Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 205 latlon Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 206 latlon2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 207 latlon2round() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 208 latlon_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 209 latlonheight Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 210 lon Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 211 maxLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 212 methodname() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 213 midpointTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 214 minLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 215 name _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 216 named Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 217 named2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 218 named3 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 219 named4 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 220 napieradius _NamedProperty: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 221 nearestOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 222 nearestOn2() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 223 nearestOn3() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 224 nearestOn6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 225 nearestOn8() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 226 nearestTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 227 normal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 228 others() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 229 parse() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 230 phi Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 231 philam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 232 philam2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 233 philamheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 234 plumbTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 235 points() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 236 points2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 237 PointsIter() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 238 radii11() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 239 reframe _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 240 rename() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 241 renamed() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 242 rhumbAzimuthTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 243 rhumbBearingTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 244 rhumbDestination() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 245 rhumbDistanceTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 246 rhumbIntersecant2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 247 rhumbLine() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 248 rhumbMidpointTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 249 scale Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 250 sizeof property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 251 sphericalLatLon property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 252 thomasTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 253 to2ab() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 254 to3llh() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 255 to3xyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 256 toCartesian() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 257 toCss() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 258 toDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 259 toEcef() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 260 toEtm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 261 toLcc() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 262 toLocal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 263 toLtp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 264 toMgrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 265 toNormal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 266 toNvector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 267 toOsgr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 268 toRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 269 toRepr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 270 toStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 271 toStr2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 272 toTransform() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 273 toUps() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 274 toUtm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 275 toUtmUps() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 276 toVector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 277 toVector3d() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 278 toWm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 279 triangle7() method: pygeodesy.sphericalTrigonometry
    test 280 triangulate() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 281 trilaterate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 282 trilaterate5() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 283 vincentysTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 284 xyz property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 285 xyzh Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry

    testLatLonMro(23.03.27)
    test 286 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.LatLon, pygeodesy.nvectorBase.LatLonNvectorBase, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 287 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.LatLon, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 288 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.LatLon, pygeodesy.nvectorBase.LatLonNvectorBase, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 289 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 290 pygeodesy.ellipsoidalKarney: pygeodesy.ellipsoidalKarney.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 291 pygeodesy.ellipsoidalExact: pygeodesy.ellipsoidalExact.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testNvectorAttrs(23.03.27)
    test 292 angleTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 293 apply() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 294 attrs() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 295 bearing() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 296 circin6() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 297 circum3() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 298 circum4_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 299 classname Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 300 classnaming _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 301 classof() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 302 cmp() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 303 copy() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 304 cross() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 305 crosserrors _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 306 datum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 307 dividedBy() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 308 dot() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 309 dup() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 310 Ecef property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 311 ellipsoidalNvector property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 312 equals() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 313 equirectangular() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 314 euclid Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 315 greatCircle() method: pygeodesy.sphericalNvector
    test 316 H _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 317 h _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 318 homogeneous property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 319 hStr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 320 intermediateTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 321 iscolinearWith() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 322 isconjugateTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 323 isEllipsoidal Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 324 isequalTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 325 isSpherical Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 326 iteration property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 327 lam Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 328 lat Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 329 latlon Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 330 latlonheight Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 331 latlonheightdatum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 332 length Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 333 length2 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 334 lon Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 335 meeus2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 336 methodname() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 337 minus() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 338 minus_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 339 name _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 340 named Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 341 named2 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 342 named3 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 343 named4 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 344 nearestOn() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 345 nearestOn6() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 346 negate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 347 others() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 348 parse() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 349 phi Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 350 philam Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 351 philamheight Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 352 philamheightdatum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 353 plus() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 354 plus_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 355 radii11() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 356 rename() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 357 renamed() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 358 rotate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 359 rotateAround() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 360 sizeof property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 361 soddy4() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 362 sphericalNvector property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 363 sum() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 364 times() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 365 times_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 366 to2ab() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 367 to2ll() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 368 to3abh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 369 to3llh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 370 to3xyz() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 371 to4xyzh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 372 toCartesian() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 373 toLatLon() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 374 toRepr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 375 toStr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 376 toStr2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 377 toVector3d() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 378 trilaterate2d2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 379 trilaterate3d2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 380 unit() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 381 x Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 382 x2y2z2 property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 383 xyz Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 384 xyzh Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 385 y Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 386 z Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector

    testNvectorMro(23.03.27)
    test 387 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 388 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testVector3dAttrs(23.03.27)
    test 389 angleTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 390 apply() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 391 attrs() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 392 bearing() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 393 circin6() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 394 circum3() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 395 circum4_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 396 classname Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 397 classnaming _NamedProperty: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 398 classof() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 399 cmp() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 400 copy() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 401 cross() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 402 crosserrors _NamedProperty: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 403 dividedBy() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 404 dot() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 405 dup() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 406 equals() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 407 equirectangular() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 408 euclid Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 409 homogeneous property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 410 intermediateTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 411 iscolinearWith() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 412 isconjugateTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 413 isequalTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 414 iteration property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 415 length Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 416 length2 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 417 meeus2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 418 methodname() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 419 minus() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 420 minus_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 421 name _NamedProperty: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 422 named Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 423 named2 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 424 named3 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 425 named4 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 426 nearestOn() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 427 nearestOn6() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 428 negate() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 429 others() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 430 parse() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 431 plus() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 432 plus_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 433 radii11() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 434 rename() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 435 renamed() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 436 rotate() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 437 rotateAround() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 438 sizeof property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 439 soddy4() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 440 sum() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 441 times() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 442 times_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 443 to3xyz() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 444 toRepr() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 445 toStr() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 446 toStr2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 447 trilaterate2d2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 448 trilaterate3d2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 449 unit() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 450 x Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 451 x2y2z2 property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 452 xyz Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 453 y Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 454 z Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d

    testVector3dMro(23.03.27)
    test 455 pygeodesy.nvectorBase: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 456 pygeodesy.vector3d: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 457 pygeodesy.sphericalTrigonometry: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testCopyAttr(23.03.27)

    all 457 testClasses.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 2.686 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testClipy.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.F_D from .dms by testClipy.py line 11
# lazily imported pygeodesy.F__F_ from .dms by testClipy.py line 11
# lazily imported pygeodesy.boundsOf from .points by testClipy.py line 11
# lazily imported pygeodesy.clipCS4 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.ClipError from .errors by testClipy.py line 11
# lazily imported pygeodesy.clipFHP4 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.ClipFHP4Tuple from .clipy by testClipy.py line 11
# lazily imported pygeodesy.clipGH4 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.clipLB6 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.clipSH from .clipy by testClipy.py line 11
# lazily imported pygeodesy.clipSH3 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.ellipsoidalNvector by testClipy.py line 288
# lazily imported pygeodesy.ellipsoidalVincenty by testClipy.py line 288
# lazily imported pygeodesy.sphericalNvector by testClipy.py line 288
# lazily imported pygeodesy.sphericalTrigonometry by testClipy.py line 288

    testing testClipy.py 23.03.27 isLazy=3

    testing(pygeodesy.ellipsoidalNvector, 24.06.15)
    test 1 clipCS4.p1: 07.5°N, 010.0°E
    test 2 clipCS4.p2: 04.5°N, 000.0°E
    test 3 clipCS4.i: 3
    test 4 clipCS4.j: 0
    test 5 clipCS4.p1: 05.0°N, 005.0°E
    test 6 clipCS4.p2: 05.0°N, 005.0°E
    test 7 clipCS4.i: 1
    test 8 clipCS4.j: 2
    test 9 clipLB6.p1: 07.5°N, 010.0°E
    test 10 clipLB6.p2: 04.5°N, 000.0°E
    test 11 clipLB6.i: 3
    test 12 clipLB6.fi: 3.25
    test 13 clipLB6.fi: 07.5°N, 010.0°E
    test 14 clipLB6.fj: 3.75
    test 15 clipLB6.fj: 04.5°N, 000.0°E
    test 16 clipLB6.j: 0
    test 17 clipLB6.fin: 4
    test 18 clipLB6.p1: 05.0°N, 005.0°E
    test 19 clipLB6.p2: 05.0°N, 005.0°E
    test 20 clipLB6.i: 1
    test 21 clipLB6.fi: 1.00
    test 22 clipLB6.fi: 05.0°N, 005.0°E
    test 23 clipLB6.fj: 2.00
    test 24 clipLB6.fj: 05.0°N, 005.0°E
    test 25 clipLB6.j: 2
    test 26 clipLB6.fin: 4
# lazily imported pygeodesy.booleans by iters.py line 503
    test 27 clipCS4.p1: 60.0°N, 123.333333°E
    test 28 clipCS4.p2: 62.857143°N, 130.0°E
    test 29 clipCS4.i: 0
    test 30 clipCS4.j: 1
    test 31 clipLB6.p1: 60.0°N, 123.333333°E
    test 32 clipLB6.p2: 62.857143°N, 130.0°E
    test 33 clipLB6.i: 0
    test 34 clipLB6.fi: 0.666667
    test 35 clipLB6.fi: 60.0°N, 123.333333°E
    test 36 clipLB6.fj: 0.714286
    test 37 clipLB6.fj: 62.857143°N, 130.0°E
    test 38 clipLB6.j: 1
    test 39 clipLB6.fin: 0
    test 40 clipCS4.p1: 17.5°N, 020.0°E
    test 41 clipCS4.p2: 16.25°N, 015.0°E
    test 42 clipCS4.i: 2
    test 43 clipCS4.j: 0
    test 44 clipLB6.p1: 17.5°N, 020.0°E
    test 45 clipLB6.p2: 16.25°N, 015.0°E
    test 46 clipLB6.i: 2
    test 47 clipLB6.fi: 2.500
    test 48 clipLB6.fi: 17.5°N, 020.0°E
    test 49 clipLB6.fj: 2.750
    test 50 clipLB6.fj: 16.25°N, 015.0°E
    test 51 clipLB6.j: 0
    test 52 clipLB6.fin: 3
    test 53 clipSH1.len: 4
    test 54 clipSH1.0: 20.0°N, 020.0°E
    test 55 clipSH1.LL: True
    test 56 clipSH1.1: 17.5°N, 020.0°E
    test 57 clipSH1.LL: True
    test 58 clipSH1.2: 16.25°N, 015.0°E
    test 59 clipSH1.LL: True
    test 60 clipSH1.3: 20.0°N, 015.0°E
    test 61 clipSH1.LL: True
    test 62 clipSH2.len: 5
    test 63 clipSH2.0: 18.571°N, 024.286°E
    test 64 clipSH2.LL: True
    test 65 clipSH2.1: 16.667°N, 016.667°E
    test 66 clipSH2.LL: True
    test 67 clipSH2.2: 20.0°N, 015.0°E
    test 68 clipSH2.LL: True
    test 69 clipSH2.3: 25.0°N, 020.0°E
    test 70 clipSH2.LL: True
    test 71 clipSH2.4: 22.0°N, 026.0°E
    test 72 clipSH2.LL: True
    test 73 clipSH3.len: 2
    test 74 clipSH3.0: 18.571°N, 024.286°E
    test 75 clipSH3.LL: True
    test 76 clipSH3.1: 16.667°N, 016.667°E
    test 77 clipSH3.LL: True
    test 78 clipSH3.edge.: True
    test 79 clipSH3.len: 2
    test 80 clipSH3.0: 16.667°N, 016.667°E
    test 81 clipSH3.LL: True
    test 82 clipSH3.1: 20.0°N, 015.0°E
    test 83 clipSH3.LL: True
    test 84 clipSH3.edge.: False
    test 85 clipSH3.len: 2
    test 86 clipSH3.0: 20.0°N, 015.0°E
    test 87 clipSH3.LL: True
    test 88 clipSH3.1: 25.0°N, 020.0°E
    test 89 clipSH3.LL: True
    test 90 clipSH3.edge.: True
    test 91 clipSH3.len: 2
    test 92 clipSH3.0: 25.0°N, 020.0°E
    test 93 clipSH3.LL: True
    test 94 clipSH3.1: 22.0°N, 026.0°E
    test 95 clipSH3.LL: True
    test 96 clipSH3.edge.: True
    test 97 clipSH3.len: 2
    test 98 clipSH3.0: 22.0°N, 026.0°E
    test 99 clipSH3.LL: True
    test 100 clipSH3.1: 18.571°N, 024.286°E
    test 101 clipSH3.LL: True
    test 102 clipSH3.edge.: False
    test 103 clipSH2.reversed.len: 5
    test 104 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 105 clipSH2.reversed.LL: True
    test 106 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 107 clipSH2.reversed.LL: True
    test 108 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 109 clipSH2.reversed.LL: True
    test 110 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 111 clipSH2.reversed.LL: True
    test 112 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 113 clipSH2.reversed.LL: True
    test 114 clipSH3.reversed.len: 2
    test 115 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 116 clipSH3.reversed.LL: True
    test 117 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 118 clipSH3.reversed.LL: True
    test 119 clipSH3.edge.reversed.: True
    test 120 clipSH3.reversed.len: 2
    test 121 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 122 clipSH3.reversed.LL: True
    test 123 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 124 clipSH3.reversed.LL: True
    test 125 clipSH3.edge.reversed.: False
    test 126 clipSH3.reversed.len: 2
    test 127 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 128 clipSH3.reversed.LL: True
    test 129 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 130 clipSH3.reversed.LL: True
    test 131 clipSH3.edge.reversed.: True
    test 132 clipSH3.reversed.len: 2
    test 133 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 134 clipSH3.reversed.LL: True
    test 135 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 136 clipSH3.reversed.LL: True
    test 137 clipSH3.edge.reversed.: True
    test 138 clipSH3.reversed.len: 2
    test 139 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 140 clipSH3.reversed.LL: True
    test 141 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 142 clipSH3.reversed.LL: True
    test 143 clipSH3.edge.reversed.: False
    test 144 clipSH.allout: ()
    test 145 clipSH3.allout: ()
    test 146 clipSH.allout.reversed: ()
    test 147 clipSH3.allout.reversed: ()
    test 148 clipSH.allin.len: 4
    test 149 clipSH.allin.0: 20.0°N, 030.0°E
    test 150 clipSH.allin.LL: True
    test 151 clipSH.allin.1: 15.0°N, 010.0°E
    test 152 clipSH.allin.LL: True
    test 153 clipSH.allin.2: 25.0°N, 020.0°E
    test 154 clipSH.allin.LL: True
    test 155 clipSH.allin.3: 20.0°N, 030.0°E
    test 156 clipSH.allin.LL: True
    test 157 clipSH3.allin.len: 2
    test 158 clipSH3.allin.0: 20.0°N, 030.0°E
    test 159 clipSH3.allin.LL: True
    test 160 clipSH3.allin.1: 15.0°N, 010.0°E
    test 161 clipSH3.allin.LL: True
    test 162 clipSH3.edge.: True
    test 163 clipSH3.allin.len: 2
    test 164 clipSH3.allin.0: 15.0°N, 010.0°E
    test 165 clipSH3.allin.LL: True
    test 166 clipSH3.allin.1: 25.0°N, 020.0°E
    test 167 clipSH3.allin.LL: True
    test 168 clipSH3.edge.: True
    test 169 clipSH.allin.reversed.len: 4
    test 170 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 171 clipSH.allin.reversed.LL: True
    test 172 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 173 clipSH.allin.reversed.LL: True
    test 174 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 175 clipSH.allin.reversed.LL: True
    test 176 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 177 clipSH.allin.reversed.LL: True
    test 178 clipSH3.allin.reversed.len: 2
    test 179 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 180 clipSH3.allin.reversed.LL: True
    test 181 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 182 clipSH3.allin.reversed.LL: True
    test 183 clipSH3.edge.reversed.: True
    test 184 clipSH3.allin.reversed.len: 2
    test 185 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 186 clipSH3.allin.reversed.LL: True
    test 187 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 188 clipSH3.allin.reversed.LL: True
    test 189 clipSH3.edge.reversed.: True
    test 190 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 191 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 192 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 193 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 194 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 195 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 196 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 197 overlap: (15.0, 10.0, 20.0, 20.0)
    test 198 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 199 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 200 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 201 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 202 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 203 clipSH9: None
    test 204 clipSH10: None
    test 205 clipSH11: None
    test 206 clipSH12: None

    test 207 clipGH4: (ClipGH4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0), ClipGH4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipGH4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipGH4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0))

    test 208 clipFHP4: (ClipFHP4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipFHP4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0))

    test 209 Fig 8: (ClipFHP4Tuple(lat=4.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=-1.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=3.0, lon=8.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=5.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=1.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=11.0, height=0.0, clipid=0))
    test 210 Fig 14: (ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=6.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=6.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=9.0, lon=3.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=6.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=1))
    test 211 Fig 15: (ClipFHP4Tuple(lat=1.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=1.0, lon=1.0, height=0.0, clipid=1))
    test 212 Fig 16: (ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=1.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=2.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=2.0, height=0.0, clipid=0))
    test 213 Fig 18: ((-10, -10, 0), (-10, -2, 0), (-8, -2, 0), (-8, -8, 0), (-2, -8, 0), (-2, -10, 0), (2, -10, 1), (2, -8, 1), (0, -8, 1), (0, -10, 1), (10, -6, 2), (8, -6, 2), (8, -8, 2), (10, -8, 2), (10, 8, 3), (8, 8, 3), (8, 6, 3), (10, 6, 3), (-6, 10, 4), (-6, 8, 4), (-4, 8, 4), (-4, 10, 4), (-10, 10, 5), (-10, 8, 5), (-8, 8, 5), (-8, 10, 5), (-10, 4, 6), (-8, 4, 6), (-8, 6, 6), (-10, 6, 6), (-10, 0, 7), (-8, 0, 7), (-8, 2, 7), (-10, 2, 7), (-6, 6, 8), (-4, 6, 8), (-4, 4, 8), (-6, 4, 8), (-6, 0, 9), (-4, 0, 9), (-4, 2, 9), (-6, 2, 9), (-6, -6, 10), (-2, -6, 10), (-2, -4, 10), (-4, -4, 10), (-4, -2, 10), (-6, -2, 10), (2, -6, 11), (2, -4, 11), (0, -4, 11), (0, -6, 11), (12, 8, 12), (20, 8, 12), (20, -8, 12), (12, -8, 12), (12, -6, 12), (18, -6, 12), (18, 6, 12), (12, 6, 12), (12, -4, 13), (14, -4, 13), (14, 4, 13), (12, 4, 13))

    testing(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 214 clipCS4.p1: 07.5°N, 010.0°E
    test 215 clipCS4.p2: 04.5°N, 000.0°E
    test 216 clipCS4.i: 3
    test 217 clipCS4.j: 0
    test 218 clipCS4.p1: 05.0°N, 005.0°E
    test 219 clipCS4.p2: 05.0°N, 005.0°E
    test 220 clipCS4.i: 1
    test 221 clipCS4.j: 2
    test 222 clipLB6.p1: 07.5°N, 010.0°E
    test 223 clipLB6.p2: 04.5°N, 000.0°E
    test 224 clipLB6.i: 3
    test 225 clipLB6.fi: 3.25
    test 226 clipLB6.fi: 07.5°N, 010.0°E
    test 227 clipLB6.fj: 3.75
    test 228 clipLB6.fj: 04.5°N, 000.0°E
    test 229 clipLB6.j: 0
    test 230 clipLB6.fin: 4
    test 231 clipLB6.p1: 05.0°N, 005.0°E
    test 232 clipLB6.p2: 05.0°N, 005.0°E
    test 233 clipLB6.i: 1
    test 234 clipLB6.fi: 1.00
    test 235 clipLB6.fi: 05.0°N, 005.0°E
    test 236 clipLB6.fj: 2.00
    test 237 clipLB6.fj: 05.0°N, 005.0°E
    test 238 clipLB6.j: 2
    test 239 clipLB6.fin: 4
    test 240 clipCS4.p1: 60.0°N, 123.333333°E
    test 241 clipCS4.p2: 62.857143°N, 130.0°E
    test 242 clipCS4.i: 0
    test 243 clipCS4.j: 1
    test 244 clipLB6.p1: 60.0°N, 123.333333°E
    test 245 clipLB6.p2: 62.857143°N, 130.0°E
    test 246 clipLB6.i: 0
    test 247 clipLB6.fi: 0.666667
    test 248 clipLB6.fi: 60.0°N, 123.333333°E
    test 249 clipLB6.fj: 0.714286
    test 250 clipLB6.fj: 62.857143°N, 130.0°E
    test 251 clipLB6.j: 1
    test 252 clipLB6.fin: 0
    test 253 clipCS4.p1: 17.5°N, 020.0°E
    test 254 clipCS4.p2: 16.25°N, 015.0°E
    test 255 clipCS4.i: 2
    test 256 clipCS4.j: 0
    test 257 clipLB6.p1: 17.5°N, 020.0°E
    test 258 clipLB6.p2: 16.25°N, 015.0°E
    test 259 clipLB6.i: 2
    test 260 clipLB6.fi: 2.500
    test 261 clipLB6.fi: 17.5°N, 020.0°E
    test 262 clipLB6.fj: 2.750
    test 263 clipLB6.fj: 16.25°N, 015.0°E
    test 264 clipLB6.j: 0
    test 265 clipLB6.fin: 3
    test 266 clipSH1.len: 4
    test 267 clipSH1.0: 20.0°N, 020.0°E
    test 268 clipSH1.LL: True
    test 269 clipSH1.1: 17.5°N, 020.0°E
    test 270 clipSH1.LL: True
    test 271 clipSH1.2: 16.25°N, 015.0°E
    test 272 clipSH1.LL: True
    test 273 clipSH1.3: 20.0°N, 015.0°E
    test 274 clipSH1.LL: True
    test 275 clipSH2.len: 5
    test 276 clipSH2.0: 18.571°N, 024.286°E
    test 277 clipSH2.LL: True
    test 278 clipSH2.1: 16.667°N, 016.667°E
    test 279 clipSH2.LL: True
    test 280 clipSH2.2: 20.0°N, 015.0°E
    test 281 clipSH2.LL: True
    test 282 clipSH2.3: 25.0°N, 020.0°E
    test 283 clipSH2.LL: True
    test 284 clipSH2.4: 22.0°N, 026.0°E
    test 285 clipSH2.LL: True
    test 286 clipSH3.len: 2
    test 287 clipSH3.0: 18.571°N, 024.286°E
    test 288 clipSH3.LL: True
    test 289 clipSH3.1: 16.667°N, 016.667°E
    test 290 clipSH3.LL: True
    test 291 clipSH3.edge.: True
    test 292 clipSH3.len: 2
    test 293 clipSH3.0: 16.667°N, 016.667°E
    test 294 clipSH3.LL: True
    test 295 clipSH3.1: 20.0°N, 015.0°E
    test 296 clipSH3.LL: True
    test 297 clipSH3.edge.: False
    test 298 clipSH3.len: 2
    test 299 clipSH3.0: 20.0°N, 015.0°E
    test 300 clipSH3.LL: True
    test 301 clipSH3.1: 25.0°N, 020.0°E
    test 302 clipSH3.LL: True
    test 303 clipSH3.edge.: True
    test 304 clipSH3.len: 2
    test 305 clipSH3.0: 25.0°N, 020.0°E
    test 306 clipSH3.LL: True
    test 307 clipSH3.1: 22.0°N, 026.0°E
    test 308 clipSH3.LL: True
    test 309 clipSH3.edge.: True
    test 310 clipSH3.len: 2
    test 311 clipSH3.0: 22.0°N, 026.0°E
    test 312 clipSH3.LL: True
    test 313 clipSH3.1: 18.571°N, 024.286°E
    test 314 clipSH3.LL: True
    test 315 clipSH3.edge.: False
    test 316 clipSH2.reversed.len: 5
    test 317 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 318 clipSH2.reversed.LL: True
    test 319 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 320 clipSH2.reversed.LL: True
    test 321 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 322 clipSH2.reversed.LL: True
    test 323 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 324 clipSH2.reversed.LL: True
    test 325 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 326 clipSH2.reversed.LL: True
    test 327 clipSH3.reversed.len: 2
    test 328 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 329 clipSH3.reversed.LL: True
    test 330 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 331 clipSH3.reversed.LL: True
    test 332 clipSH3.edge.reversed.: True
    test 333 clipSH3.reversed.len: 2
    test 334 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 335 clipSH3.reversed.LL: True
    test 336 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 337 clipSH3.reversed.LL: True
    test 338 clipSH3.edge.reversed.: False
    test 339 clipSH3.reversed.len: 2
    test 340 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 341 clipSH3.reversed.LL: True
    test 342 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 343 clipSH3.reversed.LL: True
    test 344 clipSH3.edge.reversed.: True
    test 345 clipSH3.reversed.len: 2
    test 346 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 347 clipSH3.reversed.LL: True
    test 348 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 349 clipSH3.reversed.LL: True
    test 350 clipSH3.edge.reversed.: True
    test 351 clipSH3.reversed.len: 2
    test 352 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 353 clipSH3.reversed.LL: True
    test 354 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 355 clipSH3.reversed.LL: True
    test 356 clipSH3.edge.reversed.: False
    test 357 clipSH.allout: ()
    test 358 clipSH3.allout: ()
    test 359 clipSH.allout.reversed: ()
    test 360 clipSH3.allout.reversed: ()
    test 361 clipSH.allin.len: 4
    test 362 clipSH.allin.0: 20.0°N, 030.0°E
    test 363 clipSH.allin.LL: True
    test 364 clipSH.allin.1: 15.0°N, 010.0°E
    test 365 clipSH.allin.LL: True
    test 366 clipSH.allin.2: 25.0°N, 020.0°E
    test 367 clipSH.allin.LL: True
    test 368 clipSH.allin.3: 20.0°N, 030.0°E
    test 369 clipSH.allin.LL: True
    test 370 clipSH3.allin.len: 2
    test 371 clipSH3.allin.0: 20.0°N, 030.0°E
    test 372 clipSH3.allin.LL: True
    test 373 clipSH3.allin.1: 15.0°N, 010.0°E
    test 374 clipSH3.allin.LL: True
    test 375 clipSH3.edge.: True
    test 376 clipSH3.allin.len: 2
    test 377 clipSH3.allin.0: 15.0°N, 010.0°E
    test 378 clipSH3.allin.LL: True
    test 379 clipSH3.allin.1: 25.0°N, 020.0°E
    test 380 clipSH3.allin.LL: True
    test 381 clipSH3.edge.: True
    test 382 clipSH.allin.reversed.len: 4
    test 383 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 384 clipSH.allin.reversed.LL: True
    test 385 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 386 clipSH.allin.reversed.LL: True
    test 387 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 388 clipSH.allin.reversed.LL: True
    test 389 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 390 clipSH.allin.reversed.LL: True
    test 391 clipSH3.allin.reversed.len: 2
    test 392 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 393 clipSH3.allin.reversed.LL: True
    test 394 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 395 clipSH3.allin.reversed.LL: True
    test 396 clipSH3.edge.reversed.: True
    test 397 clipSH3.allin.reversed.len: 2
    test 398 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 399 clipSH3.allin.reversed.LL: True
    test 400 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 401 clipSH3.allin.reversed.LL: True
    test 402 clipSH3.edge.reversed.: True
    test 403 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 404 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 405 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 406 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 407 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 408 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 409 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 410 overlap: (15.0, 10.0, 20.0, 20.0)
    test 411 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 412 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 413 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 414 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 415 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 416 clipSH9: None
    test 417 clipSH10: None
    test 418 clipSH11: None
    test 419 clipSH12: None

    test 420 clipGH4: (ClipGH4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0), ClipGH4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipGH4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipGH4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0))

    test 421 clipFHP4: (ClipFHP4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipFHP4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0))

    test 422 Fig 8: (ClipFHP4Tuple(lat=4.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=-1.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=3.0, lon=8.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=5.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=1.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=11.0, height=0.0, clipid=0))
    test 423 Fig 14: (ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=6.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=6.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=9.0, lon=3.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=6.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=1))
    test 424 Fig 15: (ClipFHP4Tuple(lat=1.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=1.0, lon=1.0, height=0.0, clipid=1))
    test 425 Fig 16: (ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=1.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=2.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=2.0, height=0.0, clipid=0))
    test 426 Fig 18: ((-10, -10, 0), (-10, -2, 0), (-8, -2, 0), (-8, -8, 0), (-2, -8, 0), (-2, -10, 0), (2, -10, 1), (2, -8, 1), (0, -8, 1), (0, -10, 1), (10, -6, 2), (8, -6, 2), (8, -8, 2), (10, -8, 2), (10, 8, 3), (8, 8, 3), (8, 6, 3), (10, 6, 3), (-6, 10, 4), (-6, 8, 4), (-4, 8, 4), (-4, 10, 4), (-10, 10, 5), (-10, 8, 5), (-8, 8, 5), (-8, 10, 5), (-10, 4, 6), (-8, 4, 6), (-8, 6, 6), (-10, 6, 6), (-10, 0, 7), (-8, 0, 7), (-8, 2, 7), (-10, 2, 7), (-6, 6, 8), (-4, 6, 8), (-4, 4, 8), (-6, 4, 8), (-6, 0, 9), (-4, 0, 9), (-4, 2, 9), (-6, 2, 9), (-6, -6, 10), (-2, -6, 10), (-2, -4, 10), (-4, -4, 10), (-4, -2, 10), (-6, -2, 10), (2, -6, 11), (2, -4, 11), (0, -4, 11), (0, -6, 11), (12, 8, 12), (20, 8, 12), (20, -8, 12), (12, -8, 12), (12, -6, 12), (18, -6, 12), (18, 6, 12), (12, 6, 12), (12, -4, 13), (14, -4, 13), (14, 4, 13), (12, 4, 13))

    testing(pygeodesy.sphericalNvector, 24.06.11)
    test 427 clipCS4.p1: 07.5°N, 010.0°E
    test 428 clipCS4.p2: 04.5°N, 000.0°E
    test 429 clipCS4.i: 3
    test 430 clipCS4.j: 0
    test 431 clipCS4.p1: 05.0°N, 005.0°E
    test 432 clipCS4.p2: 05.0°N, 005.0°E
    test 433 clipCS4.i: 1
    test 434 clipCS4.j: 2
    test 435 clipLB6.p1: 07.5°N, 010.0°E
    test 436 clipLB6.p2: 04.5°N, 000.0°E
    test 437 clipLB6.i: 3
    test 438 clipLB6.fi: 3.25
    test 439 clipLB6.fi: 07.5°N, 010.0°E
    test 440 clipLB6.fj: 3.75
    test 441 clipLB6.fj: 04.5°N, 000.0°E
    test 442 clipLB6.j: 0
    test 443 clipLB6.fin: 4
    test 444 clipLB6.p1: 05.0°N, 005.0°E
    test 445 clipLB6.p2: 05.0°N, 005.0°E
    test 446 clipLB6.i: 1
    test 447 clipLB6.fi: 1.00
    test 448 clipLB6.fi: 05.0°N, 005.0°E
    test 449 clipLB6.fj: 2.00
    test 450 clipLB6.fj: 05.0°N, 005.0°E
    test 451 clipLB6.j: 2
    test 452 clipLB6.fin: 4
    test 453 clipCS4.p1: 60.0°N, 123.333333°E
    test 454 clipCS4.p2: 62.857143°N, 130.0°E
    test 455 clipCS4.i: 0
    test 456 clipCS4.j: 1
    test 457 clipLB6.p1: 60.0°N, 123.333333°E
    test 458 clipLB6.p2: 62.857143°N, 130.0°E
    test 459 clipLB6.i: 0
    test 460 clipLB6.fi: 0.666667
    test 461 clipLB6.fi: 60.0°N, 123.333333°E
    test 462 clipLB6.fj: 0.714286
    test 463 clipLB6.fj: 62.857143°N, 130.0°E
    test 464 clipLB6.j: 1
    test 465 clipLB6.fin: 0
    test 466 clipCS4.p1: 17.5°N, 020.0°E
    test 467 clipCS4.p2: 16.25°N, 015.0°E
    test 468 clipCS4.i: 2
    test 469 clipCS4.j: 0
    test 470 clipLB6.p1: 17.5°N, 020.0°E
    test 471 clipLB6.p2: 16.25°N, 015.0°E
    test 472 clipLB6.i: 2
    test 473 clipLB6.fi: 2.500
    test 474 clipLB6.fi: 17.5°N, 020.0°E
    test 475 clipLB6.fj: 2.750
    test 476 clipLB6.fj: 16.25°N, 015.0°E
    test 477 clipLB6.j: 0
    test 478 clipLB6.fin: 3
    test 479 clipSH1.len: 4
    test 480 clipSH1.0: 20.0°N, 020.0°E
    test 481 clipSH1.LL: True
    test 482 clipSH1.1: 17.5°N, 020.0°E
    test 483 clipSH1.LL: True
    test 484 clipSH1.2: 16.25°N, 015.0°E
    test 485 clipSH1.LL: True
    test 486 clipSH1.3: 20.0°N, 015.0°E
    test 487 clipSH1.LL: True
    test 488 clipSH2.len: 5
    test 489 clipSH2.0: 18.571°N, 024.286°E
    test 490 clipSH2.LL: True
    test 491 clipSH2.1: 16.667°N, 016.667°E
    test 492 clipSH2.LL: True
    test 493 clipSH2.2: 20.0°N, 015.0°E
    test 494 clipSH2.LL: True
    test 495 clipSH2.3: 25.0°N, 020.0°E
    test 496 clipSH2.LL: True
    test 497 clipSH2.4: 22.0°N, 026.0°E
    test 498 clipSH2.LL: True
    test 499 clipSH3.len: 2
    test 500 clipSH3.0: 18.571°N, 024.286°E
    test 501 clipSH3.LL: True
    test 502 clipSH3.1: 16.667°N, 016.667°E
    test 503 clipSH3.LL: True
    test 504 clipSH3.edge.: True
    test 505 clipSH3.len: 2
    test 506 clipSH3.0: 16.667°N, 016.667°E
    test 507 clipSH3.LL: True
    test 508 clipSH3.1: 20.0°N, 015.0°E
    test 509 clipSH3.LL: True
    test 510 clipSH3.edge.: False
    test 511 clipSH3.len: 2
    test 512 clipSH3.0: 20.0°N, 015.0°E
    test 513 clipSH3.LL: True
    test 514 clipSH3.1: 25.0°N, 020.0°E
    test 515 clipSH3.LL: True
    test 516 clipSH3.edge.: True
    test 517 clipSH3.len: 2
    test 518 clipSH3.0: 25.0°N, 020.0°E
    test 519 clipSH3.LL: True
    test 520 clipSH3.1: 22.0°N, 026.0°E
    test 521 clipSH3.LL: True
    test 522 clipSH3.edge.: True
    test 523 clipSH3.len: 2
    test 524 clipSH3.0: 22.0°N, 026.0°E
    test 525 clipSH3.LL: True
    test 526 clipSH3.1: 18.571°N, 024.286°E
    test 527 clipSH3.LL: True
    test 528 clipSH3.edge.: False
    test 529 clipSH2.reversed.len: 5
    test 530 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 531 clipSH2.reversed.LL: True
    test 532 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 533 clipSH2.reversed.LL: True
    test 534 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 535 clipSH2.reversed.LL: True
    test 536 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 537 clipSH2.reversed.LL: True
    test 538 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 539 clipSH2.reversed.LL: True
    test 540 clipSH3.reversed.len: 2
    test 541 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 542 clipSH3.reversed.LL: True
    test 543 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 544 clipSH3.reversed.LL: True
    test 545 clipSH3.edge.reversed.: True
    test 546 clipSH3.reversed.len: 2
    test 547 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 548 clipSH3.reversed.LL: True
    test 549 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 550 clipSH3.reversed.LL: True
    test 551 clipSH3.edge.reversed.: False
    test 552 clipSH3.reversed.len: 2
    test 553 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 554 clipSH3.reversed.LL: True
    test 555 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 556 clipSH3.reversed.LL: True
    test 557 clipSH3.edge.reversed.: True
    test 558 clipSH3.reversed.len: 2
    test 559 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 560 clipSH3.reversed.LL: True
    test 561 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 562 clipSH3.reversed.LL: True
    test 563 clipSH3.edge.reversed.: True
    test 564 clipSH3.reversed.len: 2
    test 565 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 566 clipSH3.reversed.LL: True
    test 567 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 568 clipSH3.reversed.LL: True
    test 569 clipSH3.edge.reversed.: False
    test 570 clipSH.allout: ()
    test 571 clipSH3.allout: ()
    test 572 clipSH.allout.reversed: ()
    test 573 clipSH3.allout.reversed: ()
    test 574 clipSH.allin.len: 4
    test 575 clipSH.allin.0: 20.0°N, 030.0°E
    test 576 clipSH.allin.LL: True
    test 577 clipSH.allin.1: 15.0°N, 010.0°E
    test 578 clipSH.allin.LL: True
    test 579 clipSH.allin.2: 25.0°N, 020.0°E
    test 580 clipSH.allin.LL: True
    test 581 clipSH.allin.3: 20.0°N, 030.0°E
    test 582 clipSH.allin.LL: True
    test 583 clipSH3.allin.len: 2
    test 584 clipSH3.allin.0: 20.0°N, 030.0°E
    test 585 clipSH3.allin.LL: True
    test 586 clipSH3.allin.1: 15.0°N, 010.0°E
    test 587 clipSH3.allin.LL: True
    test 588 clipSH3.edge.: True
    test 589 clipSH3.allin.len: 2
    test 590 clipSH3.allin.0: 15.0°N, 010.0°E
    test 591 clipSH3.allin.LL: True
    test 592 clipSH3.allin.1: 25.0°N, 020.0°E
    test 593 clipSH3.allin.LL: True
    test 594 clipSH3.edge.: True
    test 595 clipSH.allin.reversed.len: 4
    test 596 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 597 clipSH.allin.reversed.LL: True
    test 598 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 599 clipSH.allin.reversed.LL: True
    test 600 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 601 clipSH.allin.reversed.LL: True
    test 602 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 603 clipSH.allin.reversed.LL: True
    test 604 clipSH3.allin.reversed.len: 2
    test 605 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 606 clipSH3.allin.reversed.LL: True
    test 607 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 608 clipSH3.allin.reversed.LL: True
    test 609 clipSH3.edge.reversed.: True
    test 610 clipSH3.allin.reversed.len: 2
    test 611 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 612 clipSH3.allin.reversed.LL: True
    test 613 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 614 clipSH3.allin.reversed.LL: True
    test 615 clipSH3.edge.reversed.: True
    test 616 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 617 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 618 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 619 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 620 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 621 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 622 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 623 overlap: (15.0, 10.0, 20.0, 20.0)
    test 624 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 625 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 626 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 627 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 628 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 629 clipSH9: None
    test 630 clipSH10: None
    test 631 clipSH11: None
    test 632 clipSH12: None

    test 633 clipGH4: (ClipGH4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0), ClipGH4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipGH4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipGH4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0))

    test 634 clipFHP4: (ClipFHP4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipFHP4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0))

    test 635 Fig 8: (ClipFHP4Tuple(lat=4.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=-1.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=3.0, lon=8.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=5.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=1.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=11.0, height=0.0, clipid=0))
    test 636 Fig 14: (ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=6.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=6.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=9.0, lon=3.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=6.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=1))
    test 637 Fig 15: (ClipFHP4Tuple(lat=1.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=1.0, lon=1.0, height=0.0, clipid=1))
    test 638 Fig 16: (ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=1.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=2.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=2.0, height=0.0, clipid=0))
    test 639 Fig 18: ((-10, -10, 0), (-10, -2, 0), (-8, -2, 0), (-8, -8, 0), (-2, -8, 0), (-2, -10, 0), (2, -10, 1), (2, -8, 1), (0, -8, 1), (0, -10, 1), (10, -6, 2), (8, -6, 2), (8, -8, 2), (10, -8, 2), (10, 8, 3), (8, 8, 3), (8, 6, 3), (10, 6, 3), (-6, 10, 4), (-6, 8, 4), (-4, 8, 4), (-4, 10, 4), (-10, 10, 5), (-10, 8, 5), (-8, 8, 5), (-8, 10, 5), (-10, 4, 6), (-8, 4, 6), (-8, 6, 6), (-10, 6, 6), (-10, 0, 7), (-8, 0, 7), (-8, 2, 7), (-10, 2, 7), (-6, 6, 8), (-4, 6, 8), (-4, 4, 8), (-6, 4, 8), (-6, 0, 9), (-4, 0, 9), (-4, 2, 9), (-6, 2, 9), (-6, -6, 10), (-2, -6, 10), (-2, -4, 10), (-4, -4, 10), (-4, -2, 10), (-6, -2, 10), (2, -6, 11), (2, -4, 11), (0, -4, 11), (0, -6, 11), (12, 8, 12), (20, 8, 12), (20, -8, 12), (12, -8, 12), (12, -6, 12), (18, -6, 12), (18, 6, 12), (12, 6, 12), (12, -4, 13), (14, -4, 13), (14, 4, 13), (12, 4, 13))

    testing(pygeodesy.sphericalTrigonometry, 24.06.21)
    test 640 clipCS4.p1: 07.5°N, 010.0°E
    test 641 clipCS4.p2: 04.5°N, 000.0°E
    test 642 clipCS4.i: 3
    test 643 clipCS4.j: 0
    test 644 clipCS4.p1: 05.0°N, 005.0°E
    test 645 clipCS4.p2: 05.0°N, 005.0°E
    test 646 clipCS4.i: 1
    test 647 clipCS4.j: 2
    test 648 clipLB6.p1: 07.5°N, 010.0°E
    test 649 clipLB6.p2: 04.5°N, 000.0°E
    test 650 clipLB6.i: 3
    test 651 clipLB6.fi: 3.25
    test 652 clipLB6.fi: 07.5°N, 010.0°E
    test 653 clipLB6.fj: 3.75
    test 654 clipLB6.fj: 04.5°N, 000.0°E
    test 655 clipLB6.j: 0
    test 656 clipLB6.fin: 4
    test 657 clipLB6.p1: 05.0°N, 005.0°E
    test 658 clipLB6.p2: 05.0°N, 005.0°E
    test 659 clipLB6.i: 1
    test 660 clipLB6.fi: 1.00
    test 661 clipLB6.fi: 05.0°N, 005.0°E
    test 662 clipLB6.fj: 2.00
    test 663 clipLB6.fj: 05.0°N, 005.0°E
    test 664 clipLB6.j: 2
    test 665 clipLB6.fin: 4
    test 666 clipCS4.p1: 60.0°N, 123.333333°E
    test 667 clipCS4.p2: 62.857143°N, 130.0°E
    test 668 clipCS4.i: 0
    test 669 clipCS4.j: 1
    test 670 clipLB6.p1: 60.0°N, 123.333333°E
    test 671 clipLB6.p2: 62.857143°N, 130.0°E
    test 672 clipLB6.i: 0
    test 673 clipLB6.fi: 0.666667
    test 674 clipLB6.fi: 60.0°N, 123.333333°E
    test 675 clipLB6.fj: 0.714286
    test 676 clipLB6.fj: 62.857143°N, 130.0°E
    test 677 clipLB6.j: 1
    test 678 clipLB6.fin: 0
    test 679 clipCS4.p1: 17.5°N, 020.0°E
    test 680 clipCS4.p2: 16.25°N, 015.0°E
    test 681 clipCS4.i: 2
    test 682 clipCS4.j: 0
    test 683 clipLB6.p1: 17.5°N, 020.0°E
    test 684 clipLB6.p2: 16.25°N, 015.0°E
    test 685 clipLB6.i: 2
    test 686 clipLB6.fi: 2.500
    test 687 clipLB6.fi: 17.5°N, 020.0°E
    test 688 clipLB6.fj: 2.750
    test 689 clipLB6.fj: 16.25°N, 015.0°E
    test 690 clipLB6.j: 0
    test 691 clipLB6.fin: 3
    test 692 clipSH1.len: 4
    test 693 clipSH1.0: 20.0°N, 020.0°E
    test 694 clipSH1.LL: True
    test 695 clipSH1.1: 17.5°N, 020.0°E
    test 696 clipSH1.LL: True
    test 697 clipSH1.2: 16.25°N, 015.0°E
    test 698 clipSH1.LL: True
    test 699 clipSH1.3: 20.0°N, 015.0°E
    test 700 clipSH1.LL: True
    test 701 clipSH2.len: 5
    test 702 clipSH2.0: 18.571°N, 024.286°E
    test 703 clipSH2.LL: True
    test 704 clipSH2.1: 16.667°N, 016.667°E
    test 705 clipSH2.LL: True
    test 706 clipSH2.2: 20.0°N, 015.0°E
    test 707 clipSH2.LL: True
    test 708 clipSH2.3: 25.0°N, 020.0°E
    test 709 clipSH2.LL: True
    test 710 clipSH2.4: 22.0°N, 026.0°E
    test 711 clipSH2.LL: True
    test 712 clipSH3.len: 2
    test 713 clipSH3.0: 18.571°N, 024.286°E
    test 714 clipSH3.LL: True
    test 715 clipSH3.1: 16.667°N, 016.667°E
    test 716 clipSH3.LL: True
    test 717 clipSH3.edge.: True
    test 718 clipSH3.len: 2
    test 719 clipSH3.0: 16.667°N, 016.667°E
    test 720 clipSH3.LL: True
    test 721 clipSH3.1: 20.0°N, 015.0°E
    test 722 clipSH3.LL: True
    test 723 clipSH3.edge.: False
    test 724 clipSH3.len: 2
    test 725 clipSH3.0: 20.0°N, 015.0°E
    test 726 clipSH3.LL: True
    test 727 clipSH3.1: 25.0°N, 020.0°E
    test 728 clipSH3.LL: True
    test 729 clipSH3.edge.: True
    test 730 clipSH3.len: 2
    test 731 clipSH3.0: 25.0°N, 020.0°E
    test 732 clipSH3.LL: True
    test 733 clipSH3.1: 22.0°N, 026.0°E
    test 734 clipSH3.LL: True
    test 735 clipSH3.edge.: True
    test 736 clipSH3.len: 2
    test 737 clipSH3.0: 22.0°N, 026.0°E
    test 738 clipSH3.LL: True
    test 739 clipSH3.1: 18.571°N, 024.286°E
    test 740 clipSH3.LL: True
    test 741 clipSH3.edge.: False
    test 742 clipSH2.reversed.len: 5
    test 743 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 744 clipSH2.reversed.LL: True
    test 745 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 746 clipSH2.reversed.LL: True
    test 747 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 748 clipSH2.reversed.LL: True
    test 749 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 750 clipSH2.reversed.LL: True
    test 751 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 752 clipSH2.reversed.LL: True
    test 753 clipSH3.reversed.len: 2
    test 754 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 755 clipSH3.reversed.LL: True
    test 756 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 757 clipSH3.reversed.LL: True
    test 758 clipSH3.edge.reversed.: True
    test 759 clipSH3.reversed.len: 2
    test 760 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 761 clipSH3.reversed.LL: True
    test 762 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 763 clipSH3.reversed.LL: True
    test 764 clipSH3.edge.reversed.: False
    test 765 clipSH3.reversed.len: 2
    test 766 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 767 clipSH3.reversed.LL: True
    test 768 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 769 clipSH3.reversed.LL: True
    test 770 clipSH3.edge.reversed.: True
    test 771 clipSH3.reversed.len: 2
    test 772 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 773 clipSH3.reversed.LL: True
    test 774 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 775 clipSH3.reversed.LL: True
    test 776 clipSH3.edge.reversed.: True
    test 777 clipSH3.reversed.len: 2
    test 778 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 779 clipSH3.reversed.LL: True
    test 780 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 781 clipSH3.reversed.LL: True
    test 782 clipSH3.edge.reversed.: False
    test 783 clipSH.allout: ()
    test 784 clipSH3.allout: ()
    test 785 clipSH.allout.reversed: ()
    test 786 clipSH3.allout.reversed: ()
    test 787 clipSH.allin.len: 4
    test 788 clipSH.allin.0: 20.0°N, 030.0°E
    test 789 clipSH.allin.LL: True
    test 790 clipSH.allin.1: 15.0°N, 010.0°E
    test 791 clipSH.allin.LL: True
    test 792 clipSH.allin.2: 25.0°N, 020.0°E
    test 793 clipSH.allin.LL: True
    test 794 clipSH.allin.3: 20.0°N, 030.0°E
    test 795 clipSH.allin.LL: True
    test 796 clipSH3.allin.len: 2
    test 797 clipSH3.allin.0: 20.0°N, 030.0°E
    test 798 clipSH3.allin.LL: True
    test 799 clipSH3.allin.1: 15.0°N, 010.0°E
    test 800 clipSH3.allin.LL: True
    test 801 clipSH3.edge.: True
    test 802 clipSH3.allin.len: 2
    test 803 clipSH3.allin.0: 15.0°N, 010.0°E
    test 804 clipSH3.allin.LL: True
    test 805 clipSH3.allin.1: 25.0°N, 020.0°E
    test 806 clipSH3.allin.LL: True
    test 807 clipSH3.edge.: True
    test 808 clipSH.allin.reversed.len: 4
    test 809 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 810 clipSH.allin.reversed.LL: True
    test 811 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 812 clipSH.allin.reversed.LL: True
    test 813 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 814 clipSH.allin.reversed.LL: True
    test 815 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 816 clipSH.allin.reversed.LL: True
    test 817 clipSH3.allin.reversed.len: 2
    test 818 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 819 clipSH3.allin.reversed.LL: True
    test 820 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 821 clipSH3.allin.reversed.LL: True
    test 822 clipSH3.edge.reversed.: True
    test 823 clipSH3.allin.reversed.len: 2
    test 824 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 825 clipSH3.allin.reversed.LL: True
    test 826 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 827 clipSH3.allin.reversed.LL: True
    test 828 clipSH3.edge.reversed.: True
    test 829 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 830 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 831 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 832 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 833 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 834 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 835 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 836 overlap: (15.0, 10.0, 20.0, 20.0)
    test 837 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 838 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 839 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 840 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 841 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 842 clipSH9: None
    test 843 clipSH10: None
    test 844 clipSH11: None
    test 845 clipSH12: None

    test 846 clipGH4: (ClipGH4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0), ClipGH4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipGH4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipGH4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0))

    test 847 clipFHP4: (ClipFHP4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipFHP4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0))

    test 848 Fig 8: (ClipFHP4Tuple(lat=4.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=-1.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=3.0, lon=8.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=5.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=1.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=11.0, height=0.0, clipid=0))
    test 849 Fig 14: (ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=6.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=6.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=9.0, lon=3.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=6.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=1))
    test 850 Fig 15: (ClipFHP4Tuple(lat=1.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=1.0, lon=1.0, height=0.0, clipid=1))
    test 851 Fig 16: (ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=1.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=2.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=2.0, height=0.0, clipid=0))
    test 852 Fig 18: ((-10, -10, 0), (-10, -2, 0), (-8, -2, 0), (-8, -8, 0), (-2, -8, 0), (-2, -10, 0), (2, -10, 1), (2, -8, 1), (0, -8, 1), (0, -10, 1), (10, -6, 2), (8, -6, 2), (8, -8, 2), (10, -8, 2), (10, 8, 3), (8, 8, 3), (8, 6, 3), (10, 6, 3), (-6, 10, 4), (-6, 8, 4), (-4, 8, 4), (-4, 10, 4), (-10, 10, 5), (-10, 8, 5), (-8, 8, 5), (-8, 10, 5), (-10, 4, 6), (-8, 4, 6), (-8, 6, 6), (-10, 6, 6), (-10, 0, 7), (-8, 0, 7), (-8, 2, 7), (-10, 2, 7), (-6, 6, 8), (-4, 6, 8), (-4, 4, 8), (-6, 4, 8), (-6, 0, 9), (-4, 0, 9), (-4, 2, 9), (-6, 2, 9), (-6, -6, 10), (-2, -6, 10), (-2, -4, 10), (-4, -4, 10), (-4, -2, 10), (-6, -2, 10), (2, -6, 11), (2, -4, 11), (0, -4, 11), (0, -6, 11), (12, 8, 12), (20, 8, 12), (20, -8, 12), (12, -8, 12), (12, -6, 12), (18, -6, 12), (18, 6, 12), (12, 6, 12), (12, -4, 13), (14, -4, 13), (14, 4, 13), (12, 4, 13))

    all 852 testClipy.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 58.813 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testConstants.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Float from .unitsBase by testConstants.py line 11
# lazily imported pygeodesy.Int from .unitsBase by testConstants.py line 11
# lazily imported pygeodesy.Radius from .unitsBase by testConstants.py line 11
# lazily imported pygeodesy.float_ from .constants by testConstants.py line 11
# lazily imported pygeodesy.isinf from .constants by testConstants.py line 11
# lazily imported pygeodesy.isint0 from .constants by testConstants.py line 11
# lazily imported pygeodesy.isnan from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS0 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS02 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS1 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS2 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS_2 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS4 from .constants by testConstants.py line 11
# lazily imported pygeodesy.INF from .constants by testConstants.py line 11
# lazily imported pygeodesy.INT0 from .constants by testConstants.py line 11
# lazily imported pygeodesy.NAN from .constants by testConstants.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testConstants.py line 11
# lazily imported pygeodesy.NINF from .constants by testConstants.py line 11

    testing testConstants.py 23.08.23 (module pygeodesy.constants 24.05.29) isLazy=3
    test 1 _0_0: 0.0
    test 2 _0_0001: 0.0001
    test 3 _0_001: 0.001
    test 4 _0_01: 0.01
    test 5 _0_1: 0.1
    test 6 _0_125: 0.125
    test 7 _0_25: 0.25
    test 8 _0_5: 0.5
    test 9 _1000_0: 1000.0
    test 10 _100_0: 100.0
    test 11 _10_0: 10.0
    test 12 _16_0: 16.0
    test 13 _180_0: 180.0
    test 14 _1_0: 1.0

    test 15 _1_16th: _1_16th (0.0625)
    test 16 _1_16th: _1_16th
    test 17 _1_16th: True

    test 18 _1_3rd: _1_3rd (0.333333333333)
    test 19 _1_3rd: _1_3rd
    test 20 _1_3rd: True
    test 21 _1_5: 1.5

    test 22 _1_64th: _1_64th (0.015625)
    test 23 _1_64th: _1_64th
    test 24 _1_64th: True

    test 25 _1_6th: _1_6th (0.166666666667)
    test 26 _1_6th: _1_6th
    test 27 _1_6th: True
    test 28 _1_75: 1.75

    test 29 _1__90: _1__90 (0.0111111111111)
    test 30 _1__90: _1__90
    test 31 _1__90: True

    test 32 _1_EPS: _1_EPS (4.50359962737e+15)
    test 33 _1_EPS: _1_EPS
    test 34 _1_EPS: True
    test 35 _270_0: 270.0
    test 36 _2_0: 2.0

    test 37 _2__PI: _2__PI (0.636619772368)
    test 38 _2__PI: _2__PI
    test 39 _2__PI: True
    test 40 _32_0: 32.0
    test 41 _3600_0: 3600.0
    test 42 _360_0: 360.0
    test 43 _3_0: 3.0
    test 44 _400_0: 400.0
    test 45 _4_0: 4.0
    test 46 _5_0: 5.0
    test 47 _60_0: 60.0
    test 48 _6_0: 6.0
    test 49 _720_0: 720.0

    test 50 _89_999_: _89_999_ (90.0)
    test 51 _89_999_: _89_999_
    test 52 _89_999_: True
    test 53 _8_0: 8.0
    test 54 _90_0: 90.0
    test 55 _9_0: 9.0

    test 56 _EPS2e4: _EPS2e4 (4.4408920985e-12)
    test 57 _EPS2e4: _EPS2e4
    test 58 _EPS2e4: True

    test 59 _EPS4e8: _EPS4e8 (8.881784197e-08)
    test 60 _EPS4e8: _EPS4e8
    test 61 _EPS4e8: True

    test 62 _EPSmin: _EPSmin (1.49166814624e-154)
    test 63 _EPSmin: _EPSmin
    test 64 _EPSmin: True

    test 65 _EPSqrt: _EPSqrt (1.49011611938e-08)
    test 66 _EPSqrt: _EPSqrt
    test 67 _EPSqrt: True

    test 68 _EPStol: _EPStol (1.49011611938e-09)
    test 69 _EPStol: _EPStol
    test 70 _EPStol: True
    test 71 _inf: inf

    test 72 _K0_UTM: _K0_UTM (0.9996)
    test 73 _K0_UTM: _K0_UTM
    test 74 _K0_UTM: True
    test 75 _M_KM: 1000.0  FAILED, KNOWN, expected M.KM
    test 76 _M_NM: 1852.0  FAILED, KNOWN, expected M.NM
    test 77 _M_SM: 1609.344  FAILED, KNOWN, expected M.SM
    test 78 _N_0_0: -0.0  FAILED, KNOWN, expected N.0.0
    test 79 _N_0_5: -0.5  FAILED, KNOWN, expected N.0.5
    test 80 _N_180_0: -180.0  FAILED, KNOWN, expected N.180.0
    test 81 _N_1_0: -1.0  FAILED, KNOWN, expected N.1.0
    test 82 _N_2_0: -2.0  FAILED, KNOWN, expected N.2.0
    test 83 _N_90_0: -90.0  FAILED, KNOWN, expected N.90.0
    test 84 _nan: nan
    test 85 _PI: 3.141592653589793  FAILED, KNOWN, expected PI

    test 86 _SQRT2_2: _SQRT2_2 (0.707106781187)
    test 87 _SQRT2_2: _SQRT2_2
    test 88 _SQRT2_2: True

    test 89 DIG: DIG (15)
    test 90 DIG: DIG
    test 91 DIG: True
    test 92 DIG: True

    test 93 EPS: EPS (2.22044604925e-16)
    test 94 EPS: EPS
    test 95 EPS: True
    test 96 EPS: True

    test 97 EPS0: EPS0 (4.93038065763e-32)
    test 98 EPS0: EPS0
    test 99 EPS0: True
    test 100 EPS0: True

    test 101 EPS02: EPS02 (2.43086534291e-63)
    test 102 EPS02: EPS02
    test 103 EPS02: True
    test 104 EPS02: True

    test 105 EPS1: EPS1 (1.0)
    test 106 EPS1: EPS1
    test 107 EPS1: True
    test 108 EPS1: True

    test 109 EPS2: EPS2 (4.4408920985e-16)
    test 110 EPS2: EPS2
    test 111 EPS2: True
    test 112 EPS2: True

    test 113 EPS4: EPS4 (8.881784197e-16)
    test 114 EPS4: EPS4
    test 115 EPS4: True
    test 116 EPS4: True

    test 117 EPS_2: EPS_2 (1.11022302463e-16)
    test 118 EPS_2: EPS_2
    test 119 EPS_2: True
    test 120 EPS_2: True

    test 121 INF: INF (inf)
    test 122 INF: INF
    test 123 INF: True
    test 124 INF: True

    test 125 INT0: INT0 (0)
    test 126 INT0: INT0
    test 127 INT0: True
    test 128 INT0: True

    test 129 MANT_DIG: MANT_DIG (53)
    test 130 MANT_DIG: MANT_DIG
    test 131 MANT_DIG: True
    test 132 MANT_DIG: True

    test 133 MAX: MAX (1.79769313486e+308)
    test 134 MAX: MAX
    test 135 MAX: True
    test 136 MAX: True

    test 137 MAX_EXP: MAX_EXP (1024)
    test 138 MAX_EXP: MAX_EXP
    test 139 MAX_EXP: True
    test 140 MAX_EXP: True

    test 141 MIN: MIN (2.22507385851e-308)
    test 142 MIN: MIN
    test 143 MIN: True
    test 144 MIN: True

    test 145 MIN_EXP: MIN_EXP (-1021)
    test 146 MIN_EXP: MIN_EXP
    test 147 MIN_EXP: True
    test 148 MIN_EXP: True

    test 149 NAN: NAN (nan)
    test 150 NAN: NAN
    test 151 NAN: True
    test 152 NAN: True

    test 153 NEG0: NEG0 (-0)
    test 154 NEG0: NEG0
    test 155 NEG0: True
    test 156 NEG0: True

    test 157 NINF: NINF (-inf)
    test 158 NINF: NINF
    test 159 NINF: True
    test 160 NINF: True

    test 161 PI: PI (3.14159265359)
    test 162 PI: PI
    test 163 PI: True
    test 164 PI: True

    test 165 PI2: PI2 (6.28318530718)
    test 166 PI2: PI2
    test 167 PI2: True
    test 168 PI2: True

    test 169 PI3: PI3 (9.42477796077)
    test 170 PI3: PI3
    test 171 PI3: True
    test 172 PI3: True

    test 173 PI3_2: PI3_2 (4.71238898038)
    test 174 PI3_2: PI3_2
    test 175 PI3_2: True
    test 176 PI3_2: True

    test 177 PI4: PI4 (12.5663706144)
    test 178 PI4: PI4
    test 179 PI4: True
    test 180 PI4: True

    test 181 PI_2: PI_2 (1.57079632679)
    test 182 PI_2: PI_2
    test 183 PI_2: True
    test 184 PI_2: True

    test 185 PI_3: PI_3 (1.0471975512)
    test 186 PI_3: PI_3
    test 187 PI_3: True
    test 188 PI_3: True

    test 189 PI_4: PI_4 (0.785398163397)
    test 190 PI_4: PI_4
    test 191 PI_4: True
    test 192 PI_4: True

    test 193 R_FM: R_FM (6371000.0)
    test 194 R_FM: R_FM
    test 195 R_FM: True
    test 196 R_FM: True

    test 197 R_GM: R_GM (6371230.0)
    test 198 R_GM: R_GM
    test 199 R_GM: True
    test 200 R_GM: True

    test 201 R_KM: R_KM (6371.00877141)
    test 202 R_KM: R_KM
    test 203 R_KM: True
    test 204 R_KM: True

    test 205 R_M: R_M (6371008.77141)
    test 206 R_M: R_M
    test 207 R_M: True
    test 208 R_M: True

    test 209 R_MA: R_MA (6378137.0)
    test 210 R_MA: R_MA
    test 211 R_MA: True
    test 212 R_MA: True

    test 213 R_MB: R_MB (6356752.3)
    test 214 R_MB: R_MB
    test 215 R_MB: True
    test 216 R_MB: True

    test 217 R_NM: R_NM (3440.069531)
    test 218 R_NM: R_NM
    test 219 R_NM: True
    test 220 R_NM: True

    test 221 R_QM: R_QM (6372797.56086)
    test 222 R_QM: R_QM
    test 223 R_QM: True
    test 224 R_QM: True

    test 225 R_SM: R_SM (3958.76131605)
    test 226 R_SM: R_SM
    test 227 R_SM: True
    test 228 R_SM: True

    test 229 R_VM: R_VM (6366707.01949)
    test 230 R_VM: R_VM
    test 231 R_VM: True
    test 232 R_VM: True

    test 233 EPS: True
    test 234 EPS+1: True
    test 235 EPS-1: True

    test 236 EPS0: True
    test 237 EPS02: True

    test 238 EPS_2: True
    test 239 EPS_2: 1.1102230246251565e-16

    test 240 EPS1: True
    test 241 EPS1+1: True
    test 242 EPS1-1: True

    test 243 EPS2: True
    test 244 EPS2: 4.440892098500626e-16

    test 245 EPS4: True
    test 246 EPS4: 8.881784197001252e-16

    test 247 INF: True
    test 248 INF: False
    test 249 NINF: True
    test 250 NINF: -inf

    test 251 INT0: 0
    test 252 INT0: True
    test 253 INT0: True
    test 254 INT0: False
    test 255 INT0: False
    test 256 INT0: False

    test 257 NAN: True
    test 258 NAN: False
    test 259 NAN: False

    test 260 NEG0: -0.0
    test 261 NEG0: True
    test 262 NEG0: False
    test 263 NEG0: 0.0

    test 264 _off90: True
    test 265 _off90: True
    test 266 float_: (1.0, 2.0, 3.0)
    test 267 float_: True

    test 268 _0_0: True

    test 269 _0_0s: 0
    test 270 _0_0s: 0
    test 271 _0_0s: 1
    test 272 _0_0s: 1
    test 273 _0_0s: 2
    test 274 _0_0s: 2
    test 275 _0_0s: 3
    test 276 _0_0s: 3
    test 277 _0_0s: 5
    test 278 _0_0s: 5
    test 279 _0_0s: 8
    test 280 _0_0s: 8
    test 281 _0_0s: 9
    test 282 _0_0s: 9
    test 283 _0_0s: 10
    test 284 _0_0s: 10
    test 285 _0_0s: 12
    test 286 _0_0s: 12
    test 287 _0_0s: 25
    test 288 _0_0s: 25
    test 289 _0_0s: 49
    test 290 _0_0s: 49
    test 291 _0_0s: 129
    test 292 _0_0s: 129
    test 293 _0_0s: 257
    test 294 _0_0s: 257

    10 of 294 testConstants.py tests (3.4%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 921.965 us

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testCss.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.CassiniSoldner from .css by testCss.py line 11
# lazily imported pygeodesy.Css from .css by testCss.py line 11
# lazily imported pygeodesy.CSSError from .css by testCss.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testCss.py line 11
# lazily imported pygeodesy.fstr from .streprs by testCss.py line 11
# lazily imported pygeodesy.haversine from .formy by testCss.py line 11
# lazily imported pygeodesy.hypot from .fmath by testCss.py line 11
# lazily imported pygeodesy.toCss from .css by testCss.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testCss.py line 124
# lazily imported pygeodesy.ellipsoidalNvector by testCss.py line 124
# lazily imported pygeodesy.ellipsoidalVincenty by testCss.py line 124

    testing testCss.py 23.03.27 (module pygeodesy.css 24.06.11) isLazy=3
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1053
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
    test 1 CassiniSoldner(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 2 Exact: True
# lazily imported pygeodesy.elliptic by gx.py line 426
    test 3 forward: -37518.854545, 230003.561828
    test 4 reverse: 50.9, 1.8
    test 5 forward4: -37518.854545, 230003.561828, 89.586104, 0.999983
    test 6 equatorarc: 89.662511
    test 7 equatorazimuth: 39.192992
    test 8 copy(CassiniSoldner): (<class 'pygeodesy.css.CassiniSoldner'>, True)
    test 9 CassiniSoldner.copy(): (<class 'pygeodesy.css.CassiniSoldner'>, True)
    test 10 reverse: 50.899937, 1.793161
    test 11 forward: -38000.0, 230000.0
    test 12 reverse4: 50.899937, 1.793161, 89.580797, 0.999982
    test 13 reverse(pygeodesy.ellipsoidalExact): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 14 reverse(pygeodesy.ellipsoidalNvector): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 15 reverse(pygeodesy.ellipsoidalVincenty): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 16 CassiniSoldner(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 17 forward: 170557.151692, -293280.6051
    test 18 reverse: 48.833333, 2.333333
    test 19 hypot: 339268.707  FAILED, KNOWN, expected 338901.865
    test 20 toCss: -37518.854545 230003.561828 +1.00m
    test 21 toCss: [E:-37518.854545, N:230003.561828, H:+1.00m, name:'Calais', C:CassiniSoldner(48.833333, 2.333333, name='Paris')]
    test 22 Css.easting: -37518.854545
    test 23 Css.northing: 230003.561828
    test 24 Css.height: 1.0
    test 25 Css.azi: 89.586103815
    test 26 Css.rk: 0.999982722
    test 27 Css.name: Calais
    test 28 Css.cs0: 48.833333 2.333333
    test 29 Css.toLatLon: LatLon(50°54′00.0″N, 001°48′00.0″E, +1.00m)
    test 30 Css.toLatLon.height: 1.0
    test 31 Css.toLatLon.name: Calais
    test 32 Css.toLatLon.datum.name: WGS84
    test 33 Css.toLatLon.height: 1.0  FAILED, KNOWN, expected height(1.0)
    test 34 copy(Css): (<class 'pygeodesy.css.Css'>, True)
    test 35 Css.copy(): (<class 'pygeodesy.css.Css'>, True)
    test 36 cs0.name: Paris
    test 37 cs0.name: Default
    test 38 cs0.flattening: 0.003352811
    test 39 cs0.lat0: 0.0
    test 40 cs0.equatoradius: 6378137.0
    test 41 cs0.lat0: 0.0  FAILED, KNOWN, expected lat(0.0)
    test 42 classof.height: 1.0
    test 43 classof.azi: 89.586103815
    test 44 classof.rk: 0.999982722
    test 45 classof.name: Calais
    test 46 classof.cs0: 48.833333 2.333333
    test 47 cs0.latlon0: (48.833333, 2.333333)
    test 48 cs0.latlon0: (48.833333, 2.333333)
    test 49 cs0.latlon0: latlon0 (None): 'NoneType' object has no attribute 'lat'
    test 50 cs0.latlon0: (48.0, 2.0)
    test 51 datum: True
    test 52 datum: True
    test 53 forward6: (39142.269011, -229679.266845, 90.401497, 0.999981, 90.352206, 41.257592)

    3 of 53 testCss.py tests (5.7%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 94.295 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testDatums.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Datum from .datums by testDatums.py line 11
# lazily imported pygeodesy.Datums from .datums by testDatums.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testDatums.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testDatums.py line 11
# lazily imported pygeodesy.R_M from .constants by testDatums.py line 11
# lazily imported pygeodesy.Transform from .datums by testDatums.py line 11
# lazily imported pygeodesy.Transforms from .datums by testDatums.py line 11

    testing testDatums.py 24.05.17 (module pygeodesy.datums 24.06.24) isLazy=3
    test 1 ellipsoid: True
    test 2 transform: True
    test 3 datum: True
    test 4 TestEllipsiod: name='TestEllipsiod', a=1000, f=0, f_=0, b=1000
    test 5 TestTransform: name='TestTransform', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0
    test 6 TestDatum: name='TestDatum', ellipsoid=Ellipsoids.TestEllipsiod, transform=Transforms.TestTransform
    test 7 ED50.inverse().inverse(): True
    test 8 Sphere: True

    test 9 all: all

    test 10 BD72: name='BD72', ellipsoid=Ellipsoids.Intl1924, transform=Transforms.BD72
    test 11 Intl1924: name='Intl1924', a=6378388, f=0.003367, f_=297, b=6356911.94612795
    test 12 BD72: name='BD72', tx=106.87, ty=-52.298, tz=103.72, s1=1.0, rx=-1.6317e-06, ry=-2.2154e-06, rz=-8.9311e-06, s=1.2727, sx=-0.33657, sy=-0.45696, sz=-1.8422

    test 13 DHDN: name='DHDN', ellipsoid=Ellipsoids.Bessel1841, transform=Transforms.DHDN
    test 14 Bessel1841: name='Bessel1841', a=6377397.155, f=0.00334277, f_=299.1528128, b=6356078.962818
    test 15 DHDN: name='DHDN', tx=-591.28, ty=-81.35, tz=-396.39, s1=0.99999, rx=7.1607e-06, ry=-3.5682e-07, rz=-7.0686e-06, s=-9.82, sx=1.477, sy=-0.0736, sz=-1.458

    test 16 ED50: name='ED50', ellipsoid=Ellipsoids.Intl1924, transform=Transforms.ED50
    test 17 Intl1924: name='Intl1924', a=6378388, f=0.003367, f_=297, b=6356911.94612795
    test 18 ED50: name='ED50', tx=89.5, ty=93.8, tz=123.1, s1=1.0, rx=0.0, ry=0.0, rz=7.5631e-07, s=-1.2, sx=0.0, sy=0.0, sz=0.156

    test 19 GDA2020: name='GDA2020', ellipsoid=Ellipsoids.GRS80, transform=Transforms.WGS84
    test 20 GRS80: name='GRS80', a=6378137, f=0.00335281, f_=298.2572221, b=6356752.31414035
    test 21 WGS84: name='WGS84', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 22 GRS80: name='GRS80', ellipsoid=Ellipsoids.GRS80, transform=Transforms.WGS84
    test 23 GRS80: name='GRS80', a=6378137, f=0.00335281, f_=298.2572221, b=6356752.31414035
    test 24 WGS84: name='WGS84', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 25 Irl1975: name='Irl1975', ellipsoid=Ellipsoids.AiryModified, transform=Transforms.Irl1975
    test 26 AiryModified: name='AiryModified', a=6377340.189, f=0.00334085, f_=299.3249646, b=6356034.44793853
    test 27 Irl1975: name='Irl1975', tx=-482.53, ty=130.6, tz=-564.56, s1=0.99999, rx=5.0518e-06, ry=1.0375e-06, rz=3.0592e-06, s=-8.15, sx=1.042, sy=0.214, sz=0.631

    test 28 Krassovski1940: name='Krassovski1940', ellipsoid=Ellipsoids.Krassovski1940, transform=Transforms.Krassovski1940
    test 29 Krassovski1940: name='Krassovski1940', a=6378245, f=0.00335233, f_=298.3, b=6356863.01877305
    test 30 Krassovski1940: name='Krassovski1940', tx=-24, ty=123.0, tz=94.0, s1=1.0, rx=-9.6963e-08, ry=1.2605e-06, rz=6.3026e-07, s=-2.423, sx=-0.02, sy=0.26, sz=0.13

    test 31 Krassowsky1940: name='Krassowsky1940', ellipsoid=Ellipsoids.Krassowsky1940, transform=Transforms.Krassowsky1940
    test 32 Krassowsky1940: name='Krassowsky1940', a=6378245, f=0.00335233, f_=298.3, b=6356863.01877305
    test 33 Krassowsky1940: name='Krassowsky1940', tx=-24, ty=123.0, tz=94.0, s1=1.0, rx=-9.6963e-08, ry=1.2605e-06, rz=6.3026e-07, s=-2.423, sx=-0.02, sy=0.26, sz=0.13

    test 34 MGI: name='MGI', ellipsoid=Ellipsoids.Bessel1841, transform=Transforms.MGI
    test 35 Bessel1841: name='Bessel1841', a=6377397.155, f=0.00334277, f_=299.1528128, b=6356078.962818
    test 36 MGI: name='MGI', tx=-577.33, ty=-90.129, tz=-463.92, s1=1.0, rx=2.4905e-05, ry=7.1462e-06, rz=2.5681e-05, s=-2.423, sx=5.137, sy=1.474, sz=5.297

    test 37 NAD27: name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27
    test 38 Clarke1866: name='Clarke1866', a=6378206.4, f=0.00339008, f_=294.97869821, b=6356583.8
    test 39 NAD27: name='NAD27', tx=8.0, ty=-160, tz=-176, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 40 NAD83: name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83
    test 41 GRS80: name='GRS80', a=6378137, f=0.00335281, f_=298.2572221, b=6356752.31414035
    test 42 NAD83: name='NAD83', tx=1.004, ty=-1.91, tz=-0.515, s1=1.0, rx=1.2945e-07, ry=1.6484e-09, rz=5.333e-08, s=-0.0015, sx=0.0267, sy=0.00034, sz=0.011

    test 43 NTF: name='NTF', ellipsoid=Ellipsoids.Clarke1880IGN, transform=Transforms.NTF
    test 44 Clarke1880IGN: name='Clarke1880IGN', a=6378249.2, f=0.00340755, f_=293.46602129, b=6356515
    test 45 NTF: name='NTF', tx=-168, ty=-60, tz=320.0, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 46 OSGB36: name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36
    test 47 Airy1830: name='Airy1830', a=6377563.396, f=0.00334085, f_=299.3249646, b=6356256.90923729
    test 48 OSGB36: name='OSGB36', tx=-446.45, ty=125.16, tz=-542.06, s1=1.0, rx=-7.2819e-07, ry=-1.1975e-06, rz=-4.0826e-06, s=20.489, sx=-0.1502, sy=-0.247, sz=-0.8421

    test 49 Potsdam: name='Potsdam', ellipsoid=Ellipsoids.Bessel1841, transform=Transforms.Bessel1841
    test 50 Bessel1841: name='Bessel1841', a=6377397.155, f=0.00334277, f_=299.1528128, b=6356078.962818
    test 51 Bessel1841: name='Bessel1841', tx=-582, ty=-105, tz=-414, s1=0.99999, rx=-5.0421e-06, ry=-1.6968e-06, rz=1.4932e-05, s=-8.3, sx=-1.04, sy=-0.35, sz=3.08

    test 52 Sphere: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 53 Sphere: name='Sphere', a=6371008.771415, f=0, f_=0, b=6371008.771415
    test 54 WGS84: name='WGS84', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 55 TokyoJapan: name='TokyoJapan', ellipsoid=Ellipsoids.Bessel1841, transform=Transforms.TokyoJapan
    test 56 Bessel1841: name='Bessel1841', a=6377397.155, f=0.00334277, f_=299.1528128, b=6356078.962818
    test 57 TokyoJapan: name='TokyoJapan', tx=148.0, ty=-507, tz=-685, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 58 WGS72: name='WGS72', ellipsoid=Ellipsoids.WGS72, transform=Transforms.WGS72
    test 59 WGS72: name='WGS72', a=6378135, f=0.00335278, f_=298.26, b=6356750.52001609
    test 60 WGS72: name='WGS72', tx=0.0, ty=0.0, tz=-4.5, s1=1.0, rx=0.0, ry=0.0, rz=2.6859e-06, s=-0.22, sx=0.0, sy=0.0, sz=0.554

    test 61 WGS84: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 62 WGS84: name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518
    test 63 WGS84: name='WGS84', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 64 total: 18

    all 64 testDatums.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 2.040 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testDeprecated.py
./pygeodesy/deprecated/classes.py:121: DeprecationWarning: class L{pygeodesy.deprecated.classes.HeightIDW} has been DEPRECATED, use class L{HeightIDWeuclidean}.
  deprecated_class(self.__class__)
./pygeodesy/deprecated/classes.py:134: DeprecationWarning: class L{pygeodesy.deprecated.classes.HeightIDW2} has been DEPRECATED, use class L{HeightIDWequirectangular}.
  deprecated_class(self.__class__)
./pygeodesy/deprecated/classes.py:148: DeprecationWarning: class L{pygeodesy.deprecated.classes.HeightIDW3} has been DEPRECATED, use class L{HeightIDWhaversine}.
  deprecated_class(self.__class__)
./test/testDeprecated.py:37: DeprecationWarning: function L{pygeodesy.deprecated.functions.areaof} has been DEPRECATED, use function L{pygeodesy.areaOf}.
  self.test('areaof', areaof(p, radius=R_MA), '7.086883e+09', fmt='%.6e')  # PYCHOK DEPRECATED
./test/testDeprecated.py:40: DeprecationWarning: function L{pygeodesy.deprecated.functions.bounds} has been DEPRECATED, use function L{pygeodesy.boundsOf}.
  b = map2(float, bounds(p))  # PYCHOK DEPRECATED
./test/testDeprecated.py:43: DeprecationWarning: function L{pygeodesy.deprecated.functions.anStr} has been DEPRECATED, use function L{pygeodesy.anstr}.
  self.test('anStr', anStr('a-b?_'), 'a-b__')  # PYCHOK DEPRECATED
./test/testDeprecated.py:45: DeprecationWarning: function L{pygeodesy.deprecated.functions.clipStr} has been DEPRECATED, use function L{pygeodesy.clips}.
  self.test('clipStr', clipStr('test/testBasics.py', limit=12), 'test/t....ics.py')  # PYCHOK DEPRECATED
./test/testDeprecated.py:47: DeprecationWarning: function L{pygeodesy.deprecated.functions.decodeEPSG2} has been DEPRECATED, use function L{epsg.decode2}.
  self.test('decodeEPSG2', decodeEPSG2(32712), "(12, 'S')")  # PYCHOK DEPRECATED
./test/testDeprecated.py:48: DeprecationWarning: function L{pygeodesy.deprecated.functions.encodeEPSG} has been DEPRECATED, use function L{epsg.encode}.
  self.test('encodeEPSG', encodeEPSG(12, hemipole='S'), '32712')  # PYCHOK DEPRECATED
./test/testDeprecated.py:50: DeprecationWarning: function L{pygeodesy.deprecated.functions.equirectangular3} has been DEPRECATED, use function L{pygeodesy.equirectangular4}.
  t = equirectangular3(0, 2, 3, 4)  # PYCHOK DEPRECATED
./test/testDeprecated.py:54: DeprecationWarning: function L{pygeodesy.deprecated.functions.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-6), '0.123000')  # PYCHOK DEPRECATED
./test/testDeprecated.py:55: DeprecationWarning: function L{pygeodesy.deprecated.functions.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6), '0.123')  # PYCHOK DEPRECATED
./test/testDeprecated.py:56: DeprecationWarning: function L{pygeodesy.deprecated.functions.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr((0.123, 456.789), prec=+6), '0.123, 456.789')  # PYCHOK DEPRECATED
./test/testDeprecated.py:57: DeprecationWarning: function L{pygeodesy.deprecated.functions.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-5, fmt='%.*e'), '1.23000e-01')  # PYCHOK DEPRECATED
./test/testDeprecated.py:58: DeprecationWarning: function L{pygeodesy.deprecated.functions.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+5, fmt='%.*e'), '1.23e-01')  # PYCHOK DEPRECATED
./test/testDeprecated.py:59: DeprecationWarning: function L{pygeodesy.deprecated.functions.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6, fmt='%.*f'), '0.123')  # PYCHOK DEPRECATED
./test/testDeprecated.py:61: DeprecationWarning: function L{pygeodesy.deprecated.functions.hypot3} has been DEPRECATED, use function L{pygeodesy.hypot_}.
  h = hypot3(3000, 200, 10)  # PYCHOK DEPRECATED
./test/testDeprecated.py:66: DeprecationWarning: function L{pygeodesy.deprecated.functions.isenclosedby} has been DEPRECATED, use function L{pygeodesy.isenclosedBy}.
  self.test('isenclosedby', isenclosedby(LatLon(45.5, 1.5), b), True)  # PYCHOK DEPRECATED
./test/testDeprecated.py:70: DeprecationWarning: function L{pygeodesy.deprecated.functions.nearestOn3} has been DEPRECATED, use function L{pygeodesy.nearestOn5}.
  t = nearestOn3(p, b, adjust=False)  # PYCHOK DEPRECATED
./test/testDeprecated.py:73: DeprecationWarning: function L{pygeodesy.deprecated.functions.nearestOn4} has been DEPRECATED, use function L{pygeodesy.nearestOn5}.
  t = nearestOn4(p, b, adjust=False)  # PYCHOK DEPRECATED
./test/testDeprecated.py:77: DeprecationWarning: function L{pygeodesy.deprecated.functions.parseUTM} has been DEPRECATED, use function L{parseUTM5}.
  t = parseUTM('18 N 516620 4574500', Utm=None)  # PYCHOK Milford, PA
./test/testDeprecated.py:81: DeprecationWarning: function L{pygeodesy.deprecated.functions.perimeterof} has been DEPRECATED, use function L{pygeodesy.perimeterOf}.
  self.test('perimeterof', perimeterof(p, radius=R_MA), '2.687460e+05', fmt='%.6e')  # PYCHOK DEPRECATED
./test/testDeprecated.py:84: DeprecationWarning: function L{pygeodesy.deprecated.functions.polygon} has been DEPRECATED, use function L{pygeodesy.points2}.
  self.test('polygon', polygon(p)[0], 3)  # PYCHOK DEPRECATED
./test/testDeprecated.py:86: DeprecationWarning: function L{pygeodesy.deprecated.functions.simplify2} has been DEPRECATED, use function L{pygeodesy.simplifyRW}.
  t = simplify2(RdpFFI, 16, adjust=True, shortest=False)  # PYCHOK DEPRECATED
./test/testDeprecated.py:89: DeprecationWarning: function L{pygeodesy.deprecated.functions.toUtm} has been DEPRECATED, use function L{pygeodesy.toUtm8}.
  t = toUtm('50°52′10″N', '115°39′03″W', Utm=None, name='Mt Assiniboine')  # PYCHOK DEPRECATED
./test/testDeprecated.py:92: DeprecationWarning: function L{pygeodesy.deprecated.functions.utmZoneBand2} has been DEPRECATED, use function L{pygeodesy.utmZoneBand5}.
  t = utmZoneBand2('50°52′10″N', '115°39′03″W')  # PYCHOK DEPRECATED
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.R_MA from .constants by testDeprecated.py line 11
# lazily imported pygeodesy.deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.isDEPRECATED from .basics by testDeprecated.py line 11
# lazily imported pygeodesy.unstr from .streprs by testDeprecated.py line 11
# lazily imported pygeodesy.HeightIDWequirectangular from .heights by testDeprecated.py line 11
# lazily imported pygeodesy.HeightIDWeuclidean from .heights by testDeprecated.py line 11
# lazily imported pygeodesy.HeightIDWhaversine from .heights by testDeprecated.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testRoutes.py line 13
# lazily imported pygeodesy.R_KM from .constants by testRoutes.py line 13
# lazily imported pygeodesy.R_M from .constants by testRoutes.py line 13
# lazily imported pygeodesy.ellipsoidalVincenty by testRoutes.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testRoutes.py line 13
# lazily imported pygeodesy.areaOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.isclockwise from .points by testRoutes.py line 13
# lazily imported pygeodesy.perimeterOf from .points by testRoutes.py line 13

    testing testDeprecated.py 24.06.05 (module pygeodesy.deprecated 24.06.15) isLazy=3

    test 1 HeightIDW: True
    test 2 HeightIDW2: True
    test 3 HeightIDW3: True

# lazily imported pygeodesy.booleans by points.py line 978
    test 4 areaof: 7.086883e+09
    test 5 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 6 anStr: a-b__
    test 7 clipStr: test/t....ics.py
# lazily imported pygeodesy.epsg by functions.py line 93
    test 8 decodeEPSG2: (12, 'S')
    test 9 encodeEPSG: 32712
    test 10 equirectangular3: 3
    test 11 equirectangular3: 12.997
    test 12 fStr: 0.123000
    test 13 fStr: 0.123
    test 14 fStr: 0.123, 456.789
    test 15 fStr: 1.23000e-01
    test 16 fStr: 1.23e-01
    test 17 fStr: 0.123
    test 18 hypot3: 3006.675905
    test 19 isenclosedby: True
    test 20 nearestOn3: 3
    test 21 nearestOn3: (45.5, 1.5)
    test 22 nearestOn4: 4
    test 23 nearestOn4: (45.5, 1.5)
    test 24 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 25 perimeterof: 2.687460e+05
    test 26 polygon: 3
# lazily imported pygeodesy.simplify by functions.py line 293
    test 27 simplify2: 4
    test 28 toUtm: 6
    test 29 utmZoneBand2: (11, 'U')

    test 30 HeightIDW: True
    test 31 HeightIDW2: True
    test 32 HeightIDW3: True

    test 33 areaof: 7.086883e+09
    test 34 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 35 anStr: a-b__
    test 36 clipStr: test/t....ics.py
    test 37 decodeEPSG2: (12, 'S')
    test 38 encodeEPSG: 32712
    test 39 equirectangular3: 3
    test 40 equirectangular3: 12.997
    test 41 fStr: 0.123000
    test 42 fStr: 0.123
    test 43 fStr: 0.123, 456.789
    test 44 fStr: 1.23000e-01
    test 45 fStr: 1.23e-01
    test 46 fStr: 0.123
    test 47 hypot3: 3006.675905
    test 48 isenclosedby: True
    test 49 nearestOn3: 3
    test 50 nearestOn3: (45.5, 1.5)
    test 51 nearestOn4: 4
    test 52 nearestOn4: (45.5, 1.5)
    test 53 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 54 perimeterof: 2.687460e+05
    test 55 polygon: 3
    test 56 simplify2: 4
    test 57 toUtm: 6
    test 58 utmZoneBand2: (11, 'U')

    test 59 HeightIDW: True
    test 60 HeightIDW2: True
    test 61 HeightIDW3: True

    test 62 areaof: 7.086883e+09
    test 63 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 64 anStr: a-b__
    test 65 clipStr: test/t....ics.py
    test 66 decodeEPSG2: (12, 'S')
    test 67 encodeEPSG: 32712
    test 68 equirectangular3: 3
    test 69 equirectangular3: 12.997
    test 70 fStr: 0.123000
    test 71 fStr: 0.123
    test 72 fStr: 0.123, 456.789
    test 73 fStr: 1.23000e-01
    test 74 fStr: 1.23e-01
    test 75 fStr: 0.123
    test 76 hypot3: 3006.675905
    test 77 isenclosedby: True
    test 78 nearestOn3: 3
    test 79 nearestOn3: (45.5, 1.5)
    test 80 nearestOn4: 4
    test 81 nearestOn4: (45.5, 1.5)
    test 82 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 83 perimeterof: 2.687460e+05
    test 84 polygon: 3
    test 85 simplify2: 4
    test 86 toUtm: 6
    test 87 utmZoneBand2: (11, 'U')

    test 88 deprecated: 7
    test 89 isDEPRECATED('bases'): True
    test 90 isDEPRECATED('datum'): True
    test 91 isDEPRECATED('nvector'): True
    test 92 isDEPRECATED('rhumbaux'): True
    test 93 isDEPRECATED('rhumbBase'): True
    test 94 isDEPRECATED('rhumbsolve'): True
    test 95 isDEPRECATED('rhumbx'): True

    78 of 95 testDeprecated.py tests (82.1%) FAILED, incl. 78 DeprecationWarnings (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 32.831 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testDms.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.F_D from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DM from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DEG from .dms by testDms.py line 11
# lazily imported pygeodesy.F_MIN from .dms by testDms.py line 11
# lazily imported pygeodesy.F_SEC from .dms by testDms.py line 11
# lazily imported pygeodesy.F_RAD from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D60 from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DM_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DMS_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DEG_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_MIN_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_SEC_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_RAD_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D60_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DM__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DMS__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DEG__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_MIN__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_SEC__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_RAD__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D60__ from .dms by testDms.py line 11
# lazily imported pygeodesy.compassPoint from .dms by testDms.py line 11
# lazily imported pygeodesy.degDMS from .dms by testDms.py line 11
# lazily imported pygeodesy.fstr from .streprs by testDms.py line 11
# lazily imported pygeodesy.parseDDDMMSS from .dms by testDms.py line 11
# lazily imported pygeodesy.parseDMS from .dms by testDms.py line 11
# lazily imported pygeodesy.ParseError from .errors by testDms.py line 11
# lazily imported pygeodesy.parse3llh from .dms by testDms.py line 11
# lazily imported pygeodesy.RangeError from .errors by testDms.py line 11
# lazily imported pygeodesy.rangerrors from .errors by testDms.py line 11
# lazily imported pygeodesy.toDMS from .dms by testDms.py line 11

    testing testDms.py 23.03.27 (module pygeodesy.dms 24.06.11) isLazy=3
    test 1 parseDMS('0.0°'): 0.0
    test 2 parseDMS('0°'): 0.0
    test 3 parseDMS('000°00'00"'): 0.0
    test 4 parseDMS('000°00'00.0"'): 0.0
    test 5 parseDMS('000° 00'00"'): 0.0
    test 6 parseDMS('000°00 ' 00.0"'): 0.0
    test 7 parseDMS('000° 00' 00.0'): 0.0
    test 8 parseDMS('000°-00′-00.0"'): 0.0
    test 9 parseDDDMMSS(1): 1.0
    test 10 parseDMS(1): 1.0
    test 11 parseDDDMMSS(12): 12.0
    test 12 parseDMS(12): 12.0
    test 13 parseDDDMMSS(123): 123.0
    test 14 parseDMS(123): 123.0
    test 15 parseDDDMMSS(1234): 12.567
    test 16 parseDMS(1234): 1234.0
    test 17 parseDDDMMSS(12345): 123.75
    test 18 parseDMS(12345): 12345.0
    test 19 parseDDDMMSS(123456): 12.582
    test 20 parseDMS(123456): 123456.0
    test 21 parseDDDMMSS(1234567): 123.769
    test 22 parseDMS(1234567): 1234567.0
    test 23 parseDDDMMSS(12345678): 1234.955
    test 24 parseDMS(12345678): 12345678.0
    test 25 parseDDDMMSS(0.1): 0.1
    test 26 parseDMS(0.1): 0.1
    test 27 parseDDDMMSS(1.2): 1.2
    test 28 parseDMS(1.2): 1.2
    test 29 parseDDDMMSS(12.3): 12.3
    test 30 parseDMS(12.3): 12.3
    test 31 parseDDDMMSS(123.4): 123.4
    test 32 parseDMS(123.4): 123.4
    test 33 parseDDDMMSS(1234.5): 12.575
    test 34 parseDMS(1234.5): 1234.5
    test 35 parseDDDMMSS(12345.6): 123.76
    test 36 parseDMS(12345.6): 12345.6
    test 37 parseDDDMMSS(123456.7): 12.582
    test 38 parseDMS(123456.7): 123456.7
    test 39 parseDDDMMSS('1N'): 1.0
    test 40 parseDMS('1N'): 1.0
    test 41 parseDDDMMSS('12S'): -12.0
    test 42 parseDMS('12S'): -12.0
    test 43 parseDDDMMSS('012.3W'): -12.3
    test 44 parseDMS('012.3W'): -12.3
    test 45 parseDDDMMSS('123E'): 123.0
    test 46 parseDMS('123E'): 123.0
    test 47 parseDDDMMSS('1234N'): 12.567
    test 48 parseDMS('1234N'): 1234.0
    test 49 parseDDDMMSS('12345E'): 123.75
    test 50 parseDMS('12345E'): 12345.0
    test 51 parseDDDMMSS('1234.5S'): -12.575
    test 52 parseDMS('1234.5S'): -1234.5
    test 53 parseDDDMMSS('12345.6E'): 123.76
    test 54 parseDMS('12345.6E'): 12345.6
    test 55 parseDDDMMSS('123456.7S'): -12.582
    test 56 parseDMS('123456.7S'): -123456.7
    test 57 parseDDDMMSS('1234567.8W'): -123.769
    test 58 parseDMS('1234567.8W'): -1234567.8
    test 59 parseDDDMMSS('12345678E'): 12345678.0
    test 60 parseDMS('12345678E'): 12345678.0
    test 61 parseDDDMMSS(345.0, NS): 3.75
    test 62 parseDDDMMSS(345.0, EW): 345.0
    test 63 parseDDDMMSS(5430.0, NS): 54.5
    test 64 parseDDDMMSS(5430.0, EW): 54.5
    test 65 parseDDDMMSS(76.5432, sexagecimal=False): 76.5432
    test 66 parseDDDMMSS(76.5432, sexagecimal=True): 76.9089
    test 67 parseDDDMMSS(00.0102, sexagecimal=False): 0.0102
    test 68 parseDDDMMSS(00.0102, sexagecimal=True): 0.0172
    test 69 parseDDDMMSS('12E'): ParseError("sexagecimal (False), strDDDMMSS ('12E') or suffix ('NSEW'): form DD applies N-S: invalid")
    test 70 parseDMS('12E'): 12.0
    test 71 parseDDDMMSS('012.3S'): ParseError("sexagecimal (False), strDDDMMSS ('012.3S') or suffix ('NSEW'): form DDD applies E-W: invalid")
    test 72 parseDMS('012.3S'): -12.3
    test 73 parseDDDMMSS('123N'): ParseError("sexagecimal (False), strDDDMMSS ('123N') or suffix ('NSEW'): form DDD applies E-W: invalid")
    test 74 parseDMS('123N'): 123.0
    test 75 parseDDDMMSS('1234E'): ParseError("sexagecimal (False), strDDDMMSS ('1234E') or suffix ('NSEW'): form DDMM applies N-S: invalid")
    test 76 parseDMS('1234E'): 1234.0
    test 77 parseDDDMMSS('12345N'): ParseError("sexagecimal (False), strDDDMMSS ('12345N') or suffix ('NSEW'): form DDDMM applies E-W: invalid")
    test 78 parseDMS('12345N'): 12345.0
    test 79 parseDDDMMSS('1234.5W'): ParseError("sexagecimal (False), strDDDMMSS ('1234.5W') or suffix ('NSEW'): form DDMM applies N-S: invalid")
    test 80 parseDMS('1234.5W'): -1234.5
    test 81 parseDDDMMSS('123456E'): ParseError("sexagecimal (False), strDDDMMSS ('123456E') or suffix ('NSEW'): form DDMMSS applies N-S: invalid")
    test 82 parseDMS('123456E'): 123456.0
    test 83 parseDDDMMSS('1234567S'): ParseError("sexagecimal (False), strDDDMMSS ('1234567S') or suffix ('NSEW'): form DDDMMSS applies E-W: invalid")
    test 84 parseDMS('1234567S'): -1234567.0
    test 85 parseDMS: strDMS (181) or suffix ('NSEW'): 181 beyond 180.0 degrees
    test 86 parseDMS: -90.0
    test 87 parse3llh: 51.477811, -0.001475, 0.0
    test 88 toDMS(dm): 46°00.0′
    test 89 toDMS(dm): 46°00.0′
    test 90 toDMS(dm): 45°59.99′
    test 91 toDMS(dm): 45°59.999′
    test 92 toDMS(dms): 46°00′00.0″
    test 93 toDMS(dms): 45°59′59.96″
    test 94 toDMS(dms): 45°59′59.964″
    test 95 toDMS(d60): 45.5959964
    test 96 toDMS(d60): 45°45′45.36″
    test 97 toDMS(d60): 45d45m45.36s
    test 98 normDMS: 45°45′45.36″
    test 99 parseDMS: 45.7626
    test 100 toDMS(d): 45.7626°
    test 101 toDMS(d): -45.7626°
    test 102 toDMS(dm): 45°45.756′
    test 103 toDMS(dm): -45°45.756′
    test 104 toDMS(dms): 45°45′45.36″
    test 105 toDMS(dms): -45°45′45.36″
    test 106 toDMS(deg): 45.7626
    test 107 toDMS(deg): -45.7626
    test 108 toDMS(min): 4545.756
    test 109 toDMS(min): -4545.756
    test 110 toDMS(sec): 454545.36
    test 111 toDMS(sec): -454545.36
    test 112 toDMS(rad): 0.79871
    test 113 toDMS(rad): -0.79871
    test 114 toDMS(d60): 45.4545
    test 115 toDMS(d60): -45.4545
    test 116 toDMS(d): 45.7626°
    test 117 toDMS(d): -45.7626°
    test 118 toDMS(dm): 45°45.7560′
    test 119 toDMS(dm): -45°45.7560′
    test 120 toDMS(dms): 45°45′45.36″
    test 121 toDMS(dms): -45°45′45.36″
    test 122 toDMS(deg): 45.762600
    test 123 toDMS(deg): -45.762600
    test 124 toDMS(min): 4545.75600
    test 125 toDMS(min): -4545.75600
    test 126 toDMS(sec): 454545.360
    test 127 toDMS(sec): -454545.360
    test 128 toDMS(rad): 0.798708
    test 129 toDMS(rad): -0.798708
    test 130 toDMS(d60): 45.4545360
    test 131 toDMS(d60): -45.4545360
    test 132 toDMS(-d): 45.7626°
    test 133 toDMS(-d): -45.7626°
    test 134 toDMS(-dm): 45°45.7560′
    test 135 toDMS(-dm): -45°45.7560′
    test 136 toDMS(-dms): 45°45′45.36″
    test 137 toDMS(-dms): -45°45′45.36″
    test 138 toDMS(-deg): 45.762600
    test 139 toDMS(-deg): -45.762600
    test 140 toDMS(-min): 4545.75600
    test 141 toDMS(-min): -4545.75600
    test 142 toDMS(-sec): 454545.360
    test 143 toDMS(-sec): -454545.360
    test 144 toDMS(-rad): 0.798708
    test 145 toDMS(-rad): -0.798708
    test 146 toDMS(-d60): 45.45453600
    test 147 toDMS(-d60): -45.45453600
    test 148 toDMS(+d): +45.7626°
    test 149 toDMS(+d): -45.7626°
    test 150 toDMS(+dm): +45°45.7560′
    test 151 toDMS(+dm): -45°45.7560′
    test 152 toDMS(+dms): +45°45′45.36″
    test 153 toDMS(+dms): -45°45′45.36″
    test 154 toDMS(+deg): +45.762600
    test 155 toDMS(+deg): -45.762600
    test 156 toDMS(+min): +4545.75600
    test 157 toDMS(+min): -4545.75600
    test 158 toDMS(+sec): +454545.360
    test 159 toDMS(+sec): -454545.360
    test 160 toDMS(+rad): +0.798708
    test 161 toDMS(+rad): -0.798708
    test 162 toDMS(+d60): +45.454536
    test 163 toDMS(+d60): -45.454536
    test 164 compassPoint(1,): N
    test 165 compassPoint(0,): N
    test 166 compassPoint(-1,): N
    test 167 compassPoint(359,): N
    test 168 compassPoint(24,): NNE
    test 169 compassPoint(24, 1): N
    test 170 compassPoint(24, 2): NE
    test 171 compassPoint(24, 3): NNE
    test 172 compassPoint(226,): SW
    test 173 compassPoint(226, 1): W
    test 174 compassPoint(226, 2): SW
    test 175 compassPoint(226, 3): SW
    test 176 compassPoint(237,): WSW
    test 177 compassPoint(237, 1): W
    test 178 compassPoint(237, 2): SW
    test 179 compassPoint(237, 3): WSW
    test 180 compassPoint(11.25,): NNE
    test 181 compassPoint(11.249,): N
    test 182 compassPoint(-11.25,): N
    test 183 compassPoint(348.749,): NNW
    test 184 compassPoint(45, 1): E
    test 185 compassPoint(44.99, 1): N
    test 186 compassPoint(45, 2): NE
    test 187 compassPoint(44.99, 2): NE
    test 188 compassPoint(45, 3): NE
    test 189 compassPoint(44.99, 3): NE
    test 190 compassPoint(45, 4): NE
    test 191 compassPoint(44.99, 4): NE
    test 192 compassPoint(22.5, 1): N
    test 193 compassPoint(22.49, 1): N
    test 194 compassPoint(22.5, 2): NE
    test 195 compassPoint(22.49, 2): N
    test 196 compassPoint(22.5, 3): NNE
    test 197 compassPoint(22.49, 3): NNE
    test 198 compassPoint(22.5, 4): NNE
    test 199 compassPoint(22.49, 4): NNE
    test 200 compassPoint(11.25, 1): N
    test 201 compassPoint(11.249, 1): N
    test 202 compassPoint(11.25, 2): N
    test 203 compassPoint(11.249, 2): N
    test 204 compassPoint(11.25, 3): NNE
    test 205 compassPoint(11.249, 3): N
    test 206 compassPoint(11.25, 4): NbE
    test 207 compassPoint(11.249, 4): NbE
    test 208 compassPoint(24, 1): N
    test 209 compassPoint(24, 2): NE
    test 210 compassPoint(24, 3): NNE
    test 211 compassPoint(24,): NNE
    test 212 compassPoint(18, 3): NNE
    test 213 compassPoint(11, 4): NbE
    test 214 compassPoint(30, 4): NEbN
    test 215 compassPoint(11.25): NbE
    test 216 compassPoint(33.75): NEbN
    test 217 compassPoint(56.25): NEbE
    test 218 compassPoint(78.75): EbN
    test 219 compassPoint(101.25): EbS
    test 220 compassPoint(123.75): SEbE
    test 221 compassPoint(146.25): SEbS
    test 222 compassPoint(168.75): SbE
    test 223 compassPoint(191.25): SbW
    test 224 compassPoint(213.75): SWbS
    test 225 compassPoint(236.25): SWbW
    test 226 compassPoint(258.75): WbS
    test 227 compassPoint(281.25): WbN
    test 228 compassPoint(303.75): NWbW
    test 229 compassPoint(326.25): NWbN
    test 230 compassPoint(348.75): NbW
    test 231 _DEG: +1.0101
    test 232 _MIN: +0.606′
    test 233 _SEC: +36.36″

    all 233 testDms.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 1.445 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testEcef.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Datums from .datums by testEcef.py line 11
# lazily imported pygeodesy.EcefError from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefFarrell21 from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefFarrell22 from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefKarney from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefMatrix from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefSudano from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefVeness from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefYou from .ecef by testEcef.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testEcef.py line 11
# lazily imported pygeodesy.fstr from .streprs by testEcef.py line 11
# lazily imported pygeodesy.latDMS from .dms by testEcef.py line 11
# lazily imported pygeodesy.lonDMS from .dms by testEcef.py line 11
# lazily imported pygeodesy.parse3llh from .dms by testEcef.py line 11
# lazily imported pygeodesy.sphericalNvector by testEcef.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testEcef.py line 243
# lazily imported pygeodesy.ellipsoidalKarney by testEcef.py line 243
# lazily imported pygeodesy.ellipsoidalNvector by testEcef.py line 243
# lazily imported pygeodesy.ellipsoidalVincenty by testEcef.py line 243
# lazily imported pygeodesy.sphericalTrigonometry by testEcef.py line 243

    testing testEcef.py 23.07.21 isLazy=3

    test 1 EcefKarney: ...
    test 2 name: Test
    test 3 toStr: EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefKarney
    test 4 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefKarney
    test 5 copy(EcefKarney): (<class 'pygeodesy.ecef.EcefKarney'>, True)
    test 6 EcefKarney.copy(): (<class 'pygeodesy.ecef.EcefKarney'>, True)
    test 7 forward: 27.99, 86.93, 8820.0
    test 8 forward: 302271.4, 5635928.4, 2979666.1
    test 9 name: Test
    test 10 reverse: 302271.4, 5635928.4, 2979666.1
    test 11 reverse: 27.99, 86.93, 8820.01
    test 12 case: 2
    test 13 iteration: None
    test 14 name: Test
    test 15 reverse: 302000.0, 5636000.0, 2980000.0
    test 16 reverse: 27.99, 86.93, 9027.03
    test 17 case: 2
    test 18 iteration: None
    test 19 forward: 27.99, 86.93, 8820.0
    test 20 forward: 302271.43, 5635928.37, 2979666.13
    test 21 forward: 33.3, 44.4, 6000.0
    test 22 forward: 3816209.6, 3737108.55, 3485109.57
    test 23 reverse: 3816209.6, 3737108.55, 3485109.57
    test 24 reverse: 33.3, 44.4, 5999.996
    test 25 case: 2
    test 26 iteration: None
    test 27 reverse: 30000.0, 30000.0, 0.0
    test 28 reverse: 6.483, 45.0, -6335709.726
    test 29 case: 3
    test 30 iteration: None
    test 31 forward: 6.483, 45.0, -6335709.726
    test 32 forward: 30000.0, 30000.0, -0.0
    test 33 Vermeille: -168.919
    test 34 Vermeille: 190.939
    test 35 Vermeille: (65.772506, 169.060801)
    test 36 Vermeille: (1.147947, 3.141593)
    test 37 reverse-1: 45.0, 120.0, 1000.0
    test 38 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 39 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 40 philam-1: 0.7854, 2.0944
    test 41 reverse-2: 45.0, 120.0, 2000.0
    test 42 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 43 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 44 philam-2: 0.7854, 2.0944
    test 45 reverse-3: 45.0, 120.0, 3000.0
    test 46 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 47 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 48 philam-3: 0.7854, 2.0944
    test 49 reverse-4: 45.0, 120.0, 4000.0
    test 50 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 51 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 52 philam-4: 0.7854, 2.0944
    test 53 reverse-5: 45.0, 120.0, 10000.0
    test 54 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 55 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 56 philam-5: 0.7854, 2.0944
    test 57 reverse-6: 45.0, 120.0, 20000.0
    test 58 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 59 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 60 philam-6: 0.7854, 2.0944
    test 61 reverse-7: 45.0, 120.0, 100000.0
    test 62 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 63 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 64 philam-7: 0.7854, 2.0944
    test 65 reverse-8: 45.0, 120.0, 800000.0
    test 66 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 67 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 68 philam-8: 0.7854, 2.0944
    test 69 reverse-9: 45.0, 120.0, 1000000.0
    test 70 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 71 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 72 philam-9: 0.7854, 2.0944
    test 73 sudano: 45.0, 0.0, 100000.0
    test 74 name: OS-UK
    test 75 forward: 53.61199036, -1.66444222, 299.8
    test 76 forward: 3790644.9, -110149.21, 5111482.97
    test 77 reverse: 3790644.9, -110149.21, 5111482.97
    test 78 reverse: 53.61199036, -1.66444223
    test 79 reverse.lat: 53°36′43.1653″N
    test 80 reverse.lon: 001°39′51.992″W
    test 81 reverse.height: 299.800
    test 82 case: 2
    test 83 iteration: None
    test 84 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 85 reverse: 34.0, -117.333569, 251.702
    test 86 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 87 EcefError: (0.0, 0.0, 0.0, 90.0, 0, -6356752.31414, 3, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 88 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 89 EcefKarney: EcefKarney(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefKarney

    test 90 EcefFarrell21: ...
    test 91 name: Test
    test 92 toStr: EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefFarrell21
    test 93 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefFarrell21
    test 94 copy(EcefFarrell21): (<class 'pygeodesy.ecef.EcefFarrell21'>, True)
    test 95 EcefFarrell21.copy(): (<class 'pygeodesy.ecef.EcefFarrell21'>, True)
    test 96 forward: 27.99, 86.93, 8820.0
    test 97 forward: 302271.4, 5635928.4, 2979666.1
    test 98 name: Test
    test 99 reverse: 302271.4, 5635928.4, 2979666.1
    test 100 reverse: 27.99, 86.93, 8820.01
    test 101 case: 1
    test 102 iteration: None
    test 103 name: Test
    test 104 reverse: 302000.0, 5636000.0, 2980000.0
    test 105 reverse: 27.99, 86.93, 9027.03
    test 106 case: 1
    test 107 iteration: None
    test 108 forward: 27.99, 86.93, 8820.0
    test 109 forward: 302271.43, 5635928.37, 2979666.13
    test 110 forward: 33.3, 44.4, 6000.0
    test 111 forward: 3816209.6, 3737108.55, 3485109.57
    test 112 reverse: 3816209.6, 3737108.55, 3485109.57
    test 113 reverse: 33.3, 44.4, 5999.996
    test 114 case: 1
    test 115 iteration: None
    test 116 reverse: 30000.0, 30000.0, 0.0
    test 117 reverse: 0.0, 45.0, -6335168.061  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 118 case: 1
    test 119 iteration: None
    test 120 forward: 6.483, 45.0, -6335709.726
    test 121 forward: 30000.0, 30000.0, -0.0
    test 122 Vermeille: -168.919
    test 123 Vermeille: 190.939
    test 124 Vermeille: (65.772506, 169.060801)
    test 125 Vermeille: (1.147947, 3.141593)
    test 126 reverse-1: 45.0, 120.0, 1000.0
    test 127 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 128 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 129 philam-1: 0.7854, 2.0944
    test 130 reverse-2: 45.0, 120.0, 2000.0
    test 131 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 132 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 133 philam-2: 0.7854, 2.0944
    test 134 reverse-3: 45.0, 120.0, 3000.0
    test 135 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 136 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 137 philam-3: 0.7854, 2.0944
    test 138 reverse-4: 45.0, 120.0, 4000.0
    test 139 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 140 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 141 philam-4: 0.7854, 2.0944
    test 142 reverse-5: 45.0, 120.0, 10000.0
    test 143 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 144 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 145 philam-5: 0.7854, 2.0944
    test 146 reverse-6: 45.0, 120.0, 20000.0
    test 147 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 148 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 149 philam-6: 0.7854, 2.0944
    test 150 reverse-7: 45.0, 120.0, 100000.0
    test 151 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 152 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 153 philam-7: 0.7854, 2.0944
    test 154 reverse-8: 45.0, 120.0, 800000.0
    test 155 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 156 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 157 philam-8: 0.7854, 2.0944
    test 158 reverse-9: 45.0, 120.0, 1000000.0
    test 159 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 160 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 161 philam-9: 0.7854, 2.0944
    test 162 sudano: 45.0, 0.0, 100000.0
    test 163 name: OS-UK
    test 164 forward: 53.61199036, -1.66444222, 299.8
    test 165 forward: 3790644.9, -110149.21, 5111482.97
    test 166 reverse: 3790644.9, -110149.21, 5111482.97
    test 167 reverse: 53.61199036, -1.66444223
    test 168 reverse.lat: 53°36′43.1653″N
    test 169 reverse.lon: 001°39′51.992″W
    test 170 reverse.height: 299.800
    test 171 case: 1
    test 172 iteration: None
    test 173 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 174 reverse: 34.0, -117.333569, 251.702
    test 175 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 176 EcefError: (0.0, 0.0, 0.0, 0.0, 0, -6292741.654168, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 177 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 178 EcefFarrell21: EcefFarrell21(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefFarrell21

    test 179 EcefFarrell22: ...
    test 180 name: Test
    test 181 toStr: EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefFarrell22
    test 182 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefFarrell22
    test 183 copy(EcefFarrell22): (<class 'pygeodesy.ecef.EcefFarrell22'>, True)
    test 184 EcefFarrell22.copy(): (<class 'pygeodesy.ecef.EcefFarrell22'>, True)
    test 185 forward: 27.99, 86.93, 8820.0
    test 186 forward: 302271.4, 5635928.4, 2979666.1
    test 187 name: Test
    test 188 reverse: 302271.4, 5635928.4, 2979666.1
    test 189 reverse: 27.99, 86.93, 8820.01
    test 190 case: 1
    test 191 iteration: None
    test 192 name: Test
    test 193 reverse: 302000.0, 5636000.0, 2980000.0
    test 194 reverse: 27.99, 86.93, 9027.03
    test 195 case: 1
    test 196 iteration: None
    test 197 forward: 27.99, 86.93, 8820.0
    test 198 forward: 302271.43, 5635928.37, 2979666.13
    test 199 forward: 33.3, 44.4, 6000.0
    test 200 forward: 3816209.6, 3737108.55, 3485109.57
    test 201 reverse: 3816209.6, 3737108.55, 3485109.57
    test 202 reverse: 33.3, 44.4, 5999.996
    test 203 case: 1
    test 204 iteration: None
    test 205 reverse: 30000.0, 30000.0, 0.0
    test 206 reverse: 0.0, 45.0, -6335710.593  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 207 case: 1
    test 208 iteration: None
    test 209 forward: 6.483, 45.0, -6335709.726
    test 210 forward: 30000.0, 30000.0, -0.0
    test 211 Vermeille: -168.919
    test 212 Vermeille: 190.939
    test 213 Vermeille: (65.772506, 169.060801)
    test 214 Vermeille: (1.147947, 3.141593)
    test 215 reverse-1: 45.0, 120.0, 1000.0
    test 216 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 217 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 218 philam-1: 0.7854, 2.0944
    test 219 reverse-2: 45.0, 120.0, 2000.0
    test 220 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 221 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 222 philam-2: 0.7854, 2.0944
    test 223 reverse-3: 45.0, 120.0, 3000.0
    test 224 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 225 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 226 philam-3: 0.7854, 2.0944
    test 227 reverse-4: 45.0, 120.0, 4000.0
    test 228 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 229 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 230 philam-4: 0.7854, 2.0944
    test 231 reverse-5: 45.0, 120.0, 10000.0
    test 232 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 233 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 234 philam-5: 0.7854, 2.0944
    test 235 reverse-6: 45.0, 120.0, 20000.0
    test 236 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 237 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 238 philam-6: 0.7854, 2.0944
    test 239 reverse-7: 45.0, 120.0, 100000.0
    test 240 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 241 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 242 philam-7: 0.7854, 2.0944
    test 243 reverse-8: 45.0, 120.0, 800000.005  FAILED, KNOWN, expected 45.0, 120.0, 800000.0
    test 244 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 245 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 246 philam-8: 0.7854, 2.0944
    test 247 reverse-9: 45.0, 120.0, 1000000.007  FAILED, KNOWN, expected 45.0, 120.0, 1000000.0
    test 248 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 249 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 250 philam-9: 0.7854, 2.0944
    test 251 sudano: 45.0, 0.0, 100000.0
    test 252 name: OS-UK
    test 253 forward: 53.61199036, -1.66444222, 299.8
    test 254 forward: 3790644.9, -110149.21, 5111482.97
    test 255 reverse: 3790644.9, -110149.21, 5111482.97
    test 256 reverse: 53.61199036, -1.66444223
    test 257 reverse.lat: 53°36′43.1653″N
    test 258 reverse.lon: 001°39′51.992″W
    test 259 reverse.height: 299.800
    test 260 case: 1
    test 261 iteration: None
    test 262 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 263 reverse: 34.0, -117.333569, 251.702
    test 264 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 265 EcefError: (0.0, 0.0, 0.0, 0.0, 0, -6378137.0, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 266 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 267 EcefFarrell22: EcefFarrell22(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefFarrell22

    test 268 EcefVeness: ...
    test 269 name: Test
    test 270 toStr: EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefVeness
    test 271 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefVeness
    test 272 copy(EcefVeness): (<class 'pygeodesy.ecef.EcefVeness'>, True)
    test 273 EcefVeness.copy(): (<class 'pygeodesy.ecef.EcefVeness'>, True)
    test 274 forward: 27.99, 86.93, 8820.0
    test 275 forward: 302271.4, 5635928.4, 2979666.1
    test 276 name: Test
    test 277 reverse: 302271.4, 5635928.4, 2979666.1
    test 278 reverse: 27.99, 86.93, 8820.01
    test 279 case: 1
    test 280 iteration: None
    test 281 name: Test
    test 282 reverse: 302000.0, 5636000.0, 2980000.0
    test 283 reverse: 27.99, 86.93, 9027.03
    test 284 case: 1
    test 285 iteration: None
    test 286 forward: 27.99, 86.93, 8820.0
    test 287 forward: 302271.43, 5635928.37, 2979666.13
    test 288 forward: 33.3, 44.4, 6000.0
    test 289 forward: 3816209.6, 3737108.55, 3485109.57
    test 290 reverse: 3816209.6, 3737108.55, 3485109.57
    test 291 reverse: 33.3, 44.4, 5999.996
    test 292 case: 1
    test 293 iteration: None
    test 294 reverse: 30000.0, 30000.0, 0.0
    test 295 reverse: 0.0, 45.0, -6335710.593  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 296 case: 1
    test 297 iteration: None
    test 298 forward: 6.483, 45.0, -6335709.726
    test 299 forward: 30000.0, 30000.0, -0.0
    test 300 Vermeille: -168.919
    test 301 Vermeille: 190.939
    test 302 Vermeille: (65.772506, 169.060801)
    test 303 Vermeille: (1.147947, 3.141593)
    test 304 reverse-1: 45.0, 120.0, 1000.0
    test 305 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 306 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 307 philam-1: 0.7854, 2.0944
    test 308 reverse-2: 45.0, 120.0, 2000.0
    test 309 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 310 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 311 philam-2: 0.7854, 2.0944
    test 312 reverse-3: 45.0, 120.0, 3000.0
    test 313 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 314 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 315 philam-3: 0.7854, 2.0944
    test 316 reverse-4: 45.0, 120.0, 4000.0
    test 317 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 318 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 319 philam-4: 0.7854, 2.0944
    test 320 reverse-5: 45.0, 120.0, 10000.0
    test 321 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 322 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 323 philam-5: 0.7854, 2.0944
    test 324 reverse-6: 45.0, 120.0, 20000.0
    test 325 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 326 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 327 philam-6: 0.7854, 2.0944
    test 328 reverse-7: 45.0, 120.0, 100000.0
    test 329 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 330 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 331 philam-7: 0.7854, 2.0944
    test 332 reverse-8: 45.0, 120.0, 800000.0
    test 333 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 334 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 335 philam-8: 0.7854, 2.0944
    test 336 reverse-9: 45.0, 120.0, 1000000.0
    test 337 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 338 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 339 philam-9: 0.7854, 2.0944
    test 340 sudano: 45.0, 0.0, 100000.0
    test 341 name: OS-UK
    test 342 forward: 53.61199036, -1.66444222, 299.8
    test 343 forward: 3790644.9, -110149.21, 5111482.97
    test 344 reverse: 3790644.9, -110149.21, 5111482.97
    test 345 reverse: 53.61199036, -1.66444223
    test 346 reverse.lat: 53°36′43.1653″N
    test 347 reverse.lon: 001°39′51.992″W
    test 348 reverse.height: 299.800
    test 349 case: 1
    test 350 iteration: None
    test 351 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 352 reverse: 34.0, -117.333569, 251.702
    test 353 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 354 EcefError: (0.0, 0.0, 0.0, 90.0, 0, -6356752.31414, 3, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 355 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 356 EcefVeness: EcefVeness(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefVeness

    test 357 EcefSudano: ...
    test 358 name: Test
    test 359 toStr: EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefSudano
    test 360 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefSudano
    test 361 copy(EcefSudano): (<class 'pygeodesy.ecef.EcefSudano'>, True)
    test 362 EcefSudano.copy(): (<class 'pygeodesy.ecef.EcefSudano'>, True)
    test 363 forward: 27.99, 86.93, 8820.0
    test 364 forward: 302271.4, 5635928.4, 2979666.1
    test 365 name: Test
    test 366 reverse: 302271.4, 5635928.4, 2979666.1
    test 367 reverse: 28.01, 86.93, 8819.58  FAILED, KNOWN, expected 27.99, 86.93, 8820.01
    test 368 case: 6
    test 369 iteration: 6
    test 370 name: Test
    test 371 reverse: 302000.0, 5636000.0, 2980000.0
    test 372 reverse: 28.01, 86.93, 9026.6  FAILED, KNOWN, expected 27.99, 86.93, 9027.03
    test 373 case: 6
    test 374 iteration: 6
    test 375 forward: 27.99, 86.93, 8820.0
    test 376 forward: 302271.43, 5635928.37, 2979666.13
    test 377 forward: 33.3, 44.4, 6000.0
    test 378 forward: 3816209.6, 3737108.55, 3485109.57
    test 379 reverse: 3816209.6, 3737108.55, 3485109.57
    test 380 reverse: 33.335, 44.4, 5998.836  FAILED, KNOWN, expected 33.3, 44.4, 5999.996
    test 381 case: 6
    test 382 iteration: 6
    test 383 reverse: 30000.0, 30000.0, 0.0
    test 384 reverse: 0.0, 45.0, -6335710.593  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 385 case: 1
    test 386 iteration: 1
    test 387 forward: 6.483, 45.0, -6335709.726
    test 388 forward: 30000.0, 30000.0, -0.0
    test 389 Vermeille: -168.919
    test 390 Vermeille: 190.939
    test 391 Vermeille: (65.979481, 169.060801)  FAILED, KNOWN, expected (65.772506, 169.060801)
    test 392 Vermeille: (1.151559, 3.141593)  FAILED, KNOWN, expected (1.147947, 3.141593)
    test 393 reverse-1: 45.08, 120.0, 993.852  FAILED, KNOWN, expected 45.0, 120.0, 1000.0
    test 394 forward-1: -2256016.0, 3907534.4, 4494304.0  FAILED, KNOWN, expected -2259149.0, 3912960.8, 4488055.5
    test 395 xyzh-1: -2256016.0, 3907534.4, 4494304.0, 993.9  FAILED, KNOWN, expected -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 396 philam-1: 0.7868, 2.0944
    test 397 reverse-2: 45.08, 120.0, 1993.853  FAILED, KNOWN, expected 45.0, 120.0, 2000.0
    test 398 forward-2: -2256369.6, 3908146.8, 4495011.2  FAILED, KNOWN, expected -2259502.5, 3913573.2, 4488762.6
    test 399 xyzh-2: -2256369.6, 3908146.8, 4495011.2, 1993.9  FAILED, KNOWN, expected -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 400 philam-2: 0.7868, 2.0944
    test 401 reverse-3: 45.08, 120.0, 2993.854  FAILED, KNOWN, expected 45.0, 120.0, 3000.0
    test 402 forward-3: -2256723.1, 3908759.1, 4495718.3  FAILED, KNOWN, expected -2259856.1, 3914185.6, 4489469.7
    test 403 xyzh-3: -2256723.1, 3908759.1, 4495718.3, 2993.9  FAILED, KNOWN, expected -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 404 philam-3: 0.7868, 2.0944
    test 405 reverse-4: 45.08, 120.0, 3993.855  FAILED, KNOWN, expected 45.0, 120.0, 4000.0
    test 406 forward-4: -2257076.7, 3909371.5, 4496425.4  FAILED, KNOWN, expected -2260209.7, 3914798.0, 4490176.8
    test 407 xyzh-4: -2257076.7, 3909371.5, 4496425.4, 3993.9  FAILED, KNOWN, expected -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 408 philam-4: 0.7868, 2.0944
    test 409 reverse-5: 45.08, 120.0, 9993.861  FAILED, KNOWN, expected 45.0, 120.0, 10000.0
    test 410 forward-5: -2259198.0, 3913045.8, 4500668.0  FAILED, KNOWN, expected -2262331.0, 3918472.2, 4494419.5
    test 411 xyzh-5: -2259198.0, 3913045.8, 4500668.0, 9993.9  FAILED, KNOWN, expected -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 412 philam-5: 0.7868, 2.0944
    test 413 reverse-6: 45.079, 120.0, 19993.87  FAILED, KNOWN, expected 45.0, 120.0, 20000.0
    test 414 forward-6: -2262733.6, 3919169.6, 4507739.0  FAILED, KNOWN, expected -2265866.5, 3924595.9, 4501490.5
    test 415 xyzh-6: -2262733.6, 3919169.6, 4507739.0, 19993.9  FAILED, KNOWN, expected -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 416 philam-6: 0.7868, 2.0944
    test 417 reverse-7: 45.078, 120.0, 99993.947  FAILED, KNOWN, expected 45.0, 120.0, 100000.0
    test 418 forward-7: -2291018.1, 3968159.8, 4564307.3  FAILED, KNOWN, expected -2294150.8, 3973585.7, 4558059.1
    test 419 xyzh-7: -2291018.1, 3968159.8, 4564307.3, 99993.9  FAILED, KNOWN, expected -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 420 philam-7: 0.7868, 2.0944
    test 421 reverse-8: 45.071, 120.0, 799994.544  FAILED, KNOWN, expected 45.0, 120.0, 800000.0
    test 422 forward-8: -2538507.3, 4396823.7, 5059280.0  FAILED, KNOWN, expected -2541638.2, 4402246.4, 5053033.8
    test 423 xyzh-8: -2538507.3, 4396823.7, 5059280.0, 799994.5  FAILED, KNOWN, expected -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 424 philam-8: 0.7866, 2.0944
    test 425 reverse-9: 45.069, 120.0, 999994.693  FAILED, KNOWN, expected 45.0, 120.0, 1000000.0
    test 426 forward-9: -2609218.5, 4519299.0, 5200700.9  FAILED, KNOWN, expected -2612348.8, 4524720.9, 5194455.2
    test 427 xyzh-9: -2609218.5, 4519299.0, 5200700.9, 999994.7  FAILED, KNOWN, expected -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 428 philam-9: 0.7866, 2.0944
    test 429 sudano: 45.078, 0.0, 99993.947  FAILED, KNOWN, expected 45.0, 0.0, 100000.0
    test 430 name: OS-UK
    test 431 forward: 53.61199036, -1.66444222, 299.8
    test 432 forward: 3790644.9, -110149.21, 5111482.97
    test 433 reverse: 3790644.9, -110149.21, 5111482.97
    test 434 reverse: 53.73795244, -1.66444223  FAILED, KNOWN, expected 53.61199036, -1.66444223
    test 435 reverse.lat: 53°44′16.6288″N  FAILED, KNOWN, expected 53°36′43.1653″N
    test 436 reverse.lon: 001°39′51.992″W
    test 437 reverse.height: 284.389  FAILED, KNOWN, expected 299.800
    test 438 case: 7
    test 439 iteration: 7
    test 440 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 441 reverse: 34.036724, -117.333569, 250.396541  FAILED, KNOWN, expected 34.0, -117.333569, 251.702
    test 442 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 443 EcefError: (0.0, 0.0, 0.0, 0.0, 0, -6378137.0, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 444 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 445 EcefSudano: EcefSudano(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefSudano

    test 446 EcefYou: ...
    test 447 name: Test
    test 448 toStr: EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefYou
    test 449 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefYou
    test 450 copy(EcefYou): (<class 'pygeodesy.ecef.EcefYou'>, True)
    test 451 EcefYou.copy(): (<class 'pygeodesy.ecef.EcefYou'>, True)
    test 452 forward: 27.99, 86.93, 8820.0
    test 453 forward: 302271.4, 5635928.4, 2979666.1
    test 454 name: Test
    test 455 reverse: 302271.4, 5635928.4, 2979666.1
    test 456 reverse: 27.99, 86.93, 8820.01
    test 457 case: 1
    test 458 iteration: None
    test 459 name: Test
    test 460 reverse: 302000.0, 5636000.0, 2980000.0
    test 461 reverse: 27.99, 86.93, 9027.03
    test 462 case: 1
    test 463 iteration: None
    test 464 forward: 27.99, 86.93, 8820.0
    test 465 forward: 302271.43, 5635928.37, 2979666.13
    test 466 forward: 33.3, 44.4, 6000.0
    test 467 forward: 3816209.6, 3737108.55, 3485109.57
    test 468 reverse: 3816209.6, 3737108.55, 3485109.57
    test 469 reverse: 33.3, 44.4, 5999.996
    test 470 case: 1
    test 471 iteration: None
    test 472 reverse: 30000.0, 30000.0, 0.0
    test 473 reverse: 90.0, 45.0, -6356893.894  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 474 case: 1
    test 475 iteration: None
    test 476 forward: 6.483, 45.0, -6335709.726
    test 477 forward: 30000.0, 30000.0, -0.0
    test 478 Vermeille: -168.919
    test 479 Vermeille: 190.939
    test 480 Vermeille: (65.772506, 169.060801)
    test 481 Vermeille: (1.147947, 3.141593)
    test 482 reverse-1: 45.0, 120.0, 1000.0
    test 483 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 484 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 485 philam-1: 0.7854, 2.0944
    test 486 reverse-2: 45.0, 120.0, 2000.0
    test 487 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 488 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 489 philam-2: 0.7854, 2.0944
    test 490 reverse-3: 45.0, 120.0, 3000.0
    test 491 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 492 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 493 philam-3: 0.7854, 2.0944
    test 494 reverse-4: 45.0, 120.0, 4000.0
    test 495 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 496 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 497 philam-4: 0.7854, 2.0944
    test 498 reverse-5: 45.0, 120.0, 10000.0
    test 499 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 500 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 501 philam-5: 0.7854, 2.0944
    test 502 reverse-6: 45.0, 120.0, 20000.0
    test 503 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 504 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 505 philam-6: 0.7854, 2.0944
    test 506 reverse-7: 45.0, 120.0, 100000.0
    test 507 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 508 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 509 philam-7: 0.7854, 2.0944
    test 510 reverse-8: 45.0, 120.0, 800000.0
    test 511 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 512 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 513 philam-8: 0.7854, 2.0944
    test 514 reverse-9: 45.0, 120.0, 1000000.0
    test 515 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 516 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 517 philam-9: 0.7854, 2.0944
    test 518 sudano: 45.0, 0.0, 100000.0
    test 519 name: OS-UK
    test 520 forward: 53.61199036, -1.66444222, 299.8
    test 521 forward: 3790644.9, -110149.21, 5111482.97
    test 522 reverse: 3790644.9, -110149.21, 5111482.97
    test 523 reverse: 53.61199036, -1.66444223
    test 524 reverse.lat: 53°36′43.1653″N
    test 525 reverse.lon: 001°39′51.992″W
    test 526 reverse.height: 299.800
    test 527 case: 1
    test 528 iteration: None
    test 529 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 530 reverse: 34.0, -117.333569, 251.702
    test 531 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 532 EcefError: (0.0, 0.0, 0.0, 90.0, 0, -6356752.31414, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 533 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 534 EcefYou: EcefYou(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefYou

    test 535 EcefMatrix: ...
    test 536 index: (0, 1, 2, 3, 4, 5, 6, 7, 8)
    test 537 matrix: 0, 1, 2, 3, 4, 5, 6, 7, 8
    test 538 multiply: 45, 54, 63, 54, 66, 78, 63, 78, 93
    test 539 matrix3: True
    test 540 matrixT3: True
    test 541 copy(EcefMatrix): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 542 EcefMatrix.copy(): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 543 matrix: 1, 0, 0, 0, 1, 0, 0, 0, 1
    test 544 multiply: 1, 0, 0, 0, 1, 0, 0, 0, 1
    test 545 copy(EcefMatrix): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 546 EcefMatrix.copy(): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 547 unrotate: (1.0, 1.0, 1.0)

    test 548 pygeodesy.sphericalNvector: Cartesian
    test 549 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 550 pygeodesy.sphericalNvector: LatLon
    test 551 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 552 forward: 48.833, 2.333, 0.0
    test 553 forward: 4190278.55, 170716.35, 4796058.21
    test 554 name: Paris
    test 555 reverse: 48.833, 2.333, 0.0
    test 556 name: Paris
    test 557 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E)
    test 558 name: Paris
    test 559 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 560 to4Tuple: LatLon4Tuple
    test 561 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 562 to3Tuple: LatLon3Tuple
    test 563 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 564 toVector: (4190278.55277, 170716.34863, 4796058.20898)
    test 565 name: Paris
    test 566 forward: [4190278.55, 170716.35, 4796058.21]
    test 567 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 568 pygeodesy.sphericalTrigonometry: Cartesian
    test 569 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 570 pygeodesy.sphericalTrigonometry: LatLon
    test 571 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 572 forward: 48.833, 2.333, 0.0
    test 573 forward: 4190278.55, 170716.35, 4796058.21
    test 574 name: Paris
    test 575 reverse: 48.833, 2.333, 0.0
    test 576 name: Paris
    test 577 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E)
    test 578 name: Paris
    test 579 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 580 to4Tuple: LatLon4Tuple
    test 581 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 582 to3Tuple: LatLon3Tuple
    test 583 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 584 toVector: (4190278.55277, 170716.34863, 4796058.20898)
    test 585 name: Paris
    test 586 forward: [4190278.55, 170716.35, 4796058.21]
    test 587 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 588 pygeodesy.ellipsoidalNvector: Cartesian
    test 589 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 590 pygeodesy.ellipsoidalNvector: LatLon
    test 591 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 592 forward: 48.833, 2.333, 0.0
    test 593 forward: 4202946.8, 171232.47, 4778354.17
    test 594 name: Paris
    test 595 reverse: 48.833, 2.333, 0.0
    test 596 name: Paris
    test 597 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 598 name: Paris
    test 599 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 600 to4Tuple: LatLon4Tuple
    test 601 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 602 to3Tuple: LatLon3Tuple
    test 603 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 604 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 605 name: Paris
    test 606 forward: [4202946.8, 171232.47, 4778354.17]
    test 607 Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    test 608 pygeodesy.ellipsoidalVincenty: Cartesian
    test 609 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 610 pygeodesy.ellipsoidalVincenty: LatLon
    test 611 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 612 forward: 48.833, 2.333, 0.0
    test 613 forward: 4202946.8, 171232.47, 4778354.17
    test 614 name: Paris
    test 615 reverse: 48.833, 2.333, 0.0
    test 616 name: Paris
    test 617 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 618 name: Paris
    test 619 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 620 to4Tuple: LatLon4Tuple
    test 621 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 622 to3Tuple: LatLon3Tuple
    test 623 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 624 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 625 name: Paris
    test 626 forward: [4202946.8, 171232.47, 4778354.17]
    test 627 Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    test 628 pygeodesy.ellipsoidalKarney: Cartesian
    test 629 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 630 pygeodesy.ellipsoidalKarney: LatLon
    test 631 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 632 forward: 48.833, 2.333, 0.0
    test 633 forward: 4202946.8, 171232.47, 4778354.17
    test 634 name: Paris
    test 635 reverse: 48.833, 2.333, 0.0
    test 636 name: Paris
    test 637 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 638 name: Paris
    test 639 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 640 to4Tuple: LatLon4Tuple
    test 641 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 642 to3Tuple: LatLon3Tuple
    test 643 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 644 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 645 name: Paris
    test 646 forward: [4202946.8, 171232.47, 4778354.17]
    test 647 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 648 pygeodesy.ellipsoidalExact: Cartesian
    test 649 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 650 pygeodesy.ellipsoidalExact: LatLon
    test 651 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 652 forward: 48.833, 2.333, 0.0
    test 653 forward: 4202946.8, 171232.47, 4778354.17
    test 654 name: Paris
    test 655 reverse: 48.833, 2.333, 0.0
    test 656 name: Paris
    test 657 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 658 name: Paris
    test 659 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 660 to4Tuple: LatLon4Tuple
    test 661 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 662 to3Tuple: LatLon3Tuple
    test 663 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 664 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 665 name: Paris
    test 666 forward: [4202946.8, 171232.47, 4778354.17]
    test 667 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    74 of 667 testEcef.py tests (11.1%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 12.152 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testElevations.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.elevation2 from .elevations by testElevations.py line 11
# lazily imported pygeodesy.Datums from .datums by testElevations.py line 11
# lazily imported pygeodesy.geoidHeight2 from .elevations by testElevations.py line 11

    testing testElevations.py 23.08.23 isLazy=3
# lazily imported pygeodesy.ellipsoidalVincenty by testElevations.py line 78
    test 1 elevation2: elevation2(37.8816, -121.9142): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 1173.79
    test 2 geoidHeight2: -31.699
    test 3 elevation2: elevation2(37.8816, -121.9142): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 1173.79
    test 4 geodHeight2: -31.699
    test 5 elevation2: elevation2(42.354117, -71.069351): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 2.03
    test 6 geodHeight2: -27.773
    test 7 elevation2: elevation2(41.499498, -81.695391): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 199.18
    test 8 geodHeight2: -34.337  FAILED, KNOWN, expected -27.077
    test 9 elevation2: elevation2(41.49008, -71.312796): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 8.52
    test 10 geodHeight2: -30.000
    test 11 elevation2: elevation2(40.779147, -73.96808): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 32.79
    test 12 geodHeight2: -31.666
    test 13 elevation2: (None, "<HTTPError 301: 'Move Permanently'>")  FAILED, KNOWN, expected (None, 'non-CONUS -1000000.00')
    test 14 geoidHeight2: (None, 'no JSON "{}"')  FAILED, KNOWN, expected (None, "<HTTPError 403: 'Forbidden'>")
    test 15 elevation2: (None, "URLError(OSError(65, 'No route to host'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")
    test 16 geodHeight2: (None, "URLError(TimeoutError('timed out'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")
    test 17 elevation2: elevation2(37.8816, -121.9142): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 1173.79
    test 18 geoidHeight2: -31.699
    test 19 elevation2: elevation2(37.8816, -121.9142): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 1173.79
    test 20 geodHeight2: -31.699
    test 21 elevation2: elevation2(42.354117, -71.069351): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 2.03
    test 22 geodHeight2: -27.773
    test 23 elevation2: elevation2(41.499498, -81.695391): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 199.18
    test 24 geodHeight2: -34.337  FAILED, KNOWN, expected -27.077
    test 25 elevation2: elevation2(41.49008, -71.312796): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 8.52
    test 26 geodHeight2: -30.000
    test 27 elevation2: elevation2(40.779147, -73.96808): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 32.79
    test 28 geodHeight2: -31.666
    test 29 elevation2: (None, "<HTTPError 301: 'Move Permanently'>")  FAILED, KNOWN, expected (None, 'non-CONUS -1000000.00')
    test 30 geoidHeight2: (None, 'no JSON "{}"')  FAILED, KNOWN, expected (None, "<HTTPError 403: 'Forbidden'>")
    test 31 elevation2: (None, "URLError(OSError(65, 'No route to host'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")
    test 32 geodHeight2: (None, "URLError(TimeoutError('timed out'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")

    22 of 32 testElevations.py tests (68.8%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 12.159 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testEllipsoidal.py
<string>:1: DeprecationWarning: method L{pygeodesy.trf.RefFrame.__matmul__} has been DEPRECATED on 2024.02.16, use method C{B{point}.toRefFrame}.
./pygeodesy/ellipsoidalBase.py:432: DeprecationWarning: Property_RO L{pygeodesy.ellipsoids.Ellipsoid.geodesic} has been DEPRECATED, use property C{geodesicw}.
  _ = self.datum.ellipsoid.geodesic
./pygeodesy/ellipsoidalNvector.py:244: DeprecationWarning: Property_RO L{pygeodesy.ltpTuples.Ned.ned} has been DEPRECATED, use property C{ned4}.
  dn = delta.ned[:3]  # XXX Ned4Tuple.to3Tuple
./pygeodesy/deprecated/classes.py:32: DeprecationWarning: class L{pygeodesy.deprecated.classes.Ned3Tuple} has been DEPRECATED, use class L{Ned4Tuple}, ignoring item C{ltp}.
  deprecated_class(cls)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.F_D from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_DM from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_DMS from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_RAD from .dms by testLatLon.py line 12
# lazily imported pygeodesy.R_M from .constants by testLatLon.py line 12
# lazily imported pygeodesy.R_NM from .constants by testLatLon.py line 12
# lazily imported pygeodesy.degrees from .utily by testLatLon.py line 12
# lazily imported pygeodesy.fstr from .streprs by testLatLon.py line 12
# lazily imported pygeodesy.Height from .units by testLatLon.py line 12
# lazily imported pygeodesy.isclockwise from .points by testLatLon.py line 12
# lazily imported pygeodesy.isconvex from .points by testLatLon.py line 12
# lazily imported pygeodesy.isenclosedBy from .points by testLatLon.py line 12
# lazily imported pygeodesy.isnear0 from .constants by testLatLon.py line 12
# lazily imported pygeodesy.ispolar from .points by testLatLon.py line 12
# lazily imported pygeodesy.m2km from .utily by testLatLon.py line 12
# lazily imported pygeodesy.m2NM from .utily by testLatLon.py line 12
# lazily imported pygeodesy.IntersectionError from .errors by testLatLon.py line 12
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testLatLon.py line 12
# lazily imported pygeodesy.EPS from .constants by testVectorial.py line 11
# lazily imported pygeodesy.EPS4 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.circin6 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum3 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum4_ from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.intersection3d3 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.meeus2 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.radii11 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testVectorial.py line 11
# lazily imported pygeodesy.sphericalNvector by testVectorial.py line 11
# lazily imported pygeodesy.soddy4 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate2d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate3d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.VectorError from .errors by testVectorial.py line 11
# lazily imported pygeodesy.F_D__ from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.bearingDMS from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.compassDMS from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.Datums from .datums by testEllipsoidal.py line 13
# lazily imported pygeodesy.latlonDMS from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.latlonDMS_ from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.m2SM from .utily by testEllipsoidal.py line 13
# lazily imported pygeodesy.PI from .constants by testEllipsoidal.py line 13
# lazily imported pygeodesy.PI_4 from .constants by testEllipsoidal.py line 13
# lazily imported pygeodesy.RefFrames from .trf by testEllipsoidal.py line 13
# lazily imported pygeodesy.wrap360 from .utily by testEllipsoidal.py line 13
# lazily imported pygeodesy.ellipsoidalExact by testEllipsoidal.py line 753
# lazily imported pygeodesy.ellipsoidalNvector by testEllipsoidal.py line 753
# lazily imported pygeodesy.Equidistant from .azimuthal by testEllipsoidal.py line 753
# lazily imported pygeodesy.EquidistantExact from .azimuthal by testEllipsoidal.py line 753
# lazily imported pygeodesy.EquidistantGeodSolve from .azimuthal by testEllipsoidal.py line 753
# lazily imported pygeodesy.EquidistantKarney from .azimuthal by testEllipsoidal.py line 753

    testing testEllipsoidal.py 24.02.10 isLazy=3

    testEllipsoidal(pygeodesy.ellipsoidalNvector, 24.06.15)
    test 1 isEllipsoidal: True
    test 2 isSpherical: False
# lazily imported pygeodesy.ecef by ellipsoidalNvector.py line 521
    test 3 isEllipsoidal: True
    test 4 isSpherical: False
    test 5 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 6 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 7 toDatum: 51.4778°N, 000.0016°W
    test 8 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 9 __matmul__: 51.477284°N, 000.00002°E, -45.90m
    test 10 toNVector: (0.6228, 0.0, 0.7824, +0.24)
    test 11 toNvector: True
    test 12 toCartesian: [3980581, 97, 4966825]
    test 13 toCartesian: True
    test 14 toVector3D: (0.6228, 0.0, 0.7824)
    test 15 Nvector: (0.5, 0.5, 0.7071)
    test 16 toVector3D: (0.5, 0.5, 0.7071)
    test 17 philamheight: 0.7854, 0.7854, 0.0
    test 18 latlonheight: 45.0, 45.0, 0.0
    test 19 xyzh: 0.5, 0.5, 0.7, 0.0
    test 20 toCartesian: [3194434.411, 3194434.411, 4487326.82]
    test 21 toCartesian: True
    test 22 toLatLon: 45.0°N, 045.0°E
    test 23 toLatLon: True
    test 24 Nvector: (0.51, 0.512, 0.707, +1.00)
    test 25 sat: 82.545852°N, 059.719736°E, -6353121.71m
    test 26 dop: 51.998889°N, 004.373333°E, +134.64m
    test 27 distance: 3806542.943645769  FAILED, KNOWN, expected 3806542.943647

    32 tests skipped (32): insersecant2

    testLatLon(pygeodesy.ellipsoidalNvector, 24.06.15)
    test 28 isEllipsoidal: True
    test 29 isSpherical: False
    test 30 lat/lonDMS: 52.20472°N, 000.14056°E
    test 31 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 32 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 33 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 34 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 35 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 36 isequalTo: True
    test 37 isequalTo: True
    test 38 latlon2: 52.20472, 0.14056
    test 39 latlon2: 52.2047, 0.1406
    test 40 latlon2: 52.205, 0.141
    test 41 latlon2: 52.2, 0.14
    test 42 latlon2: 52.2, 0.1
    test 43 latlon2: 52.0, 0.0
    test 44 chordTo: 12029263.15
    test 45 chordTo: 12029049.69
    test 46 copy: True
    test 47 __eq__: True
    test 48 __ne__: False
    test 49 equirectangularTo: 404329.56
    test 50 distanceTo: 404279.720589
    test 51 distanceTo: 404279.720589
    test 52 distanceTo: 3972863
    test 53 distanceTo: 18013602.92
    test 54 distanceTo: 20015114.35  FAILED, KNOWN, expected 20003931.46
    test 55 intermediateTo: 51.372294°N, 000.707192°E
    test 56 intermediateTo: True
    test 57 intermediateTo: 404279.721
    test 58 intermediateTo+5: 35.560239°N, 008.833512°E
    test 59 intermediateTo+5: 4.885
    test 60 intermediateTo-4: 64.570387°N, 013.156352°W
    test 61 intermediateTo-4: 3.885
    test 62 intermediateTo-h: 125.000
    test 63 midpointTo: 50.536327°N, 001.274614°E
# lazily imported pygeodesy.booleans by iters.py line 76
    test 64 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 65 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 66 chordTo: 125203.963
    test 67 cosineAndoyerLambertTo: 125205.962
    test 68 cosineAndoyerLambertTo: 125205.962
    test 69 cosineForsyheAndoyerLambertTo: 125205.965
    test 70 cosineForsyheAndoyerLambertTo: 125205.965
    test 71 cosineLawTo: 124801.098
    test 72 cosineLawTo: 124801.098
    test 73 equirectangularTo: 124804.754
    test 74 equirectangularTo: 124804.754
    test 75 euclideanTo: 130015.089
    test 76 euclideanTo: 130015.089
    test 77 flatLocalTo: 125209.633
    test 78 flatLocalTo: 125209.633
    test 79 flatPolarTo: 133663.257
    test 80 flatPolarTo: 133663.257
    test 81 hartzell: 53.3206°N, 001.7297°W
# lazily imported pygeodesy.triaxials by formy.py line 980
    test 82 hartzell: 53.349541°N, 001.7297°W
    test 83 height4: 0.0
    test 84 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 85 height4: 53°19′14.2″N, 001°43′46.9″W
    test 86 height4: 53°19′14.2″N, 001°43′46.9″W
    test 87 haversineTo: 124801.098
    test 88 haversineTo: 124801.098
    test 89 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 90 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 91 thomasTo: 125206.188
    test 92 thomasTo: 125206.188
    test 93 vincentysTo: 124801.098
    test 94 vincentysTo: 124801.098
    test 95 isclockwise: False
    test 96 isclockwise*: False
    test 97 isclockwise: True
    test 98 isclockwise*: True
    test 99 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 100 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 101 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 102 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 103 isconvex: False
    test 104 isconvex*: False
    test 105 isconvex: True
    test 106 isconvex*: True
    test 107 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 108 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 109 isenclosedBy1: True
    test 110 isenclosedBy1*: True
    test 111 isenclosedBy2: False
    test 112 isenclosedBy2*: False
    test 113 isenclosedBy3: False
    test 114 isenclosedBy3*: False
    test 115 isenclosedBy4: False
    test 116 isenclosedBy4*: False
    test 117 isenclosedBy5: False
    test 118 isenclosedBy5*: False
    test 119 isenclosedBy6: True
    test 120 isenclosedBy6*: True
    test 121 isenclosedBy7: True
    test 122 isenclosedBy7*: True
    test 123 isenclosedBy-CCW: True
    test 124 isenclosedBy-CW : True
    test 125 isenclosedBy-CCW: True
    test 126 compassAngleTo: 100.017
    test 127 compassAngleTo: 105.599
    test 128 compassAngleTo: 280.017
    test 129 compassAngleTo: 285.599
    test 130 equirectangularTo: 592.185
    test 131 distanceTo: 591.831
    test 132 compassAngleTo: 0.0
    test 133 compassAngleTo: 45.0
    test 134 compassAngleTo: 90.0
    test 135 compassAngleTo: 180.0
    test 136 compassAngleTo: 225.0
    test 137 compassAngleTo: 315.0
    test 138 compassAngleTo: 270.0
    test 139 compassAngleTo: 359.4
    test 140 latlon2: (53.0, 1.0)
    test 141 philam2: (0.93, 0.02)
    test 142 compassAngleTo: 31
    test 143 compassAngleTo: 45

    test 144 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 145 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 146 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 147 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 148 isequalTo: <class 'bool'>
    test 149 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 150 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 151 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 152 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 153 compassAngleTo: <class 'float'>
    test 154 cosineLawTo: <class 'float'>
    test 155 euclideanTo: <class 'float'>
    test 156 flatLocalTo: <class 'float'>
    test 157 flatPolarTo: <class 'float'>
    test 158 haversineTo: <class 'float'>
    test 159 hubenyTo: <class 'float'>
    test 160 vincentysTo: <class 'float'>
    test 161 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 162 toVector3d: (0.61823, 0.0, 0.786)
    test 163 trilaterate5 (pygeodesy.ellipsoidalNvector) .min: 223.305
    test 164 trilaterate5 (pygeodesy.ellipsoidalNvector) .point: 42.67456065°N, 002.49539502°E
    test 165 trilaterate5 (pygeodesy.ellipsoidalNvector) .min- is .maxPoint: True
    test 166 trilaterate5 (pygeodesy.ellipsoidalNvector) .n: 1
    test 167 trilaterate5 (pygeodesy.ellipsoidalNvector) .error: ellipsoidalNvector.LatLon.trilaterate5(area=True), MRO(nvectorBase.LatLonNvectorBase, ellipsoidalBase.LatLonEllipsoidalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    test 168 radii11: Radii11Tuple(rA=7705.84217, rB=1367.057272, rC=498.160185, cR=4897.488519, rIn=740.470746, riS=179.544791, roS=5964.029657, a=1865.217457, b=8204.002354, c=9072.899442, s=9571.059626)

    22 tests skipped (54): No module named 'numpy': required by vector2d._numpy

    testVectorial(pygeodesy.ellipsoidalNvector, 24.06.15)

    test 169 toLatLon: 44.995674°N, 045.0°E
    test 170 toNvector: (0.50004, 0.50004, 0.70705)
    test 171 isequalTo: False
    test 172 isequalTo: True
    test 173 length: 0.99992449715
    test 174 euclid: 0.99995577
    test 175 length: 1.00
    test 176 euclid: 1.0000
    test 177 meanOf: 44.995674°N, 045.0°E
    test 178 meanOf: LatLon
    test 179 apply: (0.5, 0.5, 0.707)
    test 180 init: (0.5, 0.5, 0.707)
    test 181 i***: (0.5, 0.5, 0.707)
    test 182 abs: 0.99992449715
    test 183 sumOf: (52.70504, 0.61904, 0.70705)
    test 184 sumOf: Nv
    test 185 sumOf: sumOf
    test 186 length: 52.7134151513
    test 187 sizeof: 217  FAILED, KNOWN, expected 128
    test 188 length: 52.2051356286
    test 189 sizeof: 572  FAILED, KNOWN, expected 247
    test 190 copy: True
    test 191 length: 52.2051356286
    test 192 sizeof: 572
    test 193 isenclosedBy: True
    test 194 isenclosedBy*: True
    test 195 isenclosedBy: True
    test 196 isenclosedBy*: True
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1053
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
# lazily imported pygeodesy.elliptic by gx.py line 426

    test 197 nearestOn: 51.0°N, 001.0°E
    test 198 nearestOn: 50.987°N, 000.298°W
    test 199 nearestOn: 51.0°N, 002.0°E
    test 200 nearestOn: 50.995°N, 002.655°E
    test 201 nearestOn: 51.0°N, 001.9°E
    test 202 nearestOn: True
    test 203 distanceTo: 42.826
    test 204 nearestOn: 51.0°N, 002.0°E
    test 205 nearestOn: True
    test 206 nearestOn: 00.0°N, 000.0°E
    test 207 nearestOn: True
    test 208 nearestOn: 00.0°N, 020.0°E
    test 209 nearestOn: True
    test 210 nearestOn: 02.0°N, 002.0°E
    test 211 nearestOn: 02.0°N, 002.0°E

    test 212 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 213 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))

    test 214 BasseC: 47.3038°N, 002.5721°W
    test 215 BasseH: 47.311067°N, 002.528617°W
    test 216 triangulate: 47.323667°N, 002.568501°W
    test 217 triangulate: True

    test 218 trilaterate: 37.419078°N, 121.960579°W
./test/testLatLon.py:620: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  r = a(reversed(b))
./pygeodesy/ellipsoidalKarney.py:139: DeprecationWarning: Property_RO L{pygeodesy.ellipsoids.Ellipsoid.geodesic} has been DEPRECATED, use property C{geodesicw}.
  return fabs(_polygon(datum.ellipsoid.geodesic, points, True, False, wrap))
./test/testLatLon.py:621: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  f = a(b)  # ccw
    test 219 trilaterate: True
    test 220 trilaterate: 08.068912°S, 034.888699°W
    test 221 trilaterate: True
    test 222 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 223 trilaterate: True
    test 224 trilaterate: 42.67456065°N, 002.49539502°E
    test 225 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, wrap=False, z=-8.13526e-05)
# lazily imported pygeodesy.Ned from .ltpTuples by testVectorial.py line 367
# lazily imported pygeodesy.deprecated by ltpTuples.py line 531

    test 226 destinationNed: 48°53′12.01″N, 002°22′29.0″E, +0.20m

    testNvector(pygeodesy.ellipsoidalNvector, 24.06.15)
    test 227 sumOf: Nvector
    test 228 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 229 ecef.lat, .lon: 44.995674, 45.0
    test 230 ecef.height: -0.0
    test 231 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385

    testEllipsoidal(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 232 isEllipsoidal: True
    test 233 isSpherical: False
    test 234 isEllipsoidal: True
    test 235 isSpherical: False
    test 236 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 237 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 238 toDatum: 51.4778°N, 000.0016°W
    test 239 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 240 __matmul__: 51.477284°N, 000.00002°E, -45.90m
    test 241 sat: 82.545852°N, 059.719736°E, -6353121.71m
    test 242 dop: 51.998889°N, 004.373333°E, +134.64m
    test 243 distance: 3817991.0740122627  FAILED, KNOWN, expected 3817991.074015
    test 244 neareston8: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4874369.98942, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E), 0.0, 0.0)
    test 245 iteration: 0
    test 246 neareston8: (LatLon(45°30′03.93″N, 020°00′00.0″E), 39078.779519, 1.501069, 2, LatLon(45°00′00.0″N, 020°00′00.0″E), LatLon(46°00′00.0″N, 020°00′00.0″E), 270.356041, 269.999412)
    test 247 iteration: 1
# lazily imported pygeodesy.rhumb by geodesicw.py line 557
# lazily imported pygeodesy.geodsolve by ellipsoids.py line 1041
    test 248 intersecant2: 2.849e-11% 5 LatLon(03°18′54.69″S, 023°52′08.48″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 249 intersecant2: 2.945e-11% 5 LatLon(22°22′23.65″S, 007°55′54.49″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 250 intersecant2: 7.383e-11% 5 LatLon(10°39′24.95″N, 034°45′48.18″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 251 intersecant2: 6.491e-11% 4 LatLon(25°11′09.14″S, 005°10′35.44″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 252 intersecant2: 6.581e-12% 5 LatLon(10°14′21.91″S, 021°00′17.05″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 253 intersecant2: 1.993e-11% 5 LatLon(20°55′17.31″S, 010°40′21.43″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 254 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), exact (False), other (LatLon(15°00′00.0″N, 045°00′00.0″E)), point (LatLon(45°00′00.0″S, 015°00′00.0″W)) or wrap (False): too distant (3.69e+06) plumb to (16°56′45.9″S, 020°17′02.98″E)
    test 255 intersecant2: 3.571e-11% 5 LatLon(07°28′53.7″N, 035°04′55.96″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 256 intersecant2: 1.129e-11% 5 LatLon(34°33′21.82″N, 001°27′31.39″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 257 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), exact (False), other (12.954348932686514), point (LatLon(34°33′21.82″N, 001°27′31.39″E)) or wrap (False): too distant (7.17e+06) plumb to (36°22′36.48″N, 056°47′23.5″E)
    test 258 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), exact (False), other (LatLon(27°19′08.26″N, 016°11′37.69″E)), point (LatLon(09°06′21.63″N, 024°57′30.49″E)) or wrap (False): no convergence (2.37292e-08), tolerance (1.49012e-08) plumb to (18°16′00.91″N, 020°48′22.7″E)
    test 259 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), exact (False), other (84.25085736400831), point (LatLon(09°06′21.63″N, 024°57′30.49″E)) or wrap (False): too distant (1.83e+07) plumb to (10°02′23.16″N, 173°56′57.52″E)
    test 260 intersecant2: 5.466e-12% 5 LatLon(14°41′55.57″S, 027°56′08.1″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 261 intersecant2: 6.830e-11% 5 LatLon(28°07′09.25″N, 025°17′29.24″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 262 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), exact (False), other (316.28535190338266), point (LatLon(28°07′09.25″N, 025°17′29.24″W)) or wrap (False): no convergence (128), tolerance (1.49012e-08) plumb to (12°13′13.68″N, 013°50′55.81″W)

    testLatLon(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 263 isEllipsoidal: True
    test 264 isSpherical: False
    test 265 lat/lonDMS: 52.20472°N, 000.14056°E
    test 266 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 267 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 268 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 269 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 270 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 271 isequalTo: True
    test 272 isequalTo: True
    test 273 latlon2: 52.20472, 0.14056
    test 274 latlon2: 52.2047, 0.1406
    test 275 latlon2: 52.205, 0.141
    test 276 latlon2: 52.2, 0.14
    test 277 latlon2: 52.2, 0.1
    test 278 latlon2: 52.0, 0.0
    test 279 chordTo: 12029263.15
    test 280 chordTo: 12029049.69
    test 281 initialBearingTo: 156.1106
    test 282 initialBearingTo: 65.9335
    test 283 initialBearingTo: 0.0
    test 284 initialBearingTo: 180.0
    test 285 finalBearingTo: 157.8345
    test 286 finalBearingTo: 93.9034
    test 287 bearingTo2: 156.1106, 157.8345
    test 288 ispolar: True
    test 289 copy: True
    test 290 __eq__: True
    test 291 __ne__: False
    test 292 equirectangularTo: 404329.56
    test 293 distanceTo: 404607.805988
    test 294 distanceTo: 404607.805988
    test 295 distanceTo: 3981601
    test 296 antipodal: False
    test 297 distanceTo dateline: 19959679.267
    test 298 distanceTo unrolled: 19959679.267
    test 299 antipodal: False
    test 300 distanceTo dateline: 9513998
    test 301 distanceTo unrolled: 9513998
    test 302 distanceTo: 18012714.66
    test 303 distanceTo: ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, antipodal ...
    test 304 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 305 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 306 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 307 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 308 intermediateTo: 51.372275°N, 000.707253°E
    test 309 intermediateTo: True
    test 310 intermediateTo: 404607.806
    test 311 intermediateTo+5: 35.139582°N, 008.994368°E
    test 312 intermediateTo+5: 5.000
    test 313 intermediateTo-4: 64.894124°N, 013.705689°W
    test 314 intermediateTo-4: 4.000
    test 315 intermediateTo-h: 125.000
    test 316 midpointTo: 50.536583°N, 001.274507°E
    test 317 destination: 51.513526°N, 000.098038°W
    test 318 destination: 51°30′49″N, 000°05′53″W
    test 319 destination: 33°57′N, 118°24′W
    test 320 destination: 33.950367°N, 118.399012°W
    test 321 destination: 0.592546N, 2.066453W
    test 322 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 323 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 324 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 325 chordTo: 125203.963
    test 326 cosineAndoyerLambertTo: 125205.962
    test 327 cosineAndoyerLambertTo: 125205.962
    test 328 cosineForsyheAndoyerLambertTo: 125205.965
    test 329 cosineForsyheAndoyerLambertTo: 125205.965
    test 330 cosineLawTo: 124801.098
    test 331 cosineLawTo: 124801.098
    test 332 equirectangularTo: 124804.754
    test 333 equirectangularTo: 124804.754
    test 334 euclideanTo: 130015.089
    test 335 euclideanTo: 130015.089
    test 336 flatLocalTo: 125209.633
    test 337 flatLocalTo: 125209.633
    test 338 flatPolarTo: 133663.257
    test 339 flatPolarTo: 133663.257
    test 340 hartzell: 53.3206°N, 001.7297°W
    test 341 hartzell: 53.349541°N, 001.7297°W
    test 342 height4: 0.0
    test 343 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 344 height4: 53°19′14.2″N, 001°43′46.9″W
    test 345 height4: 53°19′14.2″N, 001°43′46.9″W
    test 346 haversineTo: 124801.098
    test 347 haversineTo: 124801.098
    test 348 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 349 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 350 thomasTo: 125206.188
    test 351 thomasTo: 125206.188
    test 352 vincentysTo: 124801.098
    test 353 vincentysTo: 124801.098
    test 354 isclockwise: False
    test 355 isclockwise*: False
    test 356 isclockwise: True
    test 357 isclockwise*: True
    test 358 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 359 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 360 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 361 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 362 isconvex: False
    test 363 isconvex*: False
    test 364 isconvex: True
    test 365 isconvex*: True
    test 366 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 367 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 368 isenclosedBy1: True
    test 369 isenclosedBy1*: True
    test 370 isenclosedBy2: False
    test 371 isenclosedBy2*: False
    test 372 isenclosedBy3: False
    test 373 isenclosedBy3*: False
    test 374 isenclosedBy4: False
    test 375 isenclosedBy4*: False
    test 376 isenclosedBy5: False
    test 377 isenclosedBy5*: False
    test 378 isenclosedBy6: True
    test 379 isenclosedBy6*: True
    test 380 isenclosedBy7: True
    test 381 isenclosedBy7*: True
    test 382 isenclosedBy-CCW: True
    test 383 isenclosedBy-CW : True
    test 384 isenclosedBy-CCW: True
    test 385 initialBearingTo: 102.392291
    test 386 compassAngleTo: 100.017
    test 387 compassAngleTo: 105.599
    test 388 initialBearingTo: 288.676039
    test 389 compassAngleTo: 280.017
    test 390 compassAngleTo: 285.599
    test 391 equirectangularTo: 592.185
    test 392 distanceTo: 593.571
    test 393 bearingTo: 0.0
    test 394 compassAngleTo: 0.0
    test 395 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 396 compassAngleTo: 45.0
    test 397 bearingTo: 90.0
    test 398 compassAngleTo: 90.0
    test 399 bearingTo: 180.0
    test 400 compassAngleTo: 180.0
    test 401 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 402 compassAngleTo: 225.0
    test 403 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 404 compassAngleTo: 315.0
    test 405 bearingTo: 270.0
    test 406 compassAngleTo: 270.0
    test 407 bearingTo: 360.0  FAILED, KNOWN, expected 359.4
    test 408 compassAngleTo: 359.4
    test 409 latlon2: (53.0, 1.0)
    test 410 philam2: (0.93, 0.02)
    test 411 bearingTo: 31
    test 412 compassAngleTo: 31
    test 413 compassAngleTo: 45

    test 414 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 415 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 416 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 417 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 418 isequalTo: <class 'bool'>
    test 419 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 420 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 421 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 422 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 423 compassAngleTo: <class 'float'>
    test 424 cosineLawTo: <class 'float'>
    test 425 euclideanTo: <class 'float'>
    test 426 flatLocalTo: <class 'float'>
    test 427 flatPolarTo: <class 'float'>
    test 428 haversineTo: <class 'float'>
    test 429 hubenyTo: <class 'float'>
    test 430 vincentysTo: <class 'float'>
    test 431 toNvector: (0.615661, 0.0, 0.788011, 0)
    test 432 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 433 toVector3d: (0.61823, 0.0, 0.786)
# lazily imported pygeodesy.sphericalTrigonometry by ellipsoidalBaseDI.py line 736

    test 434 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 305.091  FAILED, KNOWN, expected 311.234
    test 435 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66933643°N, 002.48620262°E  FAILED, KNOWN, expected 42.66938776°N, 002.48641176°E
    test 436 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1592.545  FAILED, KNOWN, expected 1586.951
    test 437 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.65141232°N, 002.46816989°E  FAILED, KNOWN, expected 42.65153156°N, 002.46821899°E
    test 438 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 3
    test 439 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 127.229  FAILED, KNOWN, expected 137.897
    test 440 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 152.612  FAILED, KNOWN, expected 148.175
    test 441 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 442 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 443 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 2400.293  FAILED, KNOWN, expected 2399.908
    test 444 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 2400.293  FAILED, KNOWN, expected 2399.908
    test 445 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66128984°N, 002.47973818°E  FAILED, KNOWN, expected 42.6613586°N, 002.47981223°E
    test 446 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min- is .maxPoint: True
    test 447 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 1
    test 448 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 1343.743  FAILED, KNOWN, expected 1332.749
    test 449 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.69131964°N, 002.50112167°E  FAILED, KNOWN, expected 42.69124153°N, 002.50124031°E
    test 450 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1445.554  FAILED, KNOWN, expected 1450.709
    test 451 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 452 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 453 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    27 tests skipped (81): No module named 'numpy': required by vector2d._numpy

    test 454 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    22 tests skipped (103): No module named 'numpy': required by vector2d._numpy
# lazily imported pygeodesy.ellipsoidalKarney by ellipsoidalVincenty.py line 399

    test 455 area cw/ccw: 1.0

    testNOAA(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 456 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 457 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 458 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 459 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 460 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), 0, 0)
    test 461 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), -1, 0)
    test 462 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, -2)
    test 463 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, 2)
    test 464 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 0)
    test 465 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 2)
    test 466 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 467 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)
    test 468 #58: (LatLon(01°54′25.65″S, 005°37′48.76″E), 1, -2)
    test 469 #58: <class 'pygeodesy.errors.IntersectionError'>

    testIntersections2(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 470 Equidistant: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W  FAILED, KNOWN, expected 36.9892°N, 088.152°W, 38.2377°N, 092.39°W
    test 471 Equidistant: 36.9892°N, 088.152°W, 38.2377°N, 092.39°W
    test 472 Equidistant: 00.0°N, 035.4073°W, 00.0°N, 035.4073°E  FAILED, KNOWN, expected 00.0°S, 035.4073°W, 00.0°S, 035.4073°E
    test 473 Equidistant: 1.63814 (% of radius)
    test 474 Equidistant: 22.756°N, 000.0°E, 22.756°S, 000.0°E  FAILED, KNOWN, expected 22.756°N, 000.0°W, 22.756°S, 000.0°W
    test 475 Equidistant: 1.30784 (% of radius)
    test 476 Equidistant: 29.2359°N, 040.2625°W, 29.2359°S, 040.2625°E
    test 477 Equidistant: 1.31348 (% of radius)
    test 478 Equidistant: 01.1557°S, 045.0894°E, 01.1557°N, 045.0894°E
    test 479 Equidistant: 1.81093 (% of radius)
    test 480 Equidistant 5: 05.0218°S, 005.0605°W, 05.0218°N, 005.0605°E
    test 481 Equidistant 5: 0.00337268 (% of radius)
    test 482 Equidistant 10: 10.0378°S, 010.3545°W, 10.0378°N, 010.3545°E
    test 483 Equidistant 10: 0.00344677 (% of radius)
    test 484 Equidistant 15: 15.0326°S, 016.1429°W, 15.0326°N, 016.1429°E
    test 485 Equidistant 15: 0.00356146 (% of radius)
    test 486 Equidistant 20: 19.9682°S, 022.7468°W, 19.9682°N, 022.7468°E
    test 487 Equidistant 20: 0.00370135 (% of radius)
    test 488 Equidistant 25: 24.7603°S, 030.5908°W, 24.7603°N, 030.5908°E
    test 489 Equidistant 25: 0.00383987 (% of radius)
    test 490 Equidistant 30: 29.2359°S, 040.2625°W, 29.2359°N, 040.2625°E
    test 491 Equidistant 30: 0.00393258 (% of radius)
    test 492 Equidistant 35: 33.0487°S, 052.585°W, 33.0487°N, 052.585°E
    test 493 Equidistant 35: 0.00390516 (% of radius)
    test 494 Equidistant 40: 35.5123°S, 068.6794°W, 35.5123°N, 068.6794°E
    test 495 Equidistant 40: 0.0036308 (% of radius)
    test 496 Equidistant 45: 35.2644°S, 090.0019°W, 35.2644°N, 090.0019°E
    test 497 Equidistant 45: 0.00288386 (% of radius)
    test 498 Equidistant 50: 29.3392°S, 119.0221°W, 29.3392°N, 119.0221°E
    test 499 Equidistant 50: 0.00271777 (% of radius)
    test 500 Equidistant: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (222847): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 501 Equidistant: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (1.02385e+06): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 502 Equidistant: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (1.55077e+06): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 503 Equidistant: 11.453227°N, 006.396013°E Random +/- 45
    test 504 Equidistant: 11.317827°N, 006.2536°E, 14.857622°N, 073.214961°E  d 21585.3 meter (iteration 4)
    test 505 Equidistant: 11.493791°N, 006.306864°E, 19.776865°N, 014.146792°W  d 10712.1 meter (iteration 4)
    test 506 Equidistant: 11.543174°N, 006.590933°E, 65.068309°N, 009.483787°W  d 23478.3 meter (iteration 4)
    test 507 Equidistant: 11.490694°N, 006.443009°E, 25.68352°N, 007.401962°W  d 6593.2 meter (iteration 4)
    test 508 Equidistant: 11.4372°N, 006.437348°E, 06.467767°N, 039.890087°W  d 4846.38 meter (iteration 3)
    test 509 Equidistant: 11.334969°N, 006.487662°E, 17.415919°N, 017.966073°W  d 16467.4 meter (iteration 4)
    test 510 Equidistant: 11.459938°N, 006.514645°E, 19.706374°N, 081.329144°W  d 12965.9 meter (iteration 3)
    test 511 Equidistant: 11.321953°N, 006.623431°E, 09.440208°N, 009.973613°W  d 28756.6 meter (iteration 4)
    test 512 Equidistant: 11.368869°N, 006.327039°E, 01.682203°N, 024.012759°E  d 11989.1 meter (iteration 4)
    test 513 Equidistant: 11.438255°N, 006.424594°E, 23.94037°N, 013.748725°W  d 3531.22 meter (iteration 5)
    test 514 Equidistant: 11.330184°N, 006.500096°E, 05.272759°N, 024.165853°W  d 17728.3 meter (iteration 4)
    test 515 Equidistant: 11.376028°N, 006.347638°E, 52.673095°S, 002.596747°W  d 10039.7 meter (iteration 4)

    testVincenty(pygeodesy.ellipsoidalVincenty, 24.06.11, datum='WGS84')
    test 516 distanceTo: 866455.43292
    test 517 toDatum: OSGB36
    test 518 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 519 isEllipsoidal: True
    test 520 isSpherical: False
    test 521 epsilon: 1e-12
    test 522 iterations: 200
    test 523 copy: True
    test 524 isEllipsoidal: True
    test 525 isSpherical: False
    test 526 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 527 epsilon: 2.220446049250e-16
    test 528 iterations: 400
    test 529 iteration: None

    testKarneyVincenty(pygeodesy.ellipsoidalVincenty, 24.06.11, datum='WGS84')
    test 530 coincident: 0.0
    test 531 coincident: 0.0, 0.0, 0.0
    test 532 destination: 37.6528°S, 143.9265°E
    test 533 destination: True
    test 534 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 535 destination2: True
    test 536 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 537 distanceTo: 969954.166
    test 538 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 539 distanceTo2: 972708.16174, 11.22502
    test 540 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 541 destination: 58.64402°N, 003.07009°W
    test 542 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 543 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 544 distanceTo: 404607.806
    test 545 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 546 distanceTo2: 402574.597287, 157.726344
    test 547 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 548 destination: 48.857°N, 002.351°E
    test 549 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 550 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 551 distanceTo: 54973.295
    test 552 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 553 distanceTo2: 54903.41209, 232.9209
    test 554 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 555 destination: 37.6528°N, 143.9265°E
    test 556 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 557 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 558 distanceToMP: 298396.057
    test 559 distanceToSM: 185.415
    test 560 distanceToMP: 111319.491
    test 561 distanceToMP: 110574.389  FAILED, KNOWN, expected 110574.361
    test 562 distanceToKW: 222638.982
    test 563 distanceToKW: 111319.491
    test 564 distanceTo3: 54972.271
    test 565 distanceTo3: 306°52′05.37″
    test 566 distanceTo3: 307°10′25.07″
    test 567 distanceTo2: 54902.390
    test 568 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalVincenty, 24.06.11, datum='WGS84')
    test 569 distanceTo/antipodal (182): 19936288.579
    test 570 distanceTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 571 initialBearingTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 572 finalBearingTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 573 distanceTo/equatorial (182): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 574 initialBearingTo/equatorial (182): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 575 distanceTo/coincident (5): 111319.491
    test 576 distanceTo/meridional (1): 10001965.729
    test 577 initialBearingTo/meridional (1): 180.0
    test 578 distanceTo/coincident (1): 0.0
    test 579 initialBearingTo/coincident (1): 0.0
    test 580 finalBearingTo/coincident (1): 0.0
    test 581 destination/coincident (1): 50.06632°N, 005.71475°W
    test 582 distanceTo/anti-meridian (4): 10825924.1
    test 583 distanceTo/quadrants (5): 4015703.02
    test 584 distanceTo/quadrants (5): 4015703.02
    test 585 distanceTo/quadrants (5): 4015703.02
    test 586 distanceTo/quadrants (5): 4015703.02
    test 587 distanceTo/quadrants (5): 4015703.02
    test 588 distanceTo/quadrants (5): 4015703.02
    test 589 distanceTo/quadrants (5): 4015703.02
    test 590 distanceTo/quadrants (5): 4015703.02
    test 591 distanceTo/quadrants (5): 4015703.02
    test 592 distanceTo/quadrants (5): 4015703.02
    test 593 distanceTo/quadrants (5): 4015703.02
    test 594 distanceTo/quadrants (5): 4015703.02
    test 595 distanceTo/quadrants (5): 4015703.02
    test 596 distanceTo/quadrants (5): 4015703.02
    test 597 distanceTo/quadrants (5): 4015703.02
    test 598 distanceTo/quadrants (5): 4015703.02

    testVincenty(pygeodesy.ellipsoidalVincenty, 24.06.11, datum='NAD83')
    test 599 distanceTo: 866455.43292
    test 600 toDatum: OSGB36
    test 601 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 602 isEllipsoidal: True
    test 603 isSpherical: False
    test 604 epsilon: 1e-12
    test 605 iterations: 200
    test 606 copy: True
    test 607 isEllipsoidal: True
    test 608 isSpherical: False
    test 609 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 610 epsilon: 2.220446049250e-16
    test 611 iterations: 400
    test 612 iteration: None

    testKarneyVincenty(pygeodesy.ellipsoidalVincenty, 24.06.11, datum='NAD83')
    test 613 coincident: 0.0
    test 614 coincident: 0.0, 0.0, 0.0
    test 615 destination: 37.6528°S, 143.9265°E
    test 616 destination: True
    test 617 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 618 destination2: True
    test 619 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 620 distanceTo: 969954.166
    test 621 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 622 distanceTo2: 972708.16174, 11.22502
    test 623 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 624 destination: 58.64402°N, 003.07009°W
    test 625 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 626 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 627 distanceTo: 404607.806
    test 628 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 629 distanceTo2: 402574.597287, 157.726344
    test 630 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 631 destination: 48.857°N, 002.351°E
    test 632 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 633 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 634 distanceTo: 54973.295
    test 635 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 636 distanceTo2: 54903.41209, 232.9209
    test 637 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 638 destination: 37.6528°N, 143.9265°E
    test 639 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 640 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 641 distanceToMP: 298396.057
    test 642 distanceToSM: 185.415
    test 643 distanceToMP: 111319.491
    test 644 distanceToMP: 110574.389  FAILED, KNOWN, expected 110574.361
    test 645 distanceToKW: 222638.982
    test 646 distanceToKW: 111319.491
    test 647 distanceTo3: 54972.271
    test 648 distanceTo3: 306°52′05.37″
    test 649 distanceTo3: 307°10′25.07″
    test 650 distanceTo2: 54902.390
    test 651 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalVincenty, 24.06.11, datum='NAD83')
    test 652 distanceTo/antipodal (182): 19936288.579
    test 653 distanceTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 654 initialBearingTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 655 finalBearingTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 656 distanceTo/equatorial (182): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 657 initialBearingTo/equatorial (182): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 658 distanceTo/coincident (5): 111319.491
    test 659 distanceTo/meridional (1): 10001965.729
    test 660 initialBearingTo/meridional (1): 180.0
    test 661 distanceTo/coincident (1): 0.0
    test 662 initialBearingTo/coincident (1): 0.0
    test 663 finalBearingTo/coincident (1): 0.0
    test 664 destination/coincident (1): 50.06632°N, 005.71475°W
    test 665 distanceTo/anti-meridian (4): 10825924.1
    test 666 distanceTo/quadrants (5): 4015703.02
    test 667 distanceTo/quadrants (5): 4015703.02
    test 668 distanceTo/quadrants (5): 4015703.02
    test 669 distanceTo/quadrants (5): 4015703.02
    test 670 distanceTo/quadrants (5): 4015703.02
    test 671 distanceTo/quadrants (5): 4015703.02
    test 672 distanceTo/quadrants (5): 4015703.02
    test 673 distanceTo/quadrants (5): 4015703.02
    test 674 distanceTo/quadrants (5): 4015703.02
    test 675 distanceTo/quadrants (5): 4015703.02
    test 676 distanceTo/quadrants (5): 4015703.02
    test 677 distanceTo/quadrants (5): 4015703.02
    test 678 distanceTo/quadrants (5): 4015703.02
    test 679 distanceTo/quadrants (5): 4015703.02
    test 680 distanceTo/quadrants (5): 4015703.02
    test 681 distanceTo/quadrants (5): 4015703.02

    testEllipsoidal(pygeodesy.ellipsoidalExact, 24.06.11)
    test 682 isEllipsoidal: True
    test 683 isSpherical: False
    test 684 isEllipsoidal: True
    test 685 isSpherical: False
    test 686 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 687 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 688 toDatum: 51.4778°N, 000.0016°W
    test 689 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 690 __matmul__: 51.477284°N, 000.00002°E, -45.90m
    test 691 sat: 82.219069°N, 059.719736°E, -6353120.97m
    test 692 dop: 51.998889°N, 004.373333°E, +134.64m
    test 693 distance: 3802238.5049886256  FAILED, KNOWN, expected 3802238.504989
    test 694 neareston8: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4874369.98942, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E), 0.0, 0.0)
    test 695 iteration: 0
    test 696 neareston8: (LatLon(45°30′03.93″N, 020°00′00.0″E), 39078.779519, 1.501069, 2, LatLon(45°00′00.0″N, 020°00′00.0″E), LatLon(46°00′00.0″N, 020°00′00.0″E), 270.356041, 269.999412)
    test 697 iteration: 1
    test 698 nearestOn: 54.928536°N, 021.934843°W
    test 699 intersecant2: 1.394e-14% 60 LatLon(03°18′54.69″S, 023°52′08.48″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 700 intersecant2: 1.394e-14% 60 LatLon(22°22′23.65″S, 007°55′54.49″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 701 intersecant2: 1.394e-13% 57 LatLon(10°39′24.95″N, 034°45′48.18″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 702 intersecant2: 1.673e-13% 57 LatLon(25°11′09.14″S, 005°10′35.44″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 703 intersecant2: 1.394e-14% 61 LatLon(10°14′21.91″S, 021°00′17.05″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 704 intersecant2: 5.577e-14% 61 LatLon(20°55′17.31″S, 010°40′21.43″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 705 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), exact (False), other (LatLon(15°00′00.0″N, 045°00′00.0″E)), point (LatLon(45°00′00.0″S, 015°00′00.0″W)) or wrap (False): too distant (3.69e+06) plumb to (16°56′45.9″S, 020°17′02.98″E)
    test 706 intersecant2: 2.789e-14% 53 LatLon(14°03′51.39″S, 028°26′58.36″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 707 intersecant2: 5.577e-14% 53 LatLon(12°22′26.0″N, 034°27′22.95″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 708 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), exact (False), other (281.53161050847893), point (LatLon(12°22′26.0″N, 034°27′22.95″W)) or wrap (False): no convergence (262144), tolerance (1.49012e-08) plumb to (15°47′49.48″N, 005°13′47.33″W)
    test 709 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), exact (False), other (LatLon(14°32′15.34″N, 023°55′31.24″E)), point (LatLon(08°07′26.67″N, 025°02′34.7″E)) or wrap (False): no convergence (4.7381e-08), tolerance (1.49012e-08) plumb to (11°19′54.2″N, 024°29′25.41″E)
    test 710 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), exact (False), other (85.95840736120797), point (LatLon(08°07′26.67″N, 025°02′34.7″E)) or wrap (False): no convergence (262144), tolerance (1.49012e-08) plumb to (07°50′47.71″S, 005°05′23.42″W)
    test 711 intersecant2: 6.972e-14% 71 LatLon(34°56′23.99″N, 001°04′34.36″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 712 intersecant2: 2.789e-14% 71 LatLon(31°08′27.98″N, 010°56′13.14″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 713 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), exact (False), other (33.17389027686751), point (LatLon(31°08′27.98″N, 010°56′13.14″E)) or wrap (False): no convergence (8.38861e+06), tolerance (1.49012e-08) plumb to (24°30′31.53″N, 007°26′16.86″W)

    testLatLon(pygeodesy.ellipsoidalExact, 24.06.11)
    test 714 isEllipsoidal: True
    test 715 isSpherical: False
    test 716 lat/lonDMS: 52.20472°N, 000.14056°E
    test 717 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 718 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 719 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 720 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 721 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 722 isequalTo: True
    test 723 isequalTo: True
    test 724 latlon2: 52.20472, 0.14056
    test 725 latlon2: 52.2047, 0.1406
    test 726 latlon2: 52.205, 0.141
    test 727 latlon2: 52.2, 0.14
    test 728 latlon2: 52.2, 0.1
    test 729 latlon2: 52.0, 0.0
    test 730 chordTo: 12029263.15
    test 731 chordTo: 12029049.69
    test 732 initialBearingTo: 156.1106
    test 733 initialBearingTo: 65.9335
    test 734 initialBearingTo: 0.0
    test 735 initialBearingTo: 180.0
    test 736 finalBearingTo: 157.8345
    test 737 finalBearingTo: 93.9034
    test 738 bearingTo2: 156.1106, 157.8345
    test 739 ispolar: True
    test 740 copy: True
    test 741 __eq__: True
    test 742 __ne__: False
    test 743 equirectangularTo: 404329.56
    test 744 distanceTo: 404607.805988
    test 745 distanceTo: 404607.805988
    test 746 distanceTo: 3981601
    test 747 antipodal: False
    test 748 distanceTo dateline: 19959679.267
    test 749 distanceTo unrolled: 19959679.267
    test 750 antipodal: False
    test 751 distanceTo dateline: 9513998
    test 752 distanceTo unrolled: 9513998
    test 753 distanceTo: 18012714.66
    test 754 distanceTo: 0.00  FAILED, KNOWN, expected 20003931.46
    test 755 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 756 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 757 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 758 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 759 intermediateTo: 51.372275°N, 000.707253°E
    test 760 intermediateTo: True
    test 761 intermediateTo: 404607.806
    test 762 intermediateTo+5: 35.139582°N, 008.994368°E
    test 763 intermediateTo+5: 5.000
    test 764 intermediateTo-4: 64.894124°N, 013.705689°W
    test 765 intermediateTo-4: 4.000
    test 766 intermediateTo-h: 125.000
    test 767 midpointTo: 50.536583°N, 001.274507°E
    test 768 destination: 51.513526°N, 000.098038°W
    test 769 destination: 51°30′49″N, 000°05′53″W
    test 770 destination: 33°57′N, 118°24′W
    test 771 destination: 33.950367°N, 118.399012°W
    test 772 destination: 0.592546N, 2.066453W
    test 773 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 774 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 775 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 776 chordTo: 125203.963
    test 777 cosineAndoyerLambertTo: 125205.962
    test 778 cosineAndoyerLambertTo: 125205.962
    test 779 cosineForsyheAndoyerLambertTo: 125205.965
    test 780 cosineForsyheAndoyerLambertTo: 125205.965
    test 781 cosineLawTo: 124801.098
    test 782 cosineLawTo: 124801.098
    test 783 equirectangularTo: 124804.754
    test 784 equirectangularTo: 124804.754
    test 785 euclideanTo: 130015.089
    test 786 euclideanTo: 130015.089
    test 787 flatLocalTo: 125209.633
    test 788 flatLocalTo: 125209.633
    test 789 flatPolarTo: 133663.257
    test 790 flatPolarTo: 133663.257
    test 791 hartzell: 53.3206°N, 001.7297°W
    test 792 hartzell: 53.349541°N, 001.7297°W
    test 793 height4: 0.0
    test 794 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 795 height4: 53°19′14.2″N, 001°43′46.9″W
    test 796 height4: 53°19′14.2″N, 001°43′46.9″W
    test 797 haversineTo: 124801.098
    test 798 haversineTo: 124801.098
    test 799 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 800 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 801 thomasTo: 125206.188
    test 802 thomasTo: 125206.188
    test 803 vincentysTo: 124801.098
    test 804 vincentysTo: 124801.098
    test 805 isclockwise: False
    test 806 isclockwise*: False
    test 807 isclockwise: True
    test 808 isclockwise*: True
    test 809 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 810 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 811 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 812 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 813 isconvex: False
    test 814 isconvex*: False
    test 815 isconvex: True
    test 816 isconvex*: True
    test 817 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 818 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 819 isenclosedBy1: True
    test 820 isenclosedBy1*: True
    test 821 isenclosedBy2: False
    test 822 isenclosedBy2*: False
    test 823 isenclosedBy3: False
    test 824 isenclosedBy3*: False
    test 825 isenclosedBy4: False
    test 826 isenclosedBy4*: False
    test 827 isenclosedBy5: False
    test 828 isenclosedBy5*: False
    test 829 isenclosedBy6: True
    test 830 isenclosedBy6*: True
    test 831 isenclosedBy7: True
    test 832 isenclosedBy7*: True
    test 833 isenclosedBy-CCW: True
    test 834 isenclosedBy-CW : True
    test 835 isenclosedBy-CCW: True
    test 836 initialBearingTo: 102.392291
    test 837 compassAngleTo: 100.017
    test 838 compassAngleTo: 105.599
    test 839 initialBearingTo: 288.676039
    test 840 compassAngleTo: 280.017
    test 841 compassAngleTo: 285.599
    test 842 equirectangularTo: 592.185
    test 843 distanceTo: 593.571
    test 844 bearingTo: 0.0
    test 845 compassAngleTo: 0.0
    test 846 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 847 compassAngleTo: 45.0
    test 848 bearingTo: 90.0
    test 849 compassAngleTo: 90.0
    test 850 bearingTo: 180.0
    test 851 compassAngleTo: 180.0
    test 852 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 853 compassAngleTo: 225.0
    test 854 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 855 compassAngleTo: 315.0
    test 856 bearingTo: 270.0
    test 857 compassAngleTo: 270.0
    test 858 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 859 compassAngleTo: 359.4
    test 860 latlon2: (53.0, 1.0)
    test 861 philam2: (0.93, 0.02)
    test 862 bearingTo: 31
    test 863 compassAngleTo: 31
    test 864 compassAngleTo: 45

    test 865 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 866 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 867 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 868 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 869 isequalTo: <class 'bool'>
    test 870 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 871 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 872 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 873 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 874 compassAngleTo: <class 'float'>
    test 875 cosineLawTo: <class 'float'>
    test 876 euclideanTo: <class 'float'>
    test 877 flatLocalTo: <class 'float'>
    test 878 flatPolarTo: <class 'float'>
    test 879 haversineTo: <class 'float'>
    test 880 hubenyTo: <class 'float'>
    test 881 vincentysTo: <class 'float'>
    test 882 toNvector: (0.615661, 0.0, 0.788011, 0)
    test 883 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 884 toVector3d: (0.61823, 0.0, 0.786)

    test 885 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 305.091  FAILED, KNOWN, expected 311.234
    test 886 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66933643°N, 002.48620262°E  FAILED, KNOWN, expected 42.66938776°N, 002.48641176°E
    test 887 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1592.545  FAILED, KNOWN, expected 1586.951
    test 888 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.65141232°N, 002.46816989°E  FAILED, KNOWN, expected 42.65153156°N, 002.46821899°E
    test 889 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 3
    test 890 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 127.229  FAILED, KNOWN, expected 137.897
    test 891 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 152.612  FAILED, KNOWN, expected 148.175
    test 892 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 893 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 894 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 2400.293  FAILED, KNOWN, expected 2399.908
    test 895 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 2400.293  FAILED, KNOWN, expected 2399.908
    test 896 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66128984°N, 002.47973818°E  FAILED, KNOWN, expected 42.6613586°N, 002.47981223°E
    test 897 trilaterate5 (pygeodesy.ellipsoidalExact) .min- is .maxPoint: True
    test 898 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 1
    test 899 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 1343.743  FAILED, KNOWN, expected 1332.749
    test 900 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.69131964°N, 002.50112167°E  FAILED, KNOWN, expected 42.69124153°N, 002.50124031°E
    test 901 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1445.554  FAILED, KNOWN, expected 1450.709
    test 902 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 903 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 904 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    27 tests skipped (130): No module named 'numpy': required by vector2d._numpy

    test 905 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    22 tests skipped (152): No module named 'numpy': required by vector2d._numpy

    test 906 area cw/ccw: 1.0

    testNOAA(pygeodesy.ellipsoidalExact, 24.06.11)
    test 907 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 908 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 909 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 910 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalExact, 24.06.11)
    test 911 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), 0, 0)
    test 912 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), -1, 0)
    test 913 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, -2)
    test 914 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, 2)
    test 915 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 0)
    test 916 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 2)
    test 917 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 918 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)
    test 919 #58: (LatLon(01°54′25.65″S, 005°37′48.76″E), 1, -2)
    test 920 #58: <class 'pygeodesy.errors.IntersectionError'>
    test 921 intersection3: (LatLon(54°43′01.31″N, 014°33′49.88″W), 0, 0)
    test 922 intersection3: 54.71703°N, 014.563856°W

    testIntersections2(pygeodesy.ellipsoidalExact, 24.06.11)
    test 923 EquidistantExact: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 924 EquidistantExact: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 925 EquidistantExact: 00.0°S, 035.3478°W, 00.0°N, 035.3478°E  FAILED, KNOWN, expected 00.0°N, 035.3478°W, 00.0°S, 035.3478°E
    test 926 EquidistantExact: 1.63715 (% of radius)
    test 927 EquidistantExact: 22.657°N, 000.0°W, 22.657°S, 000.0°W  FAILED, KNOWN, expected 22.657°N, 000.0°E, 22.657°S, 000.0°E
    test 928 EquidistantExact: 1.30663 (% of radius)
    test 929 EquidistantExact: 29.4898°N, 040.1785°W, 29.4898°S, 040.1785°E
    test 930 EquidistantExact: 1.31396 (% of radius)
    test 931 EquidistantExact: 02.7402°S, 044.885°E, 02.7402°N, 044.885°E
    test 932 EquidistantExact: 1.83268 (% of radius)
    test 933 EquidistantExact 5: 05.0558°S, 005.0271°W, 05.0558°N, 005.0271°E
    test 934 EquidistantExact 5: 3.76901e-15 (% of radius)
    test 935 EquidistantExact 10: 10.1081°S, 010.2901°W, 10.1081°N, 010.2901°E
    test 936 EquidistantExact 10: 4.18779e-16 (% of radius)
    test 937 EquidistantExact 15: 15.1433°S, 016.0531°W, 15.1433°N, 016.0531°E
    test 938 EquidistantExact 15: 1.9543e-15 (% of radius)
    test 939 EquidistantExact 20: 20.1241°S, 022.6411°W, 20.1241°N, 022.6411°E
    test 940 EquidistantExact 20: 0 (% of radius)
    test 941 EquidistantExact 25: 24.9655°S, 030.4846°W, 24.9655°N, 030.4846°E
    test 942 EquidistantExact 25: 1.00507e-15 (% of radius)
    test 943 EquidistantExact 30: 29.4898°S, 040.1785°W, 29.4898°N, 040.1785°E
    test 944 EquidistantExact 30: 5.58372e-16 (% of radius)
    test 945 EquidistantExact 35: 33.3405°S, 052.5516°W, 33.3405°N, 052.5516°E
    test 946 EquidistantExact 35: 8.37557e-16 (% of radius)
    test 947 EquidistantExact 40: 35.8146°S, 068.7149°W, 35.8146°N, 068.7149°E
    test 948 EquidistantExact 40: 1.67511e-15 (% of radius)
    test 949 EquidistantExact 45: 35.5368°S, 090.0616°W, 35.5368°N, 090.0616°E
    test 950 EquidistantExact 45: 5.58372e-16 (% of radius)
    test 951 EquidistantExact 50: 29.5972°S, 118.8695°W, 29.5972°N, 118.8695°E
    test 952 EquidistantExact 50: 1.67511e-16 (% of radius)
    test 953 EquidistantExact: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (188568): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 954 EquidistantExact: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (1.01348e+06): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 955 EquidistantExact: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (1.55092e+06): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 956 EquidistantExact: 26.51238°S, 009.967709°W Random +/- 45
    test 957 EquidistantExact: 26.51238°S, 009.967709°W, 16.745934°S, 012.311963°W  d 1.94773e-09 meter (iteration 3)
    test 958 EquidistantExact: 26.51238°S, 009.967709°W, 03.837779°S, 029.19264°W  d 5.53984e-09 meter (iteration 3)
    test 959 EquidistantExact: 26.51238°S, 009.967709°W, 09.637137°N, 035.320038°E  d 5.39156e-09 meter (iteration 3)
    test 960 EquidistantExact: 26.51238°S, 009.967709°W, 04.471041°N, 009.435007°W  d 1.84371e-09 meter (iteration 3)
    test 961 EquidistantExact: 26.51238°S, 009.967709°W, 42.486093°N, 065.506592°E  d 2.23908e-09 meter (iteration 3)
    test 962 EquidistantExact: 26.51238°S, 009.967709°W, 09.068119°S, 000.548247°E  d 5.00094e-10 meter (iteration 3)
    test 963 EquidistantExact: 26.51238°S, 009.967709°W, 09.297469°N, 043.687738°E  d 1.11608e-08 meter (iteration 3)
    test 964 EquidistantExact: center1 (LatLon(02°44′02.39″S, 002°51′01.05″W)), center2 (LatLon(39°19′37.29″S, 012°56′19.55″W)), radius1 (2738878.555450801) or radius2 (1447870.4694324795): too distant (4.18e+06): invalid  FAILED, KNOWN, expected d < 1e-06 m
    test 965 EquidistantExact: 26.51238°S, 009.967709°W, 20.369171°S, 042.109812°W  d 8.85331e-10 meter (iteration 3)
    test 966 EquidistantExact: 26.51238°S, 009.967709°W, 02.284294°N, 022.493039°W  d 1.84371e-09 meter (iteration 3)
    test 967 EquidistantExact: 26.51238°S, 009.967709°W, 71.16769°S, 056.513055°E  d 5.86065e-09 meter (iteration 3)
    test 968 EquidistantExact: 26.51238°S, 009.967709°W, 08.419922°S, 020.367765°E  d 9.78281e-09 meter (iteration 3)

    testKarney(pygeodesy.ellipsoidalExact, 24.06.11, datum='WGS84')
    test 969 distanceTo: 866455.4329
    test 970 coincident: 0.0
    test 971 toDatum: OSGB36
    test 972 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 973 isEllipsoidal: True
    test 974 copy: True
    test 975 isEllipsoidal: True
    test 976 isSpherical: False
    test 977 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalExact, 24.06.11, datum='WGS84')
    test 978 coincident: 0.0
    test 979 coincident: 0.0, 0.0, 0.0
    test 980 destination: 37.6528°S, 143.9265°E
    test 981 destination: True
    test 982 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 983 destination2: True
    test 984 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 985 distanceTo: 969954.166
    test 986 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 987 distanceTo2: 972708.16174, 11.22502
    test 988 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 989 destination: 58.64402°N, 003.07009°W
    test 990 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 991 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 992 distanceTo: 404607.806
    test 993 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 994 distanceTo2: 402574.597287, 157.726344
    test 995 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 996 destination: 48.857°N, 002.351°E
    test 997 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 998 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 999 distanceTo: 54973.295
    test 1000 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1001 distanceTo2: 54903.41209, 232.9209
    test 1002 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1003 destination: 37.6528°N, 143.9265°E
    test 1004 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1005 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1006 distanceToMP: 298396.057
    test 1007 distanceToSM: 185.415
    test 1008 distanceToMP: 111319.491
    test 1009 distanceToMP: 110574.389  FAILED, KNOWN, expected 110574.361
    test 1010 distanceToKW: 222638.982
    test 1011 distanceToKW: 111319.491
    test 1012 distanceTo3: 54972.271
    test 1013 distanceTo3: 306°52′05.37″
    test 1014 distanceTo3: 307°10′25.07″
    test 1015 distanceTo2: 54902.390
    test 1016 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalExact, 24.06.11, datum='WGS84')
    test 1017 distanceTo/antipodal (None): 19936288.579
    test 1018 distanceTo/VincentyError (None): 19944127.421
    test 1019 initialBearingTo/VincentyError (None): 15.556883
    test 1020 finalBearingTo/VincentyError (None): 164.442514
    test 1021 distanceTo/equatorial (None): 0.00  FAILED, KNOWN, expected 20003931.46
    test 1022 initialBearingTo/equatorial (None): 0.0
    test 1023 distanceTo/coincident (None): 111319.491
    test 1024 distanceTo/meridional (None): 9999551.606
    test 1025 initialBearingTo/meridional (None): 180.0
    test 1026 distanceTo/coincident (None): 0.0
    test 1027 initialBearingTo/coincident (None): 180.0
    test 1028 finalBearingTo/coincident (None): 180.0
    test 1029 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1030 distanceTo/anti-meridian (None): 10825924.1
    test 1031 distanceTo/quadrants (None): 4015703.02
    test 1032 distanceTo/quadrants (None): 4015703.02
    test 1033 distanceTo/quadrants (None): 4015703.02
    test 1034 distanceTo/quadrants (None): 4015703.02
    test 1035 distanceTo/quadrants (None): 4015703.02
    test 1036 distanceTo/quadrants (None): 4015703.02
    test 1037 distanceTo/quadrants (None): 4015703.02
    test 1038 distanceTo/quadrants (None): 4015703.02
    test 1039 distanceTo/quadrants (None): 4015703.02
    test 1040 distanceTo/quadrants (None): 4015703.02
    test 1041 distanceTo/quadrants (None): 4015703.02
    test 1042 distanceTo/quadrants (None): 4015703.02
    test 1043 distanceTo/quadrants (None): 4015703.02
    test 1044 distanceTo/quadrants (None): 4015703.02
    test 1045 distanceTo/quadrants (None): 4015703.02
    test 1046 distanceTo/quadrants (None): 4015703.02

    testKarney(pygeodesy.ellipsoidalExact, 24.06.11, datum='NAD83')
    test 1047 distanceTo: 866455.4329
    test 1048 coincident: 0.0
    test 1049 toDatum: OSGB36
    test 1050 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 1051 isEllipsoidal: True
    test 1052 copy: True
    test 1053 isEllipsoidal: True
    test 1054 isSpherical: False
    test 1055 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalExact, 24.06.11, datum='NAD83')
    test 1056 coincident: 0.0
    test 1057 coincident: 0.0, 0.0, 0.0
    test 1058 destination: 37.6528°S, 143.9265°E
    test 1059 destination: True
    test 1060 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1061 destination2: True
    test 1062 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1063 distanceTo: 969954.166
    test 1064 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1065 distanceTo2: 972708.16174, 11.22502
    test 1066 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1067 destination: 58.64402°N, 003.07009°W
    test 1068 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1069 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1070 distanceTo: 404607.806
    test 1071 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1072 distanceTo2: 402574.597287, 157.726344
    test 1073 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1074 destination: 48.857°N, 002.351°E
    test 1075 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1076 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1077 distanceTo: 54973.295
    test 1078 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1079 distanceTo2: 54903.41209, 232.9209
    test 1080 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1081 destination: 37.6528°N, 143.9265°E
    test 1082 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1083 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1084 distanceToMP: 298396.057
    test 1085 distanceToSM: 185.415
    test 1086 distanceToMP: 111319.491
    test 1087 distanceToMP: 110574.389  FAILED, KNOWN, expected 110574.361
    test 1088 distanceToKW: 222638.982
    test 1089 distanceToKW: 111319.491
    test 1090 distanceTo3: 54972.271
    test 1091 distanceTo3: 306°52′05.37″
    test 1092 distanceTo3: 307°10′25.07″
    test 1093 distanceTo2: 54902.390
    test 1094 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalExact, 24.06.11, datum='NAD83')
    test 1095 distanceTo/antipodal (None): 19936288.579
    test 1096 distanceTo/VincentyError (None): 19944127.421
    test 1097 initialBearingTo/VincentyError (None): 15.556883
    test 1098 finalBearingTo/VincentyError (None): 164.442514
    test 1099 distanceTo/equatorial (None): 0.00  FAILED, KNOWN, expected 20003931.46
    test 1100 initialBearingTo/equatorial (None): 0.0
    test 1101 distanceTo/coincident (None): 111319.491
    test 1102 distanceTo/meridional (None): 9999551.606
    test 1103 initialBearingTo/meridional (None): 180.0
    test 1104 distanceTo/coincident (None): 0.0
    test 1105 initialBearingTo/coincident (None): 180.0
    test 1106 finalBearingTo/coincident (None): 180.0
    test 1107 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1108 distanceTo/anti-meridian (None): 10825924.1
    test 1109 distanceTo/quadrants (None): 4015703.02
    test 1110 distanceTo/quadrants (None): 4015703.02
    test 1111 distanceTo/quadrants (None): 4015703.02
    test 1112 distanceTo/quadrants (None): 4015703.02
    test 1113 distanceTo/quadrants (None): 4015703.02
    test 1114 distanceTo/quadrants (None): 4015703.02
    test 1115 distanceTo/quadrants (None): 4015703.02
    test 1116 distanceTo/quadrants (None): 4015703.02
    test 1117 distanceTo/quadrants (None): 4015703.02
    test 1118 distanceTo/quadrants (None): 4015703.02
    test 1119 distanceTo/quadrants (None): 4015703.02
    test 1120 distanceTo/quadrants (None): 4015703.02
    test 1121 distanceTo/quadrants (None): 4015703.02
    test 1122 distanceTo/quadrants (None): 4015703.02
    test 1123 distanceTo/quadrants (None): 4015703.02
    test 1124 distanceTo/quadrants (None): 4015703.02

    testKarney_s(pygeodesy.ellipsoidalExact, 24.06.11)
    test 1125 .lat1: -41.320
    test 1126 .lon1: 174.810
    test 1127 .azi1: 161.067669986160
    test 1128 .lat2: 40.960
    test 1129 .lon2: -5.500
    test 1130 .azi2: 18.825195123248  FAILED, KNOWN, expected 18.825195123247
    test 1131 .s12: 19959679.267353817821  FAILED, KNOWN, expected 19959679.267353821546
    test 1132 distanceTo3: 19959679.267354, 161.067670, 18.825195
    test 1133 destination2: 40.96, -5.5, 18.825195123247
    test 1134 areaOf: 1.366270368e+13
    test 1135 perimeterOf: 1.683089136e+07
    test 1136 isclockwise: False
    test 1137 isclockwise: True
    test 1138 areaCO: 2.69154549884e+11
    test 1139 isclockwise: True
    test 1140 perimeterCO: 2099102.485159  FAILED, KNOWN, expected 2098430.887891

    144 of 1140 testEllipsoidal.py tests (12.6%) FAILED, incl. 118 KNOWN plus 26 DeprecationWarnings, 152 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 50.349 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testEllipsoidalGeodTest.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.ellipsoidalExact by testEllipsoidalGeodTest.py line 15
# lazily imported pygeodesy.ellipsoidalKarney by testEllipsoidalGeodTest.py line 15
# lazily imported pygeodesy.ellipsoidalVincenty by testEllipsoidalGeodTest.py line 15
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testEllipsoidalGeodTest.py line 15
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testEllipsoidalGeodTest.py line 15

    testing testEllipsoidalGeodTest.py 23.12.18 (module pygeodesy.ellipsoidalExact 24.06.11) isLazy=3
    test 1 line 1 lat: -48.164271
    test 2 line 1 lon: 5.762345
    test 3 line 1 fb: 175.334308
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
# lazily imported pygeodesy.elliptic by gxline.py line 288
    test 4 line 1 lat2: -48.164270779098
    test 5 line 1 lon2: 5.762344694676  FAILED, KNOWN, expected 5.762344694677
    test 6 line 1 azi2: 175.334308316285
    test 7 line 2 lat: -23.186513
    test 8 line 2 lon: 68.567247
    test 9 line 2 fb: 154.287114
    test 10 line 2 lat2: -23.186512533703
    test 11 line 2 lon2: 68.567247430960
    test 12 line 2 azi2: 154.287114123872
    test 13 line 3 lat: 53.997072
    test 14 line 3 lon: 44.520619
    test 15 line 3 fb: 52.159487
    test 16 line 3 lat2: 53.997072295385
    test 17 line 3 lon2: 44.520619105668
    test 18 line 3 azi2: 52.159486739948
    test 19 line 4 lat: -49.416672
    test 20 line 4 lon: 166.828083
    test 21 line 4 fb: 22.033031
    test 22 line 4 lat2: -49.416672064706
    test 23 line 4 lon2: 166.828083210689
    test 24 line 4 azi2: 22.033030848249
    test 25 line 5 lat: -60.405136
    test 26 line 5 lon: 110.581140
    test 27 line 5 fb: 75.518296
    test 28 line 5 lat2: -60.405136414530
    test 29 line 5 lon2: 110.581139538777
    test 30 line 5 azi2: 75.518295964649
    test 31 line 6 lat: -11.212600
    test 32 line 6 lon: 144.177077
    test 33 line 6 fb: 133.027766
    test 34 line 6 lat2: -11.212600121556
    test 35 line 6 lon2: 144.177076511360
    test 36 line 6 azi2: 133.027766301029
    test 37 line 7 lat: -6.529067
    test 38 line 7 lon: 2.895924
    test 39 line 7 fb: 178.740350
    test 40 line 7 lat2: -6.529066987956
    test 41 line 7 lon2: 2.895923948125
    test 42 line 7 azi2: 178.740350145954
    test 43 line 8 lat: -8.855512
    test 44 line 8 lon: 112.749196
    test 45 line 8 fb: 119.512004
    test 46 line 8 lat2: -8.855512357257
    test 47 line 8 lon2: 112.749196494485
    test 48 line 8 azi2: 119.512003891282
    test 49 line 9 lat: 29.866967
    test 50 line 9 lon: 171.726893
    test 51 line 9 fb: 171.662245
    test 52 line 9 lat2: 29.866967483293
    test 53 line 9 lon2: 171.726892560963
    test 54 line 9 azi2: 171.662244609397
    test 55 line 10 lat: -29.238404
    test 56 line 10 lon: 133.459814
    test 57 line 10 fb: 69.814124
    test 58 line 10 lat2: -29.238404337998
    test 59 line 10 lon2: 133.459813533284
    test 60 line 10 azi2: 69.814124320813
    test 61 line 11 lat: 55.600487
    test 62 line 11 lon: 75.128743
    test 63 line 11 fb: 153.896689
    test 64 line 11 lat2: 55.600487151982  FAILED, KNOWN, expected 55.600487151983
    test 65 line 11 lon2: 75.128743229496  FAILED, KNOWN, expected 75.128743229495
    test 66 line 11 azi2: 153.896688535572
    test 67 line 12 lat: -22.858435
    test 68 line 12 lon: 67.207513
    test 69 line 12 fb: 142.939529
    test 70 line 12 lat2: -22.858434825399
    test 71 line 12 lon2: 67.207513019332
    test 72 line 12 azi2: 142.939529056687
    test 73 line 13 lat: -32.634475
    test 74 line 13 lon: 22.238523
    test 75 line 13 fb: 172.112993
    test 76 line 13 lat2: -32.634475461067
    test 77 line 13 lon2: 22.238523021935
    test 78 line 13 azi2: 172.112992582333
    test 79 line 14 lat: 62.224985
    test 80 line 14 lon: 47.119133
    test 81 line 14 fb: 54.318105
    test 82 line 14 lat2: 62.224984867045
    test 83 line 14 lon2: 47.119133304525
    test 84 line 14 azi2: 54.318105291965
    test 85 line 15 lat: 33.069613
    test 86 line 15 lon: 5.796996
    test 87 line 15 fb: 17.403845
    test 88 line 15 lat2: 33.069613195450
    test 89 line 15 lon2: 5.796995960186
    test 90 line 15 azi2: 17.403844642346
    test 91 line 16 lat: 53.760900
    test 92 line 16 lon: 119.204306
    test 93 line 16 fb: 141.069793
    test 94 line 16 lat2: 53.760899500985
    test 95 line 16 lon2: 119.204305898518
    test 96 line 16 azi2: 141.069793254983
    test 97 line 17 lat: -3.225632
    test 98 line 17 lon: 103.742354
    test 99 line 17 fb: 127.880328
    test 100 line 17 lat2: -3.225632004245
    test 101 line 17 lon2: 103.742354347526
    test 102 line 17 azi2: 127.880328388524
    test 103 line 18 lat: 47.108712
    test 104 line 18 lon: 99.934107
    test 105 line 18 fb: 104.103491
    test 106 line 18 lat2: 47.108712008353
    test 107 line 18 lon2: 99.934107358386  FAILED, KNOWN, expected 99.934107358387
    test 108 line 18 azi2: 104.103491123038
    test 109 line 19 lat: 5.399363
    test 110 line 19 lon: 135.250064
    test 111 line 19 fb: 102.177018
    test 112 line 19 lat2: 5.399363208349
    test 113 line 19 lon2: 135.250063670790
    test 114 line 19 azi2: 102.177017677370
    test 115 line 20 lat: -58.669225
    test 116 line 20 lon: 54.875015
    test 117 line 20 fb: 131.345308
    test 118 line 20 lat2: -58.669224697403
    test 119 line 20 lon2: 54.875014559502
    test 120 line 20 azi2: 131.345308028428
    test 121 line 21 lat: 9.184229
    test 122 line 21 lon: 151.302637
    test 123 line 21 fb: 128.175105
    test 124 line 21 lat2: 9.184228666560
    test 125 line 21 lon2: 151.302636871911
    test 126 line 21 azi2: 128.175105446048
    test 127 line 22 lat: 53.467940
    test 128 line 22 lon: 67.724192
    test 129 line 22 fb: 78.863492
    test 130 line 22 lat2: 53.467939714247
    test 131 line 22 lon2: 67.724192258333
    test 132 line 22 azi2: 78.863492168727
    test 133 line 23 lat: 39.699456
    test 134 line 23 lon: 67.156325
    test 135 line 23 fb: 85.276830
    test 136 line 23 lat2: 39.699455912449
    test 137 line 23 lon2: 67.156324625647
    test 138 line 23 azi2: 85.276829539878
    test 139 line 24 lat: 70.942602
    test 140 line 24 lon: 17.379214
    test 141 line 24 fb: 21.869008
    test 142 line 24 lat2: 70.942602144324
    test 143 line 24 lon2: 17.379213644124
    test 144 line 24 azi2: 21.869008256312
    test 145 line 25 lat: 69.633349
    test 146 line 25 lon: 110.601933
    test 147 line 25 fb: 138.575193
    test 148 line 25 lat2: 69.633349004538
    test 149 line 25 lon2: 110.601933261211
    test 150 line 25 azi2: 138.575192608515  FAILED, KNOWN, expected 138.575192608514
    test 151 line 26 lat: 16.190815
    test 152 line 26 lon: 87.606993
    test 153 line 26 fb: 131.929410
    test 154 line 26 lat2: 16.190814826165
    test 155 line 26 lon2: 87.606993293114
    test 156 line 26 azi2: 131.929409507039
    test 157 line 27 lat: 54.774905
    test 158 line 27 lon: 52.952507
    test 159 line 27 fb: 85.904051
    test 160 line 27 lat2: 54.774904542264
    test 161 line 27 lon2: 52.952506835523
    test 162 line 27 azi2: 85.904050867676
    test 163 line 28 lat: -62.008569
    test 164 line 28 lon: 172.274877
    test 165 line 28 fb: 21.992601
    test 166 line 28 lat2: -62.008568677307
    test 167 line 28 lon2: 172.274876714260
    test 168 line 28 azi2: 21.992601380429
    test 169 line 29 lat: 27.303730
    test 170 line 29 lon: 159.184451
    test 171 line 29 fb: 150.697920
    test 172 line 29 lat2: 27.303729660018
    test 173 line 29 lon2: 159.184451093393
    test 174 line 29 azi2: 150.697920369703
    test 175 line 30 lat: 31.979897
    test 176 line 30 lon: 55.946759
    test 177 line 30 fb: 87.398293
    test 178 line 30 lat2: 31.979897342658
    test 179 line 30 lon2: 55.946758945497
    test 180 line 30 azi2: 87.398292964767
    test 181 line 31 lat: 49.991468
    test 182 line 31 lon: 133.962411
    test 183 line 31 fb: 142.016540
    test 184 line 31 lat2: 49.991467522545
    test 185 line 31 lon2: 133.962411191467
    test 186 line 31 azi2: 142.016540226251
    test 187 line 32 lat: 2.818559
    test 188 line 32 lon: 7.234774
    test 189 line 32 fb: 168.804029
    test 190 line 32 lat2: 2.818558842278
    test 191 line 32 lon2: 7.234774421859
    test 192 line 32 azi2: 168.804029404993
    test 193 line 33 lat: -38.118071
    test 194 line 33 lon: 93.395971
    test 195 line 33 fb: 117.017377
    test 196 line 33 lat2: -38.118070550305
    test 197 line 33 lon2: 93.395971367720
    test 198 line 33 azi2: 117.017376985228
    test 199 line 34 lat: 3.377824
    test 200 line 34 lon: 65.294746
    test 201 line 34 fb: 138.982544
    test 202 line 34 lat2: 3.377824468035
    test 203 line 34 lon2: 65.294745963255
    test 204 line 34 azi2: 138.982543784560
    test 205 line 35 lat: 4.631157
    test 206 line 35 lon: 84.335045
    test 207 line 35 fb: 132.120804
    test 208 line 35 lat2: 4.631157299024
    test 209 line 35 lon2: 84.335044694540
    test 210 line 35 azi2: 132.120804319474
    test 211 line 36 lat: 38.952215
    test 212 line 36 lon: 133.416463
    test 213 line 36 fb: 160.690586
    test 214 line 36 lat2: 38.952215219507
    test 215 line 36 lon2: 133.416463103113
    test 216 line 36 azi2: 160.690585690749
    test 217 line 37 lat: -39.013297
    test 218 line 37 lon: 160.302849
    test 219 line 37 fb: 115.363715
    test 220 line 37 lat2: -39.013296805131
    test 221 line 37 lon2: 160.302849365986
    test 222 line 37 azi2: 115.363714797610
    test 223 line 38 lat: -48.456093
    test 224 line 38 lon: 38.613822
    test 225 line 38 fb: 137.651668
    test 226 line 38 lat2: -48.456093143589
    test 227 line 38 lon2: 38.613821719886
    test 228 line 38 azi2: 137.651668464815
    test 229 line 39 lat: -13.861956
    test 230 line 39 lon: 74.250572
    test 231 line 39 fb: 143.968262
    test 232 line 39 lat2: -13.861956131519
    test 233 line 39 lon2: 74.250571564776
    test 234 line 39 azi2: 143.968262419705
    test 235 line 40 lat: 25.289202
    test 236 line 40 lon: 47.063579
    test 237 line 40 fb: 78.672533
    test 238 line 40 lat2: 25.289201968371
    test 239 line 40 lon2: 47.063578519727
    test 240 line 40 azi2: 78.672532588106
    test 241 line 41 lat: 49.498121
    test 242 line 41 lon: 131.993365
    test 243 line 41 fb: 157.425605
    test 244 line 41 lat2: 49.498121110507
    test 245 line 41 lon2: 131.993365399320
    test 246 line 41 azi2: 157.425605424890
    test 247 line 42 lat: -2.104242
    test 248 line 42 lon: 56.532079
    test 249 line 42 fb: 129.406955
    test 250 line 42 lat2: -2.104241718494
    test 251 line 42 lon2: 56.532079408825
    test 252 line 42 azi2: 129.406954892035
    test 253 line 43 lat: -39.997315
    test 254 line 43 lon: 49.004259
    test 255 line 43 fb: 135.432995
    test 256 line 43 lat2: -39.997315471629
    test 257 line 43 lon2: 49.004258662721
    test 258 line 43 azi2: 135.432994751523
    test 259 line 44 lat: 9.333272
    test 260 line 44 lon: 98.670857
    test 261 line 44 fb: 120.694280
    test 262 line 44 lat2: 9.333271992381
    test 263 line 44 lon2: 98.670857333200
    test 264 line 44 azi2: 120.694280236304
    test 265 line 45 lat: 38.653646
    test 266 line 45 lon: 136.060468
    test 267 line 45 fb: 152.489416
    test 268 line 45 lat2: 38.653646179484
    test 269 line 45 lon2: 136.060467518677
    test 270 line 45 azi2: 152.489415748331
    test 271 line 46 lat: -4.564995
    test 272 line 46 lon: 166.894968
    test 273 line 46 fb: 127.520036
    test 274 line 46 lat2: -4.564994956240
    test 275 line 46 lon2: 166.894968092836
    test 276 line 46 azi2: 127.520036113641
    test 277 line 47 lat: -38.522500
    test 278 line 47 lon: 178.679307
    test 279 line 47 fb: 176.468685
    test 280 line 47 lat2: -38.522500159620
    test 281 line 47 lon2: 178.679306959466
    test 282 line 47 azi2: 176.468684587438
    test 283 line 48 lat: 45.529796
    test 284 line 48 lon: 145.048738
    test 285 line 48 fb: 160.706227
    test 286 line 48 lat2: 45.529795503687  FAILED, KNOWN, expected 45.529795503688
    test 287 line 48 lon2: 145.048737846273
    test 288 line 48 azi2: 160.706226714169
    test 289 line 49 lat: -2.968925
    test 290 line 49 lon: 5.044083
    test 291 line 49 fb: 174.913528
    test 292 line 49 lat2: -2.968924563433
    test 293 line 49 lon2: 5.044082955485
    test 294 line 49 azi2: 174.913527615338
    test 295 line 50 lat: 1.618184
    test 296 line 50 lon: 163.262955
    test 297 line 50 fb: 161.097730
    test 298 line 50 lat2: 1.618184178387
    test 299 line 50 lon2: 163.262955108028
    test 300 line 50 azi2: 161.097729713868
    test 301 line 51 lat: 25.179740
    test 302 line 51 lon: 107.504992
    test 303 line 51 fb: 154.055552
    test 304 line 51 lat2: 25.179740339437
    test 305 line 51 lon2: 107.504991932892
    test 306 line 51 azi2: 154.055552232572
    test 307 line 52 lat: 57.391251
    test 308 line 52 lon: 89.082271
    test 309 line 52 fb: 101.276115
    test 310 line 52 lat2: 57.391251345244
    test 311 line 52 lon2: 89.082271206722
    test 312 line 52 azi2: 101.276114553753
    test 313 line 53 lat: -11.470673
    test 314 line 53 lon: 48.285095
    test 315 line 53 fb: 148.389696
    test 316 line 53 lat2: -11.470672507979
    test 317 line 53 lon2: 48.285094684225
    test 318 line 53 azi2: 148.389695684750
    test 319 line 54 lat: 27.356639
    test 320 line 54 lon: 84.391682
    test 321 line 54 fb: 104.661818
    test 322 line 54 lat2: 27.356639349123
    test 323 line 54 lon2: 84.391681754671
    test 324 line 54 azi2: 104.661818309238
    test 325 line 55 lat: -40.533598
    test 326 line 55 lon: 103.488381
    test 327 line 55 fb: 132.398259
    test 328 line 55 lat2: -40.533597900971
    test 329 line 55 lon2: 103.488381204009
    test 330 line 55 azi2: 132.398259207371
    test 331 line 56 lat: 52.337949
    test 332 line 56 lon: 149.908279
    test 333 line 56 fb: 162.333474
    test 334 line 56 lat2: 52.337949466457
    test 335 line 56 lon2: 149.908278798430
    test 336 line 56 azi2: 162.333474334205
    test 337 line 57 lat: -58.474076
    test 338 line 57 lon: 78.718606
    test 339 line 57 fb: 117.457565
    test 340 line 57 lat2: -58.474075605820
    test 341 line 57 lon2: 78.718605560533
    test 342 line 57 azi2: 117.457565115569
    test 343 line 58 lat: -35.840568
    test 344 line 58 lon: 4.157534
    test 345 line 58 fb: 174.451067
    test 346 line 58 lat2: -35.840568348239
    test 347 line 58 lon2: 4.157534199470
    test 348 line 58 azi2: 174.451066901814
    test 349 line 59 lat: 15.629163
    test 350 line 59 lon: 102.677417
    test 351 line 59 fb: 103.482103
    test 352 line 59 lat2: 15.629163409998
    test 353 line 59 lon2: 102.677417064290  FAILED, KNOWN, expected 102.677417064289
    test 354 line 59 azi2: 103.482102722183
    test 355 line 60 lat: -1.256180
    test 356 line 60 lon: 133.625255
    test 357 line 60 fb: 104.470489
    test 358 line 60 lat2: -1.256179633151
    test 359 line 60 lon2: 133.625254783633
    test 360 line 60 azi2: 104.470489013739
    test 361 line 61 lat: -40.558253
    test 362 line 61 lon: 112.897054
    test 363 line 61 fb: 90.226134
    test 364 line 61 lat2: -40.558252601871
    test 365 line 61 lon2: 112.897053867085
    test 366 line 61 azi2: 90.226134266467
    test 367 line 62 lat: 86.193596
    test 368 line 62 lon: 116.956880
    test 369 line 62 fb: 117.618329
    test 370 line 62 lat2: 86.193595821107
    test 371 line 62 lon2: 116.956880430711
    test 372 line 62 azi2: 117.618329340274
    test 373 line 63 lat: 6.874181
    test 374 line 63 lon: 54.891199
    test 375 line 63 fb: 90.820790
    test 376 line 63 lat2: 6.874181093562
    test 377 line 63 lon2: 54.891198619261
    test 378 line 63 azi2: 90.820789878786
    test 379 line 64 lat: -2.554657
    test 380 line 64 lon: 71.539549
    test 381 line 64 fb: 105.722921
    test 382 line 64 lat2: -2.554657243385
    test 383 line 64 lon2: 71.539549368441
    test 384 line 64 azi2: 105.722921401613
    test 385 line 65 lat: 1.329645
    test 386 line 65 lon: 138.134969
    test 387 line 65 fb: 150.465118
    test 388 line 65 lat2: 1.329645321136
    test 389 line 65 lon2: 138.134968538140
    test 390 line 65 azi2: 150.465118219879
    test 391 line 66 lat: -44.026427
    test 392 line 66 lon: 121.367591
    test 393 line 66 fb: 123.975227
    test 394 line 66 lat2: -44.026426573446
    test 395 line 66 lon2: 121.367591215510
    test 396 line 66 azi2: 123.975227063718
    test 397 line 67 lat: -3.399081
    test 398 line 67 lon: 138.655764
    test 399 line 67 fb: 98.994343
    test 400 line 67 lat2: -3.399080708673
    test 401 line 67 lon2: 138.655764270175
    test 402 line 67 azi2: 98.994343217447
    test 403 line 68 lat: -26.776985
    test 404 line 68 lon: 67.020055
    test 405 line 68 fb: 119.394665
    test 406 line 68 lat2: -26.776984673364
    test 407 line 68 lon2: 67.020054548341
    test 408 line 68 azi2: 119.394664651636
    test 409 line 69 lat: 52.057239
    test 410 line 69 lon: 151.887270
    test 411 line 69 fb: 161.537826
    test 412 line 69 lat2: 52.057239269050
    test 413 line 69 lon2: 151.887270484247
    test 414 line 69 azi2: 161.537826425477
    test 415 line 70 lat: 3.784724
    test 416 line 70 lon: 102.727745
    test 417 line 70 fb: 116.453155
    test 418 line 70 lat2: 3.784724165483
    test 419 line 70 lon2: 102.727744934481
    test 420 line 70 azi2: 116.453155405439
    test 421 line 71 lat: -40.409299
    test 422 line 71 lon: 86.033195
    test 423 line 71 fb: 121.080298
    test 424 line 71 lat2: -40.409298772797
    test 425 line 71 lon2: 86.033195335657
    test 426 line 71 azi2: 121.080297615268
    test 427 line 72 lat: 73.013460
    test 428 line 72 lon: 76.188125
    test 429 line 72 fb: 78.877769
    test 430 line 72 lat2: 73.013460186926
    test 431 line 72 lon2: 76.188125151657
    test 432 line 72 azi2: 78.877769459629
    test 433 line 73 lat: 52.870132
    test 434 line 73 lon: 51.020900
    test 435 line 73 fb: 102.113351
    test 436 line 73 lat2: 52.870131799667
    test 437 line 73 lon2: 51.020900069545
    test 438 line 73 azi2: 102.113351369331
    test 439 line 74 lat: 28.909632
    test 440 line 74 lon: 17.071526
    test 441 line 74 fb: 103.660711
    test 442 line 74 lat2: 28.909631785857
    test 443 line 74 lon2: 17.071526465331
    test 444 line 74 azi2: 103.660711362255
    test 445 line 75 lat: -58.257855
    test 446 line 75 lon: 15.812862
    test 447 line 75 fb: 169.606337
    test 448 line 75 lat2: -58.257854831091
    test 449 line 75 lon2: 15.812862089412
    test 450 line 75 azi2: 169.606337169070
    test 451 line 76 lat: -58.869445
    test 452 line 76 lon: 132.036795
    test 453 line 76 fb: 53.946549
    test 454 line 76 lat2: -58.869445004289
    test 455 line 76 lon2: 132.036794965086
    test 456 line 76 azi2: 53.946549037654
    test 457 line 77 lat: -45.547043
    test 458 line 77 lon: 77.540664
    test 459 line 77 fb: 126.917177
    test 460 line 77 lat2: -45.547042598505
    test 461 line 77 lon2: 77.540663933413
    test 462 line 77 azi2: 126.917177154676
    test 463 line 78 lat: 45.046385
    test 464 line 78 lon: 149.382429
    test 465 line 78 fb: 162.117474
    test 466 line 78 lat2: 45.046384823604
    test 467 line 78 lon2: 149.382428769460
    test 468 line 78 azi2: 162.117474447248
    test 469 line 79 lat: -74.853338
    test 470 line 79 lon: 96.072097
    test 471 line 79 fb: 85.425493
    test 472 line 79 lat2: -74.853338324199
    test 473 line 79 lon2: 96.072096720956  FAILED, KNOWN, expected 96.072096720955
    test 474 line 79 azi2: 85.425493305289
    test 475 line 80 lat: -13.205775
    test 476 line 80 lon: 57.532285
    test 477 line 80 fb: 122.358040
    test 478 line 80 lat2: -13.205775181752
    test 479 line 80 lon2: 57.532285422140
    test 480 line 80 azi2: 122.358040028964
    test 481 line 81 lat: -5.135864
    test 482 line 81 lon: 115.048833
    test 483 line 81 fb: 93.168400
    test 484 line 81 lat2: -5.135863872649
    test 485 line 81 lon2: 115.048832990097
    test 486 line 81 azi2: 93.168399576996
    test 487 line 82 lat: 13.355453
    test 488 line 82 lon: 19.253946
    test 489 line 82 fb: 143.568719
    test 490 line 82 lat2: 13.355452912310
    test 491 line 82 lon2: 19.253945880531
    test 492 line 82 azi2: 143.568718864193
    test 493 line 83 lat: 0.766426
    test 494 line 83 lon: 147.485817
    test 495 line 83 fb: 144.982274
    test 496 line 83 lat2: 0.766426443892
    test 497 line 83 lon2: 147.485816830606
    test 498 line 83 azi2: 144.982273873382
    test 499 line 84 lat: 10.228416
    test 500 line 84 lon: 159.204118
    test 501 line 84 fb: 173.111973
    test 502 line 84 lat2: 10.228416314659
    test 503 line 84 lon2: 159.204118025562
    test 504 line 84 azi2: 173.111973027488
    test 505 line 85 lat: 73.178089
    test 506 line 85 lon: 131.762700
    test 507 line 85 fb: 135.271161
    test 508 line 85 lat2: 73.178089048974
    test 509 line 85 lon2: 131.762699581941  FAILED, KNOWN, expected 131.762699581940
    test 510 line 85 azi2: 135.271161440271
    test 511 line 86 lat: -16.908717
    test 512 line 86 lon: 149.240494
    test 513 line 86 fb: 90.725082
    test 514 line 86 lat2: -16.908717231321
    test 515 line 86 lon2: 149.240493850337
    test 516 line 86 azi2: 90.725082091932
    test 517 line 87 lat: -23.440025
    test 518 line 87 lon: 98.819595
    test 519 line 87 fb: 154.388320
    test 520 line 87 lat2: -23.440025289757
    test 521 line 87 lon2: 98.819595131759
    test 522 line 87 azi2: 154.388319751570
    test 523 line 88 lat: -51.344465
    test 524 line 88 lon: 54.299399
    test 525 line 88 fb: 139.903236
    test 526 line 88 lat2: -51.344465279371
    test 527 line 88 lon2: 54.299399477396
    test 528 line 88 azi2: 139.903236261795
    test 529 line 89 lat: 33.922320
    test 530 line 89 lon: 143.463070
    test 531 line 89 fb: 132.788230
    test 532 line 89 lat2: 33.922319712554
    test 533 line 89 lon2: 143.463070326988
    test 534 line 89 azi2: 132.788229856713
    test 535 line 90 lat: -83.333068
    test 536 line 90 lon: 177.611925
    test 537 line 90 fb: 2.633769
    test 538 line 90 lat2: -83.333068057524
    test 539 line 90 lon2: 177.611924577958
    test 540 line 90 azi2: 2.633768744582
    test 541 line 91 lat: 20.587333
    test 542 line 91 lon: 164.201962
    test 543 line 91 fb: 166.991083
    test 544 line 91 lat2: 20.587333492522
    test 545 line 91 lon2: 164.201962479604
    test 546 line 91 azi2: 166.991083245940
    test 547 line 92 lat: 52.612815
    test 548 line 92 lon: 110.766184
    test 549 line 92 fb: 168.281486
    test 550 line 92 lat2: 52.612815386144
    test 551 line 92 lon2: 110.766184475279
    test 552 line 92 azi2: 168.281485715811
    test 553 line 93 lat: -41.681373
    test 554 line 93 lon: 82.150183
    test 555 line 93 fb: 107.012959
    test 556 line 93 lat2: -41.681372899642
    test 557 line 93 lon2: 82.150183233451
    test 558 line 93 azi2: 107.012959072514
    test 559 line 94 lat: 27.082807
    test 560 line 94 lon: 171.332531
    test 561 line 94 fb: 174.934340
    test 562 line 94 lat2: 27.082807052702
    test 563 line 94 lon2: 171.332530862401
    test 564 line 94 azi2: 174.934339881142
    test 565 line 95 lat: 57.992299
    test 566 line 95 lon: 15.128357
    test 567 line 95 fb: 62.342982
    test 568 line 95 lat2: 57.992299464191
    test 569 line 95 lon2: 15.128356773547
    test 570 line 95 azi2: 62.342982084737
    test 571 line 96 lat: -10.526000
    test 572 line 96 lon: 33.778702
    test 573 line 96 fb: 165.687804
    test 574 line 96 lat2: -10.526000344959
    test 575 line 96 lon2: 33.778701722506
    test 576 line 96 azi2: 165.687803859941
    test 577 line 97 lat: 25.802395
    test 578 line 97 lon: 98.502531
    test 579 line 97 fb: 97.837271
    test 580 line 97 lat2: 25.802394934787
    test 581 line 97 lon2: 98.502531199301
    test 582 line 97 azi2: 97.837270592496
    test 583 line 98 lat: 47.163255
    test 584 line 98 lon: 156.720176
    test 585 line 98 fb: 160.291022
    test 586 line 98 lat2: 47.163255465769
    test 587 line 98 lon2: 156.720176105542
    test 588 line 98 azi2: 160.291021678921
    test 589 line 99 lat: 47.932063
    test 590 line 99 lon: 35.094714
    test 591 line 99 fb: 137.545065
    test 592 line 99 lat2: 47.932062978964
    test 593 line 99 lon2: 35.094714092217
    test 594 line 99 azi2: 137.545065115425
    test 595 line 100 lat: -60.204340
    test 596 line 100 lon: 117.726218
    test 597 line 100 fb: 72.585011
    test 598 line 100 lat2: -60.204339807984
    test 599 line 100 lon2: 117.726217548610
    test 600 line 100 azi2: 72.585010656772
    test 601 line 101 lat: 35.247411
    test 602 line 101 lon: 59.471562
    test 603 line 101 fb: 81.179468
    test 604 line 101 lat2: 35.247410984329
    test 605 line 101 lon2: 59.471562388985
    test 606 line 101 azi2: 81.179468094302
    test 607 line 102 lat: 19.218268
    test 608 line 102 lon: 165.507915
    test 609 line 102 fb: 167.452074
    test 610 line 102 lat2: 19.218268047706
    test 611 line 102 lon2: 165.507915017643
    test 612 line 102 azi2: 167.452074301867
    test 613 line 103 lat: 55.428809
    test 614 line 103 lon: 121.956541
    test 615 line 103 fb: 154.501481
    test 616 line 103 lat2: 55.428809300888
    test 617 line 103 lon2: 121.956541206929
    test 618 line 103 azi2: 154.501481394521
    test 619 line 104 lat: 49.294374
    test 620 line 104 lon: 119.661420
    test 621 line 104 fb: 157.209489
    test 622 line 104 lat2: 49.294374468687
    test 623 line 104 lon2: 119.661419832789
    test 624 line 104 azi2: 157.209488754087
    test 625 line 105 lat: -32.534872
    test 626 line 105 lon: 152.280610
    test 627 line 105 fb: 45.281812
    test 628 line 105 lat2: -32.534872085863
    test 629 line 105 lon2: 152.280609797481
    test 630 line 105 azi2: 45.281812386148
    test 631 line 106 lat: -1.097899
    test 632 line 106 lon: 104.697360
    test 633 line 106 fb: 126.298489
    test 634 line 106 lat2: -1.097899218947
    test 635 line 106 lon2: 104.697359959629
    test 636 line 106 azi2: 126.298488917783
    test 637 line 107 lat: -18.034366
    test 638 line 107 lon: 28.460388
    test 639 line 107 fb: 129.520364
    test 640 line 107 lat2: -18.034366293950
    test 641 line 107 lon2: 28.460387638999
    test 642 line 107 azi2: 129.520363751001
    test 643 line 108 lat: 76.310833
    test 644 line 108 lon: 80.110525
    test 645 line 108 fb: 106.655922
    test 646 line 108 lat2: 76.310832995825
    test 647 line 108 lon2: 80.110524683625
    test 648 line 108 azi2: 106.655921818336
    test 649 line 109 lat: 39.838034
    test 650 line 109 lon: 42.989610
    test 651 line 109 fb: 69.695281
    test 652 line 109 lat2: 39.838033717901
    test 653 line 109 lon2: 42.989610477861
    test 654 line 109 azi2: 69.695281464222
    test 655 line 110 lat: -56.710166
    test 656 line 110 lon: 125.242287
    test 657 line 110 fb: 60.118756
    test 658 line 110 lat2: -56.710165877845
    test 659 line 110 lon2: 125.242287231675
    test 660 line 110 azi2: 60.118756013168
    test 661 line 111 lat: 55.796062
    test 662 line 111 lon: 59.736599
    test 663 line 111 fb: 73.536728
    test 664 line 111 lat2: 55.796061639165
    test 665 line 111 lon2: 59.736598787303
    test 666 line 111 azi2: 73.536727826063
    test 667 line 112 lat: -36.553675
    test 668 line 112 lon: 38.656806
    test 669 line 112 fb: 134.414837
    test 670 line 112 lat2: -36.553675319553
    test 671 line 112 lon2: 38.656806212281
    test 672 line 112 azi2: 134.414836606696
    test 673 line 113 lat: -36.798456
    test 674 line 113 lon: 163.588375
    test 675 line 113 fb: 147.324204
    test 676 line 113 lat2: -36.798455994877
    test 677 line 113 lon2: 163.588375017283
    test 678 line 113 azi2: 147.324204021436
    test 679 line 114 lat: -15.952937
    test 680 line 114 lon: 55.126807
    test 681 line 114 fb: 134.743426
    test 682 line 114 lat2: -15.952937085211
    test 683 line 114 lon2: 55.126807113658
    test 684 line 114 azi2: 134.743426025963
    test 685 line 115 lat: -34.573087
    test 686 line 115 lon: 69.304064
    test 687 line 115 fb: 111.515973
    test 688 line 115 lat2: -34.573086586710
    test 689 line 115 lon2: 69.304064202466
    test 690 line 115 azi2: 111.515973223076
    test 691 line 116 lat: 26.643499
    test 692 line 116 lon: 1.500481
    test 693 line 116 fb: 7.958966
    test 694 line 116 lat2: 26.643498959841
    test 695 line 116 lon2: 1.500480924882
    test 696 line 116 azi2: 7.958966071178
    test 697 line 117 lat: 60.891878
    test 698 line 117 lon: 91.543410
    test 699 line 117 fb: 92.273095
    test 700 line 117 lat2: 60.891878271763
    test 701 line 117 lon2: 91.543409983653
    test 702 line 117 azi2: 92.273095036246
    test 703 line 118 lat: 64.148187
    test 704 line 118 lon: 136.552579
    test 705 line 118 fb: 147.193229
    test 706 line 118 lat2: 64.148186913822
    test 707 line 118 lon2: 136.552579389353
    test 708 line 118 azi2: 147.193228706030
    test 709 line 119 lat: 62.311678
    test 710 line 119 lon: 39.238630
    test 711 line 119 fb: 53.785893
    test 712 line 119 lat2: 62.311677748693
    test 713 line 119 lon2: 39.238629619778
    test 714 line 119 azi2: 53.785893324444
    test 715 line 120 lat: 27.239733
    test 716 line 120 lon: 136.649227
    test 717 line 120 fb: 162.935700
    test 718 line 120 lat2: 27.239733033115
    test 719 line 120 lon2: 136.649227320518
    test 720 line 120 azi2: 162.935700444146
    test 721 line 121 lat: 6.562844
    test 722 line 121 lon: 170.159007
    test 723 line 121 fb: 174.851345
    test 724 line 121 lat2: 6.562844367534
    test 725 line 121 lon2: 170.159007094343
    test 726 line 121 azi2: 174.851345174583
    test 727 line 122 lat: -29.537259
    test 728 line 122 lon: 105.350044
    test 729 line 122 fb: 141.393876
    test 730 line 122 lat2: -29.537259231420
    test 731 line 122 lon2: 105.350044044462
    test 732 line 122 azi2: 141.393876478962
    test 733 line 123 lat: -66.447700
    test 734 line 123 lon: 83.741961
    test 735 line 123 fb: 129.422490
    test 736 line 123 lat2: -66.447699831143
    test 737 line 123 lon2: 83.741960628420
    test 738 line 123 azi2: 129.422490051758
    test 739 line 124 lat: 56.926818
    test 740 line 124 lon: 20.197117
    test 741 line 124 fb: 37.960006
    test 742 line 124 lat2: 56.926817599968
    test 743 line 124 lon2: 20.197117058896
    test 744 line 124 azi2: 37.960006049295
    test 745 line 125 lat: 55.018266
    test 746 line 125 lon: 83.735441
    test 747 line 125 fb: 130.766515
    test 748 line 125 lat2: 55.018265995959
    test 749 line 125 lon2: 83.735441278691
    test 750 line 125 azi2: 130.766514657995
    test 751 line 126 lat: -78.131054
    test 752 line 126 lon: 56.098176
    test 753 line 126 fb: 127.132203
    test 754 line 126 lat2: -78.131053729786
    test 755 line 126 lon2: 56.098176359327  FAILED, KNOWN, expected 56.098176359326
    test 756 line 126 azi2: 127.132203471256  FAILED, KNOWN, expected 127.132203471257
    test 757 line 127 lat: -18.223027
    test 758 line 127 lon: 86.221345
    test 759 line 127 fb: 114.875019
    test 760 line 127 lat2: -18.223027345294
    test 761 line 127 lon2: 86.221345156045
    test 762 line 127 azi2: 114.875019395396
    test 763 line 128 lat: -16.100413
    test 764 line 128 lon: 54.195260
    test 765 line 128 fb: 126.748474
    test 766 line 128 lat2: -16.100412777565
    test 767 line 128 lon2: 54.195259657284
    test 768 line 128 azi2: 126.748473963924
    test 769 line 129 lat: -15.192944
    test 770 line 129 lon: 85.057605
    test 771 line 129 fb: 133.468781
    test 772 line 129 lat2: -15.192944143354
    test 773 line 129 lon2: 85.057605312625
    test 774 line 129 azi2: 133.468780913302
    test 775 line 130 lat: -1.279757
    test 776 line 130 lon: 93.430943
    test 777 line 130 fb: 128.545662
    test 778 line 130 lat2: -1.279756550061
    test 779 line 130 lon2: 93.430943123745
    test 780 line 130 azi2: 128.545661704820
    test 781 line 131 lat: -29.465713
    test 782 line 131 lon: 79.050046
    test 783 line 131 fb: 109.482097
    test 784 line 131 lat2: -29.465712645249
    test 785 line 131 lon2: 79.050045796725
    test 786 line 131 azi2: 109.482097420926
    test 787 line 132 lat: 31.819596
    test 788 line 132 lon: 88.251997
    test 789 line 132 fb: 91.173935
    test 790 line 132 lat2: 31.819596255581
    test 791 line 132 lon2: 88.251997328019
    test 792 line 132 azi2: 91.173935030538
    test 793 line 133 lat: -63.260477
    test 794 line 133 lon: 96.535465
    test 795 line 133 fb: 84.208873
    test 796 line 133 lat2: -63.260477387265
    test 797 line 133 lon2: 96.535465277415
    test 798 line 133 azi2: 84.208873088521
    test 799 line 134 lat: 12.908849
    test 800 line 134 lon: 116.734308
    test 801 line 134 fb: 110.313866
    test 802 line 134 lat2: 12.908849199388
    test 803 line 134 lon2: 116.734308245854
    test 804 line 134 azi2: 110.313865884978
    test 805 line 135 lat: -73.345839
    test 806 line 135 lon: 99.753937
    test 807 line 135 fb: 89.074642
    test 808 line 135 lat2: -73.345839080078
    test 809 line 135 lon2: 99.753937450114
    test 810 line 135 azi2: 89.074641755279
    test 811 line 136 lat: -58.777033
    test 812 line 136 lon: 161.963990
    test 813 line 136 fb: 21.998889
    test 814 line 136 lat2: -58.777033293076
    test 815 line 136 lon2: 161.963989905489
    test 816 line 136 azi2: 21.998888971548
    test 817 line 137 lat: 5.093069
    test 818 line 137 lon: 53.687921
    test 819 line 137 fb: 124.015842
    test 820 line 137 lat2: 5.093068996651
    test 821 line 137 lon2: 53.687921438754
    test 822 line 137 azi2: 124.015842231205
    test 823 line 138 lat: 35.659489
    test 824 line 138 lon: 111.729315
    test 825 line 138 fb: 133.697281
    test 826 line 138 lat2: 35.659488664161
    test 827 line 138 lon2: 111.729315023485
    test 828 line 138 azi2: 133.697281357224
    test 829 line 139 lat: -24.330784
    test 830 line 139 lon: 71.666568
    test 831 line 139 fb: 106.278062
    test 832 line 139 lat2: -24.330783755994
    test 833 line 139 lon2: 71.666567863170
    test 834 line 139 azi2: 106.278062394907
    test 835 line 140 lat: -46.218742
    test 836 line 140 lon: 91.580078
    test 837 line 140 fb: 106.279111
    test 838 line 140 lat2: -46.218742288678
    test 839 line 140 lon2: 91.580077788700
    test 840 line 140 azi2: 106.279110700398
    test 841 line 141 lat: 50.143353
    test 842 line 141 lon: 101.322503
    test 843 line 141 fb: 154.314496
    test 844 line 141 lat2: 50.143352562968
    test 845 line 141 lon2: 101.322502529615
    test 846 line 141 azi2: 154.314496467352
    test 847 line 142 lat: -16.604376
    test 848 line 142 lon: 134.279201
    test 849 line 142 fb: 106.895990
    test 850 line 142 lat2: -16.604375537699
    test 851 line 142 lon2: 134.279201209117
    test 852 line 142 azi2: 106.895989785632
    test 853 line 143 lat: 54.031290
    test 854 line 143 lon: 144.862702
    test 855 line 143 fb: 152.937010
    test 856 line 143 lat2: 54.031289901242
    test 857 line 143 lon2: 144.862701667601
    test 858 line 143 azi2: 152.937009701639
    test 859 line 144 lat: 0.616911
    test 860 line 144 lon: 110.974662
    test 861 line 144 fb: 115.206118
    test 862 line 144 lat2: 0.616910921892
    test 863 line 144 lon2: 110.974662272005
    test 864 line 144 azi2: 115.206118431862
    test 865 line 145 lat: -6.243779
    test 866 line 145 lon: 175.658895
    test 867 line 145 fb: 177.520147
    test 868 line 145 lat2: -6.243779047728
    test 869 line 145 lon2: 175.658894820006
    test 870 line 145 azi2: 177.520147377315
    test 871 line 146 lat: -70.416699
    test 872 line 146 lon: 169.642468
    test 873 line 146 fb: 11.978943
    test 874 line 146 lat2: -70.416698815769
    test 875 line 146 lon2: 169.642468357274
    test 876 line 146 azi2: 11.978943348082
    test 877 line 147 lat: 19.558617
    test 878 line 147 lon: 88.645709
    test 879 line 147 fb: 113.578814
    test 880 line 147 lat2: 19.558616692495
    test 881 line 147 lon2: 88.645708539223
    test 882 line 147 azi2: 113.578814362497
    test 883 line 148 lat: -23.555114
    test 884 line 148 lon: 162.457529
    test 885 line 148 fb: 147.104331
    test 886 line 148 lat2: -23.555114207892
    test 887 line 148 lon2: 162.457529431664
    test 888 line 148 azi2: 147.104330772141
    test 889 line 149 lat: -51.275738
    test 890 line 149 lon: 103.747943
    test 891 line 149 fb: 115.235374
    test 892 line 149 lat2: -51.275737933996
    test 893 line 149 lon2: 103.747943009536
    test 894 line 149 azi2: 115.235373813929
    test 895 line 150 lat: 25.374602
    test 896 line 150 lon: 143.135783
    test 897 line 150 fb: 126.548735
    test 898 line 150 lat2: 25.374601552526
    test 899 line 150 lon2: 143.135783283239
    test 900 line 150 azi2: 126.548735117003
    test 901 line 151 lat: 23.967825
    test 902 line 151 lon: 153.611116
    test 903 line 151 fb: 149.714116
    test 904 line 151 lat2: 23.967824782385
    test 905 line 151 lon2: 153.611115762587
    test 906 line 151 azi2: 149.714116426025
    test 907 line 152 lat: -22.787507
    test 908 line 152 lon: 111.258647
    test 909 line 152 fb: 86.335100
    test 910 line 152 lat2: -22.787506689568
    test 911 line 152 lon2: 111.258646767306
    test 912 line 152 azi2: 86.335099650483
    test 913 line 153 lat: -59.789842
    test 914 line 153 lon: 114.054983
    test 915 line 153 fb: 75.612605
    test 916 line 153 lat2: -59.789841532294
    test 917 line 153 lon2: 114.054983422255
    test 918 line 153 azi2: 75.612605242726
    test 919 line 154 lat: -2.802505
    test 920 line 154 lon: 126.245955
    test 921 line 154 fb: 150.100576
    test 922 line 154 lat2: -2.802505438545
    test 923 line 154 lon2: 126.245955176418
    test 924 line 154 azi2: 150.100575968176
    test 925 line 155 lat: 35.735653
    test 926 line 155 lon: 102.768725
    test 927 line 155 fb: 99.024702
    test 928 line 155 lat2: 35.735653026165
    test 929 line 155 lon2: 102.768725495110
    test 930 line 155 azi2: 99.024701978369
    test 931 line 156 lat: 15.906682
    test 932 line 156 lon: 117.446654
    test 933 line 156 fb: 130.449965
    test 934 line 156 lat2: 15.906681603252
    test 935 line 156 lon2: 117.446653873860
    test 936 line 156 azi2: 130.449965412147
    test 937 line 157 lat: -54.375988
    test 938 line 157 lon: 33.243363
    test 939 line 157 fb: 144.361175
    test 940 line 157 lat2: -54.375987804166
    test 941 line 157 lon2: 33.243362594038
    test 942 line 157 azi2: 144.361175098783
    test 943 line 158 lat: 3.588251
    test 944 line 158 lon: 156.659583
    test 945 line 158 fb: 112.153293
    test 946 line 158 lat2: 3.588250783960
    test 947 line 158 lon2: 156.659583234995
    test 948 line 158 azi2: 112.153293017228
    test 949 line 159 lat: -51.719977
    test 950 line 159 lon: 134.141061
    test 951 line 159 fb: 129.170451
    test 952 line 159 lat2: -51.719977004790
    test 953 line 159 lon2: 134.141060992499
    test 954 line 159 azi2: 129.170451102958
    test 955 line 160 lat: 22.935153
    test 956 line 160 lon: 109.461291
    test 957 line 160 fb: 120.676556
    test 958 line 160 lat2: 22.935153219965
    test 959 line 160 lon2: 109.461291078917
    test 960 line 160 azi2: 120.676555897336
    test 961 line 161 lat: -5.314690
    test 962 line 161 lon: 70.995225
    test 963 line 161 fb: 129.681273
    test 964 line 161 lat2: -5.314689990173
    test 965 line 161 lon2: 70.995224692450
    test 966 line 161 azi2: 129.681272635794
    test 967 line 162 lat: 49.147134
    test 968 line 162 lon: 16.182514
    test 969 line 162 fb: 38.926644
    test 970 line 162 lat2: 49.147133873971
    test 971 line 162 lon2: 16.182514450690
    test 972 line 162 azi2: 38.926644196248
    test 973 line 163 lat: -55.079363
    test 974 line 163 lon: 93.170898
    test 975 line 163 fb: 97.017492
    test 976 line 163 lat2: -55.079363368717
    test 977 line 163 lon2: 93.170898482121
    test 978 line 163 azi2: 97.017491592293
    test 979 line 164 lat: 26.410771
    test 980 line 164 lon: 109.934003
    test 981 line 164 fb: 103.660846
    test 982 line 164 lat2: 26.410770923895
    test 983 line 164 lon2: 109.934003168641
    test 984 line 164 azi2: 103.660846029906
    test 985 line 165 lat: -2.539670
    test 986 line 165 lon: 138.682325
    test 987 line 165 fb: 100.016568
    test 988 line 165 lat2: -2.539669792389
    test 989 line 165 lon2: 138.682325493918
    test 990 line 165 azi2: 100.016568432752
    test 991 line 166 lat: 10.563299
    test 992 line 166 lon: 50.532119
    test 993 line 166 fb: 126.356066
    test 994 line 166 lat2: 10.563299452649
    test 995 line 166 lon2: 50.532119480076
    test 996 line 166 azi2: 126.356065708364
    test 997 line 167 lat: 51.443871
    test 998 line 167 lon: 88.799162
    test 999 line 167 fb: 145.239198
    test 1000 line 167 lat2: 51.443871023711
    test 1001 line 167 lon2: 88.799161779253
    test 1002 line 167 azi2: 145.239198135633
    test 1003 line 168 lat: -80.240756
    test 1004 line 168 lon: 170.591261
    test 1005 line 168 fb: 19.402427
    test 1006 line 168 lat2: -80.240756380896
    test 1007 line 168 lon2: 170.591260542730
    test 1008 line 168 azi2: 19.402427357239
    test 1009 line 169 lat: 51.976040
    test 1010 line 169 lon: 165.045244
    test 1011 line 169 fb: 167.962110
    test 1012 line 169 lat2: 51.976039799074
    test 1013 line 169 lon2: 165.045244285456
    test 1014 line 169 azi2: 167.962110268433
    test 1015 line 170 lat: 29.365655
    test 1016 line 170 lon: 91.354349
    test 1017 line 170 fb: 135.101279
    test 1018 line 170 lat2: 29.365654873524
    test 1019 line 170 lon2: 91.354349089561
    test 1020 line 170 azi2: 135.101278715212
    test 1021 line 171 lat: 61.745486
    test 1022 line 171 lon: 142.333199
    test 1023 line 171 fb: 139.666209
    test 1024 line 171 lat2: 61.745485817368
    test 1025 line 171 lon2: 142.333198773096
    test 1026 line 171 azi2: 139.666208757008
    test 1027 line 172 lat: 13.414523
    test 1028 line 172 lon: 39.322993
    test 1029 line 172 fb: 144.276516
    test 1030 line 172 lat2: 13.414522997032
    test 1031 line 172 lon2: 39.322992706733
    test 1032 line 172 azi2: 144.276515542083
    test 1033 line 173 lat: -49.831353
    test 1034 line 173 lon: 72.426738
    test 1035 line 173 fb: 126.251620
    test 1036 line 173 lat2: -49.831353332108
    test 1037 line 173 lon2: 72.426737728887
    test 1038 line 173 azi2: 126.251620412456
    test 1039 line 174 lat: 1.822589
    test 1040 line 174 lon: 53.589208
    test 1041 line 174 fb: 97.925176
    test 1042 line 174 lat2: 1.822589208021
    test 1043 line 174 lon2: 53.589207810481
    test 1044 line 174 azi2: 97.925176229124
    test 1045 line 175 lat: -7.987194
    test 1046 line 175 lon: 49.318809
    test 1047 line 175 fb: 128.386595
    test 1048 line 175 lat2: -7.987193900849
    test 1049 line 175 lon2: 49.318809304076
    test 1050 line 175 azi2: 128.386594768748
    test 1051 line 176 lat: -56.807375
    test 1052 line 176 lon: 4.521802
    test 1053 line 176 fb: 176.806063
    test 1054 line 176 lat2: -56.807375049864
    test 1055 line 176 lon2: 4.521801986353
    test 1056 line 176 azi2: 176.806062785470
    test 1057 line 177 lat: -25.969834
    test 1058 line 177 lon: 64.903749
    test 1059 line 177 fb: 124.103844
    test 1060 line 177 lat2: -25.969833883721
    test 1061 line 177 lon2: 64.903749477059
    test 1062 line 177 azi2: 124.103844353942
    test 1063 line 178 lat: 32.807360
    test 1064 line 178 lon: 65.107962
    test 1065 line 178 fb: 124.577990
    test 1066 line 178 lat2: 32.807359742667
    test 1067 line 178 lon2: 65.107961864983
    test 1068 line 178 azi2: 124.577990419073
    test 1069 line 179 lat: -21.552138
    test 1070 line 179 lon: 102.466022
    test 1071 line 179 fb: 109.640197
    test 1072 line 179 lat2: -21.552137872353
    test 1073 line 179 lon2: 102.466021945025
    test 1074 line 179 azi2: 109.640197455958
    test 1075 line 180 lat: -26.271741
    test 1076 line 180 lon: 158.321581
    test 1077 line 180 fb: 165.993649
    test 1078 line 180 lat2: -26.271741383677
    test 1079 line 180 lon2: 158.321581345077
    test 1080 line 180 azi2: 165.993649158305
    test 1081 line 181 lat: 41.023069
    test 1082 line 181 lon: 155.562542
    test 1083 line 181 fb: 153.407414
    test 1084 line 181 lat2: 41.023069113496
    test 1085 line 181 lon2: 155.562542134179
    test 1086 line 181 azi2: 153.407413608014
    test 1087 line 182 lat: 16.445471
    test 1088 line 182 lon: 165.261461
    test 1089 line 182 fb: 165.424806
    test 1090 line 182 lat2: 16.445470954340
    test 1091 line 182 lon2: 165.261461448873
    test 1092 line 182 azi2: 165.424806257119
    test 1093 line 183 lat: -3.222107
    test 1094 line 183 lon: 84.129727
    test 1095 line 183 fb: 154.083851
    test 1096 line 183 lat2: -3.222107095788
    test 1097 line 183 lon2: 84.129726900596
    test 1098 line 183 azi2: 154.083851495688
    test 1099 line 184 lat: 7.811710
    test 1100 line 184 lon: 123.143308
    test 1101 line 184 fb: 123.998106
    test 1102 line 184 lat2: 7.811709739638
    test 1103 line 184 lon2: 123.143308309660
    test 1104 line 184 azi2: 123.998105582525
    test 1105 line 185 lat: -45.235922
    test 1106 line 185 lon: 129.419283
    test 1107 line 185 fb: 91.493406
    test 1108 line 185 lat2: -45.235922276879
    test 1109 line 185 lon2: 129.419282696458
    test 1110 line 185 azi2: 91.493405946969  FAILED, KNOWN, expected 91.493405946970
    test 1111 line 186 lat: -43.047563
    test 1112 line 186 lon: 121.565541
    test 1113 line 186 fb: 99.850543
    test 1114 line 186 lat2: -43.047563118772
    test 1115 line 186 lon2: 121.565540573788
    test 1116 line 186 azi2: 99.850542926816
    test 1117 line 187 lat: -22.881002
    test 1118 line 187 lon: 159.765030
    test 1119 line 187 fb: 60.474878
    test 1120 line 187 lat2: -22.881001889671
    test 1121 line 187 lon2: 159.765030106650
    test 1122 line 187 azi2: 60.474878214384
    test 1123 line 188 lat: -15.011946
    test 1124 line 188 lon: 55.594746
    test 1125 line 188 fb: 121.838839
    test 1126 line 188 lat2: -15.011946251300
    test 1127 line 188 lon2: 55.594746074667
    test 1128 line 188 azi2: 121.838839080255
    test 1129 line 189 lat: -29.011142
    test 1130 line 189 lon: 0.856639
    test 1131 line 189 fb: 178.744943
    test 1132 line 189 lat2: -29.011142183887
    test 1133 line 189 lon2: 0.856639457160
    test 1134 line 189 azi2: 178.744943180805
    test 1135 line 190 lat: -0.353001
    test 1136 line 190 lon: 48.401255
    test 1137 line 190 fb: 95.612551
    test 1138 line 190 lat2: -0.353000909367
    test 1139 line 190 lon2: 48.401254652487
    test 1140 line 190 azi2: 95.612551044908
    test 1141 line 191 lat: 18.843341
    test 1142 line 191 lon: 105.405456
    test 1143 line 191 fb: 145.215722
    test 1144 line 191 lat2: 18.843340962664
    test 1145 line 191 lon2: 105.405456105476
    test 1146 line 191 azi2: 145.215722323742
    test 1147 line 192 lat: 19.672225
    test 1148 line 192 lon: 64.132980
    test 1149 line 192 fb: 131.894863
    test 1150 line 192 lat2: 19.672224913225
    test 1151 line 192 lon2: 64.132979510420
    test 1152 line 192 azi2: 131.894863434272
    test 1153 line 193 lat: -44.315074
    test 1154 line 193 lon: 132.711860
    test 1155 line 193 fb: 57.236875
    test 1156 line 193 lat2: -44.315073617889
    test 1157 line 193 lon2: 132.711860436437
    test 1158 line 193 azi2: 57.236875169148
    test 1159 line 194 lat: 71.956294
    test 1160 line 194 lon: 23.707587
    test 1161 line 194 fb: 28.235947
    test 1162 line 194 lat2: 71.956293555096
    test 1163 line 194 lon2: 23.707587498943
    test 1164 line 194 azi2: 28.235946630177
    test 1165 line 195 lat: -1.372652
    test 1166 line 195 lon: 37.704231
    test 1167 line 195 fb: 92.737862
    test 1168 line 195 lat2: -1.372652195171
    test 1169 line 195 lon2: 37.704230798676
    test 1170 line 195 azi2: 92.737862264368
    test 1171 line 196 lat: 32.377148
    test 1172 line 196 lon: 148.638709
    test 1173 line 196 fb: 164.415210
    test 1174 line 196 lat2: 32.377147634362
    test 1175 line 196 lon2: 148.638709383249
    test 1176 line 196 azi2: 164.415210005459
    test 1177 line 197 lat: 77.876832
    test 1178 line 197 lon: 86.074591
    test 1179 line 197 fb: 93.017705
    test 1180 line 197 lat2: 77.876831887051
    test 1181 line 197 lon2: 86.074590642864
    test 1182 line 197 azi2: 93.017704501543
    test 1183 line 198 lat: -7.405195
    test 1184 line 198 lon: 11.962469
    test 1185 line 198 fb: 123.788484
    test 1186 line 198 lat2: -7.405194804958
    test 1187 line 198 lon2: 11.962468510681
    test 1188 line 198 azi2: 123.788484407208
    test 1189 line 199 lat: -75.001311
    test 1190 line 199 lon: 173.334144
    test 1191 line 199 fb: 8.916523
    test 1192 line 199 lat2: -75.001310556015
    test 1193 line 199 lon2: 173.334144385512
    test 1194 line 199 azi2: 8.916523271572
    test 1195 line 200 lat: -33.145967
    test 1196 line 200 lon: 32.349241
    test 1197 line 200 fb: 154.035798
    test 1198 line 200 lat2: -33.145966631435
    test 1199 line 200 lon2: 32.349240627001
    test 1200 line 200 azi2: 154.035798269631
    test 1201 line 201 lat: 32.938605
    test 1202 line 201 lon: 98.042857
    test 1203 line 201 fb: 124.954750
    test 1204 line 201 lat2: 32.938605083648
    test 1205 line 201 lon2: 98.042857137838
    test 1206 line 201 azi2: 124.954750401990
    test 1207 line 202 lat: 18.924315
    test 1208 line 202 lon: 20.712136
    test 1209 line 202 fb: 118.058457
    test 1210 line 202 lat2: 18.924314631117
    test 1211 line 202 lon2: 20.712135699713
    test 1212 line 202 azi2: 118.058457437327
    test 1213 line 203 lat: 34.281652
    test 1214 line 203 lon: 66.815398
    test 1215 line 203 fb: 147.693080
    test 1216 line 203 lat2: 34.281652047931
    test 1217 line 203 lon2: 66.815398066147
    test 1218 line 203 azi2: 147.693079659533
    test 1219 line 204 lat: -56.830635
    test 1220 line 204 lon: 2.137046
    test 1221 line 204 fb: 178.041562
    test 1222 line 204 lat2: -56.830634769513
    test 1223 line 204 lon2: 2.137046322217
    test 1224 line 204 azi2: 178.041562126305
    test 1225 line 205 lat: -68.481893
    test 1226 line 205 lon: 107.036720
    test 1227 line 205 fb: 152.384477
    test 1228 line 205 lat2: -68.481892540174
    test 1229 line 205 lon2: 107.036720123074
    test 1230 line 205 azi2: 152.384476595412
    test 1231 line 206 lat: -22.502042
    test 1232 line 206 lon: 171.827566
    test 1233 line 206 fb: 158.834328
    test 1234 line 206 lat2: -22.502042312255
    test 1235 line 206 lon2: 171.827566033608
    test 1236 line 206 azi2: 158.834327972407
    test 1237 line 207 lat: -4.504199
    test 1238 line 207 lon: 138.544338
    test 1239 line 207 fb: 123.633526
    test 1240 line 207 lat2: -4.504199404775
    test 1241 line 207 lon2: 138.544338028736
    test 1242 line 207 azi2: 123.633526406205
    test 1243 line 208 lat: -9.226343
    test 1244 line 208 lon: 120.310050
    test 1245 line 208 fb: 142.789186
    test 1246 line 208 lat2: -9.226343110712
    test 1247 line 208 lon2: 120.310050148004
    test 1248 line 208 azi2: 142.789186422068
    test 1249 line 209 lat: -51.684044
    test 1250 line 209 lon: 137.764140
    test 1251 line 209 fb: 56.844891
    test 1252 line 209 lat2: -51.684044075582
    test 1253 line 209 lon2: 137.764139808689
    test 1254 line 209 azi2: 56.844890846790
    test 1255 line 210 lat: 19.467357
    test 1256 line 210 lon: 93.870087
    test 1257 line 210 fb: 129.125491
    test 1258 line 210 lat2: 19.467357090193
    test 1259 line 210 lon2: 93.870087361293
    test 1260 line 210 azi2: 129.125490840370
    test 1261 line 211 lat: 33.594608
    test 1262 line 211 lon: 58.324143
    test 1263 line 211 fb: 101.975372
    test 1264 line 211 lat2: 33.594607695347
    test 1265 line 211 lon2: 58.324143410893
    test 1266 line 211 azi2: 101.975372004111
    test 1267 line 212 lat: -1.184701
    test 1268 line 212 lon: 92.834285
    test 1269 line 212 fb: 134.201097
    test 1270 line 212 lat2: -1.184701423910
    test 1271 line 212 lon2: 92.834285031504
    test 1272 line 212 azi2: 134.201097217000
    test 1273 line 213 lat: 5.878639
    test 1274 line 213 lon: 90.756173
    test 1275 line 213 fb: 156.936699
    test 1276 line 213 lat2: 5.878638801092
    test 1277 line 213 lon2: 90.756172727682
    test 1278 line 213 azi2: 156.936698928215
    test 1279 line 214 lat: 47.611646
    test 1280 line 214 lon: 131.482218
    test 1281 line 214 fb: 152.077667
    test 1282 line 214 lat2: 47.611646039058
    test 1283 line 214 lon2: 131.482217984255
    test 1284 line 214 azi2: 152.077667341138
    test 1285 line 215 lat: 13.906234
    test 1286 line 215 lon: 115.526238
    test 1287 line 215 fb: 130.769627
    test 1288 line 215 lat2: 13.906233945801
    test 1289 line 215 lon2: 115.526238064488
    test 1290 line 215 azi2: 130.769627488545
    test 1291 line 216 lat: 3.675485
    test 1292 line 216 lon: 80.781862
    test 1293 line 216 fb: 94.188426
    test 1294 line 216 lat2: 3.675485213596
    test 1295 line 216 lon2: 80.781861923838
    test 1296 line 216 azi2: 94.188426367881
    test 1297 line 217 lat: 68.665600
    test 1298 line 217 lon: 21.503123
    test 1299 line 217 fb: 107.667810
    test 1300 line 217 lat2: 68.665599857810
    test 1301 line 217 lon2: 21.503123449290
    test 1302 line 217 azi2: 107.667809564608
    test 1303 line 218 lat: -60.791732
    test 1304 line 218 lon: 82.476063
    test 1305 line 218 fb: 117.665953
    test 1306 line 218 lat2: -60.791732218314
    test 1307 line 218 lon2: 82.476062801971
    test 1308 line 218 azi2: 117.665952598924
    test 1309 line 219 lat: -33.122376
    test 1310 line 219 lon: 89.871476
    test 1311 line 219 fb: 124.068098
    test 1312 line 219 lat2: -33.122375734012
    test 1313 line 219 lon2: 89.871476211443
    test 1314 line 219 azi2: 124.068098444465
    test 1315 line 220 lat: -34.085934
    test 1316 line 220 lon: 117.886549
    test 1317 line 220 fb: 93.366647
    test 1318 line 220 lat2: -34.085934037207
    test 1319 line 220 lon2: 117.886548615401
    test 1320 line 220 azi2: 93.366647127153
    test 1321 line 221 lat: -43.746811
    test 1322 line 221 lon: 107.199939
    test 1323 line 221 fb: 101.218435
    test 1324 line 221 lat2: -43.746811413059
    test 1325 line 221 lon2: 107.199938541143
    test 1326 line 221 azi2: 101.218434581373
    test 1327 line 222 lat: -44.514857
    test 1328 line 222 lon: 19.560361
    test 1329 line 222 fb: 166.449925
    test 1330 line 222 lat2: -44.514857277517
    test 1331 line 222 lon2: 19.560360617266
    test 1332 line 222 azi2: 166.449925135617
    test 1333 line 223 lat: -18.049262
    test 1334 line 223 lon: 42.099193
    test 1335 line 223 fb: 158.127141
    test 1336 line 223 lat2: -18.049261796697
    test 1337 line 223 lon2: 42.099193394607
    test 1338 line 223 azi2: 158.127140901909
    test 1339 line 224 lat: 9.832902
    test 1340 line 224 lon: 51.448057
    test 1341 line 224 fb: 114.348703
    test 1342 line 224 lat2: 9.832901687662
    test 1343 line 224 lon2: 51.448057387281
    test 1344 line 224 azi2: 114.348702917675
    test 1345 line 225 lat: -57.516443
    test 1346 line 225 lon: 64.700933
    test 1347 line 225 fb: 137.459801
    test 1348 line 225 lat2: -57.516443280706
    test 1349 line 225 lon2: 64.700933124813
    test 1350 line 225 azi2: 137.459801078685
    test 1351 line 226 lat: -23.072600
    test 1352 line 226 lon: 95.392602
    test 1353 line 226 fb: 140.119143
    test 1354 line 226 lat2: -23.072599811854
    test 1355 line 226 lon2: 95.392601883769
    test 1356 line 226 azi2: 140.119143469104
    test 1357 line 227 lat: -45.117254
    test 1358 line 227 lon: 97.361647
    test 1359 line 227 fb: 97.339041
    test 1360 line 227 lat2: -45.117253614100
    test 1361 line 227 lon2: 97.361647352714
    test 1362 line 227 azi2: 97.339040559115
    test 1363 line 228 lat: -11.277328
    test 1364 line 228 lon: 19.602358
    test 1365 line 228 fb: 156.779730
    test 1366 line 228 lat2: -11.277328262947
    test 1367 line 228 lon2: 19.602358024471
    test 1368 line 228 azi2: 156.779729902321
    test 1369 line 229 lat: -4.823524
    test 1370 line 229 lon: 164.626842
    test 1371 line 229 fb: 151.314797
    test 1372 line 229 lat2: -4.823524348693
    test 1373 line 229 lon2: 164.626841855534
    test 1374 line 229 azi2: 151.314796841238
    test 1375 line 230 lat: 36.317088
    test 1376 line 230 lon: 89.326155
    test 1377 line 230 fb: 94.589052
    test 1378 line 230 lat2: 36.317087922282
    test 1379 line 230 lon2: 89.326155365943
    test 1380 line 230 azi2: 94.589051951234  FAILED, KNOWN, expected 94.589051951235
    test 1381 line 231 lat: 3.975433
    test 1382 line 231 lon: 105.460359
    test 1383 line 231 fb: 126.257925
    test 1384 line 231 lat2: 3.975432760073
    test 1385 line 231 lon2: 105.460358584149
    test 1386 line 231 azi2: 126.257925455058
    test 1387 line 232 lat: 28.815984
    test 1388 line 232 lon: 89.807394
    test 1389 line 232 fb: 116.984375
    test 1390 line 232 lat2: 28.815983592511
    test 1391 line 232 lon2: 89.807393686834
    test 1392 line 232 azi2: 116.984374981602
    test 1393 line 233 lat: 66.161717
    test 1394 line 233 lon: 63.218655
    test 1395 line 233 fb: 88.869959
    test 1396 line 233 lat2: 66.161716765270
    test 1397 line 233 lon2: 63.218655052918
    test 1398 line 233 azi2: 88.869959091488
    test 1399 line 234 lat: 74.859972
    test 1400 line 234 lon: 53.523361
    test 1401 line 234 fb: 58.125008
    test 1402 line 234 lat2: 74.859971601090
    test 1403 line 234 lon2: 53.523360738831
    test 1404 line 234 azi2: 58.125008091802
    test 1405 line 235 lat: -0.265481
    test 1406 line 235 lon: 79.537677
    test 1407 line 235 fb: 112.945830
    test 1408 line 235 lat2: -0.265481234322
    test 1409 line 235 lon2: 79.537677388981
    test 1410 line 235 azi2: 112.945829781102
    test 1411 line 236 lat: -12.099598
    test 1412 line 236 lon: 155.371356
    test 1413 line 236 fb: 76.454292
    test 1414 line 236 lat2: -12.099598021004
    test 1415 line 236 lon2: 155.371356164845
    test 1416 line 236 azi2: 76.454291606612
    test 1417 line 237 lat: -6.746465
    test 1418 line 237 lon: 19.102484
    test 1419 line 237 fb: 149.342236
    test 1420 line 237 lat2: -6.746464854112
    test 1421 line 237 lon2: 19.102484309526
    test 1422 line 237 azi2: 149.342236428405
    test 1423 line 238 lat: 0.663830
    test 1424 line 238 lon: 101.295721
    test 1425 line 238 fb: 133.862626
    test 1426 line 238 lat2: 0.663830251510
    test 1427 line 238 lon2: 101.295720736944
    test 1428 line 238 azi2: 133.862626019473
    test 1429 line 239 lat: -61.764624
    test 1430 line 239 lon: 148.537522
    test 1431 line 239 fb: 149.298772
    test 1432 line 239 lat2: -61.764623993813
    test 1433 line 239 lon2: 148.537521922087
    test 1434 line 239 azi2: 149.298771734214
    test 1435 line 240 lat: 14.505122
    test 1436 line 240 lon: 111.665519
    test 1437 line 240 fb: 97.740222
    test 1438 line 240 lat2: 14.505121777043
    test 1439 line 240 lon2: 111.665518774379
    test 1440 line 240 azi2: 97.740221959573
    test 1441 line 241 lat: -24.713205
    test 1442 line 241 lon: 34.159384
    test 1443 line 241 fb: 125.866132
    test 1444 line 241 lat2: -24.713205327375
    test 1445 line 241 lon2: 34.159384140577
    test 1446 line 241 azi2: 125.866132443875
    test 1447 line 242 lat: 50.480262
    test 1448 line 242 lon: 42.263850
    test 1449 line 242 fb: 153.395659
    test 1450 line 242 lat2: 50.480261762893
    test 1451 line 242 lon2: 42.263849601327
    test 1452 line 242 azi2: 153.395658919028
    test 1453 line 243 lat: 11.787247
    test 1454 line 243 lon: 49.506460
    test 1455 line 243 fb: 120.836778
    test 1456 line 243 lat2: 11.787247309610
    test 1457 line 243 lon2: 49.506459509702
    test 1458 line 243 azi2: 120.836778496206
    test 1459 line 244 lat: -19.956674
    test 1460 line 244 lon: 14.599479
    test 1461 line 244 fb: 177.883855
    test 1462 line 244 lat2: -19.956673621927
    test 1463 line 244 lon2: 14.599479227718
    test 1464 line 244 azi2: 177.883855088778
    test 1465 line 245 lat: 0.738566
    test 1466 line 245 lon: 12.600972
    test 1467 line 245 fb: 176.085445
    test 1468 line 245 lat2: 0.738565517815
    test 1469 line 245 lon2: 12.600972006927
    test 1470 line 245 azi2: 176.085445031797
    test 1471 line 246 lat: 25.799128
    test 1472 line 246 lon: 9.800259
    test 1473 line 246 fb: 166.282764
    test 1474 line 246 lat2: 25.799128425384
    test 1475 line 246 lon2: 9.800259258495
    test 1476 line 246 azi2: 166.282764024264
    test 1477 line 247 lat: -3.897277
    test 1478 line 247 lon: 16.693319
    test 1479 line 247 fb: 168.780736
    test 1480 line 247 lat2: -3.897277132184
    test 1481 line 247 lon2: 16.693318601970
    test 1482 line 247 azi2: 168.780736094343
    test 1483 line 248 lat: 2.479585
    test 1484 line 248 lon: 72.317321
    test 1485 line 248 fb: 126.935932
    test 1486 line 248 lat2: 2.479585385319
    test 1487 line 248 lon2: 72.317321261259
    test 1488 line 248 azi2: 126.935932221711
    test 1489 line 249 lat: -0.836621
    test 1490 line 249 lon: 2.490193
    test 1491 line 249 fb: 150.640498
    test 1492 line 249 lat2: -0.836621274662
    test 1493 line 249 lon2: 2.490192836679
    test 1494 line 249 azi2: 150.640498065221
    test 1495 line 250 lat: -69.098227
    test 1496 line 250 lon: 43.929874
    test 1497 line 250 fb: 143.378404
    test 1498 line 250 lat2: -69.098226894675
    test 1499 line 250 lon2: 43.929873562507
    test 1500 line 250 azi2: 143.378403982035
    test 1501 line 251 lat: 19.156121
    test 1502 line 251 lon: 130.658473
    test 1503 line 251 fb: 136.204475
    test 1504 line 251 lat2: 19.156121137418
    test 1505 line 251 lon2: 130.658473280949
    test 1506 line 251 azi2: 136.204475163250
    test 1507 line 252 lat: 68.881949
    test 1508 line 252 lon: 79.375865
    test 1509 line 252 fb: 99.052732
    test 1510 line 252 lat2: 68.881948915820
    test 1511 line 252 lon2: 79.375865154434  FAILED, KNOWN, expected 79.375865154433
    test 1512 line 252 azi2: 99.052731550675
    test 1513 line 253 lat: -23.509016
    test 1514 line 253 lon: 122.232226
    test 1515 line 253 fb: 90.354604
    test 1516 line 253 lat2: -23.509015988874
    test 1517 line 253 lon2: 122.232226283491
    test 1518 line 253 azi2: 90.354603607380
    test 1519 line 254 lat: -64.950636
    test 1520 line 254 lon: 70.184354
    test 1521 line 254 fb: 122.478937
    test 1522 line 254 lat2: -64.950635804577
    test 1523 line 254 lon2: 70.184354384370
    test 1524 line 254 azi2: 122.478937039089
    test 1525 line 255 lat: 4.931109
    test 1526 line 255 lon: 176.100221
    test 1527 line 255 fb: 175.754221
    test 1528 line 255 lat2: 4.931108669549
    test 1529 line 255 lon2: 176.100220910178
    test 1530 line 255 azi2: 175.754221027085
    test 1531 line 256 lat: -35.503236
    test 1532 line 256 lon: 122.767107
    test 1533 line 256 fb: 94.201020
    test 1534 line 256 lat2: -35.503236005727
    test 1535 line 256 lon2: 122.767107174014
    test 1536 line 256 azi2: 94.201020059324
    test 1537 line 257 lat: 58.728016
    test 1538 line 257 lon: 76.607531
    test 1539 line 257 fb: 114.353509
    test 1540 line 257 lat2: 58.728016150448
    test 1541 line 257 lon2: 76.607530844045
    test 1542 line 257 azi2: 114.353508957613
    test 1543 line 258 lat: 13.725793
    test 1544 line 258 lon: 60.384503
    test 1545 line 258 fb: 102.783242
    test 1546 line 258 lat2: 13.725792757601
    test 1547 line 258 lon2: 60.384502867486
    test 1548 line 258 azi2: 102.783241874789
    test 1549 line 259 lat: 40.298524
    test 1550 line 259 lon: 59.957993
    test 1551 line 259 fb: 90.056366
    test 1552 line 259 lat2: 40.298523592677
    test 1553 line 259 lon2: 59.957993458231
    test 1554 line 259 azi2: 90.056365696933
    test 1555 line 260 lat: 21.526222
    test 1556 line 260 lon: 19.836420
    test 1557 line 260 fb: 89.081274
    test 1558 line 260 lat2: 21.526221960544
    test 1559 line 260 lon2: 19.836419824899
    test 1560 line 260 azi2: 89.081274273400
    test 1561 line 261 lat: -65.269872
    test 1562 line 261 lon: 134.049515
    test 1563 line 261 fb: 54.613515
    test 1564 line 261 lat2: -65.269872123888
    test 1565 line 261 lon2: 134.049514626723
    test 1566 line 261 azi2: 54.613514542799
    test 1567 line 262 lat: -47.687068
    test 1568 line 262 lon: 86.855941
    test 1569 line 262 fb: 115.133532
    test 1570 line 262 lat2: -47.687068378110
    test 1571 line 262 lon2: 86.855941174728
    test 1572 line 262 azi2: 115.133531572693
    test 1573 line 263 lat: -56.637273
    test 1574 line 263 lon: 158.001121
    test 1575 line 263 fb: 35.013276
    test 1576 line 263 lat2: -56.637272907294
    test 1577 line 263 lon2: 158.001120751267
    test 1578 line 263 azi2: 35.013276119319
    test 1579 line 264 lat: 6.880772
    test 1580 line 264 lon: 36.289125
    test 1581 line 264 fb: 144.499557
    test 1582 line 264 lat2: 6.880771895178
    test 1583 line 264 lon2: 36.289124705135
    test 1584 line 264 azi2: 144.499557452454
    test 1585 line 265 lat: 59.205527
    test 1586 line 265 lon: 115.787268
    test 1587 line 265 fb: 116.793619
    test 1588 line 265 lat2: 59.205526512430
    test 1589 line 265 lon2: 115.787267608171
    test 1590 line 265 azi2: 116.793618855456
    test 1591 line 266 lat: 29.463206
    test 1592 line 266 lon: 68.742710
    test 1593 line 266 fb: 113.906069
    test 1594 line 266 lat2: 29.463206450868
    test 1595 line 266 lon2: 68.742710218988
    test 1596 line 266 azi2: 113.906069374400
    test 1597 line 267 lat: 5.507960
    test 1598 line 267 lon: 2.913367
    test 1599 line 267 fb: 175.225892
    test 1600 line 267 lat2: 5.507959555355
    test 1601 line 267 lon2: 2.913367209347
    test 1602 line 267 azi2: 175.225891805562
    test 1603 line 268 lat: 32.568215
    test 1604 line 268 lon: 107.814340
    test 1605 line 268 fb: 126.321687
    test 1606 line 268 lat2: 32.568215067951
    test 1607 line 268 lon2: 107.814340389788
    test 1608 line 268 azi2: 126.321687264203
    test 1609 line 269 lat: 48.941036
    test 1610 line 269 lon: 170.309380
    test 1611 line 269 fb: 170.816057
    test 1612 line 269 lat2: 48.941036400994
    test 1613 line 269 lon2: 170.309379989564
    test 1614 line 269 azi2: 170.816056872564
    test 1615 line 270 lat: 32.657811
    test 1616 line 270 lon: 174.401372
    test 1617 line 270 fb: 173.967029
    test 1618 line 270 lat2: 32.657810935795
    test 1619 line 270 lon2: 174.401372292954
    test 1620 line 270 azi2: 173.967029189838
    test 1621 line 271 lat: -30.959342
    test 1622 line 271 lon: 144.596945
    test 1623 line 271 fb: 157.635539
    test 1624 line 271 lat2: -30.959341511189
    test 1625 line 271 lon2: 144.596944855700
    test 1626 line 271 azi2: 157.635538872114
    test 1627 line 272 lat: 52.180060
    test 1628 line 272 lon: 68.363538
    test 1629 line 272 fb: 82.619820
    test 1630 line 272 lat2: 52.180060488771
    test 1631 line 272 lon2: 68.363538073511
    test 1632 line 272 azi2: 82.619819936898
    test 1633 line 273 lat: -49.230655
    test 1634 line 273 lon: 119.085123
    test 1635 line 273 fb: 81.553785
    test 1636 line 273 lat2: -49.230654785601
    test 1637 line 273 lon2: 119.085122995371
    test 1638 line 273 azi2: 81.553785297210
    test 1639 line 274 lat: 12.315309
    test 1640 line 274 lon: 21.800337
    test 1641 line 274 fb: 86.572317
    test 1642 line 274 lat2: 12.315308710130
    test 1643 line 274 lon2: 21.800336803956
    test 1644 line 274 azi2: 86.572316548512
    test 1645 line 275 lat: 0.074875
    test 1646 line 275 lon: 122.092567
    test 1647 line 275 fb: 93.940324
    test 1648 line 275 lat2: 0.074874782626
    test 1649 line 275 lon2: 122.092567299352
    test 1650 line 275 azi2: 93.940323652996
    test 1651 line 276 lat: -32.420609
    test 1652 line 276 lon: 80.147417
    test 1653 line 276 fb: 123.183256
    test 1654 line 276 lat2: -32.420609134175
    test 1655 line 276 lon2: 80.147416945184
    test 1656 line 276 azi2: 123.183256201588
    test 1657 line 277 lat: 82.600418
    test 1658 line 277 lon: 34.418367
    test 1659 line 277 fb: 35.057122
    test 1660 line 277 lat2: 82.600418456713
    test 1661 line 277 lon2: 34.418367124569
    test 1662 line 277 azi2: 35.057122384192
    test 1663 line 278 lat: 26.274633
    test 1664 line 278 lon: 93.043032
    test 1665 line 278 fb: 114.480069
    test 1666 line 278 lat2: 26.274632977288
    test 1667 line 278 lon2: 93.043031668414
    test 1668 line 278 azi2: 114.480069066657
    test 1669 line 279 lat: 28.433986
    test 1670 line 279 lon: 132.962042
    test 1671 line 279 fb: 118.817242
    test 1672 line 279 lat2: 28.433985598740
    test 1673 line 279 lon2: 132.962041543078
    test 1674 line 279 azi2: 118.817241997246
    test 1675 line 280 lat: 32.426459
    test 1676 line 280 lon: 65.171889
    test 1677 line 280 fb: 113.230923
    test 1678 line 280 lat2: 32.426458512822
    test 1679 line 280 lon2: 65.171889395963
    test 1680 line 280 azi2: 113.230923394172
    test 1681 line 281 lat: 8.427284
    test 1682 line 281 lon: 20.342496
    test 1683 line 281 fb: 140.993359
    test 1684 line 281 lat2: 8.427284359102
    test 1685 line 281 lon2: 20.342496251702
    test 1686 line 281 azi2: 140.993359066103
    test 1687 line 282 lat: -16.412702
    test 1688 line 282 lon: 47.392542
    test 1689 line 282 fb: 167.389705
    test 1690 line 282 lat2: -16.412702228950
    test 1691 line 282 lon2: 47.392541669265
    test 1692 line 282 azi2: 167.389704666322
    test 1693 line 283 lat: -54.082376
    test 1694 line 283 lon: 159.985466
    test 1695 line 283 fb: 56.023710
    test 1696 line 283 lat2: -54.082375801659
    test 1697 line 283 lon2: 159.985465829683
    test 1698 line 283 azi2: 56.023710499162
    test 1699 line 284 lat: 38.704319
    test 1700 line 284 lon: 78.307551
    test 1701 line 284 fb: 106.582126
    test 1702 line 284 lat2: 38.704318557557
    test 1703 line 284 lon2: 78.307550831333
    test 1704 line 284 azi2: 106.582125725743
    test 1705 line 285 lat: 15.206275
    test 1706 line 285 lon: 59.878378
    test 1707 line 285 fb: 114.460428
    test 1708 line 285 lat2: 15.206274688849
    test 1709 line 285 lon2: 59.878378252292
    test 1710 line 285 azi2: 114.460428216582
    test 1711 line 286 lat: -62.789550
    test 1712 line 286 lon: 66.649185
    test 1713 line 286 fb: 119.232672
    test 1714 line 286 lat2: -62.789549909136
    test 1715 line 286 lon2: 66.649184622337
    test 1716 line 286 azi2: 119.232671643971
    test 1717 line 287 lat: 31.235252
    test 1718 line 287 lon: 19.933468
    test 1719 line 287 fb: 145.488470
    test 1720 line 287 lat2: 31.235252170087
    test 1721 line 287 lon2: 19.933467970517
    test 1722 line 287 azi2: 145.488469796544
    test 1723 line 288 lat: 11.983236
    test 1724 line 288 lon: 145.307369
    test 1725 line 288 fb: 151.192641
    test 1726 line 288 lat2: 11.983236088753
    test 1727 line 288 lon2: 145.307368849730
    test 1728 line 288 azi2: 151.192640854621
    test 1729 line 289 lat: 27.629694
    test 1730 line 289 lon: 16.148459
    test 1731 line 289 fb: 63.008012
    test 1732 line 289 lat2: 27.629693628283
    test 1733 line 289 lon2: 16.148459400244
    test 1734 line 289 azi2: 63.008012267521
    test 1735 line 290 lat: 34.077784
    test 1736 line 290 lon: 115.693210
    test 1737 line 290 fb: 112.252264
    test 1738 line 290 lat2: 34.077783768135
    test 1739 line 290 lon2: 115.693209573427
    test 1740 line 290 azi2: 112.252263721679
    test 1741 line 291 lat: 17.100340
    test 1742 line 291 lon: 26.538643
    test 1743 line 291 fb: 131.391925
    test 1744 line 291 lat2: 17.100339523444
    test 1745 line 291 lon2: 26.538642768875
    test 1746 line 291 azi2: 131.391925094902
    test 1747 line 292 lat: -8.128040
    test 1748 line 292 lon: 28.609615
    test 1749 line 292 fb: 144.189095
    test 1750 line 292 lat2: -8.128039572354
    test 1751 line 292 lon2: 28.609615412806
    test 1752 line 292 azi2: 144.189095481788
    test 1753 line 293 lat: 17.307082
    test 1754 line 293 lon: 150.748550
    test 1755 line 293 fb: 172.334611
    test 1756 line 293 lat2: 17.307081581668
    test 1757 line 293 lon2: 150.748549863580
    test 1758 line 293 azi2: 172.334611079260
    test 1759 line 294 lat: 4.135230
    test 1760 line 294 lon: 142.094814
    test 1761 line 294 fb: 170.513214
    test 1762 line 294 lat2: 4.135229575811
    test 1763 line 294 lon2: 142.094814225629
    test 1764 line 294 azi2: 170.513213518678
    test 1765 line 295 lat: -61.544041
    test 1766 line 295 lon: 167.154866
    test 1767 line 295 fb: 51.415676
    test 1768 line 295 lat2: -61.544040804472
    test 1769 line 295 lon2: 167.154866481812  FAILED, KNOWN, expected 167.154866481811
    test 1770 line 295 azi2: 51.415675504866
    test 1771 line 296 lat: 27.782466
    test 1772 line 296 lon: 53.844550
    test 1773 line 296 fb: 78.357665
    test 1774 line 296 lat2: 27.782465760718
    test 1775 line 296 lon2: 53.844549799795
    test 1776 line 296 azi2: 78.357665271795
    test 1777 line 297 lat: -30.157337
    test 1778 line 297 lon: 14.759636
    test 1779 line 297 fb: 157.487063
    test 1780 line 297 lat2: -30.157336788088
    test 1781 line 297 lon2: 14.759635614931
    test 1782 line 297 azi2: 157.487063280783
    test 1783 line 298 lat: -16.819268
    test 1784 line 298 lon: 22.734618
    test 1785 line 298 fb: 167.761663
    test 1786 line 298 lat2: -16.819268371139
    test 1787 line 298 lon2: 22.734618221531
    test 1788 line 298 azi2: 167.761663436059
    test 1789 line 299 lat: 58.190743
    test 1790 line 299 lon: 15.576363
    test 1791 line 299 fb: 71.213972
    test 1792 line 299 lat2: 58.190742593673
    test 1793 line 299 lon2: 15.576363250416
    test 1794 line 299 azi2: 71.213972172079
    test 1795 line 300 lat: 57.214981
    test 1796 line 300 lon: 163.530752
    test 1797 line 300 fb: 162.056064
    test 1798 line 300 lat2: 57.214981133823
    test 1799 line 300 lon2: 163.530751680014
    test 1800 line 300 azi2: 162.056064225923
    test 1801 line 301 lat: 31.811818
    test 1802 line 301 lon: 81.663494
    test 1803 line 301 fb: 112.546404
    test 1804 line 301 lat2: 31.811817748936
    test 1805 line 301 lon2: 81.663494432962
    test 1806 line 301 azi2: 112.546403824977
    test 1807 line 302 lat: -11.315727
    test 1808 line 302 lon: 48.409490
    test 1809 line 302 fb: 121.434574
    test 1810 line 302 lat2: -11.315726799012
    test 1811 line 302 lon2: 48.409489590525
    test 1812 line 302 azi2: 121.434573764585
    test 1813 line 303 lat: 6.119956
    test 1814 line 303 lon: 5.687908
    test 1815 line 303 fb: 94.977171
    test 1816 line 303 lat2: 6.119956010623
    test 1817 line 303 lon2: 5.687908365969
    test 1818 line 303 azi2: 94.977170961146
    test 1819 line 304 lat: -13.455263
    test 1820 line 304 lon: 92.797729
    test 1821 line 304 fb: 125.067595
    test 1822 line 304 lat2: -13.455262906771
    test 1823 line 304 lon2: 92.797729354548
    test 1824 line 304 azi2: 125.067595131171
    test 1825 line 305 lat: -61.258454
    test 1826 line 305 lon: 32.464613
    test 1827 line 305 fb: 153.578300
    test 1828 line 305 lat2: -61.258454070259
    test 1829 line 305 lon2: 32.464613321886
    test 1830 line 305 azi2: 153.578299580216
    test 1831 line 306 lat: 76.656194
    test 1832 line 306 lon: 147.658262
    test 1833 line 306 fb: 154.870277
    test 1834 line 306 lat2: 76.656194303754
    test 1835 line 306 lon2: 147.658261698859
    test 1836 line 306 azi2: 154.870276891567
    test 1837 line 307 lat: 38.020470
    test 1838 line 307 lon: 22.502210
    test 1839 line 307 fb: 164.603876
    test 1840 line 307 lat2: 38.020470355438
    test 1841 line 307 lon2: 22.502210018002
    test 1842 line 307 azi2: 164.603876406614
    test 1843 line 308 lat: -28.475186
    test 1844 line 308 lon: 125.031589
    test 1845 line 308 fb: 71.946314
    test 1846 line 308 lat2: -28.475185707347
    test 1847 line 308 lon2: 125.031589334958
    test 1848 line 308 azi2: 71.946313988393
    test 1849 line 309 lat: 33.123700
    test 1850 line 309 lon: 47.796870
    test 1851 line 309 fb: 66.233041
    test 1852 line 309 lat2: 33.123699771125
    test 1853 line 309 lon2: 47.796870281285
    test 1854 line 309 azi2: 66.233040505915
    test 1855 line 310 lat: 36.967606
    test 1856 line 310 lon: 91.462107
    test 1857 line 310 fb: 113.555931
    test 1858 line 310 lat2: 36.967605507925
    test 1859 line 310 lon2: 91.462107367844
    test 1860 line 310 azi2: 113.555931272414
    test 1861 line 311 lat: -3.784112
    test 1862 line 311 lon: 75.465096
    test 1863 line 311 fb: 146.940895
    test 1864 line 311 lat2: -3.784112064078
    test 1865 line 311 lon2: 75.465096433718
    test 1866 line 311 azi2: 146.940895363525
    test 1867 line 312 lat: 10.772454
    test 1868 line 312 lon: 162.137695
    test 1869 line 312 fb: 176.774643
    test 1870 line 312 lat2: 10.772454234711  FAILED, KNOWN, expected 10.772454234710
    test 1871 line 312 lon2: 162.137694811372
    test 1872 line 312 azi2: 176.774642770857
    test 1873 line 313 lat: 23.928740
    test 1874 line 313 lon: 28.953169
    test 1875 line 313 fb: 143.614710
    test 1876 line 313 lat2: 23.928739648982
    test 1877 line 313 lon2: 28.953169497861
    test 1878 line 313 azi2: 143.614709768381
    test 1879 line 314 lat: 5.199377
    test 1880 line 314 lon: 162.802668
    test 1881 line 314 fb: 146.857520
    test 1882 line 314 lat2: 5.199376594428
    test 1883 line 314 lon2: 162.802668362269
    test 1884 line 314 azi2: 146.857519761344
    test 1885 line 315 lat: 6.285334
    test 1886 line 315 lon: 164.204548
    test 1887 line 315 fb: 159.451359
    test 1888 line 315 lat2: 6.285334322282
    test 1889 line 315 lon2: 164.204548022855
    test 1890 line 315 azi2: 159.451359223111
    test 1891 line 316 lat: -8.151874
    test 1892 line 316 lon: 43.923539
    test 1893 line 316 fb: 121.501273
    test 1894 line 316 lat2: -8.151873580306
    test 1895 line 316 lon2: 43.923539410568
    test 1896 line 316 azi2: 121.501272690158
    test 1897 line 317 lat: 20.145480
    test 1898 line 317 lon: 92.310645
    test 1899 line 317 fb: 97.369333
    test 1900 line 317 lat2: 20.145480383316
    test 1901 line 317 lon2: 92.310644735772
    test 1902 line 317 azi2: 97.369333245027
    test 1903 line 318 lat: 38.715579
    test 1904 line 318 lon: 89.141427
    test 1905 line 318 fb: 100.831087
    test 1906 line 318 lat2: 38.715578802658
    test 1907 line 318 lon2: 89.141426830360
    test 1908 line 318 azi2: 100.831086703170
    test 1909 line 319 lat: -25.760685
    test 1910 line 319 lon: 145.864001
    test 1911 line 319 fb: 142.714674
    test 1912 line 319 lat2: -25.760685020607
    test 1913 line 319 lon2: 145.864001048187
    test 1914 line 319 azi2: 142.714673928912
    test 1915 line 320 lat: 49.387283
    test 1916 line 320 lon: 28.917044
    test 1917 line 320 fb: 61.545235
    test 1918 line 320 lat2: 49.387283074155
    test 1919 line 320 lon2: 28.917043656753  FAILED, KNOWN, expected 28.917043656754
    test 1920 line 320 azi2: 61.545235148403
    test 1921 line 321 lat: 10.120685
    test 1922 line 321 lon: 2.869738
    test 1923 line 321 fb: 176.526916
    test 1924 line 321 lat2: 10.120685293027
    test 1925 line 321 lon2: 2.869737593886
    test 1926 line 321 azi2: 176.526915822865
    test 1927 line 322 lat: 2.463216
    test 1928 line 322 lon: 102.917600
    test 1929 line 322 fb: 170.609004
    test 1930 line 322 lat2: 2.463216066166
    test 1931 line 322 lon2: 102.917599852201
    test 1932 line 322 azi2: 170.609003610639
    test 1933 line 323 lat: 58.201294
    test 1934 line 323 lon: 155.022079
    test 1935 line 323 fb: 153.181269
    test 1936 line 323 lat2: 58.201293688923
    test 1937 line 323 lon2: 155.022079105501
    test 1938 line 323 azi2: 153.181268692773
    test 1939 line 324 lat: 3.089608
    test 1940 line 324 lon: 20.686800
    test 1941 line 324 fb: 144.857820
    test 1942 line 324 lat2: 3.089607756265
    test 1943 line 324 lon2: 20.686800266169
    test 1944 line 324 azi2: 144.857820265585
    test 1945 line 325 lat: 48.232274
    test 1946 line 325 lon: 18.567244
    test 1947 line 325 fb: 24.556438
    test 1948 line 325 lat2: 48.232274219515
    test 1949 line 325 lon2: 18.567244222293
    test 1950 line 325 azi2: 24.556437713520
    test 1951 line 326 lat: 30.265261
    test 1952 line 326 lon: 7.440738
    test 1953 line 326 fb: 142.022972
    test 1954 line 326 lat2: 30.265261486767
    test 1955 line 326 lon2: 7.440737656545
    test 1956 line 326 azi2: 142.022971576270
    test 1957 line 327 lat: -11.166197
    test 1958 line 327 lon: 176.728934
    test 1959 line 327 fb: 24.287273
    test 1960 line 327 lat2: -11.166197413148
    test 1961 line 327 lon2: 176.728933575636
    test 1962 line 327 azi2: 24.287272842989
    test 1963 line 328 lat: 84.645539
    test 1964 line 328 lon: 90.023922
    test 1965 line 328 fb: 92.786262
    test 1966 line 328 lat2: 84.645539196082
    test 1967 line 328 lon2: 90.023922499395
    test 1968 line 328 azi2: 92.786261566828  FAILED, KNOWN, expected 92.786261566827
    test 1969 line 329 lat: 61.618717
    test 1970 line 329 lon: 162.510959
    test 1971 line 329 fb: 160.923940
    test 1972 line 329 lat2: 61.618716728051
    test 1973 line 329 lon2: 162.510958917359
    test 1974 line 329 azi2: 160.923939760553
    test 1975 line 330 lat: 27.643242
    test 1976 line 330 lon: 45.376215
    test 1977 line 330 fb: 147.964522
    test 1978 line 330 lat2: 27.643242341173
    test 1979 line 330 lon2: 45.376215094118
    test 1980 line 330 azi2: 147.964522484664
    test 1981 line 331 lat: 2.218750
    test 1982 line 331 lon: 170.358342
    test 1983 line 331 fb: 141.658474
    test 1984 line 331 lat2: 2.218749985364
    test 1985 line 331 lon2: 170.358342078292
    test 1986 line 331 azi2: 141.658474129787
    test 1987 line 332 lat: 26.019142
    test 1988 line 332 lon: 32.534760
    test 1989 line 332 fb: 128.159784
    test 1990 line 332 lat2: 26.019142329663
    test 1991 line 332 lon2: 32.534760195963
    test 1992 line 332 azi2: 128.159784291645
    test 1993 line 333 lat: 10.049636
    test 1994 line 333 lon: 72.205347
    test 1995 line 333 fb: 143.602160
    test 1996 line 333 lat2: 10.049636247749
    test 1997 line 333 lon2: 72.205346955818
    test 1998 line 333 azi2: 143.602159725306
    test 1999 line 334 lat: -31.030497
    test 2000 line 334 lon: 91.539195
    test 2001 line 334 fb: 109.891398
    test 2002 line 334 lat2: -31.030496743715
    test 2003 line 334 lon2: 91.539195292896
    test 2004 line 334 azi2: 109.891398221790
    test 2005 line 335 lat: 30.113796
    test 2006 line 335 lon: 109.096982
    test 2007 line 335 fb: 146.779343
    test 2008 line 335 lat2: 30.113795853671
    test 2009 line 335 lon2: 109.096981631502
    test 2010 line 335 azi2: 146.779343066541
    test 2011 line 336 lat: -73.967996
    test 2012 line 336 lon: 65.944243
    test 2013 line 336 fb: 120.592999
    test 2014 line 336 lat2: -73.967996185770
    test 2015 line 336 lon2: 65.944242524678
    test 2016 line 336 azi2: 120.592998665529
    test 2017 line 337 lat: 52.211150
    test 2018 line 337 lon: 168.054185
    test 2019 line 337 fb: 172.425992
    test 2020 line 337 lat2: 52.211149755494
    test 2021 line 337 lon2: 168.054184827868
    test 2022 line 337 azi2: 172.425991612467
    test 2023 line 338 lat: -64.497146
    test 2024 line 338 lon: 72.073419
    test 2025 line 338 fb: 114.249129
    test 2026 line 338 lat2: -64.497146189688
    test 2027 line 338 lon2: 72.073418936581
    test 2028 line 338 azi2: 114.249128850219
    test 2029 line 339 lat: -25.711399
    test 2030 line 339 lon: 6.036423
    test 2031 line 339 fb: 169.464098
    test 2032 line 339 lat2: -25.711398997503
    test 2033 line 339 lon2: 6.036423474639
    test 2034 line 339 azi2: 169.464098294263
    test 2035 line 340 lat: 33.904613
    test 2036 line 340 lon: 30.989094
    test 2037 line 340 fb: 124.896016
    test 2038 line 340 lat2: 33.904613360449
    test 2039 line 340 lon2: 30.989094387217
    test 2040 line 340 azi2: 124.896016003640
    test 2041 line 341 lat: -25.053080
    test 2042 line 341 lon: 137.078639
    test 2043 line 341 fb: 115.960750
    test 2044 line 341 lat2: -25.053079543516
    test 2045 line 341 lon2: 137.078638665495
    test 2046 line 341 azi2: 115.960750169086
    test 2047 line 342 lat: 10.298031
    test 2048 line 342 lon: 27.737374
    test 2049 line 342 fb: 142.265457
    test 2050 line 342 lat2: 10.298031202629
    test 2051 line 342 lon2: 27.737373649973
    test 2052 line 342 azi2: 142.265457288483
    test 2053 line 343 lat: -0.738692
    test 2054 line 343 lon: 150.933627
    test 2055 line 343 fb: 174.004688
    test 2056 line 343 lat2: -0.738692377457
    test 2057 line 343 lon2: 150.933627031610
    test 2058 line 343 azi2: 174.004687728765
    test 2059 line 344 lat: 50.619289
    test 2060 line 344 lon: 67.178203
    test 2061 line 344 fb: 105.177353
    test 2062 line 344 lat2: 50.619289349009
    test 2063 line 344 lon2: 67.178203328135
    test 2064 line 344 azi2: 105.177353051107
    test 2065 line 345 lat: -2.127739
    test 2066 line 345 lon: 38.604245
    test 2067 line 345 fb: 118.657849
    test 2068 line 345 lat2: -2.127739360728
    test 2069 line 345 lon2: 38.604245449983
    test 2070 line 345 azi2: 118.657849063154
    test 2071 line 346 lat: 37.188367
    test 2072 line 346 lon: 90.865255
    test 2073 line 346 fb: 104.826548
    test 2074 line 346 lat2: 37.188366752551
    test 2075 line 346 lon2: 90.865255121714
    test 2076 line 346 azi2: 104.826548310924
    test 2077 line 347 lat: 46.019257
    test 2078 line 347 lon: 20.402591
    test 2079 line 347 fb: 31.068588
    test 2080 line 347 lat2: 46.019256998097
    test 2081 line 347 lon2: 20.402590686048
    test 2082 line 347 azi2: 31.068587858373
    test 2083 line 348 lat: 9.023356
    test 2084 line 348 lon: 106.678645
    test 2085 line 348 fb: 141.375490
    test 2086 line 348 lat2: 9.023355647006
    test 2087 line 348 lon2: 106.678645473545
    test 2088 line 348 azi2: 141.375490245645
    test 2089 line 349 lat: -1.321473
    test 2090 line 349 lon: 67.418879
    test 2091 line 349 fb: 105.590913
    test 2092 line 349 lat2: -1.321473235187
    test 2093 line 349 lon2: 67.418878731595
    test 2094 line 349 azi2: 105.590912857546
    test 2095 line 350 lat: 7.459339
    test 2096 line 350 lon: 30.150648
    test 2097 line 350 fb: 109.667752
    test 2098 line 350 lat2: 7.459338626177
    test 2099 line 350 lon2: 30.150648477470
    test 2100 line 350 azi2: 109.667751753912
    test 2101 line 351 lat: 16.344755
    test 2102 line 351 lon: 146.829160
    test 2103 line 351 fb: 128.666192
    test 2104 line 351 lat2: 16.344755038185
    test 2105 line 351 lon2: 146.829159972334
    test 2106 line 351 azi2: 128.666191953616
    test 2107 line 352 lat: -55.785670
    test 2108 line 352 lon: 158.086173
    test 2109 line 352 fb: 33.903277
    test 2110 line 352 lat2: -55.785670347270
    test 2111 line 352 lon2: 158.086173376809
    test 2112 line 352 azi2: 33.903276835071
    test 2113 line 353 lat: -74.409604
    test 2114 line 353 lon: 111.280935
    test 2115 line 353 fb: 78.510830
    test 2116 line 353 lat2: -74.409603561050
    test 2117 line 353 lon2: 111.280934985965
    test 2118 line 353 azi2: 78.510830028461
    test 2119 line 354 lat: 9.922204
    test 2120 line 354 lon: 138.538334
    test 2121 line 354 fb: 125.268473
    test 2122 line 354 lat2: 9.922203731557
    test 2123 line 354 lon2: 138.538333703571
    test 2124 line 354 azi2: 125.268473410634
    test 2125 line 355 lat: -27.082389
    test 2126 line 355 lon: 91.425844
    test 2127 line 355 fb: 153.267616
    test 2128 line 355 lat2: -27.082389068808  FAILED, KNOWN, expected -27.082389068807
    test 2129 line 355 lon2: 91.425843733185
    test 2130 line 355 azi2: 153.267616113653
    test 2131 line 356 lat: 14.627508
    test 2132 line 356 lon: 74.629605
    test 2133 line 356 fb: 159.825211
    test 2134 line 356 lat2: 14.627507744773
    test 2135 line 356 lon2: 74.629604673488
    test 2136 line 356 azi2: 159.825210987464
    test 2137 line 357 lat: 46.941087
    test 2138 line 357 lon: 18.833436
    test 2139 line 357 fb: 63.924917
    test 2140 line 357 lat2: 46.941086934169
    test 2141 line 357 lon2: 18.833435620675
    test 2142 line 357 azi2: 63.924916745148
    test 2143 line 358 lat: 42.371666
    test 2144 line 358 lon: 126.270074
    test 2145 line 358 fb: 117.352107
    test 2146 line 358 lat2: 42.371665615782
    test 2147 line 358 lon2: 126.270074354353
    test 2148 line 358 azi2: 117.352106840236
    test 2149 line 359 lat: 60.888684
    test 2150 line 359 lon: 106.363657
    test 2151 line 359 fb: 108.973271
    test 2152 line 359 lat2: 60.888683732870
    test 2153 line 359 lon2: 106.363656697522
    test 2154 line 359 azi2: 108.973271101790
    test 2155 line 360 lat: 53.972090
    test 2156 line 360 lon: 136.000658
    test 2157 line 360 fb: 138.361589
    test 2158 line 360 lat2: 53.972089572795
    test 2159 line 360 lon2: 136.000657911062
    test 2160 line 360 azi2: 138.361588598638
    test 2161 line 361 lat: 47.850867
    test 2162 line 361 lon: 25.277934
    test 2163 line 361 fb: 71.284668
    test 2164 line 361 lat2: 47.850866585267
    test 2165 line 361 lon2: 25.277933660114
    test 2166 line 361 azi2: 71.284667717290
    test 2167 line 362 lat: 64.280614
    test 2168 line 362 lon: 16.447697
    test 2169 line 362 fb: 35.692750
    test 2170 line 362 lat2: 64.280614171157
    test 2171 line 362 lon2: 16.447696559380
    test 2172 line 362 azi2: 35.692750218622
    test 2173 line 363 lat: -3.339044
    test 2174 line 363 lon: 91.646260
    test 2175 line 363 fb: 95.928001
    test 2176 line 363 lat2: -3.339044133285
    test 2177 line 363 lon2: 91.646260438368
    test 2178 line 363 azi2: 95.928000721064
    test 2179 line 364 lat: -46.029875
    test 2180 line 364 lon: 30.599197
    test 2181 line 364 fb: 146.810525
    test 2182 line 364 lat2: -46.029874698950
    test 2183 line 364 lon2: 30.599196661458
    test 2184 line 364 azi2: 146.810525207719
    test 2185 line 365 lat: 25.605076
    test 2186 line 365 lon: 14.382003
    test 2187 line 365 fb: 116.566847
    test 2188 line 365 lat2: 25.605076391429
    test 2189 line 365 lon2: 14.382002787798
    test 2190 line 365 azi2: 116.566847403824
    test 2191 line 366 lat: -15.052413
    test 2192 line 366 lon: 150.673460
    test 2193 line 366 fb: 64.906721
    test 2194 line 366 lat2: -15.052412502534
    test 2195 line 366 lon2: 150.673460237577
    test 2196 line 366 azi2: 64.906720897603
    test 2197 line 367 lat: -24.631882
    test 2198 line 367 lon: 170.403348
    test 2199 line 367 fb: 38.497784
    test 2200 line 367 lat2: -24.631881773331
    test 2201 line 367 lon2: 170.403348095216
    test 2202 line 367 azi2: 38.497783925432
    test 2203 line 368 lat: 84.347730
    test 2204 line 368 lon: 37.352130
    test 2205 line 368 fb: 38.599794
    test 2206 line 368 lat2: 84.347730272741
    test 2207 line 368 lon2: 37.352130023033
    test 2208 line 368 azi2: 38.599794179850
    test 2209 line 369 lat: 11.680773
    test 2210 line 369 lon: 170.552617
    test 2211 line 369 fb: 174.460436
    test 2212 line 369 lat2: 11.680772997529
    test 2213 line 369 lon2: 170.552617119135
    test 2214 line 369 azi2: 174.460435573783
    test 2215 line 370 lat: -4.129058
    test 2216 line 370 lon: 136.743627
    test 2217 line 370 fb: 142.147604
    test 2218 line 370 lat2: -4.129057873299
    test 2219 line 370 lon2: 136.743626644380
    test 2220 line 370 azi2: 142.147603954035
    test 2221 line 371 lat: 22.191782
    test 2222 line 371 lon: 164.962392
    test 2223 line 371 fb: 163.266967
    test 2224 line 371 lat2: 22.191782097783
    test 2225 line 371 lon2: 164.962391587580
    test 2226 line 371 azi2: 163.266967353376
    test 2227 line 372 lat: -20.517212
    test 2228 line 372 lon: 128.116444
    test 2229 line 372 fb: 110.769757
    test 2230 line 372 lat2: -20.517212185628
    test 2231 line 372 lon2: 128.116443546305
    test 2232 line 372 azi2: 110.769757212730
    test 2233 line 373 lat: -71.269219
    test 2234 line 373 lon: 117.744329
    test 2235 line 373 fb: 81.341006
    test 2236 line 373 lat2: -71.269218648518
    test 2237 line 373 lon2: 117.744328537214
    test 2238 line 373 azi2: 81.341005509003
    test 2239 line 374 lat: -28.381893
    test 2240 line 374 lon: 4.526029
    test 2241 line 374 fb: 176.348678
    test 2242 line 374 lat2: -28.381892766057
    test 2243 line 374 lon2: 4.526028955177
    test 2244 line 374 azi2: 176.348678015377
    test 2245 line 375 lat: -28.786090
    test 2246 line 375 lon: 25.937634
    test 2247 line 375 fb: 147.973102
    test 2248 line 375 lat2: -28.786089606638
    test 2249 line 375 lon2: 25.937634058027
    test 2250 line 375 azi2: 147.973102126478
    test 2251 line 376 lat: -37.872672
    test 2252 line 376 lon: 116.904193
    test 2253 line 376 fb: 88.568636
    test 2254 line 376 lat2: -37.872671755645
    test 2255 line 376 lon2: 116.904192578457
    test 2256 line 376 azi2: 88.568636418662
    test 2257 line 377 lat: -26.321447
    test 2258 line 377 lon: 85.206987
    test 2259 line 377 fb: 112.408109
    test 2260 line 377 lat2: -26.321446841940
    test 2261 line 377 lon2: 85.206986852001
    test 2262 line 377 azi2: 112.408108683681
    test 2263 line 378 lat: -54.824260
    test 2264 line 378 lon: 156.561574
    test 2265 line 378 fb: 45.534810
    test 2266 line 378 lat2: -54.824260467184
    test 2267 line 378 lon2: 156.561573965853
    test 2268 line 378 azi2: 45.534810497878
    test 2269 line 379 lat: -16.423550
    test 2270 line 379 lon: 36.685134
    test 2271 line 379 fb: 149.426790
    test 2272 line 379 lat2: -16.423550298805
    test 2273 line 379 lon2: 36.685133578511
    test 2274 line 379 azi2: 149.426789575292
    test 2275 line 380 lat: -16.806591
    test 2276 line 380 lon: 149.738610
    test 2277 line 380 fb: 108.898472
    test 2278 line 380 lat2: -16.806590952462
    test 2279 line 380 lon2: 149.738610286185
    test 2280 line 380 azi2: 108.898472198507
    test 2281 line 381 lat: 61.200095
    test 2282 line 381 lon: 179.666196
    test 2283 line 381 fb: 179.746894
    test 2284 line 381 lat2: 61.200095175201
    test 2285 line 381 lon2: 179.666196014679
    test 2286 line 381 azi2: 179.746893753530
    test 2287 line 382 lat: 66.474418
    test 2288 line 382 lon: 1.552183
    test 2289 line 382 fb: 2.088868
    test 2290 line 382 lat2: 66.474418401288
    test 2291 line 382 lon2: 1.552183188407
    test 2292 line 382 azi2: 2.088868324926
    test 2293 line 383 lat: -75.177220
    test 2294 line 383 lon: 158.741597
    test 2295 line 383 fb: 24.127094
    test 2296 line 383 lat2: -75.177219719926
    test 2297 line 383 lon2: 158.741596988185
    test 2298 line 383 azi2: 24.127093846134
    test 2299 line 384 lat: 43.592977
    test 2300 line 384 lon: 90.684526
    test 2301 line 384 fb: 91.539242
    test 2302 line 384 lat2: 43.592976578444
    test 2303 line 384 lon2: 90.684525887486
    test 2304 line 384 azi2: 91.539242394540
    test 2305 line 385 lat: -5.075415
    test 2306 line 385 lon: 101.127103
    test 2307 line 385 fb: 107.948022
    test 2308 line 385 lat2: -5.075415464229
    test 2309 line 385 lon2: 101.127103351067
    test 2310 line 385 azi2: 107.948021613622
    test 2311 line 386 lat: 50.406166
    test 2312 line 386 lon: 135.501939
    test 2313 line 386 fb: 162.003144
    test 2314 line 386 lat2: 50.406165949083
    test 2315 line 386 lon2: 135.501938931444
    test 2316 line 386 azi2: 162.003144394969
    test 2317 line 387 lat: -17.207733
    test 2318 line 387 lon: 43.634692
    test 2319 line 387 fb: 136.506793
    test 2320 line 387 lat2: -17.207732564306
    test 2321 line 387 lon2: 43.634692466982
    test 2322 line 387 azi2: 136.506792603897
    test 2323 line 388 lat: -28.917723
    test 2324 line 388 lon: 163.486470
    test 2325 line 388 fb: 38.990274
    test 2326 line 388 lat2: -28.917723347931
    test 2327 line 388 lon2: 163.486470248682
    test 2328 line 388 azi2: 38.990273918754
    test 2329 line 389 lat: -32.592414
    test 2330 line 389 lon: 76.048812
    test 2331 line 389 fb: 98.024249
    test 2332 line 389 lat2: -32.592414472935
    test 2333 line 389 lon2: 76.048812057267
    test 2334 line 389 azi2: 98.024248734062
    test 2335 line 390 lat: 50.602735
    test 2336 line 390 lon: 49.792893
    test 2337 line 390 fb: 110.500761
    test 2338 line 390 lat2: 50.602735331532
    test 2339 line 390 lon2: 49.792893095354
    test 2340 line 390 azi2: 110.500760610103
    test 2341 line 391 lat: -4.912232
    test 2342 line 391 lon: 142.681744
    test 2343 line 391 fb: 119.428358
    test 2344 line 391 lat2: -4.912231564840
    test 2345 line 391 lon2: 142.681743549937
    test 2346 line 391 azi2: 119.428358444443
    test 2347 line 392 lat: -45.213515
    test 2348 line 392 lon: 131.987859
    test 2349 line 392 fb: 96.014100
    test 2350 line 392 lat2: -45.213514932524
    test 2351 line 392 lon2: 131.987859404857
    test 2352 line 392 azi2: 96.014100177112
    test 2353 line 393 lat: -27.151096
    test 2354 line 393 lon: 127.729463
    test 2355 line 393 fb: 85.960623
    test 2356 line 393 lat2: -27.151095883523
    test 2357 line 393 lon2: 127.729463064736
    test 2358 line 393 azi2: 85.960623495334
    test 2359 line 394 lat: 8.000358
    test 2360 line 394 lon: 144.233747
    test 2361 line 394 fb: 142.364017
    test 2362 line 394 lat2: 8.000357843774
    test 2363 line 394 lon2: 144.233746766535
    test 2364 line 394 azi2: 142.364016793767
    test 2365 line 395 lat: -6.431774
    test 2366 line 395 lon: 170.549196
    test 2367 line 395 fb: 122.180851
    test 2368 line 395 lat2: -6.431773707290
    test 2369 line 395 lon2: 170.549196384306
    test 2370 line 395 azi2: 122.180850600243
    test 2371 line 396 lat: 62.834146
    test 2372 line 396 lon: 171.218298
    test 2373 line 396 fb: 175.117433
    test 2374 line 396 lat2: 62.834146216572
    test 2375 line 396 lon2: 171.218297548713
    test 2376 line 396 azi2: 175.117432600362
    test 2377 line 397 lat: 22.902814
    test 2378 line 397 lon: 70.233438
    test 2379 line 397 fb: 120.935912
    test 2380 line 397 lat2: 22.902813652262
    test 2381 line 397 lon2: 70.233438162142
    test 2382 line 397 azi2: 120.935911762169
    test 2383 line 398 lat: 22.584853
    test 2384 line 398 lon: 31.616865
    test 2385 line 398 fb: 107.124038
    test 2386 line 398 lat2: 22.584853282541
    test 2387 line 398 lon2: 31.616864803984
    test 2388 line 398 azi2: 107.124038156545
    test 2389 line 399 lat: 31.269173
    test 2390 line 399 lon: 65.399306
    test 2391 line 399 fb: 151.892600
    test 2392 line 399 lat2: 31.269173344204
    test 2393 line 399 lon2: 65.399305777763
    test 2394 line 399 azi2: 151.892599739667
    test 2395 line 400 lat: 35.519614
    test 2396 line 400 lon: 143.165122
    test 2397 line 400 fb: 161.479891
    test 2398 line 400 lat2: 35.519613515115
    test 2399 line 400 lon2: 143.165121509798
    test 2400 line 400 azi2: 161.479891246031
    test 2401 line 401 lat: -53.741922
    test 2402 line 401 lon: 67.121402
    test 2403 line 401 fb: 130.871188
    test 2404 line 401 lat2: -53.741921506580
    test 2405 line 401 lon2: 67.121402135047
    test 2406 line 401 azi2: 130.871188003209
    test 2407 line 402 lat: 9.046227
    test 2408 line 402 lon: 35.933737
    test 2409 line 402 fb: 175.770789
    test 2410 line 402 lat2: 9.046227267580
    test 2411 line 402 lon2: 35.933736921417
    test 2412 line 402 azi2: 175.770788535406
    test 2413 line 403 lat: 75.917034
    test 2414 line 403 lon: 125.150808
    test 2415 line 403 fb: 135.354467
    test 2416 line 403 lat2: 75.917034235438
    test 2417 line 403 lon2: 125.150808062636
    test 2418 line 403 azi2: 135.354466840051
    test 2419 line 404 lat: -39.724826
    test 2420 line 404 lon: 77.372087
    test 2421 line 404 fb: 111.852577
    test 2422 line 404 lat2: -39.724825618504  FAILED, KNOWN, expected -39.724825618503
    test 2423 line 404 lon2: 77.372086855267
    test 2424 line 404 azi2: 111.852577362108
    test 2425 line 405 lat: 3.917212
    test 2426 line 405 lon: 142.621752
    test 2427 line 405 fb: 124.176952
    test 2428 line 405 lat2: 3.917212154431
    test 2429 line 405 lon2: 142.621751764236
    test 2430 line 405 azi2: 124.176952499321
    test 2431 line 406 lat: 60.230364
    test 2432 line 406 lon: 26.245689
    test 2433 line 406 fb: 48.509486
    test 2434 line 406 lat2: 60.230364486607
    test 2435 line 406 lon2: 26.245688508507
    test 2436 line 406 azi2: 48.509486474608
    test 2437 line 407 lat: 29.597322
    test 2438 line 407 lon: 29.129808
    test 2439 line 407 fb: 79.288539
    test 2440 line 407 lat2: 29.597322070518
    test 2441 line 407 lon2: 29.129807944898
    test 2442 line 407 azi2: 79.288538667829
    test 2443 line 408 lat: -62.913760
    test 2444 line 408 lon: 14.845859
    test 2445 line 408 fb: 165.794536
    test 2446 line 408 lat2: -62.913759669564
    test 2447 line 408 lon2: 14.845859018930
    test 2448 line 408 azi2: 165.794535940950
    test 2449 line 409 lat: 15.360446
    test 2450 line 409 lon: 161.450680
    test 2451 line 409 fb: 164.457024
    test 2452 line 409 lat2: 15.360445685187
    test 2453 line 409 lon2: 161.450680426049
    test 2454 line 409 azi2: 164.457024354600
    test 2455 line 410 lat: -58.330109
    test 2456 line 410 lon: 17.628134
    test 2457 line 410 fb: 161.349788
    test 2458 line 410 lat2: -58.330108507597
    test 2459 line 410 lon2: 17.628133627705
    test 2460 line 410 azi2: 161.349788081184
    test 2461 line 411 lat: -68.514277
    test 2462 line 411 lon: 19.958792
    test 2463 line 411 fb: 162.262811
    test 2464 line 411 lat2: -68.514276940652
    test 2465 line 411 lon2: 19.958792438281
    test 2466 line 411 azi2: 162.262811488702
    test 2467 line 412 lat: -23.686766
    test 2468 line 412 lon: 77.544158
    test 2469 line 412 fb: 97.517041
    test 2470 line 412 lat2: -23.686765736999
    test 2471 line 412 lon2: 77.544158137101
    test 2472 line 412 azi2: 97.517041033585
    test 2473 line 413 lat: -50.843575
    test 2474 line 413 lon: 118.404202
    test 2475 line 413 fb: 75.928950
    test 2476 line 413 lat2: -50.843574559525
    test 2477 line 413 lon2: 118.404202153051
    test 2478 line 413 azi2: 75.928950296488
    test 2479 line 414 lat: 44.438742
    test 2480 line 414 lon: 152.028260
    test 2481 line 414 fb: 156.092336
    test 2482 line 414 lat2: 44.438741945021
    test 2483 line 414 lon2: 152.028260148130
    test 2484 line 414 azi2: 156.092336139519
    test 2485 line 415 lat: 33.820395
    test 2486 line 415 lon: 178.008342
    test 2487 line 415 fb: 177.679586
    test 2488 line 415 lat2: 33.820395378014
    test 2489 line 415 lon2: 178.008341908011
    test 2490 line 415 azi2: 177.679585823345
    test 2491 line 416 lat: 27.506735
    test 2492 line 416 lon: 153.242452
    test 2493 line 416 fb: 150.262824
    test 2494 line 416 lat2: 27.506735286152
    test 2495 line 416 lon2: 153.242452449881
    test 2496 line 416 azi2: 150.262824421351
    test 2497 line 417 lat: -31.250437
    test 2498 line 417 lon: 179.014499
    test 2499 line 417 fb: 178.103046
    test 2500 line 417 lat2: -31.250436707468
    test 2501 line 417 lon2: 179.014498940190
    test 2502 line 417 azi2: 178.103045898455
    test 2503 line 418 lat: 40.341542
    test 2504 line 418 lon: 109.605984
    test 2505 line 418 fb: 105.401958
    test 2506 line 418 lat2: 40.341542234586
    test 2507 line 418 lon2: 109.605984313079
    test 2508 line 418 azi2: 105.401958406556
    test 2509 line 419 lat: 48.318632
    test 2510 line 419 lon: 92.282799
    test 2511 line 419 fb: 111.987482
    test 2512 line 419 lat2: 48.318632112439
    test 2513 line 419 lon2: 92.282799489208
    test 2514 line 419 azi2: 111.987482299261
    test 2515 line 420 lat: 0.675299
    test 2516 line 420 lon: 6.789301
    test 2517 line 420 fb: 164.921926
    test 2518 line 420 lat2: 0.675299289459
    test 2519 line 420 lon2: 6.789300798072
    test 2520 line 420 azi2: 164.921926385405
    test 2521 line 421 lat: 33.232812
    test 2522 line 421 lon: 170.163205
    test 2523 line 421 fb: 175.445424
    test 2524 line 421 lat2: 33.232811536179
    test 2525 line 421 lon2: 170.163205247232  FAILED, KNOWN, expected 170.163205247231
    test 2526 line 421 azi2: 175.445424087910
    test 2527 line 422 lat: 51.425532
    test 2528 line 422 lon: 167.128188
    test 2529 line 422 fb: 169.431307
    test 2530 line 422 lat2: 51.425532151818
    test 2531 line 422 lon2: 167.128188073883
    test 2532 line 422 azi2: 169.431306547043
    test 2533 line 423 lat: 72.043795
    test 2534 line 423 lon: 23.320161
    test 2535 line 423 fb: 85.002463
    test 2536 line 423 lat2: 72.043794732818
    test 2537 line 423 lon2: 23.320160820556
    test 2538 line 423 azi2: 85.002463342037
    test 2539 line 424 lat: 55.279253
    test 2540 line 424 lon: 148.483684
    test 2541 line 424 fb: 155.614243
    test 2542 line 424 lat2: 55.279252586695
    test 2543 line 424 lon2: 148.483684405588
    test 2544 line 424 azi2: 155.614243012977
    test 2545 line 425 lat: 50.054601
    test 2546 line 425 lon: 43.609545
    test 2547 line 425 fb: 100.758451
    test 2548 line 425 lat2: 50.054601019930
    test 2549 line 425 lon2: 43.609545475731
    test 2550 line 425 azi2: 100.758450815354
    test 2551 line 426 lat: 31.194436
    test 2552 line 426 lon: 31.458476
    test 2553 line 426 fb: 92.204244
    test 2554 line 426 lat2: 31.194436445411
    test 2555 line 426 lon2: 31.458476146984
    test 2556 line 426 azi2: 92.204244235305
    test 2557 line 427 lat: 57.758262
    test 2558 line 427 lon: 164.499274
    test 2559 line 427 fb: 162.877999
    test 2560 line 427 lat2: 57.758262113137
    test 2561 line 427 lon2: 164.499274258053
    test 2562 line 427 azi2: 162.877999232894
    test 2563 line 428 lat: 27.006898
    test 2564 line 428 lon: 173.173812
    test 2565 line 428 fb: 177.878074
    test 2566 line 428 lat2: 27.006897756516
    test 2567 line 428 lon2: 173.173811781657
    test 2568 line 428 azi2: 177.878073603766
    test 2569 line 429 lat: -62.917581
    test 2570 line 429 lon: 18.990464
    test 2571 line 429 fb: 169.629168
    test 2572 line 429 lat2: -62.917580953804
    test 2573 line 429 lon2: 18.990464058493
    test 2574 line 429 azi2: 169.629168390979
    test 2575 line 430 lat: -43.128167
    test 2576 line 430 lon: 61.680974
    test 2577 line 430 fb: 135.269008
    test 2578 line 430 lat2: -43.128166633902
    test 2579 line 430 lon2: 61.680974170546
    test 2580 line 430 azi2: 135.269008366092
    test 2581 line 431 lat: -49.314417
    test 2582 line 431 lon: 55.826072
    test 2583 line 431 fb: 131.974574
    test 2584 line 431 lat2: -49.314417365795
    test 2585 line 431 lon2: 55.826071541563
    test 2586 line 431 azi2: 131.974573587520
    test 2587 line 432 lat: -24.322411
    test 2588 line 432 lon: 103.867391
    test 2589 line 432 fb: 139.458674
    test 2590 line 432 lat2: -24.322411486444
    test 2591 line 432 lon2: 103.867391100271
    test 2592 line 432 azi2: 139.458674175181
    test 2593 line 433 lat: -19.557319
    test 2594 line 433 lon: 81.358495
    test 2595 line 433 fb: 134.029610
    test 2596 line 433 lat2: -19.557318635270
    test 2597 line 433 lon2: 81.358494523202
    test 2598 line 433 azi2: 134.029609915778
    test 2599 line 434 lat: 7.830115
    test 2600 line 434 lon: 5.114172
    test 2601 line 434 fb: 175.025641
    test 2602 line 434 lat2: 7.830115253087
    test 2603 line 434 lon2: 5.114172330857
    test 2604 line 434 azi2: 175.025640902819
    test 2605 line 435 lat: -65.834623
    test 2606 line 435 lon: 41.772796
    test 2607 line 435 fb: 143.178050
    test 2608 line 435 lat2: -65.834622858584
    test 2609 line 435 lon2: 41.772796000787
    test 2610 line 435 azi2: 143.178050120951
    test 2611 line 436 lat: -7.997604
    test 2612 line 436 lon: 31.723397
    test 2613 line 436 fb: 153.896388
    test 2614 line 436 lat2: -7.997604143032
    test 2615 line 436 lon2: 31.723396618974
    test 2616 line 436 azi2: 153.896387549518
    test 2617 line 437 lat: -22.173130
    test 2618 line 437 lon: 164.896770
    test 2619 line 437 fb: 152.675597
    test 2620 line 437 lat2: -22.173129586699
    test 2621 line 437 lon2: 164.896770399383
    test 2622 line 437 azi2: 152.675596916021
    test 2623 line 438 lat: 35.085786
    test 2624 line 438 lon: 173.892271
    test 2625 line 438 fb: 171.931231
    test 2626 line 438 lat2: 35.085785799083
    test 2627 line 438 lon2: 173.892270533009
    test 2628 line 438 azi2: 171.931230872910
    test 2629 line 439 lat: -25.378865
    test 2630 line 439 lon: 2.197740
    test 2631 line 439 fb: 178.756775
    test 2632 line 439 lat2: -25.378865450269  FAILED, KNOWN, expected -25.378865450268
    test 2633 line 439 lon2: 2.197739985587
    test 2634 line 439 azi2: 178.756775063163
    test 2635 line 440 lat: -13.782608
    test 2636 line 440 lon: 143.084799
    test 2637 line 440 fb: 141.818572
    test 2638 line 440 lat2: -13.782608118540
    test 2639 line 440 lon2: 143.084798779239
    test 2640 line 440 azi2: 141.818572490275
    test 2641 line 441 lat: -16.657589
    test 2642 line 441 lon: 100.829440
    test 2643 line 441 fb: 94.804409
    test 2644 line 441 lat2: -16.657588778768
    test 2645 line 441 lon2: 100.829440071396
    test 2646 line 441 azi2: 94.804408628371
    test 2647 line 442 lat: 23.629666
    test 2648 line 442 lon: 148.675531
    test 2649 line 442 fb: 169.091767
    test 2650 line 442 lat2: 23.629665922502
    test 2651 line 442 lon2: 148.675530832608
    test 2652 line 442 azi2: 169.091766635020
    test 2653 line 443 lat: 4.022724
    test 2654 line 443 lon: 161.803702
    test 2655 line 443 fb: 141.272785
    test 2656 line 443 lat2: 4.022724409294
    test 2657 line 443 lon2: 161.803702045621
    test 2658 line 443 azi2: 141.272784545678
    test 2659 line 444 lat: 13.280168
    test 2660 line 444 lon: 20.120413
    test 2661 line 444 fb: 158.170551
    test 2662 line 444 lat2: 13.280167579164
    test 2663 line 444 lon2: 20.120413486875
    test 2664 line 444 azi2: 158.170551379189
    test 2665 line 445 lat: -47.521450
    test 2666 line 445 lon: 150.549196
    test 2667 line 445 fb: 44.718791
    test 2668 line 445 lat2: -47.521449956879
    test 2669 line 445 lon2: 150.549196046351
    test 2670 line 445 azi2: 44.718791294775
    test 2671 line 446 lat: 17.790615
    test 2672 line 446 lon: 141.461006
    test 2673 line 446 fb: 115.746784
    test 2674 line 446 lat2: 17.790615163216
    test 2675 line 446 lon2: 141.461005551791
    test 2676 line 446 azi2: 115.746784352318
    test 2677 line 447 lat: -26.519374
    test 2678 line 447 lon: 98.067906
    test 2679 line 447 fb: 113.253929
    test 2680 line 447 lat2: -26.519374288386
    test 2681 line 447 lon2: 98.067906321718
    test 2682 line 447 azi2: 113.253928642653
    test 2683 line 448 lat: -12.401139
    test 2684 line 448 lon: 73.327970
    test 2685 line 448 fb: 124.879499
    test 2686 line 448 lat2: -12.401138571717
    test 2687 line 448 lon2: 73.327969848986
    test 2688 line 448 azi2: 124.879499241464
    test 2689 line 449 lat: 61.619396
    test 2690 line 449 lon: 99.785406
    test 2691 line 449 fb: 107.998380
    test 2692 line 449 lat2: 61.619396375102
    test 2693 line 449 lon2: 99.785406498835
    test 2694 line 449 azi2: 107.998379654880
    test 2695 line 450 lat: 36.997252
    test 2696 line 450 lon: 56.015643
    test 2697 line 450 fb: 103.921663
    test 2698 line 450 lat2: 36.997252125041
    test 2699 line 450 lon2: 56.015642631106
    test 2700 line 450 azi2: 103.921662760483
    test 2701 line 451 lat: 37.824447
    test 2702 line 451 lon: 83.438440
    test 2703 line 451 fb: 89.229164
    test 2704 line 451 lat2: 37.824446788544
    test 2705 line 451 lon2: 83.438439603294
    test 2706 line 451 azi2: 89.229164462127
    test 2707 line 452 lat: 78.387864
    test 2708 line 452 lon: 118.814812
    test 2709 line 452 fb: 133.706108
    test 2710 line 452 lat2: 78.387863550790
    test 2711 line 452 lon2: 118.814812128945
    test 2712 line 452 azi2: 133.706108131229
    test 2713 line 453 lat: -21.219381
    test 2714 line 453 lon: 53.544400
    test 2715 line 453 fb: 108.462517
    test 2716 line 453 lat2: -21.219381398156
    test 2717 line 453 lon2: 53.544399883561
    test 2718 line 453 azi2: 108.462517491505
    test 2719 line 454 lat: 63.304502
    test 2720 line 454 lon: 132.034926
    test 2721 line 454 fb: 139.912627
    test 2722 line 454 lat2: 63.304502042590
    test 2723 line 454 lon2: 132.034925840674
    test 2724 line 454 azi2: 139.912627269623
    test 2725 line 455 lat: 13.515663
    test 2726 line 455 lon: 8.989766
    test 2727 line 455 fb: 35.949535
    test 2728 line 455 lat2: 13.515662875313
    test 2729 line 455 lon2: 8.989765670730
    test 2730 line 455 azi2: 35.949534634702
    test 2731 line 456 lat: -6.742624
    test 2732 line 456 lon: 4.531931
    test 2733 line 456 fb: 171.306863
    test 2734 line 456 lat2: -6.742624347861
    test 2735 line 456 lon2: 4.531931315168
    test 2736 line 456 azi2: 171.306863155411
    test 2737 line 457 lat: -24.910509
    test 2738 line 457 lon: 128.137682
    test 2739 line 457 fb: 121.711631
    test 2740 line 457 lat2: -24.910509138681
    test 2741 line 457 lon2: 128.137681811633
    test 2742 line 457 azi2: 121.711631340407
    test 2743 line 458 lat: -40.687591
    test 2744 line 458 lon: 76.389897
    test 2745 line 458 fb: 116.394433
    test 2746 line 458 lat2: -40.687590598372
    test 2747 line 458 lon2: 76.389897347637
    test 2748 line 458 azi2: 116.394432846311
    test 2749 line 459 lat: 50.593808
    test 2750 line 459 lon: 155.175630
    test 2751 line 459 fb: 149.533910
    test 2752 line 459 lat2: 50.593807692461
    test 2753 line 459 lon2: 155.175629862288
    test 2754 line 459 azi2: 149.533910451363
    test 2755 line 460 lat: 12.198222
    test 2756 line 460 lon: 165.839456
    test 2757 line 460 fb: 172.783459
    test 2758 line 460 lat2: 12.198221826512
    test 2759 line 460 lon2: 165.839456381799
    test 2760 line 460 azi2: 172.783459292833
    test 2761 line 461 lat: 34.436568
    test 2762 line 461 lon: 7.117338
    test 2763 line 461 fb: 169.786492
    test 2764 line 461 lat2: 34.436568298724
    test 2765 line 461 lon2: 7.117337693395
    test 2766 line 461 azi2: 169.786491850891
    test 2767 line 462 lat: -3.145255
    test 2768 line 462 lon: 30.502293
    test 2769 line 462 fb: 103.563749
    test 2770 line 462 lat2: -3.145254788627
    test 2771 line 462 lon2: 30.502293345016
    test 2772 line 462 azi2: 103.563748974525
    test 2773 line 463 lat: 16.264722
    test 2774 line 463 lon: 85.497207
    test 2775 line 463 fb: 116.933863
    test 2776 line 463 lat2: 16.264722156696
    test 2777 line 463 lon2: 85.497207496627  FAILED, KNOWN, expected 85.497207496626
    test 2778 line 463 azi2: 116.933862512764  FAILED, KNOWN, expected 116.933862512763
    test 2779 line 464 lat: 1.433605
    test 2780 line 464 lon: 4.165940
    test 2781 line 464 fb: 170.272462
    test 2782 line 464 lat2: 1.433605151882
    test 2783 line 464 lon2: 4.165940219923
    test 2784 line 464 azi2: 170.272462365963
    test 2785 line 465 lat: -43.326676
    test 2786 line 465 lon: 153.148367
    test 2787 line 465 fb: 42.921394
    test 2788 line 465 lat2: -43.326676023438
    test 2789 line 465 lon2: 153.148366512832
    test 2790 line 465 azi2: 42.921393854868
    test 2791 line 466 lat: 20.405242
    test 2792 line 466 lon: 178.247549
    test 2793 line 466 fb: 178.801033
    test 2794 line 466 lat2: 20.405242225208
    test 2795 line 466 lon2: 178.247549230810
    test 2796 line 466 azi2: 178.801032702563
    test 2797 line 467 lat: -22.482832
    test 2798 line 467 lon: 140.761211
    test 2799 line 467 fb: 82.371737
    test 2800 line 467 lat2: -22.482831544520
    test 2801 line 467 lon2: 140.761210729739
    test 2802 line 467 azi2: 82.371736722715
    test 2803 line 468 lat: -41.151672
    test 2804 line 468 lon: 38.419124
    test 2805 line 468 fb: 148.221356
    test 2806 line 468 lat2: -41.151672070525
    test 2807 line 468 lon2: 38.419124284860
    test 2808 line 468 azi2: 148.221356053664
    test 2809 line 469 lat: -63.212817
    test 2810 line 469 lon: 15.714998
    test 2811 line 469 fb: 166.777356
    test 2812 line 469 lat2: -63.212816746477
    test 2813 line 469 lon2: 15.714998156904
    test 2814 line 469 azi2: 166.777356149473
    test 2815 line 470 lat: -33.892681
    test 2816 line 470 lon: 120.971496
    test 2817 line 470 fb: 170.404814
    test 2818 line 470 lat2: -33.892680517408
    test 2819 line 470 lon2: 120.971495805190
    test 2820 line 470 azi2: 170.404813772447
    test 2821 line 471 lat: -17.570093
    test 2822 line 471 lon: 137.259693
    test 2823 line 471 fb: 175.973637
    test 2824 line 471 lat2: -17.570092516031
    test 2825 line 471 lon2: 137.259693182063
    test 2826 line 471 azi2: 175.973637230107
    test 2827 line 472 lat: -24.221028
    test 2828 line 472 lon: 33.960052
    test 2829 line 472 fb: 130.753279
    test 2830 line 472 lat2: -24.221027716301  FAILED, KNOWN, expected -24.221027716300
    test 2831 line 472 lon2: 33.960051796001
    test 2832 line 472 azi2: 130.753279335550
    test 2833 line 473 lat: -48.849133
    test 2834 line 473 lon: 176.601435
    test 2835 line 473 fb: 5.037779
    test 2836 line 473 lat2: -48.849132604777
    test 2837 line 473 lon2: 176.601435366477
    test 2838 line 473 azi2: 5.037779120578
    test 2839 line 474 lat: -50.620233
    test 2840 line 474 lon: 22.061011
    test 2841 line 474 fb: 159.730881
    test 2842 line 474 lat2: -50.620232529081
    test 2843 line 474 lon2: 22.061010504617
    test 2844 line 474 azi2: 159.730880799186
    test 2845 line 475 lat: -11.354875
    test 2846 line 475 lon: 76.258812
    test 2847 line 475 fb: 104.014357
    test 2848 line 475 lat2: -11.354875472483
    test 2849 line 475 lon2: 76.258812283705
    test 2850 line 475 azi2: 104.014356938495
    test 2851 line 476 lat: -19.640051
    test 2852 line 476 lon: 105.698979
    test 2853 line 476 fb: 156.650619
    test 2854 line 476 lat2: -19.640050782646
    test 2855 line 476 lon2: 105.698978700604
    test 2856 line 476 azi2: 156.650619021389
    test 2857 line 477 lat: 83.855267
    test 2858 line 477 lon: 112.674858
    test 2859 line 477 fb: 122.383784
    test 2860 line 477 lat2: 83.855266840098
    test 2861 line 477 lon2: 112.674858066811  FAILED, KNOWN, expected 112.674858066810
    test 2862 line 477 azi2: 122.383784147681
    test 2863 line 478 lat: 48.296558
    test 2864 line 478 lon: 34.072463
    test 2865 line 478 fb: 61.415867
    test 2866 line 478 lat2: 48.296557545891
    test 2867 line 478 lon2: 34.072462542900
    test 2868 line 478 azi2: 61.415867309157
    test 2869 line 479 lat: 20.173772
    test 2870 line 479 lon: 12.682422
    test 2871 line 479 fb: 165.220898
    test 2872 line 479 lat2: 20.173772376863
    test 2873 line 479 lon2: 12.682422408956
    test 2874 line 479 azi2: 165.220897942891
    test 2875 line 480 lat: 47.501521
    test 2876 line 480 lon: 54.338775
    test 2877 line 480 fb: 80.572388
    test 2878 line 480 lat2: 47.501521345953
    test 2879 line 480 lon2: 54.338775236773
    test 2880 line 480 azi2: 80.572387690286
    test 2881 line 481 lat: -34.023172
    test 2882 line 481 lon: 174.310259
    test 2883 line 481 fb: 123.138509
    test 2884 line 481 lat2: -34.023171607796
    test 2885 line 481 lon2: 174.310258612178
    test 2886 line 481 azi2: 123.138509441522
    test 2887 line 482 lat: -31.540913
    test 2888 line 482 lon: 52.441924
    test 2889 line 482 fb: 155.194513
    test 2890 line 482 lat2: -31.540912691186
    test 2891 line 482 lon2: 52.441923606881  FAILED, KNOWN, expected 52.441923606882
    test 2892 line 482 azi2: 155.194512958367
    test 2893 line 483 lat: 64.121649
    test 2894 line 483 lon: 21.295234
    test 2895 line 483 fb: 51.966943
    test 2896 line 483 lat2: 64.121648788158
    test 2897 line 483 lon2: 21.295234110583
    test 2898 line 483 azi2: 51.966943039534
    test 2899 line 484 lat: -4.599613
    test 2900 line 484 lon: 107.727091
    test 2901 line 484 fb: 109.270070
    test 2902 line 484 lat2: -4.599612537190
    test 2903 line 484 lon2: 107.727090701893
    test 2904 line 484 azi2: 109.270070124629
    test 2905 line 485 lat: -16.799515
    test 2906 line 485 lon: 43.675397
    test 2907 line 485 fb: 144.940350
    test 2908 line 485 lat2: -16.799514501718
    test 2909 line 485 lon2: 43.675397103786  FAILED, KNOWN, expected 43.675397103785
    test 2910 line 485 azi2: 144.940350340820
    test 2911 line 486 lat: -16.337411
    test 2912 line 486 lon: 13.110283
    test 2913 line 486 fb: 167.467077
    test 2914 line 486 lat2: -16.337410785184
    test 2915 line 486 lon2: 13.110282576579
    test 2916 line 486 azi2: 167.467077049713
    test 2917 line 487 lat: -26.145379
    test 2918 line 487 lon: 9.977868
    test 2919 line 487 fb: 171.929335
    test 2920 line 487 lat2: -26.145378737931
    test 2921 line 487 lon2: 9.977868070750
    test 2922 line 487 azi2: 171.929335050809
    test 2923 line 488 lat: -3.245748
    test 2924 line 488 lon: 71.931981
    test 2925 line 488 fb: 124.120047
    test 2926 line 488 lat2: -3.245748416402
    test 2927 line 488 lon2: 71.931980979620
    test 2928 line 488 azi2: 124.120046609527
    test 2929 line 489 lat: 72.975644
    test 2930 line 489 lon: 36.459313
    test 2931 line 489 fb: 49.411324
    test 2932 line 489 lat2: 72.975644407376
    test 2933 line 489 lon2: 36.459312843012
    test 2934 line 489 azi2: 49.411324496539
    test 2935 line 490 lat: 50.342418
    test 2936 line 490 lon: 35.445910
    test 2937 line 490 fb: 43.087650
    test 2938 line 490 lat2: 50.342417843481
    test 2939 line 490 lon2: 35.445910446930
    test 2940 line 490 azi2: 43.087650398316
    test 2941 line 491 lat: -22.878804
    test 2942 line 491 lon: 69.376306
    test 2943 line 491 fb: 102.211558
    test 2944 line 491 lat2: -22.878804028267
    test 2945 line 491 lon2: 69.376306288000
    test 2946 line 491 azi2: 102.211557813582
    test 2947 line 492 lat: 21.254912
    test 2948 line 492 lon: 21.899215
    test 2949 line 492 fb: 92.966926
    test 2950 line 492 lat2: 21.254912121078
    test 2951 line 492 lon2: 21.899214754868
    test 2952 line 492 azi2: 92.966926161390
    test 2953 line 493 lat: 26.486641
    test 2954 line 493 lon: 19.097603
    test 2955 line 493 fb: 158.053447
    test 2956 line 493 lat2: 26.486640906235
    test 2957 line 493 lon2: 19.097602913800
    test 2958 line 493 azi2: 158.053446850267
    test 2959 line 494 lat: 43.041538
    test 2960 line 494 lon: 114.186950
    test 2961 line 494 fb: 155.795323
    test 2962 line 494 lat2: 43.041538374784
    test 2963 line 494 lon2: 114.186949886941
    test 2964 line 494 azi2: 155.795322500736
    test 2965 line 495 lat: -10.570764
    test 2966 line 495 lon: 107.625834
    test 2967 line 495 fb: 98.142401
    test 2968 line 495 lat2: -10.570763915882
    test 2969 line 495 lon2: 107.625834147204
    test 2970 line 495 azi2: 98.142400502747
    test 2971 line 496 lat: 12.624313
    test 2972 line 496 lon: 139.841077
    test 2973 line 496 fb: 148.385662
    test 2974 line 496 lat2: 12.624313141297
    test 2975 line 496 lon2: 139.841076840613
    test 2976 line 496 azi2: 148.385661923898
    test 2977 line 497 lat: -25.169999
    test 2978 line 497 lon: 33.175749
    test 2979 line 497 fb: 169.905377
    test 2980 line 497 lat2: -25.169998746665
    test 2981 line 497 lon2: 33.175749310362
    test 2982 line 497 azi2: 169.905376778384
    test 2983 line 498 lat: -41.360282
    test 2984 line 498 lon: 147.341948
    test 2985 line 498 fb: 136.551910
    test 2986 line 498 lat2: -41.360281944908
    test 2987 line 498 lon2: 147.341948469937
    test 2988 line 498 azi2: 136.551910060918
    test 2989 line 499 lat: 39.182099
    test 2990 line 499 lon: 150.590705
    test 2991 line 499 fb: 165.522951
    test 2992 line 499 lat2: 39.182099298590
    test 2993 line 499 lon2: 150.590705311219
    test 2994 line 499 azi2: 165.522950851635
    test 2995 line 500 lat: -57.494441
    test 2996 line 500 lon: 113.054057
    test 2997 line 500 fb: 130.988277
    test 2998 line 500 lat2: -57.494440629886
    test 2999 line 500 lon2: 113.054056725195
    test 3000 line 500 azi2: 130.988276746436
    test 3001 WGS84.KsOrder: 8

    28 of 3001 testEllipsoidalGeodTest.py tests (0.9%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 1.612 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testEllipsoids.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.EcefKarney from .ecef by testEllipsoids.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.Ellipsoid2 from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testEllipsoids.py line 11
# lazily imported pygeodesy.a_b2f_ from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.a_b2f2 from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.a_b2n from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.a_f2Tuple from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.b_f2a from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.b_f_2a from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.circle4 from .utily by testEllipsoids.py line 11
# lazily imported pygeodesy.e2f from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.f_2f from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.fstr from .streprs by testEllipsoids.py line 11
# lazily imported pygeodesy.hypot_ from .fmath by testEllipsoids.py line 11
# lazily imported pygeodesy.n2e2 from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.n2f from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testEllipsoids.py line 11
# lazily imported pygeodesy.R_M from .constants by testEllipsoids.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testEllipsoids.py line 11

    testing testEllipsoids.py 24.06.24 (module pygeodesy.ellipsoids 24.06.24) isLazy=3
    test 1 ellipsoid: True
    test 2 TestEllipsoid: name='TestEllipsoid', a=1000, f=0, f_=0, b=1000

    testWGS84(pygeodesy.ellipsoids, 24.06.24)
    test 3 R1: 6371008.7714
    test 4 R2: 6371007.2
    test 5 R3: 6371000.8
    test 6 A: 6367449.1
# lazily imported pygeodesy.elliptic by ellipsoids.py line 842
    test 7 L: 10001965.7
    test 8 Rrectifying: 6367449.1
    test 9 Rgeometric: 6367435.7
    test 10 Rgeocentric: 6378137.000
    test 11 Rgeocentric: 6367489.544
    test 12 Rgeocentric: 6356752.314
    test 13 Rlat: 6378137.000
    test 14 Rlat: 6367444.657
    test 15 Rlat: 6356752.314
    test 16 circle4.radius: 6378137.000
    test 17 circle4.radius: 4517590.879
    test 18 circle4.radius: 0.000
    test 19 distance2: 156903.472, 45.192
    test 20 distance2: 1569034.719, 45.192
    test 21 distance2: 1400742.676, 37.563
    test 22 distance2: 1179164.848, 18.896
    test 23 roc2: 6335439.327, 6378137.0
    test 24 roc2: 6367381.816, 6388838.29
    test 25 roc2: 6399593.626, 6399593.626
    test 26 rocBearing: 6335439.327
    test 27 rocBearing: 6378092.008
    test 28 rocBearing: 6399593.626
    test 29 rocGauss: 6356752.314
    test 30 rocGauss: 6378101.030
    test 31 rocGauss: 6399593.626
    test 32 rocMean: 6356716.465
    test 33 rocMean: 6378092.008
    test 34 rocMean: 6399593.626
    test 35 rocMeridional: 6335439.327
    test 36 rocMeridional: 6367381.816
    test 37 rocMeridional: 6399593.626
    test 38 rocPrimeVertical: 6378137.0
    test 39 rocPrimeVertical: 6388838.29
    test 40 rocPrimeVertical: 6399593.626

    testGRS80(pygeodesy.ellipsoids, 24.06.24)
    test 41 R1: 6371008.7714
    test 42 R2: 6371007.2
    test 43 R3: 6371000.8
    test 44 A: 6367449.1
    test 45 L: 10001965.7
    test 46 Rrectifying: 6367449.1
    test 47 Rgeometric: 6367435.7
    test 48 Rgeocentric: 6378137.000
    test 49 Rgeocentric: 6367489.544
    test 50 Rgeocentric: 6356752.314
    test 51 Rlat: 6378137.000
    test 52 Rlat: 6367444.657
    test 53 Rlat: 6356752.314
    test 54 circle4.radius: 6378137.000
    test 55 circle4.radius: 4517590.879
    test 56 circle4.radius: 0.000
    test 57 distance2: 156903.472, 45.192
    test 58 distance2: 1569034.719, 45.192
    test 59 distance2: 1400742.676, 37.563
    test 60 distance2: 1179164.848, 18.896
    test 61 roc2: 6335439.327, 6378137.0
    test 62 roc2: 6367381.816, 6388838.29
    test 63 roc2: 6399593.626, 6399593.626
    test 64 rocBearing: 6335439.327
    test 65 rocBearing: 6378092.008
    test 66 rocBearing: 6399593.626
    test 67 rocGauss: 6356752.314
    test 68 rocGauss: 6378101.030
    test 69 rocGauss: 6399593.626
    test 70 rocMean: 6356716.465
    test 71 rocMean: 6378092.008
    test 72 rocMean: 6399593.626
    test 73 rocMeridional: 6335439.327
    test 74 rocMeridional: 6367381.816
    test 75 rocMeridional: 6399593.626
    test 76 rocPrimeVertical: 6378137.0
    test 77 rocPrimeVertical: 6388838.29
    test 78 rocPrimeVertical: 6399593.626

    test<function Ellipsoid.__init__ at 0x105552160>(pygeodesy.ellipsoids, 24.06.24)
    test 79 a, b, None: 2.0
    test 80 a, None, f_: 500.0

    testWGS84(pygeodesy.ellipsoids, 24.06.24)
    test 81 WGS84.copy: True
    test 82 WGS84.copy: True
    test 83 WGS84.find: None
    test 84 WGS84.a2_b: 6399593.625758
    test 85 WGS84.b2_a: 6335439.327293
    test 86 WGS84.R2: 6371007.180918
    test 87 WGS84.c2: 40589732499315
    test 88 WGS84.es: 0.081819
    test 89 WGS84.e22: 0.006739
    test 90 WGS84.f2: 0.003364
    test 91 WGS84.m2degrees: 90
    test 92 WGS84.degrees2m: 10018754
    test 93 WGS84.area: 5.101e+14
    test 94 WGS84.volume: 1.083e+21
    test 95 WGS84.ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 96 WGS84.ecef: WGS84
    test 97 WGS84: name='WGS84', a=6378137, f=0.0033528107, f_=298.257223563, b=6356752.3142451793, f2=0.0033640898, n=0.0016792204, e=0.0818191908, e2=0.00669438, e21=0.99330562, e22=0.0067394967, e32=0.0033584313, A=6367449.1458234144, L=10001965.7293127235, R1=6371008.7714150595, R2=6371007.1809184738, R3=6371000.7900091587, Rbiaxial=6367453.6345163295, Rtriaxial=6372797.5559594007
    test 98 WGS84.: A=6367449.1458234144, e=0.0818191908, f_=298.2572235630, n=0.0016792204 (1.5612511284e-17)

    testKruegers(pygeodesy.ellipsoids, 24.06.24)
    test 99 WGS84.AlphaKs: 8.377318206245e-04, 7.608527773572e-07, 1.197645503242e-09, 2.429170680397e-12, 5.711818370428e-15, 1.47999793138e-17, 4.107624109371e-20, 1.210785038923e-22
    test 100 WGS84.BetaKs : 8.377321640579e-04, 5.90587015222e-08, 1.673482665344e-10, 2.164798110491e-13, 3.787930968626e-16, 7.236769021816e-19, 1.493479824778e-21, 3.259522545838e-24
    test 101 WGS84.AlphaKs: 8.377318206245e-04, 7.608527773572e-07, 1.197645503329e-09, 2.429170607201e-12, 5.711757677866e-15, 1.491117731258e-17
    test 102 WGS84.BetaKs : 8.377321640579e-04, 5.90587015222e-08, 1.673482665284e-10, 2.164798040063e-13, 3.787978046169e-16, 7.248748890694e-19
    test 103 WGS84.AlphaKs: 8.377318206304e-04, 7.608527714249e-07, 1.197638001561e-09, 2.443376194522e-12
    test 104 WGS84.BetaKs : 8.377321640601e-04, 5.905869567934e-08, 1.673488880355e-10, 2.167737763022e-13

    testProlate(pygeodesy.ellipsoids, 24.06.24)
    test 105 a [Radius_]: 6356752.314
    test 106 b [Radius_]: 6378137.000
    test 107 n [Float]: -0.002
    test 108 R1 [Radius]: 6363880.543
    test 109 R2 [Radius]: 6363878.941
    test 110 R3 [Radius]: 6363872.564
    test 111 Rbiaxial [Radius]: 6367453.635
    test 112 Rgeometric [Radius]: 6367435.680
    test 113 c2 [Meter2]: 40498955180263.188
    test 114 area [Meter2]: 508924880289508.500
    test 115 volume [Meter3]: 1079575530747445379072.000

    testAuxiliaryLats WGS84(pygeodesy.ellipsoids, 24.06.24)
    test 116 isEllipsoidal: True
    test 117 isOblate: True
    test 118 isProlate: False
    test 119 isSpherical: False
# lazily imported pygeodesy.albers by ellipsoids.py line 381
    test 120 auxAuthalic(-90): -90.0
    test 121 name: auxAuthalic
    test 122 inverse: lat (-90.0)
    test 123 auxConformal(-90): -90.0
    test 124 name: auxConformal
    test 125 inverse: lat (-90.0)
    test 126 auxGeocentric(-90): -90.0
    test 127 name: auxGeocentric
    test 128 inverse: lat (-90.0)
    test 129 auxIsometric(-90): -2178.287790219
    test 130 name: auxIsometric
    test 131 inverse: lat (-90.0)
    test 132 auxParametric(-90): -90.0
    test 133 name: auxParametric
    test 134 inverse: lat (-90.0)
    test 135 auxRectifying(-90): -90.0
    test 136 name: auxRectifying
    test 137 inverse: lat (-90.0)
    test 138 auxAuthalic(-60): -59.88878557
    test 139 name: auxAuthalic
    test 140 inverse: lat (-60.0)
    test 141 auxConformal(-60): -59.833216158
    test 142 name: auxConformal
    test 143 inverse: lat (-60.0)
    test 144 auxGeocentric(-60): -59.83307615
    test 145 name: auxGeocentric
    test 146 inverse: lat (-60.0)
    test 147 auxIsometric(-60): -75.123399226
    test 148 name: auxIsometric
    test 149 inverse: lat (-60.0)
    test 150 auxParametric(-60): -59.916607797
    test 151 name: auxParametric
    test 152 inverse: lat (-60.0)
    test 153 auxRectifying(-60): -59.874885594
    test 154 name: auxRectifying
    test 155 inverse: lat (-60.0)
    test 156 auxAuthalic(-30): -29.888997034
    test 157 name: auxAuthalic
    test 158 inverse: lat (-30.0)
    test 159 auxConformal(-30): -29.833682042
    test 160 name: auxConformal
    test 161 inverse: lat (-30.0)
    test 162 auxGeocentric(-30): -29.83363581
    test 163 name: auxGeocentric
    test 164 inverse: lat (-30.0)
    test 165 auxIsometric(-30): -31.281036776
    test 166 name: auxIsometric
    test 167 inverse: lat (-30.0)
    test 168 auxParametric(-30): -29.916747713
    test 169 name: auxParametric
    test 170 inverse: lat (-30.0)
    test 171 auxRectifying(-30): -29.875147936
    test 172 name: auxRectifying
    test 173 inverse: lat (-30.0)
    test 174 auxAuthalic(0): 0.0
    test 175 name: auxAuthalic
    test 176 inverse: lat (0.0)
    test 177 auxConformal(0): 0.0
    test 178 name: auxConformal
    test 179 inverse: lat (0.0)
    test 180 auxGeocentric(0): 0.0
    test 181 name: auxGeocentric
    test 182 inverse: lat (0.0)
    test 183 auxIsometric(0): 0.0
    test 184 name: auxIsometric
    test 185 inverse: lat (0.0)
    test 186 auxParametric(0): 0.0
    test 187 name: auxParametric
    test 188 inverse: lat (0.0)
    test 189 auxRectifying(0): 0.0
    test 190 name: auxRectifying
    test 191 inverse: lat (0.0)
    test 192 auxAuthalic(30): 29.888997034
    test 193 name: auxAuthalic
    test 194 inverse: lat (30.0)
    test 195 auxConformal(30): 29.833682042
    test 196 name: auxConformal
    test 197 inverse: lat (30.0)
    test 198 auxGeocentric(30): 29.83363581
    test 199 name: auxGeocentric
    test 200 inverse: lat (30.0)
    test 201 auxIsometric(30): 31.281036776
    test 202 name: auxIsometric
    test 203 inverse: lat (30.0)
    test 204 auxParametric(30): 29.916747713
    test 205 name: auxParametric
    test 206 inverse: lat (30.0)
    test 207 auxRectifying(30): 29.875147936
    test 208 name: auxRectifying
    test 209 inverse: lat (30.0)
    test 210 auxAuthalic(60): 59.88878557
    test 211 name: auxAuthalic
    test 212 inverse: lat (60.0)
    test 213 auxConformal(60): 59.833216158
    test 214 name: auxConformal
    test 215 inverse: lat (60.0)
    test 216 auxGeocentric(60): 59.83307615
    test 217 name: auxGeocentric
    test 218 inverse: lat (60.0)
    test 219 auxIsometric(60): 75.123399226
    test 220 name: auxIsometric
    test 221 inverse: lat (60.0)
    test 222 auxParametric(60): 59.916607797
    test 223 name: auxParametric
    test 224 inverse: lat (60.0)
    test 225 auxRectifying(60): 59.874885594
    test 226 name: auxRectifying
    test 227 inverse: lat (60.0)
    test 228 auxAuthalic(90): 90.0
    test 229 name: auxAuthalic
    test 230 inverse: lat (90.0)
    test 231 auxConformal(90): 90.0
    test 232 name: auxConformal
    test 233 inverse: lat (90.0)
    test 234 auxGeocentric(90): 90.0
    test 235 name: auxGeocentric
    test 236 inverse: lat (90.0)
    test 237 auxIsometric(90): 2178.287790219
    test 238 name: auxIsometric
    test 239 inverse: lat (90.0)
    test 240 auxParametric(90): 90.0
    test 241 name: auxParametric
    test 242 inverse: lat (90.0)
    test 243 auxRectifying(90): 90.0
    test 244 name: auxRectifying
    test 245 inverse: lat (90.0)

    testAuxiliaryLats Prolate(pygeodesy.ellipsoids, 24.06.24)
    test 246 isEllipsoidal: True
    test 247 isOblate: False
    test 248 isProlate: True
    test 249 isSpherical: False
    test 250 auxAuthalic(-90): -90.0
    test 251 name: auxAuthalic
    test 252 inverse: lat (-90.0)
    test 253 auxConformal(-90): -90.0
    test 254 name: auxConformal
    test 255 inverse: lat (-90.0)
    test 256 auxGeocentric(-90): -90.0
    test 257 name: auxGeocentric
    test 258 inverse: lat (-90.0)
    test 259 auxIsometric(-90): -2179.057490028
    test 260 name: auxIsometric
    test 261 inverse: lat (-90.0)
    test 262 auxParametric(-90): -90.0
    test 263 name: auxParametric
    test 264 inverse: lat (-90.0)
    test 265 auxRectifying(-90): -90.0
    test 266 name: auxRectifying
    test 267 inverse: lat (-90.0)
    test 268 auxAuthalic(-60): -60.110978127
    test 269 name: auxAuthalic
    test 270 inverse: lat (-60.0)
    test 271 auxConformal(-60): -60.16650401
    test 272 name: auxConformal
    test 273 inverse: lat (-60.0)
    test 274 auxGeocentric(-60): -60.16636419
    test 275 name: auxGeocentric
    test 276 inverse: lat (-60.0)
    test 277 auxIsometric(-60): -75.789978689
    test 278 name: auxIsometric
    test 279 inverse: lat (-60.0)
    test 280 auxParametric(-60): -60.083252287
    test 281 name: auxParametric
    test 282 inverse: lat (-60.0)
    test 283 auxRectifying(-60): -60.041947439
    test 284 name: auxRectifying
    test 285 inverse: lat (-60.0)
    test 286 auxAuthalic(-30): -30.11118952
    test 287 name: auxAuthalic
    test 288 inverse: lat (-30.0)
    test 289 auxConformal(-30): -30.166970897
    test 290 name: auxConformal
    test 291 inverse: lat (-30.0)
    test 292 auxGeocentric(-30): -30.16692385
    test 293 name: auxGeocentric
    test 294 inverse: lat (-30.0)
    test 295 auxIsometric(-30): -31.665887766
    test 296 name: auxIsometric
    test 297 inverse: lat (-30.0)
    test 298 auxParametric(-30): -30.083392203
    test 299 name: auxParametric
    test 300 inverse: lat (-30.0)
    test 301 auxRectifying(-30): -30.041931117
    test 302 name: auxRectifying
    test 303 inverse: lat (-30.0)
    test 304 auxAuthalic(0): 0.0
    test 305 name: auxAuthalic
    test 306 inverse: lat (0.0)
    test 307 auxConformal(0): 0.0
    test 308 name: auxConformal
    test 309 inverse: lat (0.0)
    test 310 auxGeocentric(0): 0.0
    test 311 name: auxGeocentric
    test 312 inverse: lat (0.0)
    test 313 auxIsometric(0): 0.0
    test 314 name: auxIsometric
    test 315 inverse: lat (0.0)
    test 316 auxParametric(0): 0.0
    test 317 name: auxParametric
    test 318 inverse: lat (0.0)
    test 319 auxRectifying(0): 0.0
    test 320 name: auxRectifying
    test 321 inverse: lat (0.0)
    test 322 auxAuthalic(30): 30.11118952
    test 323 name: auxAuthalic
    test 324 inverse: lat (30.0)
    test 325 auxConformal(30): 30.166970897
    test 326 name: auxConformal
    test 327 inverse: lat (30.0)
    test 328 auxGeocentric(30): 30.16692385
    test 329 name: auxGeocentric
    test 330 inverse: lat (30.0)
    test 331 auxIsometric(30): 31.665887766
    test 332 name: auxIsometric
    test 333 inverse: lat (30.0)
    test 334 auxParametric(30): 30.083392203
    test 335 name: auxParametric
    test 336 inverse: lat (30.0)
    test 337 auxRectifying(30): 30.041931117
    test 338 name: auxRectifying
    test 339 inverse: lat (30.0)
    test 340 auxAuthalic(60): 60.110978127
    test 341 name: auxAuthalic
    test 342 inverse: lat (60.0)
    test 343 auxConformal(60): 60.16650401
    test 344 name: auxConformal
    test 345 inverse: lat (60.0)
    test 346 auxGeocentric(60): 60.16636419
    test 347 name: auxGeocentric
    test 348 inverse: lat (60.0)
    test 349 auxIsometric(60): 75.789978689
    test 350 name: auxIsometric
    test 351 inverse: lat (60.0)
    test 352 auxParametric(60): 60.083252287
    test 353 name: auxParametric
    test 354 inverse: lat (60.0)
    test 355 auxRectifying(60): 60.041947439
    test 356 name: auxRectifying
    test 357 inverse: lat (60.0)
    test 358 auxAuthalic(90): 90.0
    test 359 name: auxAuthalic
    test 360 inverse: lat (90.0)
    test 361 auxConformal(90): 90.0
    test 362 name: auxConformal
    test 363 inverse: lat (90.0)
    test 364 auxGeocentric(90): 90.0
    test 365 name: auxGeocentric
    test 366 inverse: lat (90.0)
    test 367 auxIsometric(90): 2179.057490028
    test 368 name: auxIsometric
    test 369 inverse: lat (90.0)
    test 370 auxParametric(90): 90.0
    test 371 name: auxParametric
    test 372 inverse: lat (90.0)
    test 373 auxRectifying(90): 90.0
    test 374 name: auxRectifying
    test 375 inverse: lat (90.0)

    testAuxiliaryLats Sphere(pygeodesy.ellipsoids, 24.06.24)
    test 376 isEllipsoidal: False
    test 377 isOblate: False
    test 378 isProlate: False
    test 379 isSpherical: True
    test 380 auxAuthalic(-90): -90.0
    test 381 name: auxAuthalic
    test 382 inverse: lat (-90.0)
    test 383 auxConformal(-90): -90.0
    test 384 name: auxConformal
    test 385 inverse: lat (-90.0)
    test 386 auxGeocentric(-90): -90.0
    test 387 name: auxGeocentric
    test 388 inverse: lat (-90.0)
    test 389 auxIsometric(-90): -90.0
    test 390 name: auxIsometric
    test 391 inverse: lat (-90.0)
    test 392 auxParametric(-90): -90.0
    test 393 name: auxParametric
    test 394 inverse: lat (-90.0)
    test 395 auxRectifying(-90): -90.0
    test 396 name: auxRectifying
    test 397 inverse: lat (-90.0)
    test 398 auxAuthalic(-60): -60.0
    test 399 name: auxAuthalic
    test 400 inverse: lat (-60.0)
    test 401 auxConformal(-60): -60.0
    test 402 name: auxConformal
    test 403 inverse: lat (-60.0)
    test 404 auxGeocentric(-60): -60.0
    test 405 name: auxGeocentric
    test 406 inverse: lat (-60.0)
    test 407 auxIsometric(-60): -60.0
    test 408 name: auxIsometric
    test 409 inverse: lat (-60.0)
    test 410 auxParametric(-60): -60.0
    test 411 name: auxParametric
    test 412 inverse: lat (-60.0)
    test 413 auxRectifying(-60): -60.0
    test 414 name: auxRectifying
    test 415 inverse: lat (-60.0)
    test 416 auxAuthalic(-30): -30.0
    test 417 name: auxAuthalic
    test 418 inverse: lat (-30.0)
    test 419 auxConformal(-30): -30.0
    test 420 name: auxConformal
    test 421 inverse: lat (-30.0)
    test 422 auxGeocentric(-30): -30.0
    test 423 name: auxGeocentric
    test 424 inverse: lat (-30.0)
    test 425 auxIsometric(-30): -30.0
    test 426 name: auxIsometric
    test 427 inverse: lat (-30.0)
    test 428 auxParametric(-30): -30.0
    test 429 name: auxParametric
    test 430 inverse: lat (-30.0)
    test 431 auxRectifying(-30): -30.0
    test 432 name: auxRectifying
    test 433 inverse: lat (-30.0)
    test 434 auxAuthalic(0): 0.0
    test 435 name: auxAuthalic
    test 436 inverse: lat (0.0)
    test 437 auxConformal(0): 0.0
    test 438 name: auxConformal
    test 439 inverse: lat (0.0)
    test 440 auxGeocentric(0): 0.0
    test 441 name: auxGeocentric
    test 442 inverse: lat (0.0)
    test 443 auxIsometric(0): 0.0
    test 444 name: auxIsometric
    test 445 inverse: lat (0.0)
    test 446 auxParametric(0): 0.0
    test 447 name: auxParametric
    test 448 inverse: lat (0.0)
    test 449 auxRectifying(0): 0.0
    test 450 name: auxRectifying
    test 451 inverse: lat (0.0)
    test 452 auxAuthalic(30): 30.0
    test 453 name: auxAuthalic
    test 454 inverse: lat (30.0)
    test 455 auxConformal(30): 30.0
    test 456 name: auxConformal
    test 457 inverse: lat (30.0)
    test 458 auxGeocentric(30): 30.0
    test 459 name: auxGeocentric
    test 460 inverse: lat (30.0)
    test 461 auxIsometric(30): 30.0
    test 462 name: auxIsometric
    test 463 inverse: lat (30.0)
    test 464 auxParametric(30): 30.0
    test 465 name: auxParametric
    test 466 inverse: lat (30.0)
    test 467 auxRectifying(30): 30.0
    test 468 name: auxRectifying
    test 469 inverse: lat (30.0)
    test 470 auxAuthalic(60): 60.0
    test 471 name: auxAuthalic
    test 472 inverse: lat (60.0)
    test 473 auxConformal(60): 60.0
    test 474 name: auxConformal
    test 475 inverse: lat (60.0)
    test 476 auxGeocentric(60): 60.0
    test 477 name: auxGeocentric
    test 478 inverse: lat (60.0)
    test 479 auxIsometric(60): 60.0
    test 480 name: auxIsometric
    test 481 inverse: lat (60.0)
    test 482 auxParametric(60): 60.0
    test 483 name: auxParametric
    test 484 inverse: lat (60.0)
    test 485 auxRectifying(60): 60.0
    test 486 name: auxRectifying
    test 487 inverse: lat (60.0)
    test 488 auxAuthalic(90): 90.0
    test 489 name: auxAuthalic
    test 490 inverse: lat (90.0)
    test 491 auxConformal(90): 90.0
    test 492 name: auxConformal
    test 493 inverse: lat (90.0)
    test 494 auxGeocentric(90): 90.0
    test 495 name: auxGeocentric
    test 496 inverse: lat (90.0)
    test 497 auxIsometric(90): 90.0
    test 498 name: auxIsometric
    test 499 inverse: lat (90.0)
    test 500 auxParametric(90): 90.0
    test 501 name: auxParametric
    test 502 inverse: lat (90.0)
    test 503 auxRectifying(90): 90.0
    test 504 name: auxRectifying
    test 505 inverse: lat (90.0)

    testFlattenings(pygeodesy.ellipsoids, 24.06.24)
    test 506 all: all
    test 507 _TOL: 1.4901161193847657e-09

    test 508 Airy1830.f_ - 1 / .f: 0.0
    test 509 Airy1830.f - 1 / .f_: 0.0

    test 510 AiryModified.f_ - 1 / .f: 0.0
    test 511 AiryModified.f - 1 / .f_: 0.0

    test 512 ATS1977.f_ - 1 / .f: 0.0
    test 513 ATS1977.f - 1 / .f_: 0.0

    test 514 Australia1966.f_ - 1 / .f: 0.0
    test 515 Australia1966.f - 1 / .f_: 0.0

    test 516 Bessel1841.f_ - 1 / .f: -3.6334313335828483e-10
    test 517 Bessel1841.f - 1 / .f_: -4.060120295523717e-15

    test 518 BesselModified.f_ - 1 / .f: 0.0
    test 519 BesselModified.f - 1 / .f_: 0.0

    test 520 CGCS2000.f_ - 1 / .f: 0.0
    test 521 CGCS2000.f - 1 / .f_: 0.0

    test 522 Clarke1866.f_ - 1 / .f: 1.0180656317970715e-10
    test 523 Clarke1866.f - 1 / .f_: 1.1700709845463564e-15

    test 524 Clarke1880.f_ - 1 / .f: -6.275513442233205e-11
    test 525 Clarke1880.f - 1 / .f_: -7.28583859910259e-16

    test 526 Clarke1880IGN.f_ - 1 / .f: 3.73063357983483e-10
    test 527 Clarke1880IGN.f - 1 / .f_: 4.3320382003830815e-15

    test 528 Clarke1880Mod.f_ - 1 / .f: 6.866684998385608e-11
    test 529 Clarke1880Mod.f - 1 / .f_: 7.971054372113429e-16

    test 530 CPM1799.f_ - 1 / .f: -4.774847184307873e-11
    test 531 CPM1799.f - 1 / .f_: -4.2674197509029455e-16

    test 532 Delambre1810.f_ - 1 / .f: 6.008349373587407e-11
    test 533 Delambre1810.f - 1 / .f_: 6.192962809237201e-16

    test 534 Engelis1985.f_ - 1 / .f: 3.171862772433087e-11
    test 535 Engelis1985.f - 1 / .f_: 3.5691935518222806e-16

    test 536 Everest1969.f_ - 1 / .f: -1.0334133548894897e-10
    test 537 Everest1969.f - 1 / .f_: -1.1418817280617333e-15

    test 538 Everest1975.f_ - 1 / .f: 2.1088908397359774e-11
    test 539 Everest1975.f - 1 / .f_: 2.3288662664988635e-16

    test 540 Fisher1968.f_ - 1 / .f: 6.394884621840902e-11
    test 541 Fisher1968.f - 1 / .f_: 7.186091999233923e-16

    test 542 GEM10C.f_ - 1 / .f: 3.501554601825774e-11
    test 543 GEM10C.f - 1 / .f_: 3.937822290467352e-16

    test 544 GRS67.f_ - 1 / .f: 0.0
    test 545 GRS67.f - 1 / .f_: 0.0

    test 546 GRS80.f_ - 1 / .f: 5.7980287238024175e-12
    test 547 GRS80.f - 1 / .f_: 6.505213034913027e-17

    test 548 Helmert1906.f_ - 1 / .f: 1.944044925039634e-11
    test 549 Helmert1906.f - 1 / .f_: 2.185751579730777e-16

    test 550 IAU76.f_ - 1 / .f: 0.0
    test 551 IAU76.f - 1 / .f_: 0.0

    test 552 IERS1989.f_ - 1 / .f: 0.0
    test 553 IERS1989.f - 1 / .f_: 0.0

    test 554 IERS1992TOPEX.f_ - 1 / .f: -4.746425474877469e-11
    test 555 IERS1992TOPEX.f - 1 / .f_: -5.334274688628682e-16

    test 556 IERS2003.f_ - 1 / .f: -3.6777692002942786e-11
    test 557 IERS2003.f - 1 / .f_: -4.137315490204685e-16

    test 558 Intl1924.f_ - 1 / .f: 0.0
    test 559 Intl1924.f - 1 / .f_: 0.0

    test 560 Intl1967.f_ - 1 / .f: -1.3528733688872308e-11
    test 561 Intl1967.f - 1 / .f_: -1.5222198501696482e-16

    test 562 Krassovski1940.f_ - 1 / .f: -3.8767211663071066e-11
    test 563 Krassovski1940.f - 1 / .f_: -4.358492733391728e-16

    test 564 Krassowsky1940.f_ - 1 / .f: -3.8767211663071066e-11
    test 565 Krassowsky1940.f - 1 / .f_: -4.358492733391728e-16

    test 566 Maupertuis1738.f_ - 1 / .f: 1.5347723092418164e-11
    test 567 Maupertuis1738.f - 1 / .f_: 4.206704429243757e-16

    test 568 Mercury1960.f_ - 1 / .f: -4.803268893738277e-11
    test 569 Mercury1960.f - 1 / .f_: -5.39499001028787e-16

    test 570 Mercury1968Mod.f_ - 1 / .f: 6.394884621840902e-11
    test 571 Mercury1968Mod.f - 1 / .f_: 7.186091999233923e-16

    test 572 NWL1965.f_ - 1 / .f: 5.32054400537163e-11
    test 573 NWL1965.f - 1 / .f_: 5.980459183430042e-16

    test 574 OSU86F.f_ - 1 / .f: 1.460875864722766e-11
    test 575 OSU86F.f - 1 / .f_: 1.6436504934880247e-16

    test 576 OSU91A.f_ - 1 / .f: -2.2737367544323206e-12
    test 577 OSU91A.f - 1 / .f_: -2.5587171270657905e-17

    test 578 Plessis1817.f_ - 1 / .f: 4.2234660213580355e-11
    test 579 Plessis1817.f - 1 / .f_: 4.432218481120742e-16

    test 580 Prolate.f_ - 1 / .f: 0.0
    test 581 Prolate.f - 1 / .f_: 0.0

    test 582 PZ90.f_ - 1 / .f: 0.0
    test 583 PZ90.f - 1 / .f_: 0.0

    test 584 SGS85.f_ - 1 / .f: 1.659827830735594e-11
    test 585 SGS85.f - 1 / .f_: 1.8691645453650096e-16

    test 586 SoAmerican1969.f_ - 1 / .f: -5.6843418860808015e-11
    test 587 SoAmerican1969.f - 1 / .f_: -6.388119200284592e-16

    test 588 Struve1860.f_ - 1 / .f: 1.9042545318370685e-11
    test 589 Struve1860.f - 1 / .f_: 2.194425197110661e-16

    test 590 WGS60.f_ - 1 / .f: -5.076117304270156e-11
    test 591 WGS60.f - 1 / .f_: -5.702903427273753e-16

    test 592 WGS66.f_ - 1 / .f: 5.32054400537163e-11
    test 593 WGS66.f - 1 / .f_: 5.980459183430042e-16

    test 594 WGS72.f_ - 1 / .f: 0.0
    test 595 WGS72.f - 1 / .f_: 0.0

    test 596 WGS84.f_ - 1 / .f: 0.0
    test 597 WGS84.f - 1 / .f_: 0.0

    test 598 WGS84_NGS.f_ - 1 / .f: 0.0
    test 599 WGS84_NGS.f - 1 / .f_: 0.0

    testEllipsoid2(pygeodesy.ellipsoids, 24.06.24)
    test 600 _2_Airy1830: a=6377563.396, f=0.0033409, f_=299.3249646, b=6356256.9092373
    test 601 _2_AiryModified: a=6377340.189, f=0.0033409, f_=299.3249646, b=6356034.4479385
    test 602 _2_ATS1977: a=6378135, f=0.0033528, f_=298.257, b=6356750.3049216
    test 603 _2_Australia1966: a=6378160, f=0.0033529, f_=298.25, b=6356774.7191953
    test 604 _2_Bessel1841: a=6377397.155, f=0.0033428, f_=299.1528128, b=6356078.962818
    test 605 _2_BesselModified: a=6377492.018, f=0.0033428, f_=299.1528128, b=6356173.5087127
    test 606 _2_CGCS2000: a=6378137, f=0.0033528, f_=298.2572221, b=6356752.3141404
    test 607 _2_Clarke1866: a=6378206.4, f=0.0033901, f_=294.9786982, b=6356583.8
    test 608 _2_Clarke1880: a=6378249.145, f=0.0034076, f_=293.465, b=6356514.8695498
    test 609 _2_Clarke1880IGN: a=6378249.2, f=0.0034075, f_=293.4660213, b=6356515
    test 610 _2_Clarke1880Mod: a=6378249.145, f=0.0034075, f_=293.4663077, b=6356514.9663955
    test 611 _2_CPM1799: a=6375738.7, f=0.0029905, f_=334.39, b=6356671.9255749
    test 612 _2_Delambre1810: a=6376428, f=0.0032103, f_=311.5, b=6355957.9261637
    test 613 _2_Engelis1985: a=6378136.05, f=0.0033528, f_=298.2566, b=6356751.3227215
    test 614 _2_Everest1969: a=6377295.664, f=0.0033244, f_=300.8017, b=6356094.667915
    test 615 _2_Everest1975: a=6377299.151, f=0.0033244, f_=300.8017255, b=6356098.1451201
    test 616 _2_Fisher1968: a=6378150, f=0.0033523, f_=298.3, b=6356768.3372444
    test 617 _2_GEM10C: a=6378137, f=0.0033528, f_=298.2572236, b=6356752.3142478
    test 618 _2_GPES: a=6378135, f=0, f_=0, b=6378135
    test 619 _2_GRS67: a=6378160, f=0.0033529, f_=298.2471674, b=6356774.5160907
    test 620 _2_GRS80: a=6378137, f=0.0033528, f_=298.2572221, b=6356752.3141403
    test 621 _2_Helmert1906: a=6378200, f=0.0033523, f_=298.3, b=6356818.1696279
    test 622 _2_IAU76: a=6378140, f=0.0033528, f_=298.257, b=6356755.2881575
    test 623 _2_IERS1989: a=6378136, f=0.0033528, f_=298.257, b=6356751.3015688
    test 624 _2_IERS1992TOPEX: a=6378136.3, f=0.0033528, f_=298.2572236, b=6356751.6165922
    test 625 _2_IERS2003: a=6378136.6, f=0.0033528, f_=298.25642, b=6356751.8579716
    test 626 _2_Intl1924: a=6378388, f=0.003367, f_=297, b=6356911.9461279
    test 627 _2_Intl1967: a=6378157.5, f=0.0033529, f_=298.2496154, b=6356772.2
    test 628 _2_Krassovski1940: a=6378245, f=0.0033523, f_=298.3, b=6356863.0187731
    test 629 _2_Krassowsky1940: a=6378245, f=0.0033523, f_=298.3, b=6356863.0187731
    test 630 _2_Maupertuis1738: a=6397300, f=0.0052356, f_=191, b=6363806.2827225
    test 631 _2_Mercury1960: a=6378166, f=0.0033523, f_=298.3, b=6356784.2836071
    test 632 _2_Mercury1968Mod: a=6378150, f=0.0033523, f_=298.3, b=6356768.3372444
    test 633 _2_NWL1965: a=6378145, f=0.0033529, f_=298.25, b=6356759.7694887
    test 634 _2_OSU86F: a=6378136.2, f=0.0033528, f_=298.2572236, b=6356751.5169301
    test 635 _2_OSU91A: a=6378136.3, f=0.0033528, f_=298.2572236, b=6356751.6165948
    test 636 _2_Plessis1817: a=6376523, f=0.00324, f_=308.64, b=6355862.9332556
    test 637 _2_Prolate: a=6356752.3142452, f=-0.0033641, f_=-297.2572236, b=6378137
    test 638 _2_PZ90: a=6378136, f=0.0033528, f_=298.2578393, b=6356751.3617457
    test 639 _2_SGS85: a=6378136, f=0.0033528, f_=298.257, b=6356751.3015688
    test 640 _2_SoAmerican1969: a=6378160, f=0.0033529, f_=298.25, b=6356774.7191953
    test 641 _2_Sphere: a=6371008.771415, f=0, f_=0, b=6371008.771415
    test 642 _2_SphereAuthalic: a=6371000, f=0, f_=0, b=6371000
    test 643 _2_SpherePopular: a=6378137, f=0, f_=0, b=6378137
    test 644 _2_Struve1860: a=6378298.3, f=0.0033929, f_=294.73, b=6356657.1426696
    test 645 _2_WGS60: a=6378165, f=0.0033523, f_=298.3, b=6356783.2869594
    test 646 _2_WGS66: a=6378145, f=0.0033529, f_=298.25, b=6356759.7694887
    test 647 _2_WGS72: a=6378135, f=0.0033528, f_=298.26, b=6356750.5200161
    test 648 _2_WGS84: a=6378137, f=0.0033528, f_=298.2572236, b=6356752.3142452
    test 649 _2_WGS84_NGS: a=6378137, f=0.0033528, f_=298.2572221, b=6356752.3141403

    testa_f2Tuple(pygeodesy.ellipsoids, 24.06.24)
    test 650 a_b_Airy1830: a=6377563.396, f=0.0033409, f_=299.3249646, b=6356256.9092373
    test 651 a_b_AiryModified: a=6377340.189, f=0.0033409, f_=299.3249646, b=6356034.4479385
    test 652 a_b_ATS1977: a=6378135, f=0.0033528, f_=298.257, b=6356750.3049216
    test 653 a_b_Australia1966: a=6378160, f=0.0033529, f_=298.25, b=6356774.7191953
    test 654 a_b_Bessel1841: a=6377397.155, f=0.0033428, f_=299.1528128, b=6356078.962818
    test 655 a_b_BesselModified: a=6377492.018, f=0.0033428, f_=299.1528128, b=6356173.5087127
    test 656 a_b_CGCS2000: a=6378137, f=0.0033528, f_=298.2572221, b=6356752.3141404
    test 657 a_b_Clarke1866: a=6378206.4, f=0.0033901, f_=294.9786982, b=6356583.8
    test 658 a_b_Clarke1880: a=6378249.145, f=0.0034076, f_=293.465, b=6356514.8695498
    test 659 a_b_Clarke1880IGN: a=6378249.2, f=0.0034075, f_=293.4660213, b=6356515
    test 660 a_b_Clarke1880Mod: a=6378249.145, f=0.0034075, f_=293.4663077, b=6356514.9663955
    test 661 a_b_CPM1799: a=6375738.7, f=0.0029905, f_=334.39, b=6356671.9255749
    test 662 a_b_Delambre1810: a=6376428, f=0.0032103, f_=311.5, b=6355957.9261637
    test 663 a_b_Engelis1985: a=6378136.05, f=0.0033528, f_=298.2566, b=6356751.3227215
    test 664 a_b_Everest1969: a=6377295.664, f=0.0033244, f_=300.8017, b=6356094.667915
    test 665 a_b_Everest1975: a=6377299.151, f=0.0033244, f_=300.8017255, b=6356098.1451201
    test 666 a_b_Fisher1968: a=6378150, f=0.0033523, f_=298.3, b=6356768.3372444
    test 667 a_b_GEM10C: a=6378137, f=0.0033528, f_=298.2572236, b=6356752.3142478
    test 668 a_b_GPES: a=6378135, f=0, f_=0, b=6378135
    test 669 a_b_GRS67: a=6378160, f=0.0033529, f_=298.2471674, b=6356774.5160907
    test 670 a_b_GRS80: a=6378137, f=0.0033528, f_=298.2572221, b=6356752.3141403
    test 671 a_b_Helmert1906: a=6378200, f=0.0033523, f_=298.3, b=6356818.1696279
    test 672 a_b_IAU76: a=6378140, f=0.0033528, f_=298.257, b=6356755.2881575
    test 673 a_b_IERS1989: a=6378136, f=0.0033528, f_=298.257, b=6356751.3015688
    test 674 a_b_IERS1992TOPEX: a=6378136.3, f=0.0033528, f_=298.2572236, b=6356751.6165922
    test 675 a_b_IERS2003: a=6378136.6, f=0.0033528, f_=298.25642, b=6356751.8579716
    test 676 a_b_Intl1924: a=6378388, f=0.003367, f_=297, b=6356911.9461279
    test 677 a_b_Intl1967: a=6378157.5, f=0.0033529, f_=298.2496154, b=6356772.2
    test 678 a_b_Krassovski1940: a=6378245, f=0.0033523, f_=298.3, b=6356863.0187731
    test 679 a_b_Krassowsky1940: a=6378245, f=0.0033523, f_=298.3, b=6356863.0187731
    test 680 a_b_Maupertuis1738: a=6397300, f=0.0052356, f_=191, b=6363806.2827225
    test 681 a_b_Mercury1960: a=6378166, f=0.0033523, f_=298.3, b=6356784.2836071
    test 682 a_b_Mercury1968Mod: a=6378150, f=0.0033523, f_=298.3, b=6356768.3372444
    test 683 a_b_NWL1965: a=6378145, f=0.0033529, f_=298.25, b=6356759.7694887
    test 684 a_b_OSU86F: a=6378136.2, f=0.0033528, f_=298.2572236, b=6356751.5169301
    test 685 a_b_OSU91A: a=6378136.3, f=0.0033528, f_=298.2572236, b=6356751.6165948
    test 686 a_b_Plessis1817: a=6376523, f=0.00324, f_=308.64, b=6355862.9332556
    test 687 a_b_Prolate: a=6356752.3142452, f=-0.0033641, f_=-297.2572236, b=6378137
    test 688 a_b_PZ90: a=6378136, f=0.0033528, f_=298.2578393, b=6356751.3617457
    test 689 a_b_SGS85: a=6378136, f=0.0033528, f_=298.257, b=6356751.3015688
    test 690 a_b_SoAmerican1969: a=6378160, f=0.0033529, f_=298.25, b=6356774.7191953
    test 691 a_b_Sphere: a=6371008.771415, f=0, f_=0, b=6371008.771415
    test 692 a_b_SphereAuthalic: a=6371000, f=0, f_=0, b=6371000
    test 693 a_b_SpherePopular: a=6378137, f=0, f_=0, b=6378137
    test 694 a_b_Struve1860: a=6378298.3, f=0.0033929, f_=294.73, b=6356657.1426696
    test 695 a_b_WGS60: a=6378165, f=0.0033523, f_=298.3, b=6356783.2869594
    test 696 a_b_WGS66: a=6378145, f=0.0033529, f_=298.25, b=6356759.7694887
    test 697 a_b_WGS72: a=6378135, f=0.0033528, f_=298.26, b=6356750.5200161
    test 698 a_b_WGS84: a=6378137, f=0.0033528, f_=298.2572236, b=6356752.3142452
    test 699 a_b_WGS84_NGS: a=6378137, f=0.0033528, f_=298.2572221, b=6356752.3141403
    test 700 _a_f_ellipsoid: a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518
    test 701 _toEllipsoid2: a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518

    testFunctions(pygeodesy.ellipsoids, 24.06.24)

    test 702 a_b2f_(Airy1830): 299.32496460
    test 703 a_b2f2(Airy1830): 0.00335205
    test 704 a_b2n(Airy1830): 0.00167322
    test 705 b_f2a(Airy1830): 6377563.396
    test 706 b_f_2a(Airy1830): 6377563.396
    test 707 f_2f(Airy1830): 0.00334085
    test 708 e2f(Airy1830): 0.00334085
    test 709 n2e2(Airy1830): 0.00667054
    test 710 n2f(Airy1830): 0.00334085

    test 711 a_b2f_(AiryModified): 299.32496460
    test 712 a_b2f2(AiryModified): 0.00335205
    test 713 a_b2n(AiryModified): 0.00167322
    test 714 b_f2a(AiryModified): 6377340.189
    test 715 b_f_2a(AiryModified): 6377340.189
    test 716 f_2f(AiryModified): 0.00334085
    test 717 e2f(AiryModified): 0.00334085
    test 718 n2e2(AiryModified): 0.00667054
    test 719 n2f(AiryModified): 0.00334085

    test 720 a_b2f_(ATS1977): 298.25700000
    test 721 a_b2f2(ATS1977): 0.00336409
    test 722 a_b2n(ATS1977): 0.00167922
    test 723 b_f2a(ATS1977): 6378135.000
    test 724 b_f_2a(ATS1977): 6378135.000
    test 725 f_2f(ATS1977): 0.00335281
    test 726 e2f(ATS1977): 0.00335281
    test 727 n2e2(ATS1977): 0.00669438
    test 728 n2f(ATS1977): 0.00335281

    test 729 a_b2f_(Australia1966): 298.25000000
    test 730 a_b2f2(Australia1966): 0.00336417
    test 731 a_b2n(Australia1966): 0.00167926
    test 732 b_f2a(Australia1966): 6378160.000
    test 733 b_f_2a(Australia1966): 6378160.000
    test 734 f_2f(Australia1966): 0.00335289
    test 735 e2f(Australia1966): 0.00335289
    test 736 n2e2(Australia1966): 0.00669454
    test 737 n2f(Australia1966): 0.00335289

    test 738 a_b2f_(Bessel1841): 299.15281280
    test 739 a_b2f2(Bessel1841): 0.00335398
    test 740 a_b2n(Bessel1841): 0.00167418
    test 741 b_f2a(Bessel1841): 6377397.155
    test 742 b_f_2a(Bessel1841): 6377397.155
    test 743 f_2f(Bessel1841): 0.00334277
    test 744 e2f(Bessel1841): 0.00334277
    test 745 n2e2(Bessel1841): 0.00667437
    test 746 n2f(Bessel1841): 0.00334277

    test 747 a_b2f_(BesselModified): 299.15281280
    test 748 a_b2f2(BesselModified): 0.00335398
    test 749 a_b2n(BesselModified): 0.00167418
    test 750 b_f2a(BesselModified): 6377492.018
    test 751 b_f_2a(BesselModified): 6377492.018
    test 752 f_2f(BesselModified): 0.00334277
    test 753 e2f(BesselModified): 0.00334277
    test 754 n2e2(BesselModified): 0.00667437
    test 755 n2f(BesselModified): 0.00334277

    test 756 a_b2f_(CGCS2000): 298.25722210
    test 757 a_b2f2(CGCS2000): 0.00336409
    test 758 a_b2n(CGCS2000): 0.00167922
    test 759 b_f2a(CGCS2000): 6378137.000
    test 760 b_f_2a(CGCS2000): 6378137.000
    test 761 f_2f(CGCS2000): 0.00335281
    test 762 e2f(CGCS2000): 0.00335281
    test 763 n2e2(CGCS2000): 0.00669438
    test 764 n2f(CGCS2000): 0.00335281

    test 765 a_b2f_(Clarke1866): 294.97869821
    test 766 a_b2f2(Clarke1866): 0.00340161
    test 767 a_b2n(Clarke1866): 0.00169792
    test 768 b_f2a(Clarke1866): 6378206.400
    test 769 b_f_2a(Clarke1866): 6378206.400
    test 770 f_2f(Clarke1866): 0.00339008
    test 771 e2f(Clarke1866): 0.00339008
    test 772 n2e2(Clarke1866): 0.00676866
    test 773 n2f(Clarke1866): 0.00339008

    test 774 a_b2f_(Clarke1880): 293.46500000
    test 775 a_b2f2(Clarke1880): 0.00341921
    test 776 a_b2n(Clarke1880): 0.00170669
    test 777 b_f2a(Clarke1880): 6378249.145
    test 778 b_f_2a(Clarke1880): 6378249.145
    test 779 f_2f(Clarke1880): 0.00340756
    test 780 e2f(Clarke1880): 0.00340756
    test 781 n2e2(Clarke1880): 0.00680351
    test 782 n2f(Clarke1880): 0.00340756

    test 783 a_b2f_(Clarke1880IGN): 293.46602129
    test 784 a_b2f2(Clarke1880IGN): 0.00341920
    test 785 a_b2n(Clarke1880IGN): 0.00170668
    test 786 b_f2a(Clarke1880IGN): 6378249.200
    test 787 b_f_2a(Clarke1880IGN): 6378249.200
    test 788 f_2f(Clarke1880IGN): 0.00340755
    test 789 e2f(Clarke1880IGN): 0.00340755
    test 790 n2e2(Clarke1880IGN): 0.00680349
    test 791 n2f(Clarke1880IGN): 0.00340755

    test 792 a_b2f_(Clarke1880Mod): 293.46630766
    test 793 a_b2f2(Clarke1880Mod): 0.00341920
    test 794 a_b2n(Clarke1880Mod): 0.00170668
    test 795 b_f2a(Clarke1880Mod): 6378249.145
    test 796 b_f_2a(Clarke1880Mod): 6378249.145
    test 797 f_2f(Clarke1880Mod): 0.00340755
    test 798 e2f(Clarke1880Mod): 0.00340755
    test 799 n2e2(Clarke1880Mod): 0.00680348
    test 800 n2f(Clarke1880Mod): 0.00340755

    test 801 a_b2f_(CPM1799): 334.39000000
    test 802 a_b2f2(CPM1799): 0.00299949
    test 803 a_b2n(CPM1799): 0.00149750
    test 804 b_f2a(CPM1799): 6375738.700
    test 805 b_f_2a(CPM1799): 6375738.700
    test 806 f_2f(CPM1799): 0.00299052
    test 807 e2f(CPM1799): 0.00299052
    test 808 n2e2(CPM1799): 0.00597210
    test 809 n2f(CPM1799): 0.00299052

    test 810 a_b2f_(Delambre1810): 311.50000000
    test 811 a_b2f2(Delambre1810): 0.00322061
    test 812 a_b2n(Delambre1810): 0.00160772
    test 813 b_f2a(Delambre1810): 6376428.000
    test 814 b_f_2a(Delambre1810): 6376428.000
    test 815 f_2f(Delambre1810): 0.00321027
    test 816 e2f(Delambre1810): 0.00321027
    test 817 n2e2(Delambre1810): 0.00641024
    test 818 n2f(Delambre1810): 0.00321027

    test 819 a_b2f_(Engelis1985): 298.25660000
    test 820 a_b2f2(Engelis1985): 0.00336410
    test 821 a_b2n(Engelis1985): 0.00167922
    test 822 b_f2a(Engelis1985): 6378136.050
    test 823 b_f_2a(Engelis1985): 6378136.050
    test 824 f_2f(Engelis1985): 0.00335282
    test 825 e2f(Engelis1985): 0.00335282
    test 826 n2e2(Engelis1985): 0.00669439
    test 827 n2f(Engelis1985): 0.00335282

    test 828 a_b2f_(Everest1969): 300.80170000
    test 829 a_b2f2(Everest1969): 0.00333554
    test 830 a_b2n(Everest1969): 0.00166499
    test 831 b_f2a(Everest1969): 6377295.664
    test 832 b_f_2a(Everest1969): 6377295.664
    test 833 f_2f(Everest1969): 0.00332445
    test 834 e2f(Everest1969): 0.00332445
    test 835 n2e2(Everest1969): 0.00663785
    test 836 n2f(Everest1969): 0.00332445

    test 837 a_b2f_(Everest1975): 300.80172550
    test 838 a_b2f2(Everest1975): 0.00333554
    test 839 a_b2n(Everest1975): 0.00166499
    test 840 b_f2a(Everest1975): 6377299.151
    test 841 b_f_2a(Everest1975): 6377299.151
    test 842 f_2f(Everest1975): 0.00332445
    test 843 e2f(Everest1975): 0.00332445
    test 844 n2e2(Everest1975): 0.00663785
    test 845 n2f(Everest1975): 0.00332445

    test 846 a_b2f_(Fisher1968): 298.30000000
    test 847 a_b2f2(Fisher1968): 0.00336361
    test 848 a_b2n(Fisher1968): 0.00167898
    test 849 b_f2a(Fisher1968): 6378150.000
    test 850 b_f_2a(Fisher1968): 6378150.000
    test 851 f_2f(Fisher1968): 0.00335233
    test 852 e2f(Fisher1968): 0.00335233
    test 853 n2e2(Fisher1968): 0.00669342
    test 854 n2f(Fisher1968): 0.00335233

    test 855 a_b2f_(GEM10C): 298.25722360
    test 856 a_b2f2(GEM10C): 0.00336409
    test 857 a_b2n(GEM10C): 0.00167922
    test 858 b_f2a(GEM10C): 6378137.000
    test 859 b_f_2a(GEM10C): 6378137.000
    test 860 f_2f(GEM10C): 0.00335281
    test 861 e2f(GEM10C): 0.00335281
    test 862 n2e2(GEM10C): 0.00669438
    test 863 n2f(GEM10C): 0.00335281

    test 864 a_b2f_(GPES): 0.00000000
    test 865 a_b2f2(GPES): 0.00000000
    test 866 a_b2n(GPES): 0.00000000
    test 867 b_f2a(GPES): 6378135.000
    test 868 b_f_2a(GPES): 6378135.000
    test 869 f_2f(GPES): 0.00000000
    test 870 e2f(GPES): 0.00000000
    test 871 n2e2(GPES): 0.00000000
    test 872 n2f(GPES): 0.00000000

    test 873 a_b2f_(GRS67): 298.24716743
    test 874 a_b2f2(GRS67): 0.00336420
    test 875 a_b2n(GRS67): 0.00167928
    test 876 b_f2a(GRS67): 6378160.000
    test 877 b_f_2a(GRS67): 6378160.000
    test 878 f_2f(GRS67): 0.00335292
    test 879 e2f(GRS67): 0.00335292
    test 880 n2e2(GRS67): 0.00669461
    test 881 n2f(GRS67): 0.00335292

    test 882 a_b2f_(GRS80): 298.25722210
    test 883 a_b2f2(GRS80): 0.00336409
    test 884 a_b2n(GRS80): 0.00167922
    test 885 b_f2a(GRS80): 6378137.000
    test 886 b_f_2a(GRS80): 6378137.000
    test 887 f_2f(GRS80): 0.00335281
    test 888 e2f(GRS80): 0.00335281
    test 889 n2e2(GRS80): 0.00669438
    test 890 n2f(GRS80): 0.00335281

    test 891 a_b2f_(Helmert1906): 298.30000000
    test 892 a_b2f2(Helmert1906): 0.00336361
    test 893 a_b2n(Helmert1906): 0.00167898
    test 894 b_f2a(Helmert1906): 6378200.000
    test 895 b_f_2a(Helmert1906): 6378200.000
    test 896 f_2f(Helmert1906): 0.00335233
    test 897 e2f(Helmert1906): 0.00335233
    test 898 n2e2(Helmert1906): 0.00669342
    test 899 n2f(Helmert1906): 0.00335233

    test 900 a_b2f_(IAU76): 298.25700000
    test 901 a_b2f2(IAU76): 0.00336409
    test 902 a_b2n(IAU76): 0.00167922
    test 903 b_f2a(IAU76): 6378140.000
    test 904 b_f_2a(IAU76): 6378140.000
    test 905 f_2f(IAU76): 0.00335281
    test 906 e2f(IAU76): 0.00335281
    test 907 n2e2(IAU76): 0.00669438
    test 908 n2f(IAU76): 0.00335281

    test 909 a_b2f_(IERS1989): 298.25700000
    test 910 a_b2f2(IERS1989): 0.00336409
    test 911 a_b2n(IERS1989): 0.00167922
    test 912 b_f2a(IERS1989): 6378136.000
    test 913 b_f_2a(IERS1989): 6378136.000
    test 914 f_2f(IERS1989): 0.00335281
    test 915 e2f(IERS1989): 0.00335281
    test 916 n2e2(IERS1989): 0.00669438
    test 917 n2f(IERS1989): 0.00335281

    test 918 a_b2f_(IERS1992TOPEX): 298.25722356
    test 919 a_b2f2(IERS1992TOPEX): 0.00336409
    test 920 a_b2n(IERS1992TOPEX): 0.00167922
    test 921 b_f2a(IERS1992TOPEX): 6378136.300
    test 922 b_f_2a(IERS1992TOPEX): 6378136.300
    test 923 f_2f(IERS1992TOPEX): 0.00335281
    test 924 e2f(IERS1992TOPEX): 0.00335281
    test 925 n2e2(IERS1992TOPEX): 0.00669438
    test 926 n2f(IERS1992TOPEX): 0.00335281

    test 927 a_b2f_(IERS2003): 298.25642000
    test 928 a_b2f2(IERS2003): 0.00336410
    test 929 a_b2n(IERS2003): 0.00167922
    test 930 b_f2a(IERS2003): 6378136.600
    test 931 b_f_2a(IERS2003): 6378136.600
    test 932 f_2f(IERS2003): 0.00335282
    test 933 e2f(IERS2003): 0.00335282
    test 934 n2e2(IERS2003): 0.00669440
    test 935 n2f(IERS2003): 0.00335282

    test 936 a_b2f_(Intl1924): 297.00000000
    test 937 a_b2f2(Intl1924): 0.00337838
    test 938 a_b2n(Intl1924): 0.00168634
    test 939 b_f2a(Intl1924): 6378388.000
    test 940 b_f_2a(Intl1924): 6378388.000
    test 941 f_2f(Intl1924): 0.00336700
    test 942 e2f(Intl1924): 0.00336700
    test 943 n2e2(Intl1924): 0.00672267
    test 944 n2f(Intl1924): 0.00336700

    test 945 a_b2f_(Intl1967): 298.24961539
    test 946 a_b2f2(Intl1967): 0.00336418
    test 947 a_b2n(Intl1967): 0.00167926
    test 948 b_f2a(Intl1967): 6378157.500
    test 949 b_f_2a(Intl1967): 6378157.500
    test 950 f_2f(Intl1967): 0.00335290
    test 951 e2f(Intl1967): 0.00335290
    test 952 n2e2(Intl1967): 0.00669455
    test 953 n2f(Intl1967): 0.00335290

    test 954 a_b2f_(Krassovski1940): 298.30000000
    test 955 a_b2f2(Krassovski1940): 0.00336361
    test 956 a_b2n(Krassovski1940): 0.00167898
    test 957 b_f2a(Krassovski1940): 6378245.000
    test 958 b_f_2a(Krassovski1940): 6378245.000
    test 959 f_2f(Krassovski1940): 0.00335233
    test 960 e2f(Krassovski1940): 0.00335233
    test 961 n2e2(Krassovski1940): 0.00669342
    test 962 n2f(Krassovski1940): 0.00335233

    test 963 a_b2f_(Krassowsky1940): 298.30000000
    test 964 a_b2f2(Krassowsky1940): 0.00336361
    test 965 a_b2n(Krassowsky1940): 0.00167898
    test 966 b_f2a(Krassowsky1940): 6378245.000
    test 967 b_f_2a(Krassowsky1940): 6378245.000
    test 968 f_2f(Krassowsky1940): 0.00335233
    test 969 e2f(Krassowsky1940): 0.00335233
    test 970 n2e2(Krassowsky1940): 0.00669342
    test 971 n2f(Krassowsky1940): 0.00335233

    test 972 a_b2f_(Maupertuis1738): 191.00000000
    test 973 a_b2f2(Maupertuis1738): 0.00526316
    test 974 a_b2n(Maupertuis1738): 0.00262467
    test 975 b_f2a(Maupertuis1738): 6397300.000
    test 976 b_f_2a(Maupertuis1738): 6397300.000
    test 977 f_2f(Maupertuis1738): 0.00523560
    test 978 e2f(Maupertuis1738): 0.00523560
    test 979 n2e2(Maupertuis1738): 0.01044379
    test 980 n2f(Maupertuis1738): 0.00523560

    test 981 a_b2f_(Mercury1960): 298.30000000
    test 982 a_b2f2(Mercury1960): 0.00336361
    test 983 a_b2n(Mercury1960): 0.00167898
    test 984 b_f2a(Mercury1960): 6378166.000
    test 985 b_f_2a(Mercury1960): 6378166.000
    test 986 f_2f(Mercury1960): 0.00335233
    test 987 e2f(Mercury1960): 0.00335233
    test 988 n2e2(Mercury1960): 0.00669342
    test 989 n2f(Mercury1960): 0.00335233

    test 990 a_b2f_(Mercury1968Mod): 298.30000000
    test 991 a_b2f2(Mercury1968Mod): 0.00336361
    test 992 a_b2n(Mercury1968Mod): 0.00167898
    test 993 b_f2a(Mercury1968Mod): 6378150.000
    test 994 b_f_2a(Mercury1968Mod): 6378150.000
    test 995 f_2f(Mercury1968Mod): 0.00335233
    test 996 e2f(Mercury1968Mod): 0.00335233
    test 997 n2e2(Mercury1968Mod): 0.00669342
    test 998 n2f(Mercury1968Mod): 0.00335233

    test 999 a_b2f_(NWL1965): 298.25000000
    test 1000 a_b2f2(NWL1965): 0.00336417
    test 1001 a_b2n(NWL1965): 0.00167926
    test 1002 b_f2a(NWL1965): 6378145.000
    test 1003 b_f_2a(NWL1965): 6378145.000
    test 1004 f_2f(NWL1965): 0.00335289
    test 1005 e2f(NWL1965): 0.00335289
    test 1006 n2e2(NWL1965): 0.00669454
    test 1007 n2f(NWL1965): 0.00335289

    test 1008 a_b2f_(OSU86F): 298.25722360
    test 1009 a_b2f2(OSU86F): 0.00336409
    test 1010 a_b2n(OSU86F): 0.00167922
    test 1011 b_f2a(OSU86F): 6378136.200
    test 1012 b_f_2a(OSU86F): 6378136.200
    test 1013 f_2f(OSU86F): 0.00335281
    test 1014 e2f(OSU86F): 0.00335281
    test 1015 n2e2(OSU86F): 0.00669438
    test 1016 n2f(OSU86F): 0.00335281

    test 1017 a_b2f_(OSU91A): 298.25722360
    test 1018 a_b2f2(OSU91A): 0.00336409
    test 1019 a_b2n(OSU91A): 0.00167922
    test 1020 b_f2a(OSU91A): 6378136.300
    test 1021 b_f_2a(OSU91A): 6378136.300
    test 1022 f_2f(OSU91A): 0.00335281
    test 1023 e2f(OSU91A): 0.00335281
    test 1024 n2e2(OSU91A): 0.00669438
    test 1025 n2f(OSU91A): 0.00335281

    test 1026 a_b2f_(Plessis1817): 308.64000000
    test 1027 a_b2f2(Plessis1817): 0.00325055
    test 1028 a_b2n(Plessis1817): 0.00162264
    test 1029 b_f2a(Plessis1817): 6376523.000
    test 1030 b_f_2a(Plessis1817): 6376523.000
    test 1031 f_2f(Plessis1817): 0.00324002
    test 1032 e2f(Plessis1817): 0.00324002
    test 1033 n2e2(Plessis1817): 0.00646954
    test 1034 n2f(Plessis1817): 0.00324002

    test 1035 a_b2f_(Prolate): -297.25722356
    test 1036 a_b2f2(Prolate): -0.00335281
    test 1037 a_b2n(Prolate): -0.00167922
    test 1038 b_f2a(Prolate): 6356752.314
    test 1039 b_f_2a(Prolate): 6356752.314
    test 1040 f_2f(Prolate): -0.00336409
    test 1041 e2f(Prolate): 0.00337545  FAILED, KNOWN, expected -0.00336409
    test 1042 n2e2(Prolate): -0.00673950
    test 1043 n2f(Prolate): -0.00336409

    test 1044 a_b2f_(PZ90): 298.25783930
    test 1045 a_b2f2(PZ90): 0.00336408
    test 1046 a_b2n(PZ90): 0.00167922
    test 1047 b_f2a(PZ90): 6378136.000
    test 1048 b_f_2a(PZ90): 6378136.000
    test 1049 f_2f(PZ90): 0.00335280
    test 1050 e2f(PZ90): 0.00335280
    test 1051 n2e2(PZ90): 0.00669437
    test 1052 n2f(PZ90): 0.00335280

    test 1053 a_b2f_(SGS85): 298.25700000
    test 1054 a_b2f2(SGS85): 0.00336409
    test 1055 a_b2n(SGS85): 0.00167922
    test 1056 b_f2a(SGS85): 6378136.000
    test 1057 b_f_2a(SGS85): 6378136.000
    test 1058 f_2f(SGS85): 0.00335281
    test 1059 e2f(SGS85): 0.00335281
    test 1060 n2e2(SGS85): 0.00669438
    test 1061 n2f(SGS85): 0.00335281

    test 1062 a_b2f_(SoAmerican1969): 298.25000000
    test 1063 a_b2f2(SoAmerican1969): 0.00336417
    test 1064 a_b2n(SoAmerican1969): 0.00167926
    test 1065 b_f2a(SoAmerican1969): 6378160.000
    test 1066 b_f_2a(SoAmerican1969): 6378160.000
    test 1067 f_2f(SoAmerican1969): 0.00335289
    test 1068 e2f(SoAmerican1969): 0.00335289
    test 1069 n2e2(SoAmerican1969): 0.00669454
    test 1070 n2f(SoAmerican1969): 0.00335289

    test 1071 a_b2f_(Sphere): 0.00000000
    test 1072 a_b2f2(Sphere): 0.00000000
    test 1073 a_b2n(Sphere): 0.00000000
    test 1074 b_f2a(Sphere): 6371008.771
    test 1075 b_f_2a(Sphere): 6371008.771
    test 1076 f_2f(Sphere): 0.00000000
    test 1077 e2f(Sphere): 0.00000000
    test 1078 n2e2(Sphere): 0.00000000
    test 1079 n2f(Sphere): 0.00000000

    test 1080 a_b2f_(SphereAuthalic): 0.00000000
    test 1081 a_b2f2(SphereAuthalic): 0.00000000
    test 1082 a_b2n(SphereAuthalic): 0.00000000
    test 1083 b_f2a(SphereAuthalic): 6371000.000
    test 1084 b_f_2a(SphereAuthalic): 6371000.000
    test 1085 f_2f(SphereAuthalic): 0.00000000
    test 1086 e2f(SphereAuthalic): 0.00000000
    test 1087 n2e2(SphereAuthalic): 0.00000000
    test 1088 n2f(SphereAuthalic): 0.00000000

    test 1089 a_b2f_(SpherePopular): 0.00000000
    test 1090 a_b2f2(SpherePopular): 0.00000000
    test 1091 a_b2n(SpherePopular): 0.00000000
    test 1092 b_f2a(SpherePopular): 6378137.000
    test 1093 b_f_2a(SpherePopular): 6378137.000
    test 1094 f_2f(SpherePopular): 0.00000000
    test 1095 e2f(SpherePopular): 0.00000000
    test 1096 n2e2(SpherePopular): 0.00000000
    test 1097 n2f(SpherePopular): 0.00000000

    test 1098 a_b2f_(Struve1860): 294.73000000
    test 1099 a_b2f2(Struve1860): 0.00340449
    test 1100 a_b2n(Struve1860): 0.00169935
    test 1101 b_f2a(Struve1860): 6378298.300
    test 1102 b_f_2a(Struve1860): 6378298.300
    test 1103 f_2f(Struve1860): 0.00339294
    test 1104 e2f(Struve1860): 0.00339294
    test 1105 n2e2(Struve1860): 0.00677436
    test 1106 n2f(Struve1860): 0.00339294

    test 1107 a_b2f_(WGS60): 298.30000000
    test 1108 a_b2f2(WGS60): 0.00336361
    test 1109 a_b2n(WGS60): 0.00167898
    test 1110 b_f2a(WGS60): 6378165.000
    test 1111 b_f_2a(WGS60): 6378165.000
    test 1112 f_2f(WGS60): 0.00335233
    test 1113 e2f(WGS60): 0.00335233
    test 1114 n2e2(WGS60): 0.00669342
    test 1115 n2f(WGS60): 0.00335233

    test 1116 a_b2f_(WGS66): 298.25000000
    test 1117 a_b2f2(WGS66): 0.00336417
    test 1118 a_b2n(WGS66): 0.00167926
    test 1119 b_f2a(WGS66): 6378145.000
    test 1120 b_f_2a(WGS66): 6378145.000
    test 1121 f_2f(WGS66): 0.00335289
    test 1122 e2f(WGS66): 0.00335289
    test 1123 n2e2(WGS66): 0.00669454
    test 1124 n2f(WGS66): 0.00335289

    test 1125 a_b2f_(WGS72): 298.26000000
    test 1126 a_b2f2(WGS72): 0.00336406
    test 1127 a_b2n(WGS72): 0.00167920
    test 1128 b_f2a(WGS72): 6378135.000
    test 1129 b_f_2a(WGS72): 6378135.000
    test 1130 f_2f(WGS72): 0.00335278
    test 1131 e2f(WGS72): 0.00335278
    test 1132 n2e2(WGS72): 0.00669432
    test 1133 n2f(WGS72): 0.00335278

    test 1134 a_b2f_(WGS84): 298.25722356
    test 1135 a_b2f2(WGS84): 0.00336409
    test 1136 a_b2n(WGS84): 0.00167922
    test 1137 b_f2a(WGS84): 6378137.000
    test 1138 b_f_2a(WGS84): 6378137.000
    test 1139 f_2f(WGS84): 0.00335281
    test 1140 e2f(WGS84): 0.00335281
    test 1141 n2e2(WGS84): 0.00669438
    test 1142 n2f(WGS84): 0.00335281

    test 1143 a_b2f_(WGS84_NGS): 298.25722210
    test 1144 a_b2f2(WGS84_NGS): 0.00336409
    test 1145 a_b2n(WGS84_NGS): 0.00167922
    test 1146 b_f2a(WGS84_NGS): 6378137.000
    test 1147 b_f_2a(WGS84_NGS): 6378137.000
    test 1148 f_2f(WGS84_NGS): 0.00335281
    test 1149 e2f(WGS84_NGS): 0.00335281
    test 1150 n2e2(WGS84_NGS): 0.00669438
    test 1151 n2f(WGS84_NGS): 0.00335281

    test 1152 total: 50

    testWGS84(pygeodesy.ellipsoids, 24.06.24)
    test 1153 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1154 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1155 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1156 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1157 roc1_ 10: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1158 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1159 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1160 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1161 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1162 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1163 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1164 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1165 roc1_ 30: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1166 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1167 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1168 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1169 roc1_ 40: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1170 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1171 roc1_ 45: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1172 roc1_ 45: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1173 roc1_ 50: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1174 roc1_ 50: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1175 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1176 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1177 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1178 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1179 roc1_ 65: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1180 roc1_ 65: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1181 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1182 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1183 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1184 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1185 roc1_ 80: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1186 roc1_ 80: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1187 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1188 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1189 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1190 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09

    testProlate(pygeodesy.ellipsoids, 24.06.24)
    test 1191 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1192 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1193 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1194 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1195 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1196 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1197 roc1_ 15: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1198 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1199 roc1_ 20: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1200 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1201 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1202 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1203 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1204 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1205 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1206 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1207 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1208 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1209 roc1_ 45: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 1210 roc1_ 45: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 1211 roc1_ 50: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1212 roc1_ 50: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1213 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1214 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1215 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1216 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1217 roc1_ 65: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1218 roc1_ 65: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1219 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1220 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1221 roc1_ 75: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1222 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1223 roc1_ 80: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1224 roc1_ 80: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 1225 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1226 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1227 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1228 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09

    testSphereAuthalic(pygeodesy.ellipsoids, 24.06.24)
    test 1229 roc1_ 0: 0.0
    test 1230 roc1_ 0: 0.0
    test 1231 roc1_ 5: 0.0
    test 1232 roc1_ 5: 0.0
    test 1233 roc1_ 10: 0.0
    test 1234 roc1_ 10: 0.0
    test 1235 roc1_ 15: 0.0
    test 1236 roc1_ 15: 0.0
    test 1237 roc1_ 20: 0.0
    test 1238 roc1_ 20: 0.0
    test 1239 roc1_ 25: 0.0
    test 1240 roc1_ 25: 0.0
    test 1241 roc1_ 30: 0.0
    test 1242 roc1_ 30: 0.0
    test 1243 roc1_ 35: 0.0
    test 1244 roc1_ 35: 0.0
    test 1245 roc1_ 40: 0.0
    test 1246 roc1_ 40: 0.0
    test 1247 roc1_ 45: 0.0
    test 1248 roc1_ 45: 0.0
    test 1249 roc1_ 50: 0.0
    test 1250 roc1_ 50: 0.0
    test 1251 roc1_ 55: 0.0
    test 1252 roc1_ 55: 0.0
    test 1253 roc1_ 60: 0.0
    test 1254 roc1_ 60: 0.0
    test 1255 roc1_ 65: 0.0
    test 1256 roc1_ 65: 0.0
    test 1257 roc1_ 70: 0.0
    test 1258 roc1_ 70: 0.0
    test 1259 roc1_ 75: 0.0
    test 1260 roc1_ 75: 0.0
    test 1261 roc1_ 80: 0.0
    test 1262 roc1_ 80: 0.0
    test 1263 roc1_ 85: 0.0
    test 1264 roc1_ 85: 0.0
    test 1265 roc1_ 90: 0.0
    test 1266 roc1_ 90: 0.0

    testcircle4(pygeodesy.ellipsoids, 24.06.24)

    testWGS84(pygeodesy.ellipsoids, 24.06.24)
    test 1267 circle4 0: 6378137.000000
    test 1268 circle4 0: 6378137.000000
    test 1269 circle4 10: 6377497.402124
    test 1270 circle4 10: 6377497.402124
    test 1271 circle4 20: 6375653.951276
    test 1272 circle4 20: 6375653.951276
    test 1273 circle4 30: 6372824.420294
    test 1274 circle4 30: 6372824.420294
    test 1275 circle4 40: 6369344.863240
    test 1276 circle4 40: 6369344.863240
    test 1277 circle4 50: 6365631.517537
    test 1278 circle4 50: 6365631.517537
    test 1279 circle4 60: 6362132.224397
    test 1280 circle4 60: 6362132.224397
    test 1281 circle4 70: 6359272.455642
    test 1282 circle4 70: 6359272.455642
    test 1283 circle4 80: 6357402.413808
    test 1284 circle4 80: 6357402.413808
    test 1285 circle4 90: 6356752.314245
    test 1286 circle4 90: 6356752.314245

    testSphere(pygeodesy.ellipsoids, 24.06.24)
    test 1287 circle4 0: 6371008.771415
    test 1288 circle4 0: 6371008.771415
    test 1289 circle4 10: 6371008.771415
    test 1290 circle4 10: 6371008.771415
    test 1291 circle4 20: 6371008.771415
    test 1292 circle4 20: 6371008.771415
    test 1293 circle4 30: 6371008.771415
    test 1294 circle4 30: 6371008.771415
    test 1295 circle4 40: 6371008.771415
    test 1296 circle4 40: 6371008.771415
    test 1297 circle4 50: 6371008.771415
    test 1298 circle4 50: 6371008.771415
    test 1299 circle4 60: 6371008.771415
    test 1300 circle4 60: 6371008.771415
    test 1301 circle4 70: 6371008.771415
    test 1302 circle4 70: 6371008.771415
    test 1303 circle4 80: 6371008.771415
    test 1304 circle4 80: 6371008.771415
    test 1305 circle4 90: 6371008.771415
    test 1306 circle4 90: 6371008.771415
# lazily imported pygeodesy.triaxials by ellipsoids.py line 1108
# lazily imported pygeodesy.latlonBase by basics.py line 411

    test 1307 hartzell4: (3642031.283571, 3678090.99925, 3714150.714929, 11296639.666827)

    77 of 1307 testEllipsoids.py tests (5.9%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 31.548 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testElliptic.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.elliptic by testElliptic.py line 11
# lazily imported pygeodesy.Elliptic from .elliptic by testElliptic.py line 11
# lazily imported pygeodesy.EllipticError from .elliptic by testElliptic.py line 11
# lazily imported pygeodesy.Elliptic3Tuple from .elliptic by testElliptic.py line 11
# lazily imported pygeodesy.EPS from .constants by testElliptic.py line 11
# lazily imported pygeodesy.fstr from .streprs by testElliptic.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testElliptic.py line 11
# lazily imported pygeodesy.PI_4 from .constants by testElliptic.py line 11
# lazily imported pygeodesy.radians from .utily by testElliptic.py line 11
# lazily imported pygeodesy.Scalar from .units by testElliptic.py line 11
# lazily imported pygeodesy.sincos2 from .utily by testElliptic.py line 11

    testing testElliptic.py 23.08.31 isLazy=3
    test 1 eps4: 8.881784197e-16
    test 2 RC, RF(0.020, ...): 3.914361830671
    test 3 RC, RF(0.030, ...): 6.584789484624
    test 4 RC, RF(0.040, ...): 5.493061443341
    test 5 RC, RF(0.050, ...): 4.812118250596
    test 6 RC, RF(0.060, ...): 4.335073632453
    test 7 RC, RF(0.070, ...): 3.976827306120
    test 8 RC, RF(0.080, ...): 3.694989719259
    test 9 RC, RF(0.090, ...): 3.465735902800
    test 10 RC, RF(0.100, ...): 3.274501502373
    test 11 RC, RF(0.110, ...): 3.111812518574
    test 12 RC, RF(0.120, ...): 2.971203516685
    test 13 RC, RF(0.130, ...): 2.848090500183
    test 14 RC, RF(0.140, ...): 2.739120555165
    test 15 RC, RF(0.150, ...): 2.641776814832
    test 16 RC, RF(0.160, ...): 2.554128118830
    test 17 RC, RF(0.170, ...): 2.474664615473
    test 18 RC, RF(0.180, ...): 2.402186472893
    test 19 RC, RF(0.190, ...): 2.335726540516
    test 20 RC, RF(0.200, ...): 2.274495360058
    test 21 RC, RF(0.210, ...): 2.217841271926
    test 22 RC, RF(0.220, ...): 2.165220951174
    test 23 RC, RF(0.230, ...): 2.116177296054
    test 24 RC, RF(0.240, ...): 2.070322594382
    test 25 RC, RF(0.250, ...): 2.027325540541
    test 26 RC, RF(0.260, ...): 1.986901103492
    test 27 RC, RF(0.270, ...): 1.948802534199
    test 28 RC, RF(0.280, ...): 1.912814998209
    test 29 RC, RF(0.290, ...): 1.878750456745
    test 30 RC, RF(0.300, ...): 1.846443516895
    test 31 RC, RF(0.310, ...): 1.815748041271
    test 32 RC, RF(0.320, ...): 1.786534358134
    test 33 RC, RF(0.330, ...): 1.758686950216
    test 34 RC, RF(0.340, ...): 1.732102528083
    test 35 RC, RF(0.350, ...): 1.706688414643
    test 36 RC, RF(0.360, ...): 1.682361183106
    test 37 RC, RF(0.370, ...): 1.659045502693
    test 38 RC, RF(0.380, ...): 1.636673155658
    test 39 RC, RF(0.390, ...): 1.615182196359
    test 40 RC, RF(0.400, ...): 1.594516228743
    test 41 RC, RF(0.410, ...): 1.574623783019
    test 42 RC, RF(0.420, ...): 1.555457775830
    test 43 RC, RF(0.430, ...): 1.536975041007
    test 44 RC, RF(0.440, ...): 1.519135920258
    test 45 RC, RF(0.450, ...): 1.501903904951
    test 46 RC, RF(0.460, ...): 1.485245321610
    test 47 RC, RF(0.470, ...): 1.469129054970
    test 48 RC, RF(0.480, ...): 1.453526303390
    test 49 RC, RF(0.490, ...): 1.438410362259
    test 50 RC, RF(0.500, ...): 1.423756431678
    test 51 RC, RF(0.510, ...): 1.409541445271
    test 52 RC, RF(0.520, ...): 1.395743917431
    test 53 RC, RF(0.530, ...): 1.382343806706
    test 54 RC, RF(0.540, ...): 1.369322393343
    test 55 RC, RF(0.550, ...): 1.356662169284
    test 56 RC, RF(0.560, ...): 1.344346739158
    test 57 RC, RF(0.570, ...): 1.332360730978
    test 58 RC, RF(0.580, ...): 1.320689715446
    test 59 RC, RF(0.590, ...): 1.309320132904
    test 60 RC, RF(0.600, ...): 1.298239227085
    test 61 RC, RF(0.610, ...): 1.287434984930
    test 62 RC, RF(0.620, ...): 1.276896081822
    test 63 RC, RF(0.630, ...): 1.266611831682
    test 64 RC, RF(0.640, ...): 1.256572141405
    test 65 RC, RF(0.650, ...): 1.246767469214
    test 66 RC, RF(0.660, ...): 1.237188786540
    test 67 RC, RF(0.670, ...): 1.227827543058
    test 68 RC, RF(0.680, ...): 1.218675634611
    test 69 RC, RF(0.690, ...): 1.209725373708
    test 70 RC, RF(0.700, ...): 1.200969462383
    test 71 RC, RF(0.710, ...): 1.192400967179
    test 72 RC, RF(0.720, ...): 1.184013296070
    test 73 RC, RF(0.730, ...): 1.175800177139
    test 74 RC, RF(0.740, ...): 1.167755638871
    test 75 RC, RF(0.750, ...): 1.159873991901
    test 76 RC, RF(0.760, ...): 1.152149812097
    test 77 RC, RF(0.770, ...): 1.144577924881
    test 78 RC, RF(0.780, ...): 1.137153390647
    test 79 RC, RF(0.790, ...): 1.129871491226
    test 80 RC, RF(0.800, ...): 1.122727717281
    test 81 RC, RF(0.810, ...): 1.115717756571
    test 82 RC, RF(0.820, ...): 1.108837483013
    test 83 RC, RF(0.830, ...): 1.102082946473
    test 84 RC, RF(0.840, ...): 1.095450363236
    test 85 RC, RF(0.850, ...): 1.088936107101
    test 86 RC, RF(0.860, ...): 1.082536701044
    test 87 RC, RF(0.870, ...): 1.076248809425
    test 88 RC, RF(0.880, ...): 1.070069230678
    test 89 RC, RF(0.890, ...): 1.063994890459
    test 90 RC, RF(0.900, ...): 1.058022835225
    test 91 RC, RF(0.910, ...): 1.052150226192
    test 92 RC, RF(0.920, ...): 1.046374333669
    test 93 RC, RF(0.930, ...): 1.040692531726
    test 94 RC, RF(0.940, ...): 1.035102293176
    test 95 RC, RF(0.950, ...): 1.029601184852
    test 96 RC, RF(0.960, ...): 1.024186863158
    test 97 RC, RF(0.970, ...): 1.018857069872
    test 98 RC, RF(0.980, ...): 1.013609628192
    test 99 RC, RF(0.990, ...): 1.008442438994
    test 100 RD, RJ(0.010, ...): 8.120132781711
    test 101 RD, RJ(0.020, ...): 7.119021204087
    test 102 RD, RJ(0.030, ...): 6.544107485563
    test 103 RD, RJ(0.040, ...): 6.142532079666
    test 104 RD, RJ(0.050, ...): 5.835358486352
    test 105 RD, RJ(0.060, ...): 5.587552234737
    test 106 RD, RJ(0.070, ...): 5.380489023690
    test 107 RD, RJ(0.080, ...): 5.203088814832
    test 108 RD, RJ(0.090, ...): 5.048227960523
    test 109 RD, RJ(0.100, ...): 4.911057935480
    test 110 RD, RJ(0.110, ...): 4.788131254930
    test 111 RD, RJ(0.120, ...): 4.676910208210
    test 112 RD, RJ(0.130, ...): 4.575473423301
    test 113 RD, RJ(0.140, ...): 4.482331804788
    test 114 RD, RJ(0.150, ...): 4.396308333326
    test 115 RD, RJ(0.160, ...): 4.316456874863
    test 116 RD, RJ(0.170, ...): 4.242005741804
    test 117 RD, RJ(0.180, ...): 4.172317477477
    test 118 RD, RJ(0.190, ...): 4.106859576449
    test 119 RD, RJ(0.200, ...): 4.045182759349
    test 120 RD, RJ(0.210, ...): 3.986904580308
    test 121 RD, RJ(0.220, ...): 3.931696871490
    test 122 RD, RJ(0.230, ...): 3.879275996390
    test 123 RD, RJ(0.240, ...): 3.829395191121
    test 124 RD, RJ(0.250, ...): 3.781838479725
    test 125 RD, RJ(0.260, ...): 3.736415791191
    test 126 RD, RJ(0.270, ...): 3.692959004641
    test 127 RD, RJ(0.280, ...): 3.651318719062
    test 128 RD, RJ(0.290, ...): 3.611361594199
    test 129 RD, RJ(0.300, ...): 3.572968145771
    test 130 RD, RJ(0.310, ...): 3.536030905108
    test 131 RD, RJ(0.320, ...): 3.500452873386
    test 132 RD, RJ(0.330, ...): 3.466146215741
    test 133 RD, RJ(0.340, ...): 3.433031152013
    test 134 RD, RJ(0.350, ...): 3.401035009727
    test 135 RD, RJ(0.360, ...): 3.370091411694
    test 136 RD, RJ(0.370, ...): 3.340139575961
    test 137 RD, RJ(0.380, ...): 3.311123710009
    test 138 RD, RJ(0.390, ...): 3.282992484411
    test 139 RD, RJ(0.400, ...): 3.255698573796
    test 140 RD, RJ(0.410, ...): 3.229198255060
    test 141 RD, RJ(0.420, ...): 3.203451054514
    test 142 RD, RJ(0.430, ...): 3.178419436977
    test 143 RD, RJ(0.440, ...): 3.154068531006
    test 144 RD, RJ(0.450, ...): 3.130365885345
    test 145 RD, RJ(0.460, ...): 3.107281252437
    test 146 RD, RJ(0.470, ...): 3.084786395490
    test 147 RD, RJ(0.480, ...): 3.062854916088
    test 148 RD, RJ(0.490, ...): 3.041462099793
    test 149 RD, RJ(0.500, ...): 3.020584777522
    test 150 RD, RJ(0.510, ...): 3.000201200833
    test 151 RD, RJ(0.520, ...): 2.980290929460
    test 152 RD, RJ(0.530, ...): 2.960834729701
    test 153 RD, RJ(0.540, ...): 2.941814482427
    test 154 RD, RJ(0.550, ...): 2.923213099639
    test 155 RD, RJ(0.560, ...): 2.905014448642
    test 156 RD, RJ(0.570, ...): 2.887203283023
    test 157 RD, RJ(0.580, ...): 2.869765179714
    test 158 RD, RJ(0.590, ...): 2.852686481504
    test 159 RD, RJ(0.600, ...): 2.835954244454
    test 160 RD, RJ(0.610, ...): 2.819556189720
    test 161 RD, RJ(0.620, ...): 2.803480659351
    test 162 RD, RJ(0.630, ...): 2.787716575666
    test 163 RD, RJ(0.640, ...): 2.772253403892
    test 164 RD, RJ(0.650, ...): 2.757081117726
    test 165 RD, RJ(0.660, ...): 2.742190167580
    test 166 RD, RJ(0.670, ...): 2.727571451237
    test 167 RD, RJ(0.680, ...): 2.713216286727
    test 168 RD, RJ(0.690, ...): 2.699116387203
    test 169 RD, RJ(0.700, ...): 2.685263837661
    test 170 RD, RJ(0.710, ...): 2.671651073335
    test 171 RD, RJ(0.720, ...): 2.658270859623
    test 172 RD, RJ(0.730, ...): 2.645116273430
    test 173 RD, RJ(0.740, ...): 2.632180685789
    test 174 RD, RJ(0.750, ...): 2.619457745678
    test 175 RD, RJ(0.760, ...): 2.606941364924
    test 176 RD, RJ(0.770, ...): 2.594625704104
    test 177 RD, RJ(0.780, ...): 2.582505159384
    test 178 RD, RJ(0.790, ...): 2.570574350197
    test 179 RD, RJ(0.800, ...): 2.558828107720
    test 180 RD, RJ(0.810, ...): 2.547261464073
    test 181 RD, RJ(0.820, ...): 2.535869642198
    test 182 RD, RJ(0.830, ...): 2.524648046356
    test 183 RD, RJ(0.840, ...): 2.513592253209
    test 184 RD, RJ(0.850, ...): 2.502698003435
    test 185 RD, RJ(0.860, ...): 2.491961193848
    test 186 RD, RJ(0.870, ...): 2.481377869975
    test 187 RD, RJ(0.880, ...): 2.470944219069
    test 188 RD, RJ(0.890, ...): 2.460656563526
    test 189 RD, RJ(0.900, ...): 2.450511354674
    test 190 RD, RJ(0.910, ...): 2.440505166909
    test 191 RD, RJ(0.920, ...): 2.430634692166
    test 192 RD, RJ(0.930, ...): 2.420896734686
    test 193 RD, RJ(0.940, ...): 2.411288206073
    test 194 RD, RJ(0.950, ...): 2.401806120619
    test 195 RD, RJ(0.960, ...): 2.392447590873
    test 196 RD, RJ(0.970, ...): 2.383209823448
    test 197 RD, RJ(0.980, ...): 2.374090115050
    test 198 RD, RJ(0.990, ...): 2.365085848706

    test 199 eps4: 8.881784197e-16
    test 200 k2: 0.1000000
    test 201 kp2: 0.9000000
    test 202 eps: 0.0263340
    test 203 cD: 0.816837118
    test 204 cE: 1.530757637
    test 205 cG: 1.530757637
    test 206 cH: 0.795604230
    test 207 cK: 1.612441349
    test 208 cKE: 0.081683712
    test 209 cPi: 1.612441349
    test 210 fE(phi): 0.348372822
    test 211 fDelta(sn, cn): 0.994133906
    test 212 fD(sn, cn, dn): 0.013885234
    test 213 fE(sn, cn, dn): 0.348372822
    test 214 fEd(PI_2): 0.027415224
    test 215 fEinv(PI_2): 1.612999420
    test 216 fF(sn, cn, dn): 0.349761345
    test 217 fG(sn, cn, dn): 0.348372822
    test 218 fH(sn, cn, dn): 0.335876111
    test 219 fPi(sn, cn, dn): 0.349761345
    test 220 fPi(sn, None, dn): invokation Elliptic.fPi(0, None, 1): invalid
    test 221 fPi(sn, dn, None): invokation Elliptic.fH(0, 1, None): invalid

    test 222 deltaD(sn, cn, dn): -0.3223642
    test 223 deltaE(sn, cn, dn): 0.0084191
    test 224 deltaEinv(sn, cn): -0.0082518
    test 225 deltaF(sn, cn, dn): -0.0083379
    test 226 deltaG(sn, cn, dn): 0.0084191
    test 227 deltaH(sn, cn, dn): 0.3140691
    test 228 deltaPi(sn, cn, dn): -0.0083379
    test 229 deltaPi(sn, None, dn): invokation Elliptic.deltaPi(0, None, 1): invalid
    test 230 deltaPi(sn, dn, None): invokation Elliptic.deltaPi(0, 1, None): invalid

    test 231 RF(1,   2, 0): 1.3110287771461
    test 232 RF(0.5, 1, 0): 1.8540746773014
    test 233 RF(2,   3, 4): 0.58408284167715

    test 234 RC(0,  1/4): 3.1415926535898
    test 235 RC(9/4,  2): 0.69314718055995
    test 236 RC(1/4, -2): 0.23104906018665

    test 237 RJ(0, 1, 2, 3): 0.77688623778582
    test 238 RJ(2, 3, 4, 5): 0.14297579667157

    test 239 RD(0, 2, 1): 1.7972103521034
    test 240 RD(2, 3, 4): 0.16510527294261

    test 241 RG(0, 16, 16): 3.1415926535898
    test 242 RG(2,  3,  4): 1.7255030280692
    test 243 RG(0,  0.0796, 4): 1.0284758090288

    test 244 reset: 4
    test 245 sncndn(x): 0.0, 1.0, 1.0
    test 246 sncndn(x): 1.0, 0.0, 1.0
    test 247 sncndn(x): 0.0, 1.0, 1.0
    test 248 sncndn(x): 0.917152336, 0.398536815, 0.398536815
    test 249 sncndn(x): <class 'pygeodesy.elliptic.Elliptic3Tuple'>

    test 250 copy(Elliptic): (<class 'pygeodesy.elliptic.Elliptic'>, True)
    test 251 Elliptic.copy(): (<class 'pygeodesy.elliptic.Elliptic'>, True)
    test 252 k2 alpha2 kp2 alphap2: (0.0, 0.0, 0.0, 0.0)
    test 253 k2 alpha2 kp2 alphap2: (0.25, 0.25, 0.25, 0.25)
    test 254 k2 alpha2 kp2 alphap2: (0.5, 0.5, 0.5, 0.5)
    test 255 k2 alpha2 kp2 alphap2: (0.75, 0.75, 0.75, 0.75)

    test 256 _convergenceError: no convergence (1), tolerance (2)

    test 257 _ellipticError: invokation Elliptic.testElliptic(None): test
    test 258 _ellipticError: invokation Elliptic._ellipticError(None): invokation Elliptic.testElliptic(None): test

    all 258 testElliptic.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 79.664 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testEpsg.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Epsg from .epsg by testEpsg.py line 11
# lazily imported pygeodesy.toUtmUps8 from .utmups by testEpsg.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14

    testing testEpsg.py 23.03.27 isLazy=3
    test 1 Epsg: Epsg(32661)
    test 2 0 N: (0, 'N')
    test 3 1 N: (1, 'N')
    test 4 2 N: (2, 'N')
    test 5 3 N: (3, 'N')
    test 6 4 N: (4, 'N')
    test 7 5 N: (5, 'N')
    test 8 6 N: (6, 'N')
    test 9 7 N: (7, 'N')
    test 10 8 N: (8, 'N')
    test 11 9 N: (9, 'N')
    test 12 10 N: (10, 'N')
    test 13 11 N: (11, 'N')
    test 14 12 N: (12, 'N')
    test 15 13 N: (13, 'N')
    test 16 14 N: (14, 'N')
    test 17 15 N: (15, 'N')
    test 18 16 N: (16, 'N')
    test 19 17 N: (17, 'N')
    test 20 18 N: (18, 'N')
    test 21 19 N: (19, 'N')
    test 22 20 N: (20, 'N')
    test 23 21 N: (21, 'N')
    test 24 22 N: (22, 'N')
    test 25 23 N: (23, 'N')
    test 26 24 N: (24, 'N')
    test 27 25 N: (25, 'N')
    test 28 26 N: (26, 'N')
    test 29 27 N: (27, 'N')
    test 30 28 N: (28, 'N')
    test 31 29 N: (29, 'N')
    test 32 30 N: (30, 'N')
    test 33 31 N: (31, 'N')
    test 34 32 N: (32, 'N')
    test 35 33 N: (33, 'N')
    test 36 34 N: (34, 'N')
    test 37 35 N: (35, 'N')
    test 38 36 N: (36, 'N')
    test 39 37 N: (37, 'N')
    test 40 38 N: (38, 'N')
    test 41 39 N: (39, 'N')
    test 42 40 N: (40, 'N')
    test 43 41 N: (41, 'N')
    test 44 42 N: (42, 'N')
    test 45 43 N: (43, 'N')
    test 46 44 N: (44, 'N')
    test 47 45 N: (45, 'N')
    test 48 46 N: (46, 'N')
    test 49 47 N: (47, 'N')
    test 50 48 N: (48, 'N')
    test 51 49 N: (49, 'N')
    test 52 50 N: (50, 'N')
    test 53 51 N: (51, 'N')
    test 54 52 N: (52, 'N')
    test 55 53 N: (53, 'N')
    test 56 54 N: (54, 'N')
    test 57 55 N: (55, 'N')
    test 58 56 N: (56, 'N')
    test 59 57 N: (57, 'N')
    test 60 58 N: (58, 'N')
    test 61 59 N: (59, 'N')
    test 62 60 N: (60, 'N')
    test 63 Epsg: Epsg(32761)
    test 64 0 S: (0, 'S')
    test 65 1 S: (1, 'S')
    test 66 2 S: (2, 'S')
    test 67 3 S: (3, 'S')
    test 68 4 S: (4, 'S')
    test 69 5 S: (5, 'S')
    test 70 6 S: (6, 'S')
    test 71 7 S: (7, 'S')
    test 72 8 S: (8, 'S')
    test 73 9 S: (9, 'S')
    test 74 10 S: (10, 'S')
    test 75 11 S: (11, 'S')
    test 76 12 S: (12, 'S')
    test 77 13 S: (13, 'S')
    test 78 14 S: (14, 'S')
    test 79 15 S: (15, 'S')
    test 80 16 S: (16, 'S')
    test 81 17 S: (17, 'S')
    test 82 18 S: (18, 'S')
    test 83 19 S: (19, 'S')
    test 84 20 S: (20, 'S')
    test 85 21 S: (21, 'S')
    test 86 22 S: (22, 'S')
    test 87 23 S: (23, 'S')
    test 88 24 S: (24, 'S')
    test 89 25 S: (25, 'S')
    test 90 26 S: (26, 'S')
    test 91 27 S: (27, 'S')
    test 92 28 S: (28, 'S')
    test 93 29 S: (29, 'S')
    test 94 30 S: (30, 'S')
    test 95 31 S: (31, 'S')
    test 96 32 S: (32, 'S')
    test 97 33 S: (33, 'S')
    test 98 34 S: (34, 'S')
    test 99 35 S: (35, 'S')
    test 100 36 S: (36, 'S')
    test 101 37 S: (37, 'S')
    test 102 38 S: (38, 'S')
    test 103 39 S: (39, 'S')
    test 104 40 S: (40, 'S')
    test 105 41 S: (41, 'S')
    test 106 42 S: (42, 'S')
    test 107 43 S: (43, 'S')
    test 108 44 S: (44, 'S')
    test 109 45 S: (45, 'S')
    test 110 46 S: (46, 'S')
    test 111 47 S: (47, 'S')
    test 112 48 S: (48, 'S')
    test 113 49 S: (49, 'S')
    test 114 50 S: (50, 'S')
    test 115 51 S: (51, 'S')
    test 116 52 S: (52, 'S')
    test 117 53 S: (53, 'S')
    test 118 54 S: (54, 'S')
    test 119 55 S: (55, 'S')
    test 120 56 S: (56, 'S')
    test 121 57 S: (57, 'S')
    test 122 58 S: (58, 'S')
    test 123 59 S: (59, 'S')
    test 124 60 S: (60, 'S')
    test 125 Ups: Epsg(32761)
    test 126 Ups: 00A S
    test 127 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 128 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 129 Ups: Epsg(32761)
    test 130 Ups: 00B S
    test 131 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 132 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 133 Ups: Epsg(32661)
    test 134 Ups: 00Y N
    test 135 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 136 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 137 Ups: Epsg(32661)
    test 138 Ups: 00Z N
    test 139 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 140 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 141 TMcoord 1: 38W N
    test 142 TMcoord 2: 34P N
    test 143 TMcoord 3: 43Q N
    test 144 TMcoord 4: 35Q N
    test 145 TMcoord 5: 37N N
    test 146 TMcoord 6: 34W N
    test 147 TMcoord 7: 40V N
    test 148 TMcoord 8: 34P N
    test 149 TMcoord 9: 41S N
    test 150 TMcoord 10: 41X N
    test 151 TMcoord 11: 43X N
    test 152 TMcoord 12: 44Q N
    test 153 TMcoord 13: 44R N
    test 154 TMcoord 14: 39U N
    test 155 TMcoord 15: 44P N
    test 156 TMcoord 16: 39R N
    test 157 TMcoord 17: 41W N
    test 158 TMcoord 18: 45U N
    test 159 TMcoord 19: 32R N
    test 160 TMcoord 20: 44X N
    test 161 TMcoord 21: 35T N
    test 162 TMcoord 22: 32T N
    test 163 TMcoord 23: 31T N
    test 164 TMcoord 24: 35N N
    test 165 TMcoord 25: 45P N
    test 166 TMcoord 26: 33V N
    test 167 TMcoord 27: 41Q N
    test 168 TMcoord 28: 40X N
    test 169 TMcoord 29: 33P N
    test 170 TMcoord 30: 40S N
    test 171 TMcoord 31: 37T N
    test 172 TMcoord 32: 33X N
    test 173 TMcoord 33: 41U N
    test 174 TMcoord 34: 43Q N
    test 175 TMcoord 35: 42S N
    test 176 TMcoord 36: 33S N
    test 177 TMcoord 37: 35X N
    test 178 TMcoord 38: 38N N
    test 179 TMcoord 39: 44P N
    test 180 TMcoord 40: 33U N
    test 181 TMcoord 41: 37W N
    test 182 TMcoord 42: 36T N
    test 183 TMcoord 43: 36Q N
    test 184 TMcoord 44: 34S N
    test 185 TMcoord 45: 37S N
    test 186 TMcoord 46: 34N N
    test 187 TMcoord 47: 34T N
    test 188 TMcoord 48: 43Q N
    test 189 TMcoord 49: 32N N
    test 190 TMcoord 50: 31Q N
    test 191 TMcoord 51: 45R N
    test 192 TMcoord 52: 45R N
    test 193 TMcoord 53: 34W N
    test 194 TMcoord 54: 44V N
    test 195 TMcoord 55: 44S N
    test 196 TMcoord 56: 39R N
    test 197 TMcoord 57: 00Z N
    test 198 TMcoord 58: 36R N
    test 199 TMcoord 59: 41V N
    test 200 TMcoord 60: 42N N
    test 201 TMcoord 61: 43S N
    test 202 TMcoord 62: 34N N
    test 203 TMcoord 63: 34U N
    test 204 TMcoord 64: 38V N
    test 205 TMcoord 65: 34Q N
    test 206 TMcoord 66: 38P N
    test 207 TMcoord 67: 42S N
    test 208 TMcoord 68: 44S N
    test 209 TMcoord 69: 31Q N
    test 210 TMcoord 70: 40W N
    test 211 TMcoord 71: 35X N
    test 212 TMcoord 72: 32T N
    test 213 TMcoord 73: 45U N
    test 214 TMcoord 74: 40Q N
    test 215 TMcoord 75: 31T N
    test 216 TMcoord 76: 44R N
    test 217 TMcoord 77: 34U N
    test 218 TMcoord 78: 38P N
    test 219 TMcoord 79: 38Q N
    test 220 TMcoord 80: 45N N
    test 221 TMcoord 81: 31S N
    test 222 TMcoord 82: 41U N
    test 223 TMcoord 83: 40V N
    test 224 TMcoord 84: 43X N
    test 225 TMcoord 85: 35N N
    test 226 TMcoord 86: 44P N
    test 227 TMcoord 87: 41N N
    test 228 TMcoord 88: 38Q N
    test 229 TMcoord 89: 43X N
    test 230 TMcoord 90: 36V N
    test 231 TMcoord 91: 34Q N
    test 232 TMcoord 92: 35W N
    test 233 TMcoord 93: 45U N
    test 234 TMcoord 94: 40R N
    test 235 TMcoord 95: 36R N
    test 236 TMcoord 96: 35S N
    test 237 TMcoord 97: 41R N
    test 238 TMcoord 98: 39Q N
    test 239 TMcoord 99: 37T N
    test 240 TMcoord 100: 42P N
    test 241 TMcoord 101: 35T N
    test 242 TMcoord 102: 34Q N
    test 243 TMcoord 103: 41T N
    test 244 TMcoord 104: 43R N
    test 245 TMcoord 105: 34Q N
    test 246 TMcoord 106: 45P N
    test 247 TMcoord 107: 31P N
    test 248 TMcoord 108: 44V N
    test 249 TMcoord 109: 42X N
    test 250 TMcoord 110: 33R N
    test 251 TMcoord 111: 37W N
    test 252 TMcoord 112: 31S N
    test 253 TMcoord 113: 42N N
    test 254 TMcoord 114: 39N N
    test 255 TMcoord 115: 39T N
    test 256 TMcoord 116: 39P N
    test 257 TMcoord 117: 34U N
    test 258 TMcoord 118: 41P N
    test 259 TMcoord 119: 37R N
    test 260 TMcoord 120: 44Q N
    test 261 TMcoord 121: 32V N
    test 262 TMcoord 122: 41R N
    test 263 TMcoord 123: 36T N
    test 264 TMcoord 124: 42U N
    test 265 TMcoord 125: 42U N
    test 266 TMcoord 126: 39T N
    test 267 TMcoord 127: 32T N
    test 268 TMcoord 128: 32Q N
    test 269 TMcoord 129: 38P N
    test 270 TMcoord 130: 34Q N
    test 271 TMcoord 131: 36V N
    test 272 TMcoord 132: 36T N
    test 273 TMcoord 133: 43T N
    test 274 TMcoord 134: 41W N
    test 275 TMcoord 135: 32V N
    test 276 TMcoord 136: 39X N
    test 277 TMcoord 137: 32U N
    test 278 TMcoord 138: 37X N
    test 279 TMcoord 139: 35N N
    test 280 TMcoord 140: 36P N
    test 281 TMcoord 141: 31S N
    test 282 TMcoord 142: 36N N
    test 283 TMcoord 143: 42S N
    test 284 TMcoord 144: 44N N
    test 285 TMcoord 145: 44P N
    test 286 TMcoord 146: 39U N
    test 287 TMcoord 147: 45Q N
    test 288 TMcoord 148: 41W N
    test 289 TMcoord 149: 41N N
    test 290 TMcoord 150: 32S N
    test 291 TMcoord 151: 32N N
    test 292 TMcoord 152: 32T N
    test 293 TMcoord 153: 38R N
    test 294 TMcoord 154: 32V N
    test 295 TMcoord 155: 37Q N
    test 296 TMcoord 156: 44N N
    test 297 TMcoord 157: 34W N
    test 298 TMcoord 158: 45N N
    test 299 TMcoord 159: 42S N
    test 300 TMcoord 160: 40T N
    test 301 TMcoord 161: 31U N
    test 302 TMcoord 162: 45Q N
    test 303 TMcoord 163: 40U N
    test 304 TMcoord 164: 45T N
    test 305 TMcoord 165: 40R N
    test 306 TMcoord 166: 31V N
    test 307 TMcoord 167: 45P N
    test 308 TMcoord 168: 43W N
    test 309 TMcoord 169: 43U N
    test 310 TMcoord 170: 44V N
    test 311 TMcoord 171: 40P N
    test 312 TMcoord 172: 36Q N
    test 313 TMcoord 173: 42Q N
    test 314 TMcoord 174: 41Q N
    test 315 TMcoord 175: 32S N
    test 316 TMcoord 176: 39P N
    test 317 TMcoord 177: 39Q N
    test 318 TMcoord 178: 39T N
    test 319 TMcoord 179: 34U N
    test 320 TMcoord 180: 32W N
    test 321 TMcoord 181: 41U N
    test 322 TMcoord 182: 31Q N
    test 323 TMcoord 183: 40N N
    test 324 TMcoord 184: 40T N
    test 325 TMcoord 185: 38P N
    test 326 TMcoord 186: 44P N
    test 327 TMcoord 187: 40N N
    test 328 TMcoord 188: 44V N
    test 329 TMcoord 189: 41V N
    test 330 TMcoord 190: 43Q N
    test 331 TMcoord 191: 43X N
    test 332 TMcoord 192: 39N N
    test 333 TMcoord 193: 38T N
    test 334 TMcoord 194: 32R N
    test 335 TMcoord 195: 37S N
    test 336 TMcoord 196: 44W N
    test 337 TMcoord 197: 43V N
    test 338 TMcoord 198: 35T N
    test 339 TMcoord 199: 44W N
    test 340 TMcoord 200: 44X N
    test 341 TMcoord 201: 33Q N
    test 342 TMcoord 202: 40W N
    test 343 TMcoord 203: 43S N
    test 344 TMcoord 204: 32U N
    test 345 TMcoord 205: 33V N
    test 346 TMcoord 206: 34R N
    test 347 TMcoord 207: 39S N
    test 348 TMcoord 208: 43W N
    test 349 TMcoord 209: 39T N
    test 350 TMcoord 210: 31W N
    test 351 TMcoord 211: 45R N
    test 352 TMcoord 212: 34W N
    test 353 TMcoord 213: 32T N
    test 354 TMcoord 214: 31P N
    test 355 TMcoord 215: 44V N
    test 356 TMcoord 216: 45U N
    test 357 TMcoord 217: 43R N
    test 358 TMcoord 218: 31N N
    test 359 TMcoord 219: 43T N
    test 360 TMcoord 220: 45R N
    test 361 TMcoord 221: 39N N
    test 362 TMcoord 222: 37S N
    test 363 TMcoord 223: 31R N
    test 364 TMcoord 224: 38Q N
    test 365 TMcoord 225: 40V N
    test 366 TMcoord 226: 45N N
    test 367 TMcoord 227: 44R N
    test 368 TMcoord 228: 43P N
    test 369 TMcoord 229: 42P N
    test 370 TMcoord 230: 45S N
    test 371 TMcoord 231: 42N N
    test 372 TMcoord 232: 38S N
    test 373 TMcoord 233: 32T N
    test 374 TMcoord 234: 41T N
    test 375 TMcoord 235: 34S N
    test 376 TMcoord 236: 40R N
    test 377 TMcoord 237: 35V N
    test 378 TMcoord 238: 38N N
    test 379 TMcoord 239: 40V N
    test 380 TMcoord 240: 36R N
    test 381 TMcoord 241: 37W N
    test 382 TMcoord 242: 45R N
    test 383 TMcoord 243: 37V N
    test 384 TMcoord 244: 33P N
    test 385 TMcoord 245: 32U N
    test 386 TMcoord 246: 38T N
    test 387 TMcoord 247: 37N N
    test 388 TMcoord 248: 36R N
    test 389 TMcoord 249: 44R N
    test 390 TMcoord 250: 44Q N
    test 391 TMcoord 251: 45R N
    test 392 TMcoord 252: 34N N
    test 393 TMcoord 253: 43S N
    test 394 TMcoord 254: 40Q N
    test 395 TMcoord 255: 33T N
    test 396 TMcoord 256: 44P N
    test 397 TMcoord 257: 39N N
    test 398 TMcoord 258: 40Q N

    all 398 testEpsg.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 155.597 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testErrors.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.crosserrors from .errors by testErrors.py line 11
# lazily imported pygeodesy.exception_chaining from .errors by testErrors.py line 11
# lazily imported pygeodesy.LenError from .errors by testErrors.py line 11
# lazily imported pygeodesy.LimitError from .errors by testErrors.py line 11
# lazily imported pygeodesy.limiterrors from .errors by testErrors.py line 11
# lazily imported pygeodesy.RangeError from .errors by testErrors.py line 11
# lazily imported pygeodesy.rangerrors from .errors by testErrors.py line 11
# lazily imported pygeodesy.ClipError from .errors by testErrors.py line 93
# lazily imported pygeodesy.CrossError from .errors by testErrors.py line 93
# lazily imported pygeodesy.CSSError from .css by testErrors.py line 93
# lazily imported pygeodesy.EcefError from .ecef by testErrors.py line 93
# lazily imported pygeodesy.EllipticError from .elliptic by testErrors.py line 93
# lazily imported pygeodesy.EPSGError from .epsg by testErrors.py line 93
# lazily imported pygeodesy.ETMError from .etm by testErrors.py line 93
# lazily imported pygeodesy.FrechetError from .frechet by testErrors.py line 93
# lazily imported pygeodesy.GARSError from .gars by testErrors.py line 93
# lazily imported pygeodesy.GeohashError from .geohash by testErrors.py line 93
# lazily imported pygeodesy.GeoidError from .geoids by testErrors.py line 93
# lazily imported pygeodesy.HausdorffError from .hausdorff by testErrors.py line 93
# lazily imported pygeodesy.HeightError from .heights by testErrors.py line 93
# lazily imported pygeodesy.LCCError from .lcc by testErrors.py line 93
# lazily imported pygeodesy.MGRSError from .errors by testErrors.py line 93
# lazily imported pygeodesy.OSGRError from .osgr by testErrors.py line 93
# lazily imported pygeodesy.PGMError from .geoids by testErrors.py line 93
# lazily imported pygeodesy.PointsError from .errors by testErrors.py line 93
# lazily imported pygeodesy.SciPyError from .errors by testErrors.py line 93
# lazily imported pygeodesy.SciPyWarning from .errors by testErrors.py line 93
# lazily imported pygeodesy.TRFError from .errors by testErrors.py line 93
# lazily imported pygeodesy.UnitError from .errors by testErrors.py line 93
# lazily imported pygeodesy.UPSError from .ups by testErrors.py line 93
# lazily imported pygeodesy.UTMError from .utm by testErrors.py line 93
# lazily imported pygeodesy.UTMUPSError from .utmups by testErrors.py line 93
# lazily imported pygeodesy.VectorError from .errors by testErrors.py line 93
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testErrors.py line 93
# lazily imported pygeodesy.WebMercatorError from .webmercator by testErrors.py line 93
# lazily imported pygeodesy.WGRSError from .wgrs by testErrors.py line 93

    testing testErrors.py 23.03.27 (module pygeodesy.errors 24.06.24) isLazy=3
    test 1 AssertionError: name ('value'): test1 txt
    test 2 AssertionError: 'name=value' MISSING: test2 txt
    test 3 AttributeError: name ('value'): test1 txt
    test 4 AttributeError: 'name=value' MISSING: test2 txt
    test 5 IndexError: name ('value'): test1 txt
    test 6 IndexError: 'name=value' MISSING: test2 txt
    test 7 LimitError: name ('value'): test1 txt
    test 8 LimitError: 'name=value' MISSING: test2 txt
    test 9 NameError: name ('value'): test1 txt
    test 10 NameError: 'name=value' MISSING: test2 txt
    test 11 ParseError: name ('value'): test1 txt
    test 12 ParseError: 'name=value' MISSING: test2 txt
    test 13 TypeError: type(name) ('value'): test1 txt
    test 14 TypeError: 'name=value' MISSING: test2 txt
    test 15 ClipError: name ('value'): test1 txt
    test 16 ClipError: 'name=value' MISSING: test2 txt
    test 17 CrossError: name ('value'): test1 txt
    test 18 CrossError: 'name=value' MISSING: test2 txt
    test 19 CSSError: name ('value'): test1 txt
    test 20 CSSError: 'name=value' MISSING: test2 txt
    test 21 EcefError: name ('value'): test1 txt
    test 22 EcefError: 'name=value' MISSING: test2 txt
    test 23 EllipticError: name ('value'): test1 txt
    test 24 EllipticError: 'name=value' MISSING: test2 txt
    test 25 EPSGError: name ('value'): test1 txt
    test 26 EPSGError: 'name=value' MISSING: test2 txt
    test 27 ETMError: name ('value'): test1 txt
    test 28 ETMError: 'name=value' MISSING: test2 txt
    test 29 FrechetError: name ('value'): test1 txt
    test 30 FrechetError: 'name=value' MISSING: test2 txt
    test 31 GARSError: name ('value'): test1 txt
    test 32 GARSError: 'name=value' MISSING: test2 txt
    test 33 GeohashError: name ('value'): test1 txt
    test 34 GeohashError: 'name=value' MISSING: test2 txt
    test 35 GeoidError: name ('value'): test1 txt
    test 36 GeoidError: 'name=value' MISSING: test2 txt
    test 37 HausdorffError: name ('value'): test1 txt
    test 38 HausdorffError: 'name=value' MISSING: test2 txt
    test 39 HeightError: name ('value'): test1 txt
    test 40 HeightError: 'name=value' MISSING: test2 txt
    test 41 LazyImportError: name ('value'): test1 txt
    test 42 LazyImportError: 'name=value' MISSING: test2 txt
    test 43 LCCError: name ('value'): test1 txt
    test 44 LCCError: 'name=value' MISSING: test2 txt
    test 45 MGRSError: name ('value'): test1 txt
    test 46 MGRSError: 'name=value' MISSING: test2 txt
    test 47 OSGRError: name ('value'): test1 txt
    test 48 OSGRError: 'name=value' MISSING: test2 txt
    test 49 PGMError: name ('value'): test1 txt
    test 50 PGMError: 'name=value' MISSING: test2 txt
    test 51 PointsError: name ('value'): test1 txt
    test 52 PointsError: 'name=value' MISSING: test2 txt
    test 53 SciPyError: name ('value'): test1 txt
    test 54 SciPyError: 'name=value' MISSING: test2 txt
    test 55 SciPyWarning: name ('value'): test1 txt
    test 56 SciPyWarning: 'name=value' MISSING: test2 txt
    test 57 TRFError: name ('value'): test1 txt
    test 58 TRFError: 'name=value' MISSING: test2 txt
    test 59 UnitError: name ('value'): test1 txt
    test 60 UnitError: 'name=value' MISSING: test2 txt
    test 61 UPSError: name ('value'): test1 txt
    test 62 UPSError: 'name=value' MISSING: test2 txt
    test 63 UTMError: name ('value'): test1 txt
    test 64 UTMError: 'name=value' MISSING: test2 txt
    test 65 UTMUPSError: name ('value'): test1 txt
    test 66 UTMUPSError: 'name=value' MISSING: test2 txt
    test 67 VectorError: name ('value'): test1 txt
    test 68 VectorError: 'name=value' MISSING: test2 txt
    test 69 VincentyError: name ('value'): test1 txt
    test 70 VincentyError: 'name=value' MISSING: test2 txt
    test 71 WebMercatorError: name ('value'): test1 txt
    test 72 WebMercatorError: 'name=value' MISSING: test2 txt
    test 73 WGRSError: name ('value'): test1 txt
    test 74 WGRSError: 'name=value' MISSING: test2 txt
    test 75 _InvalidError: zero (1): invalid
    test 76 _InvalidError: ValueError('zero (1): invalid')
    test 77 _InvalidError: one (2) or zero (1): outside
    test 78 _InvalidError: ValueError('one (2) or zero (1): outside')
    test 79 _InvalidError: one (2) or zero (1): outside
    test 80 _InvalidError: RangeError('one (2) or zero (1): outside')
    test 81 _IsnotError: _None (None): not an int or float
    test 82 _IsnotError: TypeError('_None (None): not an int or float')
    test 83 _IsnotError: _None (None): not a scalar
    test 84 _IsnotError: TypeError('_None (None): not a scalar')
    test 85 _IsnotError: _None (None): not a scalar
    test 86 _IsnotError: LimitError('_None (None): not a scalar')
    test 87 LenError: LenError(a, b, c, d) len 1 vs 2 vs 3 vs 4: invalid
    test 88 crosserrors: True
    test 89 crosserrors: False
    test 90 limiterrors: True
    test 91 limiterrors: False
    test 92 rangerrors: True
    test 93 rangerrors: False
    test 94 exception_chaining: False
    test 95 exception_chaining: None
    test 96 exception_chaining: None
    test 97 _xkwds_get: test1
    test 98 _xkwds_get: test2
    test 99 _xkwds_get: _xkwds_get({})
    test 100 _xkwds_get: _xkwds_get({}, n1='d1', n2='d2')
    test 101 _xkwds_pop: test1
    test 102 _xkwds_pop: test2
    test 103 _xkwds_pop: _xkwds_pop2({})
    test 104 _xkwds_pop: _xkwds_pop2({}, n1='d1', n2='d2')

    all 104 testErrors.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 524.998 us

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testEtm.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.etm by testEtm.py line 11
# lazily imported pygeodesy.ExactTransverseMercator from .etm by testEtm.py line 11
# lazily imported pygeodesy.ellipsoidalNvector by testEtm.py line 115
# lazily imported pygeodesy.ellipsoidalVincenty by testEtm.py line 115

    testing testEtm.py 23.03.27 (module pygeodesy.etm 24.06.11) isLazy=3

    testExactTransverseMercator(pygeodesy.etm, 24.06.11)
    test 1 name: test
    test 2 toStr: datum='WGS84', extendp=True, k0=0.9996, lon0=0.0, name='test'
    test 3 easting: -59401.921148
    test 4 northing: 4472390.031129
    test 5 gamma: -0.453697
    test 6 scale: 0.999643
    test 7 lat: 40.400000
    test 8 lon: -3.700000
    test 9 gamma: -0.453697
    test 10 scale: 0.999643
    test 11 easting: -59401.921148
    test 12 northing: 4472390.031129
    test 13 gamma: -0.453697
    test 14 scale: 0.999643
    test 15 easting: 25495.511523
    test 16 northing: 4461098.320889
    test 17 gamma: 0.194038
    test 18 scale: 0.999608
    test 19 lat: 40.300000
    test 20 lon: -74.700000
    test 21 gamma: 0.194038
    test 22 scale: 0.999608
    test 23 easting: 25495.511523
    test 24 northing: 4461098.320889
    test 25 gamma: 0.194038
    test 26 scale: 0.999608
    test 27 lat: -2.00000000
    test 28 lon: 88.00000000
    test 29 gamma: 67.63332900
    test 30 scale: 26.33699547
    test 31 easting: 29735142.37835700  FAILED, KNOWN, expected 29735142.37835703
    test 32 northing: 4235043.60793302  FAILED, KNOWN, expected 4235043.60793304
    test 33 gamma: 67.63332900
    test 34 scale: 26.33699547
    test 35 copy(ExactTransverseMercator): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)
    test 36 ExactTransverseMercator.copy(): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)

    testExactTransverseMercator(pygeodesy.etm, 24.06.11)
    test 37 name: test
    test 38 toStr: datum='WGS84', extendp=False, k0=0.9996, lon0=0.0, name='test'
    test 39 easting: -59401.921148
    test 40 northing: 4472390.031129
    test 41 gamma: -0.453697
    test 42 scale: 0.999643
    test 43 lat: 40.400000
    test 44 lon: -3.700000
    test 45 gamma: -0.453697
    test 46 scale: 0.999643
    test 47 easting: -59401.921148
    test 48 northing: 4472390.031129
    test 49 gamma: -0.453697
    test 50 scale: 0.999643
    test 51 easting: 25495.511523
    test 52 northing: 4461098.320889
    test 53 gamma: 0.194038
    test 54 scale: 0.999608
    test 55 lat: 40.300000
    test 56 lon: -74.700000
    test 57 gamma: 0.194038
    test 58 scale: 0.999608
    test 59 easting: 25495.511523
    test 60 northing: 4461098.320889
    test 61 gamma: 0.194038
    test 62 scale: 0.999608
    test 63 lat: -2.00000000
    test 64 lon: 88.00000000
    test 65 gamma: 67.63332900
    test 66 scale: 26.33699547
    test 67 easting: 0.000
    test 68 northing: -9997964.943
    test 69 gamma: 120.000
    test 70 scale: 1.000
    test 71 lat: -90.000
    test 72 lon: 0.000
    test 73 gamma: 0.000
    test 74 scale: 1.000
    test 75 copy(ExactTransverseMercator): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)
    test 76 ExactTransverseMercator.copy(): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)

    testLatLon(pygeodesy.etm, 24.06.11)
    test 77 toEtm8: 45 S -20297797 5336899
    test 78 name: test
    test 79 toUtm: 45 S -20297797 5336899
    test 80 name: test
    test 81 toETM5: 45 S -20297797 5336899
    test 82 copy(Etm): (<class 'pygeodesy.etm.Etm'>, True)
    test 83 .name: test
    test 84 Etm.copy(): (<class 'pygeodesy.etm.Etm'>, True)
    test 85 .name: test
    test 86 parse: 31 N 448251 5411932
    test 87 name: parse
    test 88 parse: 31 N 448251 5411932
    test 89 name: parse

    testLatLon(pygeodesy.etm, 24.06.11)
    test 90 toEtm8: 45 S -20297797 5336899
    test 91 name: test
    test 92 toUtm: 45 S -20297797 5336899
    test 93 name: test
    test 94 toETM5: 45 S -20297797 5336899
    test 95 copy(Etm): (<class 'pygeodesy.etm.Etm'>, True)
    test 96 .name: test
    test 97 Etm.copy(): (<class 'pygeodesy.etm.Etm'>, True)
    test 98 .name: test
    test 99 parse: 31 N 448251 5411932
    test 100 name: parse
    test 101 parse: 31 N 448251 5411932
    test 102 name: parse

    2 of 102 testEtm.py tests (2.0%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 50.058 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testEtmTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14
# lazily imported pygeodesy.etm by testEtmTMcoords.py line 17
# lazily imported pygeodesy.Etm from .etm by testEtmTMcoords.py line 17
# lazily imported pygeodesy.toEtm8 from .etm by testEtmTMcoords.py line 17

    testing testEtmTMcoords.py 24.03.22 (module pygeodesy.etm 24.06.11) isLazy=3
    test 1 line 1 toEtm8.easting: 1548706.791619
    test 2 line 1 toEtm8.northing: 8451449.198772
    test 3 line 1 toEtm8.gamma: 43.922790
    test 4 line 1 toEtm8.scale: 1.029060
    test 5 line 1 toEtm8.lat: 70.579277
    test 6 line 1 toEtm8.lon: 45.599420
    test 7 line 2 toEtm8.easting: 2624150.740929
    test 8 line 2 toEtm8.northing: 1204434.041605
    test 9 line 2 toEtm8.gamma: 4.292619
    test 10 line 2 toEtm8.scale: 1.086051
    test 11 line 2 toEtm8.lat: 10.018894
    test 12 line 2 toEtm8.lon: 23.313324
    test 13 line 3 toEtm8.easting: 9855841.232935
    test 14 line 3 toEtm8.northing: 6145496.115155
    test 15 line 3 toEtm8.gamma: 53.348315
    test 16 line 3 toEtm8.scale: 2.445098
    test 17 line 3 toEtm8.lat: 19.479896
    test 18 line 3 toEtm8.lon: 75.662049
    test 19 line 4 toEtm8.easting: 3206390.691996
    test 20 line 4 toEtm8.northing: 2650745.400406
    test 21 line 4 toEtm8.gamma: 11.666950
    test 22 line 4 toEtm8.scale: 1.129359
    test 23 line 4 toEtm8.lat: 21.072465
    test 24 line 4 toEtm8.lon: 29.828684
    test 25 line 5 toEtm8.easting: 4328154.083501
    test 26 line 5 toEtm8.northing: 749647.623690
    test 27 line 5 toEtm8.gamma: 4.024317
    test 28 line 5 toEtm8.scale: 1.240829
    test 29 line 5 toEtm8.lat: 5.458957
    test 30 line 5 toEtm8.lon: 36.385237
    test 31 line 6 toEtm8.easting: 847598.266514
    test 32 line 6 toEtm8.northing: 7947180.962440
    test 33 line 6 toEtm8.gamma: 21.639091
    test 34 line 6 toEtm8.scale: 1.008399
    test 35 line 6 toEtm8.lat: 70.175454
    test 36 line 6 toEtm8.lon: 22.865350
    test 37 line 7 toEtm8.easting: 2727657.337974
    test 38 line 7 toEtm8.northing: 8283916.696410
    test 39 line 7 toEtm8.gamma: 55.690909
    test 40 line 7 toEtm8.scale: 1.091942
    test 41 line 7 toEtm8.lat: 61.965605
    test 42 line 7 toEtm8.lon: 58.931371
    test 43 line 8 toEtm8.easting: 2331001.751890
    test 44 line 8 toEtm8.northing: 1313608.224751
    test 45 line 8 toEtm8.gamma: 4.214690
    test 46 line 8 toEtm8.scale: 1.067599
    test 47 line 8 toEtm8.lat: 11.116050
    test 48 line 8 toEtm8.lon: 20.901069
    test 49 line 9 toEtm8.easting: 6035557.239480
    test 50 line 9 toEtm8.northing: 5791770.791879
    test 51 line 9 toEtm8.gamma: 43.698170
    test 52 line 9 toEtm8.scale: 1.481260
    test 53 line 9 toEtm8.lat: 32.210543
    test 54 line 9 toEtm8.lon: 60.705849
    test 55 line 10 toEtm8.easting: 1064553.125852
    test 56 line 10 toEtm8.northing: 9417273.737208
    test 57 line 10 toEtm8.gamma: 61.100380
    test 58 line 10 toEtm8.scale: 1.013475
    test 59 line 10 toEtm8.lat: 79.187451
    test 60 line 10 toEtm8.lon: 61.532382
    test 61 line 11 toEtm8.easting: 1400137.116164
    test 62 line 11 toEtm8.northing: 9616907.017686
    test 63 line 11 toEtm8.gamma: 74.527087
    test 64 line 11 toEtm8.scale: 1.023640
    test 65 line 11 toEtm8.lat: 77.103759
    test 66 line 11 toEtm8.lon: 74.899105
    test 67 line 12 toEtm8.easting: 9860691.016626
    test 68 line 12 toEtm8.northing: 7433039.143328
    test 69 line 12 toEtm8.gamma: 65.357693
    test 70 line 12 toEtm8.scale: 2.438973
    test 71 line 12 toEtm8.lat: 21.889514
    test 72 line 12 toEtm8.lon: 80.019886
    test 73 line 13 toEtm8.easting: 8076501.833695
    test 74 line 13 toEtm8.northing: 8561614.174782
    test 75 line 13 toEtm8.gamma: 75.073393
    test 76 line 13 toEtm8.scale: 1.906202
    test 77 line 13 toEtm8.lat: 30.536296
    test 78 line 13 toEtm8.lon: 82.186178
    test 79 line 14 toEtm8.easting: 3335099.866623
    test 80 line 14 toEtm8.northing: 6740519.084015
    test 81 line 14 toEtm8.gamma: 40.611821
    test 82 line 14 toEtm8.scale: 1.139021
    test 83 line 14 toEtm8.lat: 49.990485
    test 84 line 14 toEtm8.lon: 48.203179
    test 85 line 15 toEtm8.easting: 12051574.928500
    test 86 line 15 toEtm8.northing: 6587213.051951
    test 87 line 15 toEtm8.gamma: 59.033237
    test 88 line 15 toEtm8.scale: 3.357469
    test 89 line 15 toEtm8.lat: 14.486312
    test 90 line 15 toEtm8.lon: 80.905137
    test 91 line 16 toEtm8.easting: 5387578.735298
    test 92 line 16 toEtm8.northing: 4111216.907168
    test 93 line 16 toEtm8.gamma: 27.574337
    test 94 line 16 toEtm8.scale: 1.379357
    test 95 line 16 toEtm8.lat: 25.936824
    test 96 line 16 toEtm8.lon: 49.913598
    test 97 line 17 toEtm8.easting: 2622214.380233
    test 98 line 17 toEtm8.northing: 8678923.984567
    test 99 line 17 toEtm8.gamma: 61.697275
    test 100 line 17 toEtm8.scale: 1.084810
    test 101 line 17 toEtm8.lat: 64.402196
    test 102 line 17 toEtm8.lon: 64.091395
    test 103 line 18 toEtm8.easting: 5068474.169633
    test 104 line 18 toEtm8.northing: 9492066.993709
    test 105 line 18 toEtm8.gamma: 83.156740
    test 106 line 18 toEtm8.scale: 1.329990
    test 107 line 18 toEtm8.lat: 48.451354
    test 108 line 18 toEtm8.lon: 84.856198
    test 109 line 19 toEtm8.easting: 738062.047779
    test 110 line 19 toEtm8.northing: 3031007.074116
    test 111 line 19 toEtm8.gamma: 3.416802
    test 112 line 19 toEtm8.scale: 1.006332
    test 113 line 19 toEtm8.lat: 27.203895
    test 114 line 19 toEtm8.lon: 7.440229
    test 115 line 20 toEtm8.easting: 1944413.834565
    test 116 line 20 toEtm8.northing: 9613299.224493
    test 117 line 20 toEtm8.gamma: 78.462831
    test 118 line 20 toEtm8.scale: 1.046134
    test 119 line 20 toEtm8.lat: 72.509000
    test 120 line 20 toEtm8.lon: 78.982283
    test 121 line 21 toEtm8.easting: 2114521.418406
    test 122 line 21 toEtm8.northing: 4954077.440098
    test 123 line 21 toEtm8.gamma: 17.571878
    test 124 line 21 toEtm8.scale: 1.055093
    test 125 line 21 toEtm8.lat: 41.824954
    test 126 line 21 toEtm8.lon: 25.392744
    test 127 line 22 toEtm8.easting: 620365.905090
    test 128 line 22 toEtm8.northing: 4755542.026562
    test 129 line 22 toEtm8.gamma: 5.152022
    test 130 line 22 toEtm8.scale: 1.004338
    test 131 line 22 toEtm8.lat: 42.701376
    test 132 line 22 toEtm8.lon: 7.572738
    test 133 line 23 toEtm8.easting: 263004.770989
    test 134 line 23 toEtm8.northing: 4493669.762451
    test 135 line 23 toEtm8.gamma: 2.020523
    test 136 line 23 toEtm8.scale: 1.000452
    test 137 line 23 toEtm8.lat: 40.552052
    test 138 line 23 toEtm8.lon: 3.106056
    test 139 line 24 toEtm8.easting: 3217221.739462
    test 140 line 24 toEtm8.northing: 437776.119161
    test 141 line 24 toEtm8.gamma: 1.848169
    test 142 line 24 toEtm8.scale: 1.130558
    test 143 line 24 toEtm8.lat: 3.501242
    test 144 line 24 toEtm8.lon: 27.806507
    test 145 line 25 toEtm8.easting: 14661142.444961
    test 146 line 25 toEtm8.northing: 7476100.824185
    test 147 line 25 toEtm8.gamma: 68.376669
    test 148 line 25 toEtm8.scale: 4.896650
    test 149 line 25 toEtm8.lat: 10.148715
    test 150 line 25 toEtm8.lon: 85.373768
    test 151 line 26 toEtm8.easting: 967777.158554
    test 152 line 26 toEtm8.northing: 6615684.266592
    test 153 line 26 toEtm8.gamma: 14.410044
    test 154 line 26 toEtm8.scale: 1.011100
    test 155 line 26 toEtm8.lat: 58.582623
    test 156 line 26 toEtm8.lon: 16.755558
    test 157 line 27 toEtm8.easting: 7558840.728461
    test 158 line 27 toEtm8.northing: 4144728.130764
    test 159 line 27 toEtm8.gamma: 32.557264
    test 160 line 27 toEtm8.scale: 1.791490
    test 161 line 27 toEtm8.lat: 19.793004
    test 162 line 27 toEtm8.lon: 61.746763
    test 163 line 28 toEtm8.easting: 1056008.314161
    test 164 line 28 toEtm8.northing: 9290799.692669
    test 165 line 28 toEtm8.gamma: 55.843278
    test 166 line 28 toEtm8.scale: 1.013253
    test 167 line 28 toEtm8.lat: 78.666776
    test 168 line 28 toEtm8.lon: 56.365355
    test 169 line 29 toEtm8.easting: 1943965.134687
    test 170 line 29 toEtm8.northing: 1389972.228690
    test 171 line 29 toEtm8.gamma: 3.774869
    test 172 line 29 toEtm8.scale: 1.046724
    test 173 line 29 toEtm8.lat: 11.998788
    test 174 line 29 toEtm8.lon: 17.597873
    test 175 line 30 toEtm8.easting: 5803077.072902
    test 176 line 30 toEtm8.northing: 5649957.943659
    test 177 line 30 toEtm8.gamma: 41.717943
    test 178 line 30 toEtm8.scale: 1.442572
    test 179 line 30 toEtm8.lat: 32.540378
    test 180 line 30 toEtm8.lon: 58.764613
    test 181 line 31 toEtm8.easting: 2928716.986009
    test 182 line 31 toEtm8.northing: 5731835.058317
    test 183 line 31 toEtm8.gamma: 28.538550
    test 184 line 31 toEtm8.scale: 1.106780
    test 185 line 31 toEtm8.lat: 45.160356
    test 186 line 31 toEtm8.lon: 37.465285
    test 187 line 32 toEtm8.easting: 326141.975756
    test 188 line 32 toEtm8.northing: 8881325.164543
    test 189 line 32 toEtm8.gamma: 16.111415
    test 190 line 32 toEtm8.scale: 1.000900
    test 191 line 32 toEtm8.lat: 79.584190
    test 192 line 32 toEtm8.lon: 16.367006
    test 193 line 33 toEtm8.easting: 3933015.267450
    test 194 line 33 toEtm8.northing: 7932373.909512
    test 195 line 33 toEtm8.gamma: 58.577424
    test 196 line 33 toEtm8.scale: 1.194811
    test 197 line 33 toEtm8.lat: 52.470664
    test 198 line 33 toEtm8.lon: 64.125580
    test 199 line 34 toEtm8.easting: 8598926.983213
    test 200 line 34 toEtm8.northing: 6214135.167503
    test 201 line 34 toEtm8.gamma: 52.612878
    test 202 line 34 toEtm8.scale: 2.051367
    test 203 line 34 toEtm8.lat: 23.702673
    test 204 line 34 toEtm8.lon: 72.630363
    test 205 line 35 toEtm8.easting: 6620553.333772
    test 206 line 35 toEtm8.northing: 6540527.122948
    test 207 line 35 toEtm8.gamma: 52.350140
    test 208 line 35 toEtm8.scale: 1.586614
    test 209 line 35 toEtm8.lat: 32.603520
    test 210 line 35 toEtm8.lon: 67.280123
    test 211 line 36 toEtm8.easting: 1515136.758292
    test 212 line 36 toEtm8.northing: 3858996.087537
    test 213 line 36 toEtm8.gamma: 9.225127
    test 214 line 36 toEtm8.scale: 1.028029
    test 215 line 36 toEtm8.lat: 33.776224
    test 216 line 36 toEtm8.lon: 16.280993
    test 217 line 37 toEtm8.easting: 479854.373445
    test 218 line 37 toEtm8.northing: 8980501.389896
    test 219 line 37 toEtm8.gamma: 25.021222
    test 220 line 37 toEtm8.scale: 1.002415
    test 221 line 37 toEtm8.lat: 79.932747
    test 222 line 37 toEtm8.lon: 25.363622
    test 223 line 38 toEtm8.easting: 5243446.564940
    test 224 line 38 toEtm8.northing: 140657.213960
    test 225 line 38 toEtm8.gamma: 0.862817
    test 226 line 38 toEtm8.scale: 1.360358
    test 227 line 38 toEtm8.lat: 0.935056
    test 228 line 38 toEtm8.lon: 42.538824
    test 229 line 39 toEtm8.easting: 12806457.923218
    test 230 line 39 toEtm8.northing: 7170118.684675
    test 231 line 39 toEtm8.gamma: 64.708921
    test 232 line 39 toEtm8.scale: 3.740588
    test 233 line 39 toEtm8.lat: 13.490862
    test 234 line 39 toEtm8.lon: 83.178380
    test 235 line 40 toEtm8.easting: 1202993.459158
    test 236 line 40 toEtm8.northing: 5557316.053599
    test 237 line 40 toEtm8.gamma: 12.579061
    test 238 line 40 toEtm8.scale: 1.017426
    test 239 line 40 toEtm8.lat: 48.979057
    test 240 line 40 toEtm8.lon: 16.474542
    test 241 line 41 toEtm8.easting: 1729088.710196
    test 242 line 41 toEtm8.northing: 7770874.289954
    test 243 line 41 toEtm8.gamma: 36.021783
    test 244 line 41 toEtm8.scale: 1.036397
    test 245 line 41 toEtm8.lat: 65.036016
    test 246 line 41 toEtm8.lon: 38.729091
    test 247 line 42 toEtm8.easting: 2437301.517425
    test 248 line 42 toEtm8.northing: 5539327.748318
    test 249 line 42 toEtm8.gamma: 23.461879
    test 250 line 42 toEtm8.scale: 1.073459
    test 251 line 42 toEtm8.lat: 45.510091
    test 252 line 42 toEtm8.lon: 31.303729
    test 253 line 43 toEtm8.easting: 3647186.135066
    test 254 line 43 toEtm8.northing: 2086412.330983
    test 255 line 43 toEtm8.gamma: 10.023991
    test 256 line 43 toEtm8.scale: 1.168707
    test 257 line 43 toEtm8.lat: 16.058010
    test 258 line 43 toEtm8.lon: 32.520026
    test 259 line 44 toEtm8.easting: 1818497.243556
    test 260 line 44 toEtm8.northing: 4275471.745057
    test 261 line 44 toEtm8.gamma: 12.499656
    test 262 line 44 toEtm8.scale: 1.040604
    test 263 line 44 toEtm8.lat: 36.845200
    test 264 line 44 toEtm8.lon: 20.282283
    test 265 line 45 toEtm8.easting: 3751304.113783
    test 266 line 45 toEtm8.northing: 5130454.001592
    test 267 line 45 toEtm8.gamma: 28.959707
    test 268 line 45 toEtm8.scale: 1.177681
    test 269 line 45 toEtm8.lat: 37.865481
    test 270 line 45 toEtm8.lon: 41.990402
    test 271 line 46 toEtm8.easting: 2616733.138544
    test 272 line 46 toEtm8.northing: 394644.463815
    test 273 line 46 toEtm8.gamma: 1.390425
    test 274 line 46 toEtm8.scale: 1.085595
    test 275 line 46 toEtm8.lat: 3.287272
    test 276 line 46 toEtm8.lon: 22.917604
    test 277 line 47 toEtm8.easting: 1756506.573942
    test 278 line 47 toEtm8.northing: 5570393.986394
    test 279 line 47 toEtm8.gamma: 17.897894
    test 280 line 47 toEtm8.scale: 1.037732
    test 281 line 47 toEtm8.lat: 47.813686
    test 282 line 47 toEtm8.lon: 23.545092
    test 283 line 48 toEtm8.easting: 8752461.894711
    test 284 line 48 toEtm8.northing: 6087728.152284
    test 285 line 48 toEtm8.gamma: 51.628465
    test 286 line 48 toEtm8.scale: 2.095465
    test 287 line 48 toEtm8.lat: 22.836853
    test 288 line 48 toEtm8.lon: 72.604385
    test 289 line 49 toEtm8.easting: 1309272.216432
    test 290 line 49 toEtm8.northing: 59520.028899
    test 291 line 49 toEtm8.gamma: 0.109069
    test 292 line 49 toEtm8.scale: 1.020897
    test 293 line 49 toEtm8.lat: 0.527262
    test 294 line 49 toEtm8.lon: 11.684209
    test 295 line 50 toEtm8.easting: 328652.277129
    test 296 line 50 toEtm8.northing: 2233043.958874
    test 297 line 50 toEtm8.gamma: 1.084863
    test 298 line 50 toEtm8.scale: 1.000935
    test 299 line 50 toEtm8.lat: 20.166742
    test 300 line 50 toEtm8.lon: 3.143948
    test 301 line 51 toEtm8.easting: 8637959.716447
    test 302 line 51 toEtm8.northing: 9190635.156031
    test 303 line 51 toEtm8.gamma: 81.802563
    test 304 line 51 toEtm8.scale: 2.054329
    test 305 line 51 toEtm8.lat: 28.604629
    test 306 line 51 toEtm8.lon: 85.988721
    test 307 line 52 toEtm8.easting: 8548521.455147
    test 308 line 52 toEtm8.northing: 9172410.943282
    test 309 line 52 toEtm8.gamma: 81.583928
    test 310 line 52 toEtm8.scale: 2.029641
    test 311 line 52 toEtm8.lat: 28.984048
    test 312 line 52 toEtm8.lon: 85.833448
    test 313 line 53 toEtm8.easting: 796987.281104
    test 314 line 53 toEtm8.northing: 7677446.357675
    test 315 line 53 toEtm8.gamma: 18.084472
    test 316 line 53 toEtm8.scale: 1.007381
    test 317 line 53 toEtm8.lat: 68.071020
    test 318 line 53 toEtm8.lon: 19.392823
    test 319 line 54 toEtm8.easting: 3291036.496762
    test 320 line 54 toEtm8.northing: 9513199.600666
    test 321 line 54 toEtm8.gamma: 80.890254
    test 322 line 54 toEtm8.scale: 1.134826
    test 323 line 54 toEtm8.lat: 61.416576
    test 324 line 54 toEtm8.lon: 81.981611
    test 325 line 55 toEtm8.easting: 7087225.330906
    test 326 line 55 toEtm8.northing: 8382823.855822
    test 327 line 55 toEtm8.gamma: 72.253756
    test 328 line 55 toEtm8.scale: 1.678070
    test 329 line 55 toEtm8.lat: 35.074753
    test 330 line 55 toEtm8.lon: 79.496003
    test 331 line 56 toEtm8.easting: 5090358.125724
    test 332 line 56 toEtm8.northing: 4318294.133489
    test 333 line 56 toEtm8.gamma: 28.266280
    test 334 line 56 toEtm8.scale: 1.336264
    test 335 line 56 toEtm8.lat: 28.078790
    test 336 line 56 toEtm8.lon: 48.684350

    test skipped (1): line 57 toEtm8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 337 line 58 toEtm8.easting: 3447670.550785
    test 338 line 58 toEtm8.northing: 3680238.888223
    test 339 line 58 toEtm8.gamma: 17.934948
    test 340 line 58 toEtm8.scale: 1.149831
    test 341 line 58 toEtm8.lat: 28.473948
    test 342 line 58 toEtm8.lon: 34.127306
    test 343 line 59 toEtm8.easting: 3396522.906798
    test 344 line 59 toEtm8.northing: 8093659.687593
    test 345 line 59 toEtm8.gamma: 57.747117
    test 346 line 59 toEtm8.scale: 1.144006
    test 347 line 59 toEtm8.lat: 56.629354
    test 348 line 59 toEtm8.lon: 62.196474
    test 349 line 60 toEtm8.easting: 11249894.100784
    test 350 line 60 toEtm8.northing: 1619226.506299
    test 351 line 60 toEtm8.gamma: 14.210358
    test 352 line 60 toEtm8.scale: 3.048347
    test 353 line 60 toEtm8.lat: 4.747762
    test 354 line 60 toEtm8.lon: 70.932555
    test 355 line 61 toEtm8.easting: 6808805.230950
    test 356 line 61 toEtm8.northing: 8044779.777369
    test 357 line 61 toEtm8.gamma: 68.242008
    test 358 line 61 toEtm8.scale: 1.621464
    test 359 line 61 toEtm8.lat: 35.882113
    test 360 line 61 toEtm8.lon: 76.741849
    test 361 line 62 toEtm8.easting: 2306021.556506
    test 362 line 62 toEtm8.northing: 757191.592866
    test 363 line 62 toEtm8.gamma: 2.385686
    test 364 line 62 toEtm8.scale: 1.066159
    test 365 line 62 toEtm8.lat: 6.420705
    test 366 line 62 toEtm8.lon: 20.416028
    test 367 line 63 toEtm8.easting: 1547406.313862
    test 368 line 63 toEtm8.northing: 6048712.751824
    test 369 line 63 toEtm8.gamma: 18.474372
    test 370 line 63 toEtm8.scale: 1.029123
    test 371 line 63 toEtm8.lat: 52.335248
    test 372 line 63 toEtm8.lon: 22.879294
    test 373 line 64 toEtm8.easting: 2430467.650383
    test 374 line 64 toEtm8.northing: 7557167.613972
    test 375 line 64 toEtm8.gamma: 42.110021
    test 376 line 64 toEtm8.scale: 1.072759
    test 377 line 64 toEtm8.lat: 59.846391
    test 378 line 64 toEtm8.lon: 46.262536
    test 379 line 65 toEtm8.easting: 2334053.905830
    test 380 line 65 toEtm8.northing: 1948076.966582
    test 381 line 65 toEtm8.gamma: 6.353185
    test 382 line 65 toEtm8.scale: 1.067733
    test 383 line 65 toEtm8.lat: 16.461790
    test 384 line 65 toEtm8.lon: 21.433269
    test 385 line 66 toEtm8.easting: 5564175.186737
    test 386 line 66 toEtm8.northing: 1836851.660412
    test 387 line 66 toEtm8.gamma: 11.870682
    test 388 line 66 toEtm8.scale: 1.408265
    test 389 line 66 toEtm8.lat: 11.707905
    test 390 line 66 toEtm8.lon: 45.827075
    test 391 line 67 toEtm8.easting: 6118505.590359
    test 392 line 67 toEtm8.northing: 7631684.552421
    test 393 line 67 toEtm8.gamma: 62.477323
    test 394 line 67 toEtm8.scale: 1.493420
    test 395 line 67 toEtm8.lat: 38.519075
    test 396 line 67 toEtm8.lon: 71.935918
    test 397 line 68 toEtm8.easting: 7365359.294665
    test 398 line 68 toEtm8.northing: 8818194.451531
    test 399 line 68 toEtm8.gamma: 77.207042
    test 400 line 68 toEtm8.scale: 1.737639
    test 401 line 68 toEtm8.lat: 34.264007
    test 402 line 68 toEtm8.lon: 82.647878
    test 403 line 69 toEtm8.easting: 36187.342415
    test 404 line 69 toEtm8.northing: 2142565.324802
    test 405 line 69 toEtm8.gamma: 0.114334
    test 406 line 69 toEtm8.scale: 0.999616
    test 407 line 69 toEtm8.lat: 19.376880
    test 408 line 69 toEtm8.lon: 0.344605
    test 409 line 70 toEtm8.easting: 2380328.546851
    test 410 line 70 toEtm8.northing: 8440109.872384
    test 411 line 70 toEtm8.gamma: 55.076067
    test 412 line 70 toEtm8.scale: 1.069658
    test 413 line 70 toEtm8.lat: 65.075805
    test 414 line 70 toEtm8.lon: 57.653438
    test 415 line 71 toEtm8.easting: 582511.608826
    test 416 line 71 toEtm8.northing: 8876047.217071
    test 417 line 71 toEtm8.gamma: 27.133300
    test 418 line 71 toEtm8.scale: 1.003749
    test 419 line 71 toEtm8.lat: 78.691870
    test 420 line 71 toEtm8.lon: 27.591736
    test 421 line 72 toEtm8.easting: 899441.350477
    test 422 line 72 toEtm8.northing: 4582046.430516
    test 423 line 72 toEtm8.gamma: 7.031211
    test 424 line 72 toEtm8.scale: 1.009573
    test 425 line 72 toEtm8.lat: 40.893022
    test 426 line 72 toEtm8.lon: 10.668804
    test 427 line 73 toEtm8.easting: 5022485.124337
    test 428 line 73 toEtm8.northing: 9741774.933721
    test 429 line 73 toEtm8.gamma: 86.505947
    test 430 line 73 toEtm8.scale: 1.323700
    test 431 line 73 toEtm8.lat: 48.914279
    test 432 line 73 toEtm8.lon: 87.359268
    test 433 line 74 toEtm8.easting: 6701004.587204
    test 434 line 74 toEtm8.northing: 2954368.258231
    test 435 line 74 toEtm8.gamma: 21.560153
    test 436 line 74 toEtm8.scale: 1.608554
    test 437 line 74 toEtm8.lat: 16.208377
    test 438 line 74 toEtm8.lon: 54.494282
    test 439 line 75 toEtm8.easting: 454986.218897
    test 440 line 75 toEtm8.northing: 4885087.887884
    test 441 line 75 toEtm8.gamma: 3.945648
    test 442 line 75 toEtm8.scale: 1.002147
    test 443 line 75 toEtm8.lat: 43.977936
    test 444 line 75 toEtm8.lon: 5.672541
    test 445 line 76 toEtm8.easting: 8903956.140311
    test 446 line 76 toEtm8.northing: 8470608.577482
    test 447 line 76 toEtm8.gamma: 74.723116
    test 448 line 76 toEtm8.scale: 2.131311
    test 449 line 76 toEtm8.lat: 26.850861
    test 450 line 76 toEtm8.lon: 82.834480
    test 451 line 77 toEtm8.easting: 1547627.594741
    test 452 line 77 toEtm8.northing: 6036584.538347
    test 453 line 77 toEtm8.gamma: 18.407629
    test 454 line 77 toEtm8.scale: 1.029132
    test 455 line 77 toEtm8.lat: 52.234165
    test 456 line 77 toEtm8.lon: 22.827655
    test 457 line 78 toEtm8.easting: 5221488.778597
    test 458 line 78 toEtm8.northing: 1762592.044392
    test 459 line 78 toEtm8.gamma: 10.927880
    test 460 line 78 toEtm8.scale: 1.356721
    test 461 line 78 toEtm8.lat: 11.674646
    test 462 line 78 toEtm8.lon: 43.500147
    test 463 line 79 toEtm8.easting: 4880570.297161
    test 464 line 79 toEtm8.northing: 3325433.988867
    test 465 line 79 toEtm8.gamma: 20.469862
    test 466 line 79 toEtm8.scale: 1.308476
    test 467 line 79 toEtm8.lat: 22.492753
    test 468 line 79 toEtm8.lon: 44.179153
    test 469 line 80 toEtm8.easting: 23930680.082694
    test 470 line 80 toEtm8.northing: 7491462.099038
    test 471 line 80 toEtm8.gamma: 75.937628
    test 472 line 80 toEtm8.scale: 15.556365
    test 473 line 80 toEtm8.lat: 0.910999
    test 474 line 80 toEtm8.lon: 88.548823
    test 475 line 81 toEtm8.easting: 71519.450458
    test 476 line 81 toEtm8.northing: 3654740.444852
    test 477 line 81 toEtm8.gamma: 0.417448
    test 478 line 81 toEtm8.scale: 0.999663
    test 479 line 81 toEtm8.lat: 33.028802
    test 480 line 81 toEtm8.lon: 0.765843
    test 481 line 82 toEtm8.easting: 4152797.795220
    test 482 line 82 toEtm8.northing: 7823098.502751
    test 483 line 82 toEtm8.gamma: 58.238901
    test 484 line 82 toEtm8.scale: 1.218052
    test 485 line 82 toEtm8.lat: 50.649195
    test 486 line 82 toEtm8.lon: 64.389076
    test 487 line 83 toEtm8.easting: 2926725.707639
    test 488 line 83 toEtm8.northing: 7904918.072844
    test 489 line 83 toEtm8.gamma: 51.592748
    test 490 line 83 toEtm8.scale: 1.106206
    test 491 line 83 toEtm8.lat: 58.820640
    test 492 line 83 toEtm8.lon: 55.841048
    test 493 line 84 toEtm8.easting: 1325509.113869
    test 494 line 84 toEtm8.northing: 9675214.948213
    test 495 line 84 toEtm8.gamma: 76.116213
    test 496 line 84 toEtm8.scale: 1.021136
    test 497 line 84 toEtm8.lat: 77.865762
    test 498 line 84 toEtm8.lon: 76.414618
    test 499 line 85 toEtm8.easting: 3045296.448926
    test 500 line 85 toEtm8.northing: 542153.443280
    test 501 line 85 toEtm8.gamma: 2.185095
    test 502 line 85 toEtm8.scale: 1.116664
    test 503 line 85 toEtm8.lat: 4.389639
    test 504 line 85 toEtm8.lon: 26.458976
    test 505 line 86 toEtm8.easting: 11843870.887518
    test 506 line 86 toEtm8.northing: 5912803.073343
    test 507 line 86 toEtm8.gamma: 52.814259
    test 508 line 86 toEtm8.scale: 3.267256
    test 509 line 86 toEtm8.lat: 13.924448
    test 510 line 86 toEtm8.lon: 79.017873
    test 511 line 87 toEtm8.easting: 8891099.704936
    test 512 line 87 toEtm8.northing: 162160.142227
    test 513 line 87 toEtm8.gamma: 1.312094
    test 514 line 87 toEtm8.scale: 2.157363
    test 515 line 87 toEtm8.lat: 0.679713
    test 516 line 87 toEtm8.lon: 62.036792
    test 517 line 88 toEtm8.easting: 4784814.214449
    test 518 line 88 toEtm8.northing: 2984497.432580
    test 519 line 88 toEtm8.gamma: 17.946545
    test 520 line 88 toEtm8.scale: 1.296116
    test 521 line 88 toEtm8.lat: 20.478281
    test 522 line 88 toEtm8.lon: 42.678234
    test 523 line 89 toEtm8.easting: 1772074.682154
    test 524 line 89 toEtm8.northing: 9491552.560143
    test 525 line 89 toEtm8.gamma: 73.634830
    test 526 line 89 toEtm8.scale: 1.038202
    test 527 line 89 toEtm8.lat: 73.695703
    test 528 line 89 toEtm8.lon: 74.259097
    test 529 line 90 toEtm8.easting: 1907649.782106
    test 530 line 90 toEtm8.northing: 6994232.429379
    test 531 line 90 toEtm8.gamma: 29.718929
    test 532 line 90 toEtm8.scale: 1.044503
    test 533 line 90 toEtm8.lat: 58.569370
    test 534 line 90 toEtm8.lon: 33.777549
    test 535 line 91 toEtm8.easting: 2084423.818962
    test 536 line 91 toEtm8.northing: 2211816.035619
    test 537 line 91 toEtm8.gamma: 6.556448
    test 538 line 91 toEtm8.scale: 1.053793
    test 539 line 91 toEtm8.lat: 18.933881
    test 540 line 91 toEtm8.lon: 19.492695
    test 541 line 92 toEtm8.easting: 1064373.671729
    test 542 line 92 toEtm8.northing: 7812482.547461
    test 543 line 92 toEtm8.gamma: 24.874124
    test 544 line 92 toEtm8.scale: 1.013490
    test 545 line 92 toEtm8.lat: 68.317934
    test 546 line 92 toEtm8.lon: 26.515687
    test 547 line 93 toEtm8.easting: 4770385.479297
    test 548 line 93 toEtm8.northing: 9734318.902980
    test 549 line 93 toEtm8.gamma: 86.273119
    test 550 line 93 toEtm8.scale: 1.290553
    test 551 line 93 toEtm8.lat: 50.641941
    test 552 line 93 toEtm8.lon: 87.111557
    test 553 line 94 toEtm8.easting: 6398096.677297
    test 554 line 94 toEtm8.northing: 4410894.752104
    test 555 line 94 toEtm8.gamma: 32.558023
    test 556 line 94 toEtm8.scale: 1.548004
    test 557 line 94 toEtm8.lat: 24.411298
    test 558 line 94 toEtm8.lon: 56.881823
    test 559 line 95 toEtm8.easting: 3138623.300415
    test 560 line 95 toEtm8.northing: 3082960.600798
    test 561 line 95 toEtm8.gamma: 13.557672
    test 562 line 95 toEtm8.scale: 1.123724
    test 563 line 95 toEtm8.lat: 24.571871
    test 564 line 95 toEtm8.lon: 30.073097
    test 565 line 96 toEtm8.easting: 2748325.794651
    test 566 line 96 toEtm8.northing: 4202811.912668
    test 567 line 96 toEtm8.gamma: 17.578706
    test 568 line 96 toEtm8.scale: 1.094102
    test 569 line 96 toEtm8.lat: 34.202576
    test 570 line 96 toEtm8.lon: 29.383166
    test 571 line 97 toEtm8.easting: 6677830.630367
    test 572 line 97 toEtm8.northing: 5350071.837395
    test 573 line 97 toEtm8.gamma: 41.306641
    test 574 line 97 toEtm8.scale: 1.599774
    test 575 line 97 toEtm8.lat: 27.756285
    test 576 line 97 toEtm8.lon: 61.881905
    test 577 line 98 toEtm8.easting: 5941536.667431
    test 578 line 98 toEtm8.northing: 3293112.175140
    test 579 line 98 toEtm8.gamma: 22.752845
    test 580 line 98 toEtm8.scale: 1.468473
    test 581 line 98 toEtm8.lat: 19.742270
    test 582 line 98 toEtm8.lon: 50.957821
    test 583 line 99 toEtm8.easting: 3152481.792567
    test 584 line 99 toEtm8.northing: 5903048.837978
    test 585 line 99 toEtm8.gamma: 31.494606
    test 586 line 99 toEtm8.scale: 1.124085
    test 587 line 99 toEtm8.lat: 45.453582
    test 588 line 99 toEtm8.lon: 40.659833
    test 589 line 100 toEtm8.easting: 10460475.897730
    test 590 line 100 toEtm8.northing: 2553463.624391
    test 591 line 100 toEtm8.gamma: 21.965869
    test 592 line 100 toEtm8.scale: 2.700296
    test 593 line 100 toEtm8.lat: 8.322144
    test 594 line 100 toEtm8.lon: 69.488157
    test 595 line 101 toEtm8.easting: 1964010.778021
    test 596 line 101 toEtm8.northing: 5634042.923056
    test 597 line 101 toEtm8.gamma: 20.117800
    test 598 line 101 toEtm8.scale: 1.047344
    test 599 line 101 toEtm8.lat: 47.749831
    test 600 line 101 toEtm8.lon: 26.322002
    test 601 line 102 toEtm8.easting: 2065306.424934
    test 602 line 102 toEtm8.northing: 2135008.468651
    test 603 line 102 toEtm8.gamma: 6.258981
    test 604 line 102 toEtm8.scale: 1.052800
    test 605 line 102 toEtm8.lat: 18.297493
    test 606 line 102 toEtm8.lon: 19.244669
    test 607 line 103 toEtm8.easting: 5127738.132976
    test 608 line 103 toEtm8.northing: 6793804.304411
    test 609 line 103 toEtm8.gamma: 50.557915
    test 610 line 103 toEtm8.scale: 1.339412
    test 611 line 103 toEtm8.lat: 40.834541
    test 612 line 103 toEtm8.lon: 61.650750
    test 613 line 104 toEtm8.easting: 8385525.148166
    test 614 line 104 toEtm8.northing: 6924932.344306
    test 615 line 104 toEtm8.gamma: 59.087561
    test 616 line 104 toEtm8.scale: 1.990364
    test 617 line 104 toEtm8.lat: 26.273247
    test 618 line 104 toEtm8.lon: 74.926694
    test 619 line 105 toEtm8.easting: 2297510.791909
    test 620 line 105 toEtm8.northing: 2805666.962834
    test 621 line 105 toEtm8.gamma: 9.301553
    test 622 line 105 toEtm8.scale: 1.065508
    test 623 line 105 toEtm8.lat: 23.698347
    test 624 line 105 toEtm8.lon: 22.155657
    test 625 line 106 toEtm8.easting: 13749544.917635
    test 626 line 106 toEtm8.northing: 8288728.384650
    test 627 line 106 toEtm8.gamma: 75.033970
    test 628 line 106 toEtm8.scale: 4.270588
    test 629 line 106 toEtm8.lat: 12.364113
    test 630 line 106 toEtm8.lon: 86.348578
    test 631 line 107 toEtm8.easting: 317518.455546
    test 632 line 107 toEtm8.northing: 1097517.583745
    test 633 line 107 toEtm8.gamma: 0.499004
    test 634 line 107 toEtm8.scale: 1.000848
    test 635 line 107 toEtm8.lat: 9.916091
    test 636 line 107 toEtm8.lon: 2.895277
    test 637 line 108 toEtm8.easting: 3856035.184888
    test 638 line 108 toEtm8.northing: 9141364.450290
    test 639 line 108 toEtm8.gamma: 75.972763
    test 640 line 108 toEtm8.scale: 1.186786
    test 641 line 108 toEtm8.lat: 56.553876
    test 642 line 108 toEtm8.lon: 78.215077
    test 643 line 109 toEtm8.easting: 1457484.942823
    test 644 line 109 toEtm8.northing: 9385297.101973
    test 645 line 109 toEtm8.gamma: 66.784662
    test 646 line 109 toEtm8.scale: 1.025660
    test 647 line 109 toEtm8.lat: 75.957631
    test 648 line 109 toEtm8.lon: 67.407383
    test 649 line 110 toEtm8.easting: 1304934.901841
    test 650 line 110 toEtm8.northing: 3604655.155715
    test 651 line 110 toEtm8.gamma: 7.343989
    test 652 line 110 toEtm8.scale: 1.020672
    test 653 line 110 toEtm8.lat: 31.826531
    test 654 line 110 toEtm8.lon: 13.731050
    test 655 line 111 toEtm8.easting: 1399093.491792
    test 656 line 111 toEtm8.northing: 8314607.120342
    test 657 line 111 toEtm8.gamma: 38.630161
    test 658 line 111 toEtm8.scale: 1.023625
    test 659 line 111 toEtm8.lat: 70.542985
    test 660 line 111 toEtm8.lon: 40.282055
    test 661 line 112 toEtm8.easting: 356983.618540
    test 662 line 112 toEtm8.northing: 4282309.048994
    test 663 line 112 toEtm8.gamma: 2.561485
    test 664 line 112 toEtm8.scale: 1.001170
    test 665 line 112 toEtm8.lat: 38.617487
    test 666 line 112 toEtm8.lon: 4.099838
    test 667 line 113 toEtm8.easting: 9952911.325091
    test 668 line 113 toEtm8.northing: 1510288.212229
    test 669 line 113 toEtm8.gamma: 12.752154
    test 670 line 113 toEtm8.scale: 2.511357
    test 671 line 113 toEtm8.lat: 5.389447
    test 672 line 113 toEtm8.lon: 66.729612
    test 673 line 114 toEtm8.easting: 6367592.504007
    test 674 line 114 toEtm8.northing: 1200437.077672
    test 675 line 114 toEtm8.gamma: 8.338041
    test 676 line 114 toEtm8.scale: 1.546210
    test 677 line 114 toEtm8.lat: 6.995168
    test 678 line 114 toEtm8.lon: 50.014763
    test 679 line 115 toEtm8.easting: 4391263.676460
    test 680 line 115 toEtm8.northing: 6325455.989408
    test 681 line 115 toEtm8.gamma: 42.653541
    test 682 line 115 toEtm8.scale: 1.245560
    test 683 line 115 toEtm8.lat: 42.321894
    test 684 line 115 toEtm8.lon: 53.784040
    test 685 line 116 toEtm8.easting: 6209880.527527
    test 686 line 116 toEtm8.northing: 2154754.449747
    test 687 line 116 toEtm8.gamma: 14.919512
    test 688 line 116 toEtm8.scale: 1.516560
    test 689 line 116 toEtm8.lat: 12.698515
    test 690 line 116 toEtm8.lon: 50.242047
    test 691 line 117 toEtm8.easting: 1507053.688772
    test 692 line 117 toEtm8.northing: 6261383.513280
    test 693 line 117 toEtm8.gamma: 19.280373
    test 694 line 117 toEtm8.scale: 1.027584
    test 695 line 117 toEtm8.lat: 54.207636
    test 696 line 117 toEtm8.lon: 23.325731
    test 697 line 118 toEtm8.easting: 8332725.003777
    test 698 line 118 toEtm8.northing: 3002712.329753
    test 699 line 118 toEtm8.gamma: 24.059212
    test 700 line 118 toEtm8.scale: 1.990450
    test 701 line 118 toEtm8.lat: 13.224787
    test 702 line 118 toEtm8.lon: 62.426698
    test 703 line 119 toEtm8.easting: 3958910.085235
    test 704 line 119 toEtm8.northing: 3462284.926102
    test 705 line 119 toEtm8.gamma: 18.546398
    test 706 line 119 toEtm8.scale: 1.199351
    test 707 line 119 toEtm8.lat: 25.650282
    test 708 line 119 toEtm8.lon: 37.710391
    test 709 line 120 toEtm8.easting: 10452892.282083
    test 710 line 120 toEtm8.northing: 8000059.605114
    test 711 line 120 toEtm8.gamma: 71.075240
    test 712 line 120 toEtm8.scale: 2.650111
    test 713 line 120 toEtm8.lat: 20.684773
    test 714 line 120 toEtm8.lon: 82.849734
    test 715 line 121 toEtm8.easting: 496148.253731
    test 716 line 121 toEtm8.northing: 6388503.365043
    test 717 line 121 toEtm8.gamma: 6.970955
    test 718 line 121 toEtm8.scale: 1.002620
    test 719 line 121 toEtm8.lat: 57.367533
    test 720 line 121 toEtm8.lon: 8.260866
    test 721 line 122 toEtm8.easting: 7375792.085850
    test 722 line 122 toEtm8.northing: 5544624.072155
    test 723 line 122 toEtm8.gamma: 44.510851
    test 724 line 122 toEtm8.scale: 1.745898
    test 725 line 122 toEtm8.lat: 25.958757
    test 726 line 122 toEtm8.lon: 65.760477
    test 727 line 123 toEtm8.easting: 2826258.041979
    test 728 line 123 toEtm8.northing: 5167759.816959
    test 729 line 123 toEtm8.gamma: 23.783897
    test 730 line 123 toEtm8.scale: 1.099415
    test 731 line 123 toEtm8.lat: 41.395848
    test 732 line 123 toEtm8.lon: 33.661790
    test 733 line 124 toEtm8.easting: 3958563.378851
    test 734 line 124 toEtm8.northing: 8499923.231243
    test 735 line 124 toEtm8.gamma: 66.570945
    test 736 line 124 toEtm8.scale: 1.197296
    test 737 line 124 toEtm8.lat: 54.266617
    test 738 line 124 toEtm8.lon: 70.602199
    test 739 line 125 toEtm8.easting: 4408189.533462
    test 740 line 125 toEtm8.northing: 8046312.003642
    test 741 line 125 toEtm8.gamma: 62.216959
    test 742 line 125 toEtm8.scale: 1.246750
    test 743 line 125 toEtm8.lat: 49.840393
    test 744 line 125 toEtm8.lon: 68.036728
    test 745 line 126 toEtm8.easting: 3629225.627512
    test 746 line 126 toEtm8.northing: 6371258.454645
    test 747 line 126 toEtm8.gamma: 38.881675
    test 748 line 126 toEtm8.scale: 1.165511
    test 749 line 126 toEtm8.lat: 46.306035
    test 750 line 126 toEtm8.lon: 48.085828
    test 751 line 127 toEtm8.easting: 602838.450710
    test 752 line 127 toEtm8.northing: 4851370.637205
    test 753 line 127 toEtm8.gamma: 5.160395
    test 754 line 127 toEtm8.scale: 1.004073
    test 755 line 127 toEtm8.lat: 43.570988
    test 756 line 127 toEtm8.lon: 7.464494
    test 757 line 128 toEtm8.easting: 764616.665051
    test 758 line 128 toEtm8.northing: 2164299.337945
    test 759 line 128 toEtm8.gamma: 2.429300
    test 760 line 128 toEtm8.scale: 1.006835
    test 761 line 128 toEtm8.lat: 19.427290
    test 762 line 128 toEtm8.lon: 7.268247
    test 763 line 129 toEtm8.easting: 5048953.021931
    test 764 line 129 toEtm8.northing: 1885974.057398
    test 765 line 129 toEtm8.gamma: 11.459804
    test 766 line 129 toEtm8.scale: 1.332207
    test 767 line 129 toEtm8.lat: 12.713794
    test 768 line 129 toEtm8.lon: 42.507018
    test 769 line 130 toEtm8.easting: 2293996.601155
    test 770 line 130 toEtm8.northing: 2392408.644221
    test 771 line 130 toEtm8.gamma: 7.791838
    test 772 line 130 toEtm8.scale: 1.065348
    test 773 line 130 toEtm8.lat: 20.238782
    test 774 line 130 toEtm8.lon: 21.566068
    test 775 line 131 toEtm8.easting: 1530603.839418
    test 776 line 131 toEtm8.northing: 7287841.459898
    test 777 line 131 toEtm8.gamma: 27.502921
    test 778 line 131 toEtm8.scale: 1.028416
    test 779 line 131 toEtm8.lat: 62.367847
    test 780 line 131 toEtm8.lon: 30.438849
    test 781 line 132 toEtm8.easting: 2660000.093152
    test 782 line 132 toEtm8.northing: 5161982.213248
    test 783 line 132 toEtm8.gamma: 22.629836
    test 784 line 132 toEtm8.scale: 1.087851
    test 785 line 132 toEtm8.lat: 41.891569
    test 786 line 132 toEtm8.lon: 31.959547
    test 787 line 133 toEtm8.easting: 5037478.329414
    test 788 line 133 toEtm8.northing: 8768172.379908
    test 789 line 133 toEtm8.gamma: 73.511182
    test 790 line 133 toEtm8.scale: 1.325919
    test 791 line 133 toEtm8.lat: 47.664248
    test 792 line 133 toEtm8.lon: 77.630062
    test 793 line 134 toEtm8.easting: 2289650.957799
    test 794 line 134 toEtm8.northing: 8784328.593607
    test 795 line 134 toEtm8.gamma: 60.786067
    test 796 line 134 toEtm8.scale: 1.064346
    test 797 line 134 toEtm8.lat: 67.259559
    test 798 line 134 toEtm8.lon: 62.715293
    test 799 line 135 toEtm8.easting: 647913.889744
    test 800 line 135 toEtm8.northing: 6742382.228217
    test 801 line 135 toEtm8.gamma: 10.252667
    test 802 line 135 toEtm8.scale: 1.004748
    test 803 line 135 toEtm8.lat: 60.295381
    test 804 line 135 toEtm8.lon: 11.763097
    test 805 line 136 toEtm8.easting: 1118372.698566
    test 806 line 136 toEtm8.northing: 9040627.942263
    test 807 line 136 toEtm8.gamma: 48.936803
    test 808 line 136 toEtm8.scale: 1.014920
    test 809 line 136 toEtm8.lat: 76.878914
    test 810 line 136 toEtm8.lon: 49.685773
    test 811 line 137 toEtm8.easting: 440696.510070
    test 812 line 137 toEtm8.northing: 5500355.826297
    test 813 line 137 toEtm8.gamma: 4.636104
    test 814 line 137 toEtm8.scale: 1.001986
    test 815 line 137 toEtm8.lat: 49.495349
    test 816 line 137 toEtm8.lon: 6.087551
    test 817 line 138 toEtm8.easting: 601728.149727
    test 818 line 138 toEtm8.northing: 9095352.048149
    test 819 line 138 toEtm8.gamma: 33.435771
    test 820 line 138 toEtm8.scale: 1.004027
    test 821 line 138 toEtm8.lat: 80.297265
    test 822 line 138 toEtm8.lon: 33.816372
    test 823 line 139 toEtm8.easting: 3481444.777827
    test 824 line 139 toEtm8.northing: 291665.708749
    test 825 line 139 toEtm8.gamma: 1.314726
    test 826 line 139 toEtm8.scale: 1.153534
    test 827 line 139 toEtm8.lat: 2.286437
    test 828 line 139 toEtm8.lon: 29.855149
    test 829 line 140 toEtm8.easting: 3515304.901524
    test 830 line 140 toEtm8.northing: 1443981.882918
    test 831 line 140 toEtm8.gamma: 6.641638
    test 832 line 140 toEtm8.scale: 1.156509
    test 833 line 140 toEtm8.lat: 11.264457
    test 834 line 140 toEtm8.lon: 30.743907
    test 835 line 141 toEtm8.easting: 160012.186959
    test 836 line 141 toEtm8.northing: 3922609.253231
    test 837 line 141 toEtm8.gamma: 1.022225
    test 838 line 141 toEtm8.scale: 0.999916
    test 839 line 141 toEtm8.lat: 35.434073
    test 840 line 141 toEtm8.lon: 1.762795
    test 841 line 142 toEtm8.easting: 4163744.245622
    test 842 line 142 toEtm8.northing: 936884.674804
    test 843 line 142 toEtm8.gamma: 4.892559
    test 844 line 142 toEtm8.scale: 1.222164
    test 845 line 142 toEtm8.lat: 6.923695
    test 846 line 142 toEtm8.lon: 35.289456
    test 847 line 143 toEtm8.easting: 6155200.017926
    test 848 line 143 toEtm8.northing: 6926306.628390
    test 849 line 143 toEtm8.gamma: 55.103258
    test 850 line 143 toEtm8.scale: 1.500556
    test 851 line 143 toEtm8.lat: 36.129672
    test 852 line 143 toEtm8.lon: 67.533176
    test 853 line 144 toEtm8.easting: 16263383.285440
    test 854 line 144 toEtm8.northing: 3591296.731341
    test 855 line 144 toEtm8.gamma: 36.040254
    test 856 line 144 toEtm8.scale: 6.589288
    test 857 line 144 toEtm8.lat: 4.406529
    test 858 line 144 toEtm8.lon: 81.965734
    test 859 line 145 toEtm8.easting: 14220995.515398
    test 860 line 145 toEtm8.northing: 5100587.457503
    test 861 line 145 toEtm8.gamma: 47.314258
    test 862 line 145 toEtm8.scale: 4.693202
    test 863 line 145 toEtm8.lat: 8.474589
    test 864 line 145 toEtm8.lon: 81.129945
    test 865 line 146 toEtm8.easting: 3173034.802372
    test 866 line 146 toEtm8.northing: 7263421.942957
    test 867 line 146 toEtm8.gamma: 45.215808
    test 868 line 146 toEtm8.scale: 1.125410
    test 869 line 146 toEtm8.lat: 53.907276
    test 870 line 146 toEtm8.lon: 51.252904
    test 871 line 147 toEtm8.easting: 10253274.092204
    test 872 line 147 toEtm8.northing: 8867574.299792
    test 873 line 147 toEtm8.gamma: 79.198250
    test 874 line 147 toEtm8.scale: 2.572372
    test 875 line 147 toEtm8.lat: 22.120545
    test 876 line 147 toEtm8.lon: 85.756782
    test 877 line 148 toEtm8.easting: 2415561.483230
    test 878 line 148 toEtm8.northing: 8813225.217097
    test 879 line 148 toEtm8.gamma: 62.548978
    test 880 line 148 toEtm8.scale: 1.071748
    test 881 line 148 toEtm8.lat: 66.444100
    test 882 line 148 toEtm8.lon: 64.532960
    test 883 line 149 toEtm8.easting: 9589179.293295
    test 884 line 149 toEtm8.northing: 1777680.784143
    test 885 line 149 toEtm8.gamma: 14.838483
    test 886 line 149 toEtm8.scale: 2.380716
    test 887 line 149 toEtm8.lat: 6.670965
    test 888 line 149 toEtm8.lon: 65.660408
    test 889 line 150 toEtm8.easting: 727939.438391
    test 890 line 150 toEtm8.northing: 3684363.236810
    test 891 line 150 toEtm8.gamma: 4.266227
    test 892 line 150 toEtm8.scale: 1.006140
    test 893 line 150 toEtm8.lat: 33.054057
    test 894 line 150 toEtm8.lon: 7.787458
    test 895 line 151 toEtm8.easting: 1250765.991085
    test 896 line 151 toEtm8.northing: 792869.242719
    test 897 line 151 toEtm8.gamma: 1.396497
    test 898 line 151 toEtm8.scale: 1.019026
    test 899 line 151 toEtm8.lat: 7.035525
    test 900 line 151 toEtm8.lon: 11.253707
    test 901 line 152 toEtm8.easting: 710421.705887
    test 902 line 152 toEtm8.northing: 5019406.075928
    test 903 line 152 toEtm8.gamma: 6.393949
    test 904 line 152 toEtm8.scale: 1.005812
    test 905 line 152 toEtm8.lat: 44.971340
    test 906 line 152 toEtm8.lon: 9.009304
    test 907 line 153 toEtm8.easting: 4600995.074643
    test 908 line 153 toEtm8.northing: 4505712.084593
    test 909 line 153 toEtm8.gamma: 27.997458
    test 910 line 153 toEtm8.scale: 1.271841
    test 911 line 153 toEtm8.lat: 30.821397
    test 912 line 153 toEtm8.lon: 45.970577
    test 913 line 154 toEtm8.easting: 557642.627782
    test 914 line 154 toEtm8.northing: 7006911.251644
    test 915 line 154 toEtm8.gamma: 9.769903
    test 916 line 154 toEtm8.scale: 1.003411
    test 917 line 154 toEtm8.lat: 62.763886
    test 918 line 154 toEtm8.lon: 10.960144
    test 919 line 155 toEtm8.easting: 4635062.294291
    test 920 line 155 toEtm8.northing: 2702556.153311
    test 921 line 155 toEtm8.gamma: 15.779547
    test 922 line 155 toEtm8.scale: 1.277178
    test 923 line 155 toEtm8.lat: 18.888611
    test 924 line 155 toEtm8.lon: 41.009871
    test 925 line 156 toEtm8.easting: 14554962.255919
    test 926 line 156 toEtm8.northing: 4716639.908572
    test 927 line 156 toEtm8.gamma: 44.192751
    test 928 line 156 toEtm8.scale: 4.960020
    test 929 line 156 toEtm8.lat: 7.524119
    test 930 line 156 toEtm8.lon: 81.050715
    test 931 line 157 toEtm8.easting: 882126.661736
    test 932 line 157 toEtm8.northing: 7947612.369506
    test 933 line 157 toEtm8.gamma: 22.429487
    test 934 line 157 toEtm8.scale: 1.009132
    test 935 line 157 toEtm8.lat: 70.063902
    test 936 line 157 toEtm8.lon: 23.705255
    test 937 line 158 toEtm8.easting: 20262021.645983
    test 938 line 158 toEtm8.northing: 8113827.820796
    test 939 line 158 toEtm8.gamma: 76.936057
    test 940 line 158 toEtm8.scale: 10.349092
    test 941 line 158 toEtm8.lat: 3.556526
    test 942 line 158 toEtm8.lon: 88.363529
    test 943 line 159 toEtm8.easting: 6500508.399850
    test 944 line 159 toEtm8.northing: 6956476.342368
    test 945 line 159 toEtm8.gamma: 56.237116
    test 946 line 159 toEtm8.scale: 1.563162
    test 947 line 159 toEtm8.lat: 34.551257
    test 948 line 159 toEtm8.lon: 69.111091
    test 949 line 160 toEtm8.easting: 3884036.641314
    test 950 line 160 toEtm8.northing: 6890167.411733
    test 951 line 160 toEtm8.gamma: 45.760130
    test 952 line 160 toEtm8.scale: 1.190167
    test 953 line 160 toEtm8.lat: 47.929051
    test 954 line 160 toEtm8.lon: 54.103418
    test 955 line 161 toEtm8.easting: 217855.546078
    test 956 line 161 toEtm8.northing: 6184108.122568
    test 957 line 161 toEtm8.gamma: 2.870993
    test 958 line 161 toEtm8.scale: 1.000182
    test 959 line 161 toEtm8.lat: 55.753536
    test 960 line 161 toEtm8.lon: 3.471798
    test 961 line 162 toEtm8.easting: 11384139.290402
    test 962 line 162 toEtm8.northing: 8893889.949556
    test 963 line 162 toEtm8.gamma: 79.774854
    test 964 line 162 toEtm8.scale: 3.024672
    test 965 line 162 toEtm8.lat: 18.530847
    test 966 line 162 toEtm8.lon: 86.555312
    test 967 line 163 toEtm8.easting: 3469855.989805
    test 968 line 163 toEtm8.northing: 7723193.799228
    test 969 line 163 toEtm8.gamma: 53.114700
    test 970 line 163 toEtm8.scale: 1.150540
    test 971 line 163 toEtm8.lat: 54.510125
    test 972 line 163 toEtm8.lon: 58.556056
    test 973 line 164 toEtm8.easting: 5926165.994939
    test 974 line 164 toEtm8.northing: 9385463.732747
    test 975 line 164 toEtm8.gamma: 82.506981
    test 976 line 164 toEtm8.scale: 1.459758
    test 977 line 164 toEtm8.lat: 42.864162
    test 978 line 164 toEtm8.lon: 84.866326
    test 979 line 165 toEtm8.easting: 5798639.662224
    test 980 line 165 toEtm8.northing: 5305387.640916
    test 981 line 165 toEtm8.gamma: 38.617257
    test 982 line 165 toEtm8.scale: 1.442263
    test 983 line 165 toEtm8.lat: 30.911943
    test 984 line 165 toEtm8.lon: 57.114102
    test 985 line 166 toEtm8.easting: 9464.934388
    test 986 line 166 toEtm8.northing: 6489121.624944
    test 987 line 166 toEtm8.gamma: 0.138696
    test 988 line 166 toEtm8.scale: 0.999601
    test 989 line 166 toEtm8.lat: 58.542493
    test 990 line 166 toEtm8.lon: 0.162593
    test 991 line 167 toEtm8.easting: 12575834.275614
    test 992 line 167 toEtm8.northing: 8356610.895486
    test 993 line 167 toEtm8.gamma: 75.235223
    test 994 line 167 toEtm8.scale: 3.599442
    test 995 line 167 toEtm8.lat: 15.022689
    test 996 line 167 toEtm8.lon: 85.792615
    test 997 line 168 toEtm8.easting: 2719653.543469
    test 998 line 168 toEtm8.northing: 9362389.163495
    test 999 line 168 toEtm8.gamma: 76.049670
    test 1000 line 168 toEtm8.scale: 1.091315
    test 1001 line 168 toEtm8.lat: 65.692275
    test 1002 line 168 toEtm8.lon: 77.241377
    test 1003 line 169 toEtm8.easting: 4845341.924698
    test 1004 line 169 toEtm8.northing: 8710522.326901
    test 1005 line 169 toEtm8.gamma: 72.320942
    test 1006 line 169 toEtm8.scale: 1.300382
    test 1007 line 169 toEtm8.lat: 48.806211
    test 1008 line 169 toEtm8.lon: 76.486365
    test 1009 line 170 toEtm8.easting: 3935261.522763
    test 1010 line 170 toEtm8.northing: 9454271.649062
    test 1011 line 170 toEtm8.gamma: 81.162334
    test 1012 line 170 toEtm8.scale: 1.194767
    test 1013 line 170 toEtm8.lat: 56.436025
    test 1014 line 170 toEtm8.lon: 82.611568
    test 1015 line 171 toEtm8.easting: 7074299.823000
    test 1016 line 171 toEtm8.northing: 1648736.065055
    test 1017 line 171 toEtm8.gamma: 12.145925
    test 1018 line 171 toEtm8.scale: 1.687551
    test 1019 line 171 toEtm8.lat: 8.766053
    test 1020 line 171 toEtm8.lon: 54.367539
    test 1021 line 172 toEtm8.easting: 3689072.579308
    test 1022 line 172 toEtm8.northing: 2230802.665211
    test 1023 line 172 toEtm8.gamma: 10.856248
    test 1024 line 172 toEtm8.scale: 1.172689
    test 1025 line 172 toEtm8.lat: 17.095495
    test 1026 line 172 toEtm8.lon: 33.059128
    test 1027 line 173 toEtm8.easting: 8102565.885587
    test 1028 line 173 toEtm8.northing: 5167396.617580
    test 1029 line 173 toEtm8.gamma: 42.324886
    test 1030 line 173 toEtm8.scale: 1.921927
    test 1031 line 173 toEtm8.lat: 22.142861
    test 1032 line 173 toEtm8.lon: 67.200684
    test 1033 line 174 toEtm8.easting: 8181271.353564
    test 1034 line 174 toEtm8.northing: 4425436.547185
    test 1035 line 174 toEtm8.gamma: 35.900845
    test 1036 line 174 toEtm8.scale: 1.945017
    test 1037 line 174 toEtm8.lat: 19.222623
    test 1038 line 174 toEtm8.lon: 65.180785
    test 1039 line 175 toEtm8.easting: 767067.394003
    test 1040 line 175 toEtm8.northing: 3701745.857296
    test 1041 line 175 toEtm8.gamma: 4.519201
    test 1042 line 175 toEtm8.scale: 1.006863
    test 1043 line 175 toEtm8.lat: 33.182474
    test 1044 line 175 toEtm8.lon: 8.216952
    test 1045 line 176 toEtm8.easting: 6688114.168572
    test 1046 line 176 toEtm8.northing: 2052857.299639
    test 1047 line 176 toEtm8.gamma: 14.766191
    test 1048 line 176 toEtm8.scale: 1.607200
    test 1049 line 176 toEtm8.lat: 11.417963
    test 1050 line 176 toEtm8.lon: 52.808691
    test 1051 line 177 toEtm8.easting: 5608408.773761
    test 1052 line 177 toEtm8.northing: 3859055.659110
    test 1053 line 177 toEtm8.gamma: 26.244151
    test 1054 line 177 toEtm8.scale: 1.413463
    test 1055 line 177 toEtm8.lat: 23.836688
    test 1056 line 177 toEtm8.lon: 50.500180
    test 1057 line 178 toEtm8.easting: 3836942.765275
    test 1058 line 178 toEtm8.northing: 6415467.634326
    test 1059 line 178 toEtm8.gamma: 40.575885
    test 1060 line 178 toEtm8.scale: 1.185615
    test 1061 line 178 toEtm8.lat: 45.550020
    test 1062 line 178 toEtm8.lon: 50.148036
    test 1063 line 179 toEtm8.easting: 1298730.366025
    test 1064 line 179 toEtm8.northing: 6021453.000792
    test 1065 line 179 toEtm8.gamma: 15.613320
    test 1066 line 179 toEtm8.scale: 1.020367
    test 1067 line 179 toEtm8.lat: 52.746079
    test 1068 line 179 toEtm8.lon: 19.343926
    test 1069 line 180 toEtm8.easting: 416934.289208
    test 1070 line 180 toEtm8.northing: 7295683.451705
    test 1071 line 180 toEtm8.gamma: 8.238232
    test 1072 line 180 toEtm8.scale: 1.001729
    test 1073 line 180 toEtm8.lat: 65.513348
    test 1074 line 180 toEtm8.lon: 9.039529
    test 1075 line 181 toEtm8.easting: 4336076.850889
    test 1076 line 181 toEtm8.northing: 7617975.722779
    test 1077 line 181 toEtm8.gamma: 56.537088
    test 1078 line 181 toEtm8.scale: 1.238582
    test 1079 line 181 toEtm8.lat: 48.709795
    test 1080 line 181 toEtm8.lon: 63.554005
    test 1081 line 182 toEtm8.easting: 168047.336980
    test 1082 line 182 toEtm8.northing: 2185000.046530
    test 1083 line 182 toEtm8.gamma: 0.542187
    test 1084 line 182 toEtm8.scale: 0.999949
    test 1085 line 182 toEtm8.lat: 19.753509
    test 1086 line 182 toEtm8.lon: 1.603846
    test 1087 line 183 toEtm8.easting: 8276281.328790
    test 1088 line 183 toEtm8.northing: 263444.350545
    test 1089 line 183 toEtm8.gamma: 2.071435
    test 1090 line 183 toEtm8.scale: 1.980314
    test 1091 line 183 toEtm8.lat: 1.202816
    test 1092 line 183 toEtm8.lon: 59.377276
    test 1093 line 184 toEtm8.easting: 4772573.810710
    test 1094 line 184 toEtm8.northing: 6765710.336002
    test 1095 line 184 toEtm8.gamma: 48.857561
    test 1096 line 184 toEtm8.scale: 1.291911
    test 1097 line 184 toEtm8.lat: 42.564975
    test 1098 line 184 toEtm8.lon: 59.356947
    test 1099 line 185 toEtm8.easting: 5427755.074639
    test 1100 line 185 toEtm8.northing: 1556055.820924
    test 1101 line 185 toEtm8.gamma: 9.862178
    test 1102 line 185 toEtm8.scale: 1.387394
    test 1103 line 185 toEtm8.lat: 10.090572
    test 1104 line 185 toEtm8.lon: 44.604132
    test 1105 line 186 toEtm8.easting: 11588458.616041
    test 1106 line 186 toEtm8.northing: 5707993.922613
    test 1107 line 186 toEtm8.gamma: 50.784827
    test 1108 line 186 toEtm8.scale: 3.149567
    test 1109 line 186 toEtm8.lat: 14.133028
    test 1110 line 186 toEtm8.lon: 78.097533
    test 1111 line 187 toEtm8.easting: 7152433.802688
    test 1112 line 187 toEtm8.northing: 761390.695844
    test 1113 line 187 toEtm8.gamma: 5.607350
    test 1114 line 187 toEtm8.scale: 1.705261
    test 1115 line 187 toEtm8.lat: 4.031123
    test 1116 line 187 toEtm8.lon: 54.048782
    test 1117 line 188 toEtm8.easting: 3105651.390901
    test 1118 line 188 toEtm8.northing: 9426026.169064
    test 1119 line 188 toEtm8.gamma: 78.750206
    test 1120 line 188 toEtm8.scale: 1.119737
    test 1121 line 188 toEtm8.lat: 62.746603
    test 1122 line 188 toEtm8.lon: 79.968641
    test 1123 line 189 toEtm8.easting: 2959009.639022
    test 1124 line 189 toEtm8.northing: 8339242.269282
    test 1125 line 189 toEtm8.gamma: 58.460865
    test 1126 line 189 toEtm8.scale: 1.108554
    test 1127 line 189 toEtm8.lat: 60.626429
    test 1128 line 189 toEtm8.lon: 61.851551
    test 1129 line 190 toEtm8.easting: 8640472.267145
    test 1130 line 190 toEtm8.northing: 6230320.417931
    test 1131 line 190 toEtm8.gamma: 52.816810
    test 1132 line 190 toEtm8.scale: 2.062973
    test 1133 line 190 toEtm8.lat: 23.600626
    test 1134 line 190 toEtm8.lon: 72.811634
    test 1135 line 191 toEtm8.easting: 811352.108932
    test 1136 line 191 toEtm8.northing: 9816129.813481
    test 1137 line 191 toEtm8.gamma: 77.299184
    test 1138 line 191 toEtm8.scale: 1.007651
    test 1139 line 191 toEtm8.lat: 82.572236
    test 1140 line 191 toEtm8.lon: 77.402323
    test 1141 line 192 toEtm8.easting: 6521874.973458
    test 1142 line 192 toEtm8.northing: 1053612.479744
    test 1143 line 192 toEtm8.gamma: 7.407328
    test 1144 line 192 toEtm8.scale: 1.575529
    test 1145 line 192 toEtm8.lat: 6.030051
    test 1146 line 192 toEtm8.lon: 50.783505
    test 1147 line 193 toEtm8.easting: 3477983.997875
    test 1148 line 193 toEtm8.northing: 5651613.325947
    test 1149 line 193 toEtm8.gamma: 31.530673
    test 1150 line 193 toEtm8.scale: 1.151875
    test 1151 line 193 toEtm8.lat: 42.411523
    test 1152 line 193 toEtm8.lon: 42.258009
    test 1153 line 194 toEtm8.easting: 629892.822243
    test 1154 line 194 toEtm8.northing: 3283914.910451
    test 1155 line 194 toEtm8.gamma: 3.210482
    test 1156 line 194 toEtm8.scale: 1.004499
    test 1157 line 194 toEtm8.lat: 29.526120
    test 1158 line 194 toEtm8.lon: 6.493069
    test 1159 line 195 toEtm8.easting: 3381879.687227
    test 1160 line 195 toEtm8.northing: 5103629.325665
    test 1161 line 195 toEtm8.gamma: 26.748108
    test 1162 line 195 toEtm8.scale: 1.143559
    test 1163 line 195 toEtm8.lat: 39.021853
    test 1164 line 195 toEtm8.lon: 38.641779
    test 1165 line 196 toEtm8.easting: 2815986.534177
    test 1166 line 196 toEtm8.northing: 9387029.120718
    test 1167 line 196 toEtm8.gamma: 76.967262
    test 1168 line 196 toEtm8.scale: 1.098032
    test 1169 line 196 toEtm8.lat: 64.971850
    test 1170 line 196 toEtm8.lon: 78.151893
    test 1171 line 197 toEtm8.easting: 3398195.889603
    test 1172 line 197 toEtm8.northing: 9138936.031490
    test 1173 line 197 toEtm8.gamma: 74.477499
    test 1174 line 197 toEtm8.scale: 1.144009
    test 1175 line 197 toEtm8.lat: 59.961819
    test 1176 line 197 toEtm8.lon: 76.473422
    test 1177 line 198 toEtm8.easting: 2421734.754637
    test 1178 line 198 toEtm8.northing: 5002372.094991
    test 1179 line 198 toEtm8.gamma: 20.017082
    test 1180 line 198 toEtm8.scale: 1.072592
    test 1181 line 198 toEtm8.lat: 41.374040
    test 1182 line 198 toEtm8.lon: 28.848343
    test 1183 line 199 toEtm8.easting: 2360869.895525
    test 1184 line 199 toEtm8.northing: 9553298.449536
    test 1185 line 199 toEtm8.gamma: 78.848205
    test 1186 line 199 toEtm8.scale: 1.068453
    test 1187 line 199 toEtm8.lat: 68.946087
    test 1188 line 199 toEtm8.lon: 79.574523
    test 1189 line 200 toEtm8.easting: 1196539.972194
    test 1190 line 200 toEtm8.northing: 9861920.836230
    test 1191 line 200 toEtm8.gamma: 83.437668
    test 1192 line 200 toEtm8.scale: 1.017137
    test 1193 line 200 toEtm8.lat: 79.275096
    test 1194 line 200 toEtm8.lon: 83.551272
    test 1195 line 201 toEtm8.easting: 1327758.704795
    test 1196 line 201 toEtm8.northing: 2375509.241683
    test 1197 line 201 toEtm8.gamma: 4.617572
    test 1198 line 201 toEtm8.scale: 1.021465
    test 1199 line 201 toEtm8.lat: 21.000252
    test 1200 line 201 toEtm8.lon: 12.697444
    test 1201 line 202 toEtm8.easting: 2070860.327644
    test 1202 line 202 toEtm8.northing: 8604500.719581
    test 1203 line 202 toEtm8.gamma: 54.722761
    test 1204 line 202 toEtm8.scale: 1.052469
    test 1205 line 202 toEtm8.lat: 68.015227
    test 1206 line 202 toEtm8.lon: 56.732419
    test 1207 line 203 toEtm8.easting: 6564776.654864
    test 1208 line 203 toEtm8.northing: 8171207.177379
    test 1209 line 203 toEtm8.gamma: 69.237523
    test 1210 line 203 toEtm8.scale: 1.573894
    test 1211 line 203 toEtm8.lat: 37.423675
    test 1212 line 203 toEtm8.lon: 76.947359
    test 1213 line 204 toEtm8.easting: 592653.553821
    test 1214 line 204 toEtm8.northing: 6125529.810052
    test 1215 line 204 toEtm8.gamma: 7.600785
    test 1216 line 204 toEtm8.scale: 1.003912
    test 1217 line 204 toEtm8.lat: 54.922707
    test 1218 line 204 toEtm8.lon: 9.260818
    test 1219 line 205 toEtm8.easting: 693459.671821
    test 1220 line 205 toEtm8.northing: 6943779.991032
    test 1221 line 205 toEtm8.gamma: 11.787587
    test 1222 line 205 toEtm8.scale: 1.005496
    test 1223 line 205 toEtm8.lat: 61.982810
    test 1224 line 205 toEtm8.lon: 13.299659
    test 1225 line 206 toEtm8.easting: 1838956.187625
    test 1226 line 206 toEtm8.northing: 3511959.612381
    test 1227 line 206 toEtm8.gamma: 9.844313
    test 1228 line 206 toEtm8.scale: 1.041603
    test 1229 line 206 toEtm8.lat: 30.324214
    test 1230 line 206 toEtm8.lon: 18.959769
    test 1231 line 207 toEtm8.easting: 4460690.884597
    test 1232 line 207 toEtm8.northing: 5541873.235403
    test 1233 line 207 toEtm8.gamma: 35.768613
    test 1234 line 207 toEtm8.scale: 1.254179
    test 1235 line 207 toEtm8.lat: 37.629667
    test 1236 line 207 toEtm8.lon: 49.649131
    test 1237 line 208 toEtm8.easting: 2311168.998941
    test 1238 line 208 toEtm8.northing: 9480561.869119
    test 1239 line 208 toEtm8.gamma: 76.828257
    test 1240 line 208 toEtm8.scale: 1.065556
    test 1241 line 208 toEtm8.lat: 69.225574
    test 1242 line 208 toEtm8.lon: 77.656135
    test 1243 line 209 toEtm8.easting: 4111775.114451
    test 1244 line 209 toEtm8.northing: 6509014.348792
    test 1245 line 209 toEtm8.gamma: 43.052130
    test 1246 line 209 toEtm8.scale: 1.214125
    test 1247 line 209 toEtm8.lat: 44.698478
    test 1248 line 209 toEtm8.lon: 52.979304
    test 1249 line 210 toEtm8.easting: 75358.261962
    test 1250 line 210 toEtm8.northing: 7711258.662251
    test 1251 line 210 toEtm8.gamma: 1.806297
    test 1252 line 210 toEtm8.scale: 0.999669
    test 1253 line 210 toEtm8.lat: 69.499594
    test 1254 line 210 toEtm8.lon: 1.928336
    test 1255 line 211 toEtm8.easting: 8781885.229116
    test 1256 line 211 toEtm8.northing: 9184776.452211
    test 1257 line 211 toEtm8.gamma: 81.795539
    test 1258 line 211 toEtm8.scale: 2.094908
    test 1259 line 211 toEtm8.lat: 27.981364
    test 1260 line 211 toEtm8.lon: 86.061113
    test 1261 line 212 toEtm8.easting: 954378.415174
    test 1262 line 212 toEtm8.northing: 7449110.669807
    test 1263 line 212 toEtm8.gamma: 19.380657
    test 1264 line 212 toEtm8.scale: 1.010768
    test 1265 line 212 toEtm8.lat: 65.699839
    test 1266 line 212 toEtm8.lon: 21.104725
    test 1267 line 213 toEtm8.easting: 720971.793706
    test 1268 line 213 toEtm8.northing: 5265195.121555
    test 1269 line 213 toEtm8.gamma: 7.002995
    test 1270 line 213 toEtm8.scale: 1.005995
    test 1271 line 213 toEtm8.lat: 47.143648
    test 1272 line 213 toEtm8.lon: 9.512189
    test 1273 line 214 toEtm8.easting: 561561.493937
    test 1274 line 214 toEtm8.northing: 989910.236221
    test 1275 line 214 toEtm8.gamma: 0.793118
    test 1276 line 214 toEtm8.scale: 1.003505
    test 1277 line 214 toEtm8.lat: 8.920167
    test 1278 line 214 toEtm8.lon: 5.101513
    test 1279 line 215 toEtm8.easting: 3446829.634468
    test 1280 line 215 toEtm8.northing: 9232868.155664
    test 1281 line 215 toEtm8.gamma: 76.279075
    test 1282 line 215 toEtm8.scale: 1.148263
    test 1283 line 215 toEtm8.lat: 59.778971
    test 1284 line 215 toEtm8.lon: 78.080322
    test 1285 line 216 toEtm8.easting: 4048307.545909
    test 1286 line 216 toEtm8.northing: 9800416.422998
    test 1287 line 216 toEtm8.gamma: 86.843918
    test 1288 line 216 toEtm8.scale: 1.206495
    test 1289 line 216 toEtm8.lat: 55.865310
    test 1290 line 216 toEtm8.lon: 87.384288
    test 1291 line 217 toEtm8.easting: 8973188.480293
    test 1292 line 217 toEtm8.northing: 7042230.087021
    test 1293 line 217 toEtm8.gamma: 60.872456
    test 1294 line 217 toEtm8.scale: 2.156098
    test 1295 line 217 toEtm8.lat: 24.310973
    test 1296 line 217 toEtm8.lon: 76.823777
    test 1297 line 218 toEtm8.easting: 126314.191618
    test 1298 line 218 toEtm8.northing: 396006.687921
    test 1299 line 218 toEtm8.gamma: 0.071065
    test 1300 line 218 toEtm8.scale: 0.999798
    test 1301 line 218 toEtm8.lat: 3.582041
    test 1302 line 218 toEtm8.lon: 1.137286
    test 1303 line 219 toEtm8.easting: 5247652.345647
    test 1304 line 219 toEtm8.northing: 8670513.359752
    test 1305 line 219 toEtm8.gamma: 72.700498
    test 1306 line 219 toEtm8.scale: 1.355272
    test 1307 line 219 toEtm8.lat: 46.124233
    test 1308 line 219 toEtm8.lon: 77.313118
    test 1309 line 220 toEtm8.easting: 8103656.838119
    test 1310 line 220 toEtm8.northing: 9469794.014737
    test 1311 line 220 toEtm8.gamma: 84.490673
    test 1312 line 220 toEtm8.scale: 1.912164
    test 1313 line 220 toEtm8.lat: 31.171391
    test 1314 line 220 toEtm8.lon: 87.104504
    test 1315 line 221 toEtm8.easting: 6300112.758236
    test 1316 line 221 toEtm8.northing: 93835.917364
    test 1317 line 221 toEtm8.gamma: 0.644805
    test 1318 line 221 toEtm8.scale: 1.534073
    test 1319 line 221 toEtm8.lat: 0.553171
    test 1320 line 221 toEtm8.lon: 49.117104
    test 1321 line 222 toEtm8.easting: 3894813.593782
    test 1322 line 222 toEtm8.northing: 4833832.341027
    test 1323 line 222 toEtm8.gamma: 27.453298
    test 1324 line 222 toEtm8.scale: 1.192135
    test 1325 line 222 toEtm8.lat: 35.361587
    test 1326 line 222 toEtm8.lon: 41.860599
    test 1327 line 223 toEtm8.easting: 402511.346712
    test 1328 line 223 toEtm8.northing: 3520621.561911
    test 1329 line 223 toEtm8.gamma: 2.238474
    test 1330 line 223 toEtm8.scale: 1.001599
    test 1331 line 223 toEtm8.lat: 31.750314
    test 1332 line 223 toEtm8.lon: 4.248167
    test 1333 line 224 toEtm8.easting: 5357378.503148
    test 1334 line 224 toEtm8.northing: 2772997.602234
    test 1335 line 224 toEtm8.gamma: 17.823560
    test 1336 line 224 toEtm8.scale: 1.376031
    test 1337 line 224 toEtm8.lat: 17.924336
    test 1338 line 224 toEtm8.lon: 46.096402
    test 1339 line 225 toEtm8.easting: 2807553.985866
    test 1340 line 225 toEtm8.northing: 8177847.980275
    test 1341 line 225 toEtm8.gamma: 54.680045
    test 1342 line 225 toEtm8.scale: 1.097531
    test 1343 line 225 toEtm8.lat: 60.931488
    test 1344 line 225 toEtm8.lon: 58.221214
    test 1345 line 226 toEtm8.easting: 18289045.166501
    test 1346 line 226 toEtm8.northing: 7792942.339604
    test 1347 line 226 toEtm8.gamma: 73.216494
    test 1348 line 226 toEtm8.scale: 8.098009
    test 1349 line 226 toEtm8.lat: 5.358151
    test 1350 line 226 toEtm8.lon: 87.556213
    test 1351 line 227 toEtm8.easting: 8376822.459538
    test 1352 line 227 toEtm8.northing: 8128174.623878
    test 1353 line 227 toEtm8.gamma: 70.920117
    test 1354 line 227 toEtm8.scale: 1.984873
    test 1355 line 227 toEtm8.lat: 28.616673
    test 1356 line 227 toEtm8.lon: 80.452426
    test 1357 line 228 toEtm8.easting: 11898068.353272
    test 1358 line 228 toEtm8.northing: 4772439.493697
    test 1359 line 228 toEtm8.gamma: 42.613968
    test 1360 line 228 toEtm8.scale: 3.314412
    test 1361 line 228 toEtm8.lat: 11.709763
    test 1362 line 228 toEtm8.lon: 76.760295
    test 1363 line 229 toEtm8.easting: 10550946.939050
    test 1364 line 229 toEtm8.northing: 3851968.815295
    test 1365 line 229 toEtm8.gamma: 33.383025
    test 1366 line 229 toEtm8.scale: 2.724754
    test 1367 line 229 toEtm8.lat: 12.009498
    test 1368 line 229 toEtm8.lon: 71.782351
    test 1369 line 230 toEtm8.easting: 6828299.123607
    test 1370 line 230 toEtm8.northing: 9394803.227463
    test 1371 line 230 toEtm8.gamma: 83.181386
    test 1372 line 230 toEtm8.scale: 1.624359
    test 1373 line 230 toEtm8.lat: 37.629784
    test 1374 line 230 toEtm8.lon: 85.795687
    test 1375 line 231 toEtm8.easting: 11162550.334022
    test 1376 line 231 toEtm8.northing: 2640267.279593
    test 1377 line 231 toEtm8.gamma: 23.145404
    test 1378 line 231 toEtm8.scale: 2.998408
    test 1379 line 231 toEtm8.lat: 7.721128
    test 1380 line 231 toEtm8.lon: 71.662731
    test 1381 line 232 toEtm8.easting: 4411584.447941
    test 1382 line 232 toEtm8.northing: 4956173.694407
    test 1383 line 232 toEtm8.gamma: 30.713919
    test 1384 line 232 toEtm8.scale: 1.248736
    test 1385 line 232 toEtm8.lat: 34.295026
    test 1386 line 232 toEtm8.lon: 46.442191
    test 1387 line 233 toEtm8.easting: 672108.897905
    test 1388 line 233 toEtm8.northing: 4751554.657054
    test 1389 line 233 toEtm8.gamma: 5.569178
    test 1390 line 233 toEtm8.scale: 1.005162
    test 1391 line 233 toEtm8.lat: 42.622496
    test 1392 line 233 toEtm8.lon: 8.193605
    test 1393 line 234 toEtm8.easting: 5022964.290579
    test 1394 line 234 toEtm8.northing: 6860418.199502
    test 1395 line 234 toEtm8.gamma: 50.862230
    test 1396 line 234 toEtm8.scale: 1.324925
    test 1397 line 234 toEtm8.lat: 41.667780
    test 1398 line 234 toEtm8.lon: 61.518288
    test 1399 line 235 toEtm8.easting: 1669655.595207
    test 1400 line 235 toEtm8.northing: 4152086.537021
    test 1401 line 235 toEtm8.gamma: 11.110237
    test 1402 line 235 toEtm8.scale: 1.034138
    test 1403 line 235 toEtm8.lat: 36.060369
    test 1404 line 235 toEtm8.lon: 18.444112
    test 1405 line 236 toEtm8.easting: 6055876.729655
    test 1406 line 236 toEtm8.northing: 4896837.552619
    test 1407 line 236 toEtm8.gamma: 35.799747
    test 1408 line 236 toEtm8.scale: 1.485967
    test 1409 line 236 toEtm8.lat: 27.948091
    test 1410 line 236 toEtm8.lon: 56.816429
    test 1411 line 237 toEtm8.easting: 1209214.164379
    test 1412 line 237 toEtm8.northing: 7266409.859178
    test 1413 line 237 toEtm8.gamma: 22.319633
    test 1414 line 237 toEtm8.scale: 1.017554
    test 1415 line 237 toEtm8.lat: 63.386030
    test 1416 line 237 toEtm8.lon: 24.662716
    test 1417 line 238 toEtm8.easting: 5154564.559584
    test 1418 line 238 toEtm8.northing: 698118.349975
    test 1419 line 238 toEtm8.gamma: 4.242360
    test 1420 line 238 toEtm8.scale: 1.347481
    test 1421 line 238 toEtm8.lat: 4.680922
    test 1422 line 238 toEtm8.lon: 42.114426
    test 1423 line 239 toEtm8.easting: 2695149.806543
    test 1424 line 239 toEtm8.northing: 8208197.765605
    test 1425 line 239 toEtm8.gamma: 54.178615
    test 1426 line 239 toEtm8.scale: 1.089730
    test 1427 line 239 toEtm8.lat: 61.826625
    test 1428 line 239 toEtm8.lon: 57.525096
    test 1429 line 240 toEtm8.easting: 3394792.327820
    test 1430 line 240 toEtm8.northing: 3217583.415552
    test 1431 line 240 toEtm8.gamma: 15.165863
    test 1432 line 240 toEtm8.scale: 1.145285
    test 1433 line 240 toEtm8.lat: 25.104353
    test 1434 line 240 toEtm8.lon: 32.528660
    test 1435 line 241 toEtm8.easting: 1429160.966985
    test 1436 line 241 toEtm8.northing: 8212685.362032
    test 1437 line 241 toEtm8.gamma: 37.484904
    test 1438 line 241 toEtm8.scale: 1.024676
    test 1439 line 241 toEtm8.lat: 69.678351
    test 1440 line 241 toEtm8.lon: 39.275513
    test 1441 line 242 toEtm8.easting: 8343387.998065
    test 1442 line 242 toEtm8.northing: 8885196.954578
    test 1443 line 242 toEtm8.gamma: 78.561937
    test 1444 line 242 toEtm8.scale: 1.974733
    test 1445 line 242 toEtm8.lat: 29.671384
    test 1446 line 242 toEtm8.lon: 84.196595
    test 1447 line 243 toEtm8.easting: 1990722.928606
    test 1448 line 243 toEtm8.northing: 7569202.065162
    test 1449 line 243 toEtm8.gamma: 37.075276
    test 1450 line 243 toEtm8.scale: 1.048486
    test 1451 line 243 toEtm8.lat: 62.300208
    test 1452 line 243 toEtm8.lon: 40.474051
    test 1453 line 244 toEtm8.easting: 1554980.099559
    test 1454 line 244 toEtm8.northing: 1449423.919586
    test 1455 line 244 toEtm8.gamma: 3.188328
    test 1456 line 244 toEtm8.scale: 1.029664
    test 1457 line 244 toEtm8.lat: 12.721776
    test 1458 line 244 toEtm8.lon: 14.190003
    test 1459 line 245 toEtm8.easting: 785205.450196
    test 1460 line 245 toEtm8.northing: 5575158.423096
    test 1461 line 245 toEtm8.gamma: 8.388417
    test 1462 line 245 toEtm8.scale: 1.007181
    test 1463 line 245 toEtm8.lat: 49.811296
    test 1464 line 245 toEtm8.lon: 10.925011
    test 1465 line 246 toEtm8.easting: 3310405.988313
    test 1466 line 246 toEtm8.northing: 5955022.233881
    test 1467 line 246 toEtm8.gamma: 33.007587
    test 1468 line 246 toEtm8.scale: 1.137141
    test 1469 line 246 toEtm8.lat: 45.132680
    test 1470 line 246 toEtm8.lon: 42.478624
    test 1471 line 247 toEtm8.easting: 4733460.960666
    test 1472 line 247 toEtm8.northing: 129034.889816
    test 1473 line 247 toEtm8.gamma: 0.737551
    test 1474 line 247 toEtm8.scale: 1.290439
    test 1475 line 247 toEtm8.lat: 0.904279
    test 1476 line 247 toEtm8.lon: 39.078412
    test 1477 line 248 toEtm8.easting: 3322708.343909
    test 1478 line 248 toEtm8.northing: 3864738.078742
    test 1479 line 248 toEtm8.gamma: 18.472566
    test 1480 line 248 toEtm8.scale: 1.138838
    test 1481 line 248 toEtm8.lat: 30.163605
    test 1482 line 248 toEtm8.lon: 33.577996
    test 1483 line 249 toEtm8.easting: 8672864.417204
    test 1484 line 249 toEtm8.northing: 8333465.983444
    test 1485 line 249 toEtm8.gamma: 73.206273
    test 1486 line 249 toEtm8.scale: 2.065441
    test 1487 line 249 toEtm8.lat: 27.643244
    test 1488 line 249 toEtm8.lon: 81.892859
    test 1489 line 250 toEtm8.easting: 11126818.231196
    test 1490 line 250 toEtm8.northing: 7618712.174991
    test 1491 line 250 toEtm8.gamma: 67.887173
    test 1492 line 250 toEtm8.scale: 2.922417
    test 1493 line 250 toEtm8.lat: 18.201208
    test 1494 line 250 toEtm8.lon: 82.434618
    test 1495 line 251 toEtm8.easting: 8650100.981797
    test 1496 line 251 toEtm8.northing: 9975084.168997
    test 1497 line 251 toEtm8.gamma: 89.767446
    test 1498 line 251 toEtm8.scale: 2.057289
    test 1499 line 251 toEtm8.lat: 28.804576
    test 1500 line 251 toEtm8.lon: 89.886072
    test 1501 line 252 toEtm8.easting: 2212701.180192
    test 1502 line 252 toEtm8.northing: 650348.100229
    test 1503 line 252 toEtm8.gamma: 1.970441
    test 1504 line 252 toEtm8.scale: 1.060830
    test 1505 line 252 toEtm8.lat: 5.542998
    test 1506 line 252 toEtm8.lon: 19.589578
    test 1507 line 253 toEtm8.easting: 6890222.326618
    test 1508 line 253 toEtm8.northing: 7506813.499547
    test 1509 line 253 toEtm8.gamma: 62.684825
    test 1510 line 253 toEtm8.scale: 1.638488
    test 1511 line 253 toEtm8.lat: 34.237147
    test 1512 line 253 toEtm8.lon: 73.678164
    test 1513 line 254 toEtm8.easting: 6692260.067325
    test 1514 line 254 toEtm8.northing: 4244174.008110
    test 1515 line 254 toEtm8.gamma: 31.812920
    test 1516 line 254 toEtm8.scale: 1.604640
    test 1517 line 254 toEtm8.lat: 22.704949
    test 1518 line 254 toEtm8.lon: 57.877010
    test 1519 line 255 toEtm8.easting: 1225564.137190
    test 1520 line 255 toEtm8.northing: 4778923.924144
    test 1521 line 255 toEtm8.gamma: 10.083419
    test 1522 line 255 toEtm8.scale: 1.018134
    test 1523 line 255 toEtm8.lat: 42.192424
    test 1524 line 255 toEtm8.lon: 14.828196
    test 1525 line 256 toEtm8.easting: 12341116.154950
    test 1526 line 256 toEtm8.northing: 5081855.521966
    test 1527 line 256 toEtm8.gamma: 45.712546
    test 1528 line 256 toEtm8.scale: 3.535170
    test 1529 line 256 toEtm8.lat: 11.481151
    test 1530 line 256 toEtm8.lon: 78.189236
    test 1531 line 257 toEtm8.easting: 6673845.021771
    test 1532 line 257 toEtm8.northing: 1177587.190565
    test 1533 line 257 toEtm8.gamma: 8.389141
    test 1534 line 257 toEtm8.scale: 1.605171
    test 1535 line 257 toEtm8.lat: 6.609626
    test 1536 line 257 toEtm8.lon: 51.735783
    test 1537 line 258 toEtm8.easting: 6966354.690417
    test 1538 line 258 toEtm8.northing: 3641802.005093
    test 1539 line 258 toEtm8.gamma: 27.409636
    test 1540 line 258 toEtm8.scale: 1.661469
    test 1541 line 258 toEtm8.lat: 19.059369
    test 1542 line 258 toEtm8.lon: 57.526439
    test 1543 max forward error: 3.352761e-08
    test 1544 max reverse error: 1.634248e-13
    test 1545 Etm.scale0: 0.9996
    test 1546 Etm.datum: WGS84
    test 1547 Etm.datum.ellipsoid.KsOrder: 8
    test 1548 WGS84.KsOrder: 8

    all 1548 testEtmTMcoords.py tests passed, 1 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 971.513 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testExactTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14
# lazily imported pygeodesy.etm by testExactTMcoords.py line 14
# lazily imported pygeodesy.ExactTransverseMercator from .etm by testExactTMcoords.py line 14
# lazily imported pygeodesy.LatLon_ from .points by testExactTMcoords.py line 14

    testing testExactTMcoords.py 24.03.22 (module pygeodesy.etm 24.06.11) isLazy=3
    test 1 line 1 _ExactTM.easting: 1548706.791619
    test 2 line 1 _ExactTM.northing: 8451449.198772
    test 3 line 1 _ExactTM.gamma: 43.922790
    test 4 line 1 _ExactTM.scale: 1.029060
    test 5 line 1 _ExactTM.lat: 70.579277
    test 6 line 1 _ExactTM.lon: 45.599420
    test 7 line 2 _ExactTM.easting: 2624150.740929
    test 8 line 2 _ExactTM.northing: 1204434.041605
    test 9 line 2 _ExactTM.gamma: 4.292619
    test 10 line 2 _ExactTM.scale: 1.086051
    test 11 line 2 _ExactTM.lat: 10.018894
    test 12 line 2 _ExactTM.lon: 23.313324
    test 13 line 3 _ExactTM.easting: 9855841.232935
    test 14 line 3 _ExactTM.northing: 6145496.115155
    test 15 line 3 _ExactTM.gamma: 53.348315
    test 16 line 3 _ExactTM.scale: 2.445098
    test 17 line 3 _ExactTM.lat: 19.479896
    test 18 line 3 _ExactTM.lon: 75.662049
    test 19 line 4 _ExactTM.easting: 3206390.691996
    test 20 line 4 _ExactTM.northing: 2650745.400406
    test 21 line 4 _ExactTM.gamma: 11.666950
    test 22 line 4 _ExactTM.scale: 1.129359
    test 23 line 4 _ExactTM.lat: 21.072465
    test 24 line 4 _ExactTM.lon: 29.828684
    test 25 line 5 _ExactTM.easting: 4328154.083501
    test 26 line 5 _ExactTM.northing: 749647.623690
    test 27 line 5 _ExactTM.gamma: 4.024317
    test 28 line 5 _ExactTM.scale: 1.240829
    test 29 line 5 _ExactTM.lat: 5.458957
    test 30 line 5 _ExactTM.lon: 36.385237
    test 31 line 6 _ExactTM.easting: 847598.266514
    test 32 line 6 _ExactTM.northing: 7947180.962440
    test 33 line 6 _ExactTM.gamma: 21.639091
    test 34 line 6 _ExactTM.scale: 1.008399
    test 35 line 6 _ExactTM.lat: 70.175454
    test 36 line 6 _ExactTM.lon: 22.865350
    test 37 line 7 _ExactTM.easting: 2727657.337974
    test 38 line 7 _ExactTM.northing: 8283916.696410
    test 39 line 7 _ExactTM.gamma: 55.690909
    test 40 line 7 _ExactTM.scale: 1.091942
    test 41 line 7 _ExactTM.lat: 61.965605
    test 42 line 7 _ExactTM.lon: 58.931371
    test 43 line 8 _ExactTM.easting: 2331001.751890
    test 44 line 8 _ExactTM.northing: 1313608.224751
    test 45 line 8 _ExactTM.gamma: 4.214690
    test 46 line 8 _ExactTM.scale: 1.067599
    test 47 line 8 _ExactTM.lat: 11.116050
    test 48 line 8 _ExactTM.lon: 20.901069
    test 49 line 9 _ExactTM.easting: 6035557.239480
    test 50 line 9 _ExactTM.northing: 5791770.791879
    test 51 line 9 _ExactTM.gamma: 43.698170
    test 52 line 9 _ExactTM.scale: 1.481260
    test 53 line 9 _ExactTM.lat: 32.210543
    test 54 line 9 _ExactTM.lon: 60.705849
    test 55 line 10 _ExactTM.easting: 1064553.125852
    test 56 line 10 _ExactTM.northing: 9417273.737208
    test 57 line 10 _ExactTM.gamma: 61.100380
    test 58 line 10 _ExactTM.scale: 1.013475
    test 59 line 10 _ExactTM.lat: 79.187451
    test 60 line 10 _ExactTM.lon: 61.532382
    test 61 line 11 _ExactTM.easting: 1400137.116164
    test 62 line 11 _ExactTM.northing: 9616907.017686
    test 63 line 11 _ExactTM.gamma: 74.527087
    test 64 line 11 _ExactTM.scale: 1.023640
    test 65 line 11 _ExactTM.lat: 77.103759
    test 66 line 11 _ExactTM.lon: 74.899105
    test 67 line 12 _ExactTM.easting: 9860691.016626
    test 68 line 12 _ExactTM.northing: 7433039.143328
    test 69 line 12 _ExactTM.gamma: 65.357693
    test 70 line 12 _ExactTM.scale: 2.438973
    test 71 line 12 _ExactTM.lat: 21.889514
    test 72 line 12 _ExactTM.lon: 80.019886
    test 73 line 13 _ExactTM.easting: 8076501.833695
    test 74 line 13 _ExactTM.northing: 8561614.174782
    test 75 line 13 _ExactTM.gamma: 75.073393
    test 76 line 13 _ExactTM.scale: 1.906202
    test 77 line 13 _ExactTM.lat: 30.536296
    test 78 line 13 _ExactTM.lon: 82.186178
    test 79 line 14 _ExactTM.easting: 3335099.866623
    test 80 line 14 _ExactTM.northing: 6740519.084015
    test 81 line 14 _ExactTM.gamma: 40.611821
    test 82 line 14 _ExactTM.scale: 1.139021
    test 83 line 14 _ExactTM.lat: 49.990485
    test 84 line 14 _ExactTM.lon: 48.203179
    test 85 line 15 _ExactTM.easting: 12051574.928500
    test 86 line 15 _ExactTM.northing: 6587213.051951
    test 87 line 15 _ExactTM.gamma: 59.033237
    test 88 line 15 _ExactTM.scale: 3.357469
    test 89 line 15 _ExactTM.lat: 14.486312
    test 90 line 15 _ExactTM.lon: 80.905137
    test 91 line 16 _ExactTM.easting: 5387578.735298
    test 92 line 16 _ExactTM.northing: 4111216.907168
    test 93 line 16 _ExactTM.gamma: 27.574337
    test 94 line 16 _ExactTM.scale: 1.379357
    test 95 line 16 _ExactTM.lat: 25.936824
    test 96 line 16 _ExactTM.lon: 49.913598
    test 97 line 17 _ExactTM.easting: 2622214.380233
    test 98 line 17 _ExactTM.northing: 8678923.984567
    test 99 line 17 _ExactTM.gamma: 61.697275
    test 100 line 17 _ExactTM.scale: 1.084810
    test 101 line 17 _ExactTM.lat: 64.402196
    test 102 line 17 _ExactTM.lon: 64.091395
    test 103 line 18 _ExactTM.easting: 5068474.169633
    test 104 line 18 _ExactTM.northing: 9492066.993709
    test 105 line 18 _ExactTM.gamma: 83.156740
    test 106 line 18 _ExactTM.scale: 1.329990
    test 107 line 18 _ExactTM.lat: 48.451354
    test 108 line 18 _ExactTM.lon: 84.856198
    test 109 line 19 _ExactTM.easting: 738062.047779
    test 110 line 19 _ExactTM.northing: 3031007.074116
    test 111 line 19 _ExactTM.gamma: 3.416802
    test 112 line 19 _ExactTM.scale: 1.006332
    test 113 line 19 _ExactTM.lat: 27.203895
    test 114 line 19 _ExactTM.lon: 7.440229
    test 115 line 20 _ExactTM.easting: 1944413.834565
    test 116 line 20 _ExactTM.northing: 9613299.224493
    test 117 line 20 _ExactTM.gamma: 78.462831
    test 118 line 20 _ExactTM.scale: 1.046134
    test 119 line 20 _ExactTM.lat: 72.509000
    test 120 line 20 _ExactTM.lon: 78.982283
    test 121 line 21 _ExactTM.easting: 2114521.418406
    test 122 line 21 _ExactTM.northing: 4954077.440098
    test 123 line 21 _ExactTM.gamma: 17.571878
    test 124 line 21 _ExactTM.scale: 1.055093
    test 125 line 21 _ExactTM.lat: 41.824954
    test 126 line 21 _ExactTM.lon: 25.392744
    test 127 line 22 _ExactTM.easting: 620365.905090
    test 128 line 22 _ExactTM.northing: 4755542.026562
    test 129 line 22 _ExactTM.gamma: 5.152022
    test 130 line 22 _ExactTM.scale: 1.004338
    test 131 line 22 _ExactTM.lat: 42.701376
    test 132 line 22 _ExactTM.lon: 7.572738
    test 133 line 23 _ExactTM.easting: 263004.770989
    test 134 line 23 _ExactTM.northing: 4493669.762451
    test 135 line 23 _ExactTM.gamma: 2.020523
    test 136 line 23 _ExactTM.scale: 1.000452
    test 137 line 23 _ExactTM.lat: 40.552052
    test 138 line 23 _ExactTM.lon: 3.106056
    test 139 line 24 _ExactTM.easting: 3217221.739462
    test 140 line 24 _ExactTM.northing: 437776.119161
    test 141 line 24 _ExactTM.gamma: 1.848169
    test 142 line 24 _ExactTM.scale: 1.130558
    test 143 line 24 _ExactTM.lat: 3.501242
    test 144 line 24 _ExactTM.lon: 27.806507
    test 145 line 25 _ExactTM.easting: 14661142.444961
    test 146 line 25 _ExactTM.northing: 7476100.824185
    test 147 line 25 _ExactTM.gamma: 68.376669
    test 148 line 25 _ExactTM.scale: 4.896650
    test 149 line 25 _ExactTM.lat: 10.148715
    test 150 line 25 _ExactTM.lon: 85.373768
    test 151 line 26 _ExactTM.easting: 967777.158554
    test 152 line 26 _ExactTM.northing: 6615684.266592
    test 153 line 26 _ExactTM.gamma: 14.410044
    test 154 line 26 _ExactTM.scale: 1.011100
    test 155 line 26 _ExactTM.lat: 58.582623
    test 156 line 26 _ExactTM.lon: 16.755558
    test 157 line 27 _ExactTM.easting: 7558840.728461
    test 158 line 27 _ExactTM.northing: 4144728.130764
    test 159 line 27 _ExactTM.gamma: 32.557264
    test 160 line 27 _ExactTM.scale: 1.791490
    test 161 line 27 _ExactTM.lat: 19.793004
    test 162 line 27 _ExactTM.lon: 61.746763
    test 163 line 28 _ExactTM.easting: 1056008.314161
    test 164 line 28 _ExactTM.northing: 9290799.692669
    test 165 line 28 _ExactTM.gamma: 55.843278
    test 166 line 28 _ExactTM.scale: 1.013253
    test 167 line 28 _ExactTM.lat: 78.666776
    test 168 line 28 _ExactTM.lon: 56.365355
    test 169 line 29 _ExactTM.easting: 1943965.134687
    test 170 line 29 _ExactTM.northing: 1389972.228690
    test 171 line 29 _ExactTM.gamma: 3.774869
    test 172 line 29 _ExactTM.scale: 1.046724
    test 173 line 29 _ExactTM.lat: 11.998788
    test 174 line 29 _ExactTM.lon: 17.597873
    test 175 line 30 _ExactTM.easting: 5803077.072902
    test 176 line 30 _ExactTM.northing: 5649957.943659
    test 177 line 30 _ExactTM.gamma: 41.717943
    test 178 line 30 _ExactTM.scale: 1.442572
    test 179 line 30 _ExactTM.lat: 32.540378
    test 180 line 30 _ExactTM.lon: 58.764613
    test 181 line 31 _ExactTM.easting: 2928716.986009
    test 182 line 31 _ExactTM.northing: 5731835.058317
    test 183 line 31 _ExactTM.gamma: 28.538550
    test 184 line 31 _ExactTM.scale: 1.106780
    test 185 line 31 _ExactTM.lat: 45.160356
    test 186 line 31 _ExactTM.lon: 37.465285
    test 187 line 32 _ExactTM.easting: 326141.975756
    test 188 line 32 _ExactTM.northing: 8881325.164543
    test 189 line 32 _ExactTM.gamma: 16.111415
    test 190 line 32 _ExactTM.scale: 1.000900
    test 191 line 32 _ExactTM.lat: 79.584190
    test 192 line 32 _ExactTM.lon: 16.367006
    test 193 line 33 _ExactTM.easting: 3933015.267450
    test 194 line 33 _ExactTM.northing: 7932373.909512
    test 195 line 33 _ExactTM.gamma: 58.577424
    test 196 line 33 _ExactTM.scale: 1.194811
    test 197 line 33 _ExactTM.lat: 52.470664
    test 198 line 33 _ExactTM.lon: 64.125580
    test 199 line 34 _ExactTM.easting: 8598926.983213
    test 200 line 34 _ExactTM.northing: 6214135.167503
    test 201 line 34 _ExactTM.gamma: 52.612878
    test 202 line 34 _ExactTM.scale: 2.051367
    test 203 line 34 _ExactTM.lat: 23.702673
    test 204 line 34 _ExactTM.lon: 72.630363
    test 205 line 35 _ExactTM.easting: 6620553.333772
    test 206 line 35 _ExactTM.northing: 6540527.122948
    test 207 line 35 _ExactTM.gamma: 52.350140
    test 208 line 35 _ExactTM.scale: 1.586614
    test 209 line 35 _ExactTM.lat: 32.603520
    test 210 line 35 _ExactTM.lon: 67.280123
    test 211 line 36 _ExactTM.easting: 1515136.758292
    test 212 line 36 _ExactTM.northing: 3858996.087537
    test 213 line 36 _ExactTM.gamma: 9.225127
    test 214 line 36 _ExactTM.scale: 1.028029
    test 215 line 36 _ExactTM.lat: 33.776224
    test 216 line 36 _ExactTM.lon: 16.280993
    test 217 line 37 _ExactTM.easting: 479854.373445
    test 218 line 37 _ExactTM.northing: 8980501.389896
    test 219 line 37 _ExactTM.gamma: 25.021222
    test 220 line 37 _ExactTM.scale: 1.002415
    test 221 line 37 _ExactTM.lat: 79.932747
    test 222 line 37 _ExactTM.lon: 25.363622
    test 223 line 38 _ExactTM.easting: 5243446.564940
    test 224 line 38 _ExactTM.northing: 140657.213960
    test 225 line 38 _ExactTM.gamma: 0.862817
    test 226 line 38 _ExactTM.scale: 1.360358
    test 227 line 38 _ExactTM.lat: 0.935056
    test 228 line 38 _ExactTM.lon: 42.538824
    test 229 line 39 _ExactTM.easting: 12806457.923218
    test 230 line 39 _ExactTM.northing: 7170118.684675
    test 231 line 39 _ExactTM.gamma: 64.708921
    test 232 line 39 _ExactTM.scale: 3.740588
    test 233 line 39 _ExactTM.lat: 13.490862
    test 234 line 39 _ExactTM.lon: 83.178380
    test 235 line 40 _ExactTM.easting: 1202993.459158
    test 236 line 40 _ExactTM.northing: 5557316.053599
    test 237 line 40 _ExactTM.gamma: 12.579061
    test 238 line 40 _ExactTM.scale: 1.017426
    test 239 line 40 _ExactTM.lat: 48.979057
    test 240 line 40 _ExactTM.lon: 16.474542
    test 241 line 41 _ExactTM.easting: 1729088.710196
    test 242 line 41 _ExactTM.northing: 7770874.289954
    test 243 line 41 _ExactTM.gamma: 36.021783
    test 244 line 41 _ExactTM.scale: 1.036397
    test 245 line 41 _ExactTM.lat: 65.036016
    test 246 line 41 _ExactTM.lon: 38.729091
    test 247 line 42 _ExactTM.easting: 2437301.517425
    test 248 line 42 _ExactTM.northing: 5539327.748318
    test 249 line 42 _ExactTM.gamma: 23.461879
    test 250 line 42 _ExactTM.scale: 1.073459
    test 251 line 42 _ExactTM.lat: 45.510091
    test 252 line 42 _ExactTM.lon: 31.303729
    test 253 line 43 _ExactTM.easting: 3647186.135066
    test 254 line 43 _ExactTM.northing: 2086412.330983
    test 255 line 43 _ExactTM.gamma: 10.023991
    test 256 line 43 _ExactTM.scale: 1.168707
    test 257 line 43 _ExactTM.lat: 16.058010
    test 258 line 43 _ExactTM.lon: 32.520026
    test 259 line 44 _ExactTM.easting: 1818497.243556
    test 260 line 44 _ExactTM.northing: 4275471.745057
    test 261 line 44 _ExactTM.gamma: 12.499656
    test 262 line 44 _ExactTM.scale: 1.040604
    test 263 line 44 _ExactTM.lat: 36.845200
    test 264 line 44 _ExactTM.lon: 20.282283
    test 265 line 45 _ExactTM.easting: 3751304.113783
    test 266 line 45 _ExactTM.northing: 5130454.001592
    test 267 line 45 _ExactTM.gamma: 28.959707
    test 268 line 45 _ExactTM.scale: 1.177681
    test 269 line 45 _ExactTM.lat: 37.865481
    test 270 line 45 _ExactTM.lon: 41.990402
    test 271 line 46 _ExactTM.easting: 2616733.138544
    test 272 line 46 _ExactTM.northing: 394644.463815
    test 273 line 46 _ExactTM.gamma: 1.390425
    test 274 line 46 _ExactTM.scale: 1.085595
    test 275 line 46 _ExactTM.lat: 3.287272
    test 276 line 46 _ExactTM.lon: 22.917604
    test 277 line 47 _ExactTM.easting: 1756506.573942
    test 278 line 47 _ExactTM.northing: 5570393.986394
    test 279 line 47 _ExactTM.gamma: 17.897894
    test 280 line 47 _ExactTM.scale: 1.037732
    test 281 line 47 _ExactTM.lat: 47.813686
    test 282 line 47 _ExactTM.lon: 23.545092
    test 283 line 48 _ExactTM.easting: 8752461.894711
    test 284 line 48 _ExactTM.northing: 6087728.152284
    test 285 line 48 _ExactTM.gamma: 51.628465
    test 286 line 48 _ExactTM.scale: 2.095465
    test 287 line 48 _ExactTM.lat: 22.836853
    test 288 line 48 _ExactTM.lon: 72.604385
    test 289 line 49 _ExactTM.easting: 1309272.216432
    test 290 line 49 _ExactTM.northing: 59520.028899
    test 291 line 49 _ExactTM.gamma: 0.109069
    test 292 line 49 _ExactTM.scale: 1.020897
    test 293 line 49 _ExactTM.lat: 0.527262
    test 294 line 49 _ExactTM.lon: 11.684209
    test 295 line 50 _ExactTM.easting: 328652.277129
    test 296 line 50 _ExactTM.northing: 2233043.958874
    test 297 line 50 _ExactTM.gamma: 1.084863
    test 298 line 50 _ExactTM.scale: 1.000935
    test 299 line 50 _ExactTM.lat: 20.166742
    test 300 line 50 _ExactTM.lon: 3.143948
    test 301 line 51 _ExactTM.easting: 8637959.716447
    test 302 line 51 _ExactTM.northing: 9190635.156031
    test 303 line 51 _ExactTM.gamma: 81.802563
    test 304 line 51 _ExactTM.scale: 2.054329
    test 305 line 51 _ExactTM.lat: 28.604629
    test 306 line 51 _ExactTM.lon: 85.988721
    test 307 line 52 _ExactTM.easting: 8548521.455147
    test 308 line 52 _ExactTM.northing: 9172410.943282
    test 309 line 52 _ExactTM.gamma: 81.583928
    test 310 line 52 _ExactTM.scale: 2.029641
    test 311 line 52 _ExactTM.lat: 28.984048
    test 312 line 52 _ExactTM.lon: 85.833448
    test 313 line 53 _ExactTM.easting: 796987.281104
    test 314 line 53 _ExactTM.northing: 7677446.357675
    test 315 line 53 _ExactTM.gamma: 18.084472
    test 316 line 53 _ExactTM.scale: 1.007381
    test 317 line 53 _ExactTM.lat: 68.071020
    test 318 line 53 _ExactTM.lon: 19.392823
    test 319 line 54 _ExactTM.easting: 3291036.496762
    test 320 line 54 _ExactTM.northing: 9513199.600666
    test 321 line 54 _ExactTM.gamma: 80.890254
    test 322 line 54 _ExactTM.scale: 1.134826
    test 323 line 54 _ExactTM.lat: 61.416576
    test 324 line 54 _ExactTM.lon: 81.981611
    test 325 line 55 _ExactTM.easting: 7087225.330906
    test 326 line 55 _ExactTM.northing: 8382823.855822
    test 327 line 55 _ExactTM.gamma: 72.253756
    test 328 line 55 _ExactTM.scale: 1.678070
    test 329 line 55 _ExactTM.lat: 35.074753
    test 330 line 55 _ExactTM.lon: 79.496003
    test 331 line 56 _ExactTM.easting: 5090358.125724
    test 332 line 56 _ExactTM.northing: 4318294.133489
    test 333 line 56 _ExactTM.gamma: 28.266280
    test 334 line 56 _ExactTM.scale: 1.336264
    test 335 line 56 _ExactTM.lat: 28.078790
    test 336 line 56 _ExactTM.lon: 48.684350

    test skipped (1): line 57 _ExactTM.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 337 line 58 _ExactTM.easting: 3447670.550785
    test 338 line 58 _ExactTM.northing: 3680238.888223
    test 339 line 58 _ExactTM.gamma: 17.934948
    test 340 line 58 _ExactTM.scale: 1.149831
    test 341 line 58 _ExactTM.lat: 28.473948
    test 342 line 58 _ExactTM.lon: 34.127306
    test 343 line 59 _ExactTM.easting: 3396522.906798
    test 344 line 59 _ExactTM.northing: 8093659.687593
    test 345 line 59 _ExactTM.gamma: 57.747117
    test 346 line 59 _ExactTM.scale: 1.144006
    test 347 line 59 _ExactTM.lat: 56.629354
    test 348 line 59 _ExactTM.lon: 62.196474
    test 349 line 60 _ExactTM.easting: 11249894.100784
    test 350 line 60 _ExactTM.northing: 1619226.506299
    test 351 line 60 _ExactTM.gamma: 14.210358
    test 352 line 60 _ExactTM.scale: 3.048347
    test 353 line 60 _ExactTM.lat: 4.747762
    test 354 line 60 _ExactTM.lon: 70.932555
    test 355 line 61 _ExactTM.easting: 6808805.230950
    test 356 line 61 _ExactTM.northing: 8044779.777369
    test 357 line 61 _ExactTM.gamma: 68.242008
    test 358 line 61 _ExactTM.scale: 1.621464
    test 359 line 61 _ExactTM.lat: 35.882113
    test 360 line 61 _ExactTM.lon: 76.741849
    test 361 line 62 _ExactTM.easting: 2306021.556506
    test 362 line 62 _ExactTM.northing: 757191.592866
    test 363 line 62 _ExactTM.gamma: 2.385686
    test 364 line 62 _ExactTM.scale: 1.066159
    test 365 line 62 _ExactTM.lat: 6.420705
    test 366 line 62 _ExactTM.lon: 20.416028
    test 367 line 63 _ExactTM.easting: 1547406.313862
    test 368 line 63 _ExactTM.northing: 6048712.751824
    test 369 line 63 _ExactTM.gamma: 18.474372
    test 370 line 63 _ExactTM.scale: 1.029123
    test 371 line 63 _ExactTM.lat: 52.335248
    test 372 line 63 _ExactTM.lon: 22.879294
    test 373 line 64 _ExactTM.easting: 2430467.650383
    test 374 line 64 _ExactTM.northing: 7557167.613972
    test 375 line 64 _ExactTM.gamma: 42.110021
    test 376 line 64 _ExactTM.scale: 1.072759
    test 377 line 64 _ExactTM.lat: 59.846391
    test 378 line 64 _ExactTM.lon: 46.262536
    test 379 line 65 _ExactTM.easting: 2334053.905830
    test 380 line 65 _ExactTM.northing: 1948076.966582
    test 381 line 65 _ExactTM.gamma: 6.353185
    test 382 line 65 _ExactTM.scale: 1.067733
    test 383 line 65 _ExactTM.lat: 16.461790
    test 384 line 65 _ExactTM.lon: 21.433269
    test 385 line 66 _ExactTM.easting: 5564175.186737
    test 386 line 66 _ExactTM.northing: 1836851.660412
    test 387 line 66 _ExactTM.gamma: 11.870682
    test 388 line 66 _ExactTM.scale: 1.408265
    test 389 line 66 _ExactTM.lat: 11.707905
    test 390 line 66 _ExactTM.lon: 45.827075
    test 391 line 67 _ExactTM.easting: 6118505.590359
    test 392 line 67 _ExactTM.northing: 7631684.552421
    test 393 line 67 _ExactTM.gamma: 62.477323
    test 394 line 67 _ExactTM.scale: 1.493420
    test 395 line 67 _ExactTM.lat: 38.519075
    test 396 line 67 _ExactTM.lon: 71.935918
    test 397 line 68 _ExactTM.easting: 7365359.294665
    test 398 line 68 _ExactTM.northing: 8818194.451531
    test 399 line 68 _ExactTM.gamma: 77.207042
    test 400 line 68 _ExactTM.scale: 1.737639
    test 401 line 68 _ExactTM.lat: 34.264007
    test 402 line 68 _ExactTM.lon: 82.647878
    test 403 line 69 _ExactTM.easting: 36187.342415
    test 404 line 69 _ExactTM.northing: 2142565.324802
    test 405 line 69 _ExactTM.gamma: 0.114334
    test 406 line 69 _ExactTM.scale: 0.999616
    test 407 line 69 _ExactTM.lat: 19.376880
    test 408 line 69 _ExactTM.lon: 0.344605
    test 409 line 70 _ExactTM.easting: 2380328.546851
    test 410 line 70 _ExactTM.northing: 8440109.872384
    test 411 line 70 _ExactTM.gamma: 55.076067
    test 412 line 70 _ExactTM.scale: 1.069658
    test 413 line 70 _ExactTM.lat: 65.075805
    test 414 line 70 _ExactTM.lon: 57.653438
    test 415 line 71 _ExactTM.easting: 582511.608826
    test 416 line 71 _ExactTM.northing: 8876047.217071
    test 417 line 71 _ExactTM.gamma: 27.133300
    test 418 line 71 _ExactTM.scale: 1.003749
    test 419 line 71 _ExactTM.lat: 78.691870
    test 420 line 71 _ExactTM.lon: 27.591736
    test 421 line 72 _ExactTM.easting: 899441.350477
    test 422 line 72 _ExactTM.northing: 4582046.430516
    test 423 line 72 _ExactTM.gamma: 7.031211
    test 424 line 72 _ExactTM.scale: 1.009573
    test 425 line 72 _ExactTM.lat: 40.893022
    test 426 line 72 _ExactTM.lon: 10.668804
    test 427 line 73 _ExactTM.easting: 5022485.124337
    test 428 line 73 _ExactTM.northing: 9741774.933721
    test 429 line 73 _ExactTM.gamma: 86.505947
    test 430 line 73 _ExactTM.scale: 1.323700
    test 431 line 73 _ExactTM.lat: 48.914279
    test 432 line 73 _ExactTM.lon: 87.359268
    test 433 line 74 _ExactTM.easting: 6701004.587204
    test 434 line 74 _ExactTM.northing: 2954368.258231
    test 435 line 74 _ExactTM.gamma: 21.560153
    test 436 line 74 _ExactTM.scale: 1.608554
    test 437 line 74 _ExactTM.lat: 16.208377
    test 438 line 74 _ExactTM.lon: 54.494282
    test 439 line 75 _ExactTM.easting: 454986.218897
    test 440 line 75 _ExactTM.northing: 4885087.887884
    test 441 line 75 _ExactTM.gamma: 3.945648
    test 442 line 75 _ExactTM.scale: 1.002147
    test 443 line 75 _ExactTM.lat: 43.977936
    test 444 line 75 _ExactTM.lon: 5.672541
    test 445 line 76 _ExactTM.easting: 8903956.140311
    test 446 line 76 _ExactTM.northing: 8470608.577482
    test 447 line 76 _ExactTM.gamma: 74.723116
    test 448 line 76 _ExactTM.scale: 2.131311
    test 449 line 76 _ExactTM.lat: 26.850861
    test 450 line 76 _ExactTM.lon: 82.834480
    test 451 line 77 _ExactTM.easting: 1547627.594741
    test 452 line 77 _ExactTM.northing: 6036584.538347
    test 453 line 77 _ExactTM.gamma: 18.407629
    test 454 line 77 _ExactTM.scale: 1.029132
    test 455 line 77 _ExactTM.lat: 52.234165
    test 456 line 77 _ExactTM.lon: 22.827655
    test 457 line 78 _ExactTM.easting: 5221488.778597
    test 458 line 78 _ExactTM.northing: 1762592.044392
    test 459 line 78 _ExactTM.gamma: 10.927880
    test 460 line 78 _ExactTM.scale: 1.356721
    test 461 line 78 _ExactTM.lat: 11.674646
    test 462 line 78 _ExactTM.lon: 43.500147
    test 463 line 79 _ExactTM.easting: 4880570.297161
    test 464 line 79 _ExactTM.northing: 3325433.988867
    test 465 line 79 _ExactTM.gamma: 20.469862
    test 466 line 79 _ExactTM.scale: 1.308476
    test 467 line 79 _ExactTM.lat: 22.492753
    test 468 line 79 _ExactTM.lon: 44.179153
    test 469 line 80 _ExactTM.easting: 23930680.082694
    test 470 line 80 _ExactTM.northing: 7491462.099038
    test 471 line 80 _ExactTM.gamma: 75.937628
    test 472 line 80 _ExactTM.scale: 15.556365
    test 473 line 80 _ExactTM.lat: 0.910999
    test 474 line 80 _ExactTM.lon: 88.548823
    test 475 line 81 _ExactTM.easting: 71519.450458
    test 476 line 81 _ExactTM.northing: 3654740.444852
    test 477 line 81 _ExactTM.gamma: 0.417448
    test 478 line 81 _ExactTM.scale: 0.999663
    test 479 line 81 _ExactTM.lat: 33.028802
    test 480 line 81 _ExactTM.lon: 0.765843
    test 481 line 82 _ExactTM.easting: 4152797.795220
    test 482 line 82 _ExactTM.northing: 7823098.502751
    test 483 line 82 _ExactTM.gamma: 58.238901
    test 484 line 82 _ExactTM.scale: 1.218052
    test 485 line 82 _ExactTM.lat: 50.649195
    test 486 line 82 _ExactTM.lon: 64.389076
    test 487 line 83 _ExactTM.easting: 2926725.707639
    test 488 line 83 _ExactTM.northing: 7904918.072844
    test 489 line 83 _ExactTM.gamma: 51.592748
    test 490 line 83 _ExactTM.scale: 1.106206
    test 491 line 83 _ExactTM.lat: 58.820640
    test 492 line 83 _ExactTM.lon: 55.841048
    test 493 line 84 _ExactTM.easting: 1325509.113869
    test 494 line 84 _ExactTM.northing: 9675214.948213
    test 495 line 84 _ExactTM.gamma: 76.116213
    test 496 line 84 _ExactTM.scale: 1.021136
    test 497 line 84 _ExactTM.lat: 77.865762
    test 498 line 84 _ExactTM.lon: 76.414618
    test 499 line 85 _ExactTM.easting: 3045296.448926
    test 500 line 85 _ExactTM.northing: 542153.443280
    test 501 line 85 _ExactTM.gamma: 2.185095
    test 502 line 85 _ExactTM.scale: 1.116664
    test 503 line 85 _ExactTM.lat: 4.389639
    test 504 line 85 _ExactTM.lon: 26.458976
    test 505 line 86 _ExactTM.easting: 11843870.887518
    test 506 line 86 _ExactTM.northing: 5912803.073343
    test 507 line 86 _ExactTM.gamma: 52.814259
    test 508 line 86 _ExactTM.scale: 3.267256
    test 509 line 86 _ExactTM.lat: 13.924448
    test 510 line 86 _ExactTM.lon: 79.017873
    test 511 line 87 _ExactTM.easting: 8891099.704936
    test 512 line 87 _ExactTM.northing: 162160.142227
    test 513 line 87 _ExactTM.gamma: 1.312094
    test 514 line 87 _ExactTM.scale: 2.157363
    test 515 line 87 _ExactTM.lat: 0.679713
    test 516 line 87 _ExactTM.lon: 62.036792
    test 517 line 88 _ExactTM.easting: 4784814.214449
    test 518 line 88 _ExactTM.northing: 2984497.432580
    test 519 line 88 _ExactTM.gamma: 17.946545
    test 520 line 88 _ExactTM.scale: 1.296116
    test 521 line 88 _ExactTM.lat: 20.478281
    test 522 line 88 _ExactTM.lon: 42.678234
    test 523 line 89 _ExactTM.easting: 1772074.682154
    test 524 line 89 _ExactTM.northing: 9491552.560143
    test 525 line 89 _ExactTM.gamma: 73.634830
    test 526 line 89 _ExactTM.scale: 1.038202
    test 527 line 89 _ExactTM.lat: 73.695703
    test 528 line 89 _ExactTM.lon: 74.259097
    test 529 line 90 _ExactTM.easting: 1907649.782106
    test 530 line 90 _ExactTM.northing: 6994232.429379
    test 531 line 90 _ExactTM.gamma: 29.718929
    test 532 line 90 _ExactTM.scale: 1.044503
    test 533 line 90 _ExactTM.lat: 58.569370
    test 534 line 90 _ExactTM.lon: 33.777549
    test 535 line 91 _ExactTM.easting: 2084423.818962
    test 536 line 91 _ExactTM.northing: 2211816.035619
    test 537 line 91 _ExactTM.gamma: 6.556448
    test 538 line 91 _ExactTM.scale: 1.053793
    test 539 line 91 _ExactTM.lat: 18.933881
    test 540 line 91 _ExactTM.lon: 19.492695
    test 541 line 92 _ExactTM.easting: 1064373.671729
    test 542 line 92 _ExactTM.northing: 7812482.547461
    test 543 line 92 _ExactTM.gamma: 24.874124
    test 544 line 92 _ExactTM.scale: 1.013490
    test 545 line 92 _ExactTM.lat: 68.317934
    test 546 line 92 _ExactTM.lon: 26.515687
    test 547 line 93 _ExactTM.easting: 4770385.479297
    test 548 line 93 _ExactTM.northing: 9734318.902980
    test 549 line 93 _ExactTM.gamma: 86.273119
    test 550 line 93 _ExactTM.scale: 1.290553
    test 551 line 93 _ExactTM.lat: 50.641941
    test 552 line 93 _ExactTM.lon: 87.111557
    test 553 line 94 _ExactTM.easting: 6398096.677297
    test 554 line 94 _ExactTM.northing: 4410894.752104
    test 555 line 94 _ExactTM.gamma: 32.558023
    test 556 line 94 _ExactTM.scale: 1.548004
    test 557 line 94 _ExactTM.lat: 24.411298
    test 558 line 94 _ExactTM.lon: 56.881823
    test 559 line 95 _ExactTM.easting: 3138623.300415
    test 560 line 95 _ExactTM.northing: 3082960.600798
    test 561 line 95 _ExactTM.gamma: 13.557672
    test 562 line 95 _ExactTM.scale: 1.123724
    test 563 line 95 _ExactTM.lat: 24.571871
    test 564 line 95 _ExactTM.lon: 30.073097
    test 565 line 96 _ExactTM.easting: 2748325.794651
    test 566 line 96 _ExactTM.northing: 4202811.912668
    test 567 line 96 _ExactTM.gamma: 17.578706
    test 568 line 96 _ExactTM.scale: 1.094102
    test 569 line 96 _ExactTM.lat: 34.202576
    test 570 line 96 _ExactTM.lon: 29.383166
    test 571 line 97 _ExactTM.easting: 6677830.630367
    test 572 line 97 _ExactTM.northing: 5350071.837395
    test 573 line 97 _ExactTM.gamma: 41.306641
    test 574 line 97 _ExactTM.scale: 1.599774
    test 575 line 97 _ExactTM.lat: 27.756285
    test 576 line 97 _ExactTM.lon: 61.881905
    test 577 line 98 _ExactTM.easting: 5941536.667431
    test 578 line 98 _ExactTM.northing: 3293112.175140
    test 579 line 98 _ExactTM.gamma: 22.752845
    test 580 line 98 _ExactTM.scale: 1.468473
    test 581 line 98 _ExactTM.lat: 19.742270
    test 582 line 98 _ExactTM.lon: 50.957821
    test 583 line 99 _ExactTM.easting: 3152481.792567
    test 584 line 99 _ExactTM.northing: 5903048.837978
    test 585 line 99 _ExactTM.gamma: 31.494606
    test 586 line 99 _ExactTM.scale: 1.124085
    test 587 line 99 _ExactTM.lat: 45.453582
    test 588 line 99 _ExactTM.lon: 40.659833
    test 589 line 100 _ExactTM.easting: 10460475.897730
    test 590 line 100 _ExactTM.northing: 2553463.624391
    test 591 line 100 _ExactTM.gamma: 21.965869
    test 592 line 100 _ExactTM.scale: 2.700296
    test 593 line 100 _ExactTM.lat: 8.322144
    test 594 line 100 _ExactTM.lon: 69.488157
    test 595 line 101 _ExactTM.easting: 1964010.778021
    test 596 line 101 _ExactTM.northing: 5634042.923056
    test 597 line 101 _ExactTM.gamma: 20.117800
    test 598 line 101 _ExactTM.scale: 1.047344
    test 599 line 101 _ExactTM.lat: 47.749831
    test 600 line 101 _ExactTM.lon: 26.322002
    test 601 line 102 _ExactTM.easting: 2065306.424934
    test 602 line 102 _ExactTM.northing: 2135008.468651
    test 603 line 102 _ExactTM.gamma: 6.258981
    test 604 line 102 _ExactTM.scale: 1.052800
    test 605 line 102 _ExactTM.lat: 18.297493
    test 606 line 102 _ExactTM.lon: 19.244669
    test 607 line 103 _ExactTM.easting: 5127738.132976
    test 608 line 103 _ExactTM.northing: 6793804.304411
    test 609 line 103 _ExactTM.gamma: 50.557915
    test 610 line 103 _ExactTM.scale: 1.339412
    test 611 line 103 _ExactTM.lat: 40.834541
    test 612 line 103 _ExactTM.lon: 61.650750
    test 613 line 104 _ExactTM.easting: 8385525.148166
    test 614 line 104 _ExactTM.northing: 6924932.344306
    test 615 line 104 _ExactTM.gamma: 59.087561
    test 616 line 104 _ExactTM.scale: 1.990364
    test 617 line 104 _ExactTM.lat: 26.273247
    test 618 line 104 _ExactTM.lon: 74.926694
    test 619 line 105 _ExactTM.easting: 2297510.791909
    test 620 line 105 _ExactTM.northing: 2805666.962834
    test 621 line 105 _ExactTM.gamma: 9.301553
    test 622 line 105 _ExactTM.scale: 1.065508
    test 623 line 105 _ExactTM.lat: 23.698347
    test 624 line 105 _ExactTM.lon: 22.155657
    test 625 line 106 _ExactTM.easting: 13749544.917635
    test 626 line 106 _ExactTM.northing: 8288728.384650
    test 627 line 106 _ExactTM.gamma: 75.033970
    test 628 line 106 _ExactTM.scale: 4.270588
    test 629 line 106 _ExactTM.lat: 12.364113
    test 630 line 106 _ExactTM.lon: 86.348578
    test 631 line 107 _ExactTM.easting: 317518.455546
    test 632 line 107 _ExactTM.northing: 1097517.583745
    test 633 line 107 _ExactTM.gamma: 0.499004
    test 634 line 107 _ExactTM.scale: 1.000848
    test 635 line 107 _ExactTM.lat: 9.916091
    test 636 line 107 _ExactTM.lon: 2.895277
    test 637 line 108 _ExactTM.easting: 3856035.184888
    test 638 line 108 _ExactTM.northing: 9141364.450290
    test 639 line 108 _ExactTM.gamma: 75.972763
    test 640 line 108 _ExactTM.scale: 1.186786
    test 641 line 108 _ExactTM.lat: 56.553876
    test 642 line 108 _ExactTM.lon: 78.215077
    test 643 line 109 _ExactTM.easting: 1457484.942823
    test 644 line 109 _ExactTM.northing: 9385297.101973
    test 645 line 109 _ExactTM.gamma: 66.784662
    test 646 line 109 _ExactTM.scale: 1.025660
    test 647 line 109 _ExactTM.lat: 75.957631
    test 648 line 109 _ExactTM.lon: 67.407383
    test 649 line 110 _ExactTM.easting: 1304934.901841
    test 650 line 110 _ExactTM.northing: 3604655.155715
    test 651 line 110 _ExactTM.gamma: 7.343989
    test 652 line 110 _ExactTM.scale: 1.020672
    test 653 line 110 _ExactTM.lat: 31.826531
    test 654 line 110 _ExactTM.lon: 13.731050
    test 655 line 111 _ExactTM.easting: 1399093.491792
    test 656 line 111 _ExactTM.northing: 8314607.120342
    test 657 line 111 _ExactTM.gamma: 38.630161
    test 658 line 111 _ExactTM.scale: 1.023625
    test 659 line 111 _ExactTM.lat: 70.542985
    test 660 line 111 _ExactTM.lon: 40.282055
    test 661 line 112 _ExactTM.easting: 356983.618540
    test 662 line 112 _ExactTM.northing: 4282309.048994
    test 663 line 112 _ExactTM.gamma: 2.561485
    test 664 line 112 _ExactTM.scale: 1.001170
    test 665 line 112 _ExactTM.lat: 38.617487
    test 666 line 112 _ExactTM.lon: 4.099838
    test 667 line 113 _ExactTM.easting: 9952911.325091
    test 668 line 113 _ExactTM.northing: 1510288.212229
    test 669 line 113 _ExactTM.gamma: 12.752154
    test 670 line 113 _ExactTM.scale: 2.511357
    test 671 line 113 _ExactTM.lat: 5.389447
    test 672 line 113 _ExactTM.lon: 66.729612
    test 673 line 114 _ExactTM.easting: 6367592.504007
    test 674 line 114 _ExactTM.northing: 1200437.077672
    test 675 line 114 _ExactTM.gamma: 8.338041
    test 676 line 114 _ExactTM.scale: 1.546210
    test 677 line 114 _ExactTM.lat: 6.995168
    test 678 line 114 _ExactTM.lon: 50.014763
    test 679 line 115 _ExactTM.easting: 4391263.676460
    test 680 line 115 _ExactTM.northing: 6325455.989408
    test 681 line 115 _ExactTM.gamma: 42.653541
    test 682 line 115 _ExactTM.scale: 1.245560
    test 683 line 115 _ExactTM.lat: 42.321894
    test 684 line 115 _ExactTM.lon: 53.784040
    test 685 line 116 _ExactTM.easting: 6209880.527527
    test 686 line 116 _ExactTM.northing: 2154754.449747
    test 687 line 116 _ExactTM.gamma: 14.919512
    test 688 line 116 _ExactTM.scale: 1.516560
    test 689 line 116 _ExactTM.lat: 12.698515
    test 690 line 116 _ExactTM.lon: 50.242047
    test 691 line 117 _ExactTM.easting: 1507053.688772
    test 692 line 117 _ExactTM.northing: 6261383.513280
    test 693 line 117 _ExactTM.gamma: 19.280373
    test 694 line 117 _ExactTM.scale: 1.027584
    test 695 line 117 _ExactTM.lat: 54.207636
    test 696 line 117 _ExactTM.lon: 23.325731
    test 697 line 118 _ExactTM.easting: 8332725.003777
    test 698 line 118 _ExactTM.northing: 3002712.329753
    test 699 line 118 _ExactTM.gamma: 24.059212
    test 700 line 118 _ExactTM.scale: 1.990450
    test 701 line 118 _ExactTM.lat: 13.224787
    test 702 line 118 _ExactTM.lon: 62.426698
    test 703 line 119 _ExactTM.easting: 3958910.085235
    test 704 line 119 _ExactTM.northing: 3462284.926102
    test 705 line 119 _ExactTM.gamma: 18.546398
    test 706 line 119 _ExactTM.scale: 1.199351
    test 707 line 119 _ExactTM.lat: 25.650282
    test 708 line 119 _ExactTM.lon: 37.710391
    test 709 line 120 _ExactTM.easting: 10452892.282083
    test 710 line 120 _ExactTM.northing: 8000059.605114
    test 711 line 120 _ExactTM.gamma: 71.075240
    test 712 line 120 _ExactTM.scale: 2.650111
    test 713 line 120 _ExactTM.lat: 20.684773
    test 714 line 120 _ExactTM.lon: 82.849734
    test 715 line 121 _ExactTM.easting: 496148.253731
    test 716 line 121 _ExactTM.northing: 6388503.365043
    test 717 line 121 _ExactTM.gamma: 6.970955
    test 718 line 121 _ExactTM.scale: 1.002620
    test 719 line 121 _ExactTM.lat: 57.367533
    test 720 line 121 _ExactTM.lon: 8.260866
    test 721 line 122 _ExactTM.easting: 7375792.085850
    test 722 line 122 _ExactTM.northing: 5544624.072155
    test 723 line 122 _ExactTM.gamma: 44.510851
    test 724 line 122 _ExactTM.scale: 1.745898
    test 725 line 122 _ExactTM.lat: 25.958757
    test 726 line 122 _ExactTM.lon: 65.760477
    test 727 line 123 _ExactTM.easting: 2826258.041979
    test 728 line 123 _ExactTM.northing: 5167759.816959
    test 729 line 123 _ExactTM.gamma: 23.783897
    test 730 line 123 _ExactTM.scale: 1.099415
    test 731 line 123 _ExactTM.lat: 41.395848
    test 732 line 123 _ExactTM.lon: 33.661790
    test 733 line 124 _ExactTM.easting: 3958563.378851
    test 734 line 124 _ExactTM.northing: 8499923.231243
    test 735 line 124 _ExactTM.gamma: 66.570945
    test 736 line 124 _ExactTM.scale: 1.197296
    test 737 line 124 _ExactTM.lat: 54.266617
    test 738 line 124 _ExactTM.lon: 70.602199
    test 739 line 125 _ExactTM.easting: 4408189.533462
    test 740 line 125 _ExactTM.northing: 8046312.003642
    test 741 line 125 _ExactTM.gamma: 62.216959
    test 742 line 125 _ExactTM.scale: 1.246750
    test 743 line 125 _ExactTM.lat: 49.840393
    test 744 line 125 _ExactTM.lon: 68.036728
    test 745 line 126 _ExactTM.easting: 3629225.627512
    test 746 line 126 _ExactTM.northing: 6371258.454645
    test 747 line 126 _ExactTM.gamma: 38.881675
    test 748 line 126 _ExactTM.scale: 1.165511
    test 749 line 126 _ExactTM.lat: 46.306035
    test 750 line 126 _ExactTM.lon: 48.085828
    test 751 line 127 _ExactTM.easting: 602838.450710
    test 752 line 127 _ExactTM.northing: 4851370.637205
    test 753 line 127 _ExactTM.gamma: 5.160395
    test 754 line 127 _ExactTM.scale: 1.004073
    test 755 line 127 _ExactTM.lat: 43.570988
    test 756 line 127 _ExactTM.lon: 7.464494
    test 757 line 128 _ExactTM.easting: 764616.665051
    test 758 line 128 _ExactTM.northing: 2164299.337945
    test 759 line 128 _ExactTM.gamma: 2.429300
    test 760 line 128 _ExactTM.scale: 1.006835
    test 761 line 128 _ExactTM.lat: 19.427290
    test 762 line 128 _ExactTM.lon: 7.268247
    test 763 line 129 _ExactTM.easting: 5048953.021931
    test 764 line 129 _ExactTM.northing: 1885974.057398
    test 765 line 129 _ExactTM.gamma: 11.459804
    test 766 line 129 _ExactTM.scale: 1.332207
    test 767 line 129 _ExactTM.lat: 12.713794
    test 768 line 129 _ExactTM.lon: 42.507018
    test 769 line 130 _ExactTM.easting: 2293996.601155
    test 770 line 130 _ExactTM.northing: 2392408.644221
    test 771 line 130 _ExactTM.gamma: 7.791838
    test 772 line 130 _ExactTM.scale: 1.065348
    test 773 line 130 _ExactTM.lat: 20.238782
    test 774 line 130 _ExactTM.lon: 21.566068
    test 775 line 131 _ExactTM.easting: 1530603.839418
    test 776 line 131 _ExactTM.northing: 7287841.459898
    test 777 line 131 _ExactTM.gamma: 27.502921
    test 778 line 131 _ExactTM.scale: 1.028416
    test 779 line 131 _ExactTM.lat: 62.367847
    test 780 line 131 _ExactTM.lon: 30.438849
    test 781 line 132 _ExactTM.easting: 2660000.093152
    test 782 line 132 _ExactTM.northing: 5161982.213248
    test 783 line 132 _ExactTM.gamma: 22.629836
    test 784 line 132 _ExactTM.scale: 1.087851
    test 785 line 132 _ExactTM.lat: 41.891569
    test 786 line 132 _ExactTM.lon: 31.959547
    test 787 line 133 _ExactTM.easting: 5037478.329414
    test 788 line 133 _ExactTM.northing: 8768172.379908
    test 789 line 133 _ExactTM.gamma: 73.511182
    test 790 line 133 _ExactTM.scale: 1.325919
    test 791 line 133 _ExactTM.lat: 47.664248
    test 792 line 133 _ExactTM.lon: 77.630062
    test 793 line 134 _ExactTM.easting: 2289650.957799
    test 794 line 134 _ExactTM.northing: 8784328.593607
    test 795 line 134 _ExactTM.gamma: 60.786067
    test 796 line 134 _ExactTM.scale: 1.064346
    test 797 line 134 _ExactTM.lat: 67.259559
    test 798 line 134 _ExactTM.lon: 62.715293
    test 799 line 135 _ExactTM.easting: 647913.889744
    test 800 line 135 _ExactTM.northing: 6742382.228217
    test 801 line 135 _ExactTM.gamma: 10.252667
    test 802 line 135 _ExactTM.scale: 1.004748
    test 803 line 135 _ExactTM.lat: 60.295381
    test 804 line 135 _ExactTM.lon: 11.763097
    test 805 line 136 _ExactTM.easting: 1118372.698566
    test 806 line 136 _ExactTM.northing: 9040627.942263
    test 807 line 136 _ExactTM.gamma: 48.936803
    test 808 line 136 _ExactTM.scale: 1.014920
    test 809 line 136 _ExactTM.lat: 76.878914
    test 810 line 136 _ExactTM.lon: 49.685773
    test 811 line 137 _ExactTM.easting: 440696.510070
    test 812 line 137 _ExactTM.northing: 5500355.826297
    test 813 line 137 _ExactTM.gamma: 4.636104
    test 814 line 137 _ExactTM.scale: 1.001986
    test 815 line 137 _ExactTM.lat: 49.495349
    test 816 line 137 _ExactTM.lon: 6.087551
    test 817 line 138 _ExactTM.easting: 601728.149727
    test 818 line 138 _ExactTM.northing: 9095352.048149
    test 819 line 138 _ExactTM.gamma: 33.435771
    test 820 line 138 _ExactTM.scale: 1.004027
    test 821 line 138 _ExactTM.lat: 80.297265
    test 822 line 138 _ExactTM.lon: 33.816372
    test 823 line 139 _ExactTM.easting: 3481444.777827
    test 824 line 139 _ExactTM.northing: 291665.708749
    test 825 line 139 _ExactTM.gamma: 1.314726
    test 826 line 139 _ExactTM.scale: 1.153534
    test 827 line 139 _ExactTM.lat: 2.286437
    test 828 line 139 _ExactTM.lon: 29.855149
    test 829 line 140 _ExactTM.easting: 3515304.901524
    test 830 line 140 _ExactTM.northing: 1443981.882918
    test 831 line 140 _ExactTM.gamma: 6.641638
    test 832 line 140 _ExactTM.scale: 1.156509
    test 833 line 140 _ExactTM.lat: 11.264457
    test 834 line 140 _ExactTM.lon: 30.743907
    test 835 line 141 _ExactTM.easting: 160012.186959
    test 836 line 141 _ExactTM.northing: 3922609.253231
    test 837 line 141 _ExactTM.gamma: 1.022225
    test 838 line 141 _ExactTM.scale: 0.999916
    test 839 line 141 _ExactTM.lat: 35.434073
    test 840 line 141 _ExactTM.lon: 1.762795
    test 841 line 142 _ExactTM.easting: 4163744.245622
    test 842 line 142 _ExactTM.northing: 936884.674804
    test 843 line 142 _ExactTM.gamma: 4.892559
    test 844 line 142 _ExactTM.scale: 1.222164
    test 845 line 142 _ExactTM.lat: 6.923695
    test 846 line 142 _ExactTM.lon: 35.289456
    test 847 line 143 _ExactTM.easting: 6155200.017926
    test 848 line 143 _ExactTM.northing: 6926306.628390
    test 849 line 143 _ExactTM.gamma: 55.103258
    test 850 line 143 _ExactTM.scale: 1.500556
    test 851 line 143 _ExactTM.lat: 36.129672
    test 852 line 143 _ExactTM.lon: 67.533176
    test 853 line 144 _ExactTM.easting: 16263383.285440
    test 854 line 144 _ExactTM.northing: 3591296.731341
    test 855 line 144 _ExactTM.gamma: 36.040254
    test 856 line 144 _ExactTM.scale: 6.589288
    test 857 line 144 _ExactTM.lat: 4.406529
    test 858 line 144 _ExactTM.lon: 81.965734
    test 859 line 145 _ExactTM.easting: 14220995.515398
    test 860 line 145 _ExactTM.northing: 5100587.457503
    test 861 line 145 _ExactTM.gamma: 47.314258
    test 862 line 145 _ExactTM.scale: 4.693202
    test 863 line 145 _ExactTM.lat: 8.474589
    test 864 line 145 _ExactTM.lon: 81.129945
    test 865 line 146 _ExactTM.easting: 3173034.802372
    test 866 line 146 _ExactTM.northing: 7263421.942957
    test 867 line 146 _ExactTM.gamma: 45.215808
    test 868 line 146 _ExactTM.scale: 1.125410
    test 869 line 146 _ExactTM.lat: 53.907276
    test 870 line 146 _ExactTM.lon: 51.252904
    test 871 line 147 _ExactTM.easting: 10253274.092204
    test 872 line 147 _ExactTM.northing: 8867574.299792
    test 873 line 147 _ExactTM.gamma: 79.198250
    test 874 line 147 _ExactTM.scale: 2.572372
    test 875 line 147 _ExactTM.lat: 22.120545
    test 876 line 147 _ExactTM.lon: 85.756782
    test 877 line 148 _ExactTM.easting: 2415561.483230
    test 878 line 148 _ExactTM.northing: 8813225.217097
    test 879 line 148 _ExactTM.gamma: 62.548978
    test 880 line 148 _ExactTM.scale: 1.071748
    test 881 line 148 _ExactTM.lat: 66.444100
    test 882 line 148 _ExactTM.lon: 64.532960
    test 883 line 149 _ExactTM.easting: 9589179.293295
    test 884 line 149 _ExactTM.northing: 1777680.784143
    test 885 line 149 _ExactTM.gamma: 14.838483
    test 886 line 149 _ExactTM.scale: 2.380716
    test 887 line 149 _ExactTM.lat: 6.670965
    test 888 line 149 _ExactTM.lon: 65.660408
    test 889 line 150 _ExactTM.easting: 727939.438391
    test 890 line 150 _ExactTM.northing: 3684363.236810
    test 891 line 150 _ExactTM.gamma: 4.266227
    test 892 line 150 _ExactTM.scale: 1.006140
    test 893 line 150 _ExactTM.lat: 33.054057
    test 894 line 150 _ExactTM.lon: 7.787458
    test 895 line 151 _ExactTM.easting: 1250765.991085
    test 896 line 151 _ExactTM.northing: 792869.242719
    test 897 line 151 _ExactTM.gamma: 1.396497
    test 898 line 151 _ExactTM.scale: 1.019026
    test 899 line 151 _ExactTM.lat: 7.035525
    test 900 line 151 _ExactTM.lon: 11.253707
    test 901 line 152 _ExactTM.easting: 710421.705887
    test 902 line 152 _ExactTM.northing: 5019406.075928
    test 903 line 152 _ExactTM.gamma: 6.393949
    test 904 line 152 _ExactTM.scale: 1.005812
    test 905 line 152 _ExactTM.lat: 44.971340
    test 906 line 152 _ExactTM.lon: 9.009304
    test 907 line 153 _ExactTM.easting: 4600995.074643
    test 908 line 153 _ExactTM.northing: 4505712.084593
    test 909 line 153 _ExactTM.gamma: 27.997458
    test 910 line 153 _ExactTM.scale: 1.271841
    test 911 line 153 _ExactTM.lat: 30.821397
    test 912 line 153 _ExactTM.lon: 45.970577
    test 913 line 154 _ExactTM.easting: 557642.627782
    test 914 line 154 _ExactTM.northing: 7006911.251644
    test 915 line 154 _ExactTM.gamma: 9.769903
    test 916 line 154 _ExactTM.scale: 1.003411
    test 917 line 154 _ExactTM.lat: 62.763886
    test 918 line 154 _ExactTM.lon: 10.960144
    test 919 line 155 _ExactTM.easting: 4635062.294291
    test 920 line 155 _ExactTM.northing: 2702556.153311
    test 921 line 155 _ExactTM.gamma: 15.779547
    test 922 line 155 _ExactTM.scale: 1.277178
    test 923 line 155 _ExactTM.lat: 18.888611
    test 924 line 155 _ExactTM.lon: 41.009871
    test 925 line 156 _ExactTM.easting: 14554962.255919
    test 926 line 156 _ExactTM.northing: 4716639.908572
    test 927 line 156 _ExactTM.gamma: 44.192751
    test 928 line 156 _ExactTM.scale: 4.960020
    test 929 line 156 _ExactTM.lat: 7.524119
    test 930 line 156 _ExactTM.lon: 81.050715
    test 931 line 157 _ExactTM.easting: 882126.661736
    test 932 line 157 _ExactTM.northing: 7947612.369506
    test 933 line 157 _ExactTM.gamma: 22.429487
    test 934 line 157 _ExactTM.scale: 1.009132
    test 935 line 157 _ExactTM.lat: 70.063902
    test 936 line 157 _ExactTM.lon: 23.705255
    test 937 line 158 _ExactTM.easting: 20262021.645983
    test 938 line 158 _ExactTM.northing: 8113827.820796
    test 939 line 158 _ExactTM.gamma: 76.936057
    test 940 line 158 _ExactTM.scale: 10.349092
    test 941 line 158 _ExactTM.lat: 3.556526
    test 942 line 158 _ExactTM.lon: 88.363529
    test 943 line 159 _ExactTM.easting: 6500508.399850
    test 944 line 159 _ExactTM.northing: 6956476.342368
    test 945 line 159 _ExactTM.gamma: 56.237116
    test 946 line 159 _ExactTM.scale: 1.563162
    test 947 line 159 _ExactTM.lat: 34.551257
    test 948 line 159 _ExactTM.lon: 69.111091
    test 949 line 160 _ExactTM.easting: 3884036.641314
    test 950 line 160 _ExactTM.northing: 6890167.411733
    test 951 line 160 _ExactTM.gamma: 45.760130
    test 952 line 160 _ExactTM.scale: 1.190167
    test 953 line 160 _ExactTM.lat: 47.929051
    test 954 line 160 _ExactTM.lon: 54.103418
    test 955 line 161 _ExactTM.easting: 217855.546078
    test 956 line 161 _ExactTM.northing: 6184108.122568
    test 957 line 161 _ExactTM.gamma: 2.870993
    test 958 line 161 _ExactTM.scale: 1.000182
    test 959 line 161 _ExactTM.lat: 55.753536
    test 960 line 161 _ExactTM.lon: 3.471798
    test 961 line 162 _ExactTM.easting: 11384139.290402
    test 962 line 162 _ExactTM.northing: 8893889.949556
    test 963 line 162 _ExactTM.gamma: 79.774854
    test 964 line 162 _ExactTM.scale: 3.024672
    test 965 line 162 _ExactTM.lat: 18.530847
    test 966 line 162 _ExactTM.lon: 86.555312
    test 967 line 163 _ExactTM.easting: 3469855.989805
    test 968 line 163 _ExactTM.northing: 7723193.799228
    test 969 line 163 _ExactTM.gamma: 53.114700
    test 970 line 163 _ExactTM.scale: 1.150540
    test 971 line 163 _ExactTM.lat: 54.510125
    test 972 line 163 _ExactTM.lon: 58.556056
    test 973 line 164 _ExactTM.easting: 5926165.994939
    test 974 line 164 _ExactTM.northing: 9385463.732747
    test 975 line 164 _ExactTM.gamma: 82.506981
    test 976 line 164 _ExactTM.scale: 1.459758
    test 977 line 164 _ExactTM.lat: 42.864162
    test 978 line 164 _ExactTM.lon: 84.866326
    test 979 line 165 _ExactTM.easting: 5798639.662224
    test 980 line 165 _ExactTM.northing: 5305387.640916
    test 981 line 165 _ExactTM.gamma: 38.617257
    test 982 line 165 _ExactTM.scale: 1.442263
    test 983 line 165 _ExactTM.lat: 30.911943
    test 984 line 165 _ExactTM.lon: 57.114102
    test 985 line 166 _ExactTM.easting: 9464.934388
    test 986 line 166 _ExactTM.northing: 6489121.624944
    test 987 line 166 _ExactTM.gamma: 0.138696
    test 988 line 166 _ExactTM.scale: 0.999601
    test 989 line 166 _ExactTM.lat: 58.542493
    test 990 line 166 _ExactTM.lon: 0.162593
    test 991 line 167 _ExactTM.easting: 12575834.275614
    test 992 line 167 _ExactTM.northing: 8356610.895486
    test 993 line 167 _ExactTM.gamma: 75.235223
    test 994 line 167 _ExactTM.scale: 3.599442
    test 995 line 167 _ExactTM.lat: 15.022689
    test 996 line 167 _ExactTM.lon: 85.792615
    test 997 line 168 _ExactTM.easting: 2719653.543469
    test 998 line 168 _ExactTM.northing: 9362389.163495
    test 999 line 168 _ExactTM.gamma: 76.049670
    test 1000 line 168 _ExactTM.scale: 1.091315
    test 1001 line 168 _ExactTM.lat: 65.692275
    test 1002 line 168 _ExactTM.lon: 77.241377
    test 1003 line 169 _ExactTM.easting: 4845341.924698
    test 1004 line 169 _ExactTM.northing: 8710522.326901
    test 1005 line 169 _ExactTM.gamma: 72.320942
    test 1006 line 169 _ExactTM.scale: 1.300382
    test 1007 line 169 _ExactTM.lat: 48.806211
    test 1008 line 169 _ExactTM.lon: 76.486365
    test 1009 line 170 _ExactTM.easting: 3935261.522763
    test 1010 line 170 _ExactTM.northing: 9454271.649062
    test 1011 line 170 _ExactTM.gamma: 81.162334
    test 1012 line 170 _ExactTM.scale: 1.194767
    test 1013 line 170 _ExactTM.lat: 56.436025
    test 1014 line 170 _ExactTM.lon: 82.611568
    test 1015 line 171 _ExactTM.easting: 7074299.823000
    test 1016 line 171 _ExactTM.northing: 1648736.065055
    test 1017 line 171 _ExactTM.gamma: 12.145925
    test 1018 line 171 _ExactTM.scale: 1.687551
    test 1019 line 171 _ExactTM.lat: 8.766053
    test 1020 line 171 _ExactTM.lon: 54.367539
    test 1021 line 172 _ExactTM.easting: 3689072.579308
    test 1022 line 172 _ExactTM.northing: 2230802.665211
    test 1023 line 172 _ExactTM.gamma: 10.856248
    test 1024 line 172 _ExactTM.scale: 1.172689
    test 1025 line 172 _ExactTM.lat: 17.095495
    test 1026 line 172 _ExactTM.lon: 33.059128
    test 1027 line 173 _ExactTM.easting: 8102565.885587
    test 1028 line 173 _ExactTM.northing: 5167396.617580
    test 1029 line 173 _ExactTM.gamma: 42.324886
    test 1030 line 173 _ExactTM.scale: 1.921927
    test 1031 line 173 _ExactTM.lat: 22.142861
    test 1032 line 173 _ExactTM.lon: 67.200684
    test 1033 line 174 _ExactTM.easting: 8181271.353564
    test 1034 line 174 _ExactTM.northing: 4425436.547185
    test 1035 line 174 _ExactTM.gamma: 35.900845
    test 1036 line 174 _ExactTM.scale: 1.945017
    test 1037 line 174 _ExactTM.lat: 19.222623
    test 1038 line 174 _ExactTM.lon: 65.180785
    test 1039 line 175 _ExactTM.easting: 767067.394003
    test 1040 line 175 _ExactTM.northing: 3701745.857296
    test 1041 line 175 _ExactTM.gamma: 4.519201
    test 1042 line 175 _ExactTM.scale: 1.006863
    test 1043 line 175 _ExactTM.lat: 33.182474
    test 1044 line 175 _ExactTM.lon: 8.216952
    test 1045 line 176 _ExactTM.easting: 6688114.168572
    test 1046 line 176 _ExactTM.northing: 2052857.299639
    test 1047 line 176 _ExactTM.gamma: 14.766191
    test 1048 line 176 _ExactTM.scale: 1.607200
    test 1049 line 176 _ExactTM.lat: 11.417963
    test 1050 line 176 _ExactTM.lon: 52.808691
    test 1051 line 177 _ExactTM.easting: 5608408.773761
    test 1052 line 177 _ExactTM.northing: 3859055.659110
    test 1053 line 177 _ExactTM.gamma: 26.244151
    test 1054 line 177 _ExactTM.scale: 1.413463
    test 1055 line 177 _ExactTM.lat: 23.836688
    test 1056 line 177 _ExactTM.lon: 50.500180
    test 1057 line 178 _ExactTM.easting: 3836942.765275
    test 1058 line 178 _ExactTM.northing: 6415467.634326
    test 1059 line 178 _ExactTM.gamma: 40.575885
    test 1060 line 178 _ExactTM.scale: 1.185615
    test 1061 line 178 _ExactTM.lat: 45.550020
    test 1062 line 178 _ExactTM.lon: 50.148036
    test 1063 line 179 _ExactTM.easting: 1298730.366025
    test 1064 line 179 _ExactTM.northing: 6021453.000792
    test 1065 line 179 _ExactTM.gamma: 15.613320
    test 1066 line 179 _ExactTM.scale: 1.020367
    test 1067 line 179 _ExactTM.lat: 52.746079
    test 1068 line 179 _ExactTM.lon: 19.343926
    test 1069 line 180 _ExactTM.easting: 416934.289208
    test 1070 line 180 _ExactTM.northing: 7295683.451705
    test 1071 line 180 _ExactTM.gamma: 8.238232
    test 1072 line 180 _ExactTM.scale: 1.001729
    test 1073 line 180 _ExactTM.lat: 65.513348
    test 1074 line 180 _ExactTM.lon: 9.039529
    test 1075 line 181 _ExactTM.easting: 4336076.850889
    test 1076 line 181 _ExactTM.northing: 7617975.722779
    test 1077 line 181 _ExactTM.gamma: 56.537088
    test 1078 line 181 _ExactTM.scale: 1.238582
    test 1079 line 181 _ExactTM.lat: 48.709795
    test 1080 line 181 _ExactTM.lon: 63.554005
    test 1081 line 182 _ExactTM.easting: 168047.336980
    test 1082 line 182 _ExactTM.northing: 2185000.046530
    test 1083 line 182 _ExactTM.gamma: 0.542187
    test 1084 line 182 _ExactTM.scale: 0.999949
    test 1085 line 182 _ExactTM.lat: 19.753509
    test 1086 line 182 _ExactTM.lon: 1.603846
    test 1087 line 183 _ExactTM.easting: 8276281.328790
    test 1088 line 183 _ExactTM.northing: 263444.350545
    test 1089 line 183 _ExactTM.gamma: 2.071435
    test 1090 line 183 _ExactTM.scale: 1.980314
    test 1091 line 183 _ExactTM.lat: 1.202816
    test 1092 line 183 _ExactTM.lon: 59.377276
    test 1093 line 184 _ExactTM.easting: 4772573.810710
    test 1094 line 184 _ExactTM.northing: 6765710.336002
    test 1095 line 184 _ExactTM.gamma: 48.857561
    test 1096 line 184 _ExactTM.scale: 1.291911
    test 1097 line 184 _ExactTM.lat: 42.564975
    test 1098 line 184 _ExactTM.lon: 59.356947
    test 1099 line 185 _ExactTM.easting: 5427755.074639
    test 1100 line 185 _ExactTM.northing: 1556055.820924
    test 1101 line 185 _ExactTM.gamma: 9.862178
    test 1102 line 185 _ExactTM.scale: 1.387394
    test 1103 line 185 _ExactTM.lat: 10.090572
    test 1104 line 185 _ExactTM.lon: 44.604132
    test 1105 line 186 _ExactTM.easting: 11588458.616041
    test 1106 line 186 _ExactTM.northing: 5707993.922613
    test 1107 line 186 _ExactTM.gamma: 50.784827
    test 1108 line 186 _ExactTM.scale: 3.149567
    test 1109 line 186 _ExactTM.lat: 14.133028
    test 1110 line 186 _ExactTM.lon: 78.097533
    test 1111 line 187 _ExactTM.easting: 7152433.802688
    test 1112 line 187 _ExactTM.northing: 761390.695844
    test 1113 line 187 _ExactTM.gamma: 5.607350
    test 1114 line 187 _ExactTM.scale: 1.705261
    test 1115 line 187 _ExactTM.lat: 4.031123
    test 1116 line 187 _ExactTM.lon: 54.048782
    test 1117 line 188 _ExactTM.easting: 3105651.390901
    test 1118 line 188 _ExactTM.northing: 9426026.169064
    test 1119 line 188 _ExactTM.gamma: 78.750206
    test 1120 line 188 _ExactTM.scale: 1.119737
    test 1121 line 188 _ExactTM.lat: 62.746603
    test 1122 line 188 _ExactTM.lon: 79.968641
    test 1123 line 189 _ExactTM.easting: 2959009.639022
    test 1124 line 189 _ExactTM.northing: 8339242.269282
    test 1125 line 189 _ExactTM.gamma: 58.460865
    test 1126 line 189 _ExactTM.scale: 1.108554
    test 1127 line 189 _ExactTM.lat: 60.626429
    test 1128 line 189 _ExactTM.lon: 61.851551
    test 1129 line 190 _ExactTM.easting: 8640472.267145
    test 1130 line 190 _ExactTM.northing: 6230320.417931
    test 1131 line 190 _ExactTM.gamma: 52.816810
    test 1132 line 190 _ExactTM.scale: 2.062973
    test 1133 line 190 _ExactTM.lat: 23.600626
    test 1134 line 190 _ExactTM.lon: 72.811634
    test 1135 line 191 _ExactTM.easting: 811352.108932
    test 1136 line 191 _ExactTM.northing: 9816129.813481
    test 1137 line 191 _ExactTM.gamma: 77.299184
    test 1138 line 191 _ExactTM.scale: 1.007651
    test 1139 line 191 _ExactTM.lat: 82.572236
    test 1140 line 191 _ExactTM.lon: 77.402323
    test 1141 line 192 _ExactTM.easting: 6521874.973458
    test 1142 line 192 _ExactTM.northing: 1053612.479744
    test 1143 line 192 _ExactTM.gamma: 7.407328
    test 1144 line 192 _ExactTM.scale: 1.575529
    test 1145 line 192 _ExactTM.lat: 6.030051
    test 1146 line 192 _ExactTM.lon: 50.783505
    test 1147 line 193 _ExactTM.easting: 3477983.997875
    test 1148 line 193 _ExactTM.northing: 5651613.325947
    test 1149 line 193 _ExactTM.gamma: 31.530673
    test 1150 line 193 _ExactTM.scale: 1.151875
    test 1151 line 193 _ExactTM.lat: 42.411523
    test 1152 line 193 _ExactTM.lon: 42.258009
    test 1153 line 194 _ExactTM.easting: 629892.822243
    test 1154 line 194 _ExactTM.northing: 3283914.910451
    test 1155 line 194 _ExactTM.gamma: 3.210482
    test 1156 line 194 _ExactTM.scale: 1.004499
    test 1157 line 194 _ExactTM.lat: 29.526120
    test 1158 line 194 _ExactTM.lon: 6.493069
    test 1159 line 195 _ExactTM.easting: 3381879.687227
    test 1160 line 195 _ExactTM.northing: 5103629.325665
    test 1161 line 195 _ExactTM.gamma: 26.748108
    test 1162 line 195 _ExactTM.scale: 1.143559
    test 1163 line 195 _ExactTM.lat: 39.021853
    test 1164 line 195 _ExactTM.lon: 38.641779
    test 1165 line 196 _ExactTM.easting: 2815986.534177
    test 1166 line 196 _ExactTM.northing: 9387029.120718
    test 1167 line 196 _ExactTM.gamma: 76.967262
    test 1168 line 196 _ExactTM.scale: 1.098032
    test 1169 line 196 _ExactTM.lat: 64.971850
    test 1170 line 196 _ExactTM.lon: 78.151893
    test 1171 line 197 _ExactTM.easting: 3398195.889603
    test 1172 line 197 _ExactTM.northing: 9138936.031490
    test 1173 line 197 _ExactTM.gamma: 74.477499
    test 1174 line 197 _ExactTM.scale: 1.144009
    test 1175 line 197 _ExactTM.lat: 59.961819
    test 1176 line 197 _ExactTM.lon: 76.473422
    test 1177 line 198 _ExactTM.easting: 2421734.754637
    test 1178 line 198 _ExactTM.northing: 5002372.094991
    test 1179 line 198 _ExactTM.gamma: 20.017082
    test 1180 line 198 _ExactTM.scale: 1.072592
    test 1181 line 198 _ExactTM.lat: 41.374040
    test 1182 line 198 _ExactTM.lon: 28.848343
    test 1183 line 199 _ExactTM.easting: 2360869.895525
    test 1184 line 199 _ExactTM.northing: 9553298.449536
    test 1185 line 199 _ExactTM.gamma: 78.848205
    test 1186 line 199 _ExactTM.scale: 1.068453
    test 1187 line 199 _ExactTM.lat: 68.946087
    test 1188 line 199 _ExactTM.lon: 79.574523
    test 1189 line 200 _ExactTM.easting: 1196539.972194
    test 1190 line 200 _ExactTM.northing: 9861920.836230
    test 1191 line 200 _ExactTM.gamma: 83.437668
    test 1192 line 200 _ExactTM.scale: 1.017137
    test 1193 line 200 _ExactTM.lat: 79.275096
    test 1194 line 200 _ExactTM.lon: 83.551272
    test 1195 line 201 _ExactTM.easting: 1327758.704795
    test 1196 line 201 _ExactTM.northing: 2375509.241683
    test 1197 line 201 _ExactTM.gamma: 4.617572
    test 1198 line 201 _ExactTM.scale: 1.021465
    test 1199 line 201 _ExactTM.lat: 21.000252
    test 1200 line 201 _ExactTM.lon: 12.697444
    test 1201 line 202 _ExactTM.easting: 2070860.327644
    test 1202 line 202 _ExactTM.northing: 8604500.719581
    test 1203 line 202 _ExactTM.gamma: 54.722761
    test 1204 line 202 _ExactTM.scale: 1.052469
    test 1205 line 202 _ExactTM.lat: 68.015227
    test 1206 line 202 _ExactTM.lon: 56.732419
    test 1207 line 203 _ExactTM.easting: 6564776.654864
    test 1208 line 203 _ExactTM.northing: 8171207.177379
    test 1209 line 203 _ExactTM.gamma: 69.237523
    test 1210 line 203 _ExactTM.scale: 1.573894
    test 1211 line 203 _ExactTM.lat: 37.423675
    test 1212 line 203 _ExactTM.lon: 76.947359
    test 1213 line 204 _ExactTM.easting: 592653.553821
    test 1214 line 204 _ExactTM.northing: 6125529.810052
    test 1215 line 204 _ExactTM.gamma: 7.600785
    test 1216 line 204 _ExactTM.scale: 1.003912
    test 1217 line 204 _ExactTM.lat: 54.922707
    test 1218 line 204 _ExactTM.lon: 9.260818
    test 1219 line 205 _ExactTM.easting: 693459.671821
    test 1220 line 205 _ExactTM.northing: 6943779.991032
    test 1221 line 205 _ExactTM.gamma: 11.787587
    test 1222 line 205 _ExactTM.scale: 1.005496
    test 1223 line 205 _ExactTM.lat: 61.982810
    test 1224 line 205 _ExactTM.lon: 13.299659
    test 1225 line 206 _ExactTM.easting: 1838956.187625
    test 1226 line 206 _ExactTM.northing: 3511959.612381
    test 1227 line 206 _ExactTM.gamma: 9.844313
    test 1228 line 206 _ExactTM.scale: 1.041603
    test 1229 line 206 _ExactTM.lat: 30.324214
    test 1230 line 206 _ExactTM.lon: 18.959769
    test 1231 line 207 _ExactTM.easting: 4460690.884597
    test 1232 line 207 _ExactTM.northing: 5541873.235403
    test 1233 line 207 _ExactTM.gamma: 35.768613
    test 1234 line 207 _ExactTM.scale: 1.254179
    test 1235 line 207 _ExactTM.lat: 37.629667
    test 1236 line 207 _ExactTM.lon: 49.649131
    test 1237 line 208 _ExactTM.easting: 2311168.998941
    test 1238 line 208 _ExactTM.northing: 9480561.869119
    test 1239 line 208 _ExactTM.gamma: 76.828257
    test 1240 line 208 _ExactTM.scale: 1.065556
    test 1241 line 208 _ExactTM.lat: 69.225574
    test 1242 line 208 _ExactTM.lon: 77.656135
    test 1243 line 209 _ExactTM.easting: 4111775.114451
    test 1244 line 209 _ExactTM.northing: 6509014.348792
    test 1245 line 209 _ExactTM.gamma: 43.052130
    test 1246 line 209 _ExactTM.scale: 1.214125
    test 1247 line 209 _ExactTM.lat: 44.698478
    test 1248 line 209 _ExactTM.lon: 52.979304
    test 1249 line 210 _ExactTM.easting: 75358.261962
    test 1250 line 210 _ExactTM.northing: 7711258.662251
    test 1251 line 210 _ExactTM.gamma: 1.806297
    test 1252 line 210 _ExactTM.scale: 0.999669
    test 1253 line 210 _ExactTM.lat: 69.499594
    test 1254 line 210 _ExactTM.lon: 1.928336
    test 1255 line 211 _ExactTM.easting: 8781885.229116
    test 1256 line 211 _ExactTM.northing: 9184776.452211
    test 1257 line 211 _ExactTM.gamma: 81.795539
    test 1258 line 211 _ExactTM.scale: 2.094908
    test 1259 line 211 _ExactTM.lat: 27.981364
    test 1260 line 211 _ExactTM.lon: 86.061113
    test 1261 line 212 _ExactTM.easting: 954378.415174
    test 1262 line 212 _ExactTM.northing: 7449110.669807
    test 1263 line 212 _ExactTM.gamma: 19.380657
    test 1264 line 212 _ExactTM.scale: 1.010768
    test 1265 line 212 _ExactTM.lat: 65.699839
    test 1266 line 212 _ExactTM.lon: 21.104725
    test 1267 line 213 _ExactTM.easting: 720971.793706
    test 1268 line 213 _ExactTM.northing: 5265195.121555
    test 1269 line 213 _ExactTM.gamma: 7.002995
    test 1270 line 213 _ExactTM.scale: 1.005995
    test 1271 line 213 _ExactTM.lat: 47.143648
    test 1272 line 213 _ExactTM.lon: 9.512189
    test 1273 line 214 _ExactTM.easting: 561561.493937
    test 1274 line 214 _ExactTM.northing: 989910.236221
    test 1275 line 214 _ExactTM.gamma: 0.793118
    test 1276 line 214 _ExactTM.scale: 1.003505
    test 1277 line 214 _ExactTM.lat: 8.920167
    test 1278 line 214 _ExactTM.lon: 5.101513
    test 1279 line 215 _ExactTM.easting: 3446829.634468
    test 1280 line 215 _ExactTM.northing: 9232868.155664
    test 1281 line 215 _ExactTM.gamma: 76.279075
    test 1282 line 215 _ExactTM.scale: 1.148263
    test 1283 line 215 _ExactTM.lat: 59.778971
    test 1284 line 215 _ExactTM.lon: 78.080322
    test 1285 line 216 _ExactTM.easting: 4048307.545909
    test 1286 line 216 _ExactTM.northing: 9800416.422998
    test 1287 line 216 _ExactTM.gamma: 86.843918
    test 1288 line 216 _ExactTM.scale: 1.206495
    test 1289 line 216 _ExactTM.lat: 55.865310
    test 1290 line 216 _ExactTM.lon: 87.384288
    test 1291 line 217 _ExactTM.easting: 8973188.480293
    test 1292 line 217 _ExactTM.northing: 7042230.087021
    test 1293 line 217 _ExactTM.gamma: 60.872456
    test 1294 line 217 _ExactTM.scale: 2.156098
    test 1295 line 217 _ExactTM.lat: 24.310973
    test 1296 line 217 _ExactTM.lon: 76.823777
    test 1297 line 218 _ExactTM.easting: 126314.191618
    test 1298 line 218 _ExactTM.northing: 396006.687921
    test 1299 line 218 _ExactTM.gamma: 0.071065
    test 1300 line 218 _ExactTM.scale: 0.999798
    test 1301 line 218 _ExactTM.lat: 3.582041
    test 1302 line 218 _ExactTM.lon: 1.137286
    test 1303 line 219 _ExactTM.easting: 5247652.345647
    test 1304 line 219 _ExactTM.northing: 8670513.359752
    test 1305 line 219 _ExactTM.gamma: 72.700498
    test 1306 line 219 _ExactTM.scale: 1.355272
    test 1307 line 219 _ExactTM.lat: 46.124233
    test 1308 line 219 _ExactTM.lon: 77.313118
    test 1309 line 220 _ExactTM.easting: 8103656.838119
    test 1310 line 220 _ExactTM.northing: 9469794.014737
    test 1311 line 220 _ExactTM.gamma: 84.490673
    test 1312 line 220 _ExactTM.scale: 1.912164
    test 1313 line 220 _ExactTM.lat: 31.171391
    test 1314 line 220 _ExactTM.lon: 87.104504
    test 1315 line 221 _ExactTM.easting: 6300112.758236
    test 1316 line 221 _ExactTM.northing: 93835.917364
    test 1317 line 221 _ExactTM.gamma: 0.644805
    test 1318 line 221 _ExactTM.scale: 1.534073
    test 1319 line 221 _ExactTM.lat: 0.553171
    test 1320 line 221 _ExactTM.lon: 49.117104
    test 1321 line 222 _ExactTM.easting: 3894813.593782
    test 1322 line 222 _ExactTM.northing: 4833832.341027
    test 1323 line 222 _ExactTM.gamma: 27.453298
    test 1324 line 222 _ExactTM.scale: 1.192135
    test 1325 line 222 _ExactTM.lat: 35.361587
    test 1326 line 222 _ExactTM.lon: 41.860599
    test 1327 line 223 _ExactTM.easting: 402511.346712
    test 1328 line 223 _ExactTM.northing: 3520621.561911
    test 1329 line 223 _ExactTM.gamma: 2.238474
    test 1330 line 223 _ExactTM.scale: 1.001599
    test 1331 line 223 _ExactTM.lat: 31.750314
    test 1332 line 223 _ExactTM.lon: 4.248167
    test 1333 line 224 _ExactTM.easting: 5357378.503148
    test 1334 line 224 _ExactTM.northing: 2772997.602234
    test 1335 line 224 _ExactTM.gamma: 17.823560
    test 1336 line 224 _ExactTM.scale: 1.376031
    test 1337 line 224 _ExactTM.lat: 17.924336
    test 1338 line 224 _ExactTM.lon: 46.096402
    test 1339 line 225 _ExactTM.easting: 2807553.985866
    test 1340 line 225 _ExactTM.northing: 8177847.980275
    test 1341 line 225 _ExactTM.gamma: 54.680045
    test 1342 line 225 _ExactTM.scale: 1.097531
    test 1343 line 225 _ExactTM.lat: 60.931488
    test 1344 line 225 _ExactTM.lon: 58.221214
    test 1345 line 226 _ExactTM.easting: 18289045.166501
    test 1346 line 226 _ExactTM.northing: 7792942.339604
    test 1347 line 226 _ExactTM.gamma: 73.216494
    test 1348 line 226 _ExactTM.scale: 8.098009
    test 1349 line 226 _ExactTM.lat: 5.358151
    test 1350 line 226 _ExactTM.lon: 87.556213
    test 1351 line 227 _ExactTM.easting: 8376822.459538
    test 1352 line 227 _ExactTM.northing: 8128174.623878
    test 1353 line 227 _ExactTM.gamma: 70.920117
    test 1354 line 227 _ExactTM.scale: 1.984873
    test 1355 line 227 _ExactTM.lat: 28.616673
    test 1356 line 227 _ExactTM.lon: 80.452426
    test 1357 line 228 _ExactTM.easting: 11898068.353272
    test 1358 line 228 _ExactTM.northing: 4772439.493697
    test 1359 line 228 _ExactTM.gamma: 42.613968
    test 1360 line 228 _ExactTM.scale: 3.314412
    test 1361 line 228 _ExactTM.lat: 11.709763
    test 1362 line 228 _ExactTM.lon: 76.760295
    test 1363 line 229 _ExactTM.easting: 10550946.939050
    test 1364 line 229 _ExactTM.northing: 3851968.815295
    test 1365 line 229 _ExactTM.gamma: 33.383025
    test 1366 line 229 _ExactTM.scale: 2.724754
    test 1367 line 229 _ExactTM.lat: 12.009498
    test 1368 line 229 _ExactTM.lon: 71.782351
    test 1369 line 230 _ExactTM.easting: 6828299.123607
    test 1370 line 230 _ExactTM.northing: 9394803.227463
    test 1371 line 230 _ExactTM.gamma: 83.181386
    test 1372 line 230 _ExactTM.scale: 1.624359
    test 1373 line 230 _ExactTM.lat: 37.629784
    test 1374 line 230 _ExactTM.lon: 85.795687
    test 1375 line 231 _ExactTM.easting: 11162550.334022
    test 1376 line 231 _ExactTM.northing: 2640267.279593
    test 1377 line 231 _ExactTM.gamma: 23.145404
    test 1378 line 231 _ExactTM.scale: 2.998408
    test 1379 line 231 _ExactTM.lat: 7.721128
    test 1380 line 231 _ExactTM.lon: 71.662731
    test 1381 line 232 _ExactTM.easting: 4411584.447941
    test 1382 line 232 _ExactTM.northing: 4956173.694407
    test 1383 line 232 _ExactTM.gamma: 30.713919
    test 1384 line 232 _ExactTM.scale: 1.248736
    test 1385 line 232 _ExactTM.lat: 34.295026
    test 1386 line 232 _ExactTM.lon: 46.442191
    test 1387 line 233 _ExactTM.easting: 672108.897905
    test 1388 line 233 _ExactTM.northing: 4751554.657054
    test 1389 line 233 _ExactTM.gamma: 5.569178
    test 1390 line 233 _ExactTM.scale: 1.005162
    test 1391 line 233 _ExactTM.lat: 42.622496
    test 1392 line 233 _ExactTM.lon: 8.193605
    test 1393 line 234 _ExactTM.easting: 5022964.290579
    test 1394 line 234 _ExactTM.northing: 6860418.199502
    test 1395 line 234 _ExactTM.gamma: 50.862230
    test 1396 line 234 _ExactTM.scale: 1.324925
    test 1397 line 234 _ExactTM.lat: 41.667780
    test 1398 line 234 _ExactTM.lon: 61.518288
    test 1399 line 235 _ExactTM.easting: 1669655.595207
    test 1400 line 235 _ExactTM.northing: 4152086.537021
    test 1401 line 235 _ExactTM.gamma: 11.110237
    test 1402 line 235 _ExactTM.scale: 1.034138
    test 1403 line 235 _ExactTM.lat: 36.060369
    test 1404 line 235 _ExactTM.lon: 18.444112
    test 1405 line 236 _ExactTM.easting: 6055876.729655
    test 1406 line 236 _ExactTM.northing: 4896837.552619
    test 1407 line 236 _ExactTM.gamma: 35.799747
    test 1408 line 236 _ExactTM.scale: 1.485967
    test 1409 line 236 _ExactTM.lat: 27.948091
    test 1410 line 236 _ExactTM.lon: 56.816429
    test 1411 line 237 _ExactTM.easting: 1209214.164379
    test 1412 line 237 _ExactTM.northing: 7266409.859178
    test 1413 line 237 _ExactTM.gamma: 22.319633
    test 1414 line 237 _ExactTM.scale: 1.017554
    test 1415 line 237 _ExactTM.lat: 63.386030
    test 1416 line 237 _ExactTM.lon: 24.662716
    test 1417 line 238 _ExactTM.easting: 5154564.559584
    test 1418 line 238 _ExactTM.northing: 698118.349975
    test 1419 line 238 _ExactTM.gamma: 4.242360
    test 1420 line 238 _ExactTM.scale: 1.347481
    test 1421 line 238 _ExactTM.lat: 4.680922
    test 1422 line 238 _ExactTM.lon: 42.114426
    test 1423 line 239 _ExactTM.easting: 2695149.806543
    test 1424 line 239 _ExactTM.northing: 8208197.765605
    test 1425 line 239 _ExactTM.gamma: 54.178615
    test 1426 line 239 _ExactTM.scale: 1.089730
    test 1427 line 239 _ExactTM.lat: 61.826625
    test 1428 line 239 _ExactTM.lon: 57.525096
    test 1429 line 240 _ExactTM.easting: 3394792.327820
    test 1430 line 240 _ExactTM.northing: 3217583.415552
    test 1431 line 240 _ExactTM.gamma: 15.165863
    test 1432 line 240 _ExactTM.scale: 1.145285
    test 1433 line 240 _ExactTM.lat: 25.104353
    test 1434 line 240 _ExactTM.lon: 32.528660
    test 1435 line 241 _ExactTM.easting: 1429160.966985
    test 1436 line 241 _ExactTM.northing: 8212685.362032
    test 1437 line 241 _ExactTM.gamma: 37.484904
    test 1438 line 241 _ExactTM.scale: 1.024676
    test 1439 line 241 _ExactTM.lat: 69.678351
    test 1440 line 241 _ExactTM.lon: 39.275513
    test 1441 line 242 _ExactTM.easting: 8343387.998065
    test 1442 line 242 _ExactTM.northing: 8885196.954578
    test 1443 line 242 _ExactTM.gamma: 78.561937
    test 1444 line 242 _ExactTM.scale: 1.974733
    test 1445 line 242 _ExactTM.lat: 29.671384
    test 1446 line 242 _ExactTM.lon: 84.196595
    test 1447 line 243 _ExactTM.easting: 1990722.928606
    test 1448 line 243 _ExactTM.northing: 7569202.065162
    test 1449 line 243 _ExactTM.gamma: 37.075276
    test 1450 line 243 _ExactTM.scale: 1.048486
    test 1451 line 243 _ExactTM.lat: 62.300208
    test 1452 line 243 _ExactTM.lon: 40.474051
    test 1453 line 244 _ExactTM.easting: 1554980.099559
    test 1454 line 244 _ExactTM.northing: 1449423.919586
    test 1455 line 244 _ExactTM.gamma: 3.188328
    test 1456 line 244 _ExactTM.scale: 1.029664
    test 1457 line 244 _ExactTM.lat: 12.721776
    test 1458 line 244 _ExactTM.lon: 14.190003
    test 1459 line 245 _ExactTM.easting: 785205.450196
    test 1460 line 245 _ExactTM.northing: 5575158.423096
    test 1461 line 245 _ExactTM.gamma: 8.388417
    test 1462 line 245 _ExactTM.scale: 1.007181
    test 1463 line 245 _ExactTM.lat: 49.811296
    test 1464 line 245 _ExactTM.lon: 10.925011
    test 1465 line 246 _ExactTM.easting: 3310405.988313
    test 1466 line 246 _ExactTM.northing: 5955022.233881
    test 1467 line 246 _ExactTM.gamma: 33.007587
    test 1468 line 246 _ExactTM.scale: 1.137141
    test 1469 line 246 _ExactTM.lat: 45.132680
    test 1470 line 246 _ExactTM.lon: 42.478624
    test 1471 line 247 _ExactTM.easting: 4733460.960666
    test 1472 line 247 _ExactTM.northing: 129034.889816
    test 1473 line 247 _ExactTM.gamma: 0.737551
    test 1474 line 247 _ExactTM.scale: 1.290439
    test 1475 line 247 _ExactTM.lat: 0.904279
    test 1476 line 247 _ExactTM.lon: 39.078412
    test 1477 line 248 _ExactTM.easting: 3322708.343909
    test 1478 line 248 _ExactTM.northing: 3864738.078742
    test 1479 line 248 _ExactTM.gamma: 18.472566
    test 1480 line 248 _ExactTM.scale: 1.138838
    test 1481 line 248 _ExactTM.lat: 30.163605
    test 1482 line 248 _ExactTM.lon: 33.577996
    test 1483 line 249 _ExactTM.easting: 8672864.417204
    test 1484 line 249 _ExactTM.northing: 8333465.983444
    test 1485 line 249 _ExactTM.gamma: 73.206273
    test 1486 line 249 _ExactTM.scale: 2.065441
    test 1487 line 249 _ExactTM.lat: 27.643244
    test 1488 line 249 _ExactTM.lon: 81.892859
    test 1489 line 250 _ExactTM.easting: 11126818.231196
    test 1490 line 250 _ExactTM.northing: 7618712.174991
    test 1491 line 250 _ExactTM.gamma: 67.887173
    test 1492 line 250 _ExactTM.scale: 2.922417
    test 1493 line 250 _ExactTM.lat: 18.201208
    test 1494 line 250 _ExactTM.lon: 82.434618
    test 1495 line 251 _ExactTM.easting: 8650100.981797
    test 1496 line 251 _ExactTM.northing: 9975084.168997
    test 1497 line 251 _ExactTM.gamma: 89.767446
    test 1498 line 251 _ExactTM.scale: 2.057289
    test 1499 line 251 _ExactTM.lat: 28.804576
    test 1500 line 251 _ExactTM.lon: 89.886072
    test 1501 line 252 _ExactTM.easting: 2212701.180192
    test 1502 line 252 _ExactTM.northing: 650348.100229
    test 1503 line 252 _ExactTM.gamma: 1.970441
    test 1504 line 252 _ExactTM.scale: 1.060830
    test 1505 line 252 _ExactTM.lat: 5.542998
    test 1506 line 252 _ExactTM.lon: 19.589578
    test 1507 line 253 _ExactTM.easting: 6890222.326618
    test 1508 line 253 _ExactTM.northing: 7506813.499547
    test 1509 line 253 _ExactTM.gamma: 62.684825
    test 1510 line 253 _ExactTM.scale: 1.638488
    test 1511 line 253 _ExactTM.lat: 34.237147
    test 1512 line 253 _ExactTM.lon: 73.678164
    test 1513 line 254 _ExactTM.easting: 6692260.067325
    test 1514 line 254 _ExactTM.northing: 4244174.008110
    test 1515 line 254 _ExactTM.gamma: 31.812920
    test 1516 line 254 _ExactTM.scale: 1.604640
    test 1517 line 254 _ExactTM.lat: 22.704949
    test 1518 line 254 _ExactTM.lon: 57.877010
    test 1519 line 255 _ExactTM.easting: 1225564.137190
    test 1520 line 255 _ExactTM.northing: 4778923.924144
    test 1521 line 255 _ExactTM.gamma: 10.083419
    test 1522 line 255 _ExactTM.scale: 1.018134
    test 1523 line 255 _ExactTM.lat: 42.192424
    test 1524 line 255 _ExactTM.lon: 14.828196
    test 1525 line 256 _ExactTM.easting: 12341116.154950
    test 1526 line 256 _ExactTM.northing: 5081855.521966
    test 1527 line 256 _ExactTM.gamma: 45.712546
    test 1528 line 256 _ExactTM.scale: 3.535170
    test 1529 line 256 _ExactTM.lat: 11.481151
    test 1530 line 256 _ExactTM.lon: 78.189236
    test 1531 line 257 _ExactTM.easting: 6673845.021771
    test 1532 line 257 _ExactTM.northing: 1177587.190565
    test 1533 line 257 _ExactTM.gamma: 8.389141
    test 1534 line 257 _ExactTM.scale: 1.605171
    test 1535 line 257 _ExactTM.lat: 6.609626
    test 1536 line 257 _ExactTM.lon: 51.735783
    test 1537 line 258 _ExactTM.easting: 6966354.690417
    test 1538 line 258 _ExactTM.northing: 3641802.005093
    test 1539 line 258 _ExactTM.gamma: 27.409636
    test 1540 line 258 _ExactTM.scale: 1.661469
    test 1541 line 258 _ExactTM.lat: 19.059369
    test 1542 line 258 _ExactTM.lon: 57.526439
    test 1543 max forward error: 2.328306e-08
    test 1544 max reverse error: 9.947598e-14
    test 1545 _ExactTM.scale0: 0.9996
    test 1546 _ExactTM.datum: WGS84
    test 1547 _ExactTM.datum.ellipsoid.KsOrder: 8
    test 1548 WGS84.KsOrder: 8

    all 1548 testExactTMcoords.py tests passed, 1 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 948.423 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testFmath.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.EPS from .constants by testFmath.py line 11
# lazily imported pygeodesy.Fcbrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Fhypot from .fmath by testFmath.py line 11
# lazily imported pygeodesy.INF from .constants by testFmath.py line 11
# lazily imported pygeodesy.Fpowers from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Froot from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Fsqrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Fsum from .fsums by testFmath.py line 11
# lazily imported pygeodesy.bqrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.cbrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.cbrt2 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.euclid_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testFmath.py line 11
# lazily imported pygeodesy.facos1 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fasin1 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fatan from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fatan1 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fatan2 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fhorner from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fpolynomial from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fpowers from .fmath by testFmath.py line 11
# lazily imported pygeodesy.frandoms from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fsum_ from .fsums by testFmath.py line 11
# lazily imported pygeodesy.hypot from .fmath by testFmath.py line 11
# lazily imported pygeodesy.hypot_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.hypot2_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.norm_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.signOf from .basics by testFmath.py line 11
# lazily imported pygeodesy.sqrt3 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.sqrt_a from .fmath by testFmath.py line 11
# lazily imported pygeodesy.zcrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.zqrt from .fmath by testFmath.py line 11

    testing testFmath.py 24.04.28 (module pygeodesy.fmath 24.05.29) isLazy=3
    test 1 fpolynomialA: 1.21197509765625
    test 2 fhornerA: 1.21197509765625
    test 3 fpolynomialB: 0.1513671875
    test 4 fhornerB: 0.1513671875

    test 5 fpolynomialA: 1.21197509765625
    test 6 fhornerA: 1.21197509765625
    test 7 fpolynomialB: 0.1513671875
    test 8 fhornerB: 0.1513671875

    test 9 fpolynomialA: 1.21197509765625
    test 10 fhornerA: 1.21197509765625
    test 11 fpolynomialB: 0.1513671875
    test 12 fhornerB: 0.1513671875

    test 13 fpolynomialA: 1.21197509765625
    test 14 fhornerA: 1.21197509765625
    test 15 fpolynomialB: 0.1513671875
    test 16 fhornerB: 0.1513671875

    test 17 fpolynomialA: 1.21197509765625
    test 18 fhornerA: 1.21197509765625
    test 19 fpolynomialB: 0.1513671875
    test 20 fhornerB: 0.1513671875

    test 21 fpolynomialA: 1.21197509765625
    test 22 fhornerA: 1.21197509765625
    test 23 fpolynomialB: 0.1513671875
    test 24 fhornerB: 0.1513671875

    test 25 fpolynomialA: 1.21197509765625
    test 26 fhornerA: 1.21197509765625
    test 27 fpolynomialB: 0.1513671875
    test 28 fhornerB: 0.1513671875

    test 29 fpolynomialA: 1.21197509765625
    test 30 fhornerA: 1.21197509765625
    test 31 fpolynomialB: 0.1513671875
    test 32 fhornerB: 0.1513671875

    test 33 fpolynomialA: 1.21197509765625
    test 34 fhornerA: 1.21197509765625
    test 35 fpolynomialB: 0.1513671875
    test 36 fhornerB: 0.1513671875

    test 37 fpolynomialA: 1.21197509765625
    test 38 fhornerA: 1.21197509765625
    test 39 fpolynomialB: 0.1513671875
    test 40 fhornerB: 0.1513671875

    test 41 fpolynomialA: 1.21197509765625
    test 42 fhornerA: 1.21197509765625
    test 43 fpolynomialB: 0.1513671875
    test 44 fhornerB: 0.1513671875

    test 45 fpolynomialA: 1.21197509765625
    test 46 fhornerA: 1.21197509765625
    test 47 fpolynomialB: 0.1513671875
    test 48 fhornerB: 0.1513671875

    test 49 fpolynomialA: 1.21197509765625
    test 50 fhornerA: 1.21197509765625
    test 51 fpolynomialB: 0.1513671875
    test 52 fhornerB: 0.1513671875

    test 53 fpolynomialA: 1.21197509765625
    test 54 fhornerA: 1.21197509765625
    test 55 fpolynomialB: 0.1513671875
    test 56 fhornerB: 0.1513671875

    test 57 fpolynomialA: 1.21197509765625
    test 58 fhornerA: 1.21197509765625
    test 59 fpolynomialB: 0.1513671875
    test 60 fhornerB: 0.1513671875

    test 61 fpolynomialA: 1.21197509765625
    test 62 fhornerA: 1.21197509765625
    test 63 fpolynomialB: 0.1513671875
    test 64 fhornerB: 0.1513671875

    test 65 fpolynomialA: 1.21197509765625
    test 66 fhornerA: 1.21197509765625
    test 67 fpolynomialB: 0.1513671875
    test 68 fhornerB: 0.1513671875

    test 69 fpolynomialA: 1.21197509765625
    test 70 fhornerA: 1.21197509765625
    test 71 fpolynomialB: 0.1513671875
    test 72 fhornerB: 0.1513671875

    test 73 fpolynomialA: 1.21197509765625
    test 74 fhornerA: 1.21197509765625
    test 75 fpolynomialB: 0.1513671875
    test 76 fhornerB: 0.1513671875

    test 77 fpolynomialA: 1.21197509765625
    test 78 fhornerA: 1.21197509765625
    test 79 fpolynomialB: 0.1513671875
    test 80 fhornerB: 0.1513671875

    test 81 fpolynomialA: 1.21197509765625
    test 82 fhornerA: 1.21197509765625
    test 83 fpolynomialB: 0.1513671875
    test 84 fhornerB: 0.1513671875

    test 85 fpolynomialA: 1.21197509765625
    test 86 fhornerA: 1.21197509765625
    test 87 fpolynomialB: 0.1513671875
    test 88 fhornerB: 0.1513671875

    test 89 fpolynomialA: 1.21197509765625
    test 90 fhornerA: 1.21197509765625
    test 91 fpolynomialB: 0.1513671875
    test 92 fhornerB: 0.1513671875

    test 93 fpolynomialA: 1.21197509765625
    test 94 fhornerA: 1.21197509765625
    test 95 fpolynomialB: 0.1513671875
    test 96 fhornerB: 0.1513671875

    test 97 fpolynomialA: 1.21197509765625
    test 98 fhornerA: 1.21197509765625
    test 99 fpolynomialB: 0.1513671875
    test 100 fhornerB: 0.1513671875

    test 101 fpolynomialA: 1.21197509765625
    test 102 fhornerA: 1.21197509765625
    test 103 fpolynomialB: 0.1513671875
    test 104 fhornerB: 0.1513671875

    test 105 fpolynomialA: 1.21197509765625
    test 106 fhornerA: 1.21197509765625
    test 107 fpolynomialB: 0.1513671875
    test 108 fhornerB: 0.1513671875

    test 109 fpolynomialA: 1.21197509765625
    test 110 fhornerA: 1.21197509765625
    test 111 fpolynomialB: 0.1513671875
    test 112 fhornerB: 0.1513671875

    test 113 fpolynomialA: 1.21197509765625
    test 114 fhornerA: 1.21197509765625
    test 115 fpolynomialB: 0.1513671875
    test 116 fhornerB: 0.1513671875

    test 117 fpolynomialA: 1.21197509765625
    test 118 fhornerA: 1.21197509765625
    test 119 fpolynomialB: 0.1513671875
    test 120 fhornerB: 0.1513671875

    test 121 fpolynomialA: 1.21197509765625
    test 122 fhornerA: 1.21197509765625
    test 123 fpolynomialB: 0.1513671875
    test 124 fhornerB: 0.1513671875

    test 125 fpolynomialA: 1.21197509765625
    test 126 fhornerA: 1.21197509765625
    test 127 fpolynomialB: 0.1513671875
    test 128 fhornerB: 0.1513671875

    test 129 fpolynomialA: 1.21197509765625
    test 130 fhornerA: 1.21197509765625
    test 131 fpolynomialB: 0.1513671875
    test 132 fhornerB: 0.1513671875

    test 133 fpowers: 10
    test 134 fpowers: 2
    test 135 fpowers: 1024
    test 136 fpowers: 4
    test 137 fpowers: 16
    test 138 fpowers: 1024
    test 139 fpowers: 4
    test 140 fpowers: 8
    test 141 fpowers: 512

    test 142 Airy1830: 6366914.608925221
    test 143 Airy1830: 6366914.608925221
    test 144 Airy1830: 6366914.608925221
    test 145 Airy1830: 6366914.608925221

    test 146 AiryModified: 6366691.774619882  FAILED, KNOWN, expected 6366691.774619881
    test 147 AiryModified: 6366691.774619882  FAILED, KNOWN, expected 6366691.774619881
    test 148 AiryModified: 6366691.774619882  FAILED, KNOWN, expected 6366691.774619881
    test 149 AiryModified: 6366691.774619882  FAILED, KNOWN, expected 6366691.774619881

    test 150 ATS1977: 6367447.141166951  FAILED, KNOWN, expected 6367447.141166950
    test 151 ATS1977: 6367447.141166951  FAILED, KNOWN, expected 6367447.141166950
    test 152 ATS1977: 6367447.141166951  FAILED, KNOWN, expected 6367447.141166950
    test 153 ATS1977: 6367447.141166951  FAILED, KNOWN, expected 6367447.141166950

    test 154 Australia1966: 6367471.848532283  FAILED, KNOWN, expected 6367471.848532284
    test 155 Australia1966: 6367471.848532283  FAILED, KNOWN, expected 6367471.848532284
    test 156 Australia1966: 6367471.848532283  FAILED, KNOWN, expected 6367471.848532284
    test 157 Australia1966: 6367471.848532283  FAILED, KNOWN, expected 6367471.848532284

    test 158 Bessel1841: 6366742.520233950
    test 159 Bessel1841: 6366742.520233950
    test 160 Bessel1841: 6366742.520233950
    test 161 Bessel1841: 6366742.520233950

    test 162 BesselModified: 6366837.224747659
    test 163 BesselModified: 6366837.224747659
    test 164 BesselModified: 6366837.224747659
    test 165 BesselModified: 6366837.224747659

    test 166 CGCS2000: 6367449.145771047  FAILED, KNOWN, expected 6367449.145771048
    test 167 CGCS2000: 6367449.145771047  FAILED, KNOWN, expected 6367449.145771048
    test 168 CGCS2000: 6367449.145771047  FAILED, KNOWN, expected 6367449.145771048
    test 169 CGCS2000: 6367449.145771047  FAILED, KNOWN, expected 6367449.145771048

    test 170 Clarke1866: 6367399.689169783
    test 171 Clarke1866: 6367399.689169783
    test 172 Clarke1866: 6367399.689169783
    test 173 Clarke1866: 6367399.689169783

    test 174 Clarke1880: 6367386.643980513  FAILED, KNOWN, expected 6367386.643980514
    test 175 Clarke1880: 6367386.643980513  FAILED, KNOWN, expected 6367386.643980514
    test 176 Clarke1880: 6367386.643980513  FAILED, KNOWN, expected 6367386.643980514
    test 177 Clarke1880: 6367386.643980513  FAILED, KNOWN, expected 6367386.643980514

    test 178 Clarke1880IGN: 6367386.736673363
    test 179 Clarke1880IGN: 6367386.736673363
    test 180 Clarke1880IGN: 6367386.736673363
    test 181 Clarke1880IGN: 6367386.736673363

    test 182 Clarke1880Mod: 6367386.692362010  FAILED, KNOWN, expected 6367386.692362011
    test 183 Clarke1880Mod: 6367386.692362010  FAILED, KNOWN, expected 6367386.692362011
    test 184 Clarke1880Mod: 6367386.692362010  FAILED, KNOWN, expected 6367386.692362011
    test 185 Clarke1880Mod: 6367386.692362010  FAILED, KNOWN, expected 6367386.692362011

    test 186 CPM1799: 6366208.881847842  FAILED, KNOWN, expected 6366208.881847841
    test 187 CPM1799: 6366208.881847842  FAILED, KNOWN, expected 6366208.881847841
    test 188 CPM1799: 6366208.881847842  FAILED, KNOWN, expected 6366208.881847841
    test 189 CPM1799: 6366208.881847842  FAILED, KNOWN, expected 6366208.881847841

    test 190 Delambre1810: 6366197.076843344
    test 191 Delambre1810: 6366197.076843344
    test 192 Delambre1810: 6366197.076843344
    test 193 Delambre1810: 6366197.076843344

    test 194 Engelis1985: 6367448.175079710  FAILED, KNOWN, expected 6367448.175079712
    test 195 Engelis1985: 6367448.175079710  FAILED, KNOWN, expected 6367448.175079712
    test 196 Engelis1985: 6367448.175079710  FAILED, KNOWN, expected 6367448.175079712
    test 197 Engelis1985: 6367448.175079710  FAILED, KNOWN, expected 6367448.175079712

    test 198 Everest1969: 6366699.578395008  FAILED, KNOWN, expected 6366699.578395009
    test 199 Everest1969: 6366699.578395008  FAILED, KNOWN, expected 6366699.578395009
    test 200 Everest1969: 6366699.578395008  FAILED, KNOWN, expected 6366699.578395009
    test 201 Everest1969: 6366699.578395008  FAILED, KNOWN, expected 6366699.578395009

    test 202 Everest1975: 6366703.060499237
    test 203 Everest1975: 6366703.060499237
    test 204 Everest1975: 6366703.060499237
    test 205 Everest1975: 6366703.060499237

    test 206 Fisher1968: 6367463.656043807
    test 207 Fisher1968: 6367463.656043807
    test 208 Fisher1968: 6367463.656043807
    test 209 Fisher1968: 6367463.656043807

    test 210 GEM10C: 6367449.145824739  FAILED, KNOWN, expected 6367449.145824740
    test 211 GEM10C: 6367449.145824739  FAILED, KNOWN, expected 6367449.145824740
    test 212 GEM10C: 6367449.145824739  FAILED, KNOWN, expected 6367449.145824740
    test 213 GEM10C: 6367449.145824739  FAILED, KNOWN, expected 6367449.145824740

    test 214 GPES: 6378135.000000000
    test 215 GPES: 6378135.000000000
    test 216 GPES: 6378135.000000000
    test 217 GPES: 6378135.000000000

    test 218 GRS67: 6367471.747065325
    test 219 GRS67: 6367471.747065325
    test 220 GRS67: 6367471.747065325
    test 221 GRS67: 6367471.747065325

    test 222 GRS80: 6367449.145771043
    test 223 GRS80: 6367449.145771043
    test 224 GRS80: 6367449.145771043
    test 225 GRS80: 6367449.145771043

    test 226 Helmert1906: 6367513.572270742
    test 227 Helmert1906: 6367513.572270742
    test 228 Helmert1906: 6367513.572270742
    test 229 Helmert1906: 6367513.572270742

    test 230 IAU76: 6367452.132788436
    test 231 IAU76: 6367452.132788436
    test 232 IAU76: 6367452.132788436
    test 233 IAU76: 6367452.132788436

    test 234 IERS1989: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246
    test 235 IERS1989: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246
    test 236 IERS1989: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246
    test 237 IERS1989: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246

    test 238 IERS1992TOPEX: 6367448.446996409
    test 239 IERS1992TOPEX: 6367448.446996409
    test 240 IERS1992TOPEX: 6367448.446996409
    test 241 IERS1992TOPEX: 6367448.446996409

    test 242 IERS2003: 6367448.717710576  FAILED, KNOWN, expected 6367448.717710577
    test 243 IERS2003: 6367448.717710576  FAILED, KNOWN, expected 6367448.717710577
    test 244 IERS2003: 6367448.717710576  FAILED, KNOWN, expected 6367448.717710577
    test 245 IERS2003: 6367448.717710576  FAILED, KNOWN, expected 6367448.717710577

    test 246 Intl1924: 6367654.500057585  FAILED, KNOWN, expected 6367654.500057584
    test 247 Intl1924: 6367654.500057585  FAILED, KNOWN, expected 6367654.500057584
    test 248 Intl1924: 6367654.500057585  FAILED, KNOWN, expected 6367654.500057584
    test 249 Intl1924: 6367654.500057585  FAILED, KNOWN, expected 6367654.500057584

    test 250 Intl1967: 6367469.338944457
    test 251 Intl1967: 6367469.338944457
    test 252 Intl1967: 6367469.338944457
    test 253 Intl1967: 6367469.338944457

    test 254 Krassovski1940: 6367558.496874981
    test 255 Krassovski1940: 6367558.496874981
    test 256 Krassovski1940: 6367558.496874981
    test 257 Krassovski1940: 6367558.496874981

    test 258 Krassowsky1940: 6367558.496874981
    test 259 Krassowsky1940: 6367558.496874981
    test 260 Krassowsky1940: 6367558.496874981
    test 261 Krassowsky1940: 6367558.496874981

    test 262 Maupertuis1738: 6380564.130118373
    test 263 Maupertuis1738: 6380564.130118373
    test 264 Maupertuis1738: 6380564.130118373
    test 265 Maupertuis1738: 6380564.130118373

    test 266 Mercury1960: 6367479.629236430
    test 267 Mercury1960: 6367479.629236430
    test 268 Mercury1960: 6367479.629236430
    test 269 Mercury1960: 6367479.629236430

    test 270 Mercury1968Mod: 6367463.656043807
    test 271 Mercury1968Mod: 6367463.656043807
    test 272 Mercury1968Mod: 6367463.656043807
    test 273 Mercury1968Mod: 6367463.656043807

    test 274 NWL1965: 6367456.873668412
    test 275 NWL1965: 6367456.873668412
    test 276 NWL1965: 6367456.873668412
    test 277 NWL1965: 6367456.873668412

    test 278 OSU86F: 6367448.347165301  FAILED, KNOWN, expected 6367448.347165302
    test 279 OSU86F: 6367448.347165301  FAILED, KNOWN, expected 6367448.347165302
    test 280 OSU86F: 6367448.347165301  FAILED, KNOWN, expected 6367448.347165302
    test 281 OSU86F: 6367448.347165301  FAILED, KNOWN, expected 6367448.347165302

    test 282 OSU91A: 6367448.446997731  FAILED, KNOWN, expected 6367448.446997732
    test 283 OSU91A: 6367448.446997731  FAILED, KNOWN, expected 6367448.446997732
    test 284 OSU91A: 6367448.446997731  FAILED, KNOWN, expected 6367448.446997732
    test 285 OSU91A: 6367448.446997731  FAILED, KNOWN, expected 6367448.446997732

    test 286 Plessis1817: 6366197.157107386
    test 287 Plessis1817: 6366197.157107386
    test 288 Plessis1817: 6366197.157107386
    test 289 Plessis1817: 6366197.157107386

    test 290 PZ90: 6367448.169554430
    test 291 PZ90: 6367448.169554430
    test 292 PZ90: 6367448.169554430
    test 293 PZ90: 6367448.169554430

    test 294 SGS85: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246
    test 295 SGS85: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246
    test 296 SGS85: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246
    test 297 SGS85: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246

    test 298 SoAmerican1969: 6367471.848532285
    test 299 SoAmerican1969: 6367471.848532285
    test 300 SoAmerican1969: 6367471.848532285
    test 301 SoAmerican1969: 6367471.848532285

    test 302 Sphere: 6371008.771415000
    test 303 Sphere: 6371008.771415000
    test 304 Sphere: 6371008.771415000
    test 305 Sphere: 6371008.771415000

    test 306 SphereAuthalic: 6371000.000000000
    test 307 SphereAuthalic: 6371000.000000000
    test 308 SphereAuthalic: 6371000.000000000
    test 309 SphereAuthalic: 6371000.000000000

    test 310 SpherePopular: 6378137.000000000
    test 311 SpherePopular: 6378137.000000000
    test 312 SpherePopular: 6378137.000000000
    test 313 SpherePopular: 6378137.000000000

    test 314 Struve1860: 6367482.318325493
    test 315 Struve1860: 6367482.318325493
    test 316 Struve1860: 6367482.318325493
    test 317 Struve1860: 6367482.318325493

    test 318 WGS60: 6367478.630911891
    test 319 WGS60: 6367478.630911891
    test 320 WGS60: 6367478.630911891
    test 321 WGS60: 6367478.630911891

    test 322 WGS66: 6367456.873668412
    test 323 WGS66: 6367456.873668412
    test 324 WGS66: 6367456.873668412
    test 325 WGS66: 6367456.873668412

    test 326 WGS72: 6367447.248623827  FAILED, KNOWN, expected 6367447.248623826
    test 327 WGS72: 6367447.248623827  FAILED, KNOWN, expected 6367447.248623826
    test 328 WGS72: 6367447.248623827  FAILED, KNOWN, expected 6367447.248623826
    test 329 WGS72: 6367447.248623827  FAILED, KNOWN, expected 6367447.248623826

    test 330 WGS84: 6367449.145823414
    test 331 WGS84: 6367449.145823414
    test 332 WGS84: 6367449.145823414
    test 333 WGS84: 6367449.145823414

    test 334 WGS84_NGS: 6367449.145771043
    test 335 WGS84_NGS: 6367449.145771043
    test 336 WGS84_NGS: 6367449.145771043
    test 337 WGS84_NGS: 6367449.145771043

    test 338 hypot: 1
    test 339 sqrt_a: 0.6102683302836
    test 340 sqrt_a: 0.6102683302836
    test 341 hypot_ : 1.00001250
    test 342 euclid_: 1.00207107  FAILED, KNOWN, expected 1.00001250
    test 343 hypot2_: 1.00002500
    test 344 norm_  : 1.00000000
    test 345 hypot_ : 3606.937759
    test 346 euclid_: 3845.584412  FAILED, KNOWN, expected 3859.423403
    test 347 hypot2_: 13010000.0
    test 348 norm_  : 1.0
    test 349 hypot_ : 40112.842
    test 350 hypot2_: 1609040100.0
    test 351 euclid_: 41277.666  FAILED, KNOWN, expected 41316.227
    test 352 bqrt: 2.00
    test 353 cbrt: 3.00
    test 354 cbrt: -3.00
    test 355 cbrt2: 9.00
    test 356 cbrt2: 9.00
    test 357 sqrt3: 27.00
    test 358 zcrt: 2.00
    test 359 zqrt: 2.00
    test 360 facos1: 0.005%
    test 361 fasin1: 0.439%
    test 362 fatan : 0.134%
    test 363 fatan1: 2.834%
    test 364 fatan2: 0.321%

    test 365 Fhypot: Fhypot[1] (5.0, 0)
    test 366 Fhypot: Fhypot[1] (9.43398, 0)
    test 367 Fhypot: Fhypot[1] (5.0, 0)
    test 368 Fhypot: Fhypot[1] (-2.18182, 0)
    test 369 Fhypot: Fhypot[1] (-12, 0)
    test 370 Fhypot: Fhypot[1] (1.41421, 0)
    test 371 Fhypot: Fhypot[1] (-0.5, 0)
    test 372 Fhypot: Fhypot[1] (-0.333333, 0)
    test 373 Fhypot: fmath.Fhypot(<Fsum[1] (-1, 0) at 0x100e86660>, -1, root=0): 1.0 / 0: float division by zero

    test 374 Fsqrt: Fsqrt[1] (3.0, 0)
    test 375 Fsqrt: Fcbrt[1] (3.0, 0)
    test 376 Fsqrt: Fsqrt[1] (1.41421, 0)
    test 377 Fsqrt: Fsqrt[1] (1.41421, 0)
    test 378 Froot: Froot[1] (0.5, 0)
    test 379 Froot: Froot[1] (0.5, 0)
    test 380 Fsqrt: fmath.Fsqrt(<Fsum[1] (-1, 0) at 0x10117abd0>, -1, root=2): -2.0 root Fsum[1] (0.5, 0): complex (8.659560562354934e-17+1.4142135623730951j) from 2-arg pow(-2, 0.5)
    test 381 Fsqrt: fmath.Froot(<Fsum[1] (-1, 0) at 0x10117abd0>, -1, root=0): 1.0 / 0: float division by zero
    test 382 Froot: Froot[1] (-0.25, 0)

    test 383 Fhypot1: 3.74165739e+100
    test 384 Fpowers1: -1253.61857
    test 385 Fsqrt1: 2.12646405e-08
    test 386 Fcbrt1: 7.6754768e-06

    test 387 Fhypot3: 3.74165739e+100
    test 388 Fpowers3: -1.58944443
    test 389 Fsqrt3: 0.0106040344
    test 390 Fcbrt3: 0.048266679

    test 391 Fhypot6: 3.74165739e+100
    test 392 Fpowers6: 6388.67042
    test 393 Fsqrt6: 0.00103050701
    test 394 Fcbrt6: 0.0102023598

    test 395 Fhypot7: 3.74165739e+100
    test 396 Fpowers7: 5030.96377
    test 397 Fsqrt7: 0.0505028971
    test 398 Fcbrt7: 0.136629411

    71 of 398 testFmath.py tests (17.8%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 36.858 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testFormy.py
./pygeodesy/formy.py:1153: DeprecationWarning: Property_RO L{pygeodesy.ellipsoids.Ellipsoid.geodesic} has been DEPRECATED, use property C{geodesicw}.
  if d.ellipsoid.geodesic:
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.PI from .constants by testFormy.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testFormy.py line 11
# lazily imported pygeodesy.R_M from .constants by testFormy.py line 11
# lazily imported pygeodesy.antipode from .formy by testFormy.py line 11
# lazily imported pygeodesy.bearing from .formy by testFormy.py line 11
# lazily imported pygeodesy.cosineAndoyerLambert from .formy by testFormy.py line 11
# lazily imported pygeodesy.cosineForsytheAndoyerLambert from .formy by testFormy.py line 11
# lazily imported pygeodesy.cosineLaw from .formy by testFormy.py line 11
# lazily imported pygeodesy.Datums from .datums by testFormy.py line 11
# lazily imported pygeodesy.equirectangular from .formy by testFormy.py line 11
# lazily imported pygeodesy.euclidean from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessAbc_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessCagnoli_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessGirard_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessLHuilier_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessKarney from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessQuad from .formy by testFormy.py line 11
# lazily imported pygeodesy.flatLocal from .formy by testFormy.py line 11
# lazily imported pygeodesy.flatPolar from .formy by testFormy.py line 11
# lazily imported pygeodesy.hartzell from .formy by testFormy.py line 11
# lazily imported pygeodesy.haversine from .formy by testFormy.py line 11
# lazily imported pygeodesy.heightOf from .formy by testFormy.py line 11
# lazily imported pygeodesy.heightOrthometric from .formy by testFormy.py line 11
# lazily imported pygeodesy.horizon from .formy by testFormy.py line 11
# lazily imported pygeodesy.hubeny from .formy by testFormy.py line 11
# lazily imported pygeodesy.IntersectionError from .errors by testFormy.py line 11
# lazily imported pygeodesy.intersection2 from .formy by testFormy.py line 11
# lazily imported pygeodesy.intersections2 from .formy by testFormy.py line 11
# lazily imported pygeodesy.isantipode from .formy by testFormy.py line 11
# lazily imported pygeodesy.isantipode_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.isnormal from .formy by testFormy.py line 11
# lazily imported pygeodesy.isnormal_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testFormy.py line 11
# lazily imported pygeodesy.latlonDMS from .dms by testFormy.py line 11
# lazily imported pygeodesy.LimitError from .errors by testFormy.py line 11
# lazily imported pygeodesy.limiterrors from .errors by testFormy.py line 11
# lazily imported pygeodesy.map1 from .basics by testFormy.py line 11
# lazily imported pygeodesy.normal from .formy by testFormy.py line 11
# lazily imported pygeodesy.parseDMS from .dms by testFormy.py line 11
# lazily imported pygeodesy.radical2 from .formy by testFormy.py line 11
# lazily imported pygeodesy.thomas from .formy by testFormy.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testFormy.py line 11
# lazily imported pygeodesy.vincentys from .formy by testFormy.py line 11

    testing testFormy.py 24.05.28 isLazy=3
    test 1 antipode1: (-89.0, -1.0)
    test 2 antipode2: (89.0, 1.0)
    test 3 bearing1: 251.364
    test 4 bearing2: 251.364
    test 5 bearing3: 249.614
    test 6 excessAbc_: 11.9698
    test 7 excessAbc_: 11.9698
    test 8 excessCagnoli_: 11.9698
    test 9 excessGirard_: 11.9698
    test 10 excessLHuilier_: 11.9698
    test 11 excessKarney: 56.9625
    test 12 excessQuad: 56.9625
    test 13 excessKarney: 44.0235
    test 14 excessQuad: 44.0235
    test 15 excessKarney: -44.0235
    test 16 excessQuad: -44.0235

    test 17 isantipode1: True
    test 18 isantipode2: True
    test 19 isantipode3: False
    test 20 isantipode4: True
    test 21 isantipode5: True
    test 22 isantipode6: True
    test 23 isantipode7: False
    test 24 isantipode8: True

    test 25 isnormal1: True
    test 26 isnormal2: False
    test 27 isnormal3: True
    test 28 isnormal4: True
    test 29 isnormal5: True
    test 30 isnormal6: False
    test 31 isnormal7: True
    test 32 isnormal8: True
# lazily imported pygeodesy.triaxials by formy.py line 980
# lazily imported pygeodesy.cartesianBase by formy.py line 982

    test 33 hartzell: (884080.396945, 5592040.198472, 2927517.711001)
# lazily imported pygeodesy.ecef by cartesianBase.py line 218
    test 34 hartzell: 27.500482°N, 081.016111°E, +12669647.30  FAILED, KNOWN, expected 27.500482°N, 081.016111°E, +12669647.30, 'hartzell'
    test 35 hartzell: (3642031.283571, 3678090.99925, 3714150.714929)
    test 36 hartzell: 35.843738°N, 045.282243°E, +11296639.67  FAILED, KNOWN, expected 35.843738°N, 045.282243°E, +11296639.67, 'hartzell'
    test 37 hartzell: (3647362.058328, 3683474.553955, 3703640.299338)
    test 38 hartzell: 35.726966°N, 045.282243°E, +11296619.03  FAILED, KNOWN, expected 35.726966°N, 045.282243°E, +11296619.03, 'hartzell'
    test 39 heightOf0: 2638958.23912
    test 40 heightOf45: 5401080.43931
    test 41 heightOf90: 6371008.77141
    test 42 heightOf135: 5401080.43931
    test 43 horizon0: 0.0
    test 44 horizon10Km: 357099.672
    test 45 horizon30Kft: 392310.704
    test 46 horizon10Kft: 214877.422
    test 47 normal1: (-89.0, 179.0)
    test 48 normal2: (81.0, 180.0)
    test 49 normal3: (81.0, -19.0)
    test 50 normal4: (-81.0, 0.0)

    test 51 haversine1 (0.00%): 298009.404
    test 52 vincentys1 (0.00%): 298009.404
    test 53 vincentys1 (0.00%): 298009.404
    test 54 cosineAndoyerLambert1 (0.13%): 298395.796  FAILED, KNOWN, expected 298009.404
    test 55 cosineForsytheAndoyerLambert1 (0.13%): 298396.056  FAILED, KNOWN, expected 298009.404
    test 56 cosineLaw1 (0.00%): 298009.404
    test 57 equirectangular1 (0.01%): 298039.206  FAILED, KNOWN, expected 298009.404
    test 58 euclidean1 (5.26%): 313698.901  FAILED, KNOWN, expected 298009.404
    test 59 flatLocal1 (0.14%): 298425.999  FAILED, KNOWN, expected 298009.404
    test 60 flatPolar1 (8.67%): 323841.582  FAILED, KNOWN, expected 298009.404
    test 61 thomas1 (0.13%): 298396.261  FAILED, KNOWN, expected 298009.404
    test 62 hubeny1: <function flatLocal at 0x101292de0>

    test 63 haversine2 (0.00%): 98164.988
    test 64 vincentys2 (0.00%): 98164.988
    test 65 vincentys2 (0.00%): 98164.988
    test 66 cosineAndoyerLambert2 (0.10%): 98071.421  FAILED, KNOWN, expected 98164.988
    test 67 cosineForsytheAndoyerLambert2 (0.10%): 98071.560  FAILED, KNOWN, expected 98164.988
    test 68 cosineLaw2 (0.00%): 98164.988
    test 69 equirectangular2 (0.00%): 98165.123  FAILED, KNOWN, expected 98164.988
    test 70 euclidean2 (6.37%): 104419.458  FAILED, KNOWN, expected 98164.988
    test 71 flatLocal2 (0.10%): 98071.693  FAILED, KNOWN, expected 98164.988
    test 72 flatPolar2 (0.57%): 98725.040  FAILED, KNOWN, expected 98164.988
    test 73 thomas2 (0.10%): 98071.535  FAILED, KNOWN, expected 98164.988
    test 74 hubeny2: <function flatLocal at 0x101292de0>

    test 75 haversine3 (0.00%): 651816.987
    test 76 vincentys3 (0.00%): 651816.987
    test 77 vincentys3 (0.00%): 651816.987
    test 78 cosineAndoyerLambert3 (0.25%): 653456.144  FAILED, KNOWN, expected 651816.987
    test 79 cosineForsytheAndoyerLambert3 (0.25%): 653456.175  FAILED, KNOWN, expected 651816.987
    test 80 cosineLaw3 (0.00%): 651816.987
    test 81 equirectangular3 (0.03%): 652041.760  FAILED, KNOWN, expected 651816.987
    test 82 euclidean3 (4.37%): 680281.470  FAILED, KNOWN, expected 651816.987
    test 83 flatLocal3 (0.29%): 653681.559  FAILED, KNOWN, expected 651816.987
    test 84 flatPolar3 (13.00%): 736534.840  FAILED, KNOWN, expected 651816.987
    test 85 thomas3 (0.25%): 653456.933  FAILED, KNOWN, expected 651816.987
    test 86 hubeny3: <function flatLocal at 0x101292de0>

    test 87 haversine4 (0.00%): 4084985.780
    test 88 vincentys4 (0.00%): 4084985.780
    test 89 vincentys4 (0.00%): 4084985.780
    test 90 cosineAndoyerLambert4 (0.24%): 4094954.008  FAILED, KNOWN, expected 4084985.780
    test 91 cosineForsytheAndoyerLambert4 (0.24%): 4094953.639  FAILED, KNOWN, expected 4084985.780
    test 92 cosineLaw4 (0.00%): 4084985.780
    test 93 equirectangular4 (1.26%): 4136407.022  FAILED, KNOWN, expected 4084985.780
    test 94 euclidean4 (4.22%): 4257296.511  FAILED, KNOWN, expected 4084985.780
    test 95 flatLocal4 (1.51%): 4146513.247  FAILED, KNOWN, expected 4084985.780
    test 96 flatPolar4 (12.31%): 4587896.452  FAILED, KNOWN, expected 4084985.780
    test 97 thomas4 (0.24%): 4094958.301  FAILED, KNOWN, expected 4084985.780
    test 98 hubeny4: <function flatLocal at 0x101292de0>

    test 99 haversine5 (0.00%): 9670051.606
    test 100 vincentys5 (0.00%): 9670051.606
    test 101 vincentys5 (0.00%): 9670051.606
    test 102 cosineAndoyerLambert5 (0.21%): 9690752.610  FAILED, KNOWN, expected 9670051.606
    test 103 cosineForsytheAndoyerLambert5 (0.21%): 9690746.120  FAILED, KNOWN, expected 9670051.606
    test 104 cosineLaw5 (0.00%): 9670051.606
    test 105 equirectangular5 (7.79%): 10423307.214  FAILED, KNOWN, expected 9670051.606
    test 106 euclidean5 (9.34%): 10573030.726  FAILED, KNOWN, expected 9670051.606
    test 107 flatLocal5 (8.03%): 10446503.342  FAILED, KNOWN, expected 9670051.606
    test 108 flatPolar5 (55.59%): 15045906.074  FAILED, KNOWN, expected 9670051.606
    test 109 thomas5 (0.21%): 9690767.767  FAILED, KNOWN, expected 9670051.606
    test 110 hubeny5: <function flatLocal at 0x101292de0>

    test 111 haversine6 (0.00%): 10496496.577
    test 112 vincentys6 (0.00%): 10496496.577
    test 113 vincentys6 (0.00%): 10496496.577
    test 114 cosineAndoyerLambert6 (0.18%): 10477328.664  FAILED, KNOWN, expected 10496496.577
    test 115 cosineForsytheAndoyerLambert6 (0.18%): 10477342.084  FAILED, KNOWN, expected 10496496.577
    test 116 cosineLaw6 (0.00%): 10496496.577
    test 117 equirectangular6 (3.32%): 10844969.236  FAILED, KNOWN, expected 10496496.577
    test 118 euclidean6 (4.50%): 10968488.107  FAILED, KNOWN, expected 10496496.577
    test 119 flatLocal6 (3.07%): 10818798.605  FAILED, KNOWN, expected 10496496.577
    test 120 flatPolar6 (23.87%): 13002288.857  FAILED, KNOWN, expected 10496496.577
    test 121 thomas6 (0.18%): 10477316.498  FAILED, KNOWN, expected 10496496.577
    test 122 hubeny6: <function flatLocal at 0x101292de0>

    test 123 haversine7 (0.00%): 8998396.669
    test 124 vincentys7 (0.00%): 8998396.669
    test 125 vincentys7 (0.00%): 8998396.669
    test 126 cosineAndoyerLambert7 (0.27%): 8974227.489  FAILED, KNOWN, expected 8998396.669
    test 127 cosineForsytheAndoyerLambert7 (0.27%): 8974238.592  FAILED, KNOWN, expected 8998396.669
    test 128 cosineLaw7 (0.00%): 8998396.669
    test 129 equirectangular7 (2.05%): 9182626.289  FAILED, KNOWN, expected 8998396.669
    test 130 euclidean7 (7.76%): 9696965.812  FAILED, KNOWN, expected 8998396.669
    test 131 flatLocal7 (1.71%): 9151831.117  FAILED, KNOWN, expected 8998396.669
    test 132 flatPolar7 (17.56%): 10578638.162  FAILED, KNOWN, expected 8998396.669
    test 133 thomas7 (0.27%): 8974216.867  FAILED, KNOWN, expected 8998396.669
    test 134 hubeny7: <function flatLocal at 0x101292de0>

    test 135 haversine8 (0.00%): 6906867.946
    test 136 vincentys8 (0.00%): 6906867.946
    test 137 vincentys8 (0.00%): 6906867.946
    test 138 cosineAndoyerLambert8 (0.13%): 6916085.969  FAILED, KNOWN, expected 6906867.946
    test 139 cosineForsytheAndoyerLambert8 (0.13%): 6916085.333  FAILED, KNOWN, expected 6906867.946
    test 140 cosineLaw8 (0.00%): 6906867.946
    test 141 equirectangular8 (0.91%): 6969581.760  FAILED, KNOWN, expected 6906867.946
    test 142 euclidean8 (6.54%): 7358706.022  FAILED, KNOWN, expected 6906867.946
    test 143 flatLocal8 (1.04%): 6978905.097  FAILED, KNOWN, expected 6906867.946
    test 144 flatPolar8 (23.23%): 8511564.321  FAILED, KNOWN, expected 6906867.946
    test 145 thomas8 (0.13%): 6916087.828  FAILED, KNOWN, expected 6906867.946
    test 146 hubeny8: <function flatLocal at 0x101292de0>

    test 147 haversine9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 148 vincentys9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 149 cosineAndoyerLambert9 (0.07%): 8050357.566  FAILED, KNOWN, expected 8044806.076
    test 150 cosineForsytheAndoyerLambert9 (0.07%): 8050363.635  FAILED, KNOWN, expected 8044806.076
    test 151 cosineLaw9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 152 flatLocal9 (15.21%): 9268128.573  FAILED, KNOWN, expected 8044806.076
    test 153 thomas9 (0.07%): 8050370.796  FAILED, KNOWN, expected 8044806.076
    test 154 hubeny9: <function flatLocal at 0x101292de0>

    test 155 intersection2: pygeodesy.formy
    test 156 intersection2(None): (25.980762, 15.0)  FAILED, KNOWN, expected (24.284126, 15.0)
# lazily imported pygeodesy.sphericalTrigonometry by formy.py line 1149
    test 157 intersection2(6371008.771415): (24.146108, 15.0)  FAILED, KNOWN, expected (24.284126, 15.0)
# lazily imported pygeodesy.sphericalNvector by formy.py line 1144
    test 158 intersection2(-6371008.771415): (24.146108, 15.0)  FAILED, KNOWN, expected (24.284126, 15.0)
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1053
# lazily imported pygeodesy.ellipsoidalExact by formy.py line 1157
# lazily imported pygeodesy.azimuthal by ellipsoidalExact.py line 62
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
# lazily imported pygeodesy.elliptic by gx.py line 426
    test 159 intersection2(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84): (24.284126, 15.0)

    test 160 intersections2: pygeodesy.formy
    test 161 intersections2(None) 1: (1.0003, 1.0003), (-1.0003, -1.0003)
    test 162 intersections2(None) 2: (2.0024, 2.0024), (-2.0024, -2.0024)
    test 163 intersections2(None) 5: (5.0381, 5.0381), (-5.0381, -5.0381)
    test 164 intersections2(None) 10: (10.3062, 10.3062), (-10.3062, -10.3062)
    test 165 intersections2(None) 20: (22.494, 22.494), (-22.494, -22.494)
    test 166 intersections2(None) 30: (38.7298, 38.7298), (-38.7298, -38.7298)
    test 167 intersections2(None) 40: (62.0732, 62.0732), (-62.0732, -62.0732)
    test 168 intersections2(R_M) 1: (-1.0, -1.0003), (1.0, 1.0003)
    test 169 intersections2(R_M) 2: (-2.0, -2.0024), (2.0, 2.0024)
    test 170 intersections2(R_M) 5: (-4.9999, -5.0383), (4.9999, 5.0383)
    test 171 intersections2(R_M) 10: (-9.9976, -10.3117), (9.9976, 10.3117)
    test 172 intersections2(R_M) 20: (-19.914, -22.6761), (19.914, 22.6761)
    test 173 intersections2(R_M) 30: (-29.2059, -40.203), (29.2059, 40.203)
    test 174 intersections2(R_M) 40: (-35.5129, -68.6826), (35.5129, 68.6826)
    test 175 intersections2(WGS84) 1: (-1.0112, -0.998), (1.0112, 0.998)
    test 176 intersections2(WGS84) 2: (-2.0224, -1.9979), (2.0224, 1.9979)
    test 177 intersections2(WGS84) 5: (-5.0558, -5.0271), (5.0558, 5.0271)
    test 178 intersections2(WGS84) 10: (-10.1081, -10.2901), (10.1081, 10.2901)
    test 179 intersections2(WGS84) 20: (-20.1241, -22.6411), (20.1241, 22.6411)
    test 180 intersections2(WGS84) 30: (-29.4898, -40.1785), (29.4898, 40.1785)
    test 181 intersections2(WGS84) 40: (-35.8146, -68.7149), (35.8146, 68.7149)

    test 182 radical2: (0.26, 2.6)
    test 183 radical2: (0.74, 7.4)
    test 184 radical2: (0.5, 5.0)
    test 185 radical2: (0.5, 0.0)
    test 186 IntersectionError: distance (10.0), radius1 (5.0) or radius2 (4.0): too distant  FAILED, KNOWN, expected distance (10.0), ...

    test 187 LimitError: equirectangular4(0.0, 0.0, 60.0, 120.0, limit=45, wrap=False): delta (120) exceeds limit (45)  FAILED, KNOWN, expected delta exceeds ...

    test 188 heightOrthometric: -1.0
    test 189 heightOrthometric: 1.0

    79 of 189 testFormy.py tests (41.8%) FAILED, incl. 71 KNOWN plus 8 DeprecationWarnings (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 1.215 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testFrechet.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.FrechetError from .frechet by testFrechet.py line 12
# lazily imported pygeodesy.fstr from .streprs by testFrechet.py line 12
# lazily imported pygeodesy.LatLon_ from .points by testFrechet.py line 12
# lazily imported pygeodesy.randomrangenerator from .hausdorff by testFrechet.py line 12
# lazily imported pygeodesy.fractional from .points by testFrechet.py line 58
# lazily imported pygeodesy.frechet_ from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetCosineAndoyerLambert from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetCosineForsytheAndoyerLambert from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetCosineLaw from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetDegrees from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetDistanceTo from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetEquirectangular from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetEuclidean from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetExact from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetFlatLocal from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetFlatPolar from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetKarney from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetHaversine from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetHubeny from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetRadians from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetThomas from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetVincentys from .frechet by testFrechet.py line 58

    testing testFrechet.py 23.03.27 isLazy=3
# lazily imported pygeodesy.booleans by iters.py line 503
    test 1 FrechetDegrees_ (degrees): (178.5, 74, 56, 19, 5400)
    test 2 FrechetDegrees_ (degrees): (175.5, 74, 52.5, 29, 10710)
    test 3 copy(FrechetDegrees_): (<class '__main__.FrechetDegrees_'>, True)
    test 4 FrechetDegrees_.copy(): (<class '__main__.FrechetDegrees_'>, True)
    test 5 FrechetRadians_ (radians): (3.11541, 74, 56, 19, 5400)
    test 6 FrechetRadians_ (radians): (3.06305, 74, 52.5, 29, 10710)
    test 7 copy(FrechetRadians_): (<class '__main__.FrechetRadians_'>, True)
    test 8 FrechetRadians_.copy(): (<class '__main__.FrechetRadians_'>, True)
    test 9 FrechetCosineAndoyerLambert (radians): (2.6319, 0, 0, 149, 5400)
    test 10 FrechetCosineAndoyerLambert (radians): (2.6319, 0, 0, 208, 10710)
    test 11 copy(FrechetCosineAndoyerLambert): (<class 'pygeodesy.frechet.FrechetCosineAndoyerLambert'>, True)
    test 12 FrechetCosineAndoyerLambert.copy(): (<class 'pygeodesy.frechet.FrechetCosineAndoyerLambert'>, True)
    test 13 FrechetCosineForsytheAndoyerLambert (radians): (2.6319, 0, 0, 149, 5400)
    test 14 FrechetCosineForsytheAndoyerLambert (radians): (2.6319, 0, 0, 208, 10710)
    test 15 copy(FrechetCosineForsytheAndoyerLambert): (<class 'pygeodesy.frechet.FrechetCosineForsytheAndoyerLambert'>, True)
    test 16 FrechetCosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.frechet.FrechetCosineForsytheAndoyerLambert'>, True)
    test 17 FrechetCosineLaw (radians): (2.63867, 0, 0, 149, 5400)
    test 18 FrechetCosineLaw (radians): (2.63867, 0, 0, 208, 10710)
    test 19 copy(FrechetCosineLaw): (<class 'pygeodesy.frechet.FrechetCosineLaw'>, True)
    test 20 FrechetCosineLaw.copy(): (<class 'pygeodesy.frechet.FrechetCosineLaw'>, True)
    test 21 FrechetEquirectangular (radians2): (7.1331, 8, 3, 138, 5400)
    test 22 FrechetEquirectangular (radians2): (7.01295, 0, 0, 208, 10710)
    test 23 copy(FrechetEquirectangular): (<class 'pygeodesy.frechet.FrechetEquirectangular'>, True)
    test 24 FrechetEquirectangular.copy(): (<class 'pygeodesy.frechet.FrechetEquirectangular'>, True)
    test 25 FrechetEuclidean (radians): (2.81124, 8, 3, 138, 5400)
    test 26 FrechetEuclidean (radians): (2.74296, 0, 0, 208, 10710)
    test 27 copy(FrechetEuclidean): (<class 'pygeodesy.frechet.FrechetEuclidean'>, True)
    test 28 FrechetEuclidean.copy(): (<class 'pygeodesy.frechet.FrechetEuclidean'>, True)
    test 29 FrechetFlatLocal (radians2): (7.13778, 8, 3, 138, 5400)
    test 30 FrechetFlatLocal (radians2): (6.92262, 0, 0, 208, 10710)
    test 31 copy(FrechetFlatLocal): (<class 'pygeodesy.frechet.FrechetFlatLocal'>, True)
    test 32 FrechetFlatLocal.copy(): (<class 'pygeodesy.frechet.FrechetFlatLocal'>, True)
    test 33 FrechetFlatPolar (radians): (2.65039, 0, 0, 149, 5400)
    test 34 FrechetFlatPolar (radians): (2.65039, 0, 0, 208, 10710)
    test 35 copy(FrechetFlatPolar): (<class 'pygeodesy.frechet.FrechetFlatPolar'>, True)
    test 36 FrechetFlatPolar.copy(): (<class 'pygeodesy.frechet.FrechetFlatPolar'>, True)
    test 37 FrechetHaversine (radians): (2.63867, 0, 0, 149, 5400)
    test 38 FrechetHaversine (radians): (2.63867, 0, 0, 208, 10710)
    test 39 copy(FrechetHaversine): (<class 'pygeodesy.frechet.FrechetHaversine'>, True)
    test 40 FrechetHaversine.copy(): (<class 'pygeodesy.frechet.FrechetHaversine'>, True)
    test 41 FrechetHubeny (radians2): (7.13778, 8, 3, 138, 5400)
    test 42 FrechetHubeny (radians2): (6.92262, 0, 0, 208, 10710)
    test 43 copy(FrechetHubeny): (<class 'pygeodesy.frechet.FrechetHubeny'>, True)
    test 44 FrechetHubeny.copy(): (<class 'pygeodesy.frechet.FrechetHubeny'>, True)
    test 45 FrechetThomas (radians): (2.63187, 0, 0, 149, 5400)
    test 46 FrechetThomas (radians): (2.63187, 0, 0, 208, 10710)
    test 47 copy(FrechetThomas): (<class 'pygeodesy.frechet.FrechetThomas'>, True)
    test 48 FrechetThomas.copy(): (<class 'pygeodesy.frechet.FrechetThomas'>, True)
    test 49 FrechetVincentys (radians): (2.63867, 0, 0, 149, 5400)
    test 50 FrechetVincentys (radians): (2.63867, 0, 0, 208, 10710)
    test 51 copy(FrechetVincentys): (<class 'pygeodesy.frechet.FrechetVincentys'>, True)
    test 52 FrechetVincentys.copy(): (<class 'pygeodesy.frechet.FrechetVincentys'>, True)
# lazily imported pygeodesy.ellipsoidalNvector by testFrechet.py line 231
# lazily imported pygeodesy.ellipsoidalVincenty by testFrechet.py line 231
# lazily imported pygeodesy.sphericalNvector by testFrechet.py line 231
# lazily imported pygeodesy.sphericalTrigonometry by testFrechet.py line 231
    test 53 FrechetDistanceTo (meter): (16786640.7064, 0, 0, 149, 5400)
    test 54 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with ellipsoidalVincenty.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16786640.7064, 0, 0, 149, 5400)
    test 55 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 56 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 57 FrechetDistanceTo (meter): (16810959.0015, 0, 0, 149, 5400)
    test 58 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with ellipsoidalNvector.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16810959.0015, 0, 0, 149, 5400)
    test 59 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 60 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 61 FrechetDistanceTo (meter): (16810959.0015, 0, 0, 149, 5400)
    test 62 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with sphericalNvector.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16810959.0015, 0, 0, 149, 5400)
    test 63 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 64 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 65 FrechetDistanceTo (meter): (16810959.0015, 0, 0, 149, 5400)
    test 66 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with sphericalTrigonometry.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16810959.0015, 0, 0, 149, 5400)
    test 67 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 68 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)

    4 of 68 testFrechet.py tests (5.9%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 3.589 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testFrozen.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34

    testing testFrozen.py 24.03.03 isLazy=3
    test 1 cmd: /opt/local/opt/python@3.12/bin/python3.12 -c 'import sys; sys.frozen = True; import pygeodesy; sys.exit(0 if pygeodesy._isfrozen else 1)'
    test 2 PYGEODESY_LAZY_IMPORT=0: 0
    test 3 PYGEODESY_LAZY_IMPORT=1: 0
    test 4 PYGEODESY_LAZY_IMPORT=2: 0

    all 4 testFrozen.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 289.529 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testFstats.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.EPS0 from .constants by testFstats.py line 11
# lazily imported pygeodesy.Fcook from .fstats by testFstats.py line 11
# lazily imported pygeodesy.Flinear from .fstats by testFstats.py line 11
# lazily imported pygeodesy.Fsum from .fsums by testFstats.py line 11
# lazily imported pygeodesy.Fsum2Tuple from .fsums by testFstats.py line 11
# lazily imported pygeodesy.Fwelford from .fstats by testFstats.py line 11

    testing testFstats.py 23.05.08 (module pygeodesy.fstats 24.05.21) isLazy=3
    test 1 Fcook: 8
    test 2 Fcook: -0.218750
    test 3 Fcook: 4.562500
    test 4 Fcook: 5.0
    test 5 Fcook: 0.656250
    test 6 Fcook: 2.0
    test 7 Fcook: 4.0
    test 8 Fcook: 1.039635

    test 9 copy: Fcook copy[8]
    test 10 copy: 5.0
    test 11 copy: 2.0
    test 12 Fcook: 8

    test 13 Doubled: 16
    test 14 Doubled: -0.218750
    test 15 Doubled: 4.5625
    test 16 Doubled: 5.0
    test 17 Doubled: 0.656250
    test 18 Doubled: 2.0
    test 19 Doubled: 4.0
    test 20 Doubled: 1.340453  FAILED, KNOWN, expected 1.039635

    test 21 Empty: Fcook Empty[16]
    test 22 Empty: 18
    test 23 Empty: TypeError('Fcook Empty[18] += None: None: not iterable')

    test 24 Excel: 8
    test 25 Excel: -1.114187
    test 26 Excel: -0.939792
    test 27 Excel: 2.735294
    test 28 Excel: 2.50
    test 29 Excel: -0.342403
    test 30 Excel: -0.427052
    test 31 Excel: 2.061553
    test 32 Excel: 4.2
    test 33 Excel: 0.470372

    test 34 Fwelford: 8
    test 35 Fwelford: 5.0
    test 36 Fwelford: 2.0
    test 37 Fwelford: 4.0

    test 38 copy: Fwelford copy[8]
    test 39 copy: 5.0
    test 40 copy: 2.0
    test 41 copy: 4.0
    test 42 copy: 8
    test 43 __add__: 18
    test 44 __add__: TypeError('Fwelford __add__[18] += None: None: not iterable')

    test 45 Flinear: 9
    test 46 Flinear: 0.988288
    test 47 Flinear: 167.682949
    test 48 Flinear: 23.422786
    test 49 __add__: 10
    test 50 __add__: 21
    test 51 __add__: TypeError('Flinear __add__[21] += None: None: not iterable')
    test 52 __add__: ValueError('Flinear __add__[21] += (1, 2, 3): odd len (3): invalid')

    1 of 52 testFstats.py tests (1.9%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 92.100 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testFsums.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.EPS from .constants by testFsums.py line 11
# lazily imported pygeodesy.Fsum from .fsums by testFsums.py line 11
# lazily imported pygeodesy.Fsum2Tuple from .fsums by testFsums.py line 11
# lazily imported pygeodesy.ResidualError from .fsums by testFsums.py line 11
# lazily imported pygeodesy.frandoms from .fmath by testFsums.py line 11
# lazily imported pygeodesy.fsum from .fsums by testFsums.py line 11
# lazily imported pygeodesy.fsum_ from .fsums by testFsums.py line 11

    testing testFsums.py 24.05.27 (module pygeodesy.fsums 24.06.11) isLazy=3
    test 1 sum1: 0.0  FAILED, KNOWN, expected 2.0
    test 2 fsum: 2.0
    test 3 Fsum: 2.0
    test 4 sum2: 1.0  FAILED, KNOWN, expected 4.0
    test 5 fsum: 4.0
    test 6 Fsum: 4.0
    test 7 sum3: 3.0  FAILED, KNOWN, expected 8.0
    test 8 fsum: 8.0
    test 9 Fsum: 8.0
    test 10 sum4: 7.0  FAILED, KNOWN, expected 16.0
    test 11 fsum: 16.0
    test 12 Fsum: 16.0
    test 13 sum5: 15.0  FAILED, KNOWN, expected 32.0
    test 14 fsum: 32.0
    test 15 Fsum: 32.0
    test 16 sum6: 31.0  FAILED, KNOWN, expected 64.0
    test 17 fsum: 64.0
    test 18 Fsum: 64.0
    test 19 sum7: 63.0  FAILED, KNOWN, expected 128.0
    test 20 fsum: 128.0
    test 21 Fsum: 128.0
    test 22 sum8: 127.0  FAILED, KNOWN, expected 256.0
    test 23 fsum: 256.0
    test 24 Fsum: 256.0
    test 25 sum9: 255.0  FAILED, KNOWN, expected 512.0
    test 26 fsum: 512.0
    test 27 Fsum: 512.0
    test 28 sum10: 511.0  FAILED, KNOWN, expected 1024.0
    test 29 fsum: 1024.0
    test 30 Fsum: 1024.0
    test 31 sum: 1.005000000001
    test 32 fsum: 1.005000000001
    test 33 Fsum: 1.005000000001
    test 34 fsum: 1.0000000000000002e+16
    test 35 Fsum: 1.0000000000000002e+16
    test 36 Fsum: 1.0000000000000002e+16


    test 37 fsum: -0.00319169599725315
    test 38 sum1: 6.996808304000741  FAILED, KNOWN, expected -0.00319169599725315
    test 39 pow(4): Fsum[121] pow(1.03773e-10, -1.40091e-27)
    test 40 pow(1): Fsum[842] pow(-0.0031917, -8.86076e-20)
    test 41 pow(0): Fsum[1] pow(1.0, 0)
    test 42 ceil: True
    test 43 floor: True
    test 44 divmod: Fsum[847] (0.0, 0)
    test 45 residual: 0
    test 46 is_exact: True
    test 47 Fsum: -0.00319169599725315
    test 48 Fsum: -0.00319169599725315

    test 49 fsum: 2.8354687709722572e-06
    test 50 sum2: 0.0  FAILED, KNOWN, expected 2.8354687709722572e-06
    test 51 pow(4): Fsum[81] pow(6.46397e-23, -5.15195e-39)  FAILED, KNOWN, expected Fsum[81] pow(6.46397e-23, 5.36881e-39)
    test 52 pow(1): Fsum[842] pow(2.83547e-06, 2.11039e-22)
    test 53 pow(0): Fsum[1] pow(1.0, 0)
    test 54 ceil: True
    test 55 floor: True
    test 56 divmod: Fsum[846] (0.0, 0)
    test 57 residual: 0
    test 58 is_exact: True
    test 59 Fsum: 2.8354687709722572e-06
    test 60 Fsum: 2.8354687709722572e-06

    test 61 fsum: 0.00017429540341974855
    test 62 sum3: 0.0  FAILED, KNOWN, expected 0.00017429540341974855
    test 63 pow(4): Fsum[144] pow(9.22877e-16, -3.43221e-32)  FAILED, KNOWN, expected Fsum[144] pow(9.22877e-16, -3.81375e-32)
    test 64 pow(1): Fsum[842] pow(0.000174295, -1.12924e-20)
    test 65 pow(0): Fsum[1] pow(1.0, 0)
    test 66 ceil: True
    test 67 floor: True
    test 68 divmod: Fsum[848] (0.0, 0)
    test 69 residual: 0
    test 70 is_exact: True
    test 71 Fsum: 0.00017429540341974855
    test 72 Fsum: 0.00017429540341974855

    test 73 fsum: -29.981550500517837
    test 74 sum4: -43.98155050051804  FAILED, KNOWN, expected -29.981550500517837
    test 75 pow(4): Fsum[196] pow(808009.0, -5.1678e-11)
    test 76 pow(1): Fsum[842] pow(-29.9816, 4.79384e-16)
    test 77 pow(0): Fsum[1] pow(1.0, 0)
    test 78 ceil: True
    test 79 floor: True
    test 80 divmod: Fsum[848] (0.0, 0)
    test 81 residual: 0
    test 82 is_exact: True
    test 83 Fsum: -29.981550500517837
    test 84 Fsum: -29.981550500517837

    test 85 fsum: 0.0015522169092466874
    test 86 sum5: 0.0  FAILED, KNOWN, expected 0.0015522169092466874
    test 87 pow(4): Fsum[144] pow(5.8051e-12, 5.8841e-29)
    test 88 pow(1): Fsum[842] pow(0.00155222, -5.00653e-20)
    test 89 pow(0): Fsum[1] pow(1.0, 0)
    test 90 ceil: True
    test 91 floor: True
    test 92 divmod: Fsum[848] (0.0, 0)
    test 93 residual: 0
    test 94 is_exact: True
    test 95 Fsum: 0.0015522169092466874
    test 96 Fsum: 0.0015522169092466874

    test 97 fsum: -0.034132476302548356
    test 98 sum6: 0.0  FAILED, KNOWN, expected -0.034132476302548356
    test 99 pow(4): Fsum[441] pow(1.35729e-06, 7.8886e-24)  FAILED, KNOWN, expected Fsum[441] pow(1.35729e-06, -1.16438e-23)
    test 100 pow(1): Fsum[842] pow(-0.0341325, -1.3809e-18)
    test 101 pow(0): Fsum[1] pow(1.0, 0)
    test 102 ceil: True
    test 103 floor: True
    test 104 divmod: Fsum[853] (0.0, 0)
    test 105 residual: 0
    test 106 is_exact: True
    test 107 Fsum: -0.034132476302548356
    test 108 Fsum: -0.034132476302548356

    test 109 fsum: 1.8789052503308425e-11
    test 110 sum7: 0.0  FAILED, KNOWN, expected 1.8789052503308425e-11
    test 111 pow(4): Fsum[16] pow(1.24629e-43, 5.14935e-60)
    test 112 pow(1): Fsum[842] pow(1.87891e-11, 1.94079e-28)
    test 113 pow(0): Fsum[1] pow(1.0, 0)
    test 114 ceil: True
    test 115 floor: True
    test 116 divmod: Fsum[845] (0.0, 0)
    test 117 residual: 0
    test 118 is_exact: True
    test 119 Fsum: 1.8789052503308425e-11
    test 120 Fsum: 1.8789052503308425e-11

    test 121 fsum: -0.019697730441260147
    test 122 sum8: 0.0  FAILED, KNOWN, expected -0.019697730441260147
    test 123 pow(4): Fsum[441] pow(1.50544e-07, -4.23825e-26)  FAILED, KNOWN, expected Fsum[441] pow(1.50544e-07, -5.47861e-24)
    test 124 pow(1): Fsum[842] pow(-0.0196977, -1.37466e-18)
    test 125 pow(0): Fsum[1] pow(1.0, 0)
    test 126 ceil: True
    test 127 floor: True
    test 128 divmod: Fsum[853] (0.0, 0)
    test 129 residual: 0
    test 130 is_exact: True
    test 131 Fsum: -0.019697730441260147
    test 132 Fsum: -0.019697730441260147

    test 133 fsum: 1.439598783528141e-07
    test 134 sum9: 0.0  FAILED, KNOWN, expected 1.439598783528141e-07
    test 135 pow(4): Fsum[36] pow(4.29503e-28, -9.04754e-45)
    test 136 pow(1): Fsum[842] pow(1.4396e-07, -7.58134e-25)
    test 137 pow(0): Fsum[1] pow(1.0, 0)
    test 138 ceil: True
    test 139 floor: True
    test 140 divmod: Fsum[845] (0.0, 0)
    test 141 residual: 0
    test 142 is_exact: True
    test 143 Fsum: 1.439598783528141e-07
    test 144 Fsum: 1.439598783528141e-07

    test 145 fsum: 7.120699026669304e-12
    test 146 sum10: -13.999999999992717  FAILED, KNOWN, expected 7.120699026669304e-12
    test 147 pow(4): Fsum[25] pow(2.57093e-45, 1.348e-61)
    test 148 pow(1): Fsum[842] pow(7.1207e-12, 9.33386e-29)
    test 149 pow(0): Fsum[1] pow(1.0, 0)
    test 150 ceil: True
    test 151 floor: True
    test 152 divmod: Fsum[846] (0.0, 0)
    test 153 residual: 0
    test 154 is_exact: True
    test 155 Fsum: 7.120699026669304e-12
    test 156 Fsum: 7.120699026669304e-12

    test 157 fsum: 1.7551729359121674e-12
    test 158 sum11: 0.0  FAILED, KNOWN, expected 1.7551729359121674e-12
    test 159 pow(4): Fsum[16] pow(9.49029e-48, 4.80058e-64)
    test 160 pow(1): Fsum[842] pow(1.75517e-12, -3.40008e-29)
    test 161 pow(0): Fsum[1] pow(1.0, 0)
    test 162 ceil: True
    test 163 floor: True
    test 164 divmod: Fsum[846] (0.0, 0)
    test 165 residual: 0
    test 166 is_exact: True
    test 167 Fsum: 1.7551729359121674e-12
    test 168 Fsum: 1.7551729359121674e-12

    test 169 fsum: -6.419520833893949e-12
    test 170 sum12: -21.000000000006608  FAILED, KNOWN, expected -6.419520833893949e-12
    test 171 pow(4): Fsum[16] pow(1.69828e-45, 8.49645e-62)  FAILED, KNOWN, expected Fsum[16] pow(1.69828e-45, 1.60258e-62)
    test 172 pow(1): Fsum[842] pow(-6.41952e-12, -2.44035e-28)
    test 173 pow(0): Fsum[1] pow(1.0, 0)
    test 174 ceil: True
    test 175 floor: True
    test 176 divmod: Fsum[846] (0.0, 0)
    test 177 residual: 0
    test 178 is_exact: True
    test 179 Fsum: -6.419520833893949e-12
    test 180 Fsum: -6.419520833893949e-12

    test 181 fsum: 2.7818975936568664e-12
    test 182 sum13: 0.0  FAILED, KNOWN, expected 2.7818975936568664e-12
    test 183 pow(4): Fsum[25] pow(5.98914e-47, 4.08661e-63)  FAILED, KNOWN, expected Fsum[25] pow(5.98914e-47, 1.7985e-63)
    test 184 pow(1): Fsum[842] pow(2.7819e-12, -6.54566e-29)
    test 185 pow(0): Fsum[1] pow(1.0, 0)
    test 186 ceil: True
    test 187 floor: True
    test 188 divmod: Fsum[846] (0.0, 0)
    test 189 residual: 0
    test 190 is_exact: True
    test 191 Fsum: 2.7818975936568664e-12
    test 192 Fsum: 2.7818975936568664e-12

    test 193 fsum: 0.5454724290069308
    test 194 sum14: -20.454527570992923  FAILED, KNOWN, expected 0.5454724290069308
    test 195 pow(4): Fsum[169] pow(0.0885302, -1.93679e-18)  FAILED, KNOWN, expected Fsum[169] pow(0.0885302, 7.02221e-19)
    test 196 pow(1): Fsum[842] pow(0.545472, 2.65234e-17)
    test 197 pow(0): Fsum[1] pow(1.0, 0)
    test 198 ceil: True
    test 199 floor: True
    test 200 divmod: Fsum[847] (0.0, 0)
    test 201 residual: 0
    test 202 is_exact: True
    test 203 Fsum: 0.5454724290069308
    test 204 Fsum: 0.5454724290069308

    test 205 fsum: 0.7027770820862784
    test 206 sum15: 0.0  FAILED, KNOWN, expected 0.7027770820862784
    test 207 pow(4): Fsum[36] pow(0.243933, 1.31664e-17)  FAILED, KNOWN, expected Fsum[36] pow(0.243933, 1.57114e-18)
    test 208 pow(1): Fsum[842] pow(0.702777, 4.89773e-17)
    test 209 pow(0): Fsum[1] pow(1.0, 0)
    test 210 ceil: True
    test 211 floor: True
    test 212 divmod: Fsum[845] (0.0, 0)
    test 213 residual: 0
    test 214 is_exact: True
    test 215 Fsum: 0.7027770820862784
    test 216 Fsum: 0.7027770820862784

    test 217 fsum: -4.888237309892614e-06
    test 218 sum16: 6.999995111764818  FAILED, KNOWN, expected -4.888237309892614e-06
    test 219 pow(4): Fsum[196] pow(5.70965e-22, -3.54657e-38)  FAILED, KNOWN, expected Fsum[196] pow(5.70965e-22, 7.83017e-39)
    test 220 pow(1): Fsum[842] pow(-4.88824e-06, 4.06414e-22)
    test 221 pow(0): Fsum[1] pow(1.0, 0)
    test 222 ceil: True
    test 223 floor: True
    test 224 divmod: Fsum[849] (0.0, 0)
    test 225 residual: 0
    test 226 is_exact: True
    test 227 Fsum: -4.888237309892614e-06
    test 228 Fsum: -4.888237309892614e-06

    test 229 fsum: 0.4244461794181489
    test 230 sum17: 0.0  FAILED, KNOWN, expected 0.4244461794181489
    test 231 pow(4): Fsum[289] pow(0.0324557, -2.38683e-18)  FAILED, KNOWN, expected Fsum[289] pow(0.0324557, 2.61346e-18)
    test 232 pow(1): Fsum[842] pow(0.424446, 2.48927e-17)
    test 233 pow(0): Fsum[1] pow(1.0, 0)
    test 234 ceil: True
    test 235 floor: True
    test 236 divmod: Fsum[851] (0.0, 0)
    test 237 residual: 0
    test 238 is_exact: True
    test 239 Fsum: 0.4244461794181489
    test 240 Fsum: 0.4244461794181489

    test 241 fsum: -3.6329115984968596e-12
    test 242 sum18: 0.0  FAILED, KNOWN, expected -3.6329115984968596e-12
    test 243 pow(4): Fsum[25] pow(1.74188e-46, 6.28063e-63)  FAILED, KNOWN, expected Fsum[25] pow(1.74188e-46, 6.25355e-63)
    test 244 pow(1): Fsum[842] pow(-3.63291e-12, 6.86497e-29)
    test 245 pow(0): Fsum[1] pow(1.0, 0)
    test 246 ceil: True
    test 247 floor: True
    test 248 divmod: Fsum[847] (0.0, 0)
    test 249 residual: 0
    test 250 is_exact: True
    test 251 Fsum: -3.6329115984968596e-12
    test 252 Fsum: -3.6329115984968596e-12

    test 253 fsum: -6.940121049444729e-07
    test 254 sum19: 6.999999305988954  FAILED, KNOWN, expected -6.940121049444729e-07
    test 255 pow(4): Fsum[64] pow(2.31989e-25, -7.89679e-42)  FAILED, KNOWN, expected Fsum[64] pow(2.31989e-25, 4.60549e-42)
    test 256 pow(1): Fsum[842] pow(-6.94012e-07, -2.84356e-23)
    test 257 pow(0): Fsum[1] pow(1.0, 0)
    test 258 ceil: True
    test 259 floor: True
    test 260 divmod: Fsum[848] (0.0, 0)
    test 261 residual: 0
    test 262 is_exact: True
    test 263 Fsum: -6.940121049444729e-07
    test 264 Fsum: -6.940121049444729e-07

    test 265 fsum: -6.335830103296656e-12
    test 266 sum20: -7.000000000006821  FAILED, KNOWN, expected -6.335830103296656e-12
    test 267 pow(4): Fsum[25] pow(1.61144e-45, -1.22107e-61)
    test 268 pow(1): Fsum[842] pow(-6.33583e-12, 1.20024e-28)
    test 269 pow(0): Fsum[1] pow(1.0, 0)
    test 270 ceil: True
    test 271 floor: True
    test 272 divmod: Fsum[846] (0.0, 0)
    test 273 residual: 0
    test 274 is_exact: True
    test 275 Fsum: -6.335830103296656e-12
    test 276 Fsum: -6.335830103296656e-12

    test 277 fsum: -0.02127277783682216
    test 278 sum21: -7.021272777837045  FAILED, KNOWN, expected -0.02127277783682216
    test 279 pow(4): Fsum[484] pow(2.04784e-07, -9.27202e-24)  FAILED, KNOWN, expected Fsum[484] pow(2.04784e-07, -1.121e-23)
    test 280 pow(1): Fsum[842] pow(-0.0212728, -1.03337e-18)
    test 281 pow(0): Fsum[1] pow(1.0, 0)
    test 282 ceil: True
    test 283 floor: True
    test 284 divmod: Fsum[853] (0.0, 0)
    test 285 residual: 0
    test 286 is_exact: True
    test 287 Fsum: -0.02127277783682216
    test 288 Fsum: -0.02127277783682216

    test 289 fsum: 0.000742076030705746
    test 290 sum22: 14.000742076031404  FAILED, KNOWN, expected 0.000742076030705746
    test 291 pow(4): Fsum[100] pow(3.03245e-13, 9.34103e-30)  FAILED, KNOWN, expected Fsum[100] pow(3.03245e-13, -2.78164e-30)
    test 292 pow(1): Fsum[842] pow(0.000742076, -2.51723e-20)
    test 293 pow(0): Fsum[1] pow(1.0, 0)
    test 294 ceil: True
    test 295 floor: True
    test 296 divmod: Fsum[847] (0.0, 0)
    test 297 residual: 0
    test 298 is_exact: True
    test 299 Fsum: 0.000742076030705746
    test 300 Fsum: 0.000742076030705746

    test 301 fsum: 5.839563966435424e-05
    test 302 sum23: 0.0  FAILED, KNOWN, expected 5.839563966435424e-05
    test 303 pow(4): Fsum[196] pow(1.16284e-17, -6.80282e-34)
    test 304 pow(1): Fsum[842] pow(5.83956e-05, 1.08027e-21)
    test 305 pow(0): Fsum[1] pow(1.0, 0)
    test 306 ceil: True
    test 307 floor: True
    test 308 divmod: Fsum[849] (0.0, 0)
    test 309 residual: 0
    test 310 is_exact: True
    test 311 Fsum: 5.839563966435424e-05
    test 312 Fsum: 5.839563966435424e-05

    test 313 fsum: -0.18113597284272834
    test 314 sum24: 0.0  FAILED, KNOWN, expected -0.18113597284272834
    test 315 pow(4): Fsum[169] pow(0.00107651, -2.15364e-20)  FAILED, KNOWN, expected Fsum[169] pow(0.00107651, 3.81937e-20)
    test 316 pow(1): Fsum[842] pow(-0.181136, -8.21556e-18)
    test 317 pow(0): Fsum[1] pow(1.0, 0)
    test 318 ceil: True
    test 319 floor: True
    test 320 divmod: Fsum[849] (0.0, 0)
    test 321 residual: 0
    test 322 is_exact: True
    test 323 Fsum: -0.18113597284272834
    test 324 Fsum: -0.18113597284272834

    test 325 fsum: -3.916768920236704e-05
    test 326 sum25: 0.0  FAILED, KNOWN, expected -3.916768920236704e-05
    test 327 pow(4): Fsum[121] pow(2.35349e-18, 7.76119e-35)  FAILED, KNOWN, expected Fsum[121] pow(2.35349e-18, 1.45552e-34)
    test 328 pow(1): Fsum[842] pow(-3.91677e-05, 2.31696e-21)
    test 329 pow(0): Fsum[1] pow(1.0, 0)
    test 330 ceil: True
    test 331 floor: True
    test 332 divmod: Fsum[850] (0.0, 0)
    test 333 residual: 0
    test 334 is_exact: True
    test 335 Fsum: -3.916768920236704e-05
    test 336 Fsum: -3.916768920236704e-05

    test 337 fsum: 0.00017486215495299815
    test 338 sum26: -13.999825137844685  FAILED, KNOWN, expected 0.00017486215495299815
    test 339 pow(4): Fsum[256] pow(9.34939e-16, 3.897e-32)  FAILED, KNOWN, expected Fsum[256] pow(9.34939e-16, 4.40949e-32)
    test 340 pow(1): Fsum[842] pow(0.000174862, 1.15227e-20)
    test 341 pow(0): Fsum[1] pow(1.0, 0)
    test 342 ceil: True
    test 343 floor: True
    test 344 divmod: Fsum[850] (0.0, 0)
    test 345 residual: 0
    test 346 is_exact: True
    test 347 Fsum: 0.00017486215495299815
    test 348 Fsum: 0.00017486215495299815

    test 349 fsum: 0.10534447582874032
    test 350 sum27: 0.0  FAILED, KNOWN, expected 0.10534447582874032
    test 351 pow(4): Fsum[289] pow(0.000123154, -1.35064e-20)  FAILED, KNOWN, expected Fsum[289] pow(0.000123154, 5.74459e-21)
    test 352 pow(1): Fsum[842] pow(0.105344, 5.34526e-18)
    test 353 pow(0): Fsum[1] pow(1.0, 0)
    test 354 ceil: True
    test 355 floor: True
    test 356 divmod: Fsum[850] (0.0, 0)
    test 357 residual: 0
    test 358 is_exact: True
    test 359 Fsum: 0.10534447582874032
    test 360 Fsum: 0.10534447582874032

    test 361 fsum: -0.00024123562200625864
    test 362 sum28: 0.0  FAILED, KNOWN, expected -0.00024123562200625864
    test 363 pow(4): Fsum[81] pow(3.38661e-15, -1.62571e-31)
    test 364 pow(1): Fsum[842] pow(-0.000241236, 2.89508e-21)
    test 365 pow(0): Fsum[1] pow(1.0, 0)
    test 366 ceil: True
    test 367 floor: True
    test 368 divmod: Fsum[848] (0.0, 0)
    test 369 residual: 0
    test 370 is_exact: True
    test 371 Fsum: -0.00024123562200625864
    test 372 Fsum: -0.00024123562200625864

    test 373 fsum: -5.8100654200643855e-09
    test 374 sum29: 0.0  FAILED, KNOWN, expected -5.8100654200643855e-09
    test 375 pow(4): Fsum[81] pow(1.13953e-33, 1.67006e-50)  FAILED, KNOWN, expected Fsum[81] pow(1.13953e-33, -2.09637e-50)
    test 376 pow(1): Fsum[842] pow(-5.81007e-09, 1.96753e-25)
    test 377 pow(0): Fsum[1] pow(1.0, 0)
    test 378 ceil: True
    test 379 floor: True
    test 380 divmod: Fsum[848] (0.0, 0)
    test 381 residual: 0
    test 382 is_exact: True
    test 383 Fsum: -5.8100654200643855e-09
    test 384 Fsum: -5.8100654200643855e-09

    test 385 fsum: -1.4395920954435712e-09
    test 386 sum30: 0.0  FAILED, KNOWN, expected -1.4395920954435712e-09
    test 387 pow(4): Fsum[36] pow(4.29495e-36, 1.08253e-52)  FAILED, KNOWN, expected Fsum[36] pow(4.29495e-36, 2.60016e-52)
    test 388 pow(1): Fsum[842] pow(-1.43959e-09, -6.50627e-26)
    test 389 pow(0): Fsum[1] pow(1.0, 0)
    test 390 ceil: True
    test 391 floor: True
    test 392 divmod: Fsum[847] (0.0, 0)
    test 393 residual: 0
    test 394 is_exact: True
    test 395 Fsum: -1.4395920954435712e-09
    test 396 Fsum: -1.4395920954435712e-09

    test 397 fsum: -0.0035038542229795296
    test 398 sum31: 0.0  FAILED, KNOWN, expected -0.0035038542229795296
    test 399 pow(4): Fsum[121] pow(1.50725e-10, -8.36316e-27)  FAILED, KNOWN, expected Fsum[121] pow(1.50725e-10, -3.3118e-27)
    test 400 pow(1): Fsum[842] pow(-0.00350385, 1.40119e-19)
    test 401 pow(0): Fsum[1] pow(1.0, 0)
    test 402 ceil: True
    test 403 floor: True
    test 404 divmod: Fsum[848] (0.0, 0)
    test 405 residual: 0
    test 406 is_exact: True
    test 407 Fsum: -0.0035038542229795296
    test 408 Fsum: -0.0035038542229795296

    test 409 fsum: -1.5886285742756648e-06
    test 410 sum32: -14.00000158862764  FAILED, KNOWN, expected -1.5886285742756648e-06
    test 411 pow(4): Fsum[144] pow(6.36927e-24, -4.32157e-41)  FAILED, KNOWN, expected Fsum[144] pow(6.36927e-24, -3.27862e-40)
    test 412 pow(1): Fsum[842] pow(-1.58863e-06, 8.40045e-23)
    test 413 pow(0): Fsum[1] pow(1.0, 0)
    test 414 ceil: True
    test 415 floor: True
    test 416 divmod: Fsum[849] (0.0, 0)
    test 417 residual: 0
    test 418 is_exact: True
    test 419 Fsum: -1.5886285742756648e-06
    test 420 Fsum: -1.5886285742756648e-06

    test 421 fsum: 0.0009525895492142651
    test 422 sum33: 7.000952589548838  FAILED, KNOWN, expected 0.0009525895492142651
    test 423 pow(4): Fsum[81] pow(8.23423e-13, 1.95599e-29)  FAILED, KNOWN, expected Fsum[81] pow(8.23423e-13, 2.44565e-29)
    test 424 pow(1): Fsum[842] pow(0.00095259, -4.99173e-20)
    test 425 pow(0): Fsum[1] pow(1.0, 0)
    test 426 ceil: True
    test 427 floor: True
    test 428 divmod: Fsum[846] (0.0, 0)
    test 429 residual: 0
    test 430 is_exact: True
    test 431 Fsum: 0.0009525895492142651
    test 432 Fsum: 0.0009525895492142651

    test 433 fsum: 0.024112459207811295
    test 434 sum34: -6.975887540792112  FAILED, KNOWN, expected 0.024112459207811295
    test 435 pow(4): Fsum[196] pow(3.38038e-07, 6.58748e-24)  FAILED, KNOWN, expected Fsum[196] pow(3.38038e-07, -5.50399e-24)
    test 436 pow(1): Fsum[842] pow(0.0241125, -8.2658e-19)
    test 437 pow(0): Fsum[1] pow(1.0, 0)
    test 438 ceil: True
    test 439 floor: True
    test 440 divmod: Fsum[849] (0.0, 0)
    test 441 residual: 0
    test 442 is_exact: True
    test 443 Fsum: 0.024112459207811295
    test 444 Fsum: 0.024112459207811295

    test 445 fsum: 0.5935398672206705
    test 446 sum35: -6.406460132779667  FAILED, KNOWN, expected 0.5935398672206705
    test 447 pow(4): Fsum[324] pow(0.124108, 1.49854e-18)  FAILED, KNOWN, expected Fsum[324] pow(0.124108, 4.01991e-18)
    test 448 pow(1): Fsum[842] pow(0.59354, 3.58809e-17)
    test 449 pow(0): Fsum[1] pow(1.0, 0)
    test 450 ceil: True
    test 451 floor: True
    test 452 divmod: Fsum[851] (0.0, 0)
    test 453 residual: 0
    test 454 is_exact: True
    test 455 Fsum: 0.5935398672206705
    test 456 Fsum: 0.5935398672206705

    test 457 fsum: -5.832033223020954e-08
    test 458 sum36: 0.0  FAILED, KNOWN, expected -5.832033223020954e-08
    test 459 pow(4): Fsum[36] pow(1.15686e-29, -1.22053e-46)
    test 460 pow(1): Fsum[842] pow(-5.83203e-08, 1.53826e-25)
    test 461 pow(0): Fsum[1] pow(1.0, 0)
    test 462 ceil: True
    test 463 floor: True
    test 464 divmod: Fsum[847] (0.0, 0)
    test 465 residual: 0
    test 466 is_exact: True
    test 467 Fsum: -5.832033223020954e-08
    test 468 Fsum: -5.832033223020954e-08

    test 469 fsum: -9.913576780001516e-06
    test 470 sum37: 0.0  FAILED, KNOWN, expected -9.913576780001516e-06
    test 471 pow(4): Fsum[169] pow(9.65876e-21, 6.52561e-37)  FAILED, KNOWN, expected Fsum[169] pow(9.65876e-21, -3.23209e-38)
    test 472 pow(1): Fsum[842] pow(-9.91358e-06, -8.19313e-22)
    test 473 pow(0): Fsum[1] pow(1.0, 0)
    test 474 ceil: True
    test 475 floor: True
    test 476 divmod: Fsum[849] (0.0, 0)
    test 477 residual: 0
    test 478 is_exact: True
    test 479 Fsum: -9.913576780001516e-06
    test 480 Fsum: -9.913576780001516e-06

    test 481 fsum: 0.01610305685663228
    test 482 sum38: 21.016103056855172  FAILED, KNOWN, expected 0.01610305685663228
    test 483 pow(4): Fsum[576] pow(6.72409e-08, -5.7183e-24)
    test 484 pow(1): Fsum[842] pow(0.0161031, 4.50024e-19)
    test 485 pow(0): Fsum[1] pow(1.0, 0)
    test 486 ceil: True
    test 487 floor: True
    test 488 divmod: Fsum[853] (0.0, 0)
    test 489 residual: 0
    test 490 is_exact: True
    test 491 Fsum: 0.01610305685663228
    test 492 Fsum: 0.01610305685663228

    test 493 fsum: -0.0012334015927132867
    test 494 sum39: 0.0  FAILED, KNOWN, expected -0.0012334015927132867
    test 495 pow(4): Fsum[121] pow(2.31429e-12, 5.11212e-30)  FAILED, KNOWN, expected Fsum[121] pow(2.31429e-12, 8.68654e-29)
    test 496 pow(1): Fsum[842] pow(-0.0012334, 8.51621e-20)
    test 497 pow(0): Fsum[1] pow(1.0, 0)
    test 498 ceil: True
    test 499 floor: True
    test 500 divmod: Fsum[848] (0.0, 0)
    test 501 residual: 0
    test 502 is_exact: True
    test 503 Fsum: -0.0012334015927132867
    test 504 Fsum: -0.0012334015927132867

    test 505 fsum: -5.799755613533763e-07
    test 506 sum40: 0.0  FAILED, KNOWN, expected -5.799755613533763e-07
    test 507 pow(4): Fsum[100] pow(1.13146e-25, 1.07238e-41)  FAILED, KNOWN, expected Fsum[100] pow(1.13146e-25, -6.25859e-42)
    test 508 pow(1): Fsum[842] pow(-5.79976e-07, 2.97828e-23)
    test 509 pow(0): Fsum[1] pow(1.0, 0)
    test 510 ceil: True
    test 511 floor: True
    test 512 divmod: Fsum[848] (0.0, 0)
    test 513 residual: 0
    test 514 is_exact: True
    test 515 Fsum: -5.799755613533763e-07
    test 516 Fsum: -5.799755613533763e-07

    test 517 fsum: -2.9879526075598327e-07
    test 518 sum41: 0.0  FAILED, KNOWN, expected -2.9879526075598327e-07
    test 519 pow(4): Fsum[121] pow(7.97067e-27, -2.29612e-43)
    test 520 pow(1): Fsum[842] pow(-2.98795e-07, 2.15186e-24)
    test 521 pow(0): Fsum[1] pow(1.0, 0)
    test 522 ceil: True
    test 523 floor: True
    test 524 divmod: Fsum[849] (0.0, 0)
    test 525 residual: 0
    test 526 is_exact: True
    test 527 Fsum: -2.9879526075598327e-07
    test 528 Fsum: -2.9879526075598327e-07

    test 529 fsum: -2.4960067361656633e-12
    test 530 sum42: 0.0  FAILED, KNOWN, expected -2.4960067361656633e-12
    test 531 pow(4): Fsum[16] pow(3.88135e-47, 2.22835e-63)  FAILED, KNOWN, expected Fsum[16] pow(3.88135e-47, 1.3423e-64)
    test 532 pow(1): Fsum[842] pow(-2.49601e-12, -1.82997e-28)
    test 533 pow(0): Fsum[1] pow(1.0, 0)
    test 534 ceil: True
    test 535 floor: True
    test 536 divmod: Fsum[846] (0.0, 0)
    test 537 residual: 0
    test 538 is_exact: True
    test 539 Fsum: -2.4960067361656633e-12
    test 540 Fsum: -2.4960067361656633e-12

    test 541 fsum: 0.005436002643794438
    test 542 sum43: 0.0  FAILED, KNOWN, expected 0.005436002643794438
    test 543 pow(4): Fsum[484] pow(8.7321e-10, 5.0922e-26)  FAILED, KNOWN, expected Fsum[484] pow(8.7321e-10, -4.91977e-26)
    test 544 pow(1): Fsum[842] pow(0.005436, -2.32387e-19)
    test 545 pow(0): Fsum[1] pow(1.0, 0)
    test 546 ceil: True
    test 547 floor: True
    test 548 divmod: Fsum[852] (0.0, 0)
    test 549 residual: 0
    test 550 is_exact: True
    test 551 Fsum: 0.005436002643794438
    test 552 Fsum: 0.005436002643794438

    test 553 fsum: 0.014793474064123253
    test 554 sum44: 0.0  FAILED, KNOWN, expected 0.014793474064123253
    test 555 pow(4): Fsum[169] pow(4.7894e-08, 1.45934e-24)
    test 556 pow(1): Fsum[842] pow(0.0147935, 1.1269e-19)
    test 557 pow(0): Fsum[1] pow(1.0, 0)
    test 558 ceil: True
    test 559 floor: True
    test 560 divmod: Fsum[848] (0.0, 0)
    test 561 residual: 0
    test 562 is_exact: True
    test 563 Fsum: 0.014793474064123253
    test 564 Fsum: 0.014793474064123253

    test 565 fsum: 0.0001798980544424236
    test 566 sum45: 0.0  FAILED, KNOWN, expected 0.0001798980544424236
    test 567 pow(4): Fsum[100] pow(1.04738e-15, -7.14809e-32)
    test 568 pow(1): Fsum[842] pow(0.000179898, -3.06938e-21)
    test 569 pow(0): Fsum[1] pow(1.0, 0)
    test 570 ceil: True
    test 571 floor: True
    test 572 divmod: Fsum[847] (0.0, 0)
    test 573 residual: 0
    test 574 is_exact: True
    test 575 Fsum: 0.0001798980544424236
    test 576 Fsum: 0.0001798980544424236

    test 577 fsum: -1.4570173629211471
    test 578 sum46: -8.457017362921109  FAILED, KNOWN, expected -1.4570173629211471
    test 579 pow(4): Fsum[169] pow(4.5067, -1.62549e-16)
    test 580 pow(1): Fsum[842] pow(-1.45702, 1.3138e-17)
    test 581 pow(0): Fsum[1] pow(1.0, 0)
    test 582 ceil: True
    test 583 floor: True
    test 584 divmod: Fsum[849] (0.0, 0)
    test 585 residual: 0
    test 586 is_exact: True
    test 587 Fsum: -1.4570173629211471
    test 588 Fsum: -1.4570173629211471

    test 589 fsum: -0.0001633155932825346
    test 590 sum47: 0.0  FAILED, KNOWN, expected -0.0001633155932825346
    test 591 pow(4): Fsum[144] pow(7.11395e-16, -2.67687e-32)  FAILED, KNOWN, expected Fsum[144] pow(7.11395e-16, -1.64113e-32)
    test 592 pow(1): Fsum[842] pow(-0.000163316, 1.16662e-20)
    test 593 pow(0): Fsum[1] pow(1.0, 0)
    test 594 ceil: True
    test 595 floor: True
    test 596 divmod: Fsum[849] (0.0, 0)
    test 597 residual: 0
    test 598 is_exact: True
    test 599 Fsum: -0.0001633155932825346
    test 600 Fsum: -0.0001633155932825346

    test 601 fsum: -3.648298939456231e-06
    test 602 sum48: 0.0  FAILED, KNOWN, expected -3.648298939456231e-06
    test 603 pow(4): Fsum[25] pow(1.77158e-22, 7.32903e-40)
    test 604 pow(1): Fsum[842] pow(-3.6483e-06, -3.77325e-24)
    test 605 pow(0): Fsum[1] pow(1.0, 0)
    test 606 ceil: True
    test 607 floor: True
    test 608 divmod: Fsum[846] (0.0, 0)
    test 609 residual: 0
    test 610 is_exact: True
    test 611 Fsum: -3.648298939456231e-06
    test 612 Fsum: -3.648298939456231e-06

    test 613 fsum: 72.52321865118239
    test 614 sum49: 72.52321865118311  FAILED, KNOWN, expected 72.52321865118239
    test 615 pow(4): Fsum[441] pow(2.76636e+07, -1.22968e-09)
    test 616 pow(1): Fsum[842] pow(72.5232, 1.63563e-15)
    test 617 pow(0): Fsum[1] pow(1.0, 0)
    test 618 ceil: True
    test 619 floor: True
    test 620 divmod: Fsum[852] (0.0, 0)
    test 621 residual: 0
    test 622 is_exact: True
    test 623 Fsum: 72.52321865118239
    test 624 Fsum: 72.52321865118239

    test 625 fsum: -6.62077295293483e-08
    test 626 sum50: 0.0  FAILED, KNOWN, expected -6.62077295293483e-08
    test 627 pow(4): Fsum[25] pow(1.92148e-29, 1.04741e-45)  FAILED, KNOWN, expected Fsum[25] pow(1.92148e-29, 3.92065e-46)
    test 628 pow(1): Fsum[842] pow(-6.62077e-08, 5.05521e-24)
    test 629 pow(0): Fsum[1] pow(1.0, 0)
    test 630 ceil: True
    test 631 floor: True
    test 632 divmod: Fsum[846] (0.0, 0)
    test 633 residual: 0
    test 634 is_exact: True
    test 635 Fsum: -6.62077295293483e-08
    test 636 Fsum: -6.62077295293483e-08

    test 637 fsum: 0.00014495678925530912
    test 638 sum51: 0.0  FAILED, KNOWN, expected 0.00014495678925530912
    test 639 pow(4): Fsum[9] pow(4.41524e-16, -2.67587e-33)  FAILED, KNOWN, expected Fsum[9] pow(4.41524e-16, 1.75448e-32)
    test 640 pow(1): Fsum[842] pow(0.000144957, 7.14643e-21)
    test 641 pow(0): Fsum[1] pow(1.0, 0)
    test 642 ceil: True
    test 643 floor: True
    test 644 divmod: Fsum[844] (0.0, 0)
    test 645 residual: 0
    test 646 is_exact: True
    test 647 Fsum: 0.00014495678925530912
    test 648 Fsum: 0.00014495678925530912

    test 649 fsum: -3.125931147748425e-08
    test 650 sum52: 0.0  FAILED, KNOWN, expected -3.125931147748425e-08
    test 651 pow(4): Fsum[36] pow(9.54811e-31, 1.68089e-47)  FAILED, KNOWN, expected Fsum[36] pow(9.54811e-31, 3.43543e-47)
    test 652 pow(1): Fsum[842] pow(-3.12593e-08, -1.85843e-24)
    test 653 pow(0): Fsum[1] pow(1.0, 0)
    test 654 ceil: True
    test 655 floor: True
    test 656 divmod: Fsum[846] (0.0, 0)
    test 657 residual: 0
    test 658 is_exact: True
    test 659 Fsum: -3.125931147748425e-08
    test 660 Fsum: -3.125931147748425e-08

    test 661 fsum: 3.565211571326639e-08
    test 662 sum53: 0.0  FAILED, KNOWN, expected 3.565211571326639e-08
    test 663 pow(4): Fsum[49] pow(1.61563e-30, -1.00138e-46)  FAILED, KNOWN, expected Fsum[49] pow(1.61563e-30, 1.50537e-46)
    test 664 pow(1): Fsum[842] pow(3.56521e-08, 2.21339e-24)
    test 665 pow(0): Fsum[1] pow(1.0, 0)
    test 666 ceil: True
    test 667 floor: True
    test 668 divmod: Fsum[846] (0.0, 0)
    test 669 residual: 0
    test 670 is_exact: True
    test 671 Fsum: 3.565211571326639e-08
    test 672 Fsum: 3.565211571326639e-08

    test 673 fsum: -0.2640437444254588
    test 674 sum54: 0.0  FAILED, KNOWN, expected -0.2640437444254588
    test 675 pow(4): Fsum[324] pow(0.00486075, 1.13993e-19)  FAILED, KNOWN, expected Fsum[324] pow(0.00486075, 1.62717e-19)
    test 676 pow(1): Fsum[842] pow(-0.264044, 1.0231e-17)
    test 677 pow(0): Fsum[1] pow(1.0, 0)
    test 678 ceil: True
    test 679 floor: True
    test 680 divmod: Fsum[851] (0.0, 0)
    test 681 residual: 0
    test 682 is_exact: True
    test 683 Fsum: -0.2640437444254588
    test 684 Fsum: -0.2640437444254588

    test 685 fsum: -6.871793665388379e-08
    test 686 sum55: 0.0  FAILED, KNOWN, expected -6.871793665388379e-08
    test 687 pow(4): Fsum[36] pow(2.22987e-29, -3.33548e-46)  FAILED, KNOWN, expected Fsum[36] pow(2.22987e-29, -1.25607e-45)
    test 688 pow(1): Fsum[842] pow(-6.87179e-08, 3.83763e-24)
    test 689 pow(0): Fsum[1] pow(1.0, 0)
    test 690 ceil: True
    test 691 floor: True
    test 692 divmod: Fsum[847] (0.0, 0)
    test 693 residual: 0
    test 694 is_exact: True
    test 695 Fsum: -6.871793665388379e-08
    test 696 Fsum: -6.871793665388379e-08

    test 697 fsum: 2.2654478218821153e-14
    test 698 sum56: -6.999999999999972  FAILED, KNOWN, expected 2.2654478218821153e-14
    test 699 pow(4): Fsum[16] pow(2.634e-55, 8.76107e-73)
    test 700 pow(1): Fsum[842] pow(2.26545e-14, 1.8838e-32)
    test 701 pow(0): Fsum[1] pow(1.0, 0)
    test 702 ceil: True
    test 703 floor: True
    test 704 divmod: Fsum[845] (0.0, 0)
    test 705 residual: 0
    test 706 is_exact: True
    test 707 Fsum: 2.2654478218821153e-14
    test 708 Fsum: 2.2654478218821153e-14

    test 709 fsum: -4.328175833716204
    test 710 sum57: 0.0  FAILED, KNOWN, expected -4.328175833716204
    test 711 pow(4): Fsum[49] pow(350.929, -1.99413e-14)
    test 712 pow(1): Fsum[842] pow(-4.32818, 6.14863e-17)
    test 713 pow(0): Fsum[1] pow(1.0, 0)
    test 714 ceil: True
    test 715 floor: True
    test 716 divmod: Fsum[848] (0.0, 0)
    test 717 residual: 0
    test 718 is_exact: True
    test 719 Fsum: -4.328175833716204
    test 720 Fsum: -4.328175833716204

    test 721 fsum: 0.0009921343996918365
    test 722 sum58: 0.0  FAILED, KNOWN, expected 0.0009921343996918365
    test 723 pow(4): Fsum[144] pow(9.68907e-13, 3.94856e-29)  FAILED, KNOWN, expected Fsum[144] pow(9.68907e-13, 4.27058e-29)
    test 724 pow(1): Fsum[842] pow(0.000992134, -4.15894e-20)
    test 725 pow(0): Fsum[1] pow(1.0, 0)
    test 726 ceil: True
    test 727 floor: True
    test 728 divmod: Fsum[848] (0.0, 0)
    test 729 residual: 0
    test 730 is_exact: True
    test 731 Fsum: 0.0009921343996918365
    test 732 Fsum: 0.0009921343996918365

    test 733 fsum: 0.00040435689604990184
    test 734 sum59: 7.0004043568963255  FAILED, KNOWN, expected 0.00040435689604990184
    test 735 pow(4): Fsum[196] pow(2.67337e-14, -8.61372e-31)
    test 736 pow(1): Fsum[842] pow(0.000404357, -3.25714e-21)
    test 737 pow(0): Fsum[1] pow(1.0, 0)
    test 738 ceil: True
    test 739 floor: True
    test 740 divmod: Fsum[850] (0.0, 0)
    test 741 residual: 0
    test 742 is_exact: True
    test 743 Fsum: 0.00040435689604990184
    test 744 Fsum: 0.00040435689604990184

    test 745 fsum: 0.00031396619178270885
    test 746 sum60: 0.0  FAILED, KNOWN, expected 0.00031396619178270885
    test 747 pow(4): Fsum[256] pow(9.71699e-15, 1.1386e-31)
    test 748 pow(1): Fsum[842] pow(0.000313966, 9.19738e-22)
    test 749 pow(0): Fsum[1] pow(1.0, 0)
    test 750 ceil: True
    test 751 floor: True
    test 752 divmod: Fsum[849] (0.0, 0)
    test 753 residual: 0
    test 754 is_exact: True
    test 755 Fsum: 0.00031396619178270885
    test 756 Fsum: 0.00031396619178270885

    test 757 fsum: 4.32957622370944e-06
    test 758 sum61: -20.999995670424614  FAILED, KNOWN, expected 4.32957622370944e-06
    test 759 pow(4): Fsum[36] pow(3.51384e-22, -4.93248e-39)
    test 760 pow(1): Fsum[842] pow(4.32958e-06, -1.51939e-23)
    test 761 pow(0): Fsum[1] pow(1.0, 0)
    test 762 ceil: True
    test 763 floor: True
    test 764 divmod: Fsum[845] (0.0, 0)
    test 765 residual: 0
    test 766 is_exact: True
    test 767 Fsum: 4.32957622370944e-06
    test 768 Fsum: 4.32957622370944e-06

    test 769 fsum: -7.317122071817516e-07
    test 770 sum62: 13.999999268286551  FAILED, KNOWN, expected -7.317122071817516e-07
    test 771 pow(4): Fsum[25] pow(2.86656e-25, 1.36355e-41)  FAILED, KNOWN, expected Fsum[25] pow(2.86656e-25, 2.94837e-42)
    test 772 pow(1): Fsum[842] pow(-7.31712e-07, 2.06008e-23)
    test 773 pow(0): Fsum[1] pow(1.0, 0)
    test 774 ceil: True
    test 775 floor: True
    test 776 divmod: Fsum[846] (0.0, 0)
    test 777 residual: 0
    test 778 is_exact: True
    test 779 Fsum: -7.317122071817516e-07
    test 780 Fsum: -7.317122071817516e-07

    test 781 fsum: 3.0909603247476476e-07
    test 782 sum63: -20.999999690904673  FAILED, KNOWN, expected 3.0909603247476476e-07
    test 783 pow(4): Fsum[100] pow(9.12796e-27, -3.57128e-43)
    test 784 pow(1): Fsum[842] pow(3.09096e-07, 9.12427e-24)
    test 785 pow(0): Fsum[1] pow(1.0, 0)
    test 786 ceil: True
    test 787 floor: True
    test 788 divmod: Fsum[848] (0.0, 0)
    test 789 residual: 0
    test 790 is_exact: True
    test 791 Fsum: 3.0909603247476476e-07
    test 792 Fsum: 3.0909603247476476e-07

    test 793 fsum: -0.00029292219530348143
    test 794 sum64: 0.0  FAILED, KNOWN, expected -0.00029292219530348143
    test 795 pow(4): Fsum[256] pow(7.36223e-15, 4.54853e-31)  FAILED, KNOWN, expected Fsum[256] pow(7.36223e-15, -6.80745e-31)
    test 796 pow(1): Fsum[842] pow(-0.000292922, 1.80668e-20)
    test 797 pow(0): Fsum[1] pow(1.0, 0)
    test 798 ceil: True
    test 799 floor: True
    test 800 divmod: Fsum[850] (0.0, 0)
    test 801 residual: 0
    test 802 is_exact: True
    test 803 Fsum: -0.00029292219530348143
    test 804 Fsum: -0.00029292219530348143

    test 805 fsum: -1.3340597189982713e-07
    test 806 sum65: 6.999999866593498  FAILED, KNOWN, expected -1.3340597189982713e-07
    test 807 pow(4): Fsum[100] pow(3.16739e-28, 1.72762e-44)  FAILED, KNOWN, expected Fsum[100] pow(3.16739e-28, -1.6249e-44)
    test 808 pow(1): Fsum[842] pow(-1.33406e-07, -8.92394e-24)
    test 809 pow(0): Fsum[1] pow(1.0, 0)
    test 810 ceil: True
    test 811 floor: True
    test 812 divmod: Fsum[848] (0.0, 0)
    test 813 residual: 0
    test 814 is_exact: True
    test 815 Fsum: -1.3340597189982713e-07
    test 816 Fsum: -1.3340597189982713e-07

    test 817 fsum: -42.753212779162254
    test 818 sum66: 0.0  FAILED, KNOWN, expected -42.753212779162254
    test 819 pow(4): Fsum[225] pow(3.34099e+06, 4.93974e-11)
    test 820 pow(1): Fsum[842] pow(-42.7532, -1.5803e-16)
    test 821 pow(0): Fsum[1] pow(1.0, 0)
    test 822 ceil: True
    test 823 floor: True
    test 824 divmod: Fsum[848] (0.0, 0)
    test 825 residual: 0
    test 826 is_exact: True
    test 827 Fsum: -42.753212779162254
    test 828 Fsum: -42.753212779162254

    test 829 fsum: 1.566738209704955e-07
    test 830 sum67: 0.0  FAILED, KNOWN, expected 1.566738209704955e-07
    test 831 pow(4): Fsum[81] pow(6.0254e-28, 1.40661e-44)
    test 832 pow(1): Fsum[842] pow(1.56674e-07, 9.14373e-25)
    test 833 pow(0): Fsum[1] pow(1.0, 0)
    test 834 ceil: True
    test 835 floor: True
    test 836 divmod: Fsum[847] (0.0, 0)
    test 837 residual: 0
    test 838 is_exact: True
    test 839 Fsum: 1.566738209704955e-07
    test 840 Fsum: 1.566738209704955e-07

    test 841 fsum: 7.357453663678787e-05
    test 842 sum68: 0.0  FAILED, KNOWN, expected 7.357453663678787e-05
    test 843 pow(4): Fsum[256] pow(2.93029e-17, 1.2092e-33)
    test 844 pow(1): Fsum[842] pow(7.35745e-05, 7.59024e-22)
    test 845 pow(0): Fsum[1] pow(1.0, 0)
    test 846 ceil: True
    test 847 floor: True
    test 848 divmod: Fsum[850] (0.0, 0)
    test 849 residual: 0
    test 850 is_exact: True
    test 851 Fsum: 7.357453663678787e-05
    test 852 Fsum: 7.357453663678787e-05

    test 853 fsum: 1.2011020326342444e-05
    test 854 sum69: 0.0  FAILED, KNOWN, expected 1.2011020326342444e-05
    test 855 pow(4): Fsum[121] pow(2.08123e-20, 8.24124e-37)
    test 856 pow(1): Fsum[842] pow(1.2011e-05, 1.18903e-22)
    test 857 pow(0): Fsum[1] pow(1.0, 0)
    test 858 ceil: True
    test 859 floor: True
    test 860 divmod: Fsum[848] (0.0, 0)
    test 861 residual: 0
    test 862 is_exact: True
    test 863 Fsum: 1.2011020326342444e-05
    test 864 Fsum: 1.2011020326342444e-05

    test 865 fsum: 4.85036149002152e-07
    test 866 sum70: 7.00000048503631  FAILED, KNOWN, expected 4.85036149002152e-07
    test 867 pow(4): Fsum[196] pow(5.53473e-26, -4.45151e-42)  FAILED, KNOWN, expected Fsum[196] pow(5.53473e-26, -4.05335e-42)
    test 868 pow(1): Fsum[842] pow(4.85036e-07, 4.2292e-23)
    test 869 pow(0): Fsum[1] pow(1.0, 0)
    test 870 ceil: True
    test 871 floor: True
    test 872 divmod: Fsum[850] (0.0, 0)
    test 873 residual: 0
    test 874 is_exact: True
    test 875 Fsum: 4.85036149002152e-07
    test 876 Fsum: 4.85036149002152e-07

    test 877 fsum: 0.7972454592113524
    test 878 sum71: 14.797245459211666  FAILED, KNOWN, expected 0.7972454592113524
    test 879 pow(4): Fsum[144] pow(0.403988, 2.37221e-18)  FAILED, KNOWN, expected Fsum[144] pow(0.403988, 1.74269e-17)
    test 880 pow(1): Fsum[842] pow(0.797245, 4.34121e-17)
    test 881 pow(0): Fsum[1] pow(1.0, 0)
    test 882 ceil: True
    test 883 floor: True
    test 884 divmod: Fsum[847] (0.0, 0)
    test 885 residual: 0
    test 886 is_exact: True
    test 887 Fsum: 0.7972454592113524
    test 888 Fsum: 0.7972454592113524

    test 889 fsum: 0.23252844067260545
    test 890 sum72: 0.23252844067074463  FAILED, KNOWN, expected 0.23252844067260545
    test 891 pow(4): Fsum[196] pow(0.00292351, 1.74438e-19)  FAILED, KNOWN, expected Fsum[196] pow(0.00292351, 1.1594e-19)
    test 892 pow(1): Fsum[842] pow(0.232528, 9.76565e-18)
    test 893 pow(0): Fsum[1] pow(1.0, 0)
    test 894 ceil: True
    test 895 floor: True
    test 896 divmod: Fsum[848] (0.0, 0)
    test 897 residual: 0
    test 898 is_exact: True
    test 899 Fsum: 0.23252844067260545
    test 900 Fsum: 0.23252844067260545

    test 901 fsum: 0.019529457922102537
    test 902 sum73: 0.0  FAILED, KNOWN, expected 0.019529457922102537
    test 903 pow(4): Fsum[289] pow(1.45466e-07, -4.74558e-25)  FAILED, KNOWN, expected Fsum[289] pow(1.45466e-07, 3.65907e-24)
    test 904 pow(1): Fsum[842] pow(0.0195295, 1.37198e-18)
    test 905 pow(0): Fsum[1] pow(1.0, 0)
    test 906 ceil: True
    test 907 floor: True
    test 908 divmod: Fsum[849] (0.0, 0)
    test 909 residual: 0
    test 910 is_exact: True
    test 911 Fsum: 0.019529457922102537
    test 912 Fsum: 0.019529457922102537

    test 913 fsum: 2.2687296048332604e-10
    test 914 sum74: 2.283400135638658e-10  FAILED, KNOWN, expected 2.2687296048332604e-10
    test 915 pow(4): Fsum[9] pow(2.6493e-39, 7.76557e-56)  FAILED, KNOWN, expected Fsum[9] pow(2.6493e-39, 6.93072e-56)
    test 916 pow(1): Fsum[842] pow(2.26873e-10, -5.32243e-27)
    test 917 pow(0): Fsum[1] pow(1.0, 0)
    test 918 ceil: True
    test 919 floor: True
    test 920 divmod: Fsum[844] (0.0, 0)
    test 921 residual: 0
    test 922 is_exact: True
    test 923 Fsum: 2.2687296048332604e-10
    test 924 Fsum: 2.2687296048332604e-10

    test 925 fsum: 0.0004689883930449357
    test 926 sum75: 0.0  FAILED, KNOWN, expected 0.0004689883930449357
    test 927 pow(4): Fsum[169] pow(4.83781e-14, 8.93334e-31)  FAILED, KNOWN, expected Fsum[169] pow(4.83781e-14, 1.38219e-30)
    test 928 pow(1): Fsum[842] pow(0.000468988, -2.6055e-20)
    test 929 pow(0): Fsum[1] pow(1.0, 0)
    test 930 ceil: True
    test 931 floor: True
    test 932 divmod: Fsum[848] (0.0, 0)
    test 933 residual: 0
    test 934 is_exact: True
    test 935 Fsum: 0.0004689883930449357
    test 936 Fsum: 0.0004689883930449357

    test 937 fsum: -3.900088574665319e-10
    test 938 sum76: 0.0  FAILED, KNOWN, expected -3.900088574665319e-10
    test 939 pow(4): Fsum[25] pow(2.31365e-38, 1.13506e-54)
    test 940 pow(1): Fsum[842] pow(-3.90009e-10, 6.21624e-27)
    test 941 pow(0): Fsum[1] pow(1.0, 0)
    test 942 ceil: True
    test 943 floor: True
    test 944 divmod: Fsum[846] (0.0, 0)
    test 945 residual: 0
    test 946 is_exact: True
    test 947 Fsum: -3.900088574665319e-10
    test 948 Fsum: -3.900088574665319e-10

    test 949 fsum: -5.3563908525014994e-05
    test 950 sum77: 0.0  FAILED, KNOWN, expected -5.3563908525014994e-05
    test 951 pow(4): Fsum[144] pow(8.23169e-18, -4.40149e-34)
    test 952 pow(1): Fsum[842] pow(-5.35639e-05, 7.16017e-22)
    test 953 pow(0): Fsum[1] pow(1.0, 0)
    test 954 ceil: True
    test 955 floor: True
    test 956 divmod: Fsum[850] (0.0, 0)
    test 957 residual: 0
    test 958 is_exact: True
    test 959 Fsum: -5.3563908525014994e-05
    test 960 Fsum: -5.3563908525014994e-05

    test 961 fsum: -0.2702870663046695
    test 962 sum78: 6.7297129336958275  FAILED, KNOWN, expected -0.2702870663046695
    test 963 pow(4): Fsum[144] pow(0.00533705, 1.1778e-19)  FAILED, KNOWN, expected Fsum[144] pow(0.00533705, -2.87014e-20)
    test 964 pow(1): Fsum[842] pow(-0.270287, 1.31995e-17)
    test 965 pow(0): Fsum[1] pow(1.0, 0)
    test 966 ceil: True
    test 967 floor: True
    test 968 divmod: Fsum[848] (0.0, 0)
    test 969 residual: 0
    test 970 is_exact: True
    test 971 Fsum: -0.2702870663046695
    test 972 Fsum: -0.2702870663046695

    test 973 fsum: -1.1978752996795466e-07
    test 974 sum79: -1.1978923453170864e-07  FAILED, KNOWN, expected -1.1978752996795466e-07
    test 975 pow(4): Fsum[121] pow(2.05895e-28, -2.08946e-44)  FAILED, KNOWN, expected Fsum[121] pow(2.05895e-28, -2.04585e-44)
    test 976 pow(1): Fsum[842] pow(-1.19788e-07, -1.01319e-23)
    test 977 pow(0): Fsum[1] pow(1.0, 0)
    test 978 ceil: True
    test 979 floor: True
    test 980 divmod: Fsum[849] (0.0, 0)
    test 981 residual: 0
    test 982 is_exact: True
    test 983 Fsum: -1.1978752996795466e-07
    test 984 Fsum: -1.1978752996795466e-07

    test 985 fsum: 3.4368640118174827e-08
    test 986 sum80: 0.0  FAILED, KNOWN, expected 3.4368640118174827e-08
    test 987 pow(4): Fsum[64] pow(1.39524e-30, -2.1116e-47)
    test 988 pow(1): Fsum[842] pow(3.43686e-08, -1.30036e-25)
    test 989 pow(0): Fsum[1] pow(1.0, 0)
    test 990 ceil: True
    test 991 floor: True
    test 992 divmod: Fsum[848] (0.0, 0)
    test 993 residual: 0
    test 994 is_exact: True
    test 995 Fsum: 3.4368640118174827e-08
    test 996 Fsum: 3.4368640118174827e-08

    test 997 fsum: 6.955025209589359e-14
    test 998 sum81: 1.2825296380469808e-12  FAILED, KNOWN, expected 6.955025209589359e-14
    test 999 pow(4): Fsum[25] pow(2.33989e-53, 4.26417e-71)  FAILED, KNOWN, expected Fsum[25] pow(2.33989e-53, 6.76711e-70)
    test 1000 pow(1): Fsum[842] pow(6.95503e-14, 5.18957e-30)
    test 1001 pow(0): Fsum[1] pow(1.0, 0)
    test 1002 ceil: True
    test 1003 floor: True
    test 1004 divmod: Fsum[845] (0.0, 0)
    test 1005 residual: 0
    test 1006 is_exact: True
    test 1007 Fsum: 6.955025209589359e-14
    test 1008 Fsum: 6.955025209589359e-14

    test 1009 fsum: -2.6374605677683068e-09
    test 1010 sum82: 0.0  FAILED, KNOWN, expected -2.6374605677683068e-09
    test 1011 pow(4): Fsum[81] pow(4.83887e-35, -1.66822e-51)
    test 1012 pow(1): Fsum[842] pow(-2.63746e-09, 2.27318e-26)
    test 1013 pow(0): Fsum[1] pow(1.0, 0)
    test 1014 ceil: True
    test 1015 floor: True
    test 1016 divmod: Fsum[847] (0.0, 0)
    test 1017 residual: 0
    test 1018 is_exact: True
    test 1019 Fsum: -2.6374605677683068e-09
    test 1020 Fsum: -2.6374605677683068e-09

    test 1021 fsum: -0.24847016078412928
    test 1022 sum83: 0.0  FAILED, KNOWN, expected -0.24847016078412928
    test 1023 pow(4): Fsum[64] pow(0.00381151, -3.42624e-20)  FAILED, KNOWN, expected Fsum[64] pow(0.00381151, -2.89709e-20)
    test 1024 pow(1): Fsum[842] pow(-0.24847, 7.45377e-18)
    test 1025 pow(0): Fsum[1] pow(1.0, 0)
    test 1026 ceil: True
    test 1027 floor: True
    test 1028 divmod: Fsum[847] (0.0, 0)
    test 1029 residual: 0
    test 1030 is_exact: True
    test 1031 Fsum: -0.24847016078412928
    test 1032 Fsum: -0.24847016078412928

    test 1033 fsum: -0.4767867271273665
    test 1034 sum84: 0.0  FAILED, KNOWN, expected -0.4767867271273665
    test 1035 pow(4): Fsum[225] pow(0.0516769, 2.99576e-18)
    test 1036 pow(1): Fsum[842] pow(-0.476787, 9.09514e-18)
    test 1037 pow(0): Fsum[1] pow(1.0, 0)
    test 1038 ceil: True
    test 1039 floor: True
    test 1040 divmod: Fsum[848] (0.0, 0)
    test 1041 residual: 0
    test 1042 is_exact: True
    test 1043 Fsum: -0.4767867271273665
    test 1044 Fsum: -0.4767867271273665

    test 1045 fsum: -7.713125805034802e-09
    test 1046 sum85: 0.0  FAILED, KNOWN, expected -7.713125805034802e-09
    test 1047 pow(4): Fsum[49] pow(3.53933e-33, -2.41399e-49)
    test 1048 pow(1): Fsum[842] pow(-7.71313e-09, 1.31518e-25)
    test 1049 pow(0): Fsum[1] pow(1.0, 0)
    test 1050 ceil: True
    test 1051 floor: True
    test 1052 divmod: Fsum[848] (0.0, 0)
    test 1053 residual: 0
    test 1054 is_exact: True
    test 1055 Fsum: -7.713125805034802e-09
    test 1056 Fsum: -7.713125805034802e-09

    test 1057 fsum: -1.619109648717618e-10
    test 1058 sum86: 0.0  FAILED, KNOWN, expected -1.619109648717618e-10
    test 1059 pow(4): Fsum[64] pow(6.87235e-40, -2.97135e-57)  FAILED, KNOWN, expected Fsum[64] pow(6.87235e-40, -2.93424e-58)
    test 1060 pow(1): Fsum[842] pow(-1.61911e-10, 4.66376e-27)
    test 1061 pow(0): Fsum[1] pow(1.0, 0)
    test 1062 ceil: True
    test 1063 floor: True
    test 1064 divmod: Fsum[848] (0.0, 0)
    test 1065 residual: 0
    test 1066 is_exact: True
    test 1067 Fsum: -1.619109648717618e-10
    test 1068 Fsum: -1.619109648717618e-10

    test 1069 fsum: -5.431096774640257
    test 1070 sum87: 0.0  FAILED, KNOWN, expected -5.431096774640257
    test 1071 pow(4): Fsum[400] pow(870.062, 2.12629e-15)  FAILED, KNOWN, expected Fsum[400] pow(870.062, -6.76682e-15)
    test 1072 pow(1): Fsum[842] pow(-5.4311, -3.3039e-16)
    test 1073 pow(0): Fsum[1] pow(1.0, 0)
    test 1074 ceil: True
    test 1075 floor: True
    test 1076 divmod: Fsum[851] (0.0, 0)
    test 1077 residual: 0
    test 1078 is_exact: True
    test 1079 Fsum: -5.431096774640257
    test 1080 Fsum: -5.431096774640257

    test 1081 fsum: 3.3514813136028867e-07
    test 1082 sum88: 7.000000335148151  FAILED, KNOWN, expected 3.3514813136028867e-07
    test 1083 pow(4): Fsum[64] pow(1.26167e-26, -4.82205e-43)
    test 1084 pow(1): Fsum[842] pow(3.35148e-07, 6.32699e-24)
    test 1085 pow(0): Fsum[1] pow(1.0, 0)
    test 1086 ceil: True
    test 1087 floor: True
    test 1088 divmod: Fsum[846] (0.0, 0)
    test 1089 residual: 0
    test 1090 is_exact: True
    test 1091 Fsum: 3.3514813136028867e-07
    test 1092 Fsum: 3.3514813136028867e-07

    test 1093 fsum: 0.0005753340390119237
    test 1094 sum89: 0.0  FAILED, KNOWN, expected 0.0005753340390119237
    test 1095 pow(4): Fsum[169] pow(1.09567e-13, -1.15035e-30)  FAILED, KNOWN, expected Fsum[169] pow(1.09567e-13, 3.75136e-30)
    test 1096 pow(1): Fsum[842] pow(0.000575334, 2.79284e-20)
    test 1097 pow(0): Fsum[1] pow(1.0, 0)
    test 1098 ceil: True
    test 1099 floor: True
    test 1100 divmod: Fsum[848] (0.0, 0)
    test 1101 residual: 0
    test 1102 is_exact: True
    test 1103 Fsum: 0.0005753340390119237
    test 1104 Fsum: 0.0005753340390119237

    test 1105 fsum: -0.0035394131158060452
    test 1106 sum90: 13.996460586881422  FAILED, KNOWN, expected -0.0035394131158060452
    test 1107 pow(4): Fsum[121] pow(1.56937e-10, 7.79289e-27)  FAILED, KNOWN, expected Fsum[121] pow(1.56937e-10, 3.16581e-27)
    test 1108 pow(1): Fsum[842] pow(-0.00353941, -1.37507e-19)
    test 1109 pow(0): Fsum[1] pow(1.0, 0)
    test 1110 ceil: True
    test 1111 floor: True
    test 1112 divmod: Fsum[848] (0.0, 0)
    test 1113 residual: 0
    test 1114 is_exact: True
    test 1115 Fsum: -0.0035394131158060452
    test 1116 Fsum: -0.0035394131158060452

    test 1117 fsum: 1.2892319830284495
    test 1118 sum91: 0.0  FAILED, KNOWN, expected 1.2892319830284495
    test 1119 pow(4): Fsum[400] pow(2.76264, 1.6492e-16)  FAILED, KNOWN, expected Fsum[400] pow(2.76264, 8.98954e-17)
    test 1120 pow(1): Fsum[842] pow(1.28923, 5.35453e-17)
    test 1121 pow(0): Fsum[1] pow(1.0, 0)
    test 1122 ceil: True
    test 1123 floor: True
    test 1124 divmod: Fsum[851] (0.0, 0)
    test 1125 residual: 0
    test 1126 is_exact: True
    test 1127 Fsum: 1.2892319830284495
    test 1128 Fsum: 1.2892319830284495

    test 1129 fsum: 3.730716058312713e-13
    test 1130 sum92: 0.0  FAILED, KNOWN, expected 3.730716058312713e-13
    test 1131 pow(4): Fsum[49] pow(1.93717e-50, 1.0341e-66)  FAILED, KNOWN, expected Fsum[49] pow(1.93717e-50, -5.18213e-67)
    test 1132 pow(1): Fsum[842] pow(3.73072e-13, 2.43195e-29)
    test 1133 pow(0): Fsum[1] pow(1.0, 0)
    test 1134 ceil: True
    test 1135 floor: True
    test 1136 divmod: Fsum[849] (0.0, 0)
    test 1137 residual: 0
    test 1138 is_exact: True
    test 1139 Fsum: 3.730716058312713e-13
    test 1140 Fsum: 3.730716058312713e-13

    test 1141 fsum: -8.402306905271706e-13
    test 1142 sum93: 0.0  FAILED, KNOWN, expected -8.402306905271706e-13
    test 1143 pow(4): Fsum[25] pow(4.98419e-49, 3.04807e-65)  FAILED, KNOWN, expected Fsum[25] pow(4.98419e-49, 1.93509e-65)
    test 1144 pow(1): Fsum[842] pow(-8.40231e-13, -3.54799e-29)
    test 1145 pow(0): Fsum[1] pow(1.0, 0)
    test 1146 ceil: True
    test 1147 floor: True
    test 1148 divmod: Fsum[846] (0.0, 0)
    test 1149 residual: 0
    test 1150 is_exact: True
    test 1151 Fsum: -8.402306905271706e-13
    test 1152 Fsum: -8.402306905271706e-13

    test 1153 fsum: 7.5771260521010095
    test 1154 sum94: 0.0  FAILED, KNOWN, expected 7.5771260521010095
    test 1155 pow(4): Fsum[324] pow(3296.23, -1.32216e-13)  FAILED, KNOWN, expected Fsum[324] pow(3296.23, -8.54109e-14)
    test 1156 pow(1): Fsum[842] pow(7.57713, -2.83521e-16)
    test 1157 pow(0): Fsum[1] pow(1.0, 0)
    test 1158 ceil: True
    test 1159 floor: True
    test 1160 divmod: Fsum[850] (0.0, 0)
    test 1161 residual: 0
    test 1162 is_exact: True
    test 1163 Fsum: 7.5771260521010095
    test 1164 Fsum: 7.5771260521010095

    test 1165 fsum: 0.0175404417406132
    test 1166 sum95: 0.0  FAILED, KNOWN, expected 0.0175404417406132
    test 1167 pow(4): Fsum[100] pow(9.4659e-08, 3.84325e-24)
    test 1168 pow(1): Fsum[842] pow(0.0175404, -4.35071e-19)
    test 1169 pow(0): Fsum[1] pow(1.0, 0)
    test 1170 ceil: True
    test 1171 floor: True
    test 1172 divmod: Fsum[847] (0.0, 0)
    test 1173 residual: 0
    test 1174 is_exact: True
    test 1175 Fsum: 0.0175404417406132
    test 1176 Fsum: 0.0175404417406132

    test 1177 fsum: 0.0008425781267691189
    test 1178 sum96: -20.999157421873363  FAILED, KNOWN, expected 0.0008425781267691189
    test 1179 pow(4): Fsum[169] pow(5.04012e-13, 4.87786e-29)
    test 1180 pow(1): Fsum[842] pow(0.000842578, 2.03863e-20)
    test 1181 pow(0): Fsum[1] pow(1.0, 0)
    test 1182 ceil: True
    test 1183 floor: True
    test 1184 divmod: Fsum[849] (0.0, 0)
    test 1185 residual: 0
    test 1186 is_exact: True
    test 1187 Fsum: 0.0008425781267691189
    test 1188 Fsum: 0.0008425781267691189

    test 1189 fsum: -0.45996590390508335
    test 1190 sum97: -0.4599659039051769  FAILED, KNOWN, expected -0.45996590390508335
    test 1191 pow(4): Fsum[256] pow(0.0447613, -2.98499e-18)
    test 1192 pow(1): Fsum[842] pow(-0.459966, 7.66842e-18)
    test 1193 pow(0): Fsum[1] pow(1.0, 0)
    test 1194 ceil: True
    test 1195 floor: True
    test 1196 divmod: Fsum[850] (0.0, 0)
    test 1197 residual: 0
    test 1198 is_exact: True
    test 1199 Fsum: -0.45996590390508335
    test 1200 Fsum: -0.45996590390508335

    test 1201 fsum: -9.923947070948683e-05
    test 1202 sum98: 0.0  FAILED, KNOWN, expected -9.923947070948683e-05
    test 1203 pow(4): Fsum[100] pow(9.69924e-17, -1.68145e-33)
    test 1204 pow(1): Fsum[842] pow(-9.92395e-05, -2.72278e-21)
    test 1205 pow(0): Fsum[1] pow(1.0, 0)
    test 1206 ceil: True
    test 1207 floor: True
    test 1208 divmod: Fsum[849] (0.0, 0)
    test 1209 residual: 0
    test 1210 is_exact: True
    test 1211 Fsum: -9.923947070948683e-05
    test 1212 Fsum: -9.923947070948683e-05

    test 1213 fsum: -4.924801615233974e-06
    test 1214 sum99: -28.000004924802433  FAILED, KNOWN, expected -4.924801615233974e-06
    test 1215 pow(4): Fsum[169] pow(5.88241e-22, -3.70282e-38)
    test 1216 pow(1): Fsum[842] pow(-4.9248e-06, -1.19326e-22)
    test 1217 pow(0): Fsum[1] pow(1.0, 0)
    test 1218 ceil: True
    test 1219 floor: True
    test 1220 divmod: Fsum[850] (0.0, 0)
    test 1221 residual: 0
    test 1222 is_exact: True
    test 1223 Fsum: -4.924801615233974e-06
    test 1224 Fsum: -4.924801615233974e-06

    test 1225 fsum: -1.2621232677040341e-09
    test 1226 sum100: 13.999999998738105  FAILED, KNOWN, expected -1.2621232677040341e-09
    test 1227 pow(4): Fsum[36] pow(2.53751e-36, 1.00006e-52)
    test 1228 pow(1): Fsum[842] pow(-1.26212e-09, -1.24355e-26)
    test 1229 pow(0): Fsum[1] pow(1.0, 0)
    test 1230 ceil: True
    test 1231 floor: True
    test 1232 divmod: Fsum[846] (0.0, 0)
    test 1233 residual: 0
    test 1234 is_exact: True
    test 1235 Fsum: -1.2621232677040341e-09
    test 1236 Fsum: -1.2621232677040341e-09
    test 1237 fmul: 0.00000002

    test 1238 len1: 4
    test 1239 FSum+: 4.0
    test 1240 FSum-: 2.0
    test 1241 FSum-: 0.0
    test 1242 FSum*: 4.0
    test 1243 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1244 ._fint2: (4, 0)
    test 1245 ._fprs: 4.0
    test 1246 ._fprs2: (4.0, 0)
    test 1247 ._n: 5
    test 1248 ._ps: [4.0]
    test 1249 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1250 ._fint2: (4, 0)
    test 1251 ._fprs: 4.0
    test 1252 ._fprs2: (4.0, 0)
    test 1253 ._n: 5
    test 1254 ._ps: [4.0]
    test 1255 len2: 8
    test 1256 FSum+: 8.0
    test 1257 FSum-: 4.0
    test 1258 FSum-: 0.0
    test 1259 FSum*: 8.0
    test 1260 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1261 ._fint2: (8, 0)
    test 1262 ._fprs: 8.0
    test 1263 ._fprs2: (8.0, 0)
    test 1264 ._n: 9
    test 1265 ._ps: [8.0]
    test 1266 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1267 ._fint2: (8, 0)
    test 1268 ._fprs: 8.0
    test 1269 ._fprs2: (8.0, 0)
    test 1270 ._n: 9
    test 1271 ._ps: [8.0]
    test 1272 len3: 16
    test 1273 FSum+: 16.0
    test 1274 FSum-: 8.0
    test 1275 FSum-: 0.0
    test 1276 FSum*: 16.0
    test 1277 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1278 ._fint2: (16, 0)
    test 1279 ._fprs: 16.0
    test 1280 ._fprs2: (16.0, 0)
    test 1281 ._n: 17
    test 1282 ._ps: [16.0]
    test 1283 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1284 ._fint2: (16, 0)
    test 1285 ._fprs: 16.0
    test 1286 ._fprs2: (16.0, 0)
    test 1287 ._n: 17
    test 1288 ._ps: [16.0]
    test 1289 len4: 32
    test 1290 FSum+: 32.0
    test 1291 FSum-: 16.0
    test 1292 FSum-: 0.0
    test 1293 FSum*: 32.0
    test 1294 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1295 ._fint2: (32, 0)
    test 1296 ._fprs: 32.0
    test 1297 ._fprs2: (32.0, 0)
    test 1298 ._n: 33
    test 1299 ._ps: [32.0]
    test 1300 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1301 ._fint2: (32, 0)
    test 1302 ._fprs: 32.0
    test 1303 ._fprs2: (32.0, 0)
    test 1304 ._n: 33
    test 1305 ._ps: [32.0]
    test 1306 len5: 64
    test 1307 FSum+: 64.0
    test 1308 FSum-: 32.0
    test 1309 FSum-: 0.0
    test 1310 FSum*: 64.0
    test 1311 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1312 ._fint2: (64, 0)
    test 1313 ._fprs: 64.0
    test 1314 ._fprs2: (64.0, 0)
    test 1315 ._n: 65
    test 1316 ._ps: [64.0]
    test 1317 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1318 ._fint2: (64, 0)
    test 1319 ._fprs: 64.0
    test 1320 ._fprs2: (64.0, 0)
    test 1321 ._n: 65
    test 1322 ._ps: [64.0]
    test 1323 len6: 128
    test 1324 FSum+: 128.0
    test 1325 FSum-: 64.0
    test 1326 FSum-: 0.0
    test 1327 FSum*: 128.0
    test 1328 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1329 ._fint2: (128, 0)
    test 1330 ._fprs: 128.0
    test 1331 ._fprs2: (128.0, 0)
    test 1332 ._n: 129
    test 1333 ._ps: [128.0]
    test 1334 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1335 ._fint2: (128, 0)
    test 1336 ._fprs: 128.0
    test 1337 ._fprs2: (128.0, 0)
    test 1338 ._n: 129
    test 1339 ._ps: [128.0]
    test 1340 len7: 256
    test 1341 FSum+: 256.0
    test 1342 FSum-: 128.0
    test 1343 FSum-: 0.0
    test 1344 FSum*: 256.0
    test 1345 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1346 ._fint2: (256, 0)
    test 1347 ._fprs: 256.0
    test 1348 ._fprs2: (256.0, 0)
    test 1349 ._n: 257
    test 1350 ._ps: [256.0]
    test 1351 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1352 ._fint2: (256, 0)
    test 1353 ._fprs: 256.0
    test 1354 ._fprs2: (256.0, 0)
    test 1355 ._n: 257
    test 1356 ._ps: [256.0]
    test 1357 len8: 512
    test 1358 FSum+: 512.0
    test 1359 FSum-: 256.0
    test 1360 FSum-: 0.0
    test 1361 FSum*: 512.0
    test 1362 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1363 ._fint2: (512, 0)
    test 1364 ._fprs: 512.0
    test 1365 ._fprs2: (512.0, 0)
    test 1366 ._n: 513
    test 1367 ._ps: [512.0]
    test 1368 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1369 ._fint2: (512, 0)
    test 1370 ._fprs: 512.0
    test 1371 ._fprs2: (512.0, 0)
    test 1372 ._n: 513
    test 1373 ._ps: [512.0]
    test 1374 len: 513
    test 1375 partials: (512.0,)

    test 1376 FSum0: 0.0
    test 1377 FSum0: 0.0
    test 1378 FSum0: 0.0
    test 1379 FSum0: 0.0
    test 1380 FSum0: 0.0
    test 1381 sizeof: 707  FAILED, KNOWN, expected 413
    test 1382 FSum0: 0.0
    test 1383 Fsum#: 514
    test 1384 Fsum#: 1
    test 1385 FSum.: Fsum[514] (0.0, 0)
    test 1386 FsumI: 0.0
    test 1387 FsumR: 0.0
    test 1388 radd: 514.0
    test 1389 rdiv: 3.91e-03
    test 1390 rmul: 1024.0
    test 1391 rpow: 1.0
    test 1392 rsub: -510.0
    test 1393 _2sum: OverflowError('_2sum(1.0e+308, inf): not finite (inf)')
    test 1394 F(None): TypeError('0.0 + None: invalid')

    test 1395 ints: 1
    test 1396 ints: 1
    test 1397 fsum : -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1398 fsum_: -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1399 Fsum : -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1400 sum  : -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1401 F * 2: 4.0000
    test 1402 F / 2: 2.0000
    test 1403 F / F: True
    test 1404 F / F: 1.0
    test 1405 F / F: 2.0
    test 1406 abs  : Fsum[4] __abs__(2.0, 0)  FAILED, KNOWN, expected Fsum[4] (2.0, 0)
    test 1407 int  : 2
    test 1408 eq F: True
    test 1409 ge F: True
    test 1410 gt F: False
    test 1411 le F: True
    test 1412 lt F: False
    test 1413 ne F: False
    test 1414 if F: True
    test 1415 gt 0: True
    test 1416 lt 0: False
    test 1417 eq 0: False
    test 1418 lt 0: True
    test 1419 gt 0: True
    test 1420 gt 0: False
    test 1421 signOf: 1
    test 1422 signOf: -1
    test 1423 ceil : 3
    test 1424 floor: 2

    test 1425 divmod : (2, <Fsum[2] __divmod__(0.0, 0) at 0x10553efc0>)
    test 1426 divmod : (2, <Fsum[2] __divmod__(0.0, 0) at 0x10553d190>)
    test 1427 rdivmod : (0, <Fsum[1] __rdivmod__(2, 0) at 0x10553d190>)
    test 1428 divmod : (-2, <Fsum[2] __divmod__(1.0, 0) at 0x10553efc0>)
    test 1429 imod: Fsum[2] __imod__(0.0, 0)
    test 1430 mod : Fsum[2] __mod__(0.0, 0)
    test 1431 rmod: Fsum[1] __rmod__(2, 0)
    test 1432 neg : Fsum[1] __neg__(-2, 0)
    test 1433 pos : Fsum[4] (2.0, 0)
    test 1434 is_int: True
    test 1435 float: 9e-102
    test 1436 is_int: False
    test 1437 round1: 0.0
    test 1438 fset_: Fsum[4] (9.0e-102, 5.9483e-118)

    test 1439 F //: Fsum[1] __floordiv__(-1, 0)
    test 1440 // F: Fsum[1] __rfloordiv__(-2, 0)
    test 1441 F //=: Fsum[1] m(-2, 0)
    test 1442 F / 0: ZeroDivisionError('Fsum[4] __truediv__(9.0e-102, 5.9483e-118) / 0: float division by zero')
    test 1443 pow(F, +): Fsum[1] __pow__(6.36662e-213, 0)
    test 1444 pow(F, -): Fsum[1] __pow__(1.11111e+101, 0)
    test 1445 pow(-F, F): ValueError('-2 ** 9e-102: complex (1+2.8274333882308138e-101j) from 2-arg pow(-2, 9.0e-102)')
    test 1446 pow(F, F): Fsum[1] __pow__(1.0, 0)
    test 1447 pow(F, f, i): TypeError('Fsum[4] __pow__(9.0e-102, 5.9483e-118) ** 2.1: mod (2), pow() 3rd argument not allowed unless all arguments are integers')
    test 1448 pow(F, F, i): TypeError('-2 ** Fsum[1] (2.1, 0): mod (2), pow() 3rd argument not allowed unless all arguments are integers')
    test 1449 pow(F, i, None): Fsum[1] __pow__(4, 0)
    test 1450 Z**-2: ZeroDivisionError('0.0 ** -2: 0.0 cannot be raised to a negative power')
    test 1451 pow(0): 1.000
    test 1452 pow(1): -3.000
    test 1453 pow(2): 9.000
    test 1454 pow(21): -10460353203.000
    test 1455 pow(-5): -0.004
    test 1456 **= 2: 9.000
    test 1457 F0**0: Fsum[1] __pow__(1, 0)
    test 1458 F0**0.: Fsum[1] __pow__(1.0, 0)
    test 1459 0**F0: Fsum[1] __rpow__(1.0, 0)
    test 1460 0.**F0: Fsum[1] __rpow__(1.0, 0)
    test 1461 F0**0: Fsum[1] pow(1, 0)
    test 1462 F0**2: Fsum[1] pow(0.0, 0)
    test 1463 F0**0.: Fsum[1] pow(1.0, 0)
    test 1464 F0**3.: Fsum[1] pow(0.0, 0)
    test 1465 F0**0.: Fsum[1] pow(1, 0)
    test 1466 2**F0: Fsum[1] __rpow__(1.0, 0)
    test 1467 2.**F0: Fsum[1] __rpow__(1.0, 0)
    test 1468 F2**0: Fsum[1] __pow__(1, 0)
    test 1469 F2.**0: Fsum[1] __pow__(1, 0)
    test 1470 F2**F2: Fsum[1] __pow__(4, 0)
    test 1471 F2**F2: Fsum[1] __rpow__(4, 0)
    test 1472 F**2: 3125.000
    test 1473 F**-1: 0.200
    test 1474 F**-2: 0.040
    test 1475 F**-2.5: 0.018
    test 1476 F** 2.5: 55.902
    test 1477 pow(2): 25.000
    test 1478 pow(2.5): 55.902
    test 1479 pow(F): 3125.000
    test 1480 3pow(2, None): Fsum[1] pow(25, 0)
    test 1481 3pow(2.5, None): Fsum[1] pow(55.902, 0)
    test 1482 3pow(2, 20): Fsum[1] pow(5, 0)

    test 1483 fsum(): 5.0
    test 1484 fsum(): True
    test 1485 fsum2(): (5.0, 0)
    test 1486 fsum2(): True
    test 1487 fsum2(): Fsum2Tuple(fsum=5.0, residual=0)
    test 1488 Fsum2Tuple: ('fsum', 5.0, <class 'pygeodesy.unitsBase.Float'>)
    test 1489 Fsum2Tuple: ('residual', 0, <class 'pygeodesy.unitsBase.Int'>)
    test 1490 fmul(x): 25.0
    test 1491 fmul(F): 62.5
    test 1492 fadd(F): 65.0
    test 1493 fsub(F): 62.5
    test 1494 Fsum(F): 125.0

    test 1495 ratio: (-27021597764141911, 9007199254740992)
    test 1496 ratio: Fsum[1] (-3, 0)  FAILED, KNOWN, expected Fsum[4] (-3, 8.80732e-17)
    test 1497 int_float: -3.000
    test 1498 fint: Fsum[1] fint(-2, 0)
    test 1499 fint2: (-2, -1)
    test 1500 pow3: Fsum[1] __pow__(3, 0)

    test 1501 is_math_fsum: True

    test 1502 RESIDUAL: 0.0
    test 1503 RESIDUAL: 0.0
    test 1504 RESIDUAL: 1e-32
    test 1505 RESIDUAL: 9.0
    test 1506 RESIDUAL: sorted

    test 1507 ResidualError: 1 / Fsum[2] sorted(1.0e+17, 1.0): non-zero residual (1.0), ratio (1.0e-17) exceeds RESIDUAL (-1e-18) threshold

    test 1508 recursive: 8.0
    test 1509 recursive: 16.0

    test 1510 +=F2T: 17.0
    test 1511 -=F2T: 16.0
    test 1512 *=F2T: 16.000000000000004
    test 1513 /=F2T: 16.0
    test 1514 **F2T: 16.0
    test 1515 %=F2T: 16.0

    test 1516 abs(T): Fsum[2] __abs__(1.0, 0)
    test 1517 bool(T): True
    test 1518 float(T): 1.0000000000000002
    test 1519 T.Fsum_: Fsum[2] (2.0, 0)
    test 1520 int(T): 1
    test 1521 -T: Fsum[1] __neg__(-1, 0)
    test 1522 +T: Fsum[2] (1.0, 0)
    test 1523 as_i_: (4503599627370497, 4503599627370496)
    test 1524 is_x?: True
    test 1525 is_i?: False

    test 1526 F==T: False
    test 1527 F>=T: True
    test 1528 F> T: True
    test 1529 F<=T: False
    test 1530 F< T: False
    test 1531 F!=T: True

    test 1532 T._fint2: (1, 2.220446049250313e-16)
    test 1533 T._fprs2: (1.0, 0)
    test 1534 T._n: 2
    test 1535 T._ps: [1.0000000000000002]
    test 1536 T._ps_neg: [-1.0000000000000002]
    test 1537 T.signOf: 1

    176 of 1537 testFsums.py tests (11.5%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 423.775 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testGars.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.degDMS from .dms by testGars.py line 11
# lazily imported pygeodesy.fstr from .streprs by testGars.py line 11
# lazily imported pygeodesy.gars by testGars.py line 11
# lazily imported pygeodesy.Garef from .gars by testGars.py line 11
# lazily imported pygeodesy.S_MIN from .dms by testGars.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testGars.py line 56

    testing testGars.py 23.03.27 (module pygeodesy.gars 24.06.15) isLazy=3
    test 1 Garef: 381NH45
    test 2 Garef: 381NH45
    test 3 Garef: Garef('381NH45')
    test 4 Garef: '381NH45'
    test 5 Garef: '381NH45'  FAILED, KNOWN, expected Garef('381NH45')
    test 6 Garef.precision: 2
    test 7 copy(Garef): (<class 'pygeodesy.gars.Garef'>, True)
    test 8 Garef.copy(): (<class 'pygeodesy.gars.Garef'>, True)
    test 9 Garef.latlon: 57.64911, 10.40744
    test 10 Garef.toLatLon: LatLon(57°38′56.8″N, 010°24′26.78″E)
    test 11 codec3: 381NH45
    test 12 decode3: 57.625, 10.375, 2.0
    test 13 encode: 381NH45
    test 14 Garef(LatLon): 381NH45
    test 15 copy(Garef): (<class 'pygeodesy.gars.Garef'>, True)
    test 16 Garef.copy(): (<class 'pygeodesy.gars.Garef'>, True)
    test 17 precision: -1  FAILED, KNOWN, expected 0
    test 18 resolution: 30′
    test 19 precision: 0
    test 20 resolution: 30′
    test 21 precision: 1
    test 22 resolution: 15′
    test 23 precision: 2
    test 24 resolution: 5′
    test 25 precision: 3  FAILED, KNOWN, expected 2
    test 26 resolution: 5′

    3 of 26 testGars.py tests (11.5%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 440.121 us

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testGeodesici.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.geodesici by testGeodesici.py line 11
# lazily imported pygeodesy.Intersector from .geodesici by testGeodesici.py line 11
# lazily imported pygeodesy.GeodesicExact from .geodesicx by testGeodesici.py line 67

    testing testGeodesici.py 24.06.24 (module pygeodesy.geodesici 24.06.24) isLazy=3

    testGeodesicExact(pygeodesy.geodesici, 24.06.24)
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1037
# lazily imported pygeodesy.geodsolve by ellipsoids.py line 1041
# lazily imported pygeodesy.elliptic by gxline.py line 288
    test 1 Intersector: name='Test', geodesic=GeodesicExact(name='', ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30)

    test 2 Closest.1.sA: 4.2253e+06
    test 3 Closest.1.sB: 2.70933e+06
    test 4 Closest.1.c: 0
    test 5 Closest.1.sX0: 6.93463e+06

    test 6 Closest4.1.A: {a12: 38.075573, azi1: 45.0, azi2: 51.790249, lat1: 0, lat2: 25.92918, lon1: 0, lon2: 28.89426, s12: 4225301.108897}
    test 7 Closest4.1.B: {a12: 24.392077, azi1: 135.0, azi2: 146.182975, lat1: 45, lat2: 25.92918, lon1: 10.0, lon2: 28.89426, s12: 2709328.885611}
    test 8 Closest4.1.sAB: 2.55246e-09
    test 9 Closest4.1.c: 0

    test 10 Next4s[0].A: {a12: 38.075573, azi1: 45.0, azi2: 51.790249, lat1: 0, lat2: 25.92918, lon1: 0, lon2: 28.89426, s12: 4225301.108897}
    test 11 Next4s[0].B: {a12: 24.392077, azi1: 135.0, azi2: 146.182975, lat1: 45, lat2: 25.92918, lon1: 10.0, lon2: 28.89426, s12: 2709328.885611}
    test 12 Next4s[0].sAB: 2.55246e-09
    test 13 Next4s[0].c: 0
    test 14 Next4s[0].iteration: 4

    test 15 Next4s[1].A: {a12: -142.018073, azi1: 45.0, azi2: 128.245352, lat1: 0, lat2: -25.871113, lon1: 0, lon2: -150.76068, s12: -15772234.622426}
    test 16 Next4s[1].B: {a12: -155.538185, azi1: 135.0, azi2: 33.798247, lat1: 45, lat2: -25.871113, lon1: 10.0, lon2: -150.76068, s12: -17278438.871258}
    test 17 Next4s[1].sAB: 3.77144e-09
    test 18 Next4s[1].c: 0
    test 19 Next4s[1].iteration: 26

    test 20 Next4s[2].A: {a12: -322.111791, azi1: 45.0, azi2: 51.719128, lat1: 0, lat2: 25.812954, lon1: 0, lon2: 29.584396, s12: -35769778.488248}
    test 21 Next4s[2].B: {a12: -335.468352, azi1: 135.0, azi2: 146.2205, lat1: 45, lat2: 25.812954, lon1: 10.0, lon2: 29.584396, s12: -37266196.166392}
    test 22 Next4s[2].sAB: 7.9096e-10
    test 23 Next4s[2].c: 0
    test 24 Next4s[2].iteration: 26

    test 25 Next4s[3].A: {a12: -502.205584, azi1: 45.0, azi2: 128.31631, lat1: 0, lat2: -25.754704, lon1: 0, lon2: -150.070512, s12: -55767330.491992}
    test 26 Next4s[3].B: {a12: -515.398425, azi1: 135.0, azi2: 33.760786, lat1: 45, lat2: -25.754704, lon1: 10.0, lon2: -150.070512, s12: -57253943.005477}
    test 27 Next4s[3].sAB: 1.184e-08
    test 28 Next4s[3].c: 0
    test 29 Next4s[3].iteration: 26

    test 30 Next4s[4].A: {a12: -682.29945, azi1: 45.0, azi2: 51.648333, lat1: 0, lat2: 25.696362, lon1: 0, lon2: 30.274596, s12: -75764890.636958}
    test 31 Next4s[4].B: {a12: -695.328403, azi1: 135.0, azi2: 146.257895, lat1: 45, lat2: 25.696362, lon1: 10.0, lon2: 30.274596, s12: -77241679.394295}
    test 32 Next4s[4].sAB: 6.36654e-09
    test 33 Next4s[4].c: 0
    test 34 Next4s[4].iteration: 26

    test 35 Next4s[5].A: {a12: -862.393389, azi1: 45.0, azi2: 128.386942, lat1: 0, lat2: -25.637928, lon1: 0, lon2: -149.38028, s12: -95762458.926322}
    test 36 Next4s[5].B: {a12: -875.258287, azi1: 135.0, azi2: 33.723456, lat1: 45, lat2: -25.637928, lon1: 10.0, lon2: -149.38028, s12: -97229405.338727}
    test 37 Next4s[5].sAB: 8.54282e-09
    test 38 Next4s[5].c: 0
    test 39 Next4s[5].iteration: 26

    test 40 Next4s[6].A: {a12: -1042.487402, azi1: 45.0, azi2: 51.577864, lat1: 0, lat2: 25.579403, lon1: 0, lon2: 30.964859, s12: -115760035.363137}
    test 41 Next4s[6].B: {a12: -1055.188077, azi1: 135.0, azi2: 146.29516, lat1: 45, lat2: 25.579403, lon1: 10.0, lon2: 30.964859, s12: -117217120.844751}
    test 42 Next4s[6].sAB: 2.49728e-08
    test 43 Next4s[6].c: 0
    test 44 Next4s[6].iteration: 26

    test 45 Next4s[7].A: {a12: -1222.581489, azi1: 45.0, azi2: 128.457247, lat1: 0, lat2: -25.520787, lon1: 0, lon2: -148.689985, s12: -135757619.950331}
    test 46 Next4s[7].B: {a12: -1235.117773, azi1: 135.0, azi2: 33.686257, lat1: 45, lat2: -25.520787, lon1: 10.0, lon2: -148.689985, s12: -137204825.918445}
    test 47 Next4s[7].sAB: 2.76888e-08
    test 48 Next4s[7].c: 0
    test 49 Next4s[7].iteration: 26

    test 50 Next4s[8].A: {a12: -1402.67565, azi1: 45.0, azi2: 51.507723, lat1: 0, lat2: 25.462078, lon1: 0, lon2: 31.655185, s12: -155755212.690707}
    test 51 Next4s[8].B: {a12: -1415.047375, azi1: 135.0, azi2: 146.332293, lat1: 45, lat2: 25.462078, lon1: 10.0, lon2: 31.655185, s12: -157192520.565987}
    test 52 Next4s[8].sAB: 3.82321e-08
    test 53 Next4s[8].c: 0
    test 54 Next4s[8].iteration: 26

    test 55 Next4s[9].A: {a12: -1582.769884, azi1: 45.0, azi2: 128.527225, lat1: 0, lat2: -25.403279, lon1: 0, lon2: -147.999628, s12: -175752813.586945}
    test 56 Next4s[9].B: {a12: -1594.976883, azi1: 135.0, azi2: 33.649191, lat1: 45, lat2: -25.403279, lon1: 10.0, lon2: -147.999628, s12: -177180204.793651}
    test 57 Next4s[9].sAB: 2.74575e-08
    test 58 Next4s[9].c: 0
    test 59 Next4s[9].iteration: 26

    test 60 Next4s[10].A: {a12: -1762.864192, azi1: 45.0, azi2: 51.43791, lat1: 0, lat2: 25.344388, lon1: 0, lon2: 32.345574, s12: -195750422.641595}
    test 61 Next4s[10].B: {a12: -1774.906296, azi1: 135.0, azi2: 146.369293, lat1: 45, lat2: 25.344388, lon1: 10.0, lon2: 32.345574, s12: -197167878.607816}
    test 62 Next4s[10].sAB: 2.58825e-08
    test 63 Next4s[10].c: 0
    test 64 Next4s[10].iteration: 26

    test 65 Closest.2.sA: 6.05805e+06
    test 66 Closest.2.sB: -3.31125e+06
    test 67 Closest.2.c: 0
    test 68 Closest.2.sX0: 9.3693e+06

    test 69 Closest4.2.A: {a12: 54.562637, azi1: -147.7, azi2: -159.869978, lat1: 50, lat2: 0.0, lon1: -4.0, lon2: -29.745492, s12: 6058048.653081}
    test 70 Closest4.2.B: {a12: -29.845558, azi1: 90.0, azi2: 90.0, lat1: 0, lat2: 0.0, lon1: 0, lon2: -29.745492, s12: -3311252.995823}
    test 71 Closest4.2.sAB: 7.71924e-10
    test 72 Closest4.2.c: 0

    test 73 All[0].sA:   -494582
    test 74 All[0].sB: 1.40522e+07
    test 75 All[0].c: 0
    test 76 All[0].sX0: 1.45468e+07
    test 77 All[0].iteration: 4

    test 78 All[1].sA: 1.95291e+07
    test 79 All[1].sB: -5.93234e+06
    test 80 All[1].c: 0
    test 81 All[1].sX0: 2.54615e+07
    test 82 All[1].iteration: 4

    test 83 All[2].sA: -2.05181e+07
    test 84 All[2].sB: -5.97086e+06
    test 85 All[2].c: 0
    test 86 All[2].sX0: 2.64889e+07
    test 87 All[2].iteration: 4

    test 88 All[3].sA:   -494582
    test 89 All[3].sB: -2.59556e+07
    test 90 All[3].c: 0
    test 91 All[3].sX0: 2.64502e+07
    test 92 All[3].iteration: 4

    test 93 All4[0].A: {a12: -4.448619, azi1: -147.7, azi2: -144.55245, lat1: 50, lat2: 53.692598, lon1: -4.0, lon2: -0.0, s12: -494582.492241}
    test 94 All4[0].B: {a12: 126.399265, azi1: 0, azi2: 180.0, lat1: 0, lat2: 53.692598, lon1: 180.0, lon2: 0.0, s12: 14052229.965229}
    test 95 All4[0].sAB: 1.37843e-09
    test 96 All4[0].c: 0
    test 97 All4[0].iteration: 4

    test 98 All4[1].A: {a12: 175.764866, azi1: -147.7, azi2: -35.280487, lat1: 50, lat2: -53.518675, lon1: -4.0, lon2: 180.0, s12: 19529110.042937}
    test 99 All4[1].B: {a12: -53.426639, azi1: 0, azi2: 0.0, lat1: 0, lat2: -53.518675, lon1: 180.0, lon2: 180.0, s12: -5932344.259165}
    test 100 All4[1].sAB: 2.3569e-09
    test 101 All4[1].c: 0
    test 102 All4[1].iteration: 4

    test 103 All4[2].A: {a12: -184.660358, azi1: -147.7, azi2: -35.614985, lat1: 50, lat2: -53.864737, lon1: -4.0, lon2: 180.0, s12: -20518081.166643}
    test 104 All4[2].B: {a12: -53.773048, azi1: 0, azi2: 0.0, lat1: 0, lat2: -53.864737, lon1: 180.0, lon2: 180.0, s12: -5970860.779079}
    test 105 All4[2].sAB: 1.86981e-09
    test 106 All4[2].c: 0
    test 107 All4[2].iteration: 4

    test 108 All4[3].A: {a12: -4.448619, azi1: -147.7, azi2: -144.55245, lat1: 50, lat2: 53.692598, lon1: -4.0, lon2: -0.0, s12: -494582.492241}
    test 109 All4[3].B: {a12: -233.600735, azi1: 0, azi2: 180.0, lat1: 0, lat2: 53.692598, lon1: 180.0, lon2: 0.0, s12: -25955632.952022}
    test 110 All4[3].sAB: 1.58412e-09
    test 111 All4[3].c: 0
    test 112 All4[3].iteration: 4

    test 113 _xdict: 111

    all 113 testGeodesici.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 3.007 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testGeodesicx.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.classname from .named by testGeodesicx.py line 12
# lazily imported pygeodesy.DIG from .constants by testGeodesicx.py line 12
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testGeodesicx.py line 12
# lazily imported pygeodesy.GDict from .karney by testGeodesicx.py line 12
# lazily imported pygeodesy.GeodesicLineExact from .geodesicx by testGeodesicx.py line 12
# lazily imported pygeodesy.itemsorted from .basics by testGeodesicx.py line 12
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testGeodesicx.py line 256
# lazily imported pygeodesy.geodesicw by testGeodesicx.py line 256
# lazily imported pygeodesy.geodsolve by testGeodesicx.py line 256

    testing testGeodesicx.py 24.06.24 (module pygeodesy.geodesicx 24.06.19) isLazy=3

    testDirectX vs ...(pygeodesy.geodesicx, 24.06.19)
# lazily imported pygeodesy.elliptic by gxline.py line 288
    test 1 C++X.a12: 49.4755274632515
    test 2 C++X.azi1: 51
    test 3 C++X.azi2: 107.189397162606
    test 4 C++X.lat1: 40.6
    test 5 C++X.lat2: 51.8845645056068
    test 6 C++X.lon1: -73.8
    test 7 C++X.lon2: -1.14117286120083
    test 8 C++X.m12: 4844148.70310149
    test 9 C++X.M12: 0.650910566998086
    test 10 C++X.M21: 0.651228658921966
    test 11 C++X.s12: 5500000
    test 12 C++X.S12: 39735075134877.1
    test 13 iteration: None

    test 14 _GeodesicLineExact: name='', lat1=40.6, lon1=-73.8, azi1=51, a13=49.475527, s13=5500000, geodesic=GeodesicExact(name='WGS84', ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30)
    test 15 GeodesicExact: GeodesicExact(name='WGS84', ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30)
    test 16 _GeodesicLineExact: Direct9Tuple(a12=49.475527, lat2=51.884565, lon2=-1.141173, azi2=107.189397, s12=5500000.0, m12=NAN, M12=NAN, M21=NAN, S12=NAN)

    test 17 GeodesicExact: {a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, s12: 5500000.0}
    test 18 GeodesicExact: (49.475527, 51.884565, -1.141173, 107.189397, 5500000.0, NAN, NAN, NAN, NAN)
    test 19 GeodesicExact: {a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: NAN, M12: NAN, M21: NAN, s12: 5500000.0, S12: NAN}  FAILED, KNOWN, expected {a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, s12: 5500000.0}

    test 20 ArcDirect.a12: 49.8
    test 21 ArcDirect.azi1: 51
    test 22 ArcDirect.azi2: 107.582082475406  FAILED, KNOWN, expected 107.5820825
    test 23 ArcDirect.lat1: 40.6
    test 24 ArcDirect.lat2: 51.7876866587893  FAILED, KNOWN, expected 51.7876867
    test 25 ArcDirect.lon1: -73.8
    test 26 ArcDirect.lon2: -0.641731343091337  FAILED, KNOWN, expected -0.641731
    test 27 ArcDirect.s12: 5536073.73439267  FAILED, KNOWN, expected 5536073.734393
    test 28 iteration: None

    test 29 ArcDirectLine: name='', lat1=40.6, lon1=-73.8, azi1=51, a13=49.8, s13=5536073.734393, geodesic=GeodesicExact(name='WGS84', ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30)
    test 30 iteration: None

    test 31 GeodesicLineExact: name='', lat1=40.6, lon1=-73.8, azi1=51, a13=NAN, s13=NAN, geodesic=GeodesicExact(name='WGS84', ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30)
    test 32 iteration: None

    testInverseX vs ...(pygeodesy.geodesicx, 24.06.19)
    test 33 C++X.a12: 49.941310217899
    test 34 C++X.azi1: 51.1988828455798
    test 35 C++X.azi2: 107.821776735514
    test 36 C++X.lat1: 40.6
    test 37 C++X.lat2: 51.6
    test 38 C++X.lon1: -73.8
    test 39 C++X.lon2: -0.5
    test 40 C++X.m12: 4877684.6027062
    test 41 C++X.M12: 0.644729692059482
    test 42 C++X.M21: 0.645045678521344
    test 43 C++X.s12: 5551759.40031868
    test 44 C++X.S12: 40041368848742.5
    test 45 iteration: 3

    test 46 _GeodesicLineExact: _GeodesicLineExact(name='', lat1=40.6, lon1=-73.8, azi1=51.198883, a13=49.94131, s13=5551759.400319, geodesic=GeodesicExact(name='WGS84', ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30))
    test 47 GeodesicExact: name='WGS84', ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30
    test 48 _GeodesicLineExact: Direct9Tuple(a12=49.94131, lat2=51.6, lon2=-0.5, azi2=107.821777, s12=5551759.400319, m12=NAN, M12=NAN, M21=NAN, S12=NAN)

    test 49 GeodesicExact: GDict(a12=49.94131, azi1=51.198883, azi2=107.821777, lat1=40.6, lat2=51.6, lon1=-73.8, lon2=-0.5, s12=5551759.400319)
    test 50 GeodesicExact: Inverse10Tuple(a12=49.94131, s12=5551759.400319, salp1=NAN, calp1=NAN, salp2=NAN, calp2=NAN, m12=NAN, M12=NAN, M21=NAN, S12=NAN)
    test 51 GeodesicExact: {a12: 49.94131, azi1: NAN, azi2: NAN, calp1: NAN, calp2: NAN, m12: NAN, M12: NAN, M21: NAN, s12: 5551759.400319, S12: NAN, salp1: NAN, salp2: NAN}  FAILED, KNOWN, expected {a12: 49.94131, azi1: 51.198883, azi2: 107.821777, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, s12: 5551759.400319}

    test 52 Inverse: {a12: 49.647855, azi1: 51.139649, azi2: 107.74164, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, s12: 5515844.227497}
    test 53 Inverse1: 49.647854761166144

    testPolygon24(pygeodesy.geodesicx, 24.06.19)
    test 54 Compute: (1, 0, 0)
    test 55 AddEdges: (4, 4000, 1000000)
    test 56 TestEdge: (5, 4000, 1000000)
    test 57 Clear: 0
    test 58 TestPoint: (1, 0, 0)
    test 59 AddPoints: (4, 29506941, 65690027591346)
    test 60 TestPoint: (5, 29506941, 65690027591346)
    test 61 toStr: area=65690027591345.671875, geodesic=GeodesicExact(name='WGS84', ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=24), num=4, perimeter=29506941.155178, polyline=False

    testPolygon27(pygeodesy.geodesicx, 24.06.19)
    test 62 Compute: (1, 0, 0)
    test 63 AddEdges: (4, 4000, 1000000)
    test 64 TestEdge: (5, 4000, 1000000)
    test 65 Clear: 0
    test 66 TestPoint: (1, 0, 0)
    test 67 AddPoints: (4, 29506941, 65690027591346)
    test 68 TestPoint: (5, 29506941, 65690027591346)
    test 69 toStr: area=65690027591345.671875, geodesic=GeodesicExact(name='WGS84', ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=27), num=4, perimeter=29506941.155178, polyline=False

    testPolygon30(pygeodesy.geodesicx, 24.06.19)
    test 70 Compute: (1, 0, 0)
    test 71 AddEdges: (4, 4000, 1000000)
    test 72 TestEdge: (5, 4000, 1000000)
    test 73 Clear: 0
    test 74 TestPoint: (1, 0, 0)
    test 75 AddPoints: (4, 29506941, 65690027591346)
    test 76 TestPoint: (5, 29506941, 65690027591346)
    test 77 toStr: area=65690027591345.671875, geodesic=GeodesicExact(name='WGS84', ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30), num=4, perimeter=29506941.155178, polyline=False

    testPlumbTo ...(pygeodesy.geodesicx, 24.06.19)
# lazily imported pygeodesy.rhumb by geodesicw.py line 557
    test 78 lat2: 51.846089
    test 79 lon2: 5.260428
    test 80 s12: 24784.288415
    test 81 at: -270.000000
    test 82 iteration: 6

    test 83 lat2: 54.928531
    test 84 lon2: -21.937291
    test 85 s12: 3928788.572003
    test 86 at: 270.000000
    test 87 iteration: 27

    test 88 lat2: 37.976219  FAILED, KNOWN, expected 37.976217
    test 89 lon2: 18.344824  FAILED, KNOWN, expected 18.344820
    test 90 s12: 1012790.171170  FAILED, KNOWN, expected 1012790.599291
    test 91 at: 270.005432  FAILED, KNOWN, expected 270.005437
    test 92 iteration: 128

    10 of 92 testGeodesicx.py tests (10.9%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 2.576 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testGeohash.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.classname from .named by testGeohash.py line 11
# lazily imported pygeodesy.fstr from .streprs by testGeohash.py line 11
# lazily imported pygeodesy.geohash by testGeohash.py line 11
# lazily imported pygeodesy.Geohash from .geohash by testGeohash.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testGeohash.py line 130

    testing testGeohash.py 24.04.25 (module pygeodesy.geohash 24.06.15) isLazy=3
    test 1 Geohash: geek
    test 2 Geohash: geek
    test 3 Geohash: 'geek'
    test 4 Geohash: Geohash('geek')
    test 5 Geohash: geek
    test 6 bounds: (LatLon(65°23′26.25″N, 017°55′46.88″W), LatLon(65°33′59.06″N, 017°34′41.25″W))
    test 7 toLatLon: 65.478516°N, 017.753906°W
    test 8 latlon: 65.4785156, -17.7539062
    test 9 philam: 1.1428157, -0.3098641
    test 10 copy(Geohash): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 11 Geohash.copy(): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 12 Geohash: geehpbpbp
    test 13 toLatLon: 65.390625°N, 017.929689°W
    test 14 latlon: 65.390625, -17.929689
    test 15 ab: 1.1412817, -0.3129321
    test 16 decode: ('65.390646', '-17.929709')
    test 17 decode2: (65.390646, -17.929709)
    test 18 decode_error: 2.145767e-05, 2.145767e-05
    test 19 distance1To: 2758.887
    test 20 distance2To: 682.760
    test 21 distance3To: 410.732
    test 22 distance4To: 397.404
    test 23 distance5To: 397.404
    test 24 sizes: 4.8, 4.8
    test 25 copy(Geohash): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 26 Geohash.copy(): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 27 N: geehpbpbr
    test 28 NE: geek00002
    test 29 E: geek00000
    test 30 SE: gee7bpbpb
    test 31 S: gee5zzzzz
    test 32 SW: gee5zzzzy
    test 33 W: geehpbpbn
    test 34 NW: geehpbpbq
    test 35 N: geehpbpbr
    test 36 NE: geek00002
    test 37 E: geek00000
    test 38 SE: gee7bpbpb
    test 39 S: gee5zzzzz
    test 40 SW: gee5zzzzy
    test 41 W: geehpbpbn
    test 42 NW: geehpbpbq
    test 43 N: geehpbpbr
    test 44 NE: geek00002
    test 45 E: geek00000
    test 46 SE: gee7bpbpb
    test 47 S: gee5zzzzz
    test 48 SW: gee5zzzzy
    test 49 W: geehpbpbn
    test 50 NW: geehpbpbq
    test 51 N: geehpbpbr
    test 52 NE: geek00002
    test 53 E: geek00000
    test 54 SE: gee7bpbpb
    test 55 S: gee5zzzzz
    test 56 SW: gee5zzzzy
    test 57 W: geehpbpbn
    test 58 NW: geehpbpbq
    test 59 bounds: 52.20428467, 0.11810303, 52.20565796, 0.11947632
    test 60 decode: 52.205, 0.1188
    test 61 encode-decode: u120fxw
    test 62 encode-decode: geek
    test 63 encode-decode: fur
    test 64 encode-decode: geehpbpbp
    test 65 encode-decode: u4pruydqqvj8
    test 66 encode-decode: bgr96qxvpd46
    test 67 encode-decode: 0123456789
    test 68 encode-decode: zzzzzz
    test 69 Geohash: u4pruydq
    test 70 N.E.S.W: True
    test 71 E.S.W.N: True
    test 72 S.W.N.E: True
    test 73 W.N.E.S: True
    test 74 N.E.S.S.W.W.N.N.E.S: True
    test 75 Geohash: u4pruydqq
    test 76 N.E.S.W: True
    test 77 E.S.W.N: True
    test 78 S.W.N.E: True
    test 79 W.N.E.S: True
    test 80 N.E.S.S.W.W.N.N.E.S: True
    test 81 Geohash: u4pruydqqv
    test 82 N.E.S.W: True
    test 83 E.S.W.N: True
    test 84 S.W.N.E: True
    test 85 W.N.E.S: True
    test 86 N.E.S.S.W.W.N.N.E.S: True
    test 87 Geohash: u4pruydqqvj
    test 88 N.E.S.W: True
    test 89 E.S.W.N: True
    test 90 S.W.N.E: True
    test 91 W.N.E.S: True
    test 92 N.E.S.S.W.W.N.N.E.S: True
    test 93 Geohash: u4pruydqqvj8
    test 94 N.E.S.W: True
    test 95 E.S.W.N: True
    test 96 S.W.N.E: True
    test 97 W.N.E.S: True
    test 98 N.E.S.S.W.W.N.N.E.S: True
    test 99 encode: u120fxw
    test 100 decode: ('52.205', '0.1188')
    test 101 decode2: (52.205, 0.1188)
    test 102 decode_error: 6.866455e-04, 6.866455e-04
    test 103 distance_: 486.710
    test 104 distance2: 3.374
    test 105 distance3: 2.992
    test 106 distance4: 2.798
    test 107 distance5: 2.798
    test 108 sizes: 153.0, 153.0
    test 109 Geohash: u336xv
    test 110 encode: u336xv
    test 111 equal: True
    test 112 sizes: 610.0, 1220.0
    test 113 encode: fur
    test 114 decode: ('69.6', '-45.7')
    test 115 decode: ('70.3', '-51')
    test 116 decode: ('68', '-68')
    test 117 decode_error: (0.703125, 0.703125)
    test 118 decode_error: (2.8125, 5.625)
    test 119 decode_error: (22.5, 22.5)
    test 120 encode: ezs42e44yx96
    test 121 decode: ('42.60000003', '-5.59999997')
    test 122 encode: ezs42
    test 123 decode: ('42.605', '-5.603')
    test 124 distance1: 503442.4
    test 125 distance2: 303317.6
    test 126 distance3: 185425.4
    test 127 distance4: 179940.1
    test 128 distance5: 179940.1
    test 129 precision: 0  FAILED, KNOWN, expected 1
    test 130 resolution: 360.0, 180.0
    test 131 precision: 1
    test 132 resolution: 45.0, 11.25
    test 133 precision: 2
    test 134 resolution: 11.25, 0.352
    test 135 precision: 3
    test 136 resolution: 1.4062, 0.011
    test 137 precision: 4
    test 138 resolution: 0.35156, 0.00034
    test 139 precision: 5
    test 140 resolution: 0.043945, 0.000011
    test 141 precision: 6
    test 142 resolution: 0.0109863, 0.0000003
    test 143 precision: 7
    test 144 resolution: 0.00137329, 0.00000001
    test 145 precision: 8
    test 146 resolution: 0.000343323, 0.0
    test 147 precision: 9
    test 148 resolution: 0.0000429153, 0.0
    test 149 precision: 10
    test 150 resolution: 0.00001072884, 0.0
    test 151 precision: 11
    test 152 resolution: 0.000001341105, 0.0
    test 153 precision: 12
    test 154 resolution: 0.0000003352761, 0.0
    test 155 precision: 13  FAILED, KNOWN, expected 12
    test 156 resolution: 0.00000033527613, 0.0

    2 of 156 testGeohash.py tests (1.3%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 12.818 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testGeoids.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.fstr from .streprs by testGeoids.py line 17
# lazily imported pygeodesy.len2 from .basics by testGeoids.py line 17
# lazily imported pygeodesy.egmGeoidHeights from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.Fwelford from .fstats by testGeoids.py line 17
# lazily imported pygeodesy.GeoidError from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.GeoidG2012B from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.GeoidKarney from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.GeoidPGM from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.LatLon_ from .points by testGeoids.py line 17
# lazily imported pygeodesy.RangeError from .errors by testGeoids.py line 17
# lazily imported pygeodesy.reprs from .streprs by testGeoids.py line 17

    testing testGeoids.py 23.05.23 isLazy=3
    test 1 GeoidKarney('egm96-5.pgm').height(-76.981, 34.17) kind 2: 11.422  FAILED, KNOWN, expected 11.423
    test 2 GeoidKarney('egm96-5.pgm').height(79.695, 88.806) kind 2: 0.887  FAILED, KNOWN, expected 0.892
    test 3 GeoidKarney('egm96-5.pgm').height(-15.245, 168.748) kind 2: 65.226
    test 4 GeoidKarney('egm96-5.pgm').height(-19.379, 15.855) kind 2: 24.460  FAILED, KNOWN, expected 24.463
    test 5 GeoidKarney('egm96-5.pgm').height(43.378, -130.552) kind 2: -29.682
    test 6 GeoidKarney('egm96-5.pgm').height(-16.075, 21.795) kind 2: 10.503
    test 7 GeoidKarney('egm96-5.pgm').height(-11.256, -73.75) kind 2: 29.325  FAILED, KNOWN, expected 29.326
    test 8 GeoidKarney('egm96-5.pgm').height(69.017, -15.921) kind 2: 60.423  FAILED, KNOWN, expected 60.424
    test 9 GeoidKarney('egm96-5.pgm').height(2.221, 139.739) kind 2: 68.997  FAILED, KNOWN, expected 68.996
    test 10 GeoidKarney('egm96-5.pgm').height(-9.097, 119.142) kind 2: 36.295  FAILED, KNOWN, expected 36.287
    test 11 GeoidKarney('egm96-5.pgm').height(-28.524, -22.192) kind 2: 6.627  FAILED, KNOWN, expected 6.626
    test 12 GeoidKarney('egm96-5.pgm').height(12.272, -136.424) kind 2: -20.860
    test 13 GeoidKarney('egm96-5.pgm').height(-15.203, -85.604) kind 2: -3.266  FAILED, KNOWN, expected -3.267
    test 14 GeoidKarney('egm96-5.pgm').height(-63.736, -77.17) kind 2: -1.296  FAILED, KNOWN, expected -1.294
    test 15 GeoidKarney('egm96-5.pgm').height(-48.771, -90.102) kind 2: -2.322
    test 16 GeoidKarney('egm96-5.pgm').height(-0.179, -126.368) kind 2: -17.556  FAILED, KNOWN, expected -17.557
    test 17 GeoidKarney('egm96-5.pgm').height(1.586, -128.887) kind 2: -16.594
    test 18 GeoidKarney('egm96-5.pgm').height(-48.781, -2.684) kind 2: 24.455  FAILED, KNOWN, expected 24.453
    test 19 GeoidKarney('egm96-5.pgm').height(-49.092, 136.862) kind 2: -18.591  FAILED, KNOWN, expected -18.592
    test 20 GeoidKarney('egm96-5.pgm').height(47.732, 17.552) kind 2: 44.051  FAILED, KNOWN, expected 44.049
    test 21 GeoidKarney('egm96-5.pgm').height(-49.11, 85.706) kind 2: 18.582  FAILED, KNOWN, expected 18.581
    test 22 GeoidKarney('egm96-5.pgm').height(-49.162, 40.321) kind 2: 44.290  FAILED, KNOWN, expected 44.289
    test 23 GeoidKarney('egm96-5.pgm').height(3.498, 158.118) kind 2: 49.821  FAILED, KNOWN, expected 49.816
    test 24 GeoidKarney('egm96-5.pgm').height(-35.616, 122.648) kind 2: -36.108  FAILED, KNOWN, expected -36.114
    test 25 GeoidKarney('egm96-5.pgm').height(56.598, -96.114) kind 2: -41.046  FAILED, KNOWN, expected -41.048
    test 26 GeoidKarney('egm96-5.pgm').height(-31.85, 149.121) kind 2: 26.457  FAILED, KNOWN, expected 26.456
    test 27 GeoidKarney('egm96-5.pgm').height(-26.569, -177.792) kind 2: 49.309  FAILED, KNOWN, expected 49.317
    test 28 GeoidKarney('egm96-5.pgm').height(76.735, -65.753) kind 2: 20.706  FAILED, KNOWN, expected 20.714
    test 29 GeoidKarney('egm96-5.pgm').height(-21.404, -122.268) kind 2: -7.363  FAILED, KNOWN, expected -7.362
    test 30 GeoidKarney('egm96-5.pgm').height(-77.133, -65.474) kind 2: -16.499  FAILED, KNOWN, expected -16.492
    test 31 GeoidKarney('egm96-5.pgm').height(-58.812, 2.276) kind 2: 18.108  FAILED, KNOWN, expected 18.110
    test 32 GeoidKarney('egm96-5.pgm').height(4.415, 155.683) kind 2: 51.859  FAILED, KNOWN, expected 51.858
    test 33 GeoidKarney('egm96-5.pgm').height(-28.146, 107.081) kind 2: -38.979  FAILED, KNOWN, expected -38.981
    test 34 GeoidKarney('egm96-5.pgm').height(-10.551, -126.69) kind 2: -9.912  FAILED, KNOWN, expected -9.913
    test 35 GeoidKarney('egm96-5.pgm').height(-25.444, -103.337) kind 2: -2.827  FAILED, KNOWN, expected -2.828
    test 36 GeoidKarney('egm96-5.pgm').height(24.436, 46.159) kind 2: -5.719
    test 37 GeoidKarney('egm96-5.pgm').height(-72.889, 37.107) kind 2: 22.420  FAILED, KNOWN, expected 22.426
    test 38 GeoidKarney('egm96-5.pgm').height(-19.629, 13.245) kind 2: 24.546  FAILED, KNOWN, expected 24.545
    test 39 GeoidKarney('egm96-5.pgm').height(-7.602, 171.265) kind 2: 40.651  FAILED, KNOWN, expected 40.652
    test 40 GeoidKarney('egm96-5.pgm').height(-45.364, -1.876) kind 2: 22.380  FAILED, KNOWN, expected 22.383
    test 41 GeoidKarney('egm96-5.pgm').height(-7.292, -69.18) kind 2: 22.185  FAILED, KNOWN, expected 22.182
    test 42 GeoidKarney('egm96-5.pgm').height(-31.566, -166.689) kind 2: 14.927  FAILED, KNOWN, expected 14.930
    test 43 GeoidKarney('egm96-5.pgm').height(-82.751, -162.085) kind 2: -47.093  FAILED, KNOWN, expected -47.094
    test 44 GeoidKarney('egm96-5.pgm').height(-40.7, 99.466) kind 2: -18.421
    test 45 GeoidKarney('egm96-5.pgm').height(48.676, 39.69) kind 2: 10.060  FAILED, KNOWN, expected 10.055
    test 46 GeoidKarney('egm96-5.pgm').height(74.817, -78.404) kind 2: 5.784  FAILED, KNOWN, expected 5.786
    test 47 GeoidKarney('egm96-5.pgm').height(-81.032, -63.865) kind 2: -22.840  FAILED, KNOWN, expected -22.838
    test 48 GeoidKarney('egm96-5.pgm').height(74.022, 9.432) kind 2: 42.988  FAILED, KNOWN, expected 42.989
    test 49 GeoidKarney('egm96-5.pgm').height(-75.071, 17.579) kind 2: 15.351  FAILED, KNOWN, expected 15.353
    test 50 GeoidKarney('egm96-5.pgm').height(-12.546, -54.851) kind 2: -6.341  FAILED, KNOWN, expected -6.337
    test 51 GeoidKarney('egm96-5.pgm').height(-13.621, 42.408) kind 2: -25.551  FAILED, KNOWN, expected -25.555
    test 52 GeoidKarney('egm96-5.pgm').height(-2.266, -91.951) kind 2: -9.921  FAILED, KNOWN, expected -9.923
    test 53 GeoidKarney('egm96-5.pgm').height(-18.672, 42.547) kind 2: -10.861  FAILED, KNOWN, expected -10.852
    test 54 GeoidKarney('egm96-5.pgm').height(-41.44, 157.413) kind 2: -0.136  FAILED, KNOWN, expected -0.135
    test 55 GeoidKarney('egm96-5.pgm').height(53.686, -79.375) kind 2: -43.808  FAILED, KNOWN, expected -43.809
    test 56 GeoidKarney('egm96-5.pgm').height(39.26, -30.351) kind 2: 57.151  FAILED, KNOWN, expected 57.150
    test 57 GeoidKarney('egm96-5.pgm').height(-51.699, -141.493) kind 2: -17.660  FAILED, KNOWN, expected -17.657
    test 58 GeoidKarney('egm96-5.pgm').height(36.585, 4.515) kind 2: 46.356  FAILED, KNOWN, expected 46.358
    test 59 GeoidKarney('egm96-5.pgm').height(39.642, -54.659) kind 2: -14.404
    test 60 GeoidKarney('egm96-5.pgm').height(59.761, 166.567) kind 2: 11.239  FAILED, KNOWN, expected 11.242
    test 61 GeoidKarney('egm96-5.pgm').height(51.83, 13.357) kind 2: 42.236  FAILED, KNOWN, expected 42.237
    test 62 GeoidKarney('egm96-5.pgm').height(-36.531, -175.431) kind 2: 22.148  FAILED, KNOWN, expected 22.147
    test 63 GeoidKarney('egm96-5.pgm').height(-37.08, 125.264) kind 2: -33.395  FAILED, KNOWN, expected -33.396
    test 64 GeoidKarney('egm96-5.pgm').height(-68.651, 92.732) kind 2: 7.965  FAILED, KNOWN, expected 7.961
    test 65 GeoidKarney('egm96-5.pgm').height(35.087, 45.336) kind 2: 7.228  FAILED, KNOWN, expected 7.229
    test 66 GeoidKarney('egm96-5.pgm').height(-61.356, -169.379) kind 2: -44.289  FAILED, KNOWN, expected -44.292
    test 67 GeoidKarney('egm96-5.pgm').height(-36.955, 179.12) kind 2: 21.872  FAILED, KNOWN, expected 21.875
    test 68 GeoidKarney('egm96-5.pgm').height(10.248, -6.714) kind 2: 28.935  FAILED, KNOWN, expected 28.933
    test 69 GeoidKarney('egm96-5.pgm').height(36.868, 84.602) kind 2: -41.255  FAILED, KNOWN, expected -41.238
    test 70 GeoidKarney('egm96-5.pgm').height(28.637, 88.933) kind 2: -31.334  FAILED, KNOWN, expected -31.331
    test 71 GeoidKarney('egm96-5.pgm').height(54.811, -99.968) kind 2: -32.702
    test 72 GeoidKarney('egm96-5.pgm').height(7.611, 145.911) kind 2: 60.118  FAILED, KNOWN, expected 60.117
    test 73 GeoidKarney('egm96-5.pgm').height(59.412, 170.102) kind 2: 6.456  FAILED, KNOWN, expected 6.457
    test 74 GeoidKarney('egm96-5.pgm').height(-61.469, 126.144) kind 2: -31.959  FAILED, KNOWN, expected -31.961
    test 75 GeoidKarney('egm96-5.pgm').height(18.514, -137.083) kind 2: -26.572  FAILED, KNOWN, expected -26.571
    test 76 GeoidKarney('egm96-5.pgm').height(7.854, -126.799) kind 2: -29.761  FAILED, KNOWN, expected -29.760
    test 77 GeoidKarney('egm96-5.pgm').height(47.489, 134.183) kind 2: 21.980
    test 78 GeoidKarney('egm96-5.pgm').height(-34.144, -11.922) kind 2: 16.849
    test 79 GeoidKarney('egm96-5.pgm').height(-58.389, 117.458) kind 2: -20.922  FAILED, KNOWN, expected -20.923
    test 80 GeoidKarney('egm96-5.pgm').height(9.773, 95.846) kind 2: -42.745  FAILED, KNOWN, expected -42.749
    test 81 GeoidKarney('egm96-5.pgm').height(-53.12, 136.994) kind 2: -21.839  FAILED, KNOWN, expected -21.841
    test 82 GeoidKarney('egm96-5.pgm').height(-50.35, 0.075) kind 2: 25.482
    test 83 GeoidKarney('egm96-5.pgm').height(31.438, -170.879) kind 2: -8.845  FAILED, KNOWN, expected -8.847
    test 84 GeoidKarney('egm96-5.pgm').height(37.541, -153.024) kind 2: -19.600  FAILED, KNOWN, expected -19.604
    test 85 GeoidKarney('egm96-5.pgm').height(27.586, 2.444) kind 2: 25.672  FAILED, KNOWN, expected 25.668
    test 86 GeoidKarney('egm96-5.pgm').height(-26.139, -106.201) kind 2: -3.772
    test 87 GeoidKarney('egm96-5.pgm').height(-33.426, -14.84) kind 2: 17.747  FAILED, KNOWN, expected 17.748
    test 88 GeoidKarney('egm96-5.pgm').height(39.586, -153.019) kind 2: -17.838  FAILED, KNOWN, expected -17.839
    test 89 GeoidKarney('egm96-5.pgm').height(-60.79, -2.578) kind 2: 14.293  FAILED, KNOWN, expected 14.292
    test 90 GeoidKarney('egm96-5.pgm').height(-20.131, 21.975) kind 2: 16.529
    test 91 GeoidKarney('egm96-5.pgm').height(75.649, 99.921) kind 2: -8.230  FAILED, KNOWN, expected -8.229
    test 92 GeoidKarney('egm96-5.pgm').height(-0.385, -23.788) kind 2: 9.828  FAILED, KNOWN, expected 9.830
    test 93 GeoidKarney('egm96-5.pgm').height(-51.56, -50.327) kind 2: 6.213  FAILED, KNOWN, expected 6.215
    test 94 GeoidKarney('egm96-5.pgm').height(-43.129, -167.271) kind 2: -2.957  FAILED, KNOWN, expected -2.960
    test 95 GeoidKarney('egm96-5.pgm').height(46.374, 71.948) kind 2: -42.326  FAILED, KNOWN, expected -42.323
    test 96 GeoidKarney('egm96-5.pgm').height(-22.783, 140.657) kind 2: 38.352  FAILED, KNOWN, expected 38.356
    test 97 GeoidKarney('egm96-5.pgm').height(-12.056, 122.804) kind 2: 34.242  FAILED, KNOWN, expected 34.259
    test 98 GeoidKarney('egm96-5.pgm').height(30.127, 94.738) kind 2: -37.390  FAILED, KNOWN, expected -37.397
    test 99 GeoidKarney('egm96-5.pgm').height(46.296, -174.479) kind 2: -2.015  FAILED, KNOWN, expected -2.016
    test 100 GeoidKarney('egm96-5.pgm').height(34.99, 15.052) kind 2: 33.915  FAILED, KNOWN, expected 33.912
    test 101 GeoidKarney('egm96-5.pgm').height(-51.287, 90.565) kind 2: 12.676
    test 102 GeoidKarney('egm96-5.pgm').height(34.217, 141.302) kind 2: 15.729  FAILED, KNOWN, expected 15.692
    test 103 GeoidKarney('egm96-5.pgm').height(-40.423, -142.787) kind 2: -11.117
    test 104 GeoidKarney('egm96-5.pgm').height(-17.854, -170.216) kind 2: 27.443  FAILED, KNOWN, expected 27.437
    test 105 GeoidKarney('egm96-5.pgm').height(47.803, 112.701) kind 2: -23.893  FAILED, KNOWN, expected -23.894
    test 106 GeoidKarney('egm96-5.pgm').height(-23.276, 133.454) kind 2: 18.749  FAILED, KNOWN, expected 18.766
    test 107 GeoidKarney('egm96-5.pgm').height(-26.884, -36.571) kind 2: -7.452
    test 108 GeoidKarney('egm96-5.pgm').height(-37.106, 31.128) kind 2: 30.141  FAILED, KNOWN, expected 30.143
    test 109 GeoidKarney('egm96-5.pgm').height(-75.363, -173.674) kind 2: -61.176  FAILED, KNOWN, expected -61.172
    test 110 GeoidKarney('egm96-5.pgm').height(-18.305, 69.016) kind 2: -24.892  FAILED, KNOWN, expected -24.890
    test 111 GeoidKarney('egm96-5.pgm').height(39.527, 23.58) kind 2: 39.523  FAILED, KNOWN, expected 39.519
    test 112 GeoidKarney('egm96-5.pgm').height(68.903, 30.97) kind 2: 19.417  FAILED, KNOWN, expected 19.419
    test 113 GeoidKarney('egm96-5.pgm').height(53.937, 168.318) kind 2: 2.069
    test 114 GeoidKarney('egm96-5.pgm').height(-38.6, 64.812) kind 2: 25.048
    test 115 GeoidKarney('egm96-5.pgm').height(-41.396, -69.739) kind 2: 22.547
    test 116 GeoidKarney('egm96-5.pgm').height(50.158, 72.319) kind 2: -34.359
    test 117 GeoidKarney('egm96-5.pgm').height(27.692, 176.153) kind 2: -5.454  FAILED, KNOWN, expected -5.453
    test 118 GeoidKarney('egm96-5.pgm').height(-48.419, 170.454) kind 2: -6.802  FAILED, KNOWN, expected -6.804
    test 119 GeoidKarney('egm96-5.pgm').height(-65.346, -124.976) kind 2: -35.053  FAILED, KNOWN, expected -35.054
    test 120 GeoidKarney('egm96-5.pgm').height(-51.873, 167.266) kind 2: -15.417  FAILED, KNOWN, expected -15.418
    test 121 GeoidKarney('egm96-5.pgm').height(-7.263, 84.308) kind 2: -79.556  FAILED, KNOWN, expected -79.557
    test 122 GeoidKarney('egm96-5.pgm').height(-1.461, -105.458) kind 2: -16.894
    test 123 GeoidKarney('egm96-5.pgm').height(7.684, 161.873) kind 2: 36.213  FAILED, KNOWN, expected 36.215
    test 124 GeoidKarney('egm96-5.pgm').height(-31.475, -158.52) kind 2: 3.524  FAILED, KNOWN, expected 3.523
    test 125 GeoidKarney('egm96-5.pgm').height(-36.187, 62.917) kind 2: 23.796  FAILED, KNOWN, expected 23.797
    test 126 GeoidKarney('egm96-5.pgm').height(16.003, 141.687) kind 2: 51.587  FAILED, KNOWN, expected 51.586
    test 127 GeoidKarney('egm96-5.pgm').height(30.182, 86.261) kind 2: -30.131
    test 128 GeoidKarney('egm96-5.pgm').height(-77.304, 159.498) kind 2: -51.853  FAILED, KNOWN, expected -51.848
    test 129 GeoidKarney('egm96-5.pgm').height(39.536, 139.795) kind 2: 37.200  FAILED, KNOWN, expected 37.192
    test 130 GeoidKarney('egm96-5.pgm').height(8.569, 134.618) kind 2: 63.583  FAILED, KNOWN, expected 63.597
    test 131 GeoidKarney('egm96-5.pgm').height(14.473, 90.596) kind 2: -62.636
    test 132 GeoidKarney('egm96-5.pgm').height(-13.138, -99.589) kind 2: -8.717
    test 133 GeoidKarney('egm96-5.pgm').height(34.212, -26.307) kind 2: 40.649  FAILED, KNOWN, expected 40.645
    test 134 GeoidKarney('egm96-5.pgm').height(21.89, 76.371) kind 2: -60.730  FAILED, KNOWN, expected -60.729
    test 135 GeoidKarney('egm96-5.pgm').height(29.793, 120.487) kind 2: 8.784  FAILED, KNOWN, expected 8.783
    test 136 GeoidKarney('egm96-5.pgm').height(15.724, 122.714) kind 2: 31.569  FAILED, KNOWN, expected 31.523
    test 137 GeoidKarney('egm96-5.pgm').height(-66.208, -78.499) kind 2: -6.249  FAILED, KNOWN, expected -6.250
    test 138 GeoidKarney('egm96-5.pgm').height(-39.507, 55.809) kind 2: 32.599
    test 139 GeoidKarney('egm96-5.pgm').height(28.159, 51.476) kind 2: -24.531  FAILED, KNOWN, expected -24.536
    test 140 GeoidKarney('egm96-5.pgm').height(-36.207, 120.205) kind 2: -38.863  FAILED, KNOWN, expected -38.869
    test 141 GeoidKarney('egm96-5.pgm').height(30.575, -99.998) kind 2: -23.214  FAILED, KNOWN, expected -23.213
    test 142 GeoidKarney('egm96-5.pgm').height(-16.993, 37.136) kind 2: -11.824
    test 143 GeoidKarney('egm96-5.pgm').height(-11.477, 12.039) kind 2: 16.712  FAILED, KNOWN, expected 16.709
    test 144 GeoidKarney('egm96-5.pgm').height(30.428, -144.765) kind 2: -22.380  FAILED, KNOWN, expected -22.379
    test 145 GeoidKarney('egm96-5.pgm').height(-17.44, -92.424) kind 2: -4.941
    test 146 GeoidKarney('egm96-5.pgm').height(40.203, 143.43) kind 2: 19.382  FAILED, KNOWN, expected 19.394
    test 147 GeoidKarney('egm96-5.pgm').height(-37.098, -106.574) kind 2: -9.381
    test 148 GeoidKarney('egm96-5.pgm').height(54.62, -68.413) kind 2: -23.319
    test 149 GeoidKarney('egm96-5.pgm').height(-31.633, 148.182) kind 2: 24.470  FAILED, KNOWN, expected 24.468
    test 150 GeoidKarney('egm96-5.pgm').height(-56.07, -141.407) kind 2: -21.762  FAILED, KNOWN, expected -21.761
    test 151 GeoidKarney('egm96-5.pgm').height(-8.195, -52.691) kind 2: -18.798
    test 152 GeoidKarney('egm96-5.pgm').height(17.851, 24.749) kind 2: 12.611  FAILED, KNOWN, expected 12.612
    test 153 GeoidKarney('egm96-5.pgm').height(0.349, -108.333) kind 2: -19.708  FAILED, KNOWN, expected -19.706
    test 154 GeoidKarney('egm96-5.pgm').height(15.038, 126.191) kind 2: 45.794  FAILED, KNOWN, expected 45.792
    test 155 GeoidKarney('egm96-5.pgm').height(-21.111, -123.696) kind 2: -8.408  FAILED, KNOWN, expected -8.406
    test 156 GeoidKarney('egm96-5.pgm').height(30.947, 173.002) kind 2: -8.366  FAILED, KNOWN, expected -8.367
    test 157 GeoidKarney('egm96-5.pgm').height(-10.698, -144.091) kind 2: -2.026  FAILED, KNOWN, expected -2.025
    test 158 GeoidKarney('egm96-5.pgm').height(-29.412, 124.753) kind 2: -16.569
    test 159 GeoidKarney('egm96-5.pgm').height(38.224, -137.189) kind 2: -35.434  FAILED, KNOWN, expected -35.435
    test 160 GeoidKarney('egm96-5.pgm').height(36.064, -132.409) kind 2: -39.009
    test 161 GeoidKarney('egm96-5.pgm').height(29.975, 178.076) kind 2: -6.921
    test 162 GeoidKarney('egm96-5.pgm').height(-21.346, 169.26) kind 2: 50.811  FAILED, KNOWN, expected 50.795
    test 163 GeoidKarney('egm96-5.pgm').height(49.282, -152.934) kind 2: 1.069  FAILED, KNOWN, expected 1.070
    test 164 GeoidKarney('egm96-5.pgm').height(16.349, -99.962) kind 2: -14.198  FAILED, KNOWN, expected -14.214
    test 165 GeoidKarney('egm96-5.pgm').height(-14.293, -167.34) kind 2: 17.603  FAILED, KNOWN, expected 17.600
    test 166 GeoidKarney('egm96-5.pgm').height(47.166, -38.523) kind 2: 44.803  FAILED, KNOWN, expected 44.804
    test 167 GeoidKarney('egm96-5.pgm').height(-58.911, 114.347) kind 2: -17.924  FAILED, KNOWN, expected -17.922
    test 168 GeoidKarney('egm96-5.pgm').height(-9.055, 111.294) kind 2: 10.681  FAILED, KNOWN, expected 10.662
    test 169 GeoidKarney('egm96-5.pgm').height(18.391, 29.692) kind 2: 7.672  FAILED, KNOWN, expected 7.670
    test 170 GeoidKarney('egm96-5.pgm').height(-15.074, 22.153) kind 2: 8.622  FAILED, KNOWN, expected 8.623
    test 171 GeoidKarney('egm96-5.pgm').height(-4.235, 62.001) kind 2: -60.723
    test 172 GeoidKarney('egm96-5.pgm').height(15.171, -86.583) kind 2: 3.818
    test 173 GeoidKarney('egm96-5.pgm').height(79.254, 112.116) kind 2: -1.870  FAILED, KNOWN, expected -1.871
    test 174 GeoidKarney('egm96-5.pgm').height(15.947, 156.093) kind 2: 30.642  FAILED, KNOWN, expected 30.633
    test 175 GeoidKarney('egm96-5.pgm').height(68.371, -177.382) kind 2: 2.801
    test 176 GeoidKarney('egm96-5.pgm').height(-41.931, -72.093) kind 2: 19.858  FAILED, KNOWN, expected 19.859
    test 177 GeoidKarney('egm96-5.pgm').height(-1.193, -143.133) kind 2: 5.347  FAILED, KNOWN, expected 5.348
    test 178 GeoidKarney('egm96-5.pgm').height(-37.006, 154.513) kind 2: 9.940  FAILED, KNOWN, expected 9.941
    test 179 GeoidKarney('egm96-5.pgm').height(-22.148, 9.938) kind 2: 22.322  FAILED, KNOWN, expected 22.321
    test 180 GeoidKarney('egm96-5.pgm').height(24.329, 109.044) kind 2: -24.136  FAILED, KNOWN, expected -24.135
    test 181 GeoidKarney('egm96-5.pgm').height(-54.878, 114.691) kind 2: -17.680  FAILED, KNOWN, expected -17.679
    test 182 GeoidKarney('egm96-5.pgm').height(45.601, -80.458) kind 2: -37.149  FAILED, KNOWN, expected -37.150
    test 183 GeoidKarney('egm96-5.pgm').height(2.372, 58.974) kind 2: -61.158
    test 184 GeoidKarney('egm96-5.pgm').height(15.937, 165.854) kind 2: 20.600  FAILED, KNOWN, expected 20.602
    test 185 GeoidKarney('egm96-5.pgm').height(4.889, -24.213) kind 2: 13.054  FAILED, KNOWN, expected 13.055
    test 186 GeoidKarney('egm96-5.pgm').height(-11.392, 179.558) kind 2: 40.138  FAILED, KNOWN, expected 40.132
    test 187 GeoidKarney('egm96-5.pgm').height(58.246, 4.862) kind 2: 43.263
    test 188 GeoidKarney('egm96-5.pgm').height(34.302, -109.109) kind 2: -23.129  FAILED, KNOWN, expected -23.126
    test 189 GeoidKarney('egm96-5.pgm').height(-58.196, 117.306) kind 2: -20.677  FAILED, KNOWN, expected -20.678
    test 190 GeoidKarney('egm96-5.pgm').height(44.5, 173.769) kind 2: -8.531  FAILED, KNOWN, expected -8.529
    test 191 GeoidKarney('egm96-5.pgm').height(-28.863, -139.775) kind 2: -8.669  FAILED, KNOWN, expected -8.666
    test 192 GeoidKarney('egm96-5.pgm').height(19.507, -96.099) kind 2: -12.798  FAILED, KNOWN, expected -12.796
    test 193 GeoidKarney('egm96-5.pgm').height(-42.488, -73.907) kind 2: 15.770  FAILED, KNOWN, expected 15.773
    test 194 GeoidKarney('egm96-5.pgm').height(46.138, -141.429) kind 2: -19.955  FAILED, KNOWN, expected -19.954
    test 195 GeoidKarney('egm96-5.pgm').height(60.507, 93.743) kind 2: -31.479  FAILED, KNOWN, expected -31.480
    test 196 GeoidKarney('egm96-5.pgm').height(26.219, -145.434) kind 2: -17.428  FAILED, KNOWN, expected -17.429
    test 197 GeoidKarney('egm96-5.pgm').height(-28.687, 3.37) kind 2: 24.037
    test 198 GeoidKarney('egm96-5.pgm').height(-15.008, 117.45) kind 2: 4.522  FAILED, KNOWN, expected 4.520
    test 199 GeoidKarney('egm96-5.pgm').height(40.71, 144.095) kind 2: 11.403  FAILED, KNOWN, expected 11.394
    test 200 GeoidKarney('egm96-5.pgm').height(20.823, -173.611) kind 2: 5.676  FAILED, KNOWN, expected 5.679
    test 201 GeoidKarney('egm96-5.pgm').height(16.776, -3.009) kind 2: 28.705  FAILED, KNOWN, expected 28.707
    test 202 GeoidKarney('egm96-5.pgm').height(41.0, -95.0) kind 2: -30.261  FAILED, KNOWN, expected -30.262
    test 203 GeoidKarney('egm96-5.pgm').height(49.0, -120.5) kind 2: -15.984
    test 204 GeoidKarney('egm96-5.pgm').height(49.0, -103.5) kind 2: -18.636  FAILED, KNOWN, expected -18.635
    test 205 GeoidKarney('egm96-5.pgm').height(49.0, -86.5) kind 2: -37.749
    test 206 GeoidKarney('egm96-5.pgm').height(49.0, -69.5) kind 2: -26.691
    test 207 GeoidKarney('egm96-5.pgm').height(33.0, -120.5) kind 2: -39.561
    test 208 GeoidKarney('egm96-5.pgm').height(33.0, -103.5) kind 2: -22.563  FAILED, KNOWN, expected -22.562
    test 209 GeoidKarney('egm96-5.pgm').height(33.0, -86.5) kind 2: -30.012
    test 210 GeoidKarney('egm96-5.pgm').height(33.0, -69.5) kind 2: -48.039

    test 211 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.046496
    test 212 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps mean (of 210 total): 0.002766
    test 213 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps stdev (of 210 total): 0.005116
    test 214 GeoidKarney('egm96-5.pgm').toStr: GeoidKarney('egm96-5.pgm'): lowerleft(-90.0, -180.0, -29.535), upperright(90.0, 180.0, 13.605), center(0.0, 0.0, 17.163), highest(-8.167, 147.25, 85.422), lowest(4.667, 78.833, -107.043)

    test 215 closed: True
    test 216 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 217 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 218 GeoidKarney('egm96-5.pgm').height(-76.981, 34.17) kind 3: 11.424  FAILED, KNOWN, expected 11.423
    test 219 GeoidKarney('egm96-5.pgm').height(79.695, 88.806) kind 3: 0.892
    test 220 GeoidKarney('egm96-5.pgm').height(-15.245, 168.748) kind 3: 65.225  FAILED, KNOWN, expected 65.226
    test 221 GeoidKarney('egm96-5.pgm').height(-19.379, 15.855) kind 3: 24.464  FAILED, KNOWN, expected 24.463
    test 222 GeoidKarney('egm96-5.pgm').height(43.378, -130.552) kind 3: -29.682
    test 223 GeoidKarney('egm96-5.pgm').height(-16.075, 21.795) kind 3: 10.503
    test 224 GeoidKarney('egm96-5.pgm').height(-11.256, -73.75) kind 3: 29.325  FAILED, KNOWN, expected 29.326
    test 225 GeoidKarney('egm96-5.pgm').height(69.017, -15.921) kind 3: 60.423  FAILED, KNOWN, expected 60.424
    test 226 GeoidKarney('egm96-5.pgm').height(2.221, 139.739) kind 3: 68.996
    test 227 GeoidKarney('egm96-5.pgm').height(-9.097, 119.142) kind 3: 36.287
    test 228 GeoidKarney('egm96-5.pgm').height(-28.524, -22.192) kind 3: 6.626
    test 229 GeoidKarney('egm96-5.pgm').height(12.272, -136.424) kind 3: -20.861  FAILED, KNOWN, expected -20.860
    test 230 GeoidKarney('egm96-5.pgm').height(-15.203, -85.604) kind 3: -3.267
    test 231 GeoidKarney('egm96-5.pgm').height(-63.736, -77.17) kind 3: -1.295  FAILED, KNOWN, expected -1.294
    test 232 GeoidKarney('egm96-5.pgm').height(-48.771, -90.102) kind 3: -2.323  FAILED, KNOWN, expected -2.322
    test 233 GeoidKarney('egm96-5.pgm').height(-0.179, -126.368) kind 3: -17.555  FAILED, KNOWN, expected -17.557
    test 234 GeoidKarney('egm96-5.pgm').height(1.586, -128.887) kind 3: -16.594
    test 235 GeoidKarney('egm96-5.pgm').height(-48.781, -2.684) kind 3: 24.454  FAILED, KNOWN, expected 24.453
    test 236 GeoidKarney('egm96-5.pgm').height(-49.092, 136.862) kind 3: -18.592
    test 237 GeoidKarney('egm96-5.pgm').height(47.732, 17.552) kind 3: 44.048  FAILED, KNOWN, expected 44.049
    test 238 GeoidKarney('egm96-5.pgm').height(-49.11, 85.706) kind 3: 18.582  FAILED, KNOWN, expected 18.581
    test 239 GeoidKarney('egm96-5.pgm').height(-49.162, 40.321) kind 3: 44.290  FAILED, KNOWN, expected 44.289
    test 240 GeoidKarney('egm96-5.pgm').height(3.498, 158.118) kind 3: 49.817  FAILED, KNOWN, expected 49.816
    test 241 GeoidKarney('egm96-5.pgm').height(-35.616, 122.648) kind 3: -36.114
    test 242 GeoidKarney('egm96-5.pgm').height(56.598, -96.114) kind 3: -41.047  FAILED, KNOWN, expected -41.048
    test 243 GeoidKarney('egm96-5.pgm').height(-31.85, 149.121) kind 3: 26.456
    test 244 GeoidKarney('egm96-5.pgm').height(-26.569, -177.792) kind 3: 49.317
    test 245 GeoidKarney('egm96-5.pgm').height(76.735, -65.753) kind 3: 20.714
    test 246 GeoidKarney('egm96-5.pgm').height(-21.404, -122.268) kind 3: -7.362
    test 247 GeoidKarney('egm96-5.pgm').height(-77.133, -65.474) kind 3: -16.491  FAILED, KNOWN, expected -16.492
    test 248 GeoidKarney('egm96-5.pgm').height(-58.812, 2.276) kind 3: 18.110
    test 249 GeoidKarney('egm96-5.pgm').height(4.415, 155.683) kind 3: 51.858
    test 250 GeoidKarney('egm96-5.pgm').height(-28.146, 107.081) kind 3: -38.979  FAILED, KNOWN, expected -38.981
    test 251 GeoidKarney('egm96-5.pgm').height(-10.551, -126.69) kind 3: -9.913
    test 252 GeoidKarney('egm96-5.pgm').height(-25.444, -103.337) kind 3: -2.828
    test 253 GeoidKarney('egm96-5.pgm').height(24.436, 46.159) kind 3: -5.718  FAILED, KNOWN, expected -5.719
    test 254 GeoidKarney('egm96-5.pgm').height(-72.889, 37.107) kind 3: 22.427  FAILED, KNOWN, expected 22.426
    test 255 GeoidKarney('egm96-5.pgm').height(-19.629, 13.245) kind 3: 24.545
    test 256 GeoidKarney('egm96-5.pgm').height(-7.602, 171.265) kind 3: 40.651  FAILED, KNOWN, expected 40.652
    test 257 GeoidKarney('egm96-5.pgm').height(-45.364, -1.876) kind 3: 22.383
    test 258 GeoidKarney('egm96-5.pgm').height(-7.292, -69.18) kind 3: 22.183  FAILED, KNOWN, expected 22.182
    test 259 GeoidKarney('egm96-5.pgm').height(-31.566, -166.689) kind 3: 14.929  FAILED, KNOWN, expected 14.930
    test 260 GeoidKarney('egm96-5.pgm').height(-82.751, -162.085) kind 3: -47.094
    test 261 GeoidKarney('egm96-5.pgm').height(-40.7, 99.466) kind 3: -18.421
    test 262 GeoidKarney('egm96-5.pgm').height(48.676, 39.69) kind 3: 10.055
    test 263 GeoidKarney('egm96-5.pgm').height(74.817, -78.404) kind 3: 5.786
    test 264 GeoidKarney('egm96-5.pgm').height(-81.032, -63.865) kind 3: -22.838
    test 265 GeoidKarney('egm96-5.pgm').height(74.022, 9.432) kind 3: 42.989
    test 266 GeoidKarney('egm96-5.pgm').height(-75.071, 17.579) kind 3: 15.352  FAILED, KNOWN, expected 15.353
    test 267 GeoidKarney('egm96-5.pgm').height(-12.546, -54.851) kind 3: -6.338  FAILED, KNOWN, expected -6.337
    test 268 GeoidKarney('egm96-5.pgm').height(-13.621, 42.408) kind 3: -25.554  FAILED, KNOWN, expected -25.555
    test 269 GeoidKarney('egm96-5.pgm').height(-2.266, -91.951) kind 3: -9.922  FAILED, KNOWN, expected -9.923
    test 270 GeoidKarney('egm96-5.pgm').height(-18.672, 42.547) kind 3: -10.853  FAILED, KNOWN, expected -10.852
    test 271 GeoidKarney('egm96-5.pgm').height(-41.44, 157.413) kind 3: -0.135
    test 272 GeoidKarney('egm96-5.pgm').height(53.686, -79.375) kind 3: -43.809
    test 273 GeoidKarney('egm96-5.pgm').height(39.26, -30.351) kind 3: 57.150
    test 274 GeoidKarney('egm96-5.pgm').height(-51.699, -141.493) kind 3: -17.656  FAILED, KNOWN, expected -17.657
    test 275 GeoidKarney('egm96-5.pgm').height(36.585, 4.515) kind 3: 46.359  FAILED, KNOWN, expected 46.358
    test 276 GeoidKarney('egm96-5.pgm').height(39.642, -54.659) kind 3: -14.404
    test 277 GeoidKarney('egm96-5.pgm').height(59.761, 166.567) kind 3: 11.242
    test 278 GeoidKarney('egm96-5.pgm').height(51.83, 13.357) kind 3: 42.237
    test 279 GeoidKarney('egm96-5.pgm').height(-36.531, -175.431) kind 3: 22.147
    test 280 GeoidKarney('egm96-5.pgm').height(-37.08, 125.264) kind 3: -33.396
    test 281 GeoidKarney('egm96-5.pgm').height(-68.651, 92.732) kind 3: 7.961
    test 282 GeoidKarney('egm96-5.pgm').height(35.087, 45.336) kind 3: 7.228  FAILED, KNOWN, expected 7.229
    test 283 GeoidKarney('egm96-5.pgm').height(-61.356, -169.379) kind 3: -44.290  FAILED, KNOWN, expected -44.292
    test 284 GeoidKarney('egm96-5.pgm').height(-36.955, 179.12) kind 3: 21.874  FAILED, KNOWN, expected 21.875
    test 285 GeoidKarney('egm96-5.pgm').height(10.248, -6.714) kind 3: 28.933
    test 286 GeoidKarney('egm96-5.pgm').height(36.868, 84.602) kind 3: -41.238
    test 287 GeoidKarney('egm96-5.pgm').height(28.637, 88.933) kind 3: -31.331
    test 288 GeoidKarney('egm96-5.pgm').height(54.811, -99.968) kind 3: -32.702
    test 289 GeoidKarney('egm96-5.pgm').height(7.611, 145.911) kind 3: 60.117
    test 290 GeoidKarney('egm96-5.pgm').height(59.412, 170.102) kind 3: 6.457
    test 291 GeoidKarney('egm96-5.pgm').height(-61.469, 126.144) kind 3: -31.961
    test 292 GeoidKarney('egm96-5.pgm').height(18.514, -137.083) kind 3: -26.572  FAILED, KNOWN, expected -26.571
    test 293 GeoidKarney('egm96-5.pgm').height(7.854, -126.799) kind 3: -29.761  FAILED, KNOWN, expected -29.760
    test 294 GeoidKarney('egm96-5.pgm').height(47.489, 134.183) kind 3: 21.981  FAILED, KNOWN, expected 21.980
    test 295 GeoidKarney('egm96-5.pgm').height(-34.144, -11.922) kind 3: 16.849
    test 296 GeoidKarney('egm96-5.pgm').height(-58.389, 117.458) kind 3: -20.923
    test 297 GeoidKarney('egm96-5.pgm').height(9.773, 95.846) kind 3: -42.749
    test 298 GeoidKarney('egm96-5.pgm').height(-53.12, 136.994) kind 3: -21.840  FAILED, KNOWN, expected -21.841
    test 299 GeoidKarney('egm96-5.pgm').height(-50.35, 0.075) kind 3: 25.481  FAILED, KNOWN, expected 25.482
    test 300 GeoidKarney('egm96-5.pgm').height(31.438, -170.879) kind 3: -8.846  FAILED, KNOWN, expected -8.847
    test 301 GeoidKarney('egm96-5.pgm').height(37.541, -153.024) kind 3: -19.603  FAILED, KNOWN, expected -19.604
    test 302 GeoidKarney('egm96-5.pgm').height(27.586, 2.444) kind 3: 25.668
    test 303 GeoidKarney('egm96-5.pgm').height(-26.139, -106.201) kind 3: -3.772
    test 304 GeoidKarney('egm96-5.pgm').height(-33.426, -14.84) kind 3: 17.747  FAILED, KNOWN, expected 17.748
    test 305 GeoidKarney('egm96-5.pgm').height(39.586, -153.019) kind 3: -17.838  FAILED, KNOWN, expected -17.839
    test 306 GeoidKarney('egm96-5.pgm').height(-60.79, -2.578) kind 3: 14.292
    test 307 GeoidKarney('egm96-5.pgm').height(-20.131, 21.975) kind 3: 16.529
    test 308 GeoidKarney('egm96-5.pgm').height(75.649, 99.921) kind 3: -8.230  FAILED, KNOWN, expected -8.229
    test 309 GeoidKarney('egm96-5.pgm').height(-0.385, -23.788) kind 3: 9.831  FAILED, KNOWN, expected 9.830
    test 310 GeoidKarney('egm96-5.pgm').height(-51.56, -50.327) kind 3: 6.215
    test 311 GeoidKarney('egm96-5.pgm').height(-43.129, -167.271) kind 3: -2.960
    test 312 GeoidKarney('egm96-5.pgm').height(46.374, 71.948) kind 3: -42.323
    test 313 GeoidKarney('egm96-5.pgm').height(-22.783, 140.657) kind 3: 38.356
    test 314 GeoidKarney('egm96-5.pgm').height(-12.056, 122.804) kind 3: 34.259
    test 315 GeoidKarney('egm96-5.pgm').height(30.127, 94.738) kind 3: -37.397
    test 316 GeoidKarney('egm96-5.pgm').height(46.296, -174.479) kind 3: -2.017  FAILED, KNOWN, expected -2.016
    test 317 GeoidKarney('egm96-5.pgm').height(34.99, 15.052) kind 3: 33.912
    test 318 GeoidKarney('egm96-5.pgm').height(-51.287, 90.565) kind 3: 12.676
    test 319 GeoidKarney('egm96-5.pgm').height(34.217, 141.302) kind 3: 15.692
    test 320 GeoidKarney('egm96-5.pgm').height(-40.423, -142.787) kind 3: -11.117
    test 321 GeoidKarney('egm96-5.pgm').height(-17.854, -170.216) kind 3: 27.437
    test 322 GeoidKarney('egm96-5.pgm').height(47.803, 112.701) kind 3: -23.894
    test 323 GeoidKarney('egm96-5.pgm').height(-23.276, 133.454) kind 3: 18.765  FAILED, KNOWN, expected 18.766
    test 324 GeoidKarney('egm96-5.pgm').height(-26.884, -36.571) kind 3: -7.452
    test 325 GeoidKarney('egm96-5.pgm').height(-37.106, 31.128) kind 3: 30.143
    test 326 GeoidKarney('egm96-5.pgm').height(-75.363, -173.674) kind 3: -61.172
    test 327 GeoidKarney('egm96-5.pgm').height(-18.305, 69.016) kind 3: -24.890
    test 328 GeoidKarney('egm96-5.pgm').height(39.527, 23.58) kind 3: 39.519
    test 329 GeoidKarney('egm96-5.pgm').height(68.903, 30.97) kind 3: 19.420  FAILED, KNOWN, expected 19.419
    test 330 GeoidKarney('egm96-5.pgm').height(53.937, 168.318) kind 3: 2.067  FAILED, KNOWN, expected 2.069
    test 331 GeoidKarney('egm96-5.pgm').height(-38.6, 64.812) kind 3: 25.049  FAILED, KNOWN, expected 25.048
    test 332 GeoidKarney('egm96-5.pgm').height(-41.396, -69.739) kind 3: 22.546  FAILED, KNOWN, expected 22.547
    test 333 GeoidKarney('egm96-5.pgm').height(50.158, 72.319) kind 3: -34.358  FAILED, KNOWN, expected -34.359
    test 334 GeoidKarney('egm96-5.pgm').height(27.692, 176.153) kind 3: -5.454  FAILED, KNOWN, expected -5.453
    test 335 GeoidKarney('egm96-5.pgm').height(-48.419, 170.454) kind 3: -6.804
    test 336 GeoidKarney('egm96-5.pgm').height(-65.346, -124.976) kind 3: -35.053  FAILED, KNOWN, expected -35.054
    test 337 GeoidKarney('egm96-5.pgm').height(-51.873, 167.266) kind 3: -15.417  FAILED, KNOWN, expected -15.418
    test 338 GeoidKarney('egm96-5.pgm').height(-7.263, 84.308) kind 3: -79.557
    test 339 GeoidKarney('egm96-5.pgm').height(-1.461, -105.458) kind 3: -16.894
    test 340 GeoidKarney('egm96-5.pgm').height(7.684, 161.873) kind 3: 36.215
    test 341 GeoidKarney('egm96-5.pgm').height(-31.475, -158.52) kind 3: 3.523
    test 342 GeoidKarney('egm96-5.pgm').height(-36.187, 62.917) kind 3: 23.797
    test 343 GeoidKarney('egm96-5.pgm').height(16.003, 141.687) kind 3: 51.587  FAILED, KNOWN, expected 51.586
    test 344 GeoidKarney('egm96-5.pgm').height(30.182, 86.261) kind 3: -30.131
    test 345 GeoidKarney('egm96-5.pgm').height(-77.304, 159.498) kind 3: -51.849  FAILED, KNOWN, expected -51.848
    test 346 GeoidKarney('egm96-5.pgm').height(39.536, 139.795) kind 3: 37.191  FAILED, KNOWN, expected 37.192
    test 347 GeoidKarney('egm96-5.pgm').height(8.569, 134.618) kind 3: 63.596  FAILED, KNOWN, expected 63.597
    test 348 GeoidKarney('egm96-5.pgm').height(14.473, 90.596) kind 3: -62.636
    test 349 GeoidKarney('egm96-5.pgm').height(-13.138, -99.589) kind 3: -8.718  FAILED, KNOWN, expected -8.717
    test 350 GeoidKarney('egm96-5.pgm').height(34.212, -26.307) kind 3: 40.645
    test 351 GeoidKarney('egm96-5.pgm').height(21.89, 76.371) kind 3: -60.729
    test 352 GeoidKarney('egm96-5.pgm').height(29.793, 120.487) kind 3: 8.784  FAILED, KNOWN, expected 8.783
    test 353 GeoidKarney('egm96-5.pgm').height(15.724, 122.714) kind 3: 31.523
    test 354 GeoidKarney('egm96-5.pgm').height(-66.208, -78.499) kind 3: -6.251  FAILED, KNOWN, expected -6.250
    test 355 GeoidKarney('egm96-5.pgm').height(-39.507, 55.809) kind 3: 32.598  FAILED, KNOWN, expected 32.599
    test 356 GeoidKarney('egm96-5.pgm').height(28.159, 51.476) kind 3: -24.536
    test 357 GeoidKarney('egm96-5.pgm').height(-36.207, 120.205) kind 3: -38.869
    test 358 GeoidKarney('egm96-5.pgm').height(30.575, -99.998) kind 3: -23.212  FAILED, KNOWN, expected -23.213
    test 359 GeoidKarney('egm96-5.pgm').height(-16.993, 37.136) kind 3: -11.824
    test 360 GeoidKarney('egm96-5.pgm').height(-11.477, 12.039) kind 3: 16.710  FAILED, KNOWN, expected 16.709
    test 361 GeoidKarney('egm96-5.pgm').height(30.428, -144.765) kind 3: -22.378  FAILED, KNOWN, expected -22.379
    test 362 GeoidKarney('egm96-5.pgm').height(-17.44, -92.424) kind 3: -4.941
    test 363 GeoidKarney('egm96-5.pgm').height(40.203, 143.43) kind 3: 19.394
    test 364 GeoidKarney('egm96-5.pgm').height(-37.098, -106.574) kind 3: -9.381
    test 365 GeoidKarney('egm96-5.pgm').height(54.62, -68.413) kind 3: -23.318  FAILED, KNOWN, expected -23.319
    test 366 GeoidKarney('egm96-5.pgm').height(-31.633, 148.182) kind 3: 24.467  FAILED, KNOWN, expected 24.468
    test 367 GeoidKarney('egm96-5.pgm').height(-56.07, -141.407) kind 3: -21.761
    test 368 GeoidKarney('egm96-5.pgm').height(-8.195, -52.691) kind 3: -18.798
    test 369 GeoidKarney('egm96-5.pgm').height(17.851, 24.749) kind 3: 12.612
    test 370 GeoidKarney('egm96-5.pgm').height(0.349, -108.333) kind 3: -19.708  FAILED, KNOWN, expected -19.706
    test 371 GeoidKarney('egm96-5.pgm').height(15.038, 126.191) kind 3: 45.792
    test 372 GeoidKarney('egm96-5.pgm').height(-21.111, -123.696) kind 3: -8.406
    test 373 GeoidKarney('egm96-5.pgm').height(30.947, 173.002) kind 3: -8.367
    test 374 GeoidKarney('egm96-5.pgm').height(-10.698, -144.091) kind 3: -2.026  FAILED, KNOWN, expected -2.025
    test 375 GeoidKarney('egm96-5.pgm').height(-29.412, 124.753) kind 3: -16.567  FAILED, KNOWN, expected -16.569
    test 376 GeoidKarney('egm96-5.pgm').height(38.224, -137.189) kind 3: -35.435
    test 377 GeoidKarney('egm96-5.pgm').height(36.064, -132.409) kind 3: -39.008  FAILED, KNOWN, expected -39.009
    test 378 GeoidKarney('egm96-5.pgm').height(29.975, 178.076) kind 3: -6.921
    test 379 GeoidKarney('egm96-5.pgm').height(-21.346, 169.26) kind 3: 50.795
    test 380 GeoidKarney('egm96-5.pgm').height(49.282, -152.934) kind 3: 1.071  FAILED, KNOWN, expected 1.070
    test 381 GeoidKarney('egm96-5.pgm').height(16.349, -99.962) kind 3: -14.214
    test 382 GeoidKarney('egm96-5.pgm').height(-14.293, -167.34) kind 3: 17.600
    test 383 GeoidKarney('egm96-5.pgm').height(47.166, -38.523) kind 3: 44.803  FAILED, KNOWN, expected 44.804
    test 384 GeoidKarney('egm96-5.pgm').height(-58.911, 114.347) kind 3: -17.923  FAILED, KNOWN, expected -17.922
    test 385 GeoidKarney('egm96-5.pgm').height(-9.055, 111.294) kind 3: 10.662
    test 386 GeoidKarney('egm96-5.pgm').height(18.391, 29.692) kind 3: 7.670
    test 387 GeoidKarney('egm96-5.pgm').height(-15.074, 22.153) kind 3: 8.624  FAILED, KNOWN, expected 8.623
    test 388 GeoidKarney('egm96-5.pgm').height(-4.235, 62.001) kind 3: -60.722  FAILED, KNOWN, expected -60.723
    test 389 GeoidKarney('egm96-5.pgm').height(15.171, -86.583) kind 3: 3.820  FAILED, KNOWN, expected 3.818
    test 390 GeoidKarney('egm96-5.pgm').height(79.254, 112.116) kind 3: -1.871
    test 391 GeoidKarney('egm96-5.pgm').height(15.947, 156.093) kind 3: 30.634  FAILED, KNOWN, expected 30.633
    test 392 GeoidKarney('egm96-5.pgm').height(68.371, -177.382) kind 3: 2.800  FAILED, KNOWN, expected 2.801
    test 393 GeoidKarney('egm96-5.pgm').height(-41.931, -72.093) kind 3: 19.858  FAILED, KNOWN, expected 19.859
    test 394 GeoidKarney('egm96-5.pgm').height(-1.193, -143.133) kind 3: 5.347  FAILED, KNOWN, expected 5.348
    test 395 GeoidKarney('egm96-5.pgm').height(-37.006, 154.513) kind 3: 9.941
    test 396 GeoidKarney('egm96-5.pgm').height(-22.148, 9.938) kind 3: 22.322  FAILED, KNOWN, expected 22.321
    test 397 GeoidKarney('egm96-5.pgm').height(24.329, 109.044) kind 3: -24.135
    test 398 GeoidKarney('egm96-5.pgm').height(-54.878, 114.691) kind 3: -17.680  FAILED, KNOWN, expected -17.679
    test 399 GeoidKarney('egm96-5.pgm').height(45.601, -80.458) kind 3: -37.151  FAILED, KNOWN, expected -37.150
    test 400 GeoidKarney('egm96-5.pgm').height(2.372, 58.974) kind 3: -61.158
    test 401 GeoidKarney('egm96-5.pgm').height(15.937, 165.854) kind 3: 20.603  FAILED, KNOWN, expected 20.602
    test 402 GeoidKarney('egm96-5.pgm').height(4.889, -24.213) kind 3: 13.056  FAILED, KNOWN, expected 13.055
    test 403 GeoidKarney('egm96-5.pgm').height(-11.392, 179.558) kind 3: 40.133  FAILED, KNOWN, expected 40.132
    test 404 GeoidKarney('egm96-5.pgm').height(58.246, 4.862) kind 3: 43.263
    test 405 GeoidKarney('egm96-5.pgm').height(34.302, -109.109) kind 3: -23.126
    test 406 GeoidKarney('egm96-5.pgm').height(-58.196, 117.306) kind 3: -20.678
    test 407 GeoidKarney('egm96-5.pgm').height(44.5, 173.769) kind 3: -8.530  FAILED, KNOWN, expected -8.529
    test 408 GeoidKarney('egm96-5.pgm').height(-28.863, -139.775) kind 3: -8.666
    test 409 GeoidKarney('egm96-5.pgm').height(19.507, -96.099) kind 3: -12.795  FAILED, KNOWN, expected -12.796
    test 410 GeoidKarney('egm96-5.pgm').height(-42.488, -73.907) kind 3: 15.774  FAILED, KNOWN, expected 15.773
    test 411 GeoidKarney('egm96-5.pgm').height(46.138, -141.429) kind 3: -19.955  FAILED, KNOWN, expected -19.954
    test 412 GeoidKarney('egm96-5.pgm').height(60.507, 93.743) kind 3: -31.480
    test 413 GeoidKarney('egm96-5.pgm').height(26.219, -145.434) kind 3: -17.428  FAILED, KNOWN, expected -17.429
    test 414 GeoidKarney('egm96-5.pgm').height(-28.687, 3.37) kind 3: 24.037
    test 415 GeoidKarney('egm96-5.pgm').height(-15.008, 117.45) kind 3: 4.519  FAILED, KNOWN, expected 4.520
    test 416 GeoidKarney('egm96-5.pgm').height(40.71, 144.095) kind 3: 11.393  FAILED, KNOWN, expected 11.394
    test 417 GeoidKarney('egm96-5.pgm').height(20.823, -173.611) kind 3: 5.678  FAILED, KNOWN, expected 5.679
    test 418 GeoidKarney('egm96-5.pgm').height(16.776, -3.009) kind 3: 28.707
    test 419 GeoidKarney('egm96-5.pgm').height(41.0, -95.0) kind 3: -30.261  FAILED, KNOWN, expected -30.262
    test 420 GeoidKarney('egm96-5.pgm').height(49.0, -120.5) kind 3: -15.984
    test 421 GeoidKarney('egm96-5.pgm').height(49.0, -103.5) kind 3: -18.635
    test 422 GeoidKarney('egm96-5.pgm').height(49.0, -86.5) kind 3: -37.749
    test 423 GeoidKarney('egm96-5.pgm').height(49.0, -69.5) kind 3: -26.691
    test 424 GeoidKarney('egm96-5.pgm').height(33.0, -120.5) kind 3: -39.561
    test 425 GeoidKarney('egm96-5.pgm').height(33.0, -103.5) kind 3: -22.562
    test 426 GeoidKarney('egm96-5.pgm').height(33.0, -86.5) kind 3: -30.012
    test 427 GeoidKarney('egm96-5.pgm').height(33.0, -69.5) kind 3: -48.039

    test 428 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.001756
    test 429 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps mean (of 210 total): 0.000524
    test 430 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps stdev (of 210 total): 0.000371
    test 431 GeoidKarney('egm96-5.pgm').toStr: GeoidKarney('egm96-5.pgm'): lowerleft(-90.0, -180.0, -29.535), upperright(90.0, 180.0, 13.605), center(0.0, 0.0, 17.163), highest(-8.167, 147.25, 85.422), lowest(4.667, 78.833, -107.043)

    test 432 closed: True
    test 433 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 434 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)

    213 tests skipped (213): no scipy
    test 435 GeoidKarney('egm2008-1.pgm').height(-76.981, 34.17) kind 2: 12.637  FAILED, KNOWN, expected 12.636
    test 436 GeoidKarney('egm2008-1.pgm').height(79.695, 88.806) kind 2: 0.749
    test 437 GeoidKarney('egm2008-1.pgm').height(-15.245, 168.748) kind 2: 65.110  FAILED, KNOWN, expected 65.109
    test 438 GeoidKarney('egm2008-1.pgm').height(-19.379, 15.855) kind 2: 24.889
    test 439 GeoidKarney('egm2008-1.pgm').height(43.378, -130.552) kind 2: -29.557
    test 440 GeoidKarney('egm2008-1.pgm').height(-16.075, 21.795) kind 2: 9.741  FAILED, KNOWN, expected 9.742
    test 441 GeoidKarney('egm2008-1.pgm').height(-11.256, -73.75) kind 2: 30.061  FAILED, KNOWN, expected 30.059
    test 442 GeoidKarney('egm2008-1.pgm').height(69.017, -15.921) kind 2: 60.691  FAILED, KNOWN, expected 60.690
    test 443 GeoidKarney('egm2008-1.pgm').height(2.221, 139.739) kind 2: 69.134  FAILED, KNOWN, expected 69.133
    test 444 GeoidKarney('egm2008-1.pgm').height(-9.097, 119.142) kind 2: 36.522  FAILED, KNOWN, expected 36.520
    test 445 GeoidKarney('egm2008-1.pgm').height(-28.524, -22.192) kind 2: 6.801
    test 446 GeoidKarney('egm2008-1.pgm').height(12.272, -136.424) kind 2: -20.652  FAILED, KNOWN, expected -20.651
    test 447 GeoidKarney('egm2008-1.pgm').height(-15.203, -85.604) kind 2: -3.040
    test 448 GeoidKarney('egm2008-1.pgm').height(-63.736, -77.17) kind 2: -1.329  FAILED, KNOWN, expected -1.328
    test 449 GeoidKarney('egm2008-1.pgm').height(-48.771, -90.102) kind 2: -2.171  FAILED, KNOWN, expected -2.172
    test 450 GeoidKarney('egm2008-1.pgm').height(-0.179, -126.368) kind 2: -17.411
    test 451 GeoidKarney('egm2008-1.pgm').height(1.586, -128.887) kind 2: -16.426  FAILED, KNOWN, expected -16.425
    test 452 GeoidKarney('egm2008-1.pgm').height(-48.781, -2.684) kind 2: 24.699  FAILED, KNOWN, expected 24.698
    test 453 GeoidKarney('egm2008-1.pgm').height(-49.092, 136.862) kind 2: -18.328  FAILED, KNOWN, expected -18.329
    test 454 GeoidKarney('egm2008-1.pgm').height(47.732, 17.552) kind 2: 43.802
    test 455 GeoidKarney('egm2008-1.pgm').height(-49.11, 85.706) kind 2: 18.716
    test 456 GeoidKarney('egm2008-1.pgm').height(-49.162, 40.321) kind 2: 44.468  FAILED, KNOWN, expected 44.469
    test 457 GeoidKarney('egm2008-1.pgm').height(3.498, 158.118) kind 2: 49.943  FAILED, KNOWN, expected 49.944
    test 458 GeoidKarney('egm2008-1.pgm').height(-35.616, 122.648) kind 2: -35.878
    test 459 GeoidKarney('egm2008-1.pgm').height(56.598, -96.114) kind 2: -40.777
    test 460 GeoidKarney('egm2008-1.pgm').height(-31.85, 149.121) kind 2: 26.560  FAILED, KNOWN, expected 26.559
    test 461 GeoidKarney('egm2008-1.pgm').height(-26.569, -177.792) kind 2: 49.361
    test 462 GeoidKarney('egm2008-1.pgm').height(76.735, -65.753) kind 2: 21.106  FAILED, KNOWN, expected 21.107
    test 463 GeoidKarney('egm2008-1.pgm').height(-21.404, -122.268) kind 2: -7.202
    test 464 GeoidKarney('egm2008-1.pgm').height(-77.133, -65.474) kind 2: -17.168
    test 465 GeoidKarney('egm2008-1.pgm').height(-58.812, 2.276) kind 2: 18.359
    test 466 GeoidKarney('egm2008-1.pgm').height(4.415, 155.683) kind 2: 52.118
    test 467 GeoidKarney('egm2008-1.pgm').height(-28.146, 107.081) kind 2: -38.949  FAILED, KNOWN, expected -38.950
    test 468 GeoidKarney('egm2008-1.pgm').height(-10.551, -126.69) kind 2: -9.935  FAILED, KNOWN, expected -9.934
    test 469 GeoidKarney('egm2008-1.pgm').height(-25.444, -103.337) kind 2: -2.879
    test 470 GeoidKarney('egm2008-1.pgm').height(24.436, 46.159) kind 2: -5.025
    test 471 GeoidKarney('egm2008-1.pgm').height(-72.889, 37.107) kind 2: 24.296
    test 472 GeoidKarney('egm2008-1.pgm').height(-19.629, 13.245) kind 2: 25.131
    test 473 GeoidKarney('egm2008-1.pgm').height(-7.602, 171.265) kind 2: 40.720  FAILED, KNOWN, expected 40.721
    test 474 GeoidKarney('egm2008-1.pgm').height(-45.364, -1.876) kind 2: 22.388
    test 475 GeoidKarney('egm2008-1.pgm').height(-7.292, -69.18) kind 2: 22.485  FAILED, KNOWN, expected 22.486
    test 476 GeoidKarney('egm2008-1.pgm').height(-31.566, -166.689) kind 2: 14.942  FAILED, KNOWN, expected 14.943
    test 477 GeoidKarney('egm2008-1.pgm').height(-82.751, -162.085) kind 2: -47.387
    test 478 GeoidKarney('egm2008-1.pgm').height(-40.7, 99.466) kind 2: -18.404  FAILED, KNOWN, expected -18.403
    test 479 GeoidKarney('egm2008-1.pgm').height(48.676, 39.69) kind 2: 10.186  FAILED, KNOWN, expected 10.185
    test 480 GeoidKarney('egm2008-1.pgm').height(74.817, -78.404) kind 2: 5.671
    test 481 GeoidKarney('egm2008-1.pgm').height(-81.032, -63.865) kind 2: -24.577
    test 482 GeoidKarney('egm2008-1.pgm').height(74.022, 9.432) kind 2: 43.288
    test 483 GeoidKarney('egm2008-1.pgm').height(-75.071, 17.579) kind 2: 13.747  FAILED, KNOWN, expected 13.748
    test 484 GeoidKarney('egm2008-1.pgm').height(-12.546, -54.851) kind 2: -5.342
    test 485 GeoidKarney('egm2008-1.pgm').height(-13.621, 42.408) kind 2: -25.579
    test 486 GeoidKarney('egm2008-1.pgm').height(-2.266, -91.951) kind 2: -9.849
    test 487 GeoidKarney('egm2008-1.pgm').height(-18.672, 42.547) kind 2: -10.491
    test 488 GeoidKarney('egm2008-1.pgm').height(-41.44, 157.413) kind 2: 0.243  FAILED, KNOWN, expected 0.244
    test 489 GeoidKarney('egm2008-1.pgm').height(53.686, -79.375) kind 2: -43.820  FAILED, KNOWN, expected -43.821
    test 490 GeoidKarney('egm2008-1.pgm').height(39.26, -30.351) kind 2: 57.400  FAILED, KNOWN, expected 57.401
    test 491 GeoidKarney('egm2008-1.pgm').height(-51.699, -141.493) kind 2: -17.889  FAILED, KNOWN, expected -17.890
    test 492 GeoidKarney('egm2008-1.pgm').height(36.585, 4.515) kind 2: 46.422  FAILED, KNOWN, expected 46.421
    test 493 GeoidKarney('egm2008-1.pgm').height(39.642, -54.659) kind 2: -14.475
    test 494 GeoidKarney('egm2008-1.pgm').height(59.761, 166.567) kind 2: 11.119  FAILED, KNOWN, expected 11.118
    test 495 GeoidKarney('egm2008-1.pgm').height(51.83, 13.357) kind 2: 42.291
    test 496 GeoidKarney('egm2008-1.pgm').height(-36.531, -175.431) kind 2: 22.327  FAILED, KNOWN, expected 22.326
    test 497 GeoidKarney('egm2008-1.pgm').height(-37.08, 125.264) kind 2: -33.098
    test 498 GeoidKarney('egm2008-1.pgm').height(-68.651, 92.732) kind 2: 9.431  FAILED, KNOWN, expected 9.430
    test 499 GeoidKarney('egm2008-1.pgm').height(35.087, 45.336) kind 2: 6.032
    test 500 GeoidKarney('egm2008-1.pgm').height(-61.356, -169.379) kind 2: -44.330
    test 501 GeoidKarney('egm2008-1.pgm').height(-36.955, 179.12) kind 2: 21.775
    test 502 GeoidKarney('egm2008-1.pgm').height(10.248, -6.714) kind 2: 29.243
    test 503 GeoidKarney('egm2008-1.pgm').height(36.868, 84.602) kind 2: -40.677  FAILED, KNOWN, expected -40.676
    test 504 GeoidKarney('egm2008-1.pgm').height(28.637, 88.933) kind 2: -31.353
    test 505 GeoidKarney('egm2008-1.pgm').height(54.811, -99.968) kind 2: -32.700  FAILED, KNOWN, expected -32.701
    test 506 GeoidKarney('egm2008-1.pgm').height(7.611, 145.911) kind 2: 60.628  FAILED, KNOWN, expected 60.629
    test 507 GeoidKarney('egm2008-1.pgm').height(59.412, 170.102) kind 2: 6.617
    test 508 GeoidKarney('egm2008-1.pgm').height(-61.469, 126.144) kind 2: -31.888  FAILED, KNOWN, expected -31.887
    test 509 GeoidKarney('egm2008-1.pgm').height(18.514, -137.083) kind 2: -26.536  FAILED, KNOWN, expected -26.535
    test 510 GeoidKarney('egm2008-1.pgm').height(7.854, -126.799) kind 2: -29.631  FAILED, KNOWN, expected -29.630
    test 511 GeoidKarney('egm2008-1.pgm').height(47.489, 134.183) kind 2: 22.274  FAILED, KNOWN, expected 22.275
    test 512 GeoidKarney('egm2008-1.pgm').height(-34.144, -11.922) kind 2: 17.095  FAILED, KNOWN, expected 17.094
    test 513 GeoidKarney('egm2008-1.pgm').height(-58.389, 117.458) kind 2: -20.940  FAILED, KNOWN, expected -20.941
    test 514 GeoidKarney('egm2008-1.pgm').height(9.773, 95.846) kind 2: -42.740
    test 515 GeoidKarney('egm2008-1.pgm').height(-53.12, 136.994) kind 2: -21.651
    test 516 GeoidKarney('egm2008-1.pgm').height(-50.35, 0.075) kind 2: 25.240
    test 517 GeoidKarney('egm2008-1.pgm').height(31.438, -170.879) kind 2: -8.758
    test 518 GeoidKarney('egm2008-1.pgm').height(37.541, -153.024) kind 2: -19.606  FAILED, KNOWN, expected -19.607
    test 519 GeoidKarney('egm2008-1.pgm').height(27.586, 2.444) kind 2: 26.258
    test 520 GeoidKarney('egm2008-1.pgm').height(-26.139, -106.201) kind 2: -3.824
    test 521 GeoidKarney('egm2008-1.pgm').height(-33.426, -14.84) kind 2: 18.194  FAILED, KNOWN, expected 18.195
    test 522 GeoidKarney('egm2008-1.pgm').height(39.586, -153.019) kind 2: -17.724  FAILED, KNOWN, expected -17.725
    test 523 GeoidKarney('egm2008-1.pgm').height(-60.79, -2.578) kind 2: 14.511  FAILED, KNOWN, expected 14.513
    test 524 GeoidKarney('egm2008-1.pgm').height(-20.131, 21.975) kind 2: 16.808  FAILED, KNOWN, expected 16.809
    test 525 GeoidKarney('egm2008-1.pgm').height(75.649, 99.921) kind 2: -8.025  FAILED, KNOWN, expected -8.026
    test 526 GeoidKarney('egm2008-1.pgm').height(-0.385, -23.788) kind 2: 9.688
    test 527 GeoidKarney('egm2008-1.pgm').height(-51.56, -50.327) kind 2: 6.218
    test 528 GeoidKarney('egm2008-1.pgm').height(-43.129, -167.271) kind 2: -2.725  FAILED, KNOWN, expected -2.724
    test 529 GeoidKarney('egm2008-1.pgm').height(46.374, 71.948) kind 2: -42.566  FAILED, KNOWN, expected -42.565
    test 530 GeoidKarney('egm2008-1.pgm').height(-22.783, 140.657) kind 2: 38.341
    test 531 GeoidKarney('egm2008-1.pgm').height(-12.056, 122.804) kind 2: 33.888  FAILED, KNOWN, expected 33.889
    test 532 GeoidKarney('egm2008-1.pgm').height(30.127, 94.738) kind 2: -37.382  FAILED, KNOWN, expected -37.380
    test 533 GeoidKarney('egm2008-1.pgm').height(46.296, -174.479) kind 2: -1.857  FAILED, KNOWN, expected -1.858
    test 534 GeoidKarney('egm2008-1.pgm').height(34.99, 15.052) kind 2: 34.196  FAILED, KNOWN, expected 34.195
    test 535 GeoidKarney('egm2008-1.pgm').height(-51.287, 90.565) kind 2: 12.767
    test 536 GeoidKarney('egm2008-1.pgm').height(34.217, 141.302) kind 2: 15.612
    test 537 GeoidKarney('egm2008-1.pgm').height(-40.423, -142.787) kind 2: -11.063
    test 538 GeoidKarney('egm2008-1.pgm').height(-17.854, -170.216) kind 2: 27.387
    test 539 GeoidKarney('egm2008-1.pgm').height(47.803, 112.701) kind 2: -23.817
    test 540 GeoidKarney('egm2008-1.pgm').height(-23.276, 133.454) kind 2: 18.713  FAILED, KNOWN, expected 18.712
    test 541 GeoidKarney('egm2008-1.pgm').height(-26.884, -36.571) kind 2: -7.343  FAILED, KNOWN, expected -7.344
    test 542 GeoidKarney('egm2008-1.pgm').height(-37.106, 31.128) kind 2: 29.997  FAILED, KNOWN, expected 29.998
    test 543 GeoidKarney('egm2008-1.pgm').height(-75.363, -173.674) kind 2: -61.869
    test 544 GeoidKarney('egm2008-1.pgm').height(-18.305, 69.016) kind 2: -24.937
    test 545 GeoidKarney('egm2008-1.pgm').height(39.527, 23.58) kind 2: 38.558  FAILED, KNOWN, expected 38.556
    test 546 GeoidKarney('egm2008-1.pgm').height(68.903, 30.97) kind 2: 19.672  FAILED, KNOWN, expected 19.671
    test 547 GeoidKarney('egm2008-1.pgm').height(53.937, 168.318) kind 2: 2.273  FAILED, KNOWN, expected 2.272
    test 548 GeoidKarney('egm2008-1.pgm').height(-38.6, 64.812) kind 2: 24.863
    test 549 GeoidKarney('egm2008-1.pgm').height(-41.396, -69.739) kind 2: 21.637  FAILED, KNOWN, expected 21.636
    test 550 GeoidKarney('egm2008-1.pgm').height(50.158, 72.319) kind 2: -33.851
    test 551 GeoidKarney('egm2008-1.pgm').height(27.692, 176.153) kind 2: -5.299
    test 552 GeoidKarney('egm2008-1.pgm').height(-48.419, 170.454) kind 2: -6.789
    test 553 GeoidKarney('egm2008-1.pgm').height(-65.346, -124.976) kind 2: -35.030
    test 554 GeoidKarney('egm2008-1.pgm').height(-51.873, 167.266) kind 2: -15.338
    test 555 GeoidKarney('egm2008-1.pgm').height(-7.263, 84.308) kind 2: -79.356
    test 556 GeoidKarney('egm2008-1.pgm').height(-1.461, -105.458) kind 2: -16.650
    test 557 GeoidKarney('egm2008-1.pgm').height(7.684, 161.873) kind 2: 36.358  FAILED, KNOWN, expected 36.359
    test 558 GeoidKarney('egm2008-1.pgm').height(-31.475, -158.52) kind 2: 3.614  FAILED, KNOWN, expected 3.615
    test 559 GeoidKarney('egm2008-1.pgm').height(-36.187, 62.917) kind 2: 23.946  FAILED, KNOWN, expected 23.947
    test 560 GeoidKarney('egm2008-1.pgm').height(16.003, 141.687) kind 2: 51.495
    test 561 GeoidKarney('egm2008-1.pgm').height(30.182, 86.261) kind 2: -30.909  FAILED, KNOWN, expected -30.910
    test 562 GeoidKarney('egm2008-1.pgm').height(-77.304, 159.498) kind 2: -52.131
    test 563 GeoidKarney('egm2008-1.pgm').height(39.536, 139.795) kind 2: 37.046  FAILED, KNOWN, expected 37.045
    test 564 GeoidKarney('egm2008-1.pgm').height(8.569, 134.618) kind 2: 64.181  FAILED, KNOWN, expected 64.180
    test 565 GeoidKarney('egm2008-1.pgm').height(14.473, 90.596) kind 2: -62.475
    test 566 GeoidKarney('egm2008-1.pgm').height(-13.138, -99.589) kind 2: -8.454
    test 567 GeoidKarney('egm2008-1.pgm').height(34.212, -26.307) kind 2: 40.834
    test 568 GeoidKarney('egm2008-1.pgm').height(21.89, 76.371) kind 2: -60.456  FAILED, KNOWN, expected -60.455
    test 569 GeoidKarney('egm2008-1.pgm').height(29.793, 120.487) kind 2: 9.727
    test 570 GeoidKarney('egm2008-1.pgm').height(15.724, 122.714) kind 2: 32.143  FAILED, KNOWN, expected 32.142
    test 571 GeoidKarney('egm2008-1.pgm').height(-66.208, -78.499) kind 2: -6.221  FAILED, KNOWN, expected -6.220
    test 572 GeoidKarney('egm2008-1.pgm').height(-39.507, 55.809) kind 2: 32.489
    test 573 GeoidKarney('egm2008-1.pgm').height(28.159, 51.476) kind 2: -24.692
    test 574 GeoidKarney('egm2008-1.pgm').height(-36.207, 120.205) kind 2: -38.748  FAILED, KNOWN, expected -38.749
    test 575 GeoidKarney('egm2008-1.pgm').height(30.575, -99.998) kind 2: -23.254  FAILED, KNOWN, expected -23.255
    test 576 GeoidKarney('egm2008-1.pgm').height(-16.993, 37.136) kind 2: -13.454  FAILED, KNOWN, expected -13.455
    test 577 GeoidKarney('egm2008-1.pgm').height(-11.477, 12.039) kind 2: 16.627
    test 578 GeoidKarney('egm2008-1.pgm').height(30.428, -144.765) kind 2: -22.221
    test 579 GeoidKarney('egm2008-1.pgm').height(-17.44, -92.424) kind 2: -4.836
    test 580 GeoidKarney('egm2008-1.pgm').height(40.203, 143.43) kind 2: 19.571
    test 581 GeoidKarney('egm2008-1.pgm').height(-37.098, -106.574) kind 2: -9.227
    test 582 GeoidKarney('egm2008-1.pgm').height(54.62, -68.413) kind 2: -23.248
    test 583 GeoidKarney('egm2008-1.pgm').height(-31.633, 148.182) kind 2: 24.829
    test 584 GeoidKarney('egm2008-1.pgm').height(-56.07, -141.407) kind 2: -21.706  FAILED, KNOWN, expected -21.705
    test 585 GeoidKarney('egm2008-1.pgm').height(-8.195, -52.691) kind 2: -17.054  FAILED, KNOWN, expected -17.053
    test 586 GeoidKarney('egm2008-1.pgm').height(17.851, 24.749) kind 2: 11.716
    test 587 GeoidKarney('egm2008-1.pgm').height(0.349, -108.333) kind 2: -19.529  FAILED, KNOWN, expected -19.530
    test 588 GeoidKarney('egm2008-1.pgm').height(15.038, 126.191) kind 2: 45.929
    test 589 GeoidKarney('egm2008-1.pgm').height(-21.111, -123.696) kind 2: -8.283
    test 590 GeoidKarney('egm2008-1.pgm').height(30.947, 173.002) kind 2: -8.467
    test 591 GeoidKarney('egm2008-1.pgm').height(-10.698, -144.091) kind 2: -1.829
    test 592 GeoidKarney('egm2008-1.pgm').height(-29.412, 124.753) kind 2: -16.505  FAILED, KNOWN, expected -16.506
    test 593 GeoidKarney('egm2008-1.pgm').height(38.224, -137.189) kind 2: -35.384
    test 594 GeoidKarney('egm2008-1.pgm').height(36.064, -132.409) kind 2: -38.962  FAILED, KNOWN, expected -38.963
    test 595 GeoidKarney('egm2008-1.pgm').height(29.975, 178.076) kind 2: -6.956
    test 596 GeoidKarney('egm2008-1.pgm').height(-21.346, 169.26) kind 2: 51.006  FAILED, KNOWN, expected 51.005
    test 597 GeoidKarney('egm2008-1.pgm').height(49.282, -152.934) kind 2: 1.193  FAILED, KNOWN, expected 1.192
    test 598 GeoidKarney('egm2008-1.pgm').height(16.349, -99.962) kind 2: -15.038
    test 599 GeoidKarney('egm2008-1.pgm').height(-14.293, -167.34) kind 2: 17.792  FAILED, KNOWN, expected 17.791
    test 600 GeoidKarney('egm2008-1.pgm').height(47.166, -38.523) kind 2: 44.653  FAILED, KNOWN, expected 44.652
    test 601 GeoidKarney('egm2008-1.pgm').height(-58.911, 114.347) kind 2: -17.972  FAILED, KNOWN, expected -17.971
    test 602 GeoidKarney('egm2008-1.pgm').height(-9.055, 111.294) kind 2: 11.631
    test 603 GeoidKarney('egm2008-1.pgm').height(18.391, 29.692) kind 2: 7.394
    test 604 GeoidKarney('egm2008-1.pgm').height(-15.074, 22.153) kind 2: 7.932
    test 605 GeoidKarney('egm2008-1.pgm').height(-4.235, 62.001) kind 2: -60.594  FAILED, KNOWN, expected -60.593
    test 606 GeoidKarney('egm2008-1.pgm').height(15.171, -86.583) kind 2: 4.382  FAILED, KNOWN, expected 4.384
    test 607 GeoidKarney('egm2008-1.pgm').height(79.254, 112.116) kind 2: 1.296  FAILED, KNOWN, expected 1.297
    test 608 GeoidKarney('egm2008-1.pgm').height(15.947, 156.093) kind 2: 30.852
    test 609 GeoidKarney('egm2008-1.pgm').height(68.371, -177.382) kind 2: 2.705  FAILED, KNOWN, expected 2.704
    test 610 GeoidKarney('egm2008-1.pgm').height(-41.931, -72.093) kind 2: 21.263  FAILED, KNOWN, expected 21.264
    test 611 GeoidKarney('egm2008-1.pgm').height(-1.193, -143.133) kind 2: 5.443
    test 612 GeoidKarney('egm2008-1.pgm').height(-37.006, 154.513) kind 2: 9.998
    test 613 GeoidKarney('egm2008-1.pgm').height(-22.148, 9.938) kind 2: 22.428
    test 614 GeoidKarney('egm2008-1.pgm').height(24.329, 109.044) kind 2: -23.156  FAILED, KNOWN, expected -23.154
    test 615 GeoidKarney('egm2008-1.pgm').height(-54.878, 114.691) kind 2: -17.662
    test 616 GeoidKarney('egm2008-1.pgm').height(45.601, -80.458) kind 2: -36.840  FAILED, KNOWN, expected -36.839
    test 617 GeoidKarney('egm2008-1.pgm').height(2.372, 58.974) kind 2: -61.220  FAILED, KNOWN, expected -61.221
    test 618 GeoidKarney('egm2008-1.pgm').height(15.937, 165.854) kind 2: 20.355
    test 619 GeoidKarney('egm2008-1.pgm').height(4.889, -24.213) kind 2: 13.147
    test 620 GeoidKarney('egm2008-1.pgm').height(-11.392, 179.558) kind 2: 41.072
    test 621 GeoidKarney('egm2008-1.pgm').height(58.246, 4.862) kind 2: 42.982
    test 622 GeoidKarney('egm2008-1.pgm').height(34.302, -109.109) kind 2: -22.997  FAILED, KNOWN, expected -22.998
    test 623 GeoidKarney('egm2008-1.pgm').height(-58.196, 117.306) kind 2: -20.662
    test 624 GeoidKarney('egm2008-1.pgm').height(44.5, 173.769) kind 2: -8.438
    test 625 GeoidKarney('egm2008-1.pgm').height(-28.863, -139.775) kind 2: -8.711  FAILED, KNOWN, expected -8.712
    test 626 GeoidKarney('egm2008-1.pgm').height(19.507, -96.099) kind 2: -12.654  FAILED, KNOWN, expected -12.653
    test 627 GeoidKarney('egm2008-1.pgm').height(-42.488, -73.907) kind 2: 17.163  FAILED, KNOWN, expected 17.166
    test 628 GeoidKarney('egm2008-1.pgm').height(46.138, -141.429) kind 2: -19.873  FAILED, KNOWN, expected -19.874
    test 629 GeoidKarney('egm2008-1.pgm').height(60.507, 93.743) kind 2: -31.124
    test 630 GeoidKarney('egm2008-1.pgm').height(26.219, -145.434) kind 2: -17.307
    test 631 GeoidKarney('egm2008-1.pgm').height(-28.687, 3.37) kind 2: 23.437  FAILED, KNOWN, expected 23.434
    test 632 GeoidKarney('egm2008-1.pgm').height(-15.008, 117.45) kind 2: 4.508
    test 633 GeoidKarney('egm2008-1.pgm').height(40.71, 144.095) kind 2: 11.550  FAILED, KNOWN, expected 11.549
    test 634 GeoidKarney('egm2008-1.pgm').height(20.823, -173.611) kind 2: 5.749  FAILED, KNOWN, expected 5.748
    test 635 GeoidKarney('egm2008-1.pgm').height(16.776, -3.009) kind 2: 28.788
    test 636 GeoidKarney('egm2008-1.pgm').height(41.0, -95.0) kind 2: -30.588  FAILED, KNOWN, expected -30.589
    test 637 GeoidKarney('egm2008-1.pgm').height(49.0, -120.5) kind 2: -15.273
    test 638 GeoidKarney('egm2008-1.pgm').height(49.0, -103.5) kind 2: -18.624
    test 639 GeoidKarney('egm2008-1.pgm').height(49.0, -86.5) kind 2: -37.872  FAILED, KNOWN, expected -37.873
    test 640 GeoidKarney('egm2008-1.pgm').height(49.0, -69.5) kind 2: -26.511
    test 641 GeoidKarney('egm2008-1.pgm').height(33.0, -120.5) kind 2: -39.600
    test 642 GeoidKarney('egm2008-1.pgm').height(33.0, -103.5) kind 2: -22.689
    test 643 GeoidKarney('egm2008-1.pgm').height(33.0, -86.5) kind 2: -30.066  FAILED, KNOWN, expected -30.067
    test 644 GeoidKarney('egm2008-1.pgm').height(33.0, -69.5) kind 2: -48.093

    test 645 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.002537
    test 646 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps mean (of 210 total): 0.000543
    test 647 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps stdev (of 210 total): 0.000458
    test 648 GeoidKarney('egm2008-1.pgm').toStr: GeoidKarney('egm2008-1.pgm'): lowerleft(-90.0, -180.0, -30.15), upperright(90.0, 180.0, 14.898), center(0.0, 0.0, 17.226), highest(-8.4, 147.367, 85.839), lowest(4.7, 78.767, -106.911)

    test 649 closed: True
    test 650 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 651 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 652 GeoidKarney('egm2008-1.pgm').height(-76.981, 34.17) kind 3: 12.637  FAILED, KNOWN, expected 12.636
    test 653 GeoidKarney('egm2008-1.pgm').height(79.695, 88.806) kind 3: 0.749
    test 654 GeoidKarney('egm2008-1.pgm').height(-15.245, 168.748) kind 3: 65.110  FAILED, KNOWN, expected 65.109
    test 655 GeoidKarney('egm2008-1.pgm').height(-19.379, 15.855) kind 3: 24.889
    test 656 GeoidKarney('egm2008-1.pgm').height(43.378, -130.552) kind 3: -29.556  FAILED, KNOWN, expected -29.557
    test 657 GeoidKarney('egm2008-1.pgm').height(-16.075, 21.795) kind 3: 9.741  FAILED, KNOWN, expected 9.742
    test 658 GeoidKarney('egm2008-1.pgm').height(-11.256, -73.75) kind 3: 30.060  FAILED, KNOWN, expected 30.059
    test 659 GeoidKarney('egm2008-1.pgm').height(69.017, -15.921) kind 3: 60.690
    test 660 GeoidKarney('egm2008-1.pgm').height(2.221, 139.739) kind 3: 69.134  FAILED, KNOWN, expected 69.133
    test 661 GeoidKarney('egm2008-1.pgm').height(-9.097, 119.142) kind 3: 36.521  FAILED, KNOWN, expected 36.520
    test 662 GeoidKarney('egm2008-1.pgm').height(-28.524, -22.192) kind 3: 6.801
    test 663 GeoidKarney('egm2008-1.pgm').height(12.272, -136.424) kind 3: -20.652  FAILED, KNOWN, expected -20.651
    test 664 GeoidKarney('egm2008-1.pgm').height(-15.203, -85.604) kind 3: -3.040
    test 665 GeoidKarney('egm2008-1.pgm').height(-63.736, -77.17) kind 3: -1.329  FAILED, KNOWN, expected -1.328
    test 666 GeoidKarney('egm2008-1.pgm').height(-48.771, -90.102) kind 3: -2.171  FAILED, KNOWN, expected -2.172
    test 667 GeoidKarney('egm2008-1.pgm').height(-0.179, -126.368) kind 3: -17.411
    test 668 GeoidKarney('egm2008-1.pgm').height(1.586, -128.887) kind 3: -16.426  FAILED, KNOWN, expected -16.425
    test 669 GeoidKarney('egm2008-1.pgm').height(-48.781, -2.684) kind 3: 24.699  FAILED, KNOWN, expected 24.698
    test 670 GeoidKarney('egm2008-1.pgm').height(-49.092, 136.862) kind 3: -18.328  FAILED, KNOWN, expected -18.329
    test 671 GeoidKarney('egm2008-1.pgm').height(47.732, 17.552) kind 3: 43.802
    test 672 GeoidKarney('egm2008-1.pgm').height(-49.11, 85.706) kind 3: 18.716
    test 673 GeoidKarney('egm2008-1.pgm').height(-49.162, 40.321) kind 3: 44.468  FAILED, KNOWN, expected 44.469
    test 674 GeoidKarney('egm2008-1.pgm').height(3.498, 158.118) kind 3: 49.943  FAILED, KNOWN, expected 49.944
    test 675 GeoidKarney('egm2008-1.pgm').height(-35.616, 122.648) kind 3: -35.878
    test 676 GeoidKarney('egm2008-1.pgm').height(56.598, -96.114) kind 3: -40.777
    test 677 GeoidKarney('egm2008-1.pgm').height(-31.85, 149.121) kind 3: 26.559
    test 678 GeoidKarney('egm2008-1.pgm').height(-26.569, -177.792) kind 3: 49.362  FAILED, KNOWN, expected 49.361
    test 679 GeoidKarney('egm2008-1.pgm').height(76.735, -65.753) kind 3: 21.106  FAILED, KNOWN, expected 21.107
    test 680 GeoidKarney('egm2008-1.pgm').height(-21.404, -122.268) kind 3: -7.203  FAILED, KNOWN, expected -7.202
    test 681 GeoidKarney('egm2008-1.pgm').height(-77.133, -65.474) kind 3: -17.167  FAILED, KNOWN, expected -17.168
    test 682 GeoidKarney('egm2008-1.pgm').height(-58.812, 2.276) kind 3: 18.359
    test 683 GeoidKarney('egm2008-1.pgm').height(4.415, 155.683) kind 3: 52.117  FAILED, KNOWN, expected 52.118
    test 684 GeoidKarney('egm2008-1.pgm').height(-28.146, 107.081) kind 3: -38.950
    test 685 GeoidKarney('egm2008-1.pgm').height(-10.551, -126.69) kind 3: -9.935  FAILED, KNOWN, expected -9.934
    test 686 GeoidKarney('egm2008-1.pgm').height(-25.444, -103.337) kind 3: -2.879
    test 687 GeoidKarney('egm2008-1.pgm').height(24.436, 46.159) kind 3: -5.025
    test 688 GeoidKarney('egm2008-1.pgm').height(-72.889, 37.107) kind 3: 24.296
    test 689 GeoidKarney('egm2008-1.pgm').height(-19.629, 13.245) kind 3: 25.131
    test 690 GeoidKarney('egm2008-1.pgm').height(-7.602, 171.265) kind 3: 40.720  FAILED, KNOWN, expected 40.721
    test 691 GeoidKarney('egm2008-1.pgm').height(-45.364, -1.876) kind 3: 22.387  FAILED, KNOWN, expected 22.388
    test 692 GeoidKarney('egm2008-1.pgm').height(-7.292, -69.18) kind 3: 22.485  FAILED, KNOWN, expected 22.486
    test 693 GeoidKarney('egm2008-1.pgm').height(-31.566, -166.689) kind 3: 14.942  FAILED, KNOWN, expected 14.943
    test 694 GeoidKarney('egm2008-1.pgm').height(-82.751, -162.085) kind 3: -47.387
    test 695 GeoidKarney('egm2008-1.pgm').height(-40.7, 99.466) kind 3: -18.404  FAILED, KNOWN, expected -18.403
    test 696 GeoidKarney('egm2008-1.pgm').height(48.676, 39.69) kind 3: 10.185
    test 697 GeoidKarney('egm2008-1.pgm').height(74.817, -78.404) kind 3: 5.670  FAILED, KNOWN, expected 5.671
    test 698 GeoidKarney('egm2008-1.pgm').height(-81.032, -63.865) kind 3: -24.577
    test 699 GeoidKarney('egm2008-1.pgm').height(74.022, 9.432) kind 3: 43.288
    test 700 GeoidKarney('egm2008-1.pgm').height(-75.071, 17.579) kind 3: 13.747  FAILED, KNOWN, expected 13.748
    test 701 GeoidKarney('egm2008-1.pgm').height(-12.546, -54.851) kind 3: -5.342
    test 702 GeoidKarney('egm2008-1.pgm').height(-13.621, 42.408) kind 3: -25.579
    test 703 GeoidKarney('egm2008-1.pgm').height(-2.266, -91.951) kind 3: -9.849
    test 704 GeoidKarney('egm2008-1.pgm').height(-18.672, 42.547) kind 3: -10.490  FAILED, KNOWN, expected -10.491
    test 705 GeoidKarney('egm2008-1.pgm').height(-41.44, 157.413) kind 3: 0.243  FAILED, KNOWN, expected 0.244
    test 706 GeoidKarney('egm2008-1.pgm').height(53.686, -79.375) kind 3: -43.820  FAILED, KNOWN, expected -43.821
    test 707 GeoidKarney('egm2008-1.pgm').height(39.26, -30.351) kind 3: 57.401
    test 708 GeoidKarney('egm2008-1.pgm').height(-51.699, -141.493) kind 3: -17.889  FAILED, KNOWN, expected -17.890
    test 709 GeoidKarney('egm2008-1.pgm').height(36.585, 4.515) kind 3: 46.423  FAILED, KNOWN, expected 46.421
    test 710 GeoidKarney('egm2008-1.pgm').height(39.642, -54.659) kind 3: -14.475
    test 711 GeoidKarney('egm2008-1.pgm').height(59.761, 166.567) kind 3: 11.118
    test 712 GeoidKarney('egm2008-1.pgm').height(51.83, 13.357) kind 3: 42.291
    test 713 GeoidKarney('egm2008-1.pgm').height(-36.531, -175.431) kind 3: 22.327  FAILED, KNOWN, expected 22.326
    test 714 GeoidKarney('egm2008-1.pgm').height(-37.08, 125.264) kind 3: -33.098
    test 715 GeoidKarney('egm2008-1.pgm').height(-68.651, 92.732) kind 3: 9.431  FAILED, KNOWN, expected 9.430
    test 716 GeoidKarney('egm2008-1.pgm').height(35.087, 45.336) kind 3: 6.032
    test 717 GeoidKarney('egm2008-1.pgm').height(-61.356, -169.379) kind 3: -44.330
    test 718 GeoidKarney('egm2008-1.pgm').height(-36.955, 179.12) kind 3: 21.775
    test 719 GeoidKarney('egm2008-1.pgm').height(10.248, -6.714) kind 3: 29.243
    test 720 GeoidKarney('egm2008-1.pgm').height(36.868, 84.602) kind 3: -40.677  FAILED, KNOWN, expected -40.676
    test 721 GeoidKarney('egm2008-1.pgm').height(28.637, 88.933) kind 3: -31.352  FAILED, KNOWN, expected -31.353
    test 722 GeoidKarney('egm2008-1.pgm').height(54.811, -99.968) kind 3: -32.700  FAILED, KNOWN, expected -32.701
    test 723 GeoidKarney('egm2008-1.pgm').height(7.611, 145.911) kind 3: 60.628  FAILED, KNOWN, expected 60.629
    test 724 GeoidKarney('egm2008-1.pgm').height(59.412, 170.102) kind 3: 6.617
    test 725 GeoidKarney('egm2008-1.pgm').height(-61.469, 126.144) kind 3: -31.887
    test 726 GeoidKarney('egm2008-1.pgm').height(18.514, -137.083) kind 3: -26.536  FAILED, KNOWN, expected -26.535
    test 727 GeoidKarney('egm2008-1.pgm').height(7.854, -126.799) kind 3: -29.631  FAILED, KNOWN, expected -29.630
    test 728 GeoidKarney('egm2008-1.pgm').height(47.489, 134.183) kind 3: 22.274  FAILED, KNOWN, expected 22.275
    test 729 GeoidKarney('egm2008-1.pgm').height(-34.144, -11.922) kind 3: 17.095  FAILED, KNOWN, expected 17.094
    test 730 GeoidKarney('egm2008-1.pgm').height(-58.389, 117.458) kind 3: -20.940  FAILED, KNOWN, expected -20.941
    test 731 GeoidKarney('egm2008-1.pgm').height(9.773, 95.846) kind 3: -42.740
    test 732 GeoidKarney('egm2008-1.pgm').height(-53.12, 136.994) kind 3: -21.651
    test 733 GeoidKarney('egm2008-1.pgm').height(-50.35, 0.075) kind 3: 25.240
    test 734 GeoidKarney('egm2008-1.pgm').height(31.438, -170.879) kind 3: -8.758
    test 735 GeoidKarney('egm2008-1.pgm').height(37.541, -153.024) kind 3: -19.606  FAILED, KNOWN, expected -19.607
    test 736 GeoidKarney('egm2008-1.pgm').height(27.586, 2.444) kind 3: 26.258
    test 737 GeoidKarney('egm2008-1.pgm').height(-26.139, -106.201) kind 3: -3.823  FAILED, KNOWN, expected -3.824
    test 738 GeoidKarney('egm2008-1.pgm').height(-33.426, -14.84) kind 3: 18.195
    test 739 GeoidKarney('egm2008-1.pgm').height(39.586, -153.019) kind 3: -17.724  FAILED, KNOWN, expected -17.725
    test 740 GeoidKarney('egm2008-1.pgm').height(-60.79, -2.578) kind 3: 14.512  FAILED, KNOWN, expected 14.513
    test 741 GeoidKarney('egm2008-1.pgm').height(-20.131, 21.975) kind 3: 16.808  FAILED, KNOWN, expected 16.809
    test 742 GeoidKarney('egm2008-1.pgm').height(75.649, 99.921) kind 3: -8.025  FAILED, KNOWN, expected -8.026
    test 743 GeoidKarney('egm2008-1.pgm').height(-0.385, -23.788) kind 3: 9.689  FAILED, KNOWN, expected 9.688
    test 744 GeoidKarney('egm2008-1.pgm').height(-51.56, -50.327) kind 3: 6.218
    test 745 GeoidKarney('egm2008-1.pgm').height(-43.129, -167.271) kind 3: -2.725  FAILED, KNOWN, expected -2.724
    test 746 GeoidKarney('egm2008-1.pgm').height(46.374, 71.948) kind 3: -42.566  FAILED, KNOWN, expected -42.565
    test 747 GeoidKarney('egm2008-1.pgm').height(-22.783, 140.657) kind 3: 38.342  FAILED, KNOWN, expected 38.341
    test 748 GeoidKarney('egm2008-1.pgm').height(-12.056, 122.804) kind 3: 33.888  FAILED, KNOWN, expected 33.889
    test 749 GeoidKarney('egm2008-1.pgm').height(30.127, 94.738) kind 3: -37.381  FAILED, KNOWN, expected -37.380
    test 750 GeoidKarney('egm2008-1.pgm').height(46.296, -174.479) kind 3: -1.857  FAILED, KNOWN, expected -1.858
    test 751 GeoidKarney('egm2008-1.pgm').height(34.99, 15.052) kind 3: 34.196  FAILED, KNOWN, expected 34.195
    test 752 GeoidKarney('egm2008-1.pgm').height(-51.287, 90.565) kind 3: 12.767
    test 753 GeoidKarney('egm2008-1.pgm').height(34.217, 141.302) kind 3: 15.612
    test 754 GeoidKarney('egm2008-1.pgm').height(-40.423, -142.787) kind 3: -11.063
    test 755 GeoidKarney('egm2008-1.pgm').height(-17.854, -170.216) kind 3: 27.386  FAILED, KNOWN, expected 27.387
    test 756 GeoidKarney('egm2008-1.pgm').height(47.803, 112.701) kind 3: -23.817
    test 757 GeoidKarney('egm2008-1.pgm').height(-23.276, 133.454) kind 3: 18.713  FAILED, KNOWN, expected 18.712
    test 758 GeoidKarney('egm2008-1.pgm').height(-26.884, -36.571) kind 3: -7.343  FAILED, KNOWN, expected -7.344
    test 759 GeoidKarney('egm2008-1.pgm').height(-37.106, 31.128) kind 3: 29.997  FAILED, KNOWN, expected 29.998
    test 760 GeoidKarney('egm2008-1.pgm').height(-75.363, -173.674) kind 3: -61.869
    test 761 GeoidKarney('egm2008-1.pgm').height(-18.305, 69.016) kind 3: -24.938  FAILED, KNOWN, expected -24.937
    test 762 GeoidKarney('egm2008-1.pgm').height(39.527, 23.58) kind 3: 38.557  FAILED, KNOWN, expected 38.556
    test 763 GeoidKarney('egm2008-1.pgm').height(68.903, 30.97) kind 3: 19.671
    test 764 GeoidKarney('egm2008-1.pgm').height(53.937, 168.318) kind 3: 2.273  FAILED, KNOWN, expected 2.272
    test 765 GeoidKarney('egm2008-1.pgm').height(-38.6, 64.812) kind 3: 24.863
    test 766 GeoidKarney('egm2008-1.pgm').height(-41.396, -69.739) kind 3: 21.636
    test 767 GeoidKarney('egm2008-1.pgm').height(50.158, 72.319) kind 3: -33.850  FAILED, KNOWN, expected -33.851
    test 768 GeoidKarney('egm2008-1.pgm').height(27.692, 176.153) kind 3: -5.299
    test 769 GeoidKarney('egm2008-1.pgm').height(-48.419, 170.454) kind 3: -6.789
    test 770 GeoidKarney('egm2008-1.pgm').height(-65.346, -124.976) kind 3: -35.030
    test 771 GeoidKarney('egm2008-1.pgm').height(-51.873, 167.266) kind 3: -15.338
    test 772 GeoidKarney('egm2008-1.pgm').height(-7.263, 84.308) kind 3: -79.356
    test 773 GeoidKarney('egm2008-1.pgm').height(-1.461, -105.458) kind 3: -16.649  FAILED, KNOWN, expected -16.650
    test 774 GeoidKarney('egm2008-1.pgm').height(7.684, 161.873) kind 3: 36.359
    test 775 GeoidKarney('egm2008-1.pgm').height(-31.475, -158.52) kind 3: 3.614  FAILED, KNOWN, expected 3.615
    test 776 GeoidKarney('egm2008-1.pgm').height(-36.187, 62.917) kind 3: 23.946  FAILED, KNOWN, expected 23.947
    test 777 GeoidKarney('egm2008-1.pgm').height(16.003, 141.687) kind 3: 51.494  FAILED, KNOWN, expected 51.495
    test 778 GeoidKarney('egm2008-1.pgm').height(30.182, 86.261) kind 3: -30.909  FAILED, KNOWN, expected -30.910
    test 779 GeoidKarney('egm2008-1.pgm').height(-77.304, 159.498) kind 3: -52.131
    test 780 GeoidKarney('egm2008-1.pgm').height(39.536, 139.795) kind 3: 37.046  FAILED, KNOWN, expected 37.045
    test 781 GeoidKarney('egm2008-1.pgm').height(8.569, 134.618) kind 3: 64.181  FAILED, KNOWN, expected 64.180
    test 782 GeoidKarney('egm2008-1.pgm').height(14.473, 90.596) kind 3: -62.475
    test 783 GeoidKarney('egm2008-1.pgm').height(-13.138, -99.589) kind 3: -8.454
    test 784 GeoidKarney('egm2008-1.pgm').height(34.212, -26.307) kind 3: 40.834
    test 785 GeoidKarney('egm2008-1.pgm').height(21.89, 76.371) kind 3: -60.455
    test 786 GeoidKarney('egm2008-1.pgm').height(29.793, 120.487) kind 3: 9.728  FAILED, KNOWN, expected 9.727
    test 787 GeoidKarney('egm2008-1.pgm').height(15.724, 122.714) kind 3: 32.141  FAILED, KNOWN, expected 32.142
    test 788 GeoidKarney('egm2008-1.pgm').height(-66.208, -78.499) kind 3: -6.221  FAILED, KNOWN, expected -6.220
    test 789 GeoidKarney('egm2008-1.pgm').height(-39.507, 55.809) kind 3: 32.488  FAILED, KNOWN, expected 32.489
    test 790 GeoidKarney('egm2008-1.pgm').height(28.159, 51.476) kind 3: -24.692
    test 791 GeoidKarney('egm2008-1.pgm').height(-36.207, 120.205) kind 3: -38.749
    test 792 GeoidKarney('egm2008-1.pgm').height(30.575, -99.998) kind 3: -23.254  FAILED, KNOWN, expected -23.255
    test 793 GeoidKarney('egm2008-1.pgm').height(-16.993, 37.136) kind 3: -13.454  FAILED, KNOWN, expected -13.455
    test 794 GeoidKarney('egm2008-1.pgm').height(-11.477, 12.039) kind 3: 16.627
    test 795 GeoidKarney('egm2008-1.pgm').height(30.428, -144.765) kind 3: -22.221
    test 796 GeoidKarney('egm2008-1.pgm').height(-17.44, -92.424) kind 3: -4.836
    test 797 GeoidKarney('egm2008-1.pgm').height(40.203, 143.43) kind 3: 19.571
    test 798 GeoidKarney('egm2008-1.pgm').height(-37.098, -106.574) kind 3: -9.227
    test 799 GeoidKarney('egm2008-1.pgm').height(54.62, -68.413) kind 3: -23.248
    test 800 GeoidKarney('egm2008-1.pgm').height(-31.633, 148.182) kind 3: 24.829
    test 801 GeoidKarney('egm2008-1.pgm').height(-56.07, -141.407) kind 3: -21.706  FAILED, KNOWN, expected -21.705
    test 802 GeoidKarney('egm2008-1.pgm').height(-8.195, -52.691) kind 3: -17.054  FAILED, KNOWN, expected -17.053
    test 803 GeoidKarney('egm2008-1.pgm').height(17.851, 24.749) kind 3: 11.715  FAILED, KNOWN, expected 11.716
    test 804 GeoidKarney('egm2008-1.pgm').height(0.349, -108.333) kind 3: -19.529  FAILED, KNOWN, expected -19.530
    test 805 GeoidKarney('egm2008-1.pgm').height(15.038, 126.191) kind 3: 45.929
    test 806 GeoidKarney('egm2008-1.pgm').height(-21.111, -123.696) kind 3: -8.283
    test 807 GeoidKarney('egm2008-1.pgm').height(30.947, 173.002) kind 3: -8.467
    test 808 GeoidKarney('egm2008-1.pgm').height(-10.698, -144.091) kind 3: -1.829
    test 809 GeoidKarney('egm2008-1.pgm').height(-29.412, 124.753) kind 3: -16.505  FAILED, KNOWN, expected -16.506
    test 810 GeoidKarney('egm2008-1.pgm').height(38.224, -137.189) kind 3: -35.384
    test 811 GeoidKarney('egm2008-1.pgm').height(36.064, -132.409) kind 3: -38.962  FAILED, KNOWN, expected -38.963
    test 812 GeoidKarney('egm2008-1.pgm').height(29.975, 178.076) kind 3: -6.956
    test 813 GeoidKarney('egm2008-1.pgm').height(-21.346, 169.26) kind 3: 51.006  FAILED, KNOWN, expected 51.005
    test 814 GeoidKarney('egm2008-1.pgm').height(49.282, -152.934) kind 3: 1.193  FAILED, KNOWN, expected 1.192
    test 815 GeoidKarney('egm2008-1.pgm').height(16.349, -99.962) kind 3: -15.038
    test 816 GeoidKarney('egm2008-1.pgm').height(-14.293, -167.34) kind 3: 17.791
    test 817 GeoidKarney('egm2008-1.pgm').height(47.166, -38.523) kind 3: 44.653  FAILED, KNOWN, expected 44.652
    test 818 GeoidKarney('egm2008-1.pgm').height(-58.911, 114.347) kind 3: -17.972  FAILED, KNOWN, expected -17.971
    test 819 GeoidKarney('egm2008-1.pgm').height(-9.055, 111.294) kind 3: 11.630  FAILED, KNOWN, expected 11.631
    test 820 GeoidKarney('egm2008-1.pgm').height(18.391, 29.692) kind 3: 7.394
    test 821 GeoidKarney('egm2008-1.pgm').height(-15.074, 22.153) kind 3: 7.932
    test 822 GeoidKarney('egm2008-1.pgm').height(-4.235, 62.001) kind 3: -60.594  FAILED, KNOWN, expected -60.593
    test 823 GeoidKarney('egm2008-1.pgm').height(15.171, -86.583) kind 3: 4.384
    test 824 GeoidKarney('egm2008-1.pgm').height(79.254, 112.116) kind 3: 1.296  FAILED, KNOWN, expected 1.297
    test 825 GeoidKarney('egm2008-1.pgm').height(15.947, 156.093) kind 3: 30.852
    test 826 GeoidKarney('egm2008-1.pgm').height(68.371, -177.382) kind 3: 2.705  FAILED, KNOWN, expected 2.704
    test 827 GeoidKarney('egm2008-1.pgm').height(-41.931, -72.093) kind 3: 21.264
    test 828 GeoidKarney('egm2008-1.pgm').height(-1.193, -143.133) kind 3: 5.443
    test 829 GeoidKarney('egm2008-1.pgm').height(-37.006, 154.513) kind 3: 9.998
    test 830 GeoidKarney('egm2008-1.pgm').height(-22.148, 9.938) kind 3: 22.428
    test 831 GeoidKarney('egm2008-1.pgm').height(24.329, 109.044) kind 3: -23.155  FAILED, KNOWN, expected -23.154
    test 832 GeoidKarney('egm2008-1.pgm').height(-54.878, 114.691) kind 3: -17.662
    test 833 GeoidKarney('egm2008-1.pgm').height(45.601, -80.458) kind 3: -36.840  FAILED, KNOWN, expected -36.839
    test 834 GeoidKarney('egm2008-1.pgm').height(2.372, 58.974) kind 3: -61.220  FAILED, KNOWN, expected -61.221
    test 835 GeoidKarney('egm2008-1.pgm').height(15.937, 165.854) kind 3: 20.355
    test 836 GeoidKarney('egm2008-1.pgm').height(4.889, -24.213) kind 3: 13.147
    test 837 GeoidKarney('egm2008-1.pgm').height(-11.392, 179.558) kind 3: 41.073  FAILED, KNOWN, expected 41.072
    test 838 GeoidKarney('egm2008-1.pgm').height(58.246, 4.862) kind 3: 42.982
    test 839 GeoidKarney('egm2008-1.pgm').height(34.302, -109.109) kind 3: -22.997  FAILED, KNOWN, expected -22.998
    test 840 GeoidKarney('egm2008-1.pgm').height(-58.196, 117.306) kind 3: -20.662
    test 841 GeoidKarney('egm2008-1.pgm').height(44.5, 173.769) kind 3: -8.438
    test 842 GeoidKarney('egm2008-1.pgm').height(-28.863, -139.775) kind 3: -8.711  FAILED, KNOWN, expected -8.712
    test 843 GeoidKarney('egm2008-1.pgm').height(19.507, -96.099) kind 3: -12.653
    test 844 GeoidKarney('egm2008-1.pgm').height(-42.488, -73.907) kind 3: 17.166
    test 845 GeoidKarney('egm2008-1.pgm').height(46.138, -141.429) kind 3: -19.873  FAILED, KNOWN, expected -19.874
    test 846 GeoidKarney('egm2008-1.pgm').height(60.507, 93.743) kind 3: -31.124
    test 847 GeoidKarney('egm2008-1.pgm').height(26.219, -145.434) kind 3: -17.306  FAILED, KNOWN, expected -17.307
    test 848 GeoidKarney('egm2008-1.pgm').height(-28.687, 3.37) kind 3: 23.435  FAILED, KNOWN, expected 23.434
    test 849 GeoidKarney('egm2008-1.pgm').height(-15.008, 117.45) kind 3: 4.508
    test 850 GeoidKarney('egm2008-1.pgm').height(40.71, 144.095) kind 3: 11.550  FAILED, KNOWN, expected 11.549
    test 851 GeoidKarney('egm2008-1.pgm').height(20.823, -173.611) kind 3: 5.749  FAILED, KNOWN, expected 5.748
    test 852 GeoidKarney('egm2008-1.pgm').height(16.776, -3.009) kind 3: 28.788
    test 853 GeoidKarney('egm2008-1.pgm').height(41.0, -95.0) kind 3: -30.589
    test 854 GeoidKarney('egm2008-1.pgm').height(49.0, -120.5) kind 3: -15.273
    test 855 GeoidKarney('egm2008-1.pgm').height(49.0, -103.5) kind 3: -18.624
    test 856 GeoidKarney('egm2008-1.pgm').height(49.0, -86.5) kind 3: -37.872  FAILED, KNOWN, expected -37.873
    test 857 GeoidKarney('egm2008-1.pgm').height(49.0, -69.5) kind 3: -26.511
    test 858 GeoidKarney('egm2008-1.pgm').height(33.0, -120.5) kind 3: -39.600
    test 859 GeoidKarney('egm2008-1.pgm').height(33.0, -103.5) kind 3: -22.689
    test 860 GeoidKarney('egm2008-1.pgm').height(33.0, -86.5) kind 3: -30.067
    test 861 GeoidKarney('egm2008-1.pgm').height(33.0, -69.5) kind 3: -48.093

    test 862 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.001323
    test 863 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps mean (of 210 total): 0.000468
    test 864 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps stdev (of 210 total): 0.000333
    test 865 GeoidKarney('egm2008-1.pgm').toStr: GeoidKarney('egm2008-1.pgm'): lowerleft(-90.0, -180.0, -30.15), upperright(90.0, 180.0, 14.898), center(0.0, 0.0, 17.226), highest(-8.4, 147.367, 85.839), lowest(4.7, 78.767, -106.911)

    test 866 closed: True
    test 867 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 868 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)

    213 tests skipped (426): no scipy
    test 869 GeoidKarney('egm84-15.pgm').height(-76.981, 34.17) kind 2: 11.727  FAILED, KNOWN, expected 11.729
    test 870 GeoidKarney('egm84-15.pgm').height(79.695, 88.806) kind 2: 0.280  FAILED, KNOWN, expected 0.270
    test 871 GeoidKarney('egm84-15.pgm').height(-15.245, 168.748) kind 2: 67.071  FAILED, KNOWN, expected 67.074
    test 872 GeoidKarney('egm84-15.pgm').height(-19.379, 15.855) kind 2: 25.366  FAILED, KNOWN, expected 25.344
    test 873 GeoidKarney('egm84-15.pgm').height(43.378, -130.552) kind 2: -28.913  FAILED, KNOWN, expected -28.919
    test 874 GeoidKarney('egm84-15.pgm').height(-16.075, 21.795) kind 2: 14.383  FAILED, KNOWN, expected 14.386
    test 875 GeoidKarney('egm84-15.pgm').height(-11.256, -73.75) kind 2: 30.701  FAILED, KNOWN, expected 30.700
    test 876 GeoidKarney('egm84-15.pgm').height(69.017, -15.921) kind 2: 62.222  FAILED, KNOWN, expected 62.225
    test 877 GeoidKarney('egm84-15.pgm').height(2.221, 139.739) kind 2: 70.221  FAILED, KNOWN, expected 70.222
    test 878 GeoidKarney('egm84-15.pgm').height(-9.097, 119.142) kind 2: 34.290  FAILED, KNOWN, expected 34.336
    test 879 GeoidKarney('egm84-15.pgm').height(-28.524, -22.192) kind 2: 8.205  FAILED, KNOWN, expected 8.206
    test 880 GeoidKarney('egm84-15.pgm').height(12.272, -136.424) kind 2: -20.068  FAILED, KNOWN, expected -20.074
    test 881 GeoidKarney('egm84-15.pgm').height(-15.203, -85.604) kind 2: -3.129
    test 882 GeoidKarney('egm84-15.pgm').height(-63.736, -77.17) kind 2: -3.214  FAILED, KNOWN, expected -3.217
    test 883 GeoidKarney('egm84-15.pgm').height(-48.771, -90.102) kind 2: -1.536  FAILED, KNOWN, expected -1.531
    test 884 GeoidKarney('egm84-15.pgm').height(-0.179, -126.368) kind 2: -16.742
    test 885 GeoidKarney('egm84-15.pgm').height(1.586, -128.887) kind 2: -15.418  FAILED, KNOWN, expected -15.412
    test 886 GeoidKarney('egm84-15.pgm').height(-48.781, -2.684) kind 2: 25.077  FAILED, KNOWN, expected 25.078
    test 887 GeoidKarney('egm84-15.pgm').height(-49.092, 136.862) kind 2: -18.114  FAILED, KNOWN, expected -18.120
    test 888 GeoidKarney('egm84-15.pgm').height(47.732, 17.552) kind 2: 46.230  FAILED, KNOWN, expected 46.224
    test 889 GeoidKarney('egm84-15.pgm').height(-49.11, 85.706) kind 2: 18.648  FAILED, KNOWN, expected 18.649
    test 890 GeoidKarney('egm84-15.pgm').height(-49.162, 40.321) kind 2: 44.759  FAILED, KNOWN, expected 44.764
    test 891 GeoidKarney('egm84-15.pgm').height(3.498, 158.118) kind 2: 51.095  FAILED, KNOWN, expected 51.089
    test 892 GeoidKarney('egm84-15.pgm').height(-35.616, 122.648) kind 2: -34.436  FAILED, KNOWN, expected -34.471
    test 893 GeoidKarney('egm84-15.pgm').height(56.598, -96.114) kind 2: -39.124
    test 894 GeoidKarney('egm84-15.pgm').height(-31.85, 149.121) kind 2: 28.131  FAILED, KNOWN, expected 28.142
    test 895 GeoidKarney('egm84-15.pgm').height(-26.569, -177.792) kind 2: 49.606  FAILED, KNOWN, expected 49.619
    test 896 GeoidKarney('egm84-15.pgm').height(76.735, -65.753) kind 2: 22.568  FAILED, KNOWN, expected 22.575
    test 897 GeoidKarney('egm84-15.pgm').height(-21.404, -122.268) kind 2: -6.894  FAILED, KNOWN, expected -6.893
    test 898 GeoidKarney('egm84-15.pgm').height(-77.133, -65.474) kind 2: -15.017  FAILED, KNOWN, expected -15.012
    test 899 GeoidKarney('egm84-15.pgm').height(-58.812, 2.276) kind 2: 18.777  FAILED, KNOWN, expected 18.776
    test 900 GeoidKarney('egm84-15.pgm').height(4.415, 155.683) kind 2: 53.644  FAILED, KNOWN, expected 53.645
    test 901 GeoidKarney('egm84-15.pgm').height(-28.146, 107.081) kind 2: -39.058  FAILED, KNOWN, expected -39.074
    test 902 GeoidKarney('egm84-15.pgm').height(-10.551, -126.69) kind 2: -9.643  FAILED, KNOWN, expected -9.645
    test 903 GeoidKarney('egm84-15.pgm').height(-25.444, -103.337) kind 2: -2.520  FAILED, KNOWN, expected -2.528
    test 904 GeoidKarney('egm84-15.pgm').height(24.436, 46.159) kind 2: -6.918  FAILED, KNOWN, expected -6.907
    test 905 GeoidKarney('egm84-15.pgm').height(-72.889, 37.107) kind 2: 21.758  FAILED, KNOWN, expected 21.711
    test 906 GeoidKarney('egm84-15.pgm').height(-19.629, 13.245) kind 2: 25.617  FAILED, KNOWN, expected 25.611
    test 907 GeoidKarney('egm84-15.pgm').height(-7.602, 171.265) kind 2: 41.585  FAILED, KNOWN, expected 41.569
    test 908 GeoidKarney('egm84-15.pgm').height(-45.364, -1.876) kind 2: 23.283  FAILED, KNOWN, expected 23.280
    test 909 GeoidKarney('egm84-15.pgm').height(-7.292, -69.18) kind 2: 24.497  FAILED, KNOWN, expected 24.502
    test 910 GeoidKarney('egm84-15.pgm').height(-31.566, -166.689) kind 2: 14.825  FAILED, KNOWN, expected 14.826
    test 911 GeoidKarney('egm84-15.pgm').height(-82.751, -162.085) kind 2: -45.104
    test 912 GeoidKarney('egm84-15.pgm').height(-40.7, 99.466) kind 2: -17.254  FAILED, KNOWN, expected -17.252
    test 913 GeoidKarney('egm84-15.pgm').height(48.676, 39.69) kind 2: 12.984  FAILED, KNOWN, expected 12.972
    test 914 GeoidKarney('egm84-15.pgm').height(74.817, -78.404) kind 2: 4.773  FAILED, KNOWN, expected 4.776
    test 915 GeoidKarney('egm84-15.pgm').height(-81.032, -63.865) kind 2: -23.577
    test 916 GeoidKarney('egm84-15.pgm').height(74.022, 9.432) kind 2: 43.884  FAILED, KNOWN, expected 43.885
    test 917 GeoidKarney('egm84-15.pgm').height(-75.071, 17.579) kind 2: 17.064  FAILED, KNOWN, expected 17.072
    test 918 GeoidKarney('egm84-15.pgm').height(-12.546, -54.851) kind 2: -6.637  FAILED, KNOWN, expected -6.643
    test 919 GeoidKarney('egm84-15.pgm').height(-13.621, 42.408) kind 2: -23.332  FAILED, KNOWN, expected -23.325
    test 920 GeoidKarney('egm84-15.pgm').height(-2.266, -91.951) kind 2: -10.689  FAILED, KNOWN, expected -10.698
    test 921 GeoidKarney('egm84-15.pgm').height(-18.672, 42.547) kind 2: -10.305  FAILED, KNOWN, expected -10.265
    test 922 GeoidKarney('egm84-15.pgm').height(-41.44, 157.413) kind 2: 0.692  FAILED, KNOWN, expected 0.689
    test 923 GeoidKarney('egm84-15.pgm').height(53.686, -79.375) kind 2: -43.763  FAILED, KNOWN, expected -43.758
    test 924 GeoidKarney('egm84-15.pgm').height(39.26, -30.351) kind 2: 57.551  FAILED, KNOWN, expected 57.554
    test 925 GeoidKarney('egm84-15.pgm').height(-51.699, -141.493) kind 2: -16.939  FAILED, KNOWN, expected -16.936
    test 926 GeoidKarney('egm84-15.pgm').height(36.585, 4.515) kind 2: 45.227  FAILED, KNOWN, expected 45.295
    test 927 GeoidKarney('egm84-15.pgm').height(39.642, -54.659) kind 2: -13.585  FAILED, KNOWN, expected -13.586
    test 928 GeoidKarney('egm84-15.pgm').height(59.761, 166.567) kind 2: 11.469  FAILED, KNOWN, expected 11.468
    test 929 GeoidKarney('egm84-15.pgm').height(51.83, 13.357) kind 2: 42.090  FAILED, KNOWN, expected 42.092
    test 930 GeoidKarney('egm84-15.pgm').height(-36.531, -175.431) kind 2: 22.828  FAILED, KNOWN, expected 22.830
    test 931 GeoidKarney('egm84-15.pgm').height(-37.08, 125.264) kind 2: -32.300  FAILED, KNOWN, expected -32.302
    test 932 GeoidKarney('egm84-15.pgm').height(-68.651, 92.732) kind 2: 9.212  FAILED, KNOWN, expected 9.228
    test 933 GeoidKarney('egm84-15.pgm').height(35.087, 45.336) kind 2: 6.000  FAILED, KNOWN, expected 5.965
    test 934 GeoidKarney('egm84-15.pgm').height(-61.356, -169.379) kind 2: -45.000  FAILED, KNOWN, expected -45.013
    test 935 GeoidKarney('egm84-15.pgm').height(-36.955, 179.12) kind 2: 21.148  FAILED, KNOWN, expected 21.118
    test 936 GeoidKarney('egm84-15.pgm').height(10.248, -6.714) kind 2: 30.500  FAILED, KNOWN, expected 30.497
    test 937 GeoidKarney('egm84-15.pgm').height(36.868, 84.602) kind 2: -40.416  FAILED, KNOWN, expected -40.396
    test 938 GeoidKarney('egm84-15.pgm').height(28.637, 88.933) kind 2: -31.726  FAILED, KNOWN, expected -31.704
    test 939 GeoidKarney('egm84-15.pgm').height(54.811, -99.968) kind 2: -32.271  FAILED, KNOWN, expected -32.277
    test 940 GeoidKarney('egm84-15.pgm').height(7.611, 145.911) kind 2: 61.016  FAILED, KNOWN, expected 61.024
    test 941 GeoidKarney('egm84-15.pgm').height(59.412, 170.102) kind 2: 5.017  FAILED, KNOWN, expected 4.994
    test 942 GeoidKarney('egm84-15.pgm').height(-61.469, 126.144) kind 2: -30.240  FAILED, KNOWN, expected -30.237
    test 943 GeoidKarney('egm84-15.pgm').height(18.514, -137.083) kind 2: -26.007  FAILED, KNOWN, expected -26.006
    test 944 GeoidKarney('egm84-15.pgm').height(7.854, -126.799) kind 2: -29.280  FAILED, KNOWN, expected -29.283
    test 945 GeoidKarney('egm84-15.pgm').height(47.489, 134.183) kind 2: 22.400  FAILED, KNOWN, expected 22.394
    test 946 GeoidKarney('egm84-15.pgm').height(-34.144, -11.922) kind 2: 17.549  FAILED, KNOWN, expected 17.550
    test 947 GeoidKarney('egm84-15.pgm').height(-58.389, 117.458) kind 2: -20.621  FAILED, KNOWN, expected -20.622
    test 948 GeoidKarney('egm84-15.pgm').height(9.773, 95.846) kind 2: -41.463  FAILED, KNOWN, expected -41.484
    test 949 GeoidKarney('egm84-15.pgm').height(-53.12, 136.994) kind 2: -20.969  FAILED, KNOWN, expected -20.968
    test 950 GeoidKarney('egm84-15.pgm').height(-50.35, 0.075) kind 2: 25.561  FAILED, KNOWN, expected 25.568
    test 951 GeoidKarney('egm84-15.pgm').height(31.438, -170.879) kind 2: -8.574  FAILED, KNOWN, expected -8.581
    test 952 GeoidKarney('egm84-15.pgm').height(37.541, -153.024) kind 2: -18.329
    test 953 GeoidKarney('egm84-15.pgm').height(27.586, 2.444) kind 2: 25.003  FAILED, KNOWN, expected 25.001
    test 954 GeoidKarney('egm84-15.pgm').height(-26.139, -106.201) kind 2: -2.945  FAILED, KNOWN, expected -2.940
    test 955 GeoidKarney('egm84-15.pgm').height(-33.426, -14.84) kind 2: 18.220  FAILED, KNOWN, expected 18.228
    test 956 GeoidKarney('egm84-15.pgm').height(39.586, -153.019) kind 2: -16.511  FAILED, KNOWN, expected -16.507
    test 957 GeoidKarney('egm84-15.pgm').height(-60.79, -2.578) kind 2: 14.277  FAILED, KNOWN, expected 14.275
    test 958 GeoidKarney('egm84-15.pgm').height(-20.131, 21.975) kind 2: 16.866  FAILED, KNOWN, expected 16.852
    test 959 GeoidKarney('egm84-15.pgm').height(75.649, 99.921) kind 2: -6.870  FAILED, KNOWN, expected -6.872
    test 960 GeoidKarney('egm84-15.pgm').height(-0.385, -23.788) kind 2: 8.987  FAILED, KNOWN, expected 9.006
    test 961 GeoidKarney('egm84-15.pgm').height(-51.56, -50.327) kind 2: 6.277  FAILED, KNOWN, expected 6.296
    test 962 GeoidKarney('egm84-15.pgm').height(-43.129, -167.271) kind 2: -1.483  FAILED, KNOWN, expected -1.481
    test 963 GeoidKarney('egm84-15.pgm').height(46.374, 71.948) kind 2: -40.929  FAILED, KNOWN, expected -40.915
    test 964 GeoidKarney('egm84-15.pgm').height(-22.783, 140.657) kind 2: 37.481  FAILED, KNOWN, expected 37.495
    test 965 GeoidKarney('egm84-15.pgm').height(-12.056, 122.804) kind 2: 32.222  FAILED, KNOWN, expected 32.258
    test 966 GeoidKarney('egm84-15.pgm').height(30.127, 94.738) kind 2: -41.529
    test 967 GeoidKarney('egm84-15.pgm').height(46.296, -174.479) kind 2: -1.377
    test 968 GeoidKarney('egm84-15.pgm').height(34.99, 15.052) kind 2: 35.263  FAILED, KNOWN, expected 35.280
    test 969 GeoidKarney('egm84-15.pgm').height(-51.287, 90.565) kind 2: 12.958
    test 970 GeoidKarney('egm84-15.pgm').height(34.217, 141.302) kind 2: 18.423  FAILED, KNOWN, expected 18.307
    test 971 GeoidKarney('egm84-15.pgm').height(-40.423, -142.787) kind 2: -10.400
    test 972 GeoidKarney('egm84-15.pgm').height(-17.854, -170.216) kind 2: 28.649  FAILED, KNOWN, expected 28.638
    test 973 GeoidKarney('egm84-15.pgm').height(47.803, 112.701) kind 2: -24.060  FAILED, KNOWN, expected -24.059
    test 974 GeoidKarney('egm84-15.pgm').height(-23.276, 133.454) kind 2: 18.800  FAILED, KNOWN, expected 18.806
    test 975 GeoidKarney('egm84-15.pgm').height(-26.884, -36.571) kind 2: -6.808  FAILED, KNOWN, expected -6.820
    test 976 GeoidKarney('egm84-15.pgm').height(-37.106, 31.128) kind 2: 31.485  FAILED, KNOWN, expected 31.486
    test 977 GeoidKarney('egm84-15.pgm').height(-75.363, -173.674) kind 2: -62.021  FAILED, KNOWN, expected -62.024
    test 978 GeoidKarney('egm84-15.pgm').height(-18.305, 69.016) kind 2: -24.246  FAILED, KNOWN, expected -24.248
    test 979 GeoidKarney('egm84-15.pgm').height(39.527, 23.58) kind 2: 43.246  FAILED, KNOWN, expected 43.255
    test 980 GeoidKarney('egm84-15.pgm').height(68.903, 30.97) kind 2: 18.496  FAILED, KNOWN, expected 18.498
    test 981 GeoidKarney('egm84-15.pgm').height(53.937, 168.318) kind 2: 4.100  FAILED, KNOWN, expected 4.067
    test 982 GeoidKarney('egm84-15.pgm').height(-38.6, 64.812) kind 2: 25.456  FAILED, KNOWN, expected 25.454
    test 983 GeoidKarney('egm84-15.pgm').height(-41.396, -69.739) kind 2: 26.619  FAILED, KNOWN, expected 26.657
    test 984 GeoidKarney('egm84-15.pgm').height(50.158, 72.319) kind 2: -32.003  FAILED, KNOWN, expected -31.966
    test 985 GeoidKarney('egm84-15.pgm').height(27.692, 176.153) kind 2: -4.422  FAILED, KNOWN, expected -4.415
    test 986 GeoidKarney('egm84-15.pgm').height(-48.419, 170.454) kind 2: -6.717  FAILED, KNOWN, expected -6.741
    test 987 GeoidKarney('egm84-15.pgm').height(-65.346, -124.976) kind 2: -34.915  FAILED, KNOWN, expected -34.900
    test 988 GeoidKarney('egm84-15.pgm').height(-51.873, 167.266) kind 2: -14.214  FAILED, KNOWN, expected -14.223
    test 989 GeoidKarney('egm84-15.pgm').height(-7.263, 84.308) kind 2: -79.313  FAILED, KNOWN, expected -79.317
    test 990 GeoidKarney('egm84-15.pgm').height(-1.461, -105.458) kind 2: -16.163
    test 991 GeoidKarney('egm84-15.pgm').height(7.684, 161.873) kind 2: 36.296  FAILED, KNOWN, expected 36.287
    test 992 GeoidKarney('egm84-15.pgm').height(-31.475, -158.52) kind 2: 4.066  FAILED, KNOWN, expected 4.068
    test 993 GeoidKarney('egm84-15.pgm').height(-36.187, 62.917) kind 2: 24.401  FAILED, KNOWN, expected 24.407
    test 994 GeoidKarney('egm84-15.pgm').height(16.003, 141.687) kind 2: 53.051  FAILED, KNOWN, expected 53.054
    test 995 GeoidKarney('egm84-15.pgm').height(30.182, 86.261) kind 2: -30.616  FAILED, KNOWN, expected -30.622
    test 996 GeoidKarney('egm84-15.pgm').height(-77.304, 159.498) kind 2: -53.544  FAILED, KNOWN, expected -53.540
    test 997 GeoidKarney('egm84-15.pgm').height(39.536, 139.795) kind 2: 36.274  FAILED, KNOWN, expected 36.262
    test 998 GeoidKarney('egm84-15.pgm').height(8.569, 134.618) kind 2: 64.339  FAILED, KNOWN, expected 64.369
    test 999 GeoidKarney('egm84-15.pgm').height(14.473, 90.596) kind 2: -61.320  FAILED, KNOWN, expected -61.300
    test 1000 GeoidKarney('egm84-15.pgm').height(-13.138, -99.589) kind 2: -7.996  FAILED, KNOWN, expected -7.999
    test 1001 GeoidKarney('egm84-15.pgm').height(34.212, -26.307) kind 2: 41.489  FAILED, KNOWN, expected 41.477
    test 1002 GeoidKarney('egm84-15.pgm').height(21.89, 76.371) kind 2: -59.881  FAILED, KNOWN, expected -59.876
    test 1003 GeoidKarney('egm84-15.pgm').height(29.793, 120.487) kind 2: 8.422  FAILED, KNOWN, expected 8.404
    test 1004 GeoidKarney('egm84-15.pgm').height(15.724, 122.714) kind 2: 39.200  FAILED, KNOWN, expected 39.152
    test 1005 GeoidKarney('egm84-15.pgm').height(-66.208, -78.499) kind 2: -7.068  FAILED, KNOWN, expected -7.076
    test 1006 GeoidKarney('egm84-15.pgm').height(-39.507, 55.809) kind 2: 33.179  FAILED, KNOWN, expected 33.178
    test 1007 GeoidKarney('egm84-15.pgm').height(28.159, 51.476) kind 2: -23.801  FAILED, KNOWN, expected -23.832
    test 1008 GeoidKarney('egm84-15.pgm').height(-36.207, 120.205) kind 2: -38.175  FAILED, KNOWN, expected -38.206
    test 1009 GeoidKarney('egm84-15.pgm').height(30.575, -99.998) kind 2: -22.171  FAILED, KNOWN, expected -22.142
    test 1010 GeoidKarney('egm84-15.pgm').height(-16.993, 37.136) kind 2: -13.746  FAILED, KNOWN, expected -13.765
    test 1011 GeoidKarney('egm84-15.pgm').height(-11.477, 12.039) kind 2: 16.909  FAILED, KNOWN, expected 16.898
    test 1012 GeoidKarney('egm84-15.pgm').height(30.428, -144.765) kind 2: -22.479  FAILED, KNOWN, expected -22.474
    test 1013 GeoidKarney('egm84-15.pgm').height(-17.44, -92.424) kind 2: -4.710  FAILED, KNOWN, expected -4.718
    test 1014 GeoidKarney('egm84-15.pgm').height(40.203, 143.43) kind 2: 16.680  FAILED, KNOWN, expected 16.635
    test 1015 GeoidKarney('egm84-15.pgm').height(-37.098, -106.574) kind 2: -9.012
    test 1016 GeoidKarney('egm84-15.pgm').height(54.62, -68.413) kind 2: -23.556  FAILED, KNOWN, expected -23.543
    test 1017 GeoidKarney('egm84-15.pgm').height(-31.633, 148.182) kind 2: 26.240  FAILED, KNOWN, expected 26.236
    test 1018 GeoidKarney('egm84-15.pgm').height(-56.07, -141.407) kind 2: -21.963  FAILED, KNOWN, expected -21.953
    test 1019 GeoidKarney('egm84-15.pgm').height(-8.195, -52.691) kind 2: -17.959
    test 1020 GeoidKarney('egm84-15.pgm').height(17.851, 24.749) kind 2: 9.072  FAILED, KNOWN, expected 9.078
    test 1021 GeoidKarney('egm84-15.pgm').height(0.349, -108.333) kind 2: -19.160  FAILED, KNOWN, expected -19.158
    test 1022 GeoidKarney('egm84-15.pgm').height(15.038, 126.191) kind 2: 46.776
    test 1023 GeoidKarney('egm84-15.pgm').height(-21.111, -123.696) kind 2: -8.053  FAILED, KNOWN, expected -8.055
    test 1024 GeoidKarney('egm84-15.pgm').height(30.947, 173.002) kind 2: -7.681  FAILED, KNOWN, expected -7.696
    test 1025 GeoidKarney('egm84-15.pgm').height(-10.698, -144.091) kind 2: -1.052  FAILED, KNOWN, expected -1.049
    test 1026 GeoidKarney('egm84-15.pgm').height(-29.412, 124.753) kind 2: -16.081
    test 1027 GeoidKarney('egm84-15.pgm').height(38.224, -137.189) kind 2: -35.429  FAILED, KNOWN, expected -35.427
    test 1028 GeoidKarney('egm84-15.pgm').height(36.064, -132.409) kind 2: -38.648
    test 1029 GeoidKarney('egm84-15.pgm').height(29.975, 178.076) kind 2: -5.524  FAILED, KNOWN, expected -5.519
    test 1030 GeoidKarney('egm84-15.pgm').height(-21.346, 169.26) kind 2: 53.448  FAILED, KNOWN, expected 53.431
    test 1031 GeoidKarney('egm84-15.pgm').height(49.282, -152.934) kind 2: 1.977  FAILED, KNOWN, expected 1.979
    test 1032 GeoidKarney('egm84-15.pgm').height(16.349, -99.962) kind 2: -13.131  FAILED, KNOWN, expected -13.197
    test 1033 GeoidKarney('egm84-15.pgm').height(-14.293, -167.34) kind 2: 18.953  FAILED, KNOWN, expected 18.945
    test 1034 GeoidKarney('egm84-15.pgm').height(47.166, -38.523) kind 2: 45.180  FAILED, KNOWN, expected 45.187
    test 1035 GeoidKarney('egm84-15.pgm').height(-58.911, 114.347) kind 2: -17.155  FAILED, KNOWN, expected -17.145
    test 1036 GeoidKarney('egm84-15.pgm').height(-9.055, 111.294) kind 2: 13.136  FAILED, KNOWN, expected 13.146
    test 1037 GeoidKarney('egm84-15.pgm').height(18.391, 29.692) kind 2: 4.933
    test 1038 GeoidKarney('egm84-15.pgm').height(-15.074, 22.153) kind 2: 12.313  FAILED, KNOWN, expected 12.326
    test 1039 GeoidKarney('egm84-15.pgm').height(-4.235, 62.001) kind 2: -60.029  FAILED, KNOWN, expected -60.030
    test 1040 GeoidKarney('egm84-15.pgm').height(15.171, -86.583) kind 2: 3.034  FAILED, KNOWN, expected 3.110
    test 1041 GeoidKarney('egm84-15.pgm').height(79.254, 112.116) kind 2: -2.741
    test 1042 GeoidKarney('egm84-15.pgm').height(15.947, 156.093) kind 2: 32.108  FAILED, KNOWN, expected 32.085
    test 1043 GeoidKarney('egm84-15.pgm').height(68.371, -177.382) kind 2: 2.069  FAILED, KNOWN, expected 2.060
    test 1044 GeoidKarney('egm84-15.pgm').height(-41.931, -72.093) kind 2: 22.901  FAILED, KNOWN, expected 22.916
    test 1045 GeoidKarney('egm84-15.pgm').height(-1.193, -143.133) kind 2: 5.526  FAILED, KNOWN, expected 5.519
    test 1046 GeoidKarney('egm84-15.pgm').height(-37.006, 154.513) kind 2: 11.019  FAILED, KNOWN, expected 11.020
    test 1047 GeoidKarney('egm84-15.pgm').height(-22.148, 9.938) kind 2: 22.181  FAILED, KNOWN, expected 22.171
    test 1048 GeoidKarney('egm84-15.pgm').height(24.329, 109.044) kind 2: -22.957  FAILED, KNOWN, expected -22.944
    test 1049 GeoidKarney('egm84-15.pgm').height(-54.878, 114.691) kind 2: -17.583  FAILED, KNOWN, expected -17.580
    test 1050 GeoidKarney('egm84-15.pgm').height(45.601, -80.458) kind 2: -35.728  FAILED, KNOWN, expected -35.738
    test 1051 GeoidKarney('egm84-15.pgm').height(2.372, 58.974) kind 2: -61.036  FAILED, KNOWN, expected -61.040
    test 1052 GeoidKarney('egm84-15.pgm').height(15.937, 165.854) kind 2: 20.897  FAILED, KNOWN, expected 20.907
    test 1053 GeoidKarney('egm84-15.pgm').height(4.889, -24.213) kind 2: 13.865  FAILED, KNOWN, expected 13.874
    test 1054 GeoidKarney('egm84-15.pgm').height(-11.392, 179.558) kind 2: 40.920  FAILED, KNOWN, expected 40.929
    test 1055 GeoidKarney('egm84-15.pgm').height(58.246, 4.862) kind 2: 43.196  FAILED, KNOWN, expected 43.191
    test 1056 GeoidKarney('egm84-15.pgm').height(34.302, -109.109) kind 2: -22.016  FAILED, KNOWN, expected -22.006
    test 1057 GeoidKarney('egm84-15.pgm').height(-58.196, 117.306) kind 2: -20.378  FAILED, KNOWN, expected -20.375
    test 1058 GeoidKarney('egm84-15.pgm').height(44.5, 173.769) kind 2: -7.856  FAILED, KNOWN, expected -7.852
    test 1059 GeoidKarney('egm84-15.pgm').height(-28.863, -139.775) kind 2: -8.680  FAILED, KNOWN, expected -8.674
    test 1060 GeoidKarney('egm84-15.pgm').height(19.507, -96.099) kind 2: -14.089  FAILED, KNOWN, expected -14.117
    test 1061 GeoidKarney('egm84-15.pgm').height(-42.488, -73.907) kind 2: 17.249  FAILED, KNOWN, expected 17.251
    test 1062 GeoidKarney('egm84-15.pgm').height(46.138, -141.429) kind 2: -19.434  FAILED, KNOWN, expected -19.436
    test 1063 GeoidKarney('egm84-15.pgm').height(60.507, 93.743) kind 2: -31.333  FAILED, KNOWN, expected -31.330
    test 1064 GeoidKarney('egm84-15.pgm').height(26.219, -145.434) kind 2: -17.088  FAILED, KNOWN, expected -17.090
    test 1065 GeoidKarney('egm84-15.pgm').height(-28.687, 3.37) kind 2: 24.177  FAILED, KNOWN, expected 24.184
    test 1066 GeoidKarney('egm84-15.pgm').height(-15.008, 117.45) kind 2: 6.146  FAILED, KNOWN, expected 6.142
    test 1067 GeoidKarney('egm84-15.pgm').height(40.71, 144.095) kind 2: 11.771  FAILED, KNOWN, expected 11.693
    test 1068 GeoidKarney('egm84-15.pgm').height(20.823, -173.611) kind 2: 6.830  FAILED, KNOWN, expected 6.840
    test 1069 GeoidKarney('egm84-15.pgm').height(16.776, -3.009) kind 2: 31.293  FAILED, KNOWN, expected 31.298
    test 1070 GeoidKarney('egm84-15.pgm').height(41.0, -95.0) kind 2: -31.953  FAILED, KNOWN, expected -31.952
    test 1071 GeoidKarney('egm84-15.pgm').height(49.0, -120.5) kind 2: -14.946
    test 1072 GeoidKarney('egm84-15.pgm').height(49.0, -103.5) kind 2: -17.031  FAILED, KNOWN, expected -17.032
    test 1073 GeoidKarney('egm84-15.pgm').height(49.0, -86.5) kind 2: -37.962
    test 1074 GeoidKarney('egm84-15.pgm').height(49.0, -69.5) kind 2: -26.493  FAILED, KNOWN, expected -26.492
    test 1075 GeoidKarney('egm84-15.pgm').height(33.0, -120.5) kind 2: -39.543
    test 1076 GeoidKarney('egm84-15.pgm').height(33.0, -103.5) kind 2: -22.557  FAILED, KNOWN, expected -22.556
    test 1077 GeoidKarney('egm84-15.pgm').height(33.0, -86.5) kind 2: -28.710
    test 1078 GeoidKarney('egm84-15.pgm').height(33.0, -69.5) kind 2: -46.590

    test 1079 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.115669
    test 1080 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps mean (of 210 total): 0.010307
    test 1081 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps stdev (of 210 total): 0.015203
    test 1082 GeoidKarney('egm84-15.pgm').toStr: GeoidKarney('egm84-15.pgm'): lowerleft(-90.0, -180.0, -29.712), upperright(90.0, 180.0, 13.098), center(0.0, 0.0, 18.33), highest(-4.5, 148.75, 81.33), lowest(4.75, 79.25, -107.34)

    test 1083 closed: True
    test 1084 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1085 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1086 GeoidKarney('egm84-15.pgm').height(-76.981, 34.17) kind 3: 11.729
    test 1087 GeoidKarney('egm84-15.pgm').height(79.695, 88.806) kind 3: 0.271  FAILED, KNOWN, expected 0.270
    test 1088 GeoidKarney('egm84-15.pgm').height(-15.245, 168.748) kind 3: 67.074
    test 1089 GeoidKarney('egm84-15.pgm').height(-19.379, 15.855) kind 3: 25.345  FAILED, KNOWN, expected 25.344
    test 1090 GeoidKarney('egm84-15.pgm').height(43.378, -130.552) kind 3: -28.919
    test 1091 GeoidKarney('egm84-15.pgm').height(-16.075, 21.795) kind 3: 14.386
    test 1092 GeoidKarney('egm84-15.pgm').height(-11.256, -73.75) kind 3: 30.699  FAILED, KNOWN, expected 30.700
    test 1093 GeoidKarney('egm84-15.pgm').height(69.017, -15.921) kind 3: 62.226  FAILED, KNOWN, expected 62.225
    test 1094 GeoidKarney('egm84-15.pgm').height(2.221, 139.739) kind 3: 70.222
    test 1095 GeoidKarney('egm84-15.pgm').height(-9.097, 119.142) kind 3: 34.334  FAILED, KNOWN, expected 34.336
    test 1096 GeoidKarney('egm84-15.pgm').height(-28.524, -22.192) kind 3: 8.206
    test 1097 GeoidKarney('egm84-15.pgm').height(12.272, -136.424) kind 3: -20.073  FAILED, KNOWN, expected -20.074
    test 1098 GeoidKarney('egm84-15.pgm').height(-15.203, -85.604) kind 3: -3.129
    test 1099 GeoidKarney('egm84-15.pgm').height(-63.736, -77.17) kind 3: -3.216  FAILED, KNOWN, expected -3.217
    test 1100 GeoidKarney('egm84-15.pgm').height(-48.771, -90.102) kind 3: -1.532  FAILED, KNOWN, expected -1.531
    test 1101 GeoidKarney('egm84-15.pgm').height(-0.179, -126.368) kind 3: -16.741  FAILED, KNOWN, expected -16.742
    test 1102 GeoidKarney('egm84-15.pgm').height(1.586, -128.887) kind 3: -15.413  FAILED, KNOWN, expected -15.412
    test 1103 GeoidKarney('egm84-15.pgm').height(-48.781, -2.684) kind 3: 25.079  FAILED, KNOWN, expected 25.078
    test 1104 GeoidKarney('egm84-15.pgm').height(-49.092, 136.862) kind 3: -18.120
    test 1105 GeoidKarney('egm84-15.pgm').height(47.732, 17.552) kind 3: 46.225  FAILED, KNOWN, expected 46.224
    test 1106 GeoidKarney('egm84-15.pgm').height(-49.11, 85.706) kind 3: 18.649
    test 1107 GeoidKarney('egm84-15.pgm').height(-49.162, 40.321) kind 3: 44.763  FAILED, KNOWN, expected 44.764
    test 1108 GeoidKarney('egm84-15.pgm').height(3.498, 158.118) kind 3: 51.090  FAILED, KNOWN, expected 51.089
    test 1109 GeoidKarney('egm84-15.pgm').height(-35.616, 122.648) kind 3: -34.470  FAILED, KNOWN, expected -34.471
    test 1110 GeoidKarney('egm84-15.pgm').height(56.598, -96.114) kind 3: -39.125  FAILED, KNOWN, expected -39.124
    test 1111 GeoidKarney('egm84-15.pgm').height(-31.85, 149.121) kind 3: 28.142
    test 1112 GeoidKarney('egm84-15.pgm').height(-26.569, -177.792) kind 3: 49.620  FAILED, KNOWN, expected 49.619
    test 1113 GeoidKarney('egm84-15.pgm').height(76.735, -65.753) kind 3: 22.576  FAILED, KNOWN, expected 22.575
    test 1114 GeoidKarney('egm84-15.pgm').height(-21.404, -122.268) kind 3: -6.893
    test 1115 GeoidKarney('egm84-15.pgm').height(-77.133, -65.474) kind 3: -15.013  FAILED, KNOWN, expected -15.012
    test 1116 GeoidKarney('egm84-15.pgm').height(-58.812, 2.276) kind 3: 18.777  FAILED, KNOWN, expected 18.776
    test 1117 GeoidKarney('egm84-15.pgm').height(4.415, 155.683) kind 3: 53.645
    test 1118 GeoidKarney('egm84-15.pgm').height(-28.146, 107.081) kind 3: -39.073  FAILED, KNOWN, expected -39.074
    test 1119 GeoidKarney('egm84-15.pgm').height(-10.551, -126.69) kind 3: -9.645
    test 1120 GeoidKarney('egm84-15.pgm').height(-25.444, -103.337) kind 3: -2.527  FAILED, KNOWN, expected -2.528
    test 1121 GeoidKarney('egm84-15.pgm').height(24.436, 46.159) kind 3: -6.907
    test 1122 GeoidKarney('egm84-15.pgm').height(-72.889, 37.107) kind 3: 21.715  FAILED, KNOWN, expected 21.711
    test 1123 GeoidKarney('egm84-15.pgm').height(-19.629, 13.245) kind 3: 25.612  FAILED, KNOWN, expected 25.611
    test 1124 GeoidKarney('egm84-15.pgm').height(-7.602, 171.265) kind 3: 41.570  FAILED, KNOWN, expected 41.569
    test 1125 GeoidKarney('egm84-15.pgm').height(-45.364, -1.876) kind 3: 23.280
    test 1126 GeoidKarney('egm84-15.pgm').height(-7.292, -69.18) kind 3: 24.502
    test 1127 GeoidKarney('egm84-15.pgm').height(-31.566, -166.689) kind 3: 14.825  FAILED, KNOWN, expected 14.826
    test 1128 GeoidKarney('egm84-15.pgm').height(-82.751, -162.085) kind 3: -45.104
    test 1129 GeoidKarney('egm84-15.pgm').height(-40.7, 99.466) kind 3: -17.252
    test 1130 GeoidKarney('egm84-15.pgm').height(48.676, 39.69) kind 3: 12.972
    test 1131 GeoidKarney('egm84-15.pgm').height(74.817, -78.404) kind 3: 4.777  FAILED, KNOWN, expected 4.776
    test 1132 GeoidKarney('egm84-15.pgm').height(-81.032, -63.865) kind 3: -23.578  FAILED, KNOWN, expected -23.577
    test 1133 GeoidKarney('egm84-15.pgm').height(74.022, 9.432) kind 3: 43.886  FAILED, KNOWN, expected 43.885
    test 1134 GeoidKarney('egm84-15.pgm').height(-75.071, 17.579) kind 3: 17.071  FAILED, KNOWN, expected 17.072
    test 1135 GeoidKarney('egm84-15.pgm').height(-12.546, -54.851) kind 3: -6.643
    test 1136 GeoidKarney('egm84-15.pgm').height(-13.621, 42.408) kind 3: -23.326  FAILED, KNOWN, expected -23.325
    test 1137 GeoidKarney('egm84-15.pgm').height(-2.266, -91.951) kind 3: -10.699  FAILED, KNOWN, expected -10.698
    test 1138 GeoidKarney('egm84-15.pgm').height(-18.672, 42.547) kind 3: -10.268  FAILED, KNOWN, expected -10.265
    test 1139 GeoidKarney('egm84-15.pgm').height(-41.44, 157.413) kind 3: 0.690  FAILED, KNOWN, expected 0.689
    test 1140 GeoidKarney('egm84-15.pgm').height(53.686, -79.375) kind 3: -43.759  FAILED, KNOWN, expected -43.758
    test 1141 GeoidKarney('egm84-15.pgm').height(39.26, -30.351) kind 3: 57.553  FAILED, KNOWN, expected 57.554
    test 1142 GeoidKarney('egm84-15.pgm').height(-51.699, -141.493) kind 3: -16.937  FAILED, KNOWN, expected -16.936
    test 1143 GeoidKarney('egm84-15.pgm').height(36.585, 4.515) kind 3: 45.291  FAILED, KNOWN, expected 45.295
    test 1144 GeoidKarney('egm84-15.pgm').height(39.642, -54.659) kind 3: -13.585  FAILED, KNOWN, expected -13.586
    test 1145 GeoidKarney('egm84-15.pgm').height(59.761, 166.567) kind 3: 11.467  FAILED, KNOWN, expected 11.468
    test 1146 GeoidKarney('egm84-15.pgm').height(51.83, 13.357) kind 3: 42.092
    test 1147 GeoidKarney('egm84-15.pgm').height(-36.531, -175.431) kind 3: 22.830
    test 1148 GeoidKarney('egm84-15.pgm').height(-37.08, 125.264) kind 3: -32.302
    test 1149 GeoidKarney('egm84-15.pgm').height(-68.651, 92.732) kind 3: 9.228
    test 1150 GeoidKarney('egm84-15.pgm').height(35.087, 45.336) kind 3: 5.966  FAILED, KNOWN, expected 5.965
    test 1151 GeoidKarney('egm84-15.pgm').height(-61.356, -169.379) kind 3: -45.012  FAILED, KNOWN, expected -45.013
    test 1152 GeoidKarney('egm84-15.pgm').height(-36.955, 179.12) kind 3: 21.118
    test 1153 GeoidKarney('egm84-15.pgm').height(10.248, -6.714) kind 3: 30.497
    test 1154 GeoidKarney('egm84-15.pgm').height(36.868, 84.602) kind 3: -40.397  FAILED, KNOWN, expected -40.396
    test 1155 GeoidKarney('egm84-15.pgm').height(28.637, 88.933) kind 3: -31.701  FAILED, KNOWN, expected -31.704
    test 1156 GeoidKarney('egm84-15.pgm').height(54.811, -99.968) kind 3: -32.276  FAILED, KNOWN, expected -32.277
    test 1157 GeoidKarney('egm84-15.pgm').height(7.611, 145.911) kind 3: 61.024
    test 1158 GeoidKarney('egm84-15.pgm').height(59.412, 170.102) kind 3: 4.996  FAILED, KNOWN, expected 4.994
    test 1159 GeoidKarney('egm84-15.pgm').height(-61.469, 126.144) kind 3: -30.238  FAILED, KNOWN, expected -30.237
    test 1160 GeoidKarney('egm84-15.pgm').height(18.514, -137.083) kind 3: -26.006
    test 1161 GeoidKarney('egm84-15.pgm').height(7.854, -126.799) kind 3: -29.283
    test 1162 GeoidKarney('egm84-15.pgm').height(47.489, 134.183) kind 3: 22.393  FAILED, KNOWN, expected 22.394
    test 1163 GeoidKarney('egm84-15.pgm').height(-34.144, -11.922) kind 3: 17.550
    test 1164 GeoidKarney('egm84-15.pgm').height(-58.389, 117.458) kind 3: -20.623  FAILED, KNOWN, expected -20.622
    test 1165 GeoidKarney('egm84-15.pgm').height(9.773, 95.846) kind 3: -41.482  FAILED, KNOWN, expected -41.484
    test 1166 GeoidKarney('egm84-15.pgm').height(-53.12, 136.994) kind 3: -20.968
    test 1167 GeoidKarney('egm84-15.pgm').height(-50.35, 0.075) kind 3: 25.567  FAILED, KNOWN, expected 25.568
    test 1168 GeoidKarney('egm84-15.pgm').height(31.438, -170.879) kind 3: -8.581
    test 1169 GeoidKarney('egm84-15.pgm').height(37.541, -153.024) kind 3: -18.330  FAILED, KNOWN, expected -18.329
    test 1170 GeoidKarney('egm84-15.pgm').height(27.586, 2.444) kind 3: 25.000  FAILED, KNOWN, expected 25.001
    test 1171 GeoidKarney('egm84-15.pgm').height(-26.139, -106.201) kind 3: -2.941  FAILED, KNOWN, expected -2.940
    test 1172 GeoidKarney('egm84-15.pgm').height(-33.426, -14.84) kind 3: 18.229  FAILED, KNOWN, expected 18.228
    test 1173 GeoidKarney('egm84-15.pgm').height(39.586, -153.019) kind 3: -16.507
    test 1174 GeoidKarney('egm84-15.pgm').height(-60.79, -2.578) kind 3: 14.275
    test 1175 GeoidKarney('egm84-15.pgm').height(-20.131, 21.975) kind 3: 16.853  FAILED, KNOWN, expected 16.852
    test 1176 GeoidKarney('egm84-15.pgm').height(75.649, 99.921) kind 3: -6.872
    test 1177 GeoidKarney('egm84-15.pgm').height(-0.385, -23.788) kind 3: 9.005  FAILED, KNOWN, expected 9.006
    test 1178 GeoidKarney('egm84-15.pgm').height(-51.56, -50.327) kind 3: 6.294  FAILED, KNOWN, expected 6.296
    test 1179 GeoidKarney('egm84-15.pgm').height(-43.129, -167.271) kind 3: -1.482  FAILED, KNOWN, expected -1.481
    test 1180 GeoidKarney('egm84-15.pgm').height(46.374, 71.948) kind 3: -40.916  FAILED, KNOWN, expected -40.915
    test 1181 GeoidKarney('egm84-15.pgm').height(-22.783, 140.657) kind 3: 37.495
    test 1182 GeoidKarney('egm84-15.pgm').height(-12.056, 122.804) kind 3: 32.255  FAILED, KNOWN, expected 32.258
    test 1183 GeoidKarney('egm84-15.pgm').height(30.127, 94.738) kind 3: -41.528  FAILED, KNOWN, expected -41.529
    test 1184 GeoidKarney('egm84-15.pgm').height(46.296, -174.479) kind 3: -1.376  FAILED, KNOWN, expected -1.377
    test 1185 GeoidKarney('egm84-15.pgm').height(34.99, 15.052) kind 3: 35.279  FAILED, KNOWN, expected 35.280
    test 1186 GeoidKarney('egm84-15.pgm').height(-51.287, 90.565) kind 3: 12.958
    test 1187 GeoidKarney('egm84-15.pgm').height(34.217, 141.302) kind 3: 18.313  FAILED, KNOWN, expected 18.307
    test 1188 GeoidKarney('egm84-15.pgm').height(-40.423, -142.787) kind 3: -10.400
    test 1189 GeoidKarney('egm84-15.pgm').height(-17.854, -170.216) kind 3: 28.640  FAILED, KNOWN, expected 28.638
    test 1190 GeoidKarney('egm84-15.pgm').height(47.803, 112.701) kind 3: -24.059
    test 1191 GeoidKarney('egm84-15.pgm').height(-23.276, 133.454) kind 3: 18.806
    test 1192 GeoidKarney('egm84-15.pgm').height(-26.884, -36.571) kind 3: -6.819  FAILED, KNOWN, expected -6.820
    test 1193 GeoidKarney('egm84-15.pgm').height(-37.106, 31.128) kind 3: 31.486
    test 1194 GeoidKarney('egm84-15.pgm').height(-75.363, -173.674) kind 3: -62.024
    test 1195 GeoidKarney('egm84-15.pgm').height(-18.305, 69.016) kind 3: -24.247  FAILED, KNOWN, expected -24.248
    test 1196 GeoidKarney('egm84-15.pgm').height(39.527, 23.58) kind 3: 43.255
    test 1197 GeoidKarney('egm84-15.pgm').height(68.903, 30.97) kind 3: 18.499  FAILED, KNOWN, expected 18.498
    test 1198 GeoidKarney('egm84-15.pgm').height(53.937, 168.318) kind 3: 4.069  FAILED, KNOWN, expected 4.067
    test 1199 GeoidKarney('egm84-15.pgm').height(-38.6, 64.812) kind 3: 25.455  FAILED, KNOWN, expected 25.454
    test 1200 GeoidKarney('egm84-15.pgm').height(-41.396, -69.739) kind 3: 26.655  FAILED, KNOWN, expected 26.657
    test 1201 GeoidKarney('egm84-15.pgm').height(50.158, 72.319) kind 3: -31.967  FAILED, KNOWN, expected -31.966
    test 1202 GeoidKarney('egm84-15.pgm').height(27.692, 176.153) kind 3: -4.416  FAILED, KNOWN, expected -4.415
    test 1203 GeoidKarney('egm84-15.pgm').height(-48.419, 170.454) kind 3: -6.741
    test 1204 GeoidKarney('egm84-15.pgm').height(-65.346, -124.976) kind 3: -34.902  FAILED, KNOWN, expected -34.900
    test 1205 GeoidKarney('egm84-15.pgm').height(-51.873, 167.266) kind 3: -14.223
    test 1206 GeoidKarney('egm84-15.pgm').height(-7.263, 84.308) kind 3: -79.317
    test 1207 GeoidKarney('egm84-15.pgm').height(-1.461, -105.458) kind 3: -16.162  FAILED, KNOWN, expected -16.163
    test 1208 GeoidKarney('egm84-15.pgm').height(7.684, 161.873) kind 3: 36.288  FAILED, KNOWN, expected 36.287
    test 1209 GeoidKarney('egm84-15.pgm').height(-31.475, -158.52) kind 3: 4.067  FAILED, KNOWN, expected 4.068
    test 1210 GeoidKarney('egm84-15.pgm').height(-36.187, 62.917) kind 3: 24.406  FAILED, KNOWN, expected 24.407
    test 1211 GeoidKarney('egm84-15.pgm').height(16.003, 141.687) kind 3: 53.053  FAILED, KNOWN, expected 53.054
    test 1212 GeoidKarney('egm84-15.pgm').height(30.182, 86.261) kind 3: -30.621  FAILED, KNOWN, expected -30.622
    test 1213 GeoidKarney('egm84-15.pgm').height(-77.304, 159.498) kind 3: -53.540
    test 1214 GeoidKarney('egm84-15.pgm').height(39.536, 139.795) kind 3: 36.262
    test 1215 GeoidKarney('egm84-15.pgm').height(8.569, 134.618) kind 3: 64.367  FAILED, KNOWN, expected 64.369
    test 1216 GeoidKarney('egm84-15.pgm').height(14.473, 90.596) kind 3: -61.301  FAILED, KNOWN, expected -61.300
    test 1217 GeoidKarney('egm84-15.pgm').height(-13.138, -99.589) kind 3: -8.000  FAILED, KNOWN, expected -7.999
    test 1218 GeoidKarney('egm84-15.pgm').height(34.212, -26.307) kind 3: 41.479  FAILED, KNOWN, expected 41.477
    test 1219 GeoidKarney('egm84-15.pgm').height(21.89, 76.371) kind 3: -59.875  FAILED, KNOWN, expected -59.876
    test 1220 GeoidKarney('egm84-15.pgm').height(29.793, 120.487) kind 3: 8.404
    test 1221 GeoidKarney('egm84-15.pgm').height(15.724, 122.714) kind 3: 39.154  FAILED, KNOWN, expected 39.152
    test 1222 GeoidKarney('egm84-15.pgm').height(-66.208, -78.499) kind 3: -7.076
    test 1223 GeoidKarney('egm84-15.pgm').height(-39.507, 55.809) kind 3: 33.179  FAILED, KNOWN, expected 33.178
    test 1224 GeoidKarney('egm84-15.pgm').height(28.159, 51.476) kind 3: -23.832
    test 1225 GeoidKarney('egm84-15.pgm').height(-36.207, 120.205) kind 3: -38.206
    test 1226 GeoidKarney('egm84-15.pgm').height(30.575, -99.998) kind 3: -22.144  FAILED, KNOWN, expected -22.142
    test 1227 GeoidKarney('egm84-15.pgm').height(-16.993, 37.136) kind 3: -13.763  FAILED, KNOWN, expected -13.765
    test 1228 GeoidKarney('egm84-15.pgm').height(-11.477, 12.039) kind 3: 16.899  FAILED, KNOWN, expected 16.898
    test 1229 GeoidKarney('egm84-15.pgm').height(30.428, -144.765) kind 3: -22.475  FAILED, KNOWN, expected -22.474
    test 1230 GeoidKarney('egm84-15.pgm').height(-17.44, -92.424) kind 3: -4.717  FAILED, KNOWN, expected -4.718
    test 1231 GeoidKarney('egm84-15.pgm').height(40.203, 143.43) kind 3: 16.635
    test 1232 GeoidKarney('egm84-15.pgm').height(-37.098, -106.574) kind 3: -9.011  FAILED, KNOWN, expected -9.012
    test 1233 GeoidKarney('egm84-15.pgm').height(54.62, -68.413) kind 3: -23.544  FAILED, KNOWN, expected -23.543
    test 1234 GeoidKarney('egm84-15.pgm').height(-31.633, 148.182) kind 3: 26.236
    test 1235 GeoidKarney('egm84-15.pgm').height(-56.07, -141.407) kind 3: -21.955  FAILED, KNOWN, expected -21.953
    test 1236 GeoidKarney('egm84-15.pgm').height(-8.195, -52.691) kind 3: -17.959
    test 1237 GeoidKarney('egm84-15.pgm').height(17.851, 24.749) kind 3: 9.078
    test 1238 GeoidKarney('egm84-15.pgm').height(0.349, -108.333) kind 3: -19.157  FAILED, KNOWN, expected -19.158
    test 1239 GeoidKarney('egm84-15.pgm').height(15.038, 126.191) kind 3: 46.776
    test 1240 GeoidKarney('egm84-15.pgm').height(-21.111, -123.696) kind 3: -8.055
    test 1241 GeoidKarney('egm84-15.pgm').height(30.947, 173.002) kind 3: -7.695  FAILED, KNOWN, expected -7.696
    test 1242 GeoidKarney('egm84-15.pgm').height(-10.698, -144.091) kind 3: -1.048  FAILED, KNOWN, expected -1.049
    test 1243 GeoidKarney('egm84-15.pgm').height(-29.412, 124.753) kind 3: -16.082  FAILED, KNOWN, expected -16.081
    test 1244 GeoidKarney('egm84-15.pgm').height(38.224, -137.189) kind 3: -35.426  FAILED, KNOWN, expected -35.427
    test 1245 GeoidKarney('egm84-15.pgm').height(36.064, -132.409) kind 3: -38.648
    test 1246 GeoidKarney('egm84-15.pgm').height(29.975, 178.076) kind 3: -5.519
    test 1247 GeoidKarney('egm84-15.pgm').height(-21.346, 169.26) kind 3: 53.430  FAILED, KNOWN, expected 53.431
    test 1248 GeoidKarney('egm84-15.pgm').height(49.282, -152.934) kind 3: 1.978  FAILED, KNOWN, expected 1.979
    test 1249 GeoidKarney('egm84-15.pgm').height(16.349, -99.962) kind 3: -13.194  FAILED, KNOWN, expected -13.197
    test 1250 GeoidKarney('egm84-15.pgm').height(-14.293, -167.34) kind 3: 18.945
    test 1251 GeoidKarney('egm84-15.pgm').height(47.166, -38.523) kind 3: 45.185  FAILED, KNOWN, expected 45.187
    test 1252 GeoidKarney('egm84-15.pgm').height(-58.911, 114.347) kind 3: -17.146  FAILED, KNOWN, expected -17.145
    test 1253 GeoidKarney('egm84-15.pgm').height(-9.055, 111.294) kind 3: 13.145  FAILED, KNOWN, expected 13.146
    test 1254 GeoidKarney('egm84-15.pgm').height(18.391, 29.692) kind 3: 4.932  FAILED, KNOWN, expected 4.933
    test 1255 GeoidKarney('egm84-15.pgm').height(-15.074, 22.153) kind 3: 12.327  FAILED, KNOWN, expected 12.326
    test 1256 GeoidKarney('egm84-15.pgm').height(-4.235, 62.001) kind 3: -60.029  FAILED, KNOWN, expected -60.030
    test 1257 GeoidKarney('egm84-15.pgm').height(15.171, -86.583) kind 3: 3.107  FAILED, KNOWN, expected 3.110
    test 1258 GeoidKarney('egm84-15.pgm').height(79.254, 112.116) kind 3: -2.741
    test 1259 GeoidKarney('egm84-15.pgm').height(15.947, 156.093) kind 3: 32.086  FAILED, KNOWN, expected 32.085
    test 1260 GeoidKarney('egm84-15.pgm').height(68.371, -177.382) kind 3: 2.060
    test 1261 GeoidKarney('egm84-15.pgm').height(-41.931, -72.093) kind 3: 22.916
    test 1262 GeoidKarney('egm84-15.pgm').height(-1.193, -143.133) kind 3: 5.519
    test 1263 GeoidKarney('egm84-15.pgm').height(-37.006, 154.513) kind 3: 11.021  FAILED, KNOWN, expected 11.020
    test 1264 GeoidKarney('egm84-15.pgm').height(-22.148, 9.938) kind 3: 22.171
    test 1265 GeoidKarney('egm84-15.pgm').height(24.329, 109.044) kind 3: -22.945  FAILED, KNOWN, expected -22.944
    test 1266 GeoidKarney('egm84-15.pgm').height(-54.878, 114.691) kind 3: -17.579  FAILED, KNOWN, expected -17.580
    test 1267 GeoidKarney('egm84-15.pgm').height(45.601, -80.458) kind 3: -35.737  FAILED, KNOWN, expected -35.738
    test 1268 GeoidKarney('egm84-15.pgm').height(2.372, 58.974) kind 3: -61.040
    test 1269 GeoidKarney('egm84-15.pgm').height(15.937, 165.854) kind 3: 20.906  FAILED, KNOWN, expected 20.907
    test 1270 GeoidKarney('egm84-15.pgm').height(4.889, -24.213) kind 3: 13.874
    test 1271 GeoidKarney('egm84-15.pgm').height(-11.392, 179.558) kind 3: 40.928  FAILED, KNOWN, expected 40.929
    test 1272 GeoidKarney('egm84-15.pgm').height(58.246, 4.862) kind 3: 43.191
    test 1273 GeoidKarney('egm84-15.pgm').height(34.302, -109.109) kind 3: -22.006
    test 1274 GeoidKarney('egm84-15.pgm').height(-58.196, 117.306) kind 3: -20.375
    test 1275 GeoidKarney('egm84-15.pgm').height(44.5, 173.769) kind 3: -7.851  FAILED, KNOWN, expected -7.852
    test 1276 GeoidKarney('egm84-15.pgm').height(-28.863, -139.775) kind 3: -8.675  FAILED, KNOWN, expected -8.674
    test 1277 GeoidKarney('egm84-15.pgm').height(19.507, -96.099) kind 3: -14.116  FAILED, KNOWN, expected -14.117
    test 1278 GeoidKarney('egm84-15.pgm').height(-42.488, -73.907) kind 3: 17.252  FAILED, KNOWN, expected 17.251
    test 1279 GeoidKarney('egm84-15.pgm').height(46.138, -141.429) kind 3: -19.435  FAILED, KNOWN, expected -19.436
    test 1280 GeoidKarney('egm84-15.pgm').height(60.507, 93.743) kind 3: -31.331  FAILED, KNOWN, expected -31.330
    test 1281 GeoidKarney('egm84-15.pgm').height(26.219, -145.434) kind 3: -17.091  FAILED, KNOWN, expected -17.090
    test 1282 GeoidKarney('egm84-15.pgm').height(-28.687, 3.37) kind 3: 24.184
    test 1283 GeoidKarney('egm84-15.pgm').height(-15.008, 117.45) kind 3: 6.142
    test 1284 GeoidKarney('egm84-15.pgm').height(40.71, 144.095) kind 3: 11.693
    test 1285 GeoidKarney('egm84-15.pgm').height(20.823, -173.611) kind 3: 6.839  FAILED, KNOWN, expected 6.840
    test 1286 GeoidKarney('egm84-15.pgm').height(16.776, -3.009) kind 3: 31.298
    test 1287 GeoidKarney('egm84-15.pgm').height(41.0, -95.0) kind 3: -31.952
    test 1288 GeoidKarney('egm84-15.pgm').height(49.0, -120.5) kind 3: -14.946
    test 1289 GeoidKarney('egm84-15.pgm').height(49.0, -103.5) kind 3: -17.032
    test 1290 GeoidKarney('egm84-15.pgm').height(49.0, -86.5) kind 3: -37.962
    test 1291 GeoidKarney('egm84-15.pgm').height(49.0, -69.5) kind 3: -26.492
    test 1292 GeoidKarney('egm84-15.pgm').height(33.0, -120.5) kind 3: -39.543
    test 1293 GeoidKarney('egm84-15.pgm').height(33.0, -103.5) kind 3: -22.556
    test 1294 GeoidKarney('egm84-15.pgm').height(33.0, -86.5) kind 3: -28.710
    test 1295 GeoidKarney('egm84-15.pgm').height(33.0, -69.5) kind 3: -46.590

    test 1296 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.005459
    test 1297 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps mean (of 210 total): 0.000736
    test 1298 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps stdev (of 210 total): 0.000728
    test 1299 GeoidKarney('egm84-15.pgm').toStr: GeoidKarney('egm84-15.pgm'): lowerleft(-90.0, -180.0, -29.712), upperright(90.0, 180.0, 13.098), center(0.0, 0.0, 18.33), highest(-4.5, 148.75, 81.33), lowest(4.75, 79.25, -107.34)

    test 1300 closed: True
    test 1301 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1302 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)

    213 tests skipped (639): no scipy

    12 tests skipped (651): no scipy

    778 of 1302 testGeoids.py tests (59.8%) FAILED, ALL KNOWN, 651 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 9.254 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testGreatCircle.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.F_D from .dms by testGreatCircle.py line 40
# lazily imported pygeodesy.F_DMS from .dms by testGreatCircle.py line 40
# lazily imported pygeodesy.classname from .named by testGreatCircle.py line 40
# lazily imported pygeodesy.bearingDMS from .dms by testGreatCircle.py line 40
# lazily imported pygeodesy.CrossError from .errors by testGreatCircle.py line 40
# lazily imported pygeodesy.crosserrors from .errors by testGreatCircle.py line 40
# lazily imported pygeodesy.sphericalNvector by testGreatCircle.py line 190
# lazily imported pygeodesy.sphericalTrigonometry by testGreatCircle.py line 190

    testing testGreatCircle.py 23.05.05 isLazy=3

    testGreatCircle(pygeodesy.sphericalNvector, 24.06.11)
    test 1 InitialBearingSameLocations: 0.0
    test 2 InitialBearingEqualLocations: 0.0
    test 3 FinalBearingSameLocations: 180.0
    test 4 FinalBearingEqualLocations: 180.0
    test 5 FinalBearingCrossError: point (LatLon(43°55′51.28″N, 072°03′13.72″W)) or other (LatLon(43°55′51.28″N, 072°03′13.72″W)): coincident
    test 6 DistanceSameLocations: 0.0
    test 7 DistanceEqualLocations: 0.0
    test 8 DistanceEiffelToVersailles: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 9 DistanceVersaillesToEiffel: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 10 InitialBearingEiffelToVersailles: 245.13460297
    test 11 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 12 InitialBearingVersaillesToEiffel: 65.003253951
    test 13 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 14 FinalBearingEiffelToVersailles: 245.00325395
    test 15 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 16 FinalBearingVersaillesToEiffel: 65.134602969
    test 17 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 18 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 19 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 20 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 21 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 22 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 23 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 24 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 25 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 26 Intersection: 48.83569095°N, 002.221252031°E
    test 27 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 28 CrossTrackDistance200m+90°: 200.0
    test 29 CrossTrackDistance200m+270°: -200.0
    test 30 CrossTrackDistanceCloseToZero: 0.0000000

    testGreatCircle(pygeodesy.sphericalTrigonometry, 24.06.21)
    test 31 InitialBearingSameLocations: 0.0
    test 32 InitialBearingEqualLocations: 0.0
    test 33 FinalBearingSameLocations: 180.0
    test 34 FinalBearingEqualLocations: 180.0
    test 35 FinalBearingCrossError: point (LatLon(43°55′51.28″N, 072°03′13.72″W)), other (LatLon(43°55′51.28″N, 072°03′13.72″W)) or wrap (False): coincident
    test 36 DistanceSameLocations: 0.0
    test 37 DistanceEqualLocations: 0.0
    test 38 DistanceEiffelToVersailles: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 39 DistanceVersaillesToEiffel: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 40 InitialBearingEiffelToVersailles: 245.13460297
    test 41 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 42 InitialBearingVersaillesToEiffel: 65.003253951
    test 43 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 44 FinalBearingEiffelToVersailles: 245.00325395
    test 45 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 46 FinalBearingVersaillesToEiffel: 65.134602969
    test 47 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 48 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 49 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 50 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 51 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 52 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 53 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 54 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 55 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 56 Intersection: 48.83569095°N, 002.221252031°E
    test 57 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 58 CrossTrackDistance200m+90°: 200.0
    test 59 CrossTrackDistance200m+270°: -200.0
    test 60 CrossTrackDistanceCloseToZero: 0.0000000

    10 of 60 testGreatCircle.py tests (16.7%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 4.794 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testHausdorff.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Datums from .datums by testHausdorff.py line 12
# lazily imported pygeodesy.fstr from .streprs by testHausdorff.py line 12
# lazily imported pygeodesy.hausdorff_ from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffCosineAndoyerLambert from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffCosineForsytheAndoyerLambert from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffDegrees from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffDistanceTo from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffRadians from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffCosineLaw from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffEquirectangular from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffEuclidean from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffExact from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffFlatLocal from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffFlatPolar from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffHaversine from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffHubeny from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffKarney from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffThomas from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffVincentys from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.LatLon_ from .points by testHausdorff.py line 12
# lazily imported pygeodesy.randomrangenerator from .hausdorff by testHausdorff.py line 12

    testing testHausdorff.py 23.03.27 isLazy=3
    test 1 randomrange[0]: ()
    test 2 randomrange[1]: (0,)
    test 3 randomrange[2]: (0, 1)
    test 4 randomrange[8]: (1, 4, 2, 6, 0, 3, 5, 7)
    test 5 randomrange[32]: (11, 6, 30, 28, 21, 9, 13, 26, 4, 29, 8, 27, 31, 15, 1, 24, 0, 25, 22, 2, 20, 17, 3, 23, 12, 19, 18, 14, 7, 10, 16, 5)
    test 6 randomrange[128]: (122, 62, 14, 24, 65, 57, 75, 84, 42, 32, 82, 43, 13, 34, 53, 104, 71, 22, 76, 15, 108, 113, 52, 79, 112, 54, 90, 106, 10, 87, 115, 123, 119, 120, 48, 61, 39, 19, 31, 94, 124, 98, 96, 3, 101, 25, 118, 30, 99, 105, 92, 66, 126, 114, 23, 117, 72, 67, 73, 64, 68, 50, 5, 74, 51, 9, 17, 21, 80, 95, 41, 37, 2, 11, 55, 127, 38, 85, 81, 109, 36, 121, 6, 102, 12, 1, 93, 91, 83, 16, 116, 103, 70, 56, 89, 35, 88, 86, 27, 20, 44, 110, 63, 28, 8, 4, 18, 45, 78, 100, 60, 125, 58, 33, 0, 7, 40, 59, 46, 69, 26, 77, 107, 47, 49, 97, 111, 29)
# lazily imported pygeodesy.booleans by iters.py line 503
    test 7 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, 18.16111)
    test 8 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, 17.30667)
    test 9 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, 18.16111)
    test 10 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, 17.30667)
    test 11 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, None)
    test 12 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, None)
    test 13 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, None)
    test 14 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, None)
    test 15 copy(HausdorffDegrees_): (<class '__main__.HausdorffDegrees_'>, True)
    test 16 HausdorffDegrees_.copy(): (<class '__main__.HausdorffDegrees_'>, True)
    test 17 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, 0.31697)
    test 18 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, 0.30206)
    test 19 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, 0.31697)
    test 20 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, 0.30206)
    test 21 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, None)
    test 22 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, None)
    test 23 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, None)
    test 24 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, None)
    test 25 copy(HausdorffRadians_): (<class '__main__.HausdorffRadians_'>, True)
    test 26 HausdorffRadians_.copy(): (<class '__main__.HausdorffRadians_'>, True)
    test 27 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 90, 0.21184)
    test 28 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 150, 0.20084)
    test 29 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 90, 0.21184)
    test 30 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 150, 0.20084)
    test 31 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 90, None)
    test 32 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 150, None)
    test 33 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 90, None)
    test 34 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 150, None)
    test 35 copy(HausdorffCosineAndoyerLambert): (<class 'pygeodesy.hausdorff.HausdorffCosineAndoyerLambert'>, True)
    test 36 HausdorffCosineAndoyerLambert.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineAndoyerLambert'>, True)
    test 37 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 90, 0.21184)
    test 38 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 150, 0.20084)
    test 39 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 90, 0.21184)
    test 40 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 150, 0.20084)
    test 41 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 90, None)
    test 42 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 150, None)
    test 43 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 90, None)
    test 44 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 150, None)
    test 45 copy(HausdorffCosineForsytheAndoyerLambert): (<class 'pygeodesy.hausdorff.HausdorffCosineForsytheAndoyerLambert'>, True)
    test 46 HausdorffCosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineForsytheAndoyerLambert'>, True)
    test 47 HausdorffCosineLaw (meter): (0.50097, 35, 3, 90, 0.212)
    test 48 HausdorffCosineLaw (meter): (0.50097, 35, 3, 150, 0.20099)
    test 49 HausdorffCosineLaw (meter): (0.50097, 35, 3, 90, 0.212)
    test 50 HausdorffCosineLaw (meter): (0.50097, 35, 3, 150, 0.20099)
    test 51 HausdorffCosineLaw (meter): (0.50097, 35, 3, 90, None)
    test 52 HausdorffCosineLaw (meter): (0.50097, 35, 3, 150, None)
    test 53 HausdorffCosineLaw (meter): (0.50097, 35, 3, 90, None)
    test 54 HausdorffCosineLaw (meter): (0.50097, 35, 3, 150, None)
    test 55 copy(HausdorffCosineLaw): (<class 'pygeodesy.hausdorff.HausdorffCosineLaw'>, True)
    test 56 HausdorffCosineLaw.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineLaw'>, True)
    test 57 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 90, 0.05965)
    test 58 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 150, 0.05532)
    test 59 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 90, 0.05965)
    test 60 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 150, 0.05532)
    test 61 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 90, None)
    test 62 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 150, None)
    test 63 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 90, None)
    test 64 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 150, None)
    test 65 copy(HausdorffEquirectangular): (<class 'pygeodesy.hausdorff.HausdorffEquirectangular'>, True)
    test 66 HausdorffEquirectangular.copy(): (<class 'pygeodesy.hausdorff.HausdorffEquirectangular'>, True)
    test 67 HausdorffEuclidean (meter): (0.52803, 56, 51, 90, 0.22571)
    test 68 HausdorffEuclidean (meter): (0.52803, 56, 51, 150, 0.21579)
    test 69 HausdorffEuclidean (meter): (0.52803, 56, 51, 90, 0.22571)
    test 70 HausdorffEuclidean (meter): (0.52803, 56, 51, 150, 0.21579)
    test 71 HausdorffEuclidean (meter): (0.52803, 56, 51, 90, None)
    test 72 HausdorffEuclidean (meter): (0.52803, 56, 51, 150, None)
    test 73 HausdorffEuclidean (meter): (0.52803, 56, 51, 90, None)
    test 74 HausdorffEuclidean (meter): (0.52803, 56, 51, 150, None)
    test 75 copy(HausdorffEuclidean): (<class 'pygeodesy.hausdorff.HausdorffEuclidean'>, True)
    test 76 HausdorffEuclidean.copy(): (<class 'pygeodesy.hausdorff.HausdorffEuclidean'>, True)
    test 77 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 78 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 79 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 80 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 81 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, None)
    test 82 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, None)
    test 83 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, None)
    test 84 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, None)
    test 85 copy(HausdorffFlatLocal): (<class 'pygeodesy.hausdorff.HausdorffFlatLocal'>, True)
    test 86 HausdorffFlatLocal.copy(): (<class 'pygeodesy.hausdorff.HausdorffFlatLocal'>, True)
    test 87 HausdorffFlatPolar (meter): (0.69043, 4, 31, 90, 0.22286)
    test 88 HausdorffFlatPolar (meter): (0.69043, 4, 31, 150, 0.21318)
    test 89 HausdorffFlatPolar (meter): (0.69043, 4, 31, 90, 0.22286)
    test 90 HausdorffFlatPolar (meter): (0.69043, 4, 31, 150, 0.21318)
    test 91 HausdorffFlatPolar (meter): (0.69043, 4, 31, 90, None)
    test 92 HausdorffFlatPolar (meter): (0.69043, 4, 31, 150, None)
    test 93 HausdorffFlatPolar (meter): (0.69043, 4, 31, 90, None)
    test 94 HausdorffFlatPolar (meter): (0.69043, 4, 31, 150, None)
    test 95 copy(HausdorffFlatPolar): (<class 'pygeodesy.hausdorff.HausdorffFlatPolar'>, True)
    test 96 HausdorffFlatPolar.copy(): (<class 'pygeodesy.hausdorff.HausdorffFlatPolar'>, True)
    test 97 HausdorffHaversine (meter): (0.50097, 35, 3, 90, 0.212)
    test 98 HausdorffHaversine (meter): (0.50097, 35, 3, 150, 0.20099)
    test 99 HausdorffHaversine (meter): (0.50097, 35, 3, 90, 0.212)
    test 100 HausdorffHaversine (meter): (0.50097, 35, 3, 150, 0.20099)
    test 101 HausdorffHaversine (meter): (0.50097, 35, 3, 90, None)
    test 102 HausdorffHaversine (meter): (0.50097, 35, 3, 150, None)
    test 103 HausdorffHaversine (meter): (0.50097, 35, 3, 90, None)
    test 104 HausdorffHaversine (meter): (0.50097, 35, 3, 150, None)
    test 105 copy(HausdorffHaversine): (<class 'pygeodesy.hausdorff.HausdorffHaversine'>, True)
    test 106 HausdorffHaversine.copy(): (<class 'pygeodesy.hausdorff.HausdorffHaversine'>, True)
    test 107 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 108 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 109 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 110 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 111 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, None)
    test 112 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, None)
    test 113 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, None)
    test 114 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, None)
    test 115 copy(HausdorffHubeny): (<class 'pygeodesy.hausdorff.HausdorffHubeny'>, True)
    test 116 HausdorffHubeny.copy(): (<class 'pygeodesy.hausdorff.HausdorffHubeny'>, True)
    test 117 HausdorffThomas (meter): (0.501, 35, 3, 90, 0.21184)
    test 118 HausdorffThomas (meter): (0.501, 35, 3, 150, 0.20084)
    test 119 HausdorffThomas (meter): (0.501, 35, 3, 90, 0.21184)
    test 120 HausdorffThomas (meter): (0.501, 35, 3, 150, 0.20084)
    test 121 HausdorffThomas (meter): (0.501, 35, 3, 90, None)
    test 122 HausdorffThomas (meter): (0.501, 35, 3, 150, None)
    test 123 HausdorffThomas (meter): (0.501, 35, 3, 90, None)
    test 124 HausdorffThomas (meter): (0.501, 35, 3, 150, None)
    test 125 copy(HausdorffThomas): (<class 'pygeodesy.hausdorff.HausdorffThomas'>, True)
    test 126 HausdorffThomas.copy(): (<class 'pygeodesy.hausdorff.HausdorffThomas'>, True)
    test 127 HausdorffVincentys (meter): (0.50097, 35, 3, 90, 0.212)
    test 128 HausdorffVincentys (meter): (0.50097, 35, 3, 150, 0.20099)
    test 129 HausdorffVincentys (meter): (0.50097, 35, 3, 90, 0.212)
    test 130 HausdorffVincentys (meter): (0.50097, 35, 3, 150, 0.20099)
    test 131 HausdorffVincentys (meter): (0.50097, 35, 3, 90, None)
    test 132 HausdorffVincentys (meter): (0.50097, 35, 3, 150, None)
    test 133 HausdorffVincentys (meter): (0.50097, 35, 3, 90, None)
    test 134 HausdorffVincentys (meter): (0.50097, 35, 3, 150, None)
    test 135 copy(HausdorffVincentys): (<class 'pygeodesy.hausdorff.HausdorffVincentys'>, True)
    test 136 HausdorffVincentys.copy(): (<class 'pygeodesy.hausdorff.HausdorffVincentys'>, True)
    test 137 hausdorff_: (40.0, 22, 6, 90, 18.16111)
    test 138 hausdorff_: (48.0, 38, 36, 150, 17.30667)
    test 139 hausdorff_: (40.0, 22, 6, 90, 18.16111)
    test 140 hausdorff_: (48.0, 38, 36, 150, 17.30667)
    test 141 hausdorff_: (40.0, 22, 6, 90, None)
    test 142 hausdorff_: (48.0, 38, 36, 150, None)
    test 143 hausdorff_: (40.0, 22, 6, 90, None)
    test 144 hausdorff_: (48.0, 38, 36, 150, None)
# lazily imported pygeodesy.ellipsoidalNvector by testHausdorff.py line 270
# lazily imported pygeodesy.ellipsoidalVincenty by testHausdorff.py line 270
# lazily imported pygeodesy.sphericalNvector by testHausdorff.py line 270
# lazily imported pygeodesy.sphericalTrigonometry by testHausdorff.py line 270
    test 145 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35982)  FAILED, KNOWN, expected (3195418.34044, 35, 3, 90, 1351164.35981)
    test 146 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 147 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35982)  FAILED, KNOWN, expected (3195418.34044, 35, 3, 90, 1351164.35981)
    test 148 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 149 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 150 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 151 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 152 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 153 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 154 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 155 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 156 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 157 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 158 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 159 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 160 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 161 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 162 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 163 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 164 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 165 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 166 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 167 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 168 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 169 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 170 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 171 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 172 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 173 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 174 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 175 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 176 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 177 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 178 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 179 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 180 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 181 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 182 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 183 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 184 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)

    2 of 184 testHausdorff.py tests (1.1%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 11.764 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testHeights.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Datums from .datums by testHeights.py line 17
# lazily imported pygeodesy.fstr from .streprs by testHeights.py line 17
# lazily imported pygeodesy.HeightError from .heights by testHeights.py line 17
# lazily imported pygeodesy.SciPyError from .errors by testHeights.py line 17
# lazily imported pygeodesy.HeightCubic from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWcosineAndoyerLambert from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWcosineForsytheAndoyerLambert from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWcosineLaw from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWdistanceTo from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWequirectangular from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWeuclidean from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWexact from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWflatLocal from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWflatPolar from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWhaversine from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWhubeny from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWkarney from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWthomas from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWvincentys from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightLinear from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightLSQBiSpline from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightSmoothBiSpline from .heights by testHeights.py line 17

    testing testHeights.py 23.05.14 isLazy=3
    test 1 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 2 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 3 HeightIDWcosineAndoyerLambert(wrap=False): 6.111157919
    test 4 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 5 HeightIDWcosineAndoyerLambert(latlon): True
    test 6 HeightIDWcosineAndoyerLambert(wrap=False): 5.0
    test 7 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 8 HeightIDWcosineAndoyerLambert(latlon): True
    test 9 HeightIDWcosineAndoyerLambert(wrap=False): (6.111157919, 5.0,)
    test 10 HeightIDWcosineAndoyerLambert(tuple): <class 'tuple'>
    test 11 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 12 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 13 HeightIDWcosineAndoyerLambert(wrap=False): [6.111157919, 5.0]
    test 14 HeightIDWcosineAndoyerLambert(list: <class 'list'>
    test 15 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 16 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 17 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 18 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 19 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 20 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 6.111158354
    test 21 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 22 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 23 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 5.0
    test 24 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 25 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 26 HeightIDWcosineForsytheAndoyerLambert(wrap=False): (6.111158354, 5.0,)
    test 27 HeightIDWcosineForsytheAndoyerLambert(tuple): <class 'tuple'>
    test 28 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 29 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 30 HeightIDWcosineForsytheAndoyerLambert(wrap=False): [6.111158354, 5.0]
    test 31 HeightIDWcosineForsytheAndoyerLambert(list: <class 'list'>
    test 32 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 33 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 34 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 35 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 36 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 37 HeightIDWcosineLaw(wrap=True): 6.108538037
    test 38 HeightIDWcosineLaw(float): <class 'float'>
    test 39 HeightIDWcosineLaw(latlon): True
    test 40 HeightIDWcosineLaw(wrap=True): 5.0
    test 41 HeightIDWcosineLaw(float): <class 'float'>
    test 42 HeightIDWcosineLaw(latlon): True
    test 43 HeightIDWcosineLaw(wrap=True): (6.108538037, 5.0,)
    test 44 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 45 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 46 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 47 HeightIDWcosineLaw(wrap=True): [6.108538037, 5.0]
    test 48 HeightIDWcosineLaw(list: <class 'list'>
    test 49 HeightIDWcosineLaw(list-float): <class 'float'>
    test 50 HeightIDWcosineLaw(list-float): <class 'float'>
    test 51 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 52 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 53 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 54 HeightIDWcosineLaw(wrap=False): 6.108538037
    test 55 HeightIDWcosineLaw(float): <class 'float'>
    test 56 HeightIDWcosineLaw(latlon): True
    test 57 HeightIDWcosineLaw(wrap=False): 5.0
    test 58 HeightIDWcosineLaw(float): <class 'float'>
    test 59 HeightIDWcosineLaw(latlon): True
    test 60 HeightIDWcosineLaw(wrap=False): (6.108538037, 5.0,)
    test 61 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 62 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 63 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 64 HeightIDWcosineLaw(wrap=False): [6.108538037, 5.0]
    test 65 HeightIDWcosineLaw(list: <class 'list'>
    test 66 HeightIDWcosineLaw(list-float): <class 'float'>
    test 67 HeightIDWcosineLaw(list-float): <class 'float'>
    test 68 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 69 copy(HeightIDWdistanceTo): (<class 'pygeodesy.heights.HeightIDWdistanceTo'>, True)
    test 70 HeightIDWdistanceTo.copy(): (<class 'pygeodesy.heights.HeightIDWdistanceTo'>, True)
    test 71 HeightIDWdistanceTo(): 6.108538037
    test 72 HeightIDWdistanceTo(float): <class 'float'>
    test 73 HeightIDWdistanceTo(latlon): True
    test 74 HeightIDWdistanceTo(): 5.0
    test 75 HeightIDWdistanceTo(float): <class 'float'>
    test 76 HeightIDWdistanceTo(latlon): True
    test 77 HeightIDWdistanceTo(): (6.108538037, 5.0,)
    test 78 HeightIDWdistanceTo(tuple): <class 'tuple'>
    test 79 HeightIDWdistanceTo(tuple-float): <class 'float'>
    test 80 HeightIDWdistanceTo(tuple-float): <class 'float'>
    test 81 HeightIDWdistanceTo(): [6.108538037, 5.0]
    test 82 HeightIDWdistanceTo(list: <class 'list'>
    test 83 HeightIDWdistanceTo(list-float): <class 'float'>
    test 84 HeightIDWdistanceTo(list-float): <class 'float'>
    test 85 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 86 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 87 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 88 HeightIDWequirectangular(adjust=True, wrap=True): 6.860459007
    test 89 HeightIDWequirectangular(float): <class 'float'>
    test 90 HeightIDWequirectangular(latlon): True
    test 91 HeightIDWequirectangular(adjust=True, wrap=True): 5.0
    test 92 HeightIDWequirectangular(float): <class 'float'>
    test 93 HeightIDWequirectangular(latlon): True
    test 94 HeightIDWequirectangular(adjust=True, wrap=True): (6.860459007, 5.0,)
    test 95 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 96 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 97 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 98 HeightIDWequirectangular(adjust=True, wrap=True): [6.860459007, 5.0]
    test 99 HeightIDWequirectangular(list: <class 'list'>
    test 100 HeightIDWequirectangular(list-float): <class 'float'>
    test 101 HeightIDWequirectangular(list-float): <class 'float'>
    test 102 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 103 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 104 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 105 HeightIDWequirectangular(adjust=False, wrap=True): 6.860498092
    test 106 HeightIDWequirectangular(float): <class 'float'>
    test 107 HeightIDWequirectangular(latlon): True
    test 108 HeightIDWequirectangular(adjust=False, wrap=True): 5.0
    test 109 HeightIDWequirectangular(float): <class 'float'>
    test 110 HeightIDWequirectangular(latlon): True
    test 111 HeightIDWequirectangular(adjust=False, wrap=True): (6.860498092, 5.0,)
    test 112 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 113 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 114 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 115 HeightIDWequirectangular(adjust=False, wrap=True): [6.860498092, 5.0]
    test 116 HeightIDWequirectangular(list: <class 'list'>
    test 117 HeightIDWequirectangular(list-float): <class 'float'>
    test 118 HeightIDWequirectangular(list-float): <class 'float'>
    test 119 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 120 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 121 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 122 HeightIDWeuclidean(): 6.142945781
    test 123 HeightIDWeuclidean(float): <class 'float'>
    test 124 HeightIDWeuclidean(latlon): True
    test 125 HeightIDWeuclidean(): 5.0
    test 126 HeightIDWeuclidean(float): <class 'float'>
    test 127 HeightIDWeuclidean(latlon): True
    test 128 HeightIDWeuclidean(): (6.142945781, 5.0,)
    test 129 HeightIDWeuclidean(tuple): <class 'tuple'>
    test 130 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 131 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 132 HeightIDWeuclidean(): [6.142945781, 5.0]
    test 133 HeightIDWeuclidean(list: <class 'list'>
    test 134 HeightIDWeuclidean(list-float): <class 'float'>
    test 135 HeightIDWeuclidean(list-float): <class 'float'>
    test 136 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
    test 137 copy(HeightIDWexact): (<class 'pygeodesy.heights.HeightIDWexact'>, True)
    test 138 HeightIDWexact.copy(): (<class 'pygeodesy.heights.HeightIDWexact'>, True)
# lazily imported pygeodesy.elliptic by gx.py line 426
    test 139 HeightIDWexact(): 6.108538037
    test 140 HeightIDWexact(float): <class 'float'>
    test 141 HeightIDWexact(latlon): True
    test 142 HeightIDWexact(): 5.0
    test 143 HeightIDWexact(float): <class 'float'>
    test 144 HeightIDWexact(latlon): True
    test 145 HeightIDWexact(): (6.108538037, 5.0,)
    test 146 HeightIDWexact(tuple): <class 'tuple'>
    test 147 HeightIDWexact(tuple-float): <class 'float'>
    test 148 HeightIDWexact(tuple-float): <class 'float'>
    test 149 HeightIDWexact(): [6.108538037, 5.0]
    test 150 HeightIDWexact(list: <class 'list'>
    test 151 HeightIDWexact(list-float): <class 'float'>
    test 152 HeightIDWexact(list-float): <class 'float'>
    test 153 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 154 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 155 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 156 HeightIDWflatLocal(): 6.111158784
    test 157 HeightIDWflatLocal(float): <class 'float'>
    test 158 HeightIDWflatLocal(latlon): True
    test 159 HeightIDWflatLocal(): 5.0
    test 160 HeightIDWflatLocal(float): <class 'float'>
    test 161 HeightIDWflatLocal(latlon): True
    test 162 HeightIDWflatLocal(): (6.111158784, 5.0,)
    test 163 HeightIDWflatLocal(tuple): <class 'tuple'>
    test 164 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 165 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 166 HeightIDWflatLocal(): [6.111158784, 5.0]
    test 167 HeightIDWflatLocal(list: <class 'list'>
    test 168 HeightIDWflatLocal(list-float): <class 'float'>
    test 169 HeightIDWflatLocal(list-float): <class 'float'>
    test 170 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 171 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 172 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 173 HeightIDWflatPolar(): 6.261469975
    test 174 HeightIDWflatPolar(float): <class 'float'>
    test 175 HeightIDWflatPolar(latlon): True
    test 176 HeightIDWflatPolar(): 5.0
    test 177 HeightIDWflatPolar(float): <class 'float'>
    test 178 HeightIDWflatPolar(latlon): True
    test 179 HeightIDWflatPolar(): (6.261469975, 5.0,)
    test 180 HeightIDWflatPolar(tuple): <class 'tuple'>
    test 181 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 182 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 183 HeightIDWflatPolar(): [6.261469975, 5.0]
    test 184 HeightIDWflatPolar(list: <class 'list'>
    test 185 HeightIDWflatPolar(list-float): <class 'float'>
    test 186 HeightIDWflatPolar(list-float): <class 'float'>
    test 187 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 188 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 189 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 190 HeightIDWhaversine(): 6.108538037
    test 191 HeightIDWhaversine(float): <class 'float'>
    test 192 HeightIDWhaversine(latlon): True
    test 193 HeightIDWhaversine(): 5.0
    test 194 HeightIDWhaversine(float): <class 'float'>
    test 195 HeightIDWhaversine(latlon): True
    test 196 HeightIDWhaversine(): (6.108538037, 5.0,)
    test 197 HeightIDWhaversine(tuple): <class 'tuple'>
    test 198 HeightIDWhaversine(tuple-float): <class 'float'>
    test 199 HeightIDWhaversine(tuple-float): <class 'float'>
    test 200 HeightIDWhaversine(): [6.108538037, 5.0]
    test 201 HeightIDWhaversine(list: <class 'list'>
    test 202 HeightIDWhaversine(list-float): <class 'float'>
    test 203 HeightIDWhaversine(list-float): <class 'float'>
    test 204 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 205 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 206 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 207 HeightIDWhubeny(): 6.111158784
    test 208 HeightIDWhubeny(float): <class 'float'>
    test 209 HeightIDWhubeny(latlon): True
    test 210 HeightIDWhubeny(): 5.0
    test 211 HeightIDWhubeny(float): <class 'float'>
    test 212 HeightIDWhubeny(latlon): True
    test 213 HeightIDWhubeny(): (6.111158784, 5.0,)
    test 214 HeightIDWhubeny(tuple): <class 'tuple'>
    test 215 HeightIDWhubeny(tuple-float): <class 'float'>
    test 216 HeightIDWhubeny(tuple-float): <class 'float'>
    test 217 HeightIDWhubeny(): [6.111158784, 5.0]
    test 218 HeightIDWhubeny(list: <class 'list'>
    test 219 HeightIDWhubeny(list-float): <class 'float'>
    test 220 HeightIDWhubeny(list-float): <class 'float'>
    test 221 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 222 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 223 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 224 HeightIDWthomas(wrap=True): 6.111159454
    test 225 HeightIDWthomas(float): <class 'float'>
    test 226 HeightIDWthomas(latlon): True
    test 227 HeightIDWthomas(wrap=True): 5.0
    test 228 HeightIDWthomas(float): <class 'float'>
    test 229 HeightIDWthomas(latlon): True
    test 230 HeightIDWthomas(wrap=True): (6.111159454, 5.0,)
    test 231 HeightIDWthomas(tuple): <class 'tuple'>
    test 232 HeightIDWthomas(tuple-float): <class 'float'>
    test 233 HeightIDWthomas(tuple-float): <class 'float'>
    test 234 HeightIDWthomas(wrap=True): [6.111159454, 5.0]
    test 235 HeightIDWthomas(list: <class 'list'>
    test 236 HeightIDWthomas(list-float): <class 'float'>
    test 237 HeightIDWthomas(list-float): <class 'float'>
    test 238 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 239 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 240 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 241 HeightIDWthomas(wrap=False): 6.111159454
    test 242 HeightIDWthomas(float): <class 'float'>
    test 243 HeightIDWthomas(latlon): True
    test 244 HeightIDWthomas(wrap=False): 5.0
    test 245 HeightIDWthomas(float): <class 'float'>
    test 246 HeightIDWthomas(latlon): True
    test 247 HeightIDWthomas(wrap=False): (6.111159454, 5.0,)
    test 248 HeightIDWthomas(tuple): <class 'tuple'>
    test 249 HeightIDWthomas(tuple-float): <class 'float'>
    test 250 HeightIDWthomas(tuple-float): <class 'float'>
    test 251 HeightIDWthomas(wrap=False): [6.111159454, 5.0]
    test 252 HeightIDWthomas(list: <class 'list'>
    test 253 HeightIDWthomas(list-float): <class 'float'>
    test 254 HeightIDWthomas(list-float): <class 'float'>
    test 255 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 256 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 257 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 258 HeightIDWvincentys(wrap=True): 6.108538037
    test 259 HeightIDWvincentys(float): <class 'float'>
    test 260 HeightIDWvincentys(latlon): True
    test 261 HeightIDWvincentys(wrap=True): 5.0
    test 262 HeightIDWvincentys(float): <class 'float'>
    test 263 HeightIDWvincentys(latlon): True
    test 264 HeightIDWvincentys(wrap=True): (6.108538037, 5.0,)
    test 265 HeightIDWvincentys(tuple): <class 'tuple'>
    test 266 HeightIDWvincentys(tuple-float): <class 'float'>
    test 267 HeightIDWvincentys(tuple-float): <class 'float'>
    test 268 HeightIDWvincentys(wrap=True): [6.108538037, 5.0]
    test 269 HeightIDWvincentys(list: <class 'list'>
    test 270 HeightIDWvincentys(list-float): <class 'float'>
    test 271 HeightIDWvincentys(list-float): <class 'float'>
    test 272 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 273 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 274 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 275 HeightIDWvincentys(wrap=False): 6.108538037
    test 276 HeightIDWvincentys(float): <class 'float'>
    test 277 HeightIDWvincentys(latlon): True
    test 278 HeightIDWvincentys(wrap=False): 5.0
    test 279 HeightIDWvincentys(float): <class 'float'>
    test 280 HeightIDWvincentys(latlon): True
    test 281 HeightIDWvincentys(wrap=False): (6.108538037, 5.0,)
    test 282 HeightIDWvincentys(tuple): <class 'tuple'>
    test 283 HeightIDWvincentys(tuple-float): <class 'float'>
    test 284 HeightIDWvincentys(tuple-float): <class 'float'>
    test 285 HeightIDWvincentys(wrap=False): [6.108538037, 5.0]
    test 286 HeightIDWvincentys(list: <class 'list'>
    test 287 HeightIDWvincentys(list-float): <class 'float'>
    test 288 HeightIDWvincentys(list-float): <class 'float'>
    test 289 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 290 intersection: 02.64932°N, 002.550079°E, +2.50m

    test 291 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 292 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 293 HeightIDWcosineAndoyerLambert(wrap=False): 2.592742781
    test 294 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 295 HeightIDWcosineAndoyerLambert(latlon): True
    test 296 HeightIDWcosineAndoyerLambert(wrap=False): 3.0
    test 297 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 298 HeightIDWcosineAndoyerLambert(latlon): True
    test 299 HeightIDWcosineAndoyerLambert(wrap=False): (2.592742781, 3.0,)
    test 300 HeightIDWcosineAndoyerLambert(tuple): <class 'tuple'>
    test 301 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 302 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 303 HeightIDWcosineAndoyerLambert(wrap=False): [2.592742781, 3.0]
    test 304 HeightIDWcosineAndoyerLambert(list: <class 'list'>
    test 305 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 306 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 307 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 308 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 309 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 310 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 2.592742781
    test 311 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 312 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 313 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 3.0
    test 314 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 315 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 316 HeightIDWcosineForsytheAndoyerLambert(wrap=False): (2.592742781, 3.0,)
    test 317 HeightIDWcosineForsytheAndoyerLambert(tuple): <class 'tuple'>
    test 318 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 319 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 320 HeightIDWcosineForsytheAndoyerLambert(wrap=False): [2.592742781, 3.0]
    test 321 HeightIDWcosineForsytheAndoyerLambert(list: <class 'list'>
    test 322 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 323 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 324 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 325 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 326 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 327 HeightIDWcosineLaw(wrap=True): 2.592742938
    test 328 HeightIDWcosineLaw(float): <class 'float'>
    test 329 HeightIDWcosineLaw(latlon): True
    test 330 HeightIDWcosineLaw(wrap=True): 3.0
    test 331 HeightIDWcosineLaw(float): <class 'float'>
    test 332 HeightIDWcosineLaw(latlon): True
    test 333 HeightIDWcosineLaw(wrap=True): (2.592742938, 3.0,)
    test 334 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 335 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 336 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 337 HeightIDWcosineLaw(wrap=True): [2.592742938, 3.0]
    test 338 HeightIDWcosineLaw(list: <class 'list'>
    test 339 HeightIDWcosineLaw(list-float): <class 'float'>
    test 340 HeightIDWcosineLaw(list-float): <class 'float'>
    test 341 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 342 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 343 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 344 HeightIDWcosineLaw(wrap=False): 2.592742938
    test 345 HeightIDWcosineLaw(float): <class 'float'>
    test 346 HeightIDWcosineLaw(latlon): True
    test 347 HeightIDWcosineLaw(wrap=False): 3.0
    test 348 HeightIDWcosineLaw(float): <class 'float'>
    test 349 HeightIDWcosineLaw(latlon): True
    test 350 HeightIDWcosineLaw(wrap=False): (2.592742938, 3.0,)
    test 351 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 352 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 353 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 354 HeightIDWcosineLaw(wrap=False): [2.592742938, 3.0]
    test 355 HeightIDWcosineLaw(list: <class 'list'>
    test 356 HeightIDWcosineLaw(list-float): <class 'float'>
    test 357 HeightIDWcosineLaw(list-float): <class 'float'>
    test 358 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 359 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 360 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 361 HeightIDWequirectangular(adjust=True, wrap=True): 2.689429914
    test 362 HeightIDWequirectangular(float): <class 'float'>
    test 363 HeightIDWequirectangular(latlon): True
    test 364 HeightIDWequirectangular(adjust=True, wrap=True): 3.0
    test 365 HeightIDWequirectangular(float): <class 'float'>
    test 366 HeightIDWequirectangular(latlon): True
    test 367 HeightIDWequirectangular(adjust=True, wrap=True): (2.689429914, 3.0,)
    test 368 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 369 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 370 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 371 HeightIDWequirectangular(adjust=True, wrap=True): [2.689429914, 3.0]
    test 372 HeightIDWequirectangular(list: <class 'list'>
    test 373 HeightIDWequirectangular(list-float): <class 'float'>
    test 374 HeightIDWequirectangular(list-float): <class 'float'>
    test 375 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 376 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 377 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 378 HeightIDWequirectangular(adjust=False, wrap=True): 2.689413401
    test 379 HeightIDWequirectangular(float): <class 'float'>
    test 380 HeightIDWequirectangular(latlon): True
    test 381 HeightIDWequirectangular(adjust=False, wrap=True): 3.0
    test 382 HeightIDWequirectangular(float): <class 'float'>
    test 383 HeightIDWequirectangular(latlon): True
    test 384 HeightIDWequirectangular(adjust=False, wrap=True): (2.689413401, 3.0,)
    test 385 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 386 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 387 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 388 HeightIDWequirectangular(adjust=False, wrap=True): [2.689413401, 3.0]
    test 389 HeightIDWequirectangular(list: <class 'list'>
    test 390 HeightIDWequirectangular(list-float): <class 'float'>
    test 391 HeightIDWequirectangular(list-float): <class 'float'>
    test 392 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 393 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 394 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 395 HeightIDWeuclidean(adjust=False): 2.592735541
    test 396 HeightIDWeuclidean(float): <class 'float'>
    test 397 HeightIDWeuclidean(latlon): True
    test 398 HeightIDWeuclidean(adjust=False): 3.0
    test 399 HeightIDWeuclidean(float): <class 'float'>
    test 400 HeightIDWeuclidean(latlon): True
    test 401 HeightIDWeuclidean(adjust=False): (2.592735541, 3.0,)
    test 402 HeightIDWeuclidean(tuple): <class 'tuple'>
    test 403 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 404 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 405 HeightIDWeuclidean(adjust=False): [2.592735541, 3.0]
    test 406 HeightIDWeuclidean(list: <class 'list'>
    test 407 HeightIDWeuclidean(list-float): <class 'float'>
    test 408 HeightIDWeuclidean(list-float): <class 'float'>
    test 409 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 410 copy(HeightIDWexact): (<class 'pygeodesy.heights.HeightIDWexact'>, True)
    test 411 HeightIDWexact.copy(): (<class 'pygeodesy.heights.HeightIDWexact'>, True)
    test 412 HeightIDWexact(): 2.592742938
    test 413 HeightIDWexact(float): <class 'float'>
    test 414 HeightIDWexact(latlon): True
    test 415 HeightIDWexact(): 3.0
    test 416 HeightIDWexact(float): <class 'float'>
    test 417 HeightIDWexact(latlon): True
    test 418 HeightIDWexact(): (2.592742938, 3.0,)
    test 419 HeightIDWexact(tuple): <class 'tuple'>
    test 420 HeightIDWexact(tuple-float): <class 'float'>
    test 421 HeightIDWexact(tuple-float): <class 'float'>
    test 422 HeightIDWexact(): [2.592742938, 3.0]
    test 423 HeightIDWexact(list: <class 'list'>
    test 424 HeightIDWexact(list-float): <class 'float'>
    test 425 HeightIDWexact(list-float): <class 'float'>
    test 426 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 427 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 428 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 429 HeightIDWflatLocal(): 2.592743288
    test 430 HeightIDWflatLocal(float): <class 'float'>
    test 431 HeightIDWflatLocal(latlon): True
    test 432 HeightIDWflatLocal(): 3.0
    test 433 HeightIDWflatLocal(float): <class 'float'>
    test 434 HeightIDWflatLocal(latlon): True
    test 435 HeightIDWflatLocal(): (2.592743288, 3.0,)
    test 436 HeightIDWflatLocal(tuple): <class 'tuple'>
    test 437 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 438 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 439 HeightIDWflatLocal(): [2.592743288, 3.0]
    test 440 HeightIDWflatLocal(list: <class 'list'>
    test 441 HeightIDWflatLocal(list-float): <class 'float'>
    test 442 HeightIDWflatLocal(list-float): <class 'float'>
    test 443 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 444 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 445 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 446 HeightIDWflatPolar(): 2.592973059
    test 447 HeightIDWflatPolar(float): <class 'float'>
    test 448 HeightIDWflatPolar(latlon): True
    test 449 HeightIDWflatPolar(): 3.0
    test 450 HeightIDWflatPolar(float): <class 'float'>
    test 451 HeightIDWflatPolar(latlon): True
    test 452 HeightIDWflatPolar(): (2.592973059, 3.0,)
    test 453 HeightIDWflatPolar(tuple): <class 'tuple'>
    test 454 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 455 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 456 HeightIDWflatPolar(): [2.592973059, 3.0]
    test 457 HeightIDWflatPolar(list: <class 'list'>
    test 458 HeightIDWflatPolar(list-float): <class 'float'>
    test 459 HeightIDWflatPolar(list-float): <class 'float'>
    test 460 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 461 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 462 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 463 HeightIDWhaversine(): 2.592742938
    test 464 HeightIDWhaversine(float): <class 'float'>
    test 465 HeightIDWhaversine(latlon): True
    test 466 HeightIDWhaversine(): 3.0
    test 467 HeightIDWhaversine(float): <class 'float'>
    test 468 HeightIDWhaversine(latlon): True
    test 469 HeightIDWhaversine(): (2.592742938, 3.0,)
    test 470 HeightIDWhaversine(tuple): <class 'tuple'>
    test 471 HeightIDWhaversine(tuple-float): <class 'float'>
    test 472 HeightIDWhaversine(tuple-float): <class 'float'>
    test 473 HeightIDWhaversine(): [2.592742938, 3.0]
    test 474 HeightIDWhaversine(list: <class 'list'>
    test 475 HeightIDWhaversine(list-float): <class 'float'>
    test 476 HeightIDWhaversine(list-float): <class 'float'>
    test 477 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 478 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 479 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 480 HeightIDWhubeny(): 2.592743288
    test 481 HeightIDWhubeny(float): <class 'float'>
    test 482 HeightIDWhubeny(latlon): True
    test 483 HeightIDWhubeny(): 3.0
    test 484 HeightIDWhubeny(float): <class 'float'>
    test 485 HeightIDWhubeny(latlon): True
    test 486 HeightIDWhubeny(): (2.592743288, 3.0,)
    test 487 HeightIDWhubeny(tuple): <class 'tuple'>
    test 488 HeightIDWhubeny(tuple-float): <class 'float'>
    test 489 HeightIDWhubeny(tuple-float): <class 'float'>
    test 490 HeightIDWhubeny(): [2.592743288, 3.0]
    test 491 HeightIDWhubeny(list: <class 'list'>
    test 492 HeightIDWhubeny(list-float): <class 'float'>
    test 493 HeightIDWhubeny(list-float): <class 'float'>
    test 494 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 495 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 496 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 497 HeightIDWthomas(wrap=True): 2.592742781
    test 498 HeightIDWthomas(float): <class 'float'>
    test 499 HeightIDWthomas(latlon): True
    test 500 HeightIDWthomas(wrap=True): 3.0
    test 501 HeightIDWthomas(float): <class 'float'>
    test 502 HeightIDWthomas(latlon): True
    test 503 HeightIDWthomas(wrap=True): (2.592742781, 3.0,)
    test 504 HeightIDWthomas(tuple): <class 'tuple'>
    test 505 HeightIDWthomas(tuple-float): <class 'float'>
    test 506 HeightIDWthomas(tuple-float): <class 'float'>
    test 507 HeightIDWthomas(wrap=True): [2.592742781, 3.0]
    test 508 HeightIDWthomas(list: <class 'list'>
    test 509 HeightIDWthomas(list-float): <class 'float'>
    test 510 HeightIDWthomas(list-float): <class 'float'>
    test 511 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 512 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 513 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 514 HeightIDWthomas(wrap=False): 2.592742781
    test 515 HeightIDWthomas(float): <class 'float'>
    test 516 HeightIDWthomas(latlon): True
    test 517 HeightIDWthomas(wrap=False): 3.0
    test 518 HeightIDWthomas(float): <class 'float'>
    test 519 HeightIDWthomas(latlon): True
    test 520 HeightIDWthomas(wrap=False): (2.592742781, 3.0,)
    test 521 HeightIDWthomas(tuple): <class 'tuple'>
    test 522 HeightIDWthomas(tuple-float): <class 'float'>
    test 523 HeightIDWthomas(tuple-float): <class 'float'>
    test 524 HeightIDWthomas(wrap=False): [2.592742781, 3.0]
    test 525 HeightIDWthomas(list: <class 'list'>
    test 526 HeightIDWthomas(list-float): <class 'float'>
    test 527 HeightIDWthomas(list-float): <class 'float'>
    test 528 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 529 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 530 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 531 HeightIDWvincentys(wrap=True): 2.592742938
    test 532 HeightIDWvincentys(float): <class 'float'>
    test 533 HeightIDWvincentys(latlon): True
    test 534 HeightIDWvincentys(wrap=True): 3.0
    test 535 HeightIDWvincentys(float): <class 'float'>
    test 536 HeightIDWvincentys(latlon): True
    test 537 HeightIDWvincentys(wrap=True): (2.592742938, 3.0,)
    test 538 HeightIDWvincentys(tuple): <class 'tuple'>
    test 539 HeightIDWvincentys(tuple-float): <class 'float'>
    test 540 HeightIDWvincentys(tuple-float): <class 'float'>
    test 541 HeightIDWvincentys(wrap=True): [2.592742938, 3.0]
    test 542 HeightIDWvincentys(list: <class 'list'>
    test 543 HeightIDWvincentys(list-float): <class 'float'>
    test 544 HeightIDWvincentys(list-float): <class 'float'>
    test 545 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 546 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 547 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 548 HeightIDWvincentys(wrap=False): 2.592742938
    test 549 HeightIDWvincentys(float): <class 'float'>
    test 550 HeightIDWvincentys(latlon): True
    test 551 HeightIDWvincentys(wrap=False): 3.0
    test 552 HeightIDWvincentys(float): <class 'float'>
    test 553 HeightIDWvincentys(latlon): True
    test 554 HeightIDWvincentys(wrap=False): (2.592742938, 3.0,)
    test 555 HeightIDWvincentys(tuple): <class 'tuple'>
    test 556 HeightIDWvincentys(tuple-float): <class 'float'>
    test 557 HeightIDWvincentys(tuple-float): <class 'float'>
    test 558 HeightIDWvincentys(wrap=False): [2.592742938, 3.0]
    test 559 HeightIDWvincentys(list: <class 'list'>
    test 560 HeightIDWvincentys(list-float): <class 'float'>
    test 561 HeightIDWvincentys(list-float): <class 'float'>
    test 562 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'

    80 tests skipped (80): No module named 'scipy': required by heights.HeightLinear

    all 562 testHeights.py tests passed, 80 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 102.189 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testInterns.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.machine from .internals by testInterns.py line 11

    testing testInterns.py 24.05.21 (module pygeodesy.interns 24.06.14) isLazy=3
    test 1 _0_ = '0': True
    test 2 _0_ = '0': 0
    test 3 _0to9_ = '0123456789': True
    test 4 _0to9_ = '0123456789': 0123456789  FAILED, KNOWN, expected 0to9
    test 5 _1_ = '1': True
    test 6 _1_ = '1': 1
    test 7 _2_ = '2': True
    test 8 _2_ = '2': 2
    test 9 _3_ = '3': True
    test 10 _3_ = '3': 3
    test 11 _4_ = '4': True
    test 12 _4_ = '4': 4
    test 13 __all__ = ('NN', 'Str_'): False  FAILED, KNOWN, expected True
    test 14 __builtins__ = {'__name__': 'builtins', ....) for help about object.}: False  FAILED, KNOWN, expected True
    test 15 __cached__ = './pygeodesy/__pycache__/interns.cpython-312.pyc': True
    test 16 __doc__ = "Single C{str}ing constan.... L{pygeodesy.machine}.\n": True
    test 17 __file__ = './pygeodesy/interns.py': True
    test 18 __loader__ = <_frozen_importlib_extern....er object at 0x104574470>: False  FAILED, KNOWN, expected True
    test 19 __name__ = 'pygeodesy.interns': True
    test 20 __package__ = 'pygeodesy': True
    test 21 __spec__ = ModuleSpec(name='pygeodes....'./pygeodesy/interns.py'): False  FAILED, KNOWN, expected True
    test 22 __version__ = '24.06.14': True
    test 23 _a12_ = 'a12': True
    test 24 _a12_ = 'a12': a12
    test 25 _A_ = 'A': True
    test 26 _A_ = 'A': a
    test 27 _a_ = 'a': True
    test 28 _a_ = 'a': a
    test 29 _Airy1830_ = 'Airy1830': True
    test 30 _Airy1830_ = 'Airy1830': airy1830
    test 31 _AiryModified_ = 'AiryModified': True
    test 32 _AiryModified_ = 'AiryModified': airymodified
    test 33 _ambiguous_ = 'ambiguous': True
    test 34 _ambiguous_ = 'ambiguous': ambiguous
    test 35 _AMPERSAND_ = '&': True
    test 36 _AMPERSAND_ = '&': &  FAILED, KNOWN, expected ampersand
    test 37 _an_ = 'an': True
    test 38 _an_ = 'an': an
    test 39 _and_ = 'and': True
    test 40 _and_ = 'and': and
    test 41 _angle_ = 'angle': True
    test 42 _angle_ = 'angle': angle
    test 43 _antipodal_ = 'antipodal': True
    test 44 _antipodal_ = 'antipodal': antipodal
    test 45 _area_ = 'area': True
    test 46 _area_ = 'area': area
    test 47 _arg_ = 'arg': True
    test 48 _arg_ = 'arg': arg
    test 49 _AT_ = '@': True
    test 50 _AT_ = '@': @  FAILED, KNOWN, expected at
    test 51 _AtoZnoIO_ = 'ABCDEFGHJKLMNPQRSTUVWXYZ': True
    test 52 _AtoZnoIO_ = 'ABCDEFGHJKLMNPQRSTUVWXYZ': abcdefghjklmnpqrstuvwxyz  FAILED, KNOWN, expected atoznoio
    test 53 _attribute_ = 'attribute': True
    test 54 _attribute_ = 'attribute': attribute
    test 55 _azi12_ = 'azi12': True
    test 56 _azi12_ = 'azi12': azi12
    test 57 _azi1_ = 'azi1': True
    test 58 _azi1_ = 'azi1': azi1
    test 59 _azi2_ = 'azi2': True
    test 60 _azi2_ = 'azi2': azi2
    test 61 _azimuth_ = 'azimuth': True
    test 62 _azimuth_ = 'azimuth': azimuth
    test 63 _B_ = 'B': True
    test 64 _B_ = 'B': b
    test 65 _b_ = 'b': True
    test 66 _b_ = 'b': b
    test 67 _BACKSLASH_ = '\\': True
    test 68 _BACKSLASH_ = '\\': \  FAILED, KNOWN, expected backslash
    test 69 _band_ = 'band': True
    test 70 _band_ = 'band': band
    test 71 _BANG_ = '!': True
    test 72 _BANG_ = '!': !  FAILED, KNOWN, expected bang
    test 73 _BAR_ = '|': True
    test 74 _BAR_ = '|': |  FAILED, KNOWN, expected bar
    test 75 _bearing_ = 'bearing': True
    test 76 _bearing_ = 'bearing': bearing
    test 77 _Bessel1841_ = 'Bessel1841': True
    test 78 _Bessel1841_ = 'Bessel1841': bessel1841
    test 79 _beta_ = 'beta': True
    test 80 _beta_ = 'beta': beta
    test 81 _by_ = 'by': True
    test 82 _by_ = 'by': by
    test 83 _C_ = 'C': True
    test 84 _C_ = 'C': c
    test 85 _c_ = 'c': True
    test 86 _c_ = 'c': c
    test 87 _cartesian_ = 'cartesian': True
    test 88 _cartesian_ = 'cartesian': cartesian
    test 89 _center_ = 'center': True
    test 90 _center_ = 'center': center
    test 91 _Clarke1866_ = 'Clarke1866': True
    test 92 _Clarke1866_ = 'Clarke1866': clarke1866
    test 93 _Clarke1880IGN_ = 'Clarke1880IGN': True
    test 94 _Clarke1880IGN_ = 'Clarke1880IGN': clarke1880ign
    test 95 _clip_ = 'clip': True
    test 96 _clip_ = 'clip': clip
    test 97 _clipid_ = 'clipid': True
    test 98 _clipid_ = 'clipid': clipid
    test 99 _coincident_ = 'coincident': True
    test 100 _coincident_ = 'coincident': coincident
    test 101 _colinear_ = 'colinear': True
    test 102 _colinear_ = 'colinear': colinear
    test 103 _COLON_ = ':': True
    test 104 _COLON_ = ':': :  FAILED, KNOWN, expected colon
    test 105 _COLONSPACE_ = ': ': True
    test 106 _COLONSPACE_ = ': ': :   FAILED, KNOWN, expected colonspace
    test 107 _COMMA_ = ',': True
    test 108 _COMMA_ = ',': ,  FAILED, KNOWN, expected comma
    test 109 _COMMASPACE_ = ', ': True
    test 110 _COMMASPACE_ = ', ': ,   FAILED, KNOWN, expected commaspace
    test 111 _composite_ = 'composite': True
    test 112 _composite_ = 'composite': composite
    test 113 _concentric_ = 'concentric': True
    test 114 _concentric_ = 'concentric': concentric
    test 115 _convergence_ = 'convergence': True
    test 116 _convergence_ = 'convergence': convergence
    test 117 _conversion_ = 'conversion': True
    test 118 _conversion_ = 'conversion': conversion
    test 119 _convex_ = 'convex': True
    test 120 _convex_ = 'convex': convex
    test 121 _cubic_ = 'cubic': True
    test 122 _cubic_ = 'cubic': cubic
    test 123 _D_ = 'D': True
    test 124 _D_ = 'D': d
    test 125 _d_ = 'd': True
    test 126 _d_ = 'd': d
    test 127 _DASH_ = '-': True
    test 128 _DASH_ = '-': -  FAILED, KNOWN, expected dash
    test 129 _datum_ = 'datum': True
    test 130 _datum_ = 'datum': datum
    test 131 _DDOT_ = '..': True
    test 132 _DDOT_ = '..': ..  FAILED, KNOWN, expected ddot
    test 133 _decode3_ = 'decode3': True
    test 134 _decode3_ = 'decode3': decode3
    test 135 _deg_ = 'deg': True
    test 136 _deg_ = 'deg': deg
    test 137 _degrees2_ = 'degrees2': True
    test 138 _degrees2_ = 'degrees2': degrees2
    test 139 _degrees_ = 'degrees': True
    test 140 _degrees_ = 'degrees': degrees
    test 141 _delta_ = 'delta': True
    test 142 _delta_ = 'delta': delta
    test 143 _DEPRECATED_ = 'DEPRECATED': True
    test 144 _DEPRECATED_ = 'DEPRECATED': deprecated
    test 145 _DEQUALSPACED_ = ' == ': True
    test 146 _DEQUALSPACED_ = ' == ':  ==   FAILED, KNOWN, expected dequalspaced
    test 147 _distance_ = 'distance': True
    test 148 _distance_ = 'distance': distance
    test 149 _distant_ = 'distant': True
    test 150 _distant_ = 'distant': distant
    test 151 _DNL_ = '\n\n': True
    test 152 _DNL_ = '\n\n': 

  FAILED, KNOWN, expected dnl
    test 153 _doesn_t_exist_ = "doesn't exist": True
    test 154 _doesn_t_exist_ = "doesn't exist": doesn't exist  FAILED, KNOWN, expected doesn_t_exist
    test 155 _DOT_ = '.': True
    test 156 _DOT_ = '.': .  FAILED, KNOWN, expected dot
    test 157 _DUNDER_ = '__': True
    test 158 _DUNDER_ = '__': __  FAILED, KNOWN, expected dunder
    test 159 _dunder_name_ = '__name__': True
    test 160 _dunder_name_ = '__name__': __name__  FAILED, KNOWN, expected dunder_name
    test 161 _E_ = 'E': True
    test 162 _E_ = 'E': e
    test 163 _e_ = 'e': True
    test 164 _e_ = 'e': e
    test 165 _earth_ = 'earth': True
    test 166 _earth_ = 'earth': earth
    test 167 _easting_ = 'easting': True
    test 168 _easting_ = 'easting': easting
    test 169 _ecef_ = 'ecef': True
    test 170 _ecef_ = 'ecef': ecef
    test 171 _edge_ = 'edge': True
    test 172 _edge_ = 'edge': edge
    test 173 _elevation_ = 'elevation': True
    test 174 _elevation_ = 'elevation': elevation
    test 175 _ELLIPSIS4_ = '....': True
    test 176 _ELLIPSIS4_ = '....': ....  FAILED, KNOWN, expected ellipsis4
    test 177 _ELLIPSIS_ = '...': True
    test 178 _ELLIPSIS_ = '...': ...  FAILED, KNOWN, expected ellipsis
    test 179 _ellipsoid_ = 'ellipsoid': True
    test 180 _ellipsoid_ = 'ellipsoid': ellipsoid
    test 181 _ellipsoidal_ = 'ellipsoidal': True
    test 182 _ellipsoidal_ = 'ellipsoidal': ellipsoidal
    test 183 _encode_ = 'encode': True
    test 184 _encode_ = 'encode': encode
    test 185 _end_ = 'end': True
    test 186 _end_ = 'end': end
    test 187 _epoch_ = 'epoch': True
    test 188 _epoch_ = 'epoch': epoch
    test 189 _eps_ = 'eps': True
    test 190 _eps_ = 'eps': eps
    test 191 _EQUAL_ = '=': True
    test 192 _EQUAL_ = '=': =  FAILED, KNOWN, expected equal
    test 193 _EQUALSPACED_ = ' = ': True
    test 194 _EQUALSPACED_ = ' = ':  =   FAILED, KNOWN, expected equalspaced
    test 195 _Error_ = 'Error': True
    test 196 _Error_ = 'Error': error
    test 197 _EW_ = 'EW': True
    test 198 _EW_ = 'EW': ew
    test 199 _exceed_PI_radians_ = 'exceed PI radians': True
    test 200 _exceed_PI_radians_ = 'exceed PI radians': exceed pi radians  FAILED, KNOWN, expected exceed_pi_radians
    test 201 _exceeds_ = 'exceeds': True
    test 202 _exceeds_ = 'exceeds': exceeds
    test 203 _exists_ = 'exists': True
    test 204 _exists_ = 'exists': exists
    test 205 _F_ = 'F': True
    test 206 _F_ = 'F': f
    test 207 _f_ = 'f': True
    test 208 _f_ = 'f': f
    test 209 _feet_ = 'feet': True
    test 210 _feet_ = 'feet': feet
    test 211 _few_ = 'few': True
    test 212 _few_ = 'few': few
    test 213 _fi_ = 'fi': True
    test 214 _fi_ = 'fi': fi
    test 215 _finite_ = 'finite': True
    test 216 _finite_ = 'finite': finite
    test 217 _from_ = 'from': True
    test 218 _from_ = 'from': from
    test 219 _g_ = 'g': True
    test 220 _g_ = 'g': g
    test 221 _gamma_ = 'gamma': True
    test 222 _gamma_ = 'gamma': gamma
    test 223 _GRS80_ = 'GRS80': True
    test 224 _GRS80_ = 'GRS80': grs80
    test 225 _H_ = 'H': True
    test 226 _H_ = 'H': h
    test 227 _h_ = 'h': True
    test 228 _h_ = 'h': h
    test 229 _HASH_ = '#': True
    test 230 _HASH_ = '#': #  FAILED, KNOWN, expected hash
    test 231 _height_ = 'height': True
    test 232 _height_ = 'height': height
    test 233 _hemipole_ = 'hemipole': True
    test 234 _hemipole_ = 'hemipole': hemipole
    test 235 _i_ = 'i': True
    test 236 _i_ = 'i': i
    test 237 _immutable_ = 'immutable': True
    test 238 _immutable_ = 'immutable': immutable
    test 239 _in_ = 'in': True
    test 240 _in_ = 'in': in
    test 241 _incompatible_ = 'incompatible': True
    test 242 _incompatible_ = 'incompatible': incompatible
    test 243 _INF_ = 'INF': True
    test 244 _INF_ = 'INF': inf
    test 245 _infinite_ = 'infinite': True
    test 246 _infinite_ = 'infinite': infinite
    test 247 _initial_ = 'initial': True
    test 248 _initial_ = 'initial': initial
    test 249 _inside_ = 'inside': True
    test 250 _inside_ = 'inside': inside
    test 251 _insufficient_ = 'insufficient': True
    test 252 _insufficient_ = 'insufficient': insufficient
    test 253 _intersection_ = 'intersection': True
    test 254 _intersection_ = 'intersection': intersection
    test 255 _Intl1924_ = 'Intl1924': True
    test 256 _Intl1924_ = 'Intl1924': intl1924
    test 257 _invalid_ = 'invalid': True
    test 258 _invalid_ = 'invalid': invalid
    test 259 _invokation_ = 'invokation': True
    test 260 _invokation_ = 'invokation': invokation
    test 261 _j_ = 'j': True
    test 262 _j_ = 'j': j
    test 263 _k0_ = 'k0': True
    test 264 _k0_ = 'k0': k0
    test 265 _keyword_ = 'keyword': True
    test 266 _keyword_ = 'keyword': keyword
    test 267 _kind_ = 'kind': True
    test 268 _kind_ = 'kind': kind
    test 269 _Krassovski1940_ = 'Krassovski1940': True
    test 270 _Krassovski1940_ = 'Krassovski1940': krassovski1940
    test 271 _Krassowsky1940_ = 'Krassowsky1940': True
    test 272 _Krassowsky1940_ = 'Krassowsky1940': krassowsky1940
    test 273 _lam_ = 'lam': True
    test 274 _lam_ = 'lam': lam
    test 275 _LANGLE_ = '<': True
    test 276 _LANGLE_ = '<': <  FAILED, KNOWN, expected langle
    test 277 _lat0_ = 'lat0': True
    test 278 _lat0_ = 'lat0': lat0
    test 279 _lat1_ = 'lat1': True
    test 280 _lat1_ = 'lat1': lat1
    test 281 _lat2_ = 'lat2': True
    test 282 _lat2_ = 'lat2': lat2
    test 283 _lat_ = 'lat': True
    test 284 _lat_ = 'lat': lat
    test 285 _LatLon_ = 'LatLon': True
    test 286 _LatLon_ = 'LatLon': latlon
    test 287 _latlon_ = 'latlon': True
    test 288 _latlon_ = 'latlon': latlon
    test 289 _LCURLY_ = '{': True
    test 290 _LCURLY_ = '{': {  FAILED, KNOWN, expected lcurly
    test 291 _len_ = 'len': True
    test 292 _len_ = 'len': len
    test 293 _limit_ = 'limit': True
    test 294 _limit_ = 'limit': limit
    test 295 _line_ = 'line': True
    test 296 _line_ = 'line': line
    test 297 _linear_ = 'linear': True
    test 298 _linear_ = 'linear': linear
    test 299 _lon0_ = 'lon0': True
    test 300 _lon0_ = 'lon0': lon0
    test 301 _lon1_ = 'lon1': True
    test 302 _lon1_ = 'lon1': lon1
    test 303 _lon2_ = 'lon2': True
    test 304 _lon2_ = 'lon2': lon2
    test 305 _lon_ = 'lon': True
    test 306 _lon_ = 'lon': lon
    test 307 _low_ = 'low': True
    test 308 _low_ = 'low': low
    test 309 _LPAREN_ = '(': True
    test 310 _LPAREN_ = '(': (  FAILED, KNOWN, expected lparen
    test 311 _LSQUARE_ = '[': True
    test 312 _LSQUARE_ = '[': [  FAILED, KNOWN, expected lsquare
    test 313 _ltp_ = 'ltp': True
    test 314 _ltp_ = 'ltp': ltp
    test 315 _M12_ = 'M12': True
    test 316 _M12_ = 'M12': m12
    test 317 _m12_ = 'm12': True
    test 318 _m12_ = 'm12': m12
    test 319 _M21_ = 'M21': True
    test 320 _M21_ = 'M21': m21
    test 321 _M_ = 'M': True
    test 322 _M_ = 'M': m
    test 323 _m_ = 'm': True
    test 324 _m_ = 'm': m
    test 325 _MANT_DIG_ = 'MANT_DIG': True
    test 326 _MANT_DIG_ = 'MANT_DIG': mant_dig
    test 327 _MAX_ = 'MAX': True
    test 328 _MAX_ = 'MAX': max
    test 329 _mean_ = 'mean': True
    test 330 _mean_ = 'mean': mean
    test 331 _meanOf_ = 'meanOf': True
    test 332 _meanOf_ = 'meanOf': meanof
    test 333 _meridional_ = 'meridional': True
    test 334 _meridional_ = 'meridional': meridional
    test 335 _meter2_ = 'meter2': True
    test 336 _meter2_ = 'meter2': meter2
    test 337 _meter_ = 'meter': True
    test 338 _meter_ = 'meter': meter
    test 339 _MGRS_ = 'MGRS': True
    test 340 _MGRS_ = 'MGRS': mgrs
    test 341 _MIN_ = 'MIN': True
    test 342 _MIN_ = 'MIN': min
    test 343 _MINUS_ = '-': True
    test 344 _MINUS_ = '-': -  FAILED, KNOWN, expected minus
    test 345 _module_ = 'module': True
    test 346 _module_ = 'module': module
    test 347 _N_ = 'N': True
    test 348 _N_ = 'N': n
    test 349 _n_ = 'n': True
    test 350 _n_ = 'n': n
    test 351 _N_A_ = 'N/A': True
    test 352 _N_A_ = 'N/A': n/a  FAILED, KNOWN, expected n_a
    test 353 _n_a_ = 'n/a': True
    test 354 _n_a_ = 'n/a': n/a  FAILED, KNOWN, expected n_a
    test 355 _NAD27_ = 'NAD27': True
    test 356 _NAD27_ = 'NAD27': nad27
    test 357 _NAD83_ = 'NAD83': True
    test 358 _NAD83_ = 'NAD83': nad83
    test 359 _name_ = 'name': True
    test 360 _name_ = 'name': name
    test 361 _NAN_ = 'NAN': True
    test 362 _NAN_ = 'NAN': nan
    test 363 _NE_ = 'NE': True
    test 364 _NE_ = 'NE': ne
    test 365 _near_ = 'near': True
    test 366 _near_ = 'near': near
    test 367 _nearestOn2_ = 'nearestOn2': True
    test 368 _nearestOn2_ = 'nearestOn2': neareston2
    test 369 _negative_ = 'negative': True
    test 370 _negative_ = 'negative': negative
    test 371 _NL_ = '\n': True
    test 372 _NL_ = '\n': 
  FAILED, KNOWN, expected nl
    test 373 _NLATvar_ = '\n@var ': True
    test 374 _NLATvar_ = '\n@var ': 
@var   FAILED, KNOWN, expected nlatvar
    test 375 _NLHASH_ = '\n# ': True
    test 376 _NLHASH_ = '\n# ': 
#   FAILED, KNOWN, expected nlhash
    test 377 _NN_ = 'NN': True
    test 378 _NN_ = 'NN': nn
    test 379 _no_ = 'no': True
    test 380 _no_ = 'no': no
    test 381 _northing_ = 'northing': True
    test 382 _northing_ = 'northing': northing
    test 383 _not_ = 'not': True
    test 384 _not_ = 'not': not
    test 385 _not_finite_ = 'not finite': True
    test 386 _not_finite_ = 'not finite': not finite  FAILED, KNOWN, expected not_finite
    test 387 _not_scalar_ = 'not scalar': True
    test 388 _not_scalar_ = 'not scalar': not scalar  FAILED, KNOWN, expected not_scalar
    test 389 _NOTEQUAL_ = '!=': True
    test 390 _NOTEQUAL_ = '!=': !=  FAILED, KNOWN, expected notequal
    test 391 _NS_ = 'NS': True
    test 392 _NS_ = 'NS': ns
    test 393 _NSEW_ = 'NSEW': True
    test 394 _NSEW_ = 'NSEW': nsew
    test 395 _NTF_ = 'NTF': True
    test 396 _NTF_ = 'NTF': ntf
    test 397 _null_ = 'null': True
    test 398 _null_ = 'null': null
    test 399 _number_ = 'number': True
    test 400 _number_ = 'number': number
    test 401 _numpy_ = 'numpy': True
    test 402 _numpy_ = 'numpy': numpy
    test 403 _Nv00_ = 'Nv00': True
    test 404 _Nv00_ = 'Nv00': nv00
    test 405 _NW_ = 'NW': True
    test 406 _NW_ = 'NW': nw
    test 407 _odd_ = 'odd': True
    test 408 _odd_ = 'odd': odd
    test 409 _of_ = 'of': True
    test 410 _of_ = 'of': of
    test 411 _on_ = 'on': True
    test 412 _on_ = 'on': on
    test 413 _opposite_ = 'opposite': True
    test 414 _opposite_ = 'opposite': opposite
    test 415 _or_ = 'or': True
    test 416 _or_ = 'or': or
    test 417 _other_ = 'other': True
    test 418 _other_ = 'other': other
    test 419 _outside_ = 'outside': True
    test 420 _outside_ = 'outside': outside
    test 421 _overlap_ = 'overlap': True
    test 422 _overlap_ = 'overlap': overlap
    test 423 _parallel_ = 'parallel': True
    test 424 _parallel_ = 'parallel': parallel
    test 425 _PERCENT_ = '%': True
    test 426 _PERCENT_ = '%': %  FAILED, KNOWN, expected percent
    test 427 _PERCENTDOTSTAR_ = '%.*': True
    test 428 _PERCENTDOTSTAR_ = '%.*': %.*  FAILED, KNOWN, expected percentdotstar
    test 429 _phi_ = 'phi': True
    test 430 _phi_ = 'phi': phi
    test 431 _PLUS_ = '+': True
    test 432 _PLUS_ = '+': +  FAILED, KNOWN, expected plus
    test 433 _PLUSMINUS_ = '+-': True
    test 434 _PLUSMINUS_ = '+-': +-  FAILED, KNOWN, expected plusminus
    test 435 _point_ = 'point': True
    test 436 _point_ = 'point': point
    test 437 _points_ = 'points': True
    test 438 _points_ = 'points': points
    test 439 _pole_ = 'pole': True
    test 440 _pole_ = 'pole': pole
    test 441 _precision_ = 'precision': True
    test 442 _precision_ = 'precision': precision
    test 443 _prime_vertical_ = 'prime_vertical': True
    test 444 _prime_vertical_ = 'prime_vertical': prime_vertical
    test 445 _pygeodesy_ = 'pygeodesy': True
    test 446 _pygeodesy_ = 'pygeodesy': pygeodesy
    test 447 _pygeodesy_abspath_ = 'pygeodesy_abspath': True
    test 448 _pygeodesy_abspath_ = 'pygeodesy_abspath': pygeodesy_abspath
    test 449 _PyPy__ = 'PyPy ': True
    test 450 _PyPy__ = 'PyPy ': pypy   FAILED, KNOWN, expected pypy
    test 451 _Python_ = 'Python': True
    test 452 _Python_ = 'Python': python
    test 453 _python_ = 'python': True
    test 454 _python_ = 'python': python
    test 455 _QUOTE1_ = "'": True
    test 456 _QUOTE1_ = "'": '  FAILED, KNOWN, expected quote1
    test 457 _QUOTE2_ = '"': True
    test 458 _QUOTE2_ = '"': "  FAILED, KNOWN, expected quote2
    test 459 _R_ = 'R': True
    test 460 _R_ = 'R': r
    test 461 _radians2_ = 'radians2': True
    test 462 _radians2_ = 'radians2': radians2
    test 463 _radians_ = 'radians': True
    test 464 _radians_ = 'radians': radians
    test 465 _radius1_ = 'radius1': True
    test 466 _radius1_ = 'radius1': radius1
    test 467 _radius2_ = 'radius2': True
    test 468 _radius2_ = 'radius2': radius2
    test 469 _radius_ = 'radius': True
    test 470 _radius_ = 'radius': radius
    test 471 _range_ = 'range': True
    test 472 _range_ = 'range': range
    test 473 _RANGLE_ = '>': True
    test 474 _RANGLE_ = '>': >  FAILED, KNOWN, expected rangle
    test 475 _RCURLY_ = '}': True
    test 476 _RCURLY_ = '}': }  FAILED, KNOWN, expected rcurly
    test 477 _reciprocal_ = 'reciprocal': True
    test 478 _reciprocal_ = 'reciprocal': reciprocal
    test 479 _reframe_ = 'reframe': True
    test 480 _reframe_ = 'reframe': reframe
    test 481 _resolution_ = 'resolution': True
    test 482 _resolution_ = 'resolution': resolution
    test 483 _rIn_ = 'rIn': True
    test 484 _rIn_ = 'rIn': rin
    test 485 _RPAREN_ = ')': True
    test 486 _RPAREN_ = ')': )  FAILED, KNOWN, expected rparen
    test 487 _RSQUARE_ = ']': True
    test 488 _RSQUARE_ = ']': ]  FAILED, KNOWN, expected rsquare
    test 489 _S12_ = 'S12': True
    test 490 _S12_ = 'S12': s12
    test 491 _s12_ = 's12': True
    test 492 _s12_ = 's12': s12
    test 493 _S_ = 'S': True
    test 494 _S_ = 'S': s
    test 495 _s_ = 's': True
    test 496 _s_ = 's': s
    test 497 _scalar_ = 'scalar': True
    test 498 _scalar_ = 'scalar': scalar
    test 499 _scale0_ = 'scale0': True
    test 500 _scale0_ = 'scale0': scale0
    test 501 _scale_ = 'scale': True
    test 502 _scale_ = 'scale': scale
    test 503 _scipy_ = 'scipy': True
    test 504 _scipy_ = 'scipy': scipy
    test 505 _SE_ = 'SE': True
    test 506 _SE_ = 'SE': se
    test 507 _semi_circular_ = 'semi-circular': True
    test 508 _semi_circular_ = 'semi-circular': semi-circular  FAILED, KNOWN, expected semi_circular
    test 509 _sep_ = 'sep': True
    test 510 _sep_ = 'sep': sep
    test 511 _singular_ = 'singular': True
    test 512 _singular_ = 'singular': singular
    test 513 _SLASH_ = '/': True
    test 514 _SLASH_ = '/': /  FAILED, KNOWN, expected slash
    test 515 _small_ = 'small': True
    test 516 _small_ = 'small': small
    test 517 _SPACE_ = ' ': True
    test 518 _SPACE_ = ' ':    FAILED, KNOWN, expected space
    test 519 _specified_ = 'specified': True
    test 520 _specified_ = 'specified': specified
    test 521 _Sphere_ = 'Sphere': True
    test 522 _Sphere_ = 'Sphere': sphere
    test 523 _spherical_ = 'spherical': True
    test 524 _spherical_ = 'spherical': spherical
    test 525 _STAR_ = '*': True
    test 526 _STAR_ = '*': *  FAILED, KNOWN, expected star
    test 527 _start_ = 'start': True
    test 528 _start_ = 'start': start
    test 529 _std_ = 'std': True
    test 530 _std_ = 'std': std
    test 531 _stdev_ = 'stdev': True
    test 532 _stdev_ = 'stdev': stdev
    test 533 _SW_ = 'SW': True
    test 534 _SW_ = 'SW': sw
    test 535 _tbd_ = 'tbd': True
    test 536 _tbd_ = 'tbd': tbd
    test 537 _TILDE_ = '~': True
    test 538 _TILDE_ = '~': ~  FAILED, KNOWN, expected tilde
    test 539 _to_ = 'to': True
    test 540 _to_ = 'to': to
    test 541 _tolerance_ = 'tolerance': True
    test 542 _tolerance_ = 'tolerance': tolerance
    test 543 _too_ = 'too': True
    test 544 _too_ = 'too': too
    test 545 _transform_ = 'transform': True
    test 546 _transform_ = 'transform': transform
    test 547 _UNDER_ = '_': True
    test 548 _UNDER_ = '_': _  FAILED, KNOWN, expected under
    test 549 _units_ = 'units': True
    test 550 _units_ = 'units': units
    test 551 _UNUSED_ = 'UNUSED': True
    test 552 _UNUSED_ = 'UNUSED': unused
    test 553 _up_ = 'up': True
    test 554 _up_ = 'up': up
    test 555 _UPS_ = 'UPS': True
    test 556 _UPS_ = 'UPS': ups
    test 557 _utf_8_ = 'utf-8': True
    test 558 _utf_8_ = 'utf-8': utf-8  FAILED, KNOWN, expected utf_8
    test 559 _UTM_ = 'UTM': True
    test 560 _UTM_ = 'UTM': utm
    test 561 _V_ = 'V': True
    test 562 _V_ = 'V': v
    test 563 _valid_ = 'valid': True
    test 564 _valid_ = 'valid': valid
    test 565 _value_ = 'value': True
    test 566 _value_ = 'value': value
    test 567 _version_ = 'version': True
    test 568 _version_ = 'version': version
    test 569 _vs_ = 'vs': True
    test 570 _vs_ = 'vs': vs
    test 571 _W_ = 'W': True
    test 572 _W_ = 'W': w
    test 573 _WGS72_ = 'WGS72': True
    test 574 _WGS72_ = 'WGS72': wgs72
    test 575 _WGS84_ = 'WGS84': True
    test 576 _WGS84_ = 'WGS84': wgs84
    test 577 _width_ = 'width': True
    test 578 _width_ = 'width': width
    test 579 _with_ = 'with': True
    test 580 _with_ = 'with': with
    test 581 _X_ = 'X': True
    test 582 _X_ = 'X': x
    test 583 _x_ = 'x': True
    test 584 _x_ = 'x': x
    test 585 _xyz_ = 'xyz': True
    test 586 _xyz_ = 'xyz': xyz
    test 587 _Y_ = 'Y': True
    test 588 _Y_ = 'Y': y
    test 589 _y_ = 'y': True
    test 590 _y_ = 'y': y
    test 591 _Z_ = 'Z': True
    test 592 _Z_ = 'Z': z
    test 593 _z_ = 'z': True
    test 594 _z_ = 'z': z
    test 595 _zone_ = 'zone': True
    test 596 _zone_ = 'zone': zone
    test 597 .tillC: ABC
    test 598 .fromX: XYZ
    test 599 .fromH.tillJ: HJ
    test 600 .fromN.tillP: NP

    test 601 machine: arm64
    test 602 sysctl: 0
    test 603 usage: python3 -m pygeodesy.interns
    test 604 version: (3, 12)

    60 of 604 testInterns.py tests (9.9%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 9.628 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testIters.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.PointsError from .errors by testIters.py line 11
# lazily imported pygeodesy.PointsIter from .iters by testIters.py line 11

    testing testIters.py 23.03.27 (module pygeodesy.iters 24.06.09) isLazy=3
# lazily imported pygeodesy.booleans by iters.py line 76
    test 1 i : 7
    test 2 dedup: False
    test 3 i : 0
    test 4 p0: True
    test 5 dedup: True
    test 6 copies: [0, 1, 2, 3, 4, 5, 6, 7]
    test 7 i : 0
    test 8 copies: 9
    test 9 p0: True
    test 10 copies: True
    test 11 copies: (0, 1, 2, 3, 4, 5, 6, 7)
    test 12 iter: 1
    test 13 iter: 2
    test 14 iter: 3
    test 15 re-iter: PointsError('points (0): too few')

    all 15 testIters.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 3.220 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testKarney.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.karney by testKarney.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testKarney.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testKarney.py line 11
# lazily imported pygeodesy.unroll180 from .utily by testKarney.py line 11
# lazily imported pygeodesy.wrap180 from .utily by testKarney.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testKarney.py line 197
# lazily imported pygeodesy.geodesicw by testKarney.py line 197
# lazily imported pygeodesy.geodesicx by testKarney.py line 197

    testing testKarney.py 23.09.22 (module pygeodesy.karney 24.06.23) isLazy=3

    103 tests skipped (103): no geographiclib

    testDirect(pygeodesy.geodesicx, 24.06.19)
# lazily imported pygeodesy.elliptic by gxline.py line 288
    test 1 Direct.lat2: -11.174909999999993  FAILED, KNOWN, expected -11.174910000000001
    test 2 Direct.lon2: -69.959209999999999
    test 3 Direct.azi2: 129.289270889708774
    test 4 Direct.a12: 80.507297142819738
    test 5 Direct.m12: 6273170.205530384555459  FAILED, KNOWN, expected 6273170.205530383624136
    test 6 Direct.M12: 0.166063184473861
    test 7 Direct.M21: 0.164791169456130  FAILED, KNOWN, expected 0.164791169456129
    test 8 Direct.S12: 12841384694976.431640625000000
    test 9 Direct.lat2: 77.031959999999998
    test 10 Direct.lon2: 197.182339999999954  FAILED, KNOWN, expected 197.182340000000011
    test 11 Direct.azi2: 109.112041110671470  FAILED, KNOWN, expected 109.112041110671512
    test 12 Direct.a12: 36.892740690445883  FAILED, KNOWN, expected 36.892740690445891
    test 13 Direct.m12: 3828869.334438759367913  FAILED, KNOWN, expected 3828869.334438760764897
    test 14 Direct.M12: 0.800763496080926
    test 15 Direct.M21: 0.801010069842010
    test 16 Direct.S12: 61674961290615.585937500000000  FAILED, KNOWN, expected 61674961290615.617187500000000
    test 17 Direct.lat2: 41.841380000000001
    test 18 Direct.lon2: 98.566350000000000
    test 19 Direct.azi2: -41.843599514404673  FAILED, KNOWN, expected -41.843599514404659
    test 20 Direct.a12: 75.629304910115238  FAILED, KNOWN, expected 75.629304910115223
    test 21 Direct.m12: 6161154.577311059460044  FAILED, KNOWN, expected 6161154.577311061322689
    test 22 Direct.M12: 0.248163392339504
    test 23 Direct.M21: 0.249302512036279
    test 24 Direct.S12: -6637997720646.717773437500000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 25 Direct.lat2: -12.706310000000002  FAILED, KNOWN, expected -12.706310000000000
    test 26 Direct.lon2: 285.903439999999989
    test 27 Direct.azi2: 2.512956620913672  FAILED, KNOWN, expected 2.512956620913668
    test 28 Direct.a12: 100.278634181155766  FAILED, KNOWN, expected 100.278634181155752
    test 29 Direct.m12: 6289939.567044668830931
    test 30 Direct.M12: -0.171994902747004
    test 31 Direct.M21: -0.177225695263457
    test 32 Direct.S12: -121287239862139.718750000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 33 Direct.lat2: -15.847839999999977  FAILED, KNOWN, expected -15.847840000000000
    test 34 Direct.lon2: 5.935569999999984  FAILED, KNOWN, expected 5.935570000000000
    test 35 Direct.azi2: -20.787484651536982  FAILED, KNOWN, expected -20.787484651536989
    test 36 Direct.a12: 144.640108810286279  FAILED, KNOWN, expected 144.640108810286250
    test 37 Direct.m12: 3732902.158387716859579  FAILED, KNOWN, expected 3732902.158387718722224
    test 38 Direct.M12: -0.812736387000705
    test 39 Direct.M21: -0.812998005191545
    test 40 Direct.S12: 97825992354058.703125000000000

    testInverse(pygeodesy.geodesicx, 24.06.19)
    test 41 Inverse.lat2: -11.174910000000001
    test 42 Inverse.lon2: -69.959209999999999
    test 43 Inverse.azi1: 111.098748429560331
    test 44 Inverse.azi2: 129.289270889708774
    test 45 Inverse.s12: 8935244.560481829568744
    test 46 Inverse.a12: 80.507297142819752  FAILED, KNOWN, expected 80.507297142819738
    test 47 Inverse.m12: 6273170.205530383624136
    test 48 Inverse.M12: 0.166063184473861
    test 49 Inverse.M21: 0.164791169456129
    test 50 Inverse.S12: 12841384694976.433593750000000  FAILED, KNOWN, expected 12841384694976.431640625000000
    test 51 Inverse.lat2: 77.031959999999998
    test 52 Inverse.lon2: 197.182340000000011
    test 53 Inverse.azi1: 22.020059880982814  FAILED, KNOWN, expected 22.020059880982799
    test 54 Inverse.azi2: 109.112041110671527  FAILED, KNOWN, expected 109.112041110671512
    test 55 Inverse.s12: 4105086.171392444986850  FAILED, KNOWN, expected 4105086.171392440795898
    test 56 Inverse.a12: 36.892740690445905  FAILED, KNOWN, expected 36.892740690445891
    test 57 Inverse.m12: 3828869.334438761696219  FAILED, KNOWN, expected 3828869.334438760764897
    test 58 Inverse.M12: 0.800763496080926
    test 59 Inverse.M21: 0.801010069842010
    test 60 Inverse.S12: 61674961290615.617187500000000
    test 61 Inverse.lat2: 41.841380000000001
    test 62 Inverse.lon2: 98.566350000000000
    test 63 Inverse.azi1: -32.444568764331898  FAILED, KNOWN, expected -32.444568764331891
    test 64 Inverse.azi2: -41.843599514404666  FAILED, KNOWN, expected -41.843599514404659
    test 65 Inverse.s12: 8394328.894657671451569
    test 66 Inverse.a12: 75.629304910115223
    test 67 Inverse.m12: 6161154.577311059460044  FAILED, KNOWN, expected 6161154.577311061322689
    test 68 Inverse.M12: 0.248163392339504
    test 69 Inverse.M21: 0.249302512036279
    test 70 Inverse.S12: -6637997720646.715820312500000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 71 Inverse.lat2: -12.706310000000000
    test 72 Inverse.lon2: 285.903439999999989
    test 73 Inverse.azi1: 173.734912408784027
    test 74 Inverse.azi2: 2.512956620913676  FAILED, KNOWN, expected 2.512956620913668
    test 75 Inverse.s12: 11150344.231208024546504
    test 76 Inverse.a12: 100.278634181155766  FAILED, KNOWN, expected 100.278634181155752
    test 77 Inverse.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 78 Inverse.M12: -0.171994902747004
    test 79 Inverse.M21: -0.177225695263457
    test 80 Inverse.S12: -121287239862139.718750000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 81 Inverse.lat2: -15.847840000000000
    test 82 Inverse.lon2: 5.935570000000000
    test 83 Inverse.azi1: -159.033557661192930
    test 84 Inverse.azi2: -20.787484651536985  FAILED, KNOWN, expected -20.787484651536989
    test 85 Inverse.s12: 16076603.163118068128824
    test 86 Inverse.a12: 144.640108810286250
    test 87 Inverse.m12: 3732902.158387719187886  FAILED, KNOWN, expected 3732902.158387718722224
    test 88 Inverse.M12: -0.812736387000705
    test 89 Inverse.M21: -0.812998005191545
    test 90 Inverse.S12: 97825992354058.703125000000000

    testInverseLine(pygeodesy.geodesicx, 24.06.19)
    test 91 InverseLine[0].lat: 40.640
    test 92 InverseLine[0].lon: -73.779
    test 93 InverseLine[1].lat: 49.825  FAILED, KNOWN, expected 49.829
    test 94 InverseLine[1].lon: -72.962
    test 95 InverseLine[2].lat: 58.992  FAILED, KNOWN, expected 58.994
    test 96 InverseLine[2].lon: -71.759
    test 97 InverseLine[3].lat: 68.132  FAILED, KNOWN, expected 68.127
    test 98 InverseLine[3].lon: -69.677  FAILED, KNOWN, expected -69.678
    test 99 InverseLine[4].lat: 77.203  FAILED, KNOWN, expected 77.190
    test 100 InverseLine[4].lon: -64.830  FAILED, KNOWN, expected -64.842
    test 101 InverseLine[5].lat: 85.794  FAILED, KNOWN, expected 85.774
    test 102 InverseLine[5].lon: -39.425  FAILED, KNOWN, expected -39.628
    test 103 InverseLine[6].lat: 83.690  FAILED, KNOWN, expected 83.724
    test 104 InverseLine[6].lon: 80.754  FAILED, KNOWN, expected 80.619
    test 105 InverseLine[7].lat: 74.828  FAILED, KNOWN, expected 74.875
    test 106 InverseLine[7].lon: 94.774  FAILED, KNOWN, expected 94.743
    test 107 InverseLine[8].lat: 65.730  FAILED, KNOWN, expected 65.786
    test 108 InverseLine[8].lon: 98.489  FAILED, KNOWN, expected 98.474
    test 109 InverseLine[9].lat: 56.582  FAILED, KNOWN, expected 56.643
    test 110 InverseLine[9].lon: 100.254  FAILED, KNOWN, expected 100.246
    test 111 InverseLine[10].lat: 47.409  FAILED, KNOWN, expected 47.471
    test 112 InverseLine[10].lon: 101.327  FAILED, KNOWN, expected 101.321
    test 113 InverseLine[11].lat: 38.220  FAILED, KNOWN, expected 38.277
    test 114 InverseLine[11].lon: 102.079  FAILED, KNOWN, expected 102.075
    test 115 InverseLine[12].lat: 29.017  FAILED, KNOWN, expected 29.066
    test 116 InverseLine[12].lon: 102.662  FAILED, KNOWN, expected 102.659
    test 117 InverseLine[13].lat: 19.804  FAILED, KNOWN, expected 19.839
    test 118 InverseLine[13].lon: 103.148  FAILED, KNOWN, expected 103.147
    test 119 InverseLine[14].lat: 10.584  FAILED, KNOWN, expected 10.602
    test 120 InverseLine[14].lon: 103.581
    test 121 InverseLine[15].lat: 1.359
    test 122 InverseLine[15].lon: 103.989

    testGeodCalc(pygeodesy.ellipsoidalExact, 24.06.11)
# lazily imported pygeodesy.booleans by karney.py line 724
    test 123 area: 13662703680020
    test 124 perimeter: 16830891.356049

    testMask(pygeodesy.geodesicx, 24.06.19)
    test 125 Geodesic.EMPTY: 0
    test 126 Geodesic.LATITUDE: 128
    test 127 Geodesic.LONGITUDE: 256
    test 128 Geodesic.AZIMUTH: 512
    test 129 Geodesic.DISTANCE: 1024
    test 130 Geodesic.STANDARD: 3968
    test 131 Geodesic.DISTANCE_IN: 2048
    test 132 Geodesic.REDUCEDLENGTH: 4096
    test 133 Geodesic.GEODESICSCALE: 8192
    test 134 Geodesic.AREA: 16384
    test 135 Geodesic.ALL: 32640
    test 136 Geodesic.LONG_UNROLL: 65536
    test 137 Geodesic.ALL: 0x7f80
    test 138 toStr: AREA|AZIMUTH|DISTANCE|DISTANCE_IN|GEODESICSCALE|LATITUDE|LONGITUDE|REDUCEDLENGTH

    102 tests skipped (205): no GeodSolve

    testMath(pygeodesy.karney, 24.06.23)
    test 139 _diff182(-180, -180): 0.0  FAILED, KNOWN, expected -0.0
    test 140 _diff182(-180, -90): 90.0
    test 141 _diff182(-180, 0): 180.0
    test 142 _diff182(-180, 90): -90.0
    test 143 _diff182(-180, 180): 0.0
    test 144 _diff182(-90, -180): -90.0
    test 145 _diff182(-90, -90): 0.0  FAILED, KNOWN, expected -0.0
    test 146 _diff182(-90, 0): 90.0
    test 147 _diff182(-90, 90): 180.0
    test 148 _diff182(-90, 180): -90.0
    test 149 _diff182(0, -180): -180.0
    test 150 _diff182(0, -90): -90.0
    test 151 _diff182(0, 0): 0.0  FAILED, KNOWN, expected -0.0
    test 152 _diff182(0, 90): 90.0
    test 153 _diff182(0, 180): 180.0
    test 154 _diff182(90, -180): 90.0
    test 155 _diff182(90, -90): -180.0
    test 156 _diff182(90, 0): -90.0
    test 157 _diff182(90, 90): 0.0  FAILED, KNOWN, expected -0.0
    test 158 _diff182(90, 180): 90.0
    test 159 _diff182(180, -180): -0.0
    test 160 _diff182(180, -90): 90.0
    test 161 _diff182(180, 0): -180.0
    test 162 _diff182(180, 90): -90.0
    test 163 _diff182(180, 180): 0.0  FAILED, KNOWN, expected -0.0
    test 164 _norm180(-361): -1.0
    test 165  wrap180(-361): -1.0
    test 166 _norm180(-360): -0.0
    test 167  wrap180(-360): 0.0  FAILED, KNOWN, expected -0.0
    test 168 _norm180(-180): -180.0  FAILED, KNOWN, expected 180.0
    test 169  wrap180(-180): -180.0  FAILED, KNOWN, expected 180.0
    test 170 _norm180(-90): -90.0
    test 171  wrap180(-90): -90.0
    test 172 _norm180(0): 0.0
    test 173  wrap180(0): 0.0
    test 174 _norm180(0): 0.0
    test 175  wrap180(0): 0.0
    test 176 _norm180(90): 90.0
    test 177  wrap180(90): 90.0
    test 178 _norm180(180): 180.0
    test 179  wrap180(180): 180.0
    test 180 _norm180(360): 0.0
    test 181  wrap180(360): 0.0
    test 182 _norm180(361): 1.0
    test 183  wrap180(361): 1.0
    test 184 _fsum2_: 1.0e-20
    test 185 _fsum2_: 0.0
    test 186 _fsum2_: -8.0e-20  FAILED, KNOWN, expected 1.0e-20
    test 187 _fsum2_: 1.0e-20
    test 188 _fsum2_: -3.6893488147419103e+19  FAILED, KNOWN, expected 1.0
    test 189 _fsum2_: 1.002978273411373e+18
    test 190 unroll(-30, 0): (30.0, 0.0)
    test 191 unroll(-30, 30): (60.0, 30.0)
    test 192 unroll(-30, 60): (90.0, 60.0)
    test 193 unroll(-30, 90): (120.0, 90.0)
    test 194 unroll(-30, 120): (150.0, 120.0)
    test 195 unroll(-30, 150): (180.0, 150.0)
    test 196 unroll(-30, 180): (-150.0, -180.0)
    test 197 unroll(-30, 210): (-120.0, -150.0)
    test 198 unroll(-30, 240): (-90.0, -120.0)
    test 199 unroll(-30, 270): (-60.0, -90.0)
    test 200 unroll(-30, 300): (-30.0, -60.0)
    test 201 unroll(-30, 330): (0.0, -30.0)
    test 202 unroll(-30, 360): (30.0, 0.0)

    73 of 202 testKarney.py tests (36.1%) FAILED, ALL KNOWN, 205 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 434.711 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testKtm.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.fstr from .streprs by testKtm.py line 10
# lazily imported pygeodesy.hypot from .fmath by testKtm.py line 10
# lazily imported pygeodesy.sincos2d from .utily by testKtm.py line 10
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testKtm.py line 56
# lazily imported pygeodesy.ExactTransverseMercator from .etm by testKtm.py line 56
# lazily imported pygeodesy.ktm by testKtm.py line 56
# lazily imported pygeodesy.KTransverseMercator from .ktm by testKtm.py line 56

    testing testKtm.py 23.03.27 (module pygeodesy.ktm 24.06.11) isLazy=3

    test 1 _TM: KTransverseMercator(ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=7)
    test 2 forward 0N (80.000, 0.000) -/-: 0.0, 8881585.815988, 0.0, 0.9996
    test 3 reverse 0N (80.000, 0.000) -/-: 0.0
    test 4 forward 3N (79.890, 8.374) -/-: 163544.38007, 8881136.361771, 8.245542, 0.999927
    test 5 reverse 3N (79.890, 8.374) -/-: 1.7763568394002505e-15
    test 6 forward 6N (79.562, 16.725) -/-: 333788.634116, 8880946.730424, 16.462884, 1.000962
    test 7 reverse 6N (79.562, 16.725) -/-: 1.5888218580782548e-14
    test 8 forward 9N (79.015, 25.030) -/-: 516782.400098, 8884389.933155, 24.625783, 1.002865
    test 9 reverse 9N (79.015, 25.030) -/-: 2.1316282072803006e-14
    test 10 forward 12N (78.252, 33.266) -/-: 717349.637417, 8896761.249834, 32.712011, 1.005894
    test 11 reverse 12N (78.252, 33.266) -/-: 5.1728291973635394e-14
    test 12 forward 15N (77.274, 41.411) -/-: 938645.229361, 8924845.3123, 40.705476, 1.010384
    test 13 reverse 15N (77.274, 41.411) -/-: 0.0
    test 14 forward 18N (76.085, 49.443) -/-: 1181870.215451, 8976407.252949, 48.598167, 1.016714
    test 15 reverse 18N (76.085, 49.443) -/-: 3.8263897345803626e-14
    test 16 forward 21N (74.686, 57.339) -/-: 1446137.252018, 9059670.735504, 56.391495, 1.025259
    test 17 reverse 21N (74.686, 57.339) -/-: 5.859285502108464e-14
    test 18 forward 24N (73.084, 65.078) -/-: 1728450.251911, 9182823.938232, 64.096558, 1.036319
    test 19 reverse 24N (73.084, 65.078) -/-: 1.4210854715202004e-14
    test 20 forward 27N (71.281, 72.638) -/-: 2023752.790526, 9353559.771346, 71.732868, 1.050046
    test 21 reverse 27N (71.281, 72.638) -/-: 1.4210854715202004e-14
    test 22 forward 30N (69.282, 80.000) -/-: 2325015.074835, 9578621.128889, 79.325231, 1.066355
    test 23 reverse 30N (69.282, 80.000) -/-: 1.4210854715202004e-14
    test 24 forward 33N (67.094, 87.142) -/-: 2623368.28288, 9863301.12097, 86.898617, 1.084836
    test 25 reverse 33N (67.094, 87.142) -/-: 0.0
    test 26 forward 36N (64.721, 94.046) -/-: 2908348.733697, 10210857.598605, 94.471204, 1.104695
    test 27 reverse 36N (64.721, 94.046) -/-: 0.0
    test 28 forward 39N (62.172, 100.691) -/-: 3168362.707459, 10621853.317461, 102.04623, 1.124739
    test 29 reverse 39N (62.172, 100.691) -/-: 0.0
    test 30 forward 42N (59.452, 107.061) -/-: 3391492.622467, 11093528.387239, 109.604086, 1.14345
    test 31 reverse 42N (59.452, 107.061) -/-: 1.4210854715202004e-14
    test 32 forward 45N (56.569, 113.137) -/-: 3566696.824822, 11619422.467571, 117.096854, 1.159166
    test 33 reverse 45N (56.569, 113.137) -/-: 1.5888218580782548e-14
    test 34 forward 48N (53.530, 118.903) -/-: 3685290.742854, 12189522.028618, 124.447841, 1.170375
    test 35 reverse 48N (53.530, 118.903) -/-: 1.4210854715202004e-14
    test 36 forward 51N (50.346, 124.343) -/-: 3742386.824274, 12791126.616764, 131.557863, 1.176031
    test 37 reverse 51N (50.346, 124.343) -/-: 1.4210854715202004e-14
    test 38 forward 54N (47.023, 129.443) -/-: 3737846.053669, 13410380.03778, 138.317827, 1.175799
    test 39 reverse 54N (47.023, 129.443) -/-: 2.842170943040401e-14
    test 40 forward 57N (43.571, 134.187) -/-: 3676387.634221, 14034104.572541, 144.624552, 1.170121
    test 41 reverse 57N (43.571, 134.187) -/-: 0.0
    test 42 forward 60N (40.000, 138.564) -/-: 3566810.754496, 14651410.305646, 150.395289, 1.16007
    test 43 reverse 60N (40.000, 138.564) -/-: 0.0
    test 44 forward 63N (36.319, 142.561) -/-: 3420621.906486, 15254653.660248, 155.577129, 1.147079
    test 45 reverse 63N (36.319, 142.561) -/-: 7.105427357601002e-15
    test 46 forward 66N (32.539, 146.167) -/-: 3250522.133697, 15839614.666766, 160.149958, 1.132638
    test 47 reverse 66N (32.539, 146.167) -/-: 7.105427357601002e-15
    test 48 forward 69N (28.669, 149.373) -/-: 3069132.144368, 16405050.640186, 164.124094, 1.118063
    test 49 reverse 69N (28.669, 149.373) -/-: 3.552713678800501e-15
    test 50 forward 72N (24.721, 152.169) -/-: 2888128.173431, 16951919.948156, 167.534978, 1.104377
    test 51 reverse 72N (24.721, 152.169) -/-: 1.0658141036401503e-14
    test 52 forward 75N (20.706, 154.548) -/-: 2717773.256417, 17482549.021439, 170.437193, 1.09228
    test 53 reverse 75N (20.706, 154.548) -/-: 1.7763568394002505e-14
    test 54 forward 78N (16.633, 156.504) -/-: 2566730.586316, 17999918.486885, 172.899178, 1.082187
    test 55 reverse 78N (16.633, 156.504) -/-: 1.7763568394002505e-14
    test 56 forward 81N (12.515, 158.030) -/-: 2442031.891673, 18507145.758, 174.99917, 1.074303
    test 57 reverse 81N (12.515, 158.030) -/-: 1.2434497875801753e-14
    test 58 forward 84N (8.362, 159.124) -/-: 2349105.316925, 19007174.828239, 176.822266, 1.068689
    test 59 reverse 84N (8.362, 159.124) -/-: 1.7763568394002505e-14
    test 60 forward 87N (4.187, 159.781) -/-: 2291809.478825, 19502649.329559, 178.458273, 1.06534
    test 61 reverse 87N (4.187, 159.781) -/-: 8.881784197001252e-15
    test 62 forward 90N (0.000, 160.000) -/-: 2272454.379192, -19995929.886042, -180.0, 1.064227
    test 63 reverse 90N (0.000, 160.000) -/-: 2.402002211154445e-14
    test 64 forward 93N (-4.187, 159.781) -/-: 2291809.478825, -19502649.329559, -178.458273, 1.06534
    test 65 reverse 93N (-4.187, 159.781) -/-: 6.217248937900877e-15
    test 66 forward 96N (-8.362, 159.124) -/-: 2349105.316925, -19007174.828239, -176.822266, 1.068689
    test 67 reverse 96N (-8.362, 159.124) -/-: 1.5987211554602254e-14
    test 68 forward 99N (-12.515, 158.030) -/-: 2442031.891673, -18507145.758, -174.99917, 1.074303
    test 69 reverse 99N (-12.515, 158.030) -/-: 7.105427357601002e-15
    test 70 forward 102N (-16.633, 156.504) -/-: 2566730.586316, -17999918.486885, -172.899178, 1.082187
    test 71 reverse 102N (-16.633, 156.504) -/-: 2.842170943040401e-14
    test 72 forward 105N (-20.706, 154.548) -/-: 2717773.256417, -17482549.021439, -170.437193, 1.09228
    test 73 reverse 105N (-20.706, 154.548) -/-: 1.7763568394002505e-14
    test 74 forward 108N (-24.721, 152.169) -/-: 2888128.173431, -16951919.948156, -167.534978, 1.104377
    test 75 reverse 108N (-24.721, 152.169) -/-: 7.105427357601002e-15
    test 76 forward 111N (-28.669, 149.373) -/-: 3069132.144368, -16405050.640186, -164.124094, 1.118063
    test 77 reverse 111N (-28.669, 149.373) -/-: 7.105427357601002e-15
    test 78 forward 114N (-32.539, 146.167) -/-: 3250522.133697, -15839614.666766, -160.149958, 1.132638
    test 79 reverse 114N (-32.539, 146.167) -/-: 7.105427357601002e-15
    test 80 forward 117N (-36.319, 142.561) -/-: 3420621.906486, -15254653.660248, -155.577129, 1.147079
    test 81 reverse 117N (-36.319, 142.561) -/-: 7.105427357601002e-15
    test 82 forward 120N (-40.000, 138.564) -/-: 3566810.754496, -14651410.305646, -150.395289, 1.16007
    test 83 reverse 120N (-40.000, 138.564) -/-: 0.0
    test 84 forward 123N (-43.571, 134.187) -/-: 3676387.634221, -14034104.572541, -144.624552, 1.170121
    test 85 reverse 123N (-43.571, 134.187) -/-: 0.0
    test 86 forward 126N (-47.023, 129.443) -/-: 3737846.053669, -13410380.03778, -138.317827, 1.175799
    test 87 reverse 126N (-47.023, 129.443) -/-: 2.842170943040401e-14
    test 88 forward 129N (-50.346, 124.343) -/-: 3742386.824274, -12791126.616764, -131.557863, 1.176031
    test 89 reverse 129N (-50.346, 124.343) -/-: 1.4210854715202004e-14
    test 90 forward 132N (-53.530, 118.903) -/-: 3685290.742854, -12189522.028618, -124.447841, 1.170375
    test 91 reverse 132N (-53.530, 118.903) -/-: 1.4210854715202004e-14
    test 92 forward 135N (-56.569, 113.137) -/-: 3566696.824822, -11619422.467571, -117.096854, 1.159166
    test 93 reverse 135N (-56.569, 113.137) -/-: 7.105427357601002e-15
    test 94 forward 138N (-59.452, 107.061) -/-: 3391492.622467, -11093528.387239, -109.604086, 1.14345
    test 95 reverse 138N (-59.452, 107.061) -/-: 1.4210854715202004e-14
    test 96 forward 141N (-62.172, 100.691) -/-: 3168362.707459, -10621853.317461, -102.04623, 1.124739
    test 97 reverse 141N (-62.172, 100.691) -/-: 0.0
    test 98 forward 144N (-64.721, 94.046) -/-: 2908348.733697, -10210857.598605, -94.471204, 1.104695
    test 99 reverse 144N (-64.721, 94.046) -/-: 0.0
    test 100 forward 147N (-67.094, 87.142) -/-: 2623368.28288, -9863301.12097, -86.898617, 1.084836
    test 101 reverse 147N (-67.094, 87.142) -/-: 0.0
    test 102 forward 150N (-69.282, 80.000) -/-: 2325015.074835, -9578621.128889, -79.325231, 1.066355
    test 103 reverse 150N (-69.282, 80.000) -/-: 2.842170943040401e-14
    test 104 forward 153N (-71.281, 72.638) -/-: 2023752.790526, -9353559.771346, -71.732868, 1.050046
    test 105 reverse 153N (-71.281, 72.638) -/-: 1.4210854715202004e-14
    test 106 forward 156N (-73.084, 65.078) -/-: 1728450.251911, -9182823.938232, -64.096558, 1.036319
    test 107 reverse 156N (-73.084, 65.078) -/-: 1.4210854715202004e-14
    test 108 forward 159N (-74.686, 57.339) -/-: 1446137.252018, -9059670.735504, -56.391495, 1.025259
    test 109 reverse 159N (-74.686, 57.339) -/-: 1.4210854715202004e-14
    test 110 forward 162N (-76.085, 49.443) -/-: 1181870.215451, -8976407.252949, -48.598167, 1.016714
    test 111 reverse 162N (-76.085, 49.443) -/-: 3.552713678800501e-14
    test 112 forward 165N (-77.274, 41.411) -/-: 938645.229361, -8924845.3123, -40.705476, 1.010384
    test 113 reverse 165N (-77.274, 41.411) -/-: 0.0
    test 114 forward 168N (-78.252, 33.266) -/-: 717349.637417, -8896761.249834, -32.712011, 1.005894
    test 115 reverse 168N (-78.252, 33.266) -/-: 2.5618982671915014e-14
    test 116 forward 171N (-79.015, 25.030) -/-: 516782.400098, -8884389.933155, -24.625783, 1.002865
    test 117 reverse 171N (-79.015, 25.030) -/-: 2.842170943040401e-14
    test 118 forward 174N (-79.562, 16.725) -/-: 333788.634116, -8880946.730424, -16.462884, 1.000962
    test 119 reverse 174N (-79.562, 16.725) -/-: 1.7763568394002505e-14
    test 120 forward 177N (-79.890, 8.374) -/-: 163544.38007, -8881136.361771, -8.245542, 0.999927
    test 121 reverse 177N (-79.890, 8.374) -/-: 1.7763568394002505e-15
    test 122 forward 180N (-80.000, 0.000) -/-: 0.0, -8881585.815988, 0.0, 0.9996
    test 123 reverse 180N (-80.000, 0.000) -/-: 0.0
    test 124 forward 183N (-79.890, -8.374) -/-: -163544.38007, -8881136.361771, 8.245542, 0.999927
    test 125 reverse 183N (-79.890, -8.374) -/-: 1.7763568394002505e-15
    test 126 forward 186N (-79.562, -16.725) -/-: -333788.634116, -8880946.730424, 16.462884, 1.000962
    test 127 reverse 186N (-79.562, -16.725) -/-: 1.5888218580782548e-14
    test 128 forward 189N (-79.015, -25.030) -/-: -516782.400098, -8884389.933155, 24.625783, 1.002865
    test 129 reverse 189N (-79.015, -25.030) -/-: 2.1316282072803006e-14
    test 130 forward 192N (-78.252, -33.266) -/-: -717349.637417, -8896761.249834, 32.712011, 1.005894
    test 131 reverse 192N (-78.252, -33.266) -/-: 5.1728291973635394e-14
    test 132 forward 195N (-77.274, -41.411) -/-: -938645.229361, -8924845.3123, 40.705476, 1.010384
    test 133 reverse 195N (-77.274, -41.411) -/-: 0.0
    test 134 forward 198N (-76.085, -49.443) -/-: -1181870.215451, -8976407.252949, 48.598167, 1.016714
    test 135 reverse 198N (-76.085, -49.443) -/-: 3.8263897345803626e-14
    test 136 forward 201N (-74.686, -57.339) -/-: -1446137.252018, -9059670.735504, 56.391495, 1.025259
    test 137 reverse 201N (-74.686, -57.339) -/-: 5.859285502108464e-14
    test 138 forward 204N (-73.084, -65.078) -/-: -1728450.251911, -9182823.938232, 64.096558, 1.036319
    test 139 reverse 204N (-73.084, -65.078) -/-: 1.4210854715202004e-14
    test 140 forward 207N (-71.281, -72.638) -/-: -2023752.790526, -9353559.771346, 71.732868, 1.050046
    test 141 reverse 207N (-71.281, -72.638) -/-: 1.4210854715202004e-14
    test 142 forward 210N (-69.282, -80.000) -/-: -2325015.074835, -9578621.128889, 79.325231, 1.066355
    test 143 reverse 210N (-69.282, -80.000) -/-: 1.4210854715202004e-14
    test 144 forward 213N (-67.094, -87.142) -/-: -2623368.28288, -9863301.12097, 86.898617, 1.084836
    test 145 reverse 213N (-67.094, -87.142) -/-: 0.0
    test 146 forward 216N (-64.721, -94.046) -/-: -2908348.733697, -10210857.598605, 94.471204, 1.104695
    test 147 reverse 216N (-64.721, -94.046) -/-: 0.0
    test 148 forward 219N (-62.172, -100.691) -/-: -3168362.707459, -10621853.317461, 102.04623, 1.124739
    test 149 reverse 219N (-62.172, -100.691) -/-: 0.0
    test 150 forward 222N (-59.452, -107.061) -/-: -3391492.622467, -11093528.387239, 109.604086, 1.14345
    test 151 reverse 222N (-59.452, -107.061) -/-: 1.4210854715202004e-14
    test 152 forward 225N (-56.569, -113.137) -/-: -3566696.824822, -11619422.467571, 117.096854, 1.159166
    test 153 reverse 225N (-56.569, -113.137) -/-: 1.5888218580782548e-14
    test 154 forward 228N (-53.530, -118.903) -/-: -3685290.742854, -12189522.028618, 124.447841, 1.170375
    test 155 reverse 228N (-53.530, -118.903) -/-: 1.4210854715202004e-14
    test 156 forward 231N (-50.346, -124.343) -/-: -3742386.824274, -12791126.616764, 131.557863, 1.176031
    test 157 reverse 231N (-50.346, -124.343) -/-: 1.4210854715202004e-14
    test 158 forward 234N (-47.023, -129.443) -/-: -3737846.053669, -13410380.03778, 138.317827, 1.175799
    test 159 reverse 234N (-47.023, -129.443) -/-: 2.842170943040401e-14
    test 160 forward 237N (-43.571, -134.187) -/-: -3676387.634221, -14034104.572541, 144.624552, 1.170121
    test 161 reverse 237N (-43.571, -134.187) -/-: 0.0
    test 162 forward 240N (-40.000, -138.564) -/-: -3566810.754496, -14651410.305646, 150.395289, 1.16007
    test 163 reverse 240N (-40.000, -138.564) -/-: 0.0
    test 164 forward 243N (-36.319, -142.561) -/-: -3420621.906486, -15254653.660248, 155.577129, 1.147079
    test 165 reverse 243N (-36.319, -142.561) -/-: 7.105427357601002e-15
    test 166 forward 246N (-32.539, -146.167) -/-: -3250522.133697, -15839614.666766, 160.149958, 1.132638
    test 167 reverse 246N (-32.539, -146.167) -/-: 7.105427357601002e-15
    test 168 forward 249N (-28.669, -149.373) -/-: -3069132.144368, -16405050.640186, 164.124094, 1.118063
    test 169 reverse 249N (-28.669, -149.373) -/-: 3.552713678800501e-15
    test 170 forward 252N (-24.721, -152.169) -/-: -2888128.173431, -16951919.948156, 167.534978, 1.104377
    test 171 reverse 252N (-24.721, -152.169) -/-: 1.0658141036401503e-14
    test 172 forward 255N (-20.706, -154.548) -/-: -2717773.256417, -17482549.021439, 170.437193, 1.09228
    test 173 reverse 255N (-20.706, -154.548) -/-: 1.7763568394002505e-14
    test 174 forward 258N (-16.633, -156.504) -/-: -2566730.586316, -17999918.486885, 172.899178, 1.082187
    test 175 reverse 258N (-16.633, -156.504) -/-: 1.7763568394002505e-14
    test 176 forward 261N (-12.515, -158.030) -/-: -2442031.891673, -18507145.758, 174.99917, 1.074303
    test 177 reverse 261N (-12.515, -158.030) -/-: 1.2434497875801753e-14
    test 178 forward 264N (-8.362, -159.124) -/-: -2349105.316925, -19007174.828239, 176.822266, 1.068689
    test 179 reverse 264N (-8.362, -159.124) -/-: 1.7763568394002505e-14
    test 180 forward 267N (-4.187, -159.781) -/-: -2291809.478825, -19502649.329559, 178.458273, 1.06534
    test 181 reverse 267N (-4.187, -159.781) -/-: 8.881784197001252e-15
    test 182 forward 270N (0.000, -160.000) -/-: -2272454.379192, -19995929.886042, 180.0, 1.064227
    test 183 reverse 270N (0.000, -160.000) -/-: 2.402002211154445e-14
    test 184 forward 273N (4.187, -159.781) -/-: -2291809.478825, 19502649.329559, -178.458273, 1.06534
    test 185 reverse 273N (4.187, -159.781) -/-: 6.217248937900877e-15
    test 186 forward 276N (8.362, -159.124) -/-: -2349105.316925, 19007174.828239, -176.822266, 1.068689
    test 187 reverse 276N (8.362, -159.124) -/-: 1.5987211554602254e-14
    test 188 forward 279N (12.515, -158.030) -/-: -2442031.891673, 18507145.758, -174.99917, 1.074303
    test 189 reverse 279N (12.515, -158.030) -/-: 7.105427357601002e-15
    test 190 forward 282N (16.633, -156.504) -/-: -2566730.586316, 17999918.486885, -172.899178, 1.082187
    test 191 reverse 282N (16.633, -156.504) -/-: 2.842170943040401e-14
    test 192 forward 285N (20.706, -154.548) -/-: -2717773.256417, 17482549.021439, -170.437193, 1.09228
    test 193 reverse 285N (20.706, -154.548) -/-: 1.7763568394002505e-14
    test 194 forward 288N (24.721, -152.169) -/-: -2888128.173431, 16951919.948156, -167.534978, 1.104377
    test 195 reverse 288N (24.721, -152.169) -/-: 7.105427357601002e-15
    test 196 forward 291N (28.669, -149.373) -/-: -3069132.144368, 16405050.640186, -164.124094, 1.118063
    test 197 reverse 291N (28.669, -149.373) -/-: 7.105427357601002e-15
    test 198 forward 294N (32.539, -146.167) -/-: -3250522.133697, 15839614.666766, -160.149958, 1.132638
    test 199 reverse 294N (32.539, -146.167) -/-: 7.105427357601002e-15
    test 200 forward 297N (36.319, -142.561) -/-: -3420621.906486, 15254653.660248, -155.577129, 1.147079
    test 201 reverse 297N (36.319, -142.561) -/-: 7.105427357601002e-15
    test 202 forward 300N (40.000, -138.564) -/-: -3566810.754496, 14651410.305646, -150.395289, 1.16007
    test 203 reverse 300N (40.000, -138.564) -/-: 0.0
    test 204 forward 303N (43.571, -134.187) -/-: -3676387.634221, 14034104.572541, -144.624552, 1.170121
    test 205 reverse 303N (43.571, -134.187) -/-: 0.0
    test 206 forward 306N (47.023, -129.443) -/-: -3737846.053669, 13410380.03778, -138.317827, 1.175799
    test 207 reverse 306N (47.023, -129.443) -/-: 2.842170943040401e-14
    test 208 forward 309N (50.346, -124.343) -/-: -3742386.824274, 12791126.616764, -131.557863, 1.176031
    test 209 reverse 309N (50.346, -124.343) -/-: 1.4210854715202004e-14
    test 210 forward 312N (53.530, -118.903) -/-: -3685290.742854, 12189522.028618, -124.447841, 1.170375
    test 211 reverse 312N (53.530, -118.903) -/-: 1.4210854715202004e-14
    test 212 forward 315N (56.569, -113.137) -/-: -3566696.824822, 11619422.467571, -117.096854, 1.159166
    test 213 reverse 315N (56.569, -113.137) -/-: 7.105427357601002e-15
    test 214 forward 318N (59.452, -107.061) -/-: -3391492.622467, 11093528.387239, -109.604086, 1.14345
    test 215 reverse 318N (59.452, -107.061) -/-: 1.4210854715202004e-14
    test 216 forward 321N (62.172, -100.691) -/-: -3168362.707459, 10621853.317461, -102.04623, 1.124739
    test 217 reverse 321N (62.172, -100.691) -/-: 0.0
    test 218 forward 324N (64.721, -94.046) -/-: -2908348.733697, 10210857.598605, -94.471204, 1.104695
    test 219 reverse 324N (64.721, -94.046) -/-: 0.0
    test 220 forward 327N (67.094, -87.142) -/-: -2623368.28288, 9863301.12097, -86.898617, 1.084836
    test 221 reverse 327N (67.094, -87.142) -/-: 0.0
    test 222 forward 330N (69.282, -80.000) -/-: -2325015.074835, 9578621.128889, -79.325231, 1.066355
    test 223 reverse 330N (69.282, -80.000) -/-: 2.842170943040401e-14
    test 224 forward 333N (71.281, -72.638) -/-: -2023752.790526, 9353559.771346, -71.732868, 1.050046
    test 225 reverse 333N (71.281, -72.638) -/-: 1.4210854715202004e-14
    test 226 forward 336N (73.084, -65.078) -/-: -1728450.251911, 9182823.938232, -64.096558, 1.036319
    test 227 reverse 336N (73.084, -65.078) -/-: 1.4210854715202004e-14
    test 228 forward 339N (74.686, -57.339) -/-: -1446137.252018, 9059670.735504, -56.391495, 1.025259
    test 229 reverse 339N (74.686, -57.339) -/-: 1.4210854715202004e-14
    test 230 forward 342N (76.085, -49.443) -/-: -1181870.215451, 8976407.252949, -48.598167, 1.016714
    test 231 reverse 342N (76.085, -49.443) -/-: 3.552713678800501e-14
    test 232 forward 345N (77.274, -41.411) -/-: -938645.229361, 8924845.3123, -40.705476, 1.010384
    test 233 reverse 345N (77.274, -41.411) -/-: 0.0
    test 234 forward 348N (78.252, -33.266) -/-: -717349.637417, 8896761.249834, -32.712011, 1.005894
    test 235 reverse 348N (78.252, -33.266) -/-: 2.5618982671915014e-14
    test 236 forward 351N (79.015, -25.030) -/-: -516782.400098, 8884389.933155, -24.625783, 1.002865
    test 237 reverse 351N (79.015, -25.030) -/-: 2.842170943040401e-14
    test 238 forward 354N (79.562, -16.725) -/-: -333788.634116, 8880946.730424, -16.462884, 1.000962
    test 239 reverse 354N (79.562, -16.725) -/-: 1.7763568394002505e-14
    test 240 forward 357N (79.890, -8.374) -/-: -163544.38007, 8881136.361771, -8.245542, 0.999927
    test 241 reverse 357N (79.890, -8.374) -/-: 1.7763568394002505e-15
    test 242 forward 360N (80.000, 0.000) -/-: 0.0, 8881585.815988, 0.0, 0.9996
    test 243 reverse 360N (80.000, 0.000) -/-: 0.0
    test 244 max: 5.859285502108464e-14  FAILED, KNOWN, expected 6e-14

    test 245 forward: 6208422.5374, 5452954.287187, 41.077484, 1.511911
    test 246 reverse: 30.244228, 60.169664, 41.479185, 1.510346

    test 247 _TM: KTransverseMercator(ellipsoid=Ellipsoid(name='Sphere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=4)
    test 248 forward 0N (80.000, 0.000) -/-: 0.0, 8892048.136219, 0.0, 0.9996
    test 249 reverse 0N (80.000, 0.000) -/-: 0.0
    test 250 forward 3N (79.890, 8.374) -/-: 162830.781916, 8891598.152508, 8.245541, 0.999927
    test 251 reverse 3N (79.890, 8.374) -/-: 3.552713678800501e-15
    test 252 forward 6N (79.562, 16.725) -/-: 332334.438121, 8891401.702739, 16.462875, 1.000961
    test 253 reverse 6N (79.562, 16.725) -/-: 3.552713678800501e-15
    test 254 forward 9N (79.015, 25.030) -/-: 514536.969405, 8894816.626946, 24.625748, 1.002864
    test 255 reverse 9N (79.015, 25.030) -/-: 3.552713678800501e-15
    test 256 forward 12N (78.252, 33.266) -/-: 714245.109628, 8907114.580812, 32.711919, 1.005893
    test 257 reverse 12N (78.252, 33.266) -/-: 1.4210854715202004e-14
    test 258 forward 15N (77.274, 41.411) -/-: 934605.427053, 8935050.398758, 40.705275, 1.010384
    test 259 reverse 15N (77.274, 41.411) -/-: 2.1316282072803006e-14
    test 260 forward 18N (76.085, 49.443) -/-: 1176821.393989, 8986356.098856, 48.597784, 1.016715
    test 261 reverse 18N (76.085, 49.443) -/-: 7.105427357601002e-15
    test 262 forward 21N (74.686, 57.339) -/-: 1440020.023752, 9069222.197918, 56.390849, 1.025263
    test 263 reverse 21N (74.686, 57.339) -/-: 1.4210854715202004e-14
    test 264 forward 24N (73.084, 65.078) -/-: 1721232.03303, 9191807.409386, 64.095597, 1.036332
    test 265 reverse 24N (73.084, 65.078) -/-: 4.4938668397781776e-14
    test 266 forward 27N (71.281, 72.638) -/-: 2015439.94304, 9361783.139474, 71.731644, 1.050076
    test 267 reverse 27N (71.281, 72.638) -/-: 0.0
    test 268 forward 30N (69.282, 80.000) -/-: 2315663.380439, 9585883.63353, 79.324018, 1.066413
    test 269 reverse 30N (69.282, 80.000) -/-: 0.0
    test 270 forward 33N (67.094, 87.142) -/-: 2613089.50746, 9869411.258858, 86.898056, 1.084934
    test 271 reverse 33N (67.094, 87.142) -/-: 1.4210854715202004e-14
    test 272 forward 36N (64.721, 94.046) -/-: 2897310.302591, 10215654.794479, 94.472414, 1.104843
    test 273 reverse 36N (64.721, 94.046) -/-: 4.4938668397781776e-14
    test 274 forward 39N (62.172, 100.691) -/-: 3156777.9732, 10625229.653451, 102.050793, 1.12494
    test 275 reverse 39N (62.172, 100.691) -/-: 7.105427357601002e-15
    test 276 forward 42N (59.452, 107.061) -/-: 3379601.994821, 11095444.501021, 109.613799, 1.143688
    test 277 reverse 42N (59.452, 107.061) -/-: 2.0097183471152322e-14
    test 278 forward 45N (56.569, 113.137) -/-: 3554744.82183, 11619912.294696, 117.113212, 1.159405
    test 279 reverse 45N (56.569, 113.137) -/-: 0.0
    test 280 forward 48N (53.530, 118.903) -/-: 3673507.549162, 12188686.186502, 124.471401, 1.170561
    test 281 reverse 48N (53.530, 118.903) -/-: 2.1316282072803006e-14
    test 282 forward 51N (50.346, 124.343) -/-: 3730980.59573, 12789121.454112, 131.587794, 1.176106
    test 283 reverse 51N (50.346, 124.343) -/-: 1.5888218580782548e-14
    test 284 forward 54N (47.023, 129.443) -/-: 3727003.760242, 13407411.821957, 138.351947, 1.175719
    test 285 reverse 54N (47.023, 129.443) -/-: 0.0
    test 286 forward 57N (43.571, 134.187) -/-: 3666275.084648, 14030431.844036, 144.659906, 1.16987
    test 287 reverse 57N (43.571, 134.187) -/-: 0.0
    test 288 forward 60N (40.000, 138.564) -/-: 3557564.445775, 14647347.719581, 150.428973, 1.159665
    test 289 reverse 60N (40.000, 138.564) -/-: 7.105427357601002e-15
    test 290 forward 63N (36.319, 142.561) -/-: 3412334.48396, 15250567.642625, 155.606964, 1.146559
    test 291 reverse 63N (36.319, 142.561) -/-: 0.0
    test 292 forward 66N (32.539, 146.167) -/-: 3243229.892204, 15835907.12812, 160.174784, 1.132049
    test 293 reverse 66N (32.539, 146.167) -/-: 3.1776437161565096e-14
    test 294 forward 69N (28.669, 149.373) -/-: 3062811.744735, 16402134.803105, 164.143685, 1.117448
    test 295 reverse 69N (28.669, 149.373) -/-: 3.552713678800501e-15
    test 296 forward 72N (24.721, 152.169) -/-: 2882703.816659, 16950195.447611, 167.549757, 1.103767
    test 297 reverse 72N (24.721, 152.169) -/-: 0.0
    test 298 forward 75N (20.706, 154.548) -/-: 2713130.658999, 17482381.525728, 170.447906, 1.091693
    test 299 reverse 75N (20.706, 154.548) -/-: 1.0658141036401503e-14
    test 300 forward 78N (16.633, 156.504) -/-: 2562732.651149, 18001625.534999, 172.906642, 1.081633
    test 301 reverse 78N (16.633, 156.504) -/-: 7.105427357601002e-15
    test 302 forward 81N (12.515, 158.030) -/-: 2438532.075646, 18510987.984533, 175.004113, 1.07378
    test 303 reverse 81N (12.515, 158.030) -/-: 3.552713678800501e-15
    test 304 forward 84N (8.362, 159.124) -/-: 2345956.628332, 19013350.872509, 176.82525, 1.068192
    test 305 reverse 84N (8.362, 159.124) -/-: 8.881784197001252e-15
    test 306 forward 87N (4.187, 159.781) -/-: 2288868.720832, 19511292.939628, 178.459673, 1.064859
    test 307 reverse 87N (4.187, 159.781) -/-: 1.9539925233402755e-14
    test 308 forward 90N (0.000, 160.000) -/-: 2269582.383311, -20007108.306493, -180.0, 1.063752
    test 309 reverse 90N (0.000, 160.000) -/-: 0.0
    test 310 forward 93N (-4.187, 159.781) -/-: 2288868.720832, -19511292.939628, -178.459673, 1.064859
    test 311 reverse 93N (-4.187, 159.781) -/-: 3.019806626980426e-14
    test 312 forward 96N (-8.362, 159.124) -/-: 2345956.628332, -19013350.872509, -176.82525, 1.068192
    test 313 reverse 96N (-8.362, 159.124) -/-: 1.0658141036401503e-14
    test 314 forward 99N (-12.515, 158.030) -/-: 2438532.075646, -18510987.984533, -175.004113, 1.07378
    test 315 reverse 99N (-12.515, 158.030) -/-: 8.881784197001252e-15
    test 316 forward 102N (-16.633, 156.504) -/-: 2562732.651149, -18001625.534999, -172.906642, 1.081633
    test 317 reverse 102N (-16.633, 156.504) -/-: 3.552713678800501e-15
    test 318 forward 105N (-20.706, 154.548) -/-: 2713130.658999, -17482381.525728, -170.447906, 1.091693
    test 319 reverse 105N (-20.706, 154.548) -/-: 1.0658141036401503e-14
    test 320 forward 108N (-24.721, 152.169) -/-: 2882703.816659, -16950195.447611, -167.549757, 1.103767
    test 321 reverse 108N (-24.721, 152.169) -/-: 3.552713678800501e-15
    test 322 forward 111N (-28.669, 149.373) -/-: 3062811.744735, -16402134.803105, -164.143685, 1.117448
    test 323 reverse 111N (-28.669, 149.373) -/-: 1.0658141036401503e-14
    test 324 forward 114N (-32.539, 146.167) -/-: 3243229.892204, -15835907.12812, -160.174784, 1.132049
    test 325 reverse 114N (-32.539, 146.167) -/-: 3.1776437161565096e-14
    test 326 forward 117N (-36.319, 142.561) -/-: 3412334.48396, -15250567.642625, -155.606964, 1.146559
    test 327 reverse 117N (-36.319, 142.561) -/-: 0.0
    test 328 forward 120N (-40.000, 138.564) -/-: 3557564.445775, -14647347.719581, -150.428973, 1.159665
    test 329 reverse 120N (-40.000, 138.564) -/-: 0.0
    test 330 forward 123N (-43.571, 134.187) -/-: 3666275.084648, -14030431.844036, -144.659906, 1.16987
    test 331 reverse 123N (-43.571, 134.187) -/-: 0.0
    test 332 forward 126N (-47.023, 129.443) -/-: 3727003.760242, -13407411.821957, -138.351947, 1.175719
    test 333 reverse 126N (-47.023, 129.443) -/-: 0.0
    test 334 forward 129N (-50.346, 124.343) -/-: 3730980.59573, -12789121.454112, -131.587794, 1.176106
    test 335 reverse 129N (-50.346, 124.343) -/-: 1.5888218580782548e-14
    test 336 forward 132N (-53.530, 118.903) -/-: 3673507.549162, -12188686.186502, -124.471401, 1.170561
    test 337 reverse 132N (-53.530, 118.903) -/-: 2.1316282072803006e-14
    test 338 forward 135N (-56.569, 113.137) -/-: 3554744.82183, -11619912.294696, -117.113212, 1.159405
    test 339 reverse 135N (-56.569, 113.137) -/-: 7.105427357601002e-15
    test 340 forward 138N (-59.452, 107.061) -/-: 3379601.994821, -11095444.501021, -109.613799, 1.143688
    test 341 reverse 138N (-59.452, 107.061) -/-: 2.0097183471152322e-14
    test 342 forward 141N (-62.172, 100.691) -/-: 3156777.9732, -10625229.653451, -102.050793, 1.12494
    test 343 reverse 141N (-62.172, 100.691) -/-: 7.105427357601002e-15
    test 344 forward 144N (-64.721, 94.046) -/-: 2897310.302591, -10215654.794479, -94.472414, 1.104843
    test 345 reverse 144N (-64.721, 94.046) -/-: 4.4938668397781776e-14
    test 346 forward 147N (-67.094, 87.142) -/-: 2613089.50746, -9869411.258858, -86.898056, 1.084934
    test 347 reverse 147N (-67.094, 87.142) -/-: 1.4210854715202004e-14
    test 348 forward 150N (-69.282, 80.000) -/-: 2315663.380439, -9585883.63353, -79.324018, 1.066413
    test 349 reverse 150N (-69.282, 80.000) -/-: 2.842170943040401e-14
    test 350 forward 153N (-71.281, 72.638) -/-: 2015439.94304, -9361783.139474, -71.731644, 1.050076
    test 351 reverse 153N (-71.281, 72.638) -/-: 0.0
    test 352 forward 156N (-73.084, 65.078) -/-: 1721232.03303, -9191807.409386, -64.095597, 1.036332
    test 353 reverse 156N (-73.084, 65.078) -/-: 4.4938668397781776e-14
    test 354 forward 159N (-74.686, 57.339) -/-: 1440020.023752, -9069222.197918, -56.390849, 1.025263
    test 355 reverse 159N (-74.686, 57.339) -/-: 1.5888218580782548e-14
    test 356 forward 162N (-76.085, 49.443) -/-: 1176821.393989, -8986356.098856, -48.597784, 1.016715
    test 357 reverse 162N (-76.085, 49.443) -/-: 7.105427357601002e-15
    test 358 forward 165N (-77.274, 41.411) -/-: 934605.427053, -8935050.398758, -40.705275, 1.010384
    test 359 reverse 165N (-77.274, 41.411) -/-: 2.1316282072803006e-14
    test 360 forward 168N (-78.252, 33.266) -/-: 714245.109628, -8907114.580812, -32.711919, 1.005893
    test 361 reverse 168N (-78.252, 33.266) -/-: 1.4210854715202004e-14
    test 362 forward 171N (-79.015, 25.030) -/-: 514536.969405, -8894816.626946, -24.625748, 1.002864
    test 363 reverse 171N (-79.015, 25.030) -/-: 3.552713678800501e-15
    test 364 forward 174N (-79.562, 16.725) -/-: 332334.438121, -8891401.702739, -16.462875, 1.000961
    test 365 reverse 174N (-79.562, 16.725) -/-: 3.552713678800501e-15
    test 366 forward 177N (-79.890, 8.374) -/-: 162830.781916, -8891598.152508, -8.245541, 0.999927
    test 367 reverse 177N (-79.890, 8.374) -/-: 1.7763568394002505e-15
    test 368 forward 180N (-80.000, 0.000) -/-: 0.0, -8892048.136219, 0.0, 0.9996
    test 369 reverse 180N (-80.000, 0.000) -/-: 0.0
    test 370 forward 183N (-79.890, -8.374) -/-: -162830.781916, -8891598.152508, 8.245541, 0.999927
    test 371 reverse 183N (-79.890, -8.374) -/-: 3.552713678800501e-15
    test 372 forward 186N (-79.562, -16.725) -/-: -332334.438121, -8891401.702739, 16.462875, 1.000961
    test 373 reverse 186N (-79.562, -16.725) -/-: 3.552713678800501e-15
    test 374 forward 189N (-79.015, -25.030) -/-: -514536.969405, -8894816.626946, 24.625748, 1.002864
    test 375 reverse 189N (-79.015, -25.030) -/-: 3.552713678800501e-15
    test 376 forward 192N (-78.252, -33.266) -/-: -714245.109628, -8907114.580812, 32.711919, 1.005893
    test 377 reverse 192N (-78.252, -33.266) -/-: 1.4210854715202004e-14
    test 378 forward 195N (-77.274, -41.411) -/-: -934605.427053, -8935050.398758, 40.705275, 1.010384
    test 379 reverse 195N (-77.274, -41.411) -/-: 2.1316282072803006e-14
    test 380 forward 198N (-76.085, -49.443) -/-: -1176821.393989, -8986356.098856, 48.597784, 1.016715
    test 381 reverse 198N (-76.085, -49.443) -/-: 7.105427357601002e-15
    test 382 forward 201N (-74.686, -57.339) -/-: -1440020.023752, -9069222.197918, 56.390849, 1.025263
    test 383 reverse 201N (-74.686, -57.339) -/-: 1.4210854715202004e-14
    test 384 forward 204N (-73.084, -65.078) -/-: -1721232.03303, -9191807.409386, 64.095597, 1.036332
    test 385 reverse 204N (-73.084, -65.078) -/-: 4.4938668397781776e-14
    test 386 forward 207N (-71.281, -72.638) -/-: -2015439.94304, -9361783.139474, 71.731644, 1.050076
    test 387 reverse 207N (-71.281, -72.638) -/-: 0.0
    test 388 forward 210N (-69.282, -80.000) -/-: -2315663.380439, -9585883.63353, 79.324018, 1.066413
    test 389 reverse 210N (-69.282, -80.000) -/-: 0.0
    test 390 forward 213N (-67.094, -87.142) -/-: -2613089.50746, -9869411.258858, 86.898056, 1.084934
    test 391 reverse 213N (-67.094, -87.142) -/-: 1.4210854715202004e-14
    test 392 forward 216N (-64.721, -94.046) -/-: -2897310.302591, -10215654.794479, 94.472414, 1.104843
    test 393 reverse 216N (-64.721, -94.046) -/-: 4.4938668397781776e-14
    test 394 forward 219N (-62.172, -100.691) -/-: -3156777.9732, -10625229.653451, 102.050793, 1.12494
    test 395 reverse 219N (-62.172, -100.691) -/-: 7.105427357601002e-15
    test 396 forward 222N (-59.452, -107.061) -/-: -3379601.994821, -11095444.501021, 109.613799, 1.143688
    test 397 reverse 222N (-59.452, -107.061) -/-: 2.0097183471152322e-14
    test 398 forward 225N (-56.569, -113.137) -/-: -3554744.82183, -11619912.294696, 117.113212, 1.159405
    test 399 reverse 225N (-56.569, -113.137) -/-: 0.0
    test 400 forward 228N (-53.530, -118.903) -/-: -3673507.549162, -12188686.186502, 124.471401, 1.170561
    test 401 reverse 228N (-53.530, -118.903) -/-: 2.1316282072803006e-14
    test 402 forward 231N (-50.346, -124.343) -/-: -3730980.59573, -12789121.454112, 131.587794, 1.176106
    test 403 reverse 231N (-50.346, -124.343) -/-: 1.5888218580782548e-14
    test 404 forward 234N (-47.023, -129.443) -/-: -3727003.760242, -13407411.821957, 138.351947, 1.175719
    test 405 reverse 234N (-47.023, -129.443) -/-: 0.0
    test 406 forward 237N (-43.571, -134.187) -/-: -3666275.084648, -14030431.844036, 144.659906, 1.16987
    test 407 reverse 237N (-43.571, -134.187) -/-: 0.0
    test 408 forward 240N (-40.000, -138.564) -/-: -3557564.445775, -14647347.719581, 150.428973, 1.159665
    test 409 reverse 240N (-40.000, -138.564) -/-: 7.105427357601002e-15
    test 410 forward 243N (-36.319, -142.561) -/-: -3412334.48396, -15250567.642625, 155.606964, 1.146559
    test 411 reverse 243N (-36.319, -142.561) -/-: 0.0
    test 412 forward 246N (-32.539, -146.167) -/-: -3243229.892204, -15835907.12812, 160.174784, 1.132049
    test 413 reverse 246N (-32.539, -146.167) -/-: 3.1776437161565096e-14
    test 414 forward 249N (-28.669, -149.373) -/-: -3062811.744735, -16402134.803105, 164.143685, 1.117448
    test 415 reverse 249N (-28.669, -149.373) -/-: 3.552713678800501e-15
    test 416 forward 252N (-24.721, -152.169) -/-: -2882703.816659, -16950195.447611, 167.549757, 1.103767
    test 417 reverse 252N (-24.721, -152.169) -/-: 0.0
    test 418 forward 255N (-20.706, -154.548) -/-: -2713130.658999, -17482381.525728, 170.447906, 1.091693
    test 419 reverse 255N (-20.706, -154.548) -/-: 1.0658141036401503e-14
    test 420 forward 258N (-16.633, -156.504) -/-: -2562732.651149, -18001625.534999, 172.906642, 1.081633
    test 421 reverse 258N (-16.633, -156.504) -/-: 7.105427357601002e-15
    test 422 forward 261N (-12.515, -158.030) -/-: -2438532.075646, -18510987.984533, 175.004113, 1.07378
    test 423 reverse 261N (-12.515, -158.030) -/-: 3.552713678800501e-15
    test 424 forward 264N (-8.362, -159.124) -/-: -2345956.628332, -19013350.872509, 176.82525, 1.068192
    test 425 reverse 264N (-8.362, -159.124) -/-: 8.881784197001252e-15
    test 426 forward 267N (-4.187, -159.781) -/-: -2288868.720832, -19511292.939628, 178.459673, 1.064859
    test 427 reverse 267N (-4.187, -159.781) -/-: 1.9539925233402755e-14
    test 428 forward 270N (0.000, -160.000) -/-: -2269582.383311, -20007108.306493, 180.0, 1.063752
    test 429 reverse 270N (0.000, -160.000) -/-: 0.0
    test 430 forward 273N (4.187, -159.781) -/-: -2288868.720832, 19511292.939628, -178.459673, 1.064859
    test 431 reverse 273N (4.187, -159.781) -/-: 3.019806626980426e-14
    test 432 forward 276N (8.362, -159.124) -/-: -2345956.628332, 19013350.872509, -176.82525, 1.068192
    test 433 reverse 276N (8.362, -159.124) -/-: 1.0658141036401503e-14
    test 434 forward 279N (12.515, -158.030) -/-: -2438532.075646, 18510987.984533, -175.004113, 1.07378
    test 435 reverse 279N (12.515, -158.030) -/-: 8.881784197001252e-15
    test 436 forward 282N (16.633, -156.504) -/-: -2562732.651149, 18001625.534999, -172.906642, 1.081633
    test 437 reverse 282N (16.633, -156.504) -/-: 3.552713678800501e-15
    test 438 forward 285N (20.706, -154.548) -/-: -2713130.658999, 17482381.525728, -170.447906, 1.091693
    test 439 reverse 285N (20.706, -154.548) -/-: 1.0658141036401503e-14
    test 440 forward 288N (24.721, -152.169) -/-: -2882703.816659, 16950195.447611, -167.549757, 1.103767
    test 441 reverse 288N (24.721, -152.169) -/-: 3.552713678800501e-15
    test 442 forward 291N (28.669, -149.373) -/-: -3062811.744735, 16402134.803105, -164.143685, 1.117448
    test 443 reverse 291N (28.669, -149.373) -/-: 1.0658141036401503e-14
    test 444 forward 294N (32.539, -146.167) -/-: -3243229.892204, 15835907.12812, -160.174784, 1.132049
    test 445 reverse 294N (32.539, -146.167) -/-: 3.1776437161565096e-14
    test 446 forward 297N (36.319, -142.561) -/-: -3412334.48396, 15250567.642625, -155.606964, 1.146559
    test 447 reverse 297N (36.319, -142.561) -/-: 0.0
    test 448 forward 300N (40.000, -138.564) -/-: -3557564.445775, 14647347.719581, -150.428973, 1.159665
    test 449 reverse 300N (40.000, -138.564) -/-: 0.0
    test 450 forward 303N (43.571, -134.187) -/-: -3666275.084648, 14030431.844036, -144.659906, 1.16987
    test 451 reverse 303N (43.571, -134.187) -/-: 0.0
    test 452 forward 306N (47.023, -129.443) -/-: -3727003.760242, 13407411.821957, -138.351947, 1.175719
    test 453 reverse 306N (47.023, -129.443) -/-: 0.0
    test 454 forward 309N (50.346, -124.343) -/-: -3730980.59573, 12789121.454112, -131.587794, 1.176106
    test 455 reverse 309N (50.346, -124.343) -/-: 1.5888218580782548e-14
    test 456 forward 312N (53.530, -118.903) -/-: -3673507.549162, 12188686.186502, -124.471401, 1.170561
    test 457 reverse 312N (53.530, -118.903) -/-: 2.1316282072803006e-14
    test 458 forward 315N (56.569, -113.137) -/-: -3554744.82183, 11619912.294696, -117.113212, 1.159405
    test 459 reverse 315N (56.569, -113.137) -/-: 7.105427357601002e-15
    test 460 forward 318N (59.452, -107.061) -/-: -3379601.994821, 11095444.501021, -109.613799, 1.143688
    test 461 reverse 318N (59.452, -107.061) -/-: 2.0097183471152322e-14
    test 462 forward 321N (62.172, -100.691) -/-: -3156777.9732, 10625229.653451, -102.050793, 1.12494
    test 463 reverse 321N (62.172, -100.691) -/-: 7.105427357601002e-15
    test 464 forward 324N (64.721, -94.046) -/-: -2897310.302591, 10215654.794479, -94.472414, 1.104843
    test 465 reverse 324N (64.721, -94.046) -/-: 4.4938668397781776e-14
    test 466 forward 327N (67.094, -87.142) -/-: -2613089.50746, 9869411.258858, -86.898056, 1.084934
    test 467 reverse 327N (67.094, -87.142) -/-: 1.4210854715202004e-14
    test 468 forward 330N (69.282, -80.000) -/-: -2315663.380439, 9585883.63353, -79.324018, 1.066413
    test 469 reverse 330N (69.282, -80.000) -/-: 2.842170943040401e-14
    test 470 forward 333N (71.281, -72.638) -/-: -2015439.94304, 9361783.139474, -71.731644, 1.050076
    test 471 reverse 333N (71.281, -72.638) -/-: 0.0
    test 472 forward 336N (73.084, -65.078) -/-: -1721232.03303, 9191807.409386, -64.095597, 1.036332
    test 473 reverse 336N (73.084, -65.078) -/-: 4.4938668397781776e-14
    test 474 forward 339N (74.686, -57.339) -/-: -1440020.023752, 9069222.197918, -56.390849, 1.025263
    test 475 reverse 339N (74.686, -57.339) -/-: 1.5888218580782548e-14
    test 476 forward 342N (76.085, -49.443) -/-: -1176821.393989, 8986356.098856, -48.597784, 1.016715
    test 477 reverse 342N (76.085, -49.443) -/-: 7.105427357601002e-15
    test 478 forward 345N (77.274, -41.411) -/-: -934605.427053, 8935050.398758, -40.705275, 1.010384
    test 479 reverse 345N (77.274, -41.411) -/-: 2.1316282072803006e-14
    test 480 forward 348N (78.252, -33.266) -/-: -714245.109628, 8907114.580812, -32.711919, 1.005893
    test 481 reverse 348N (78.252, -33.266) -/-: 1.4210854715202004e-14
    test 482 forward 351N (79.015, -25.030) -/-: -514536.969405, 8894816.626946, -24.625748, 1.002864
    test 483 reverse 351N (79.015, -25.030) -/-: 3.552713678800501e-15
    test 484 forward 354N (79.562, -16.725) -/-: -332334.438121, 8891401.702739, -16.462875, 1.000961
    test 485 reverse 354N (79.562, -16.725) -/-: 3.552713678800501e-15
    test 486 forward 357N (79.890, -8.374) -/-: -162830.781916, 8891598.152508, -8.245541, 0.999927
    test 487 reverse 357N (79.890, -8.374) -/-: 1.7763568394002505e-15
    test 488 forward 360N (80.000, 0.000) -/-: 0.0, 8892048.136219, 0.0, 0.9996
    test 489 reverse 360N (80.000, 0.000) -/-: 0.0
    test 490 max: 4.4938668397781776e-14  FAILED, KNOWN, expected 5e-14

    test 491 forward: 6196225.831883, 5458228.732328, 40.893395, 1.511253
    test 492 reverse: 30.172556, 60.208316, 41.279729, 1.511925

    test 493 _TM: ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 494 forward 0N (80.000, 0.000) 3/3: 0.0, 8881585.815988, 0.0, 0.9996
    test 495 reverse 0N (80.000, 0.000) 3/3: 0.0
    test 496 forward 3N (79.890, 8.374) 3/4: 163544.38007, 8881136.361771, 8.245542, 0.999927
    test 497 reverse 3N (79.890, 8.374) 3/3: 3.552713678800501e-14
    test 498 forward 6N (79.562, 16.725) 3/4: 333788.634116, 8880946.730424, 16.462884, 1.000962
    test 499 reverse 6N (79.562, 16.725) 3/3: 1.4210854715202004e-14
    test 500 forward 9N (79.015, 25.030) 3/4: 516782.400098, 8884389.933155, 24.625783, 1.002865
    test 501 reverse 9N (79.015, 25.030) 3/3: 3.1776437161565096e-14
    test 502 forward 12N (78.252, 33.266) 3/4: 717349.637417, 8896761.249834, 32.712011, 1.005894
    test 503 reverse 12N (78.252, 33.266) 3/3: 1.4210854715202004e-14
    test 504 forward 15N (77.274, 41.411) 3/4: 938645.229361, 8924845.3123, 40.705476, 1.010384
    test 505 reverse 15N (77.274, 41.411) 3/3: 2.0097183471152322e-14
    test 506 forward 18N (76.085, 49.443) 3/4: 1181870.215451, 8976407.252949, 48.598167, 1.016714
    test 507 reverse 18N (76.085, 49.443) 3/3: 7.105427357601002e-15
    test 508 forward 21N (74.686, 57.339) 3/4: 1446137.252018, 9059670.735504, 56.391495, 1.025259
    test 509 reverse 21N (74.686, 57.339) 3/3: 2.0097183471152322e-14
    test 510 forward 24N (73.084, 65.078) 3/4: 1728450.251911, 9182823.938232, 64.096558, 1.036319
    test 511 reverse 24N (73.084, 65.078) 3/3: 2.0097183471152322e-14
    test 512 forward 27N (71.281, 72.638) 3/4: 2023752.790526, 9353559.771346, 71.732868, 1.050046
    test 513 reverse 27N (71.281, 72.638) 3/3: 2.842170943040401e-14
    test 514 forward 30N (69.282, 80.000) 3/4: 2325015.074835, 9578621.128889, 79.325231, 1.066355
    test 515 reverse 30N (69.282, 80.000) 3/4: 7.105427357601002e-14
    test 516 forward 33N (67.094, 87.142) 3/4: 2623368.28288, 9863301.12097, 86.898617, 1.084836
    test 517 reverse 33N (67.094, 87.142) 3/4: 4.263256414560601e-14
    test 518 forward 36N (64.721, 94.046) 3/4: 2908348.733697, 10210857.598605, 94.471204, 1.104695
    test 519 reverse 36N (64.721, 94.046) 3/4: 1.4210854715202004e-14
    test 520 forward 39N (62.172, 100.691) 3/4: 3168362.707459, 10621853.317461, 102.04623, 1.124739
    test 521 reverse 39N (62.172, 100.691) 3/4: 2.929642751054232e-14
    test 522 forward 42N (59.452, 107.061) 3/4: 3391492.622467, 11093528.387239, 109.604086, 1.14345
    test 523 reverse 42N (59.452, 107.061) 3/4: 0.0
    test 524 forward 45N (56.569, 113.137) 3/4: 3566696.824822, 11619422.467571, 117.096854, 1.159166
    test 525 reverse 45N (56.569, 113.137) 3/4: 1.5888218580782548e-14
    test 526 forward 48N (53.530, 118.903) 3/4: 3685290.742854, 12189522.028618, 124.447841, 1.170375
    test 527 reverse 48N (53.530, 118.903) 3/4: 7.105427357601002e-15
    test 528 forward 51N (50.346, 124.343) 3/4: 3742386.824274, 12791126.616764, 131.557863, 1.176031
    test 529 reverse 51N (50.346, 124.343) 3/4: 1.4210854715202004e-14
    test 530 forward 54N (47.023, 129.443) 3/4: 3737846.053669, 13410380.03778, 138.317827, 1.175799
    test 531 reverse 54N (47.023, 129.443) 3/4: 0.0
    test 532 forward 57N (43.571, 134.187) 3/4: 3676387.634221, 14034104.572541, 144.624552, 1.170121
    test 533 reverse 57N (43.571, 134.187) 3/4: 0.0
    test 534 forward 60N (40.000, 138.564) 3/4: 3566810.754496, 14651410.305646, 150.395289, 1.16007
    test 535 reverse 60N (40.000, 138.564) 3/4: 2.929642751054232e-14
    test 536 forward 63N (36.319, 142.561) 3/4: 3420621.906486, 15254653.660248, 155.577129, 1.147079
    test 537 reverse 63N (36.319, 142.561) 3/4: 7.105427357601002e-15
    test 538 forward 66N (32.539, 146.167) 3/4: 3250522.133697, 15839614.666766, 160.149958, 1.132638
    test 539 reverse 66N (32.539, 146.167) 3/4: 1.4210854715202004e-14
    test 540 forward 69N (28.669, 149.373) 3/4: 3069132.144368, 16405050.640186, 164.124094, 1.118063
    test 541 reverse 69N (28.669, 149.373) 3/4: 3.552713678800501e-15
    test 542 forward 72N (24.721, 152.169) 3/4: 2888128.173431, 16951919.948156, 167.534978, 1.104377
    test 543 reverse 72N (24.721, 152.169) 3/4: 3.552713678800501e-15
    test 544 forward 75N (20.706, 154.548) 3/4: 2717773.256417, 17482549.021439, 170.437193, 1.09228
    test 545 reverse 75N (20.706, 154.548) 3/4: 3.552713678800501e-15
    test 546 forward 78N (16.633, 156.504) 3/4: 2566730.586316, 17999918.486885, 172.899178, 1.082187
    test 547 reverse 78N (16.633, 156.504) 3/4: 3.552713678800501e-15
    test 548 forward 81N (12.515, 158.030) 3/4: 2442031.891673, 18507145.758, 174.99917, 1.074303
    test 549 reverse 81N (12.515, 158.030) 3/4: 7.105427357601002e-15
    test 550 forward 84N (8.362, 159.124) 3/4: 2349105.316925, 19007174.828239, 176.822266, 1.068689
    test 551 reverse 84N (8.362, 159.124) 3/4: 8.881784197001252e-15
    test 552 forward 87N (4.187, 159.781) 3/4: 2291809.478825, 19502649.329559, 178.458273, 1.06534
    test 553 reverse 87N (4.187, 159.781) 3/4: 9.769962616701378e-15
    test 554 forward 90N (0.000, 160.000) 3/4: 2272454.379192, -19995929.886042, -180.0, 1.064227
    test 555 reverse 90N (0.000, 160.000) 3/3: 0.0
    test 556 forward 93N (-4.187, 159.781) 3/4: 2291809.478825, -19502649.329559, -178.458273, 1.06534
    test 557 reverse 93N (-4.187, 159.781) 3/4: 4.440892098500626e-15
    test 558 forward 96N (-8.362, 159.124) 3/4: 2349105.316925, -19007174.828239, -176.822266, 1.068689
    test 559 reverse 96N (-8.362, 159.124) 3/4: 1.0658141036401503e-14
    test 560 forward 99N (-12.515, 158.030) 3/4: 2442031.891673, -18507145.758, -174.99917, 1.074303
    test 561 reverse 99N (-12.515, 158.030) 3/4: 1.4210854715202004e-14
    test 562 forward 102N (-16.633, 156.504) 3/4: 2566730.586316, -17999918.486885, -172.899178, 1.082187
    test 563 reverse 102N (-16.633, 156.504) 3/4: 3.552713678800501e-15
    test 564 forward 105N (-20.706, 154.548) 3/4: 2717773.256417, -17482549.021439, -170.437193, 1.09228
    test 565 reverse 105N (-20.706, 154.548) 3/4: 3.552713678800501e-15
    test 566 forward 108N (-24.721, 152.169) 3/4: 2888128.173431, -16951919.948156, -167.534978, 1.104377
    test 567 reverse 108N (-24.721, 152.169) 3/4: 2.4868995751603507e-14
    test 568 forward 111N (-28.669, 149.373) 3/4: 3069132.144368, -16405050.640186, -164.124094, 1.118063
    test 569 reverse 111N (-28.669, 149.373) 3/4: 1.4210854715202004e-14
    test 570 forward 114N (-32.539, 146.167) 3/4: 3250522.133697, -15839614.666766, -160.149958, 1.132638
    test 571 reverse 114N (-32.539, 146.167) 3/4: 1.4210854715202004e-14
    test 572 forward 117N (-36.319, 142.561) 3/4: 3420621.906486, -15254653.660248, -155.577129, 1.147079
    test 573 reverse 117N (-36.319, 142.561) 3/4: 7.105427357601002e-15
    test 574 forward 120N (-40.000, 138.564) 3/4: 3566810.754496, -14651410.305646, -150.395289, 1.16007
    test 575 reverse 120N (-40.000, 138.564) 3/4: 2.842170943040401e-14
    test 576 forward 123N (-43.571, 134.187) 3/4: 3676387.634221, -14034104.572541, -144.624552, 1.170121
    test 577 reverse 123N (-43.571, 134.187) 3/4: 0.0
    test 578 forward 126N (-47.023, 129.443) 3/4: 3737846.053669, -13410380.03778, -138.317827, 1.175799
    test 579 reverse 126N (-47.023, 129.443) 3/4: 0.0
    test 580 forward 129N (-50.346, 124.343) 3/4: 3742386.824274, -12791126.616764, -131.557863, 1.176031
    test 581 reverse 129N (-50.346, 124.343) 3/4: 1.4210854715202004e-14
    test 582 forward 132N (-53.530, 118.903) 3/4: 3685290.742854, -12189522.028618, -124.447841, 1.170375
    test 583 reverse 132N (-53.530, 118.903) 3/4: 7.105427357601002e-15
    test 584 forward 135N (-56.569, 113.137) 3/4: 3566696.824822, -11619422.467571, -117.096854, 1.159166
    test 585 reverse 135N (-56.569, 113.137) 3/4: 3.552713678800501e-14
    test 586 forward 138N (-59.452, 107.061) 3/4: 3391492.622467, -11093528.387239, -109.604086, 1.14345
    test 587 reverse 138N (-59.452, 107.061) 3/4: 0.0
    test 588 forward 141N (-62.172, 100.691) 3/4: 3168362.707459, -10621853.317461, -102.04623, 1.124739
    test 589 reverse 141N (-62.172, 100.691) 3/4: 2.929642751054232e-14
    test 590 forward 144N (-64.721, 94.046) 3/4: 2908348.733697, -10210857.598605, -94.471204, 1.104695
    test 591 reverse 144N (-64.721, 94.046) 3/4: 1.4210854715202004e-14
    test 592 forward 147N (-67.094, 87.142) 3/4: 2623368.28288, -9863301.12097, -86.898617, 1.084836
    test 593 reverse 147N (-67.094, 87.142) 3/4: 4.263256414560601e-14
    test 594 forward 150N (-69.282, 80.000) 3/4: 2325015.074835, -9578621.128889, -79.325231, 1.066355
    test 595 reverse 150N (-69.282, 80.000) 3/4: 8.526512829121202e-14
    test 596 forward 153N (-71.281, 72.638) 3/4: 2023752.790526, -9353559.771346, -71.732868, 1.050046
    test 597 reverse 153N (-71.281, 72.638) 3/3: 2.842170943040401e-14
    test 598 forward 156N (-73.084, 65.078) 3/4: 1728450.251911, -9182823.938232, -64.096558, 1.036319
    test 599 reverse 156N (-73.084, 65.078) 3/3: 2.0097183471152322e-14
    test 600 forward 159N (-74.686, 57.339) 3/4: 1446137.252018, -9059670.735504, -56.391495, 1.025259
    test 601 reverse 159N (-74.686, 57.339) 3/3: 2.5618982671915014e-14
    test 602 forward 162N (-76.085, 49.443) 3/4: 1181870.215451, -8976407.252949, -48.598167, 1.016714
    test 603 reverse 162N (-76.085, 49.443) 3/3: 0.0
    test 604 forward 165N (-77.274, 41.411) 3/4: 938645.229361, -8924845.3123, -40.705476, 1.010384
    test 605 reverse 165N (-77.274, 41.411) 3/3: 2.0097183471152322e-14
    test 606 forward 168N (-78.252, 33.266) 3/4: 717349.637417, -8896761.249834, -32.712011, 1.005894
    test 607 reverse 168N (-78.252, 33.266) 3/3: 0.0
    test 608 forward 171N (-79.015, 25.030) 3/4: 516782.400098, -8884389.933155, -24.625783, 1.002865
    test 609 reverse 171N (-79.015, 25.030) 3/3: 4.1583447479068616e-14
    test 610 forward 174N (-79.562, 16.725) 3/4: 333788.634116, -8880946.730424, -16.462884, 1.000962
    test 611 reverse 174N (-79.562, 16.725) 3/3: 1.4210854715202004e-14
    test 612 forward 177N (-79.890, 8.374) 3/4: 163544.38007, -8881136.361771, -8.245542, 0.999927
    test 613 reverse 177N (-79.890, 8.374) 3/3: 3.552713678800501e-14
    test 614 forward 180N (-80.000, 0.000) 3/3: 0.0, -8881585.815988, 0.0, 0.9996
    test 615 reverse 180N (-80.000, 0.000) 3/3: 0.0
    test 616 forward 183N (-79.890, -8.374) 3/4: -163544.38007, -8881136.361771, 8.245542, 0.999927
    test 617 reverse 183N (-79.890, -8.374) 3/3: 3.552713678800501e-14
    test 618 forward 186N (-79.562, -16.725) 3/4: -333788.634116, -8880946.730424, 16.462884, 1.000962
    test 619 reverse 186N (-79.562, -16.725) 3/3: 1.4210854715202004e-14
    test 620 forward 189N (-79.015, -25.030) 3/4: -516782.400098, -8884389.933155, 24.625783, 1.002865
    test 621 reverse 189N (-79.015, -25.030) 3/3: 3.1776437161565096e-14
    test 622 forward 192N (-78.252, -33.266) 3/4: -717349.637417, -8896761.249834, 32.712011, 1.005894
    test 623 reverse 192N (-78.252, -33.266) 3/3: 1.4210854715202004e-14
    test 624 forward 195N (-77.274, -41.411) 3/4: -938645.229361, -8924845.3123, 40.705476, 1.010384
    test 625 reverse 195N (-77.274, -41.411) 3/3: 2.0097183471152322e-14
    test 626 forward 198N (-76.085, -49.443) 3/4: -1181870.215451, -8976407.252949, 48.598167, 1.016714
    test 627 reverse 198N (-76.085, -49.443) 3/3: 7.105427357601002e-15
    test 628 forward 201N (-74.686, -57.339) 3/4: -1446137.252018, -9059670.735504, 56.391495, 1.025259
    test 629 reverse 201N (-74.686, -57.339) 3/3: 2.0097183471152322e-14
    test 630 forward 204N (-73.084, -65.078) 3/4: -1728450.251911, -9182823.938232, 64.096558, 1.036319
    test 631 reverse 204N (-73.084, -65.078) 3/3: 2.0097183471152322e-14
    test 632 forward 207N (-71.281, -72.638) 3/4: -2023752.790526, -9353559.771346, 71.732868, 1.050046
    test 633 reverse 207N (-71.281, -72.638) 3/3: 2.842170943040401e-14
    test 634 forward 210N (-69.282, -80.000) 3/4: -2325015.074835, -9578621.128889, 79.325231, 1.066355
    test 635 reverse 210N (-69.282, -80.000) 3/4: 7.105427357601002e-14
    test 636 forward 213N (-67.094, -87.142) 3/4: -2623368.28288, -9863301.12097, 86.898617, 1.084836
    test 637 reverse 213N (-67.094, -87.142) 3/4: 4.263256414560601e-14
    test 638 forward 216N (-64.721, -94.046) 3/4: -2908348.733697, -10210857.598605, 94.471204, 1.104695
    test 639 reverse 216N (-64.721, -94.046) 3/4: 1.4210854715202004e-14
    test 640 forward 219N (-62.172, -100.691) 3/4: -3168362.707459, -10621853.317461, 102.04623, 1.124739
    test 641 reverse 219N (-62.172, -100.691) 3/4: 2.929642751054232e-14
    test 642 forward 222N (-59.452, -107.061) 3/4: -3391492.622467, -11093528.387239, 109.604086, 1.14345
    test 643 reverse 222N (-59.452, -107.061) 3/4: 0.0
    test 644 forward 225N (-56.569, -113.137) 3/4: -3566696.824822, -11619422.467571, 117.096854, 1.159166
    test 645 reverse 225N (-56.569, -113.137) 3/4: 1.5888218580782548e-14
    test 646 forward 228N (-53.530, -118.903) 3/4: -3685290.742854, -12189522.028618, 124.447841, 1.170375
    test 647 reverse 228N (-53.530, -118.903) 3/4: 7.105427357601002e-15
    test 648 forward 231N (-50.346, -124.343) 3/4: -3742386.824274, -12791126.616764, 131.557863, 1.176031
    test 649 reverse 231N (-50.346, -124.343) 3/4: 1.4210854715202004e-14
    test 650 forward 234N (-47.023, -129.443) 3/4: -3737846.053669, -13410380.03778, 138.317827, 1.175799
    test 651 reverse 234N (-47.023, -129.443) 3/4: 0.0
    test 652 forward 237N (-43.571, -134.187) 3/4: -3676387.634221, -14034104.572541, 144.624552, 1.170121
    test 653 reverse 237N (-43.571, -134.187) 3/4: 0.0
    test 654 forward 240N (-40.000, -138.564) 3/4: -3566810.754496, -14651410.305646, 150.395289, 1.16007
    test 655 reverse 240N (-40.000, -138.564) 3/4: 2.929642751054232e-14
    test 656 forward 243N (-36.319, -142.561) 3/4: -3420621.906486, -15254653.660248, 155.577129, 1.147079
    test 657 reverse 243N (-36.319, -142.561) 3/4: 7.105427357601002e-15
    test 658 forward 246N (-32.539, -146.167) 3/4: -3250522.133697, -15839614.666766, 160.149958, 1.132638
    test 659 reverse 246N (-32.539, -146.167) 3/4: 1.4210854715202004e-14
    test 660 forward 249N (-28.669, -149.373) 3/4: -3069132.144368, -16405050.640186, 164.124094, 1.118063
    test 661 reverse 249N (-28.669, -149.373) 3/4: 3.552713678800501e-15
    test 662 forward 252N (-24.721, -152.169) 3/4: -2888128.173431, -16951919.948156, 167.534978, 1.104377
    test 663 reverse 252N (-24.721, -152.169) 3/4: 3.552713678800501e-15
    test 664 forward 255N (-20.706, -154.548) 3/4: -2717773.256417, -17482549.021439, 170.437193, 1.09228
    test 665 reverse 255N (-20.706, -154.548) 3/4: 3.552713678800501e-15
    test 666 forward 258N (-16.633, -156.504) 3/4: -2566730.586316, -17999918.486885, 172.899178, 1.082187
    test 667 reverse 258N (-16.633, -156.504) 3/4: 3.552713678800501e-15
    test 668 forward 261N (-12.515, -158.030) 3/4: -2442031.891673, -18507145.758, 174.99917, 1.074303
    test 669 reverse 261N (-12.515, -158.030) 3/4: 7.105427357601002e-15
    test 670 forward 264N (-8.362, -159.124) 3/4: -2349105.316925, -19007174.828239, 176.822266, 1.068689
    test 671 reverse 264N (-8.362, -159.124) 3/4: 8.881784197001252e-15
    test 672 forward 267N (-4.187, -159.781) 3/4: -2291809.478825, -19502649.329559, 178.458273, 1.06534
    test 673 reverse 267N (-4.187, -159.781) 3/4: 9.769962616701378e-15
    test 674 forward 270N (0.000, -160.000) 3/4: -2272454.379192, -19995929.886042, 180.0, 1.064227
    test 675 reverse 270N (0.000, -160.000) 3/3: 0.0
    test 676 forward 273N (4.187, -159.781) 3/4: -2291809.478825, 19502649.329559, -178.458273, 1.06534
    test 677 reverse 273N (4.187, -159.781) 3/4: 4.440892098500626e-15
    test 678 forward 276N (8.362, -159.124) 3/4: -2349105.316925, 19007174.828239, -176.822266, 1.068689
    test 679 reverse 276N (8.362, -159.124) 3/4: 1.0658141036401503e-14
    test 680 forward 279N (12.515, -158.030) 3/4: -2442031.891673, 18507145.758, -174.99917, 1.074303
    test 681 reverse 279N (12.515, -158.030) 3/4: 1.4210854715202004e-14
    test 682 forward 282N (16.633, -156.504) 3/4: -2566730.586316, 17999918.486885, -172.899178, 1.082187
    test 683 reverse 282N (16.633, -156.504) 3/4: 3.552713678800501e-15
    test 684 forward 285N (20.706, -154.548) 3/4: -2717773.256417, 17482549.021439, -170.437193, 1.09228
    test 685 reverse 285N (20.706, -154.548) 3/4: 3.552713678800501e-15
    test 686 forward 288N (24.721, -152.169) 3/4: -2888128.173431, 16951919.948156, -167.534978, 1.104377
    test 687 reverse 288N (24.721, -152.169) 3/4: 2.4868995751603507e-14
    test 688 forward 291N (28.669, -149.373) 3/4: -3069132.144368, 16405050.640186, -164.124094, 1.118063
    test 689 reverse 291N (28.669, -149.373) 3/4: 1.4210854715202004e-14
    test 690 forward 294N (32.539, -146.167) 3/4: -3250522.133697, 15839614.666766, -160.149958, 1.132638
    test 691 reverse 294N (32.539, -146.167) 3/4: 1.4210854715202004e-14
    test 692 forward 297N (36.319, -142.561) 3/4: -3420621.906486, 15254653.660248, -155.577129, 1.147079
    test 693 reverse 297N (36.319, -142.561) 3/4: 7.105427357601002e-15
    test 694 forward 300N (40.000, -138.564) 3/4: -3566810.754496, 14651410.305646, -150.395289, 1.16007
    test 695 reverse 300N (40.000, -138.564) 3/4: 2.842170943040401e-14
    test 696 forward 303N (43.571, -134.187) 3/4: -3676387.634221, 14034104.572541, -144.624552, 1.170121
    test 697 reverse 303N (43.571, -134.187) 3/4: 0.0
    test 698 forward 306N (47.023, -129.443) 3/4: -3737846.053669, 13410380.03778, -138.317827, 1.175799
    test 699 reverse 306N (47.023, -129.443) 3/4: 0.0
    test 700 forward 309N (50.346, -124.343) 3/4: -3742386.824274, 12791126.616764, -131.557863, 1.176031
    test 701 reverse 309N (50.346, -124.343) 3/4: 1.4210854715202004e-14
    test 702 forward 312N (53.530, -118.903) 3/4: -3685290.742854, 12189522.028618, -124.447841, 1.170375
    test 703 reverse 312N (53.530, -118.903) 3/4: 7.105427357601002e-15
    test 704 forward 315N (56.569, -113.137) 3/4: -3566696.824822, 11619422.467571, -117.096854, 1.159166
    test 705 reverse 315N (56.569, -113.137) 3/4: 3.552713678800501e-14
    test 706 forward 318N (59.452, -107.061) 3/4: -3391492.622467, 11093528.387239, -109.604086, 1.14345
    test 707 reverse 318N (59.452, -107.061) 3/4: 0.0
    test 708 forward 321N (62.172, -100.691) 3/4: -3168362.707459, 10621853.317461, -102.04623, 1.124739
    test 709 reverse 321N (62.172, -100.691) 3/4: 2.929642751054232e-14
    test 710 forward 324N (64.721, -94.046) 3/4: -2908348.733697, 10210857.598605, -94.471204, 1.104695
    test 711 reverse 324N (64.721, -94.046) 3/4: 1.4210854715202004e-14
    test 712 forward 327N (67.094, -87.142) 3/4: -2623368.28288, 9863301.12097, -86.898617, 1.084836
    test 713 reverse 327N (67.094, -87.142) 3/4: 4.263256414560601e-14
    test 714 forward 330N (69.282, -80.000) 3/4: -2325015.074835, 9578621.128889, -79.325231, 1.066355
    test 715 reverse 330N (69.282, -80.000) 3/4: 8.526512829121202e-14
    test 716 forward 333N (71.281, -72.638) 3/4: -2023752.790526, 9353559.771346, -71.732868, 1.050046
    test 717 reverse 333N (71.281, -72.638) 3/3: 2.842170943040401e-14
    test 718 forward 336N (73.084, -65.078) 3/4: -1728450.251911, 9182823.938232, -64.096558, 1.036319
    test 719 reverse 336N (73.084, -65.078) 3/3: 2.0097183471152322e-14
    test 720 forward 339N (74.686, -57.339) 3/4: -1446137.252018, 9059670.735504, -56.391495, 1.025259
    test 721 reverse 339N (74.686, -57.339) 3/3: 2.5618982671915014e-14
    test 722 forward 342N (76.085, -49.443) 3/4: -1181870.215451, 8976407.252949, -48.598167, 1.016714
    test 723 reverse 342N (76.085, -49.443) 3/3: 0.0
    test 724 forward 345N (77.274, -41.411) 3/4: -938645.229361, 8924845.3123, -40.705476, 1.010384
    test 725 reverse 345N (77.274, -41.411) 3/3: 2.0097183471152322e-14
    test 726 forward 348N (78.252, -33.266) 3/4: -717349.637417, 8896761.249834, -32.712011, 1.005894
    test 727 reverse 348N (78.252, -33.266) 3/3: 0.0
    test 728 forward 351N (79.015, -25.030) 3/4: -516782.400098, 8884389.933155, -24.625783, 1.002865
    test 729 reverse 351N (79.015, -25.030) 3/3: 4.1583447479068616e-14
    test 730 forward 354N (79.562, -16.725) 3/4: -333788.634116, 8880946.730424, -16.462884, 1.000962
    test 731 reverse 354N (79.562, -16.725) 3/3: 1.4210854715202004e-14
    test 732 forward 357N (79.890, -8.374) 3/4: -163544.38007, 8881136.361771, -8.245542, 0.999927
    test 733 reverse 357N (79.890, -8.374) 3/3: 3.552713678800501e-14
    test 734 forward 360N (80.000, 0.000) 3/3: 0.0, 8881585.815988, 0.0, 0.9996
    test 735 reverse 360N (80.000, 0.000) 3/3: 0.0
    test 736 max: 8.526512829121202e-14  FAILED, KNOWN, expected 9e-14

    test 737 forward: 6208422.5374, 5452954.287187, 41.077484, 1.511911
    test 738 reverse: 30.244228, 60.169664, 41.479185, 1.510346

    3 of 738 testKtm.py tests (0.4%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 428.764 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testLatLon.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.F_D from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_DM from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_DMS from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_RAD from .dms by testLatLon.py line 12
# lazily imported pygeodesy.R_M from .constants by testLatLon.py line 12
# lazily imported pygeodesy.R_NM from .constants by testLatLon.py line 12
# lazily imported pygeodesy.degrees from .utily by testLatLon.py line 12
# lazily imported pygeodesy.fstr from .streprs by testLatLon.py line 12
# lazily imported pygeodesy.Height from .units by testLatLon.py line 12
# lazily imported pygeodesy.isclockwise from .points by testLatLon.py line 12
# lazily imported pygeodesy.isconvex from .points by testLatLon.py line 12
# lazily imported pygeodesy.isenclosedBy from .points by testLatLon.py line 12
# lazily imported pygeodesy.isnear0 from .constants by testLatLon.py line 12
# lazily imported pygeodesy.ispolar from .points by testLatLon.py line 12
# lazily imported pygeodesy.m2km from .utily by testLatLon.py line 12
# lazily imported pygeodesy.m2NM from .utily by testLatLon.py line 12
# lazily imported pygeodesy.IntersectionError from .errors by testLatLon.py line 12
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testLatLon.py line 12
# lazily imported pygeodesy.ellipsoidalExact by testLatLon.py line 632
# lazily imported pygeodesy.ellipsoidalNvector by testLatLon.py line 632
# lazily imported pygeodesy.sphericalNvector by testLatLon.py line 632
# lazily imported pygeodesy.sphericalTrigonometry by testLatLon.py line 632

    testing testLatLon.py 23.12.03 isLazy=3

    testLatLon(pygeodesy.sphericalNvector, 24.06.11)
    test 1 isEllipsoidal: False
    test 2 isSpherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 isequalTo: True
    test 10 isequalTo: True
    test 11 latlon2: 52.20472, 0.14056
    test 12 latlon2: 52.2047, 0.1406
    test 13 latlon2: 52.205, 0.141
    test 14 latlon2: 52.2, 0.14
    test 15 latlon2: 52.2, 0.1
    test 16 latlon2: 52.0, 0.0
# lazily imported pygeodesy.ecef by latlonBase.py line 482
    test 17 chordTo: 12036677.26
    test 18 chordTo: 12036463.78
    test 19 initialBearingTo: 156.1666
    test 20 initialBearingTo: 65.8921
    test 21 initialBearingTo: 0.0
    test 22 initialBearingTo: 180.0
    test 23 finalBearingTo: 157.8904
    test 24 finalBearingTo: 93.8581
    test 25 bearingTo2: 156.1666, 157.8904
    test 26 ispolar: True
    test 27 copy: True
    test 28 __eq__: True
    test 29 __ne__: False
    test 30 equirectangularTo: 404329.56
    test 31 distanceTo: 404279.720589
    test 32 distanceTo: 404279.720589
    test 33 distanceTo: 2145
    test 34 distanceTo: 18013602.92
    test 35 distanceTo: 20015114.35
    test 36 intermediateTo: 51.372084°N, 000.707337°E
    test 37 intermediateTo: True
    test 38 intermediateTo: 404279.721
    test 39 intermediateTo+5: 35.160975°N, 008.989542°E
    test 40 intermediateTo+5: 5.000
    test 41 intermediateTo-4: 64.911647°N, 013.726301°W
    test 42 intermediateTo-4: 4.000
    test 43 intermediateTo-h: 125.000
    test 44 intermediateChordTo: 51.372294°N, 000.707192°E
    test 45 intermediateChordTo: True
    test 46 intermediateChordTo-h: 125.000
    test 47 midpointTo: 50.536327°N, 001.274614°E
    test 48 destination: 51.513546°N, 000.098345°W
    test 49 destination: 51°30′49″N, 000°05′54″W
    test 50 destination: 34°37′N, 116°33′W
    test 51 destination: 34.613647°N, 116.55116°W
    test 52 destination: 0.604122N, 2.034201W
    test 53 destination: 31.96383509°N, 064.37329146°E
    test 54 alongTrackDistanceTo: 62331.59
    test 55 alongTrackDistanceTo: 62331.58
    test 56 alongTrackDistanceTo: 99.588
    test 57 alongTrackDistanceTo: -7702.7
    test 58 alongTrackDistanceTo: 7587.6
    test 59 crossTrackDistanceTo: -305.66528160755445  FAILED, KNOWN, expected TypeError
    test 60 crossTrackDistanceTo: -307.55
    test 61 crossTrackDistanceTo: 7.4524
    test 62 greatCircle: (-0.79408, 0.12856, 0.59406)
# lazily imported pygeodesy.booleans by iters.py line 76
    test 63 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 64 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 65 chordTo: 124799.103
    test 66 cosineAndoyerLambertTo: 124801.098
    test 67 cosineAndoyerLambertTo: 124801.098
    test 68 cosineForsyheAndoyerLambertTo: 124801.098
    test 69 cosineForsyheAndoyerLambertTo: 124801.098
    test 70 cosineLawTo: 124801.098
    test 71 cosineLawTo: 124801.098
    test 72 equirectangularTo: 124804.754
    test 73 equirectangularTo: 124804.754
    test 74 euclideanTo: 130015.089
    test 75 euclideanTo: 130015.089
    test 76 flatLocalTo: 124804.754
    test 77 flatLocalTo: 124804.754
    test 78 flatPolarTo: 133663.257
    test 79 flatPolarTo: 133663.257
    test 80 hartzell: 53.3206°N, 001.7297°W
# lazily imported pygeodesy.triaxials by formy.py line 980
    test 81 hartzell: 53.3206°N, 001.7297°W
    test 82 height4: 0.0
    test 83 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 84 height4: 53°19′14.2″N, 001°43′46.9″W
    test 85 height4: 53°19′14.2″N, 001°43′46.9″W
    test 86 haversineTo: 124801.098
    test 87 haversineTo: 124801.098
    test 88 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 89 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 90 thomasTo: 124801.098
    test 91 thomasTo: 124801.098
    test 92 vincentysTo: 124801.098
    test 93 vincentysTo: 124801.098
    test 94 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 95 isclockwise: False
    test 96 isclockwise*: False
    test 97 isclockwise: True
    test 98 isclockwise*: True
    test 99 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 100 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 101 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 102 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 103 isconvex: False
    test 104 isconvex*: False
    test 105 isconvex: True
    test 106 isconvex*: True
    test 107 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 108 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 109 isenclosedBy1: True
    test 110 isenclosedBy1*: True
    test 111 isenclosedBy2: False
    test 112 isenclosedBy2*: False
    test 113 isenclosedBy3: False
    test 114 isenclosedBy3*: False
    test 115 isenclosedBy4: False
    test 116 isenclosedBy4*: False
    test 117 isenclosedBy5: False
    test 118 isenclosedBy5*: False
    test 119 isenclosedBy6: True
    test 120 isenclosedBy6*: True
    test 121 isenclosedBy7: True
    test 122 isenclosedBy7*: True
    test 123 isenclosedBy-CCW: True
    test 124 isenclosedBy-CW : True
    test 125 isenclosedBy-CCW: True
    test 126 initialBearingTo: 102.432182
    test 127 compassAngleTo: 100.017
    test 128 compassAngleTo: 105.599
    test 129 initialBearingTo: 288.715918
    test 130 compassAngleTo: 280.017
    test 131 compassAngleTo: 285.599
    test 132 equirectangularTo: 592.185
    test 133 distanceTo: 591.831
    test 134 compassAngleTo: 0.0
    test 135 compassAngleTo: 45.0
    test 136 compassAngleTo: 90.0
    test 137 compassAngleTo: 180.0
    test 138 compassAngleTo: 225.0
    test 139 compassAngleTo: 315.0
    test 140 compassAngleTo: 270.0
    test 141 compassAngleTo: 359.4
    test 142 latlon2: (53.0, 1.0)
    test 143 philam2: (0.93, 0.02)
    test 144 compassAngleTo: 31
    test 145 compassAngleTo: 45

    test 146 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 147 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 148 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 149 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 150 isequalTo: <class 'bool'>
    test 151 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 152 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 153 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 154 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 155 compassAngleTo: <class 'float'>
    test 156 cosineLawTo: <class 'float'>
    test 157 euclideanTo: <class 'float'>
    test 158 flatLocalTo: <class 'float'>
    test 159 flatPolarTo: <class 'float'>
    test 160 haversineTo: <class 'float'>
    test 161 hubenyTo: <class 'float'>
    test 162 vincentysTo: <class 'float'>
    test 163 toVector: (3922384.659522, 0.0, 5020423.423198)
    test 164 toVector3d: (0.61566, 0.0, 0.78801)
    test 165 trilaterate5 (pygeodesy.sphericalNvector) .min: 223.305
    test 166 trilaterate5 (pygeodesy.sphericalNvector) .point: 42.67456065°N, 002.49539502°E
    test 167 trilaterate5 (pygeodesy.sphericalNvector) .min- is .maxPoint: True
    test 168 trilaterate5 (pygeodesy.sphericalNvector) .n: 1
    test 169 trilaterate5 (pygeodesy.sphericalNvector) .error: sphericalNvector.LatLon.trilaterate5(area=True), MRO(nvectorBase.LatLonNvectorBase, sphericalBase.LatLonSphericalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented
# lazily imported pygeodesy.vector2d by latlonBase.py line 1146

    test 170 radii11: Radii11Tuple(rA=7701.409157, rB=1361.530045, rC=499.257353, cR=4886.694635, rIn=739.915482, riS=179.523525, roS=6087.250896, a=1860.787398, b=8200.666509, c=9062.939201, s=9562.196554)

    22 tests skipped (22): No module named 'numpy': required by vector2d._numpy

    test 171 area cw/ccw: 1.0

    testLatLon(pygeodesy.sphericalTrigonometry, 24.06.21)
    test 172 isEllipsoidal: False
    test 173 isSpherical: True
    test 174 lat/lonDMS: 52.20472°N, 000.14056°E
    test 175 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 176 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 177 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 178 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 179 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 180 isequalTo: True
    test 181 isequalTo: True
    test 182 latlon2: 52.20472, 0.14056
    test 183 latlon2: 52.2047, 0.1406
    test 184 latlon2: 52.205, 0.141
    test 185 latlon2: 52.2, 0.14
    test 186 latlon2: 52.2, 0.1
    test 187 latlon2: 52.0, 0.0
    test 188 chordTo: 12036677.26
    test 189 chordTo: 12036463.78
    test 190 initialBearingTo: 156.1666
    test 191 initialBearingTo: 65.8921
    test 192 initialBearingTo: 0.0
    test 193 initialBearingTo: 180.0
    test 194 finalBearingTo: 157.8904
    test 195 finalBearingTo: 93.8581
    test 196 bearingTo2: 156.1666, 157.8904
    test 197 ispolar: True
    test 198 copy: True
    test 199 __eq__: True
    test 200 __ne__: False
    test 201 equirectangularTo: 404329.56
    test 202 distanceTo: 404279.720589
    test 203 distanceTo: 404279.720589
    test 204 distanceTo: 2145
    test 205 antipodal: False
    test 206 distanceTo dateline: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 207 distanceTo unrolled: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 208 antipodal: False
    test 209 distanceTo dateline: 9491735
    test 210 distanceTo unrolled: 9491735
    test 211 distanceTo: 18013602.92
    test 212 distanceTo: 20015114.35
    test 213 intermediateTo: 51.372084°N, 000.707337°E
    test 214 intermediateTo: True
    test 215 intermediateTo: 404279.721
    test 216 intermediateTo+5: 35.160975°N, 008.989542°E
    test 217 intermediateTo+5: 5.000
    test 218 intermediateTo-4: 64.911647°N, 013.726301°W
    test 219 intermediateTo-4: 4.000
    test 220 intermediateTo-h: 125.000
    test 221 midpointTo: 50.536327°N, 001.274614°E
    test 222 destination: 51.513546°N, 000.098345°W
    test 223 destination: 51°30′49″N, 000°05′54″W
    test 224 destination: 34°37′N, 116°33′W
    test 225 destination: 34.613647°N, 116.55116°W
    test 226 destination: 0.604122N, 2.034201W
    test 227 destination: 31.96383509°N, 064.37329146°E
    test 228 alongTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.alongTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 229 alongTrackDistanceTo: 62331.58
    test 230 alongTrackDistanceTo: 99.588
    test 231 alongTrackDistanceTo: -7702.7
    test 232 alongTrackDistanceTo: 7587.6
    test 233 crossTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.crossTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 234 crossTrackDistanceTo: -307.55
    test 235 crossTrackDistanceTo: 7.4524
    test 236 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 237 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 238 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 239 chordTo: 124799.103
    test 240 cosineAndoyerLambertTo: 124801.098
    test 241 cosineAndoyerLambertTo: 124801.098
    test 242 cosineForsyheAndoyerLambertTo: 124801.098
    test 243 cosineForsyheAndoyerLambertTo: 124801.098
    test 244 cosineLawTo: 124801.098
./pygeodesy/ellipsoidalBase.py:432: DeprecationWarning: Property_RO L{pygeodesy.ellipsoids.Ellipsoid.geodesic} has been DEPRECATED, use property C{geodesicw}.
  _ = self.datum.ellipsoid.geodesic
    test 245 cosineLawTo: 124801.098
    test 246 equirectangularTo: 124804.754
    test 247 equirectangularTo: 124804.754
    test 248 euclideanTo: 130015.089
    test 249 euclideanTo: 130015.089
    test 250 flatLocalTo: 124804.754
    test 251 flatLocalTo: 124804.754
    test 252 flatPolarTo: 133663.257
    test 253 flatPolarTo: 133663.257
    test 254 hartzell: 53.3206°N, 001.7297°W
    test 255 hartzell: 53.3206°N, 001.7297°W
    test 256 height4: 0.0
    test 257 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 258 height4: 53°19′14.2″N, 001°43′46.9″W
    test 259 height4: 53°19′14.2″N, 001°43′46.9″W
    test 260 haversineTo: 124801.098
    test 261 haversineTo: 124801.098
    test 262 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 263 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 264 thomasTo: 124801.098
    test 265 thomasTo: 124801.098
    test 266 vincentysTo: 124801.098
    test 267 vincentysTo: 124801.098
    test 268 isclockwise: False
    test 269 isclockwise*: False
    test 270 isclockwise: True
    test 271 isclockwise*: True
    test 272 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 273 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 274 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 275 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 276 isconvex: False
    test 277 isconvex*: False
    test 278 isconvex: True
    test 279 isconvex*: True
    test 280 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 281 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 282 isenclosedBy1: True
    test 283 isenclosedBy1*: True
    test 284 isenclosedBy2: False
    test 285 isenclosedBy2*: False
    test 286 isenclosedBy3: False
    test 287 isenclosedBy3*: False
    test 288 isenclosedBy4: False
    test 289 isenclosedBy4*: False
    test 290 isenclosedBy5: False
    test 291 isenclosedBy5*: False
    test 292 isenclosedBy6: True
    test 293 isenclosedBy6*: True
    test 294 isenclosedBy7: True
    test 295 isenclosedBy7*: True
    test 296 isenclosedBy-CCW: True
    test 297 isenclosedBy-CW : True
    test 298 isenclosedBy-CCW: True
    test 299 initialBearingTo: 102.432182
    test 300 compassAngleTo: 100.017
    test 301 compassAngleTo: 105.599
    test 302 initialBearingTo: 288.715918
    test 303 compassAngleTo: 280.017
    test 304 compassAngleTo: 285.599
    test 305 equirectangularTo: 592.185
    test 306 distanceTo: 591.831
    test 307 bearingTo: 0.0
    test 308 compassAngleTo: 0.0
    test 309 bearingTo: 45.0
    test 310 compassAngleTo: 45.0
    test 311 bearingTo: 90.0
    test 312 compassAngleTo: 90.0
    test 313 bearingTo: 180.0
    test 314 compassAngleTo: 180.0
    test 315 bearingTo: 225.0
    test 316 compassAngleTo: 225.0
    test 317 bearingTo: 315.0
    test 318 compassAngleTo: 315.0
    test 319 bearingTo: 270.0
    test 320 compassAngleTo: 270.0
    test 321 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 322 compassAngleTo: 359.4
    test 323 latlon2: (53.0, 1.0)
    test 324 philam2: (0.93, 0.02)
    test 325 bearingTo: 31
    test 326 compassAngleTo: 31
    test 327 compassAngleTo: 45

    test 328 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 329 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 330 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 331 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 332 isequalTo: <class 'bool'>
    test 333 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 334 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 335 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 336 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 337 compassAngleTo: <class 'float'>
    test 338 cosineLawTo: <class 'float'>
    test 339 euclideanTo: <class 'float'>
    test 340 flatLocalTo: <class 'float'>
    test 341 flatPolarTo: <class 'float'>
    test 342 haversineTo: <class 'float'>
    test 343 hubenyTo: <class 'float'>
    test 344 vincentysTo: <class 'float'>
    test 345 toNvector: (0.61566, 0.0, 0.78801)
    test 346 toVector: (3922384.659522, 0.0, 5020423.423198)
    test 347 toVector3d: (0.61566, 0.0, 0.78801)

    test 348 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 349 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 350 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 351 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 352 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 353 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 354 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 160.242
    test 355 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E
    test 356 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 357 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 358 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 359 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 360 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 361 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 362 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 1340.608
    test 363 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.69128229°N, 002.50129001°E
    test 364 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1499.220
    test 365 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.64295864°N, 002.44242391°E
    test 366 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 367 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)

    27 tests skipped (49): No module named 'numpy': required by vector2d._numpy

    test 368 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)

    22 tests skipped (71): No module named 'numpy': required by vector2d._numpy

    test 369 area cw/ccw: 1.0

    testLatLon(pygeodesy.ellipsoidalNvector, 24.06.15)
    test 370 isEllipsoidal: True
    test 371 isSpherical: False
    test 372 lat/lonDMS: 52.20472°N, 000.14056°E
    test 373 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 374 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 375 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 376 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 377 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 378 isequalTo: True
    test 379 isequalTo: True
    test 380 latlon2: 52.20472, 0.14056
    test 381 latlon2: 52.2047, 0.1406
    test 382 latlon2: 52.205, 0.141
    test 383 latlon2: 52.2, 0.14
    test 384 latlon2: 52.2, 0.1
    test 385 latlon2: 52.0, 0.0
    test 386 chordTo: 12029263.15
    test 387 chordTo: 12029049.69
    test 388 copy: True
    test 389 __eq__: True
    test 390 __ne__: False
    test 391 equirectangularTo: 404329.56
    test 392 distanceTo: 404279.720589
    test 393 distanceTo: 404279.720589
    test 394 distanceTo: 3972863
    test 395 distanceTo: 18013602.92
    test 396 distanceTo: 20015114.35  FAILED, KNOWN, expected 20003931.46
    test 397 intermediateTo: 51.372294°N, 000.707192°E
    test 398 intermediateTo: True
    test 399 intermediateTo: 404279.721
    test 400 intermediateTo+5: 35.560239°N, 008.833512°E
    test 401 intermediateTo+5: 4.885
    test 402 intermediateTo-4: 64.570387°N, 013.156352°W
    test 403 intermediateTo-4: 3.885
    test 404 intermediateTo-h: 125.000
    test 405 midpointTo: 50.536327°N, 001.274614°E
    test 406 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 407 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 408 chordTo: 125203.963
    test 409 cosineAndoyerLambertTo: 125205.962
    test 410 cosineAndoyerLambertTo: 125205.962
    test 411 cosineForsyheAndoyerLambertTo: 125205.965
    test 412 cosineForsyheAndoyerLambertTo: 125205.965
    test 413 cosineLawTo: 124801.098
    test 414 cosineLawTo: 124801.098
    test 415 equirectangularTo: 124804.754
    test 416 equirectangularTo: 124804.754
    test 417 euclideanTo: 130015.089
    test 418 euclideanTo: 130015.089
    test 419 flatLocalTo: 125209.633
    test 420 flatLocalTo: 125209.633
    test 421 flatPolarTo: 133663.257
    test 422 flatPolarTo: 133663.257
    test 423 hartzell: 53.3206°N, 001.7297°W
    test 424 hartzell: 53.349541°N, 001.7297°W
    test 425 height4: 0.0
    test 426 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 427 height4: 53°19′14.2″N, 001°43′46.9″W
    test 428 height4: 53°19′14.2″N, 001°43′46.9″W
    test 429 haversineTo: 124801.098
    test 430 haversineTo: 124801.098
    test 431 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 432 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 433 thomasTo: 125206.188
    test 434 thomasTo: 125206.188
    test 435 vincentysTo: 124801.098
    test 436 vincentysTo: 124801.098
    test 437 isclockwise: False
    test 438 isclockwise*: False
    test 439 isclockwise: True
    test 440 isclockwise*: True
    test 441 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 442 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 443 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 444 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 445 isconvex: False
    test 446 isconvex*: False
    test 447 isconvex: True
    test 448 isconvex*: True
    test 449 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 450 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 451 isenclosedBy1: True
    test 452 isenclosedBy1*: True
    test 453 isenclosedBy2: False
    test 454 isenclosedBy2*: False
    test 455 isenclosedBy3: False
    test 456 isenclosedBy3*: False
    test 457 isenclosedBy4: False
    test 458 isenclosedBy4*: False
    test 459 isenclosedBy5: False
    test 460 isenclosedBy5*: False
    test 461 isenclosedBy6: True
    test 462 isenclosedBy6*: True
    test 463 isenclosedBy7: True
    test 464 isenclosedBy7*: True
    test 465 isenclosedBy-CCW: True
    test 466 isenclosedBy-CW : True
    test 467 isenclosedBy-CCW: True
    test 468 compassAngleTo: 100.017
    test 469 compassAngleTo: 105.599
    test 470 compassAngleTo: 280.017
    test 471 compassAngleTo: 285.599
    test 472 equirectangularTo: 592.185
    test 473 distanceTo: 591.831
    test 474 compassAngleTo: 0.0
    test 475 compassAngleTo: 45.0
    test 476 compassAngleTo: 90.0
    test 477 compassAngleTo: 180.0
    test 478 compassAngleTo: 225.0
    test 479 compassAngleTo: 315.0
    test 480 compassAngleTo: 270.0
    test 481 compassAngleTo: 359.4
    test 482 latlon2: (53.0, 1.0)
    test 483 philam2: (0.93, 0.02)
    test 484 compassAngleTo: 31
    test 485 compassAngleTo: 45

    test 486 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 487 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 488 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 489 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 490 isequalTo: <class 'bool'>
    test 491 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 492 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 493 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 494 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 495 compassAngleTo: <class 'float'>
    test 496 cosineLawTo: <class 'float'>
    test 497 euclideanTo: <class 'float'>
    test 498 flatLocalTo: <class 'float'>
    test 499 flatPolarTo: <class 'float'>
    test 500 haversineTo: <class 'float'>
    test 501 hubenyTo: <class 'float'>
    test 502 vincentysTo: <class 'float'>
    test 503 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 504 toVector3d: (0.61823, 0.0, 0.786)
    test 505 trilaterate5 (pygeodesy.ellipsoidalNvector) .min: 223.305
    test 506 trilaterate5 (pygeodesy.ellipsoidalNvector) .point: 42.67456065°N, 002.49539502°E
    test 507 trilaterate5 (pygeodesy.ellipsoidalNvector) .min- is .maxPoint: True
    test 508 trilaterate5 (pygeodesy.ellipsoidalNvector) .n: 1
    test 509 trilaterate5 (pygeodesy.ellipsoidalNvector) .error: ellipsoidalNvector.LatLon.trilaterate5(area=True), MRO(nvectorBase.LatLonNvectorBase, ellipsoidalBase.LatLonEllipsoidalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    test 510 radii11: Radii11Tuple(rA=7705.84217, rB=1367.057272, rC=498.160185, cR=4897.488519, rIn=740.470746, riS=179.544791, roS=5964.029657, a=1865.217457, b=8204.002354, c=9072.899442, s=9571.059626)

    22 tests skipped (93): No module named 'numpy': required by vector2d._numpy

    testLatLon(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 511 isEllipsoidal: True
    test 512 isSpherical: False
    test 513 lat/lonDMS: 52.20472°N, 000.14056°E
    test 514 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 515 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 516 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 517 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 518 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 519 isequalTo: True
    test 520 isequalTo: True
    test 521 latlon2: 52.20472, 0.14056
    test 522 latlon2: 52.2047, 0.1406
    test 523 latlon2: 52.205, 0.141
    test 524 latlon2: 52.2, 0.14
    test 525 latlon2: 52.2, 0.1
    test 526 latlon2: 52.0, 0.0
    test 527 chordTo: 12029263.15
    test 528 chordTo: 12029049.69
    test 529 initialBearingTo: 156.1106
    test 530 initialBearingTo: 65.9335
    test 531 initialBearingTo: 0.0
    test 532 initialBearingTo: 180.0
    test 533 finalBearingTo: 157.8345
    test 534 finalBearingTo: 93.9034
    test 535 bearingTo2: 156.1106, 157.8345
    test 536 ispolar: True
    test 537 copy: True
    test 538 __eq__: True
    test 539 __ne__: False
    test 540 equirectangularTo: 404329.56
    test 541 distanceTo: 404607.805988
    test 542 distanceTo: 404607.805988
    test 543 distanceTo: 3981601
    test 544 antipodal: False
    test 545 distanceTo dateline: 19959679.267
    test 546 distanceTo unrolled: 19959679.267
    test 547 antipodal: False
    test 548 distanceTo dateline: 9513998
    test 549 distanceTo unrolled: 9513998
    test 550 distanceTo: 18012714.66
    test 551 distanceTo: ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, antipodal ...
    test 552 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
./test/testLatLon.py:620: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  r = a(reversed(b))
./pygeodesy/ellipsoidalKarney.py:139: DeprecationWarning: Property_RO L{pygeodesy.ellipsoids.Ellipsoid.geodesic} has been DEPRECATED, use property C{geodesicw}.
  return fabs(_polygon(datum.ellipsoid.geodesic, points, True, False, wrap))
./test/testLatLon.py:621: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  f = a(b)  # ccw
    test 553 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 554 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 555 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 556 intermediateTo: 51.372275°N, 000.707253°E
    test 557 intermediateTo: True
    test 558 intermediateTo: 404607.806
    test 559 intermediateTo+5: 35.139582°N, 008.994368°E
    test 560 intermediateTo+5: 5.000
    test 561 intermediateTo-4: 64.894124°N, 013.705689°W
    test 562 intermediateTo-4: 4.000
    test 563 intermediateTo-h: 125.000
    test 564 midpointTo: 50.536583°N, 001.274507°E
    test 565 destination: 51.513526°N, 000.098038°W
    test 566 destination: 51°30′49″N, 000°05′53″W
    test 567 destination: 33°57′N, 118°24′W
    test 568 destination: 33.950367°N, 118.399012°W
    test 569 destination: 0.592546N, 2.066453W
    test 570 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 571 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 572 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 573 chordTo: 125203.963
    test 574 cosineAndoyerLambertTo: 125205.962
    test 575 cosineAndoyerLambertTo: 125205.962
    test 576 cosineForsyheAndoyerLambertTo: 125205.965
    test 577 cosineForsyheAndoyerLambertTo: 125205.965
    test 578 cosineLawTo: 124801.098
    test 579 cosineLawTo: 124801.098
    test 580 equirectangularTo: 124804.754
    test 581 equirectangularTo: 124804.754
    test 582 euclideanTo: 130015.089
    test 583 euclideanTo: 130015.089
    test 584 flatLocalTo: 125209.633
    test 585 flatLocalTo: 125209.633
    test 586 flatPolarTo: 133663.257
    test 587 flatPolarTo: 133663.257
    test 588 hartzell: 53.3206°N, 001.7297°W
    test 589 hartzell: 53.349541°N, 001.7297°W
    test 590 height4: 0.0
    test 591 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 592 height4: 53°19′14.2″N, 001°43′46.9″W
    test 593 height4: 53°19′14.2″N, 001°43′46.9″W
    test 594 haversineTo: 124801.098
    test 595 haversineTo: 124801.098
    test 596 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 597 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 598 thomasTo: 125206.188
    test 599 thomasTo: 125206.188
    test 600 vincentysTo: 124801.098
    test 601 vincentysTo: 124801.098
    test 602 isclockwise: False
    test 603 isclockwise*: False
    test 604 isclockwise: True
    test 605 isclockwise*: True
    test 606 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 607 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 608 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 609 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 610 isconvex: False
    test 611 isconvex*: False
    test 612 isconvex: True
    test 613 isconvex*: True
    test 614 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 615 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 616 isenclosedBy1: True
    test 617 isenclosedBy1*: True
    test 618 isenclosedBy2: False
    test 619 isenclosedBy2*: False
    test 620 isenclosedBy3: False
    test 621 isenclosedBy3*: False
    test 622 isenclosedBy4: False
    test 623 isenclosedBy4*: False
    test 624 isenclosedBy5: False
    test 625 isenclosedBy5*: False
    test 626 isenclosedBy6: True
    test 627 isenclosedBy6*: True
    test 628 isenclosedBy7: True
    test 629 isenclosedBy7*: True
    test 630 isenclosedBy-CCW: True
    test 631 isenclosedBy-CW : True
    test 632 isenclosedBy-CCW: True
    test 633 initialBearingTo: 102.392291
    test 634 compassAngleTo: 100.017
    test 635 compassAngleTo: 105.599
    test 636 initialBearingTo: 288.676039
    test 637 compassAngleTo: 280.017
    test 638 compassAngleTo: 285.599
    test 639 equirectangularTo: 592.185
    test 640 distanceTo: 593.571
    test 641 bearingTo: 0.0
    test 642 compassAngleTo: 0.0
    test 643 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 644 compassAngleTo: 45.0
    test 645 bearingTo: 90.0
    test 646 compassAngleTo: 90.0
    test 647 bearingTo: 180.0
    test 648 compassAngleTo: 180.0
    test 649 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 650 compassAngleTo: 225.0
    test 651 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 652 compassAngleTo: 315.0
    test 653 bearingTo: 270.0
    test 654 compassAngleTo: 270.0
    test 655 bearingTo: 360.0  FAILED, KNOWN, expected 359.4
    test 656 compassAngleTo: 359.4
    test 657 latlon2: (53.0, 1.0)
    test 658 philam2: (0.93, 0.02)
    test 659 bearingTo: 31
    test 660 compassAngleTo: 31
    test 661 compassAngleTo: 45

    test 662 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 663 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 664 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 665 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 666 isequalTo: <class 'bool'>
    test 667 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 668 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 669 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 670 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 671 compassAngleTo: <class 'float'>
    test 672 cosineLawTo: <class 'float'>
    test 673 euclideanTo: <class 'float'>
    test 674 flatLocalTo: <class 'float'>
    test 675 flatPolarTo: <class 'float'>
    test 676 haversineTo: <class 'float'>
    test 677 hubenyTo: <class 'float'>
    test 678 vincentysTo: <class 'float'>
    test 679 toNvector: (0.615661, 0.0, 0.788011, 0)
    test 680 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 681 toVector3d: (0.61823, 0.0, 0.786)
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1053
# lazily imported pygeodesy.azimuthal by ellipsoidalBase.py line 435
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
# lazily imported pygeodesy.elliptic by gx.py line 426

    test 682 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 305.091  FAILED, KNOWN, expected 311.234
    test 683 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66933643°N, 002.48620262°E  FAILED, KNOWN, expected 42.66938776°N, 002.48641176°E
    test 684 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1592.545  FAILED, KNOWN, expected 1586.951
    test 685 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.65141232°N, 002.46816989°E  FAILED, KNOWN, expected 42.65153156°N, 002.46821899°E
    test 686 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 3
    test 687 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 127.229  FAILED, KNOWN, expected 137.897
    test 688 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 152.612  FAILED, KNOWN, expected 148.175
    test 689 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 690 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 691 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 2400.293  FAILED, KNOWN, expected 2399.908
    test 692 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 2400.293  FAILED, KNOWN, expected 2399.908
    test 693 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66128984°N, 002.47973818°E  FAILED, KNOWN, expected 42.6613586°N, 002.47981223°E
    test 694 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min- is .maxPoint: True
    test 695 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 1
    test 696 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 1343.743  FAILED, KNOWN, expected 1332.749
    test 697 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.69131964°N, 002.50112167°E  FAILED, KNOWN, expected 42.69124153°N, 002.50124031°E
    test 698 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1445.554  FAILED, KNOWN, expected 1450.709
    test 699 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 700 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 701 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    27 tests skipped (120): No module named 'numpy': required by vector2d._numpy

    test 702 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    22 tests skipped (142): No module named 'numpy': required by vector2d._numpy
# lazily imported pygeodesy.ellipsoidalKarney by ellipsoidalVincenty.py line 399

    test 703 area cw/ccw: 1.0

    testLatLon(pygeodesy.ellipsoidalExact, 24.06.11)
    test 704 isEllipsoidal: True
    test 705 isSpherical: False
    test 706 lat/lonDMS: 52.20472°N, 000.14056°E
    test 707 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 708 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 709 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 710 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 711 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 712 isequalTo: True
    test 713 isequalTo: True
    test 714 latlon2: 52.20472, 0.14056
    test 715 latlon2: 52.2047, 0.1406
    test 716 latlon2: 52.205, 0.141
    test 717 latlon2: 52.2, 0.14
    test 718 latlon2: 52.2, 0.1
    test 719 latlon2: 52.0, 0.0
    test 720 chordTo: 12029263.15
    test 721 chordTo: 12029049.69
    test 722 initialBearingTo: 156.1106
    test 723 initialBearingTo: 65.9335
    test 724 initialBearingTo: 0.0
    test 725 initialBearingTo: 180.0
    test 726 finalBearingTo: 157.8345
    test 727 finalBearingTo: 93.9034
    test 728 bearingTo2: 156.1106, 157.8345
    test 729 ispolar: True
    test 730 copy: True
    test 731 __eq__: True
    test 732 __ne__: False
    test 733 equirectangularTo: 404329.56
    test 734 distanceTo: 404607.805988
    test 735 distanceTo: 404607.805988
    test 736 distanceTo: 3981601
    test 737 antipodal: False
    test 738 distanceTo dateline: 19959679.267
    test 739 distanceTo unrolled: 19959679.267
    test 740 antipodal: False
    test 741 distanceTo dateline: 9513998
    test 742 distanceTo unrolled: 9513998
    test 743 distanceTo: 18012714.66
    test 744 distanceTo: 0.00  FAILED, KNOWN, expected 20003931.46
    test 745 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 746 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 747 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 748 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 749 intermediateTo: 51.372275°N, 000.707253°E
    test 750 intermediateTo: True
    test 751 intermediateTo: 404607.806
    test 752 intermediateTo+5: 35.139582°N, 008.994368°E
    test 753 intermediateTo+5: 5.000
    test 754 intermediateTo-4: 64.894124°N, 013.705689°W
    test 755 intermediateTo-4: 4.000
    test 756 intermediateTo-h: 125.000
    test 757 midpointTo: 50.536583°N, 001.274507°E
    test 758 destination: 51.513526°N, 000.098038°W
    test 759 destination: 51°30′49″N, 000°05′53″W
    test 760 destination: 33°57′N, 118°24′W
    test 761 destination: 33.950367°N, 118.399012°W
    test 762 destination: 0.592546N, 2.066453W
    test 763 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 764 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 765 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 766 chordTo: 125203.963
    test 767 cosineAndoyerLambertTo: 125205.962
    test 768 cosineAndoyerLambertTo: 125205.962
    test 769 cosineForsyheAndoyerLambertTo: 125205.965
    test 770 cosineForsyheAndoyerLambertTo: 125205.965
    test 771 cosineLawTo: 124801.098
    test 772 cosineLawTo: 124801.098
    test 773 equirectangularTo: 124804.754
    test 774 equirectangularTo: 124804.754
    test 775 euclideanTo: 130015.089
    test 776 euclideanTo: 130015.089
    test 777 flatLocalTo: 125209.633
    test 778 flatLocalTo: 125209.633
    test 779 flatPolarTo: 133663.257
    test 780 flatPolarTo: 133663.257
    test 781 hartzell: 53.3206°N, 001.7297°W
    test 782 hartzell: 53.349541°N, 001.7297°W
    test 783 height4: 0.0
    test 784 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 785 height4: 53°19′14.2″N, 001°43′46.9″W
    test 786 height4: 53°19′14.2″N, 001°43′46.9″W
    test 787 haversineTo: 124801.098
    test 788 haversineTo: 124801.098
    test 789 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 790 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 791 thomasTo: 125206.188
    test 792 thomasTo: 125206.188
    test 793 vincentysTo: 124801.098
    test 794 vincentysTo: 124801.098
    test 795 isclockwise: False
    test 796 isclockwise*: False
    test 797 isclockwise: True
    test 798 isclockwise*: True
    test 799 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 800 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 801 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 802 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 803 isconvex: False
    test 804 isconvex*: False
    test 805 isconvex: True
    test 806 isconvex*: True
    test 807 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 808 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 809 isenclosedBy1: True
    test 810 isenclosedBy1*: True
    test 811 isenclosedBy2: False
    test 812 isenclosedBy2*: False
    test 813 isenclosedBy3: False
    test 814 isenclosedBy3*: False
    test 815 isenclosedBy4: False
    test 816 isenclosedBy4*: False
    test 817 isenclosedBy5: False
    test 818 isenclosedBy5*: False
    test 819 isenclosedBy6: True
    test 820 isenclosedBy6*: True
    test 821 isenclosedBy7: True
    test 822 isenclosedBy7*: True
    test 823 isenclosedBy-CCW: True
    test 824 isenclosedBy-CW : True
    test 825 isenclosedBy-CCW: True
    test 826 initialBearingTo: 102.392291
    test 827 compassAngleTo: 100.017
    test 828 compassAngleTo: 105.599
    test 829 initialBearingTo: 288.676039
    test 830 compassAngleTo: 280.017
    test 831 compassAngleTo: 285.599
    test 832 equirectangularTo: 592.185
    test 833 distanceTo: 593.571
    test 834 bearingTo: 0.0
    test 835 compassAngleTo: 0.0
    test 836 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 837 compassAngleTo: 45.0
    test 838 bearingTo: 90.0
    test 839 compassAngleTo: 90.0
    test 840 bearingTo: 180.0
    test 841 compassAngleTo: 180.0
    test 842 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 843 compassAngleTo: 225.0
    test 844 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 845 compassAngleTo: 315.0
    test 846 bearingTo: 270.0
    test 847 compassAngleTo: 270.0
    test 848 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 849 compassAngleTo: 359.4
    test 850 latlon2: (53.0, 1.0)
    test 851 philam2: (0.93, 0.02)
    test 852 bearingTo: 31
    test 853 compassAngleTo: 31
    test 854 compassAngleTo: 45

    test 855 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 856 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 857 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 858 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 859 isequalTo: <class 'bool'>
    test 860 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 861 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 862 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 863 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 864 compassAngleTo: <class 'float'>
    test 865 cosineLawTo: <class 'float'>
    test 866 euclideanTo: <class 'float'>
    test 867 flatLocalTo: <class 'float'>
    test 868 flatPolarTo: <class 'float'>
    test 869 haversineTo: <class 'float'>
    test 870 hubenyTo: <class 'float'>
    test 871 vincentysTo: <class 'float'>
    test 872 toNvector: (0.615661, 0.0, 0.788011, 0)
    test 873 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 874 toVector3d: (0.61823, 0.0, 0.786)

    test 875 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 305.091  FAILED, KNOWN, expected 311.234
    test 876 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66933643°N, 002.48620262°E  FAILED, KNOWN, expected 42.66938776°N, 002.48641176°E
    test 877 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1592.545  FAILED, KNOWN, expected 1586.951
    test 878 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.65141232°N, 002.46816989°E  FAILED, KNOWN, expected 42.65153156°N, 002.46821899°E
    test 879 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 3
    test 880 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 127.229  FAILED, KNOWN, expected 137.897
    test 881 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 152.612  FAILED, KNOWN, expected 148.175
    test 882 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 883 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 884 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 2400.293  FAILED, KNOWN, expected 2399.908
    test 885 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 2400.293  FAILED, KNOWN, expected 2399.908
    test 886 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66128984°N, 002.47973818°E  FAILED, KNOWN, expected 42.6613586°N, 002.47981223°E
    test 887 trilaterate5 (pygeodesy.ellipsoidalExact) .min- is .maxPoint: True
    test 888 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 1
    test 889 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 1343.743  FAILED, KNOWN, expected 1332.749
    test 890 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.69131964°N, 002.50112167°E  FAILED, KNOWN, expected 42.69124153°N, 002.50124031°E
    test 891 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1445.554  FAILED, KNOWN, expected 1450.709
    test 892 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 893 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 894 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    27 tests skipped (169): No module named 'numpy': required by vector2d._numpy

    test 895 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    22 tests skipped (191): No module named 'numpy': required by vector2d._numpy

    test 896 area cw/ccw: 1.0

    89 of 896 testLatLon.py tests (9.9%) FAILED, incl. 81 KNOWN plus 8 DeprecationWarnings, 191 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 2.910 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testLatLonBase.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.F_D from .dms by testLatLonBase.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testLatLonBase.py line 11
# lazily imported pygeodesy.isCartesian from .basics by testLatLonBase.py line 11
# lazily imported pygeodesy.isLatLon from .basics by testLatLonBase.py line 11
# lazily imported pygeodesy.isNvector from .basics by testLatLonBase.py line 11
# lazily imported pygeodesy.precision from .dms by testLatLonBase.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testLatLonBase.py line 140
# lazily imported pygeodesy.ellipsoidalKarney by testLatLonBase.py line 140
# lazily imported pygeodesy.ellipsoidalNvector by testLatLonBase.py line 140
# lazily imported pygeodesy.ellipsoidalVincenty by testLatLonBase.py line 140
# lazily imported pygeodesy.sphericalNvector by testLatLonBase.py line 140
# lazily imported pygeodesy.sphericalTrigonometry by testLatLonBase.py line 140

    testing testLatLonBase.py 23.10.15 isLazy=3

    testLatLon(pygeodesy.sphericalNvector, 24.06.11)
    test 1 lat, lon: 50.06632°N, 005.71475°W
    test 2 lat, lon: 50.066389°N, 005.714722°W
    test 3 isequalTo: True
    test 4 isequalTo3: True
    test 5 latlon: (52.205, 0.119)
    test 6 latlonheight: (52.205, 0.119, 0)
    test 7 phimlam: (0.911149, 0.002077)
    test 8 phimlamheight: (0.911149, 0.002077, 0)
    test 9 isequalTo: False
    test 10 antipode1: 52.205°S, 179.881°W
    test 11 antipode2: True
    test 12 antipode3: 52.205°N, 000.119°E
    test 13 antipode4: True
    test 14 antipode5: 52.205°N, 000.119°E
    test 15 isnormal1: True
    test 16 isnormal2: False
    test 17 normal1: False
    test 18 normal2: True
    test 19 toStr: 51°28′40″N, 000°00′06″W
    test 20 toStr: 51.4778°N, 000.0016°W
    test 21 precision: 0
    test 22 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 23 isequalTo: True
    test 24 isequalTo3: False
    test 25 latlon: (51.4778, -0.0016)
    test 26 phimlam: (0.898457, -0.000028)
    test 27 isequalTo: True
    test 28 isequalTo3: True
    test 29 latlon: (51.4778, -0.0016)
    test 30 latlonheight: (51.4778, -0.0016, 42.0)
    test 31 phimlam: (0.898457, -0.000028)
    test 32 phimlamheight: (0.898457, -0.000028, 42.0)
    test 33 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 34 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 35 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 36 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 37 ellipsoidalLatLon: True
    test 38 sphericalLatLon: True
# lazily imported pygeodesy.rhumb by ellipsoids.py line 1496

    test 39 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....ere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)
    test 40 rhumbLine: TMorder=6, azi12=105.484906, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....ere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)
    test 41 rhumbAzimuthTo: 107.563
    test 42 rhumbDestination: 50.964155°N, 001.853°E
    test 43 rhumbDestination: True
    test 44 rhumbDistanceTo: 42186.1
# lazily imported pygeodesy.elliptic by ellipsoids.py line 836
    test 45 rhumbIntersecant2: (LatLon(58°40′08.68″N, 042°42′40.63″E), LatLon(18°47′05.09″N, 011°00′15.53″W))
    test 46 rhumbMidpointo-0.5: 51.069759°N, 001.625988°E
    test 47 rhumbMidpointo: True
    test 48 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 49 rhumbMidpointo-0.25: 51.09838°N, 001.482038°E
    test 50 rhumbMidpointo-0.75: 51.041139°N, 001.769848°E
    test 51 rhumbMidpointo-1.0: 51.012519°N, 001.913619°E
    test 52 rhumbMidpointo-2.0: 50.898038°N, 002.48782°E

    testLatLon(pygeodesy.sphericalTrigonometry, 24.06.21)
    test 53 lat, lon: 50.06632°N, 005.71475°W
    test 54 lat, lon: 50.066389°N, 005.714722°W
    test 55 isequalTo: True
    test 56 isequalTo3: True
    test 57 latlon: (52.205, 0.119)
    test 58 latlonheight: (52.205, 0.119, 0)
    test 59 phimlam: (0.911149, 0.002077)
    test 60 phimlamheight: (0.911149, 0.002077, 0)
    test 61 isequalTo: False
    test 62 antipode1: 52.205°S, 179.881°W
    test 63 antipode2: True
    test 64 antipode3: 52.205°N, 000.119°E
    test 65 antipode4: True
    test 66 antipode5: 52.205°N, 000.119°E
    test 67 isnormal1: True
    test 68 isnormal2: False
    test 69 normal1: False
    test 70 normal2: True
    test 71 toStr: 51°28′40″N, 000°00′06″W
    test 72 toStr: 51.4778°N, 000.0016°W
    test 73 precision: 0
    test 74 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 75 isequalTo: True
    test 76 isequalTo3: False
    test 77 latlon: (51.4778, -0.0016)
    test 78 phimlam: (0.898457, -0.000028)
    test 79 isequalTo: True
    test 80 isequalTo3: True
    test 81 latlon: (51.4778, -0.0016)
    test 82 latlonheight: (51.4778, -0.0016, 42.0)
    test 83 phimlam: (0.898457, -0.000028)
    test 84 phimlamheight: (0.898457, -0.000028, 42.0)
    test 85 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 86 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 87 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 88 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 89 ellipsoidalLatLon: True
    test 90 sphericalLatLon: True

    test 91 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....ere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)
    test 92 rhumbLine: TMorder=6, azi12=105.484906, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....ere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)
    test 93 rhumbAzimuthTo: 107.563
    test 94 rhumbDestination: 50.964155°N, 001.853°E
    test 95 rhumbDestination: True
    test 96 rhumbDistanceTo: 42186.1
    test 97 rhumbIntersecant2: (LatLon(58°40′08.68″N, 042°42′40.63″E), LatLon(18°47′05.09″N, 011°00′15.53″W))
    test 98 rhumbMidpointo-0.5: 51.069759°N, 001.625988°E
    test 99 rhumbMidpointo: True
    test 100 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 101 rhumbMidpointo-0.25: 51.09838°N, 001.482038°E
    test 102 rhumbMidpointo-0.75: 51.041139°N, 001.769848°E
    test 103 rhumbMidpointo-1.0: 51.012519°N, 001.913619°E
    test 104 rhumbMidpointo-2.0: 50.898038°N, 002.48782°E

    testLatLon(pygeodesy.ellipsoidalNvector, 24.06.15)
    test 105 lat, lon: 50.06632°N, 005.71475°W
    test 106 lat, lon: 50.066389°N, 005.714722°W
    test 107 isequalTo: True
    test 108 isequalTo3: True
    test 109 latlon: (52.205, 0.119)
    test 110 latlonheight: (52.205, 0.119, 0)
    test 111 phimlam: (0.911149, 0.002077)
    test 112 phimlamheight: (0.911149, 0.002077, 0)
    test 113 isequalTo: False
    test 114 antipode1: 52.205°S, 179.881°W
    test 115 antipode2: True
    test 116 antipode3: 52.205°N, 000.119°E
    test 117 antipode4: True
    test 118 antipode5: 52.205°N, 000.119°E
    test 119 isnormal1: True
    test 120 isnormal2: False
    test 121 normal1: False
    test 122 normal2: True
    test 123 toStr: 51°28′40″N, 000°00′06″W
    test 124 toStr: 51.4778°N, 000.0016°W
    test 125 precision: 0
    test 126 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 127 isequalTo: True
    test 128 isequalTo3: False
    test 129 latlon: (51.4778, -0.0016)
    test 130 phimlam: (0.898457, -0.000028)
    test 131 isequalTo: True
    test 132 isequalTo3: True
    test 133 latlon: (51.4778, -0.0016)
    test 134 latlonheight: (51.4778, -0.0016, 42.0)
    test 135 phimlam: (0.898457, -0.000028)
    test 136 phimlamheight: (0.898457, -0.000028, 42.0)
    test 137 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 138 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 139 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 140 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 141 ellipsoidalLatLon: True
    test 142 sphericalLatLon: True

    test 143 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 144 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 145 rhumbAzimuthTo: 116.661
    test 146 rhumbDestination: 50.964234°N, 001.851383°E
    test 147 rhumbDestination: True
    test 148 rhumbDistanceTo: 40413.1
    test 149 rhumbIntersecant2: (LatLon(58°59′33.52″N, 043°11′56.62″E), LatLon(20°25′12.01″N, 009°12′37.27″W))
    test 150 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 151 rhumbMidpointo: True
    test 152 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 153 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 154 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 155 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 156 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLon(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 157 lat, lon: 50.06632°N, 005.71475°W
    test 158 lat, lon: 50.066389°N, 005.714722°W
    test 159 isequalTo: True
    test 160 isequalTo3: True
    test 161 latlon: (52.205, 0.119)
    test 162 latlonheight: (52.205, 0.119, 0)
    test 163 phimlam: (0.911149, 0.002077)
    test 164 phimlamheight: (0.911149, 0.002077, 0)
    test 165 isequalTo: False
    test 166 antipode1: 52.205°S, 179.881°W
    test 167 antipode2: True
    test 168 antipode3: 52.205°N, 000.119°E
    test 169 antipode4: True
    test 170 antipode5: 52.205°N, 000.119°E
    test 171 isnormal1: True
    test 172 isnormal2: False
    test 173 normal1: False
    test 174 normal2: True
    test 175 toStr: 51°28′40″N, 000°00′06″W
    test 176 toStr: 51.4778°N, 000.0016°W
    test 177 precision: 0
    test 178 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 179 isequalTo: True
    test 180 isequalTo3: False
    test 181 latlon: (51.4778, -0.0016)
    test 182 phimlam: (0.898457, -0.000028)
    test 183 isequalTo: True
    test 184 isequalTo3: True
    test 185 latlon: (51.4778, -0.0016)
    test 186 latlonheight: (51.4778, -0.0016, 42.0)
    test 187 phimlam: (0.898457, -0.000028)
    test 188 phimlamheight: (0.898457, -0.000028, 42.0)
    test 189 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 190 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 191 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 192 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 193 ellipsoidalLatLon: True
    test 194 sphericalLatLon: True

    test 195 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 196 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 197 rhumbAzimuthTo: 116.661
    test 198 rhumbDestination: 50.964234°N, 001.851383°E
    test 199 rhumbDestination: True
    test 200 rhumbDistanceTo: 40413.1
    test 201 rhumbIntersecant2: (LatLon(58°59′33.52″N, 043°11′56.62″E), LatLon(20°25′12.01″N, 009°12′37.27″W))
    test 202 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 203 rhumbMidpointo: True
    test 204 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 205 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 206 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 207 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 208 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLon(pygeodesy.ellipsoidalKarney, 24.06.11)
    test 209 lat, lon: 50.06632°N, 005.71475°W
    test 210 lat, lon: 50.066389°N, 005.714722°W
    test 211 isequalTo: True
    test 212 isequalTo3: True
    test 213 latlon: (52.205, 0.119)
    test 214 latlonheight: (52.205, 0.119, 0)
    test 215 phimlam: (0.911149, 0.002077)
    test 216 phimlamheight: (0.911149, 0.002077, 0)
    test 217 isequalTo: False
    test 218 antipode1: 52.205°S, 179.881°W
    test 219 antipode2: True
    test 220 antipode3: 52.205°N, 000.119°E
    test 221 antipode4: True
    test 222 antipode5: 52.205°N, 000.119°E
    test 223 isnormal1: True
    test 224 isnormal2: False
    test 225 normal1: False
    test 226 normal2: True
    test 227 toStr: 51°28′40″N, 000°00′06″W
    test 228 toStr: 51.4778°N, 000.0016°W
    test 229 precision: 0
    test 230 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 231 isequalTo: True
    test 232 isequalTo3: False
    test 233 latlon: (51.4778, -0.0016)
    test 234 phimlam: (0.898457, -0.000028)
    test 235 isequalTo: True
    test 236 isequalTo3: True
    test 237 latlon: (51.4778, -0.0016)
    test 238 latlonheight: (51.4778, -0.0016, 42.0)
    test 239 phimlam: (0.898457, -0.000028)
    test 240 phimlamheight: (0.898457, -0.000028, 42.0)
    test 241 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 242 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 243 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 244 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 245 ellipsoidalLatLon: True
    test 246 sphericalLatLon: True

    test 247 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 248 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 249 rhumbAzimuthTo: 116.661
    test 250 rhumbDestination: 50.964234°N, 001.851383°E
    test 251 rhumbDestination: True
    test 252 rhumbDistanceTo: 40413.1
    test 253 rhumbIntersecant2: (LatLon(58°59′33.52″N, 043°11′56.62″E), LatLon(20°25′12.01″N, 009°12′37.27″W))
    test 254 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 255 rhumbMidpointo: True
    test 256 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 257 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 258 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 259 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 260 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLon(pygeodesy.ellipsoidalExact, 24.06.11)
    test 261 lat, lon: 50.06632°N, 005.71475°W
    test 262 lat, lon: 50.066389°N, 005.714722°W
    test 263 isequalTo: True
    test 264 isequalTo3: True
    test 265 latlon: (52.205, 0.119)
    test 266 latlonheight: (52.205, 0.119, 0)
    test 267 phimlam: (0.911149, 0.002077)
    test 268 phimlamheight: (0.911149, 0.002077, 0)
    test 269 isequalTo: False
    test 270 antipode1: 52.205°S, 179.881°W
    test 271 antipode2: True
    test 272 antipode3: 52.205°N, 000.119°E
    test 273 antipode4: True
    test 274 antipode5: 52.205°N, 000.119°E
    test 275 isnormal1: True
    test 276 isnormal2: False
    test 277 normal1: False
    test 278 normal2: True
    test 279 toStr: 51°28′40″N, 000°00′06″W
    test 280 toStr: 51.4778°N, 000.0016°W
    test 281 precision: 0
    test 282 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 283 isequalTo: True
    test 284 isequalTo3: False
    test 285 latlon: (51.4778, -0.0016)
    test 286 phimlam: (0.898457, -0.000028)
    test 287 isequalTo: True
    test 288 isequalTo3: True
    test 289 latlon: (51.4778, -0.0016)
    test 290 latlonheight: (51.4778, -0.0016, 42.0)
    test 291 phimlam: (0.898457, -0.000028)
    test 292 phimlamheight: (0.898457, -0.000028, 42.0)
    test 293 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 294 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 295 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 296 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 297 ellipsoidalLatLon: True
    test 298 sphericalLatLon: True

    test 299 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 300 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 301 rhumbAzimuthTo: 116.661
    test 302 rhumbDestination: 50.964234°N, 001.851383°E
    test 303 rhumbDestination: True
    test 304 rhumbDistanceTo: 40413.1
    test 305 rhumbIntersecant2: (LatLon(58°59′33.52″N, 043°11′56.62″E), LatLon(20°25′12.01″N, 009°12′37.27″W))
    test 306 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 307 rhumbMidpointo: True
    test 308 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 309 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 310 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 311 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 312 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLonEllipsoidalBase(pygeodesy.ellipsoidalBase, 24.06.24)
    test 313 lat, lon: 50.06632°N, 005.71475°W
    test 314 lat, lon: 50.066389°N, 005.714722°W
    test 315 isequalTo: True
    test 316 isequalTo3: True
    test 317 latlon: (52.205, 0.119)
    test 318 latlonheight: (52.205, 0.119, 0)
    test 319 phimlam: (0.911149, 0.002077)
    test 320 phimlamheight: (0.911149, 0.002077, 0)
    test 321 isequalTo: False
    test 322 antipode1: 52.205°S, 179.881°W
    test 323 antipode2: True
    test 324 antipode3: 52.205°N, 000.119°E
    test 325 antipode4: True
    test 326 antipode5: 52.205°N, 000.119°E
    test 327 isnormal1: True
    test 328 isnormal2: False
    test 329 normal1: False
    test 330 normal2: True
    test 331 toStr: 51°28′40″N, 000°00′06″W
    test 332 toStr: 51.4778°N, 000.0016°W
    test 333 precision: 0
    test 334 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 335 isequalTo: True
    test 336 isequalTo3: False
    test 337 latlon: (51.4778, -0.0016)
    test 338 phimlam: (0.898457, -0.000028)
    test 339 isequalTo: True
    test 340 isequalTo3: True
    test 341 latlon: (51.4778, -0.0016)
    test 342 latlonheight: (51.4778, -0.0016, 42.0)
    test 343 phimlam: (0.898457, -0.000028)
    test 344 phimlamheight: (0.898457, -0.000028, 42.0)
    test 345 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 346 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 347 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 348 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 349 ellipsoidalLatLon: True
    test 350 sphericalLatLon: True

    test 351 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 352 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 353 rhumbAzimuthTo: 116.661
    test 354 rhumbDestination: 50.964234°N, 001.851383°E
    test 355 rhumbDestination: True
    test 356 rhumbDistanceTo: 40413.1
    test 357 rhumbIntersecant2: (LatLonEllipsoidalBase(58°59′33.52″N, 043°11′56.62″E), LatLonEllipsoidalBase(20°25′12.01″N, 009°12′37.27″W))
    test 358 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 359 rhumbMidpointo: True
    test 360 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 361 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 362 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 363 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 364 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLonEllipsoidalBaseDI(pygeodesy.ellipsoidalBaseDI, 24.06.17)
    test 365 lat, lon: 50.06632°N, 005.71475°W
    test 366 lat, lon: 50.066389°N, 005.714722°W
    test 367 isequalTo: True
    test 368 isequalTo3: True
    test 369 latlon: (52.205, 0.119)
    test 370 latlonheight: (52.205, 0.119, 0)
    test 371 phimlam: (0.911149, 0.002077)
    test 372 phimlamheight: (0.911149, 0.002077, 0)
    test 373 isequalTo: False
    test 374 antipode1: 52.205°S, 179.881°W
    test 375 antipode2: True
    test 376 antipode3: 52.205°N, 000.119°E
    test 377 antipode4: True
    test 378 antipode5: 52.205°N, 000.119°E
    test 379 isnormal1: True
    test 380 isnormal2: False
    test 381 normal1: False
    test 382 normal2: True
    test 383 toStr: 51°28′40″N, 000°00′06″W
    test 384 toStr: 51.4778°N, 000.0016°W
    test 385 precision: 0
    test 386 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 387 isequalTo: True
    test 388 isequalTo3: False
    test 389 latlon: (51.4778, -0.0016)
    test 390 phimlam: (0.898457, -0.000028)
    test 391 isequalTo: True
    test 392 isequalTo3: True
    test 393 latlon: (51.4778, -0.0016)
    test 394 latlonheight: (51.4778, -0.0016, 42.0)
    test 395 phimlam: (0.898457, -0.000028)
    test 396 phimlamheight: (0.898457, -0.000028, 42.0)
    test 397 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 398 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 399 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 400 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 401 ellipsoidalLatLon: True
    test 402 sphericalLatLon: True

    test 403 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 404 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 405 rhumbAzimuthTo: 116.661
    test 406 rhumbDestination: 50.964234°N, 001.851383°E
    test 407 rhumbDestination: True
    test 408 rhumbDistanceTo: 40413.1
    test 409 rhumbIntersecant2: (LatLonEllipsoidalBaseDI(58°59′33.52″N, 043°11′56.62″E), LatLonEllipsoidalBaseDI(20°25′12.01″N, 009°12′37.27″W))
    test 410 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 411 rhumbMidpointo: True
    test 412 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 413 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 414 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 415 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 416 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLonBase(pygeodesy.latlonBase, 24.06.11)
    test 417 lat, lon: 50.06632°N, 005.71475°W
    test 418 lat, lon: 50.066389°N, 005.714722°W
    test 419 isequalTo: True
    test 420 isequalTo3: True
    test 421 latlon: (52.205, 0.119)
    test 422 latlonheight: (52.205, 0.119, 0)
    test 423 phimlam: (0.911149, 0.002077)
    test 424 phimlamheight: (0.911149, 0.002077, 0)
    test 425 isequalTo: False
    test 426 antipode1: 52.205°S, 179.881°W
    test 427 antipode2: True
    test 428 antipode3: 52.205°N, 000.119°E
    test 429 antipode4: True
    test 430 antipode5: 52.205°N, 000.119°E
    test 431 isnormal1: True
    test 432 isnormal2: False
    test 433 normal1: False
    test 434 normal2: True
    test 435 toStr: 51°28′40″N, 000°00′06″W
    test 436 toStr: 51.4778°N, 000.0016°W
    test 437 precision: 0
    test 438 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 439 isequalTo: True
    test 440 isequalTo3: False
    test 441 latlon: (51.4778, -0.0016)
    test 442 phimlam: (0.898457, -0.000028)
    test 443 isequalTo: True
    test 444 isequalTo3: True
    test 445 latlon: (51.4778, -0.0016)
    test 446 latlonheight: (51.4778, -0.0016, 42.0)
    test 447 phimlam: (0.898457, -0.000028)
    test 448 phimlamheight: (0.898457, -0.000028, 42.0)
    test 449 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 450 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 451 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 452 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 453 ellipsoidalLatLon: True
    test 454 sphericalLatLon: True
    test 455 isCartesian(LatLonBase, None): None
    test 456 isCartesian(LatLonBase, True): None
    test 457 isCartesian(LatLonBase, False): None
    test 458 isLatLon(LatLonBase, None): <class 'pygeodesy.latlonBase.LatLonBase'>
    test 459 isLatLon(LatLonBase, True): False
    test 460 isLatLon(LatLonBase, False): False
    test 461 isNvector(LatLonBase, None): None
    test 462 isNvector(LatLonBase, True): None
    test 463 isNvector(LatLonBase, False): None

    testLatLonNvectorBase(pygeodesy.nvectorBase, 24.06.12)
    test 464 lat, lon: 50.06632°N, 005.71475°W
    test 465 lat, lon: 50.066389°N, 005.714722°W
    test 466 isequalTo: True
    test 467 isequalTo3: True
    test 468 latlon: (52.205, 0.119)
    test 469 latlonheight: (52.205, 0.119, 0)
    test 470 phimlam: (0.911149, 0.002077)
    test 471 phimlamheight: (0.911149, 0.002077, 0)
    test 472 isequalTo: False
    test 473 antipode1: 52.205°S, 179.881°W
    test 474 antipode2: True
    test 475 antipode3: 52.205°N, 000.119°E
    test 476 antipode4: True
    test 477 antipode5: 52.205°N, 000.119°E
    test 478 isnormal1: True
    test 479 isnormal2: False
    test 480 normal1: False
    test 481 normal2: True
    test 482 toStr: 51°28′40″N, 000°00′06″W
    test 483 toStr: 51.4778°N, 000.0016°W
    test 484 precision: 0
    test 485 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 486 isequalTo: True
    test 487 isequalTo3: False
    test 488 latlon: (51.4778, -0.0016)
    test 489 phimlam: (0.898457, -0.000028)
    test 490 isequalTo: True
    test 491 isequalTo3: True
    test 492 latlon: (51.4778, -0.0016)
    test 493 latlonheight: (51.4778, -0.0016, 42.0)
    test 494 phimlam: (0.898457, -0.000028)
    test 495 phimlamheight: (0.898457, -0.000028, 42.0)
    test 496 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 497 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 498 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 499 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 500 ellipsoidalLatLon: True
    test 501 sphericalLatLon: True
    test 502 isCartesian(LatLonNvectorBase, None): None
    test 503 isCartesian(LatLonNvectorBase, True): None
    test 504 isCartesian(LatLonNvectorBase, False): None
    test 505 isLatLon(LatLonNvectorBase, None): <class 'pygeodesy.nvectorBase.LatLonNvectorBase'>
    test 506 isLatLon(LatLonNvectorBase, True): False
    test 507 isLatLon(LatLonNvectorBase, False): False
    test 508 isNvector(LatLonNvectorBase, None): None
    test 509 isNvector(LatLonNvectorBase, True): None
    test 510 isNvector(LatLonNvectorBase, False): None

    testLatLonSphericalBase(pygeodesy.sphericalBase, 24.06.12)
    test 511 lat, lon: 50.06632°N, 005.71475°W
    test 512 lat, lon: 50.066389°N, 005.714722°W
    test 513 isequalTo: True
    test 514 isequalTo3: True
    test 515 latlon: (52.205, 0.119)
    test 516 latlonheight: (52.205, 0.119, 0)
    test 517 phimlam: (0.911149, 0.002077)
    test 518 phimlamheight: (0.911149, 0.002077, 0)
    test 519 isequalTo: False
    test 520 antipode1: 52.205°S, 179.881°W
    test 521 antipode2: True
    test 522 antipode3: 52.205°N, 000.119°E
    test 523 antipode4: True
    test 524 antipode5: 52.205°N, 000.119°E
    test 525 isnormal1: True
    test 526 isnormal2: False
    test 527 normal1: False
    test 528 normal2: True
    test 529 toStr: 51°28′40″N, 000°00′06″W
    test 530 toStr: 51.4778°N, 000.0016°W
    test 531 precision: 0
    test 532 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 533 isequalTo: True
    test 534 isequalTo3: False
    test 535 latlon: (51.4778, -0.0016)
    test 536 phimlam: (0.898457, -0.000028)
    test 537 isequalTo: True
    test 538 isequalTo3: True
    test 539 latlon: (51.4778, -0.0016)
    test 540 latlonheight: (51.4778, -0.0016, 42.0)
    test 541 phimlam: (0.898457, -0.000028)
    test 542 phimlamheight: (0.898457, -0.000028, 42.0)
    test 543 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 544 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 545 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 546 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 547 ellipsoidalLatLon: True
    test 548 sphericalLatLon: True

    test 549 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....ere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)
    test 550 rhumbLine: TMorder=6, azi12=105.484906, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....ere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)
    test 551 rhumbAzimuthTo: 107.563
    test 552 rhumbDestination: 50.964155°N, 001.853°E
    test 553 rhumbDestination: True
    test 554 rhumbDistanceTo: 42186.1
    test 555 rhumbIntersecant2: (LatLonSphericalBase(58°40′08.68″N, 042°42′40.63″E), LatLonSphericalBase(18°47′05.09″N, 011°00′15.53″W))
    test 556 rhumbMidpointo-0.5: 51.069759°N, 001.625988°E
    test 557 rhumbMidpointo: True
    test 558 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 559 rhumbMidpointo-0.25: 51.09838°N, 001.482038°E
    test 560 rhumbMidpointo-0.75: 51.041139°N, 001.769848°E
    test 561 rhumbMidpointo-1.0: 51.012519°N, 001.913619°E
    test 562 rhumbMidpointo-2.0: 50.898038°N, 002.48782°E

    all 562 testLatLonBase.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 174.724 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testLazily.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34

    testing testLazily.py 23.11.30 isLazy=3

    test 1 isLazy: 3

    test 2 cmd: /opt/local/opt/python@3.12/bin/python3.12 -c 'import sys; import pygeodesy; sys.exit(0 if pygeodesy.isLazy == %s else 1)'
    test 3 PYGEODESY_LAZY_IMPORT=0: 0
    test 4 PYGEODESY_LAZY_IMPORT=1: 0
    test 5 PYGEODESY_LAZY_IMPORT=2: 0
    test 6 PYGEODESY_LAZY_IMPORT=3: 0
    test 7 PYGEODESY_LAZY_IMPORT=4: 0

    test 8 items: _ALL_MODS
    test 9 pygeodesy: <module 'pygeodesy' from './pygeodesy/__init__.py'>
    test 10 pygeodesy.basics: <module 'pygeodesy.basics' from './pygeodesy/basics.py'>
    test 11 pygeodesy.constants: <module 'pygeodesy.constants' from './pygeodesy/constants.py'>
    test 12 pygeodesy.dms: <module 'pygeodesy.dms' from './pygeodesy/dms.py'>
    test 13 pygeodesy.errors: <module 'pygeodesy.errors' from './pygeodesy/errors.py'>
    test 14 pygeodesy.internals: <module 'pygeodesy.internals' from './pygeodesy/internals.py'>
    test 15 pygeodesy.interns: <module 'pygeodesy.interns' from './pygeodesy/interns.py'>
    test 16 pygeodesy.iters: <module 'pygeodesy.iters' from './pygeodesy/iters.py'>
    test 17 pygeodesy.lazily: <module 'pygeodesy.lazily' from './pygeodesy/lazily.py'>
    test 18 pygeodesy.named: <module 'pygeodesy.named' from './pygeodesy/named.py'>
    test 19 pygeodesy.namedTuples: <module 'pygeodesy.namedTuples' from './pygeodesy/namedTuples.py'>
    test 20 pygeodesy.props: <module 'pygeodesy.props' from './pygeodesy/props.py'>
    test 21 pygeodesy.streprs: <module 'pygeodesy.streprs' from './pygeodesy/streprs.py'>
    test 22 pygeodesy.units: <module 'pygeodesy.units' from './pygeodesy/units.py'>
    test 23 pygeodesy.unitsBase: <module 'pygeodesy.unitsBase' from './pygeodesy/unitsBase.py'>
    test 24 pygeodesy.utily: <module 'pygeodesy.utily' from './pygeodesy/utily.py'>

    all 24 testLazily.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 178.783 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testLcc.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.F_D from .dms by testLcc.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testLcc.py line 11
# lazily imported pygeodesy.Conic from .lcc by testLcc.py line 11
# lazily imported pygeodesy.Conics from .lcc by testLcc.py line 11
# lazily imported pygeodesy.Datums from .datums by testLcc.py line 11
# lazily imported pygeodesy.Lcc from .lcc by testLcc.py line 11
# lazily imported pygeodesy.toLcc from .lcc by testLcc.py line 11
# lazily imported pygeodesy.ellipsoidalNvector by testLcc.py line 92
# lazily imported pygeodesy.ellipsoidalVincenty by testLcc.py line 92

    testing testLcc.py 23.03.27 (module pygeodesy.lcc 24.06.24) isLazy=3

    testLcc(pygeodesy.ellipsoidalNvector, 24.06.15)
    test 1 lb1: 448251.0 5411932.0001
    test 2 lb1: 448251, 5411932
    test 3 lb1: [E:448251, N:5411932]
    test 4 lb1: WRF_Lb.WGS84
    test 5 lb1: lb1
    test 6 lb1: (81.929348, -79.558697)
    test 7 lb1: (1.429937, -1.388561)
    test 8 LatLon: 46.5°N, 003.0°E
    test 9 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 10 toLcc1: 700000 6600000
    test 11 toLcc1: 46.5°N, 003.0°E
    test 12 lb2: 1894411 1564650
    test 13 lb2: Clarke1866
    test 14 lb2: lb2
    test 15 toLatLon2: 35.0°N, 075.0°W
    test 16 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 17 toLatLon2: NAD27
    test 18 toLcc2: 1894410.9 1564649.5
    test 19 toLcc2: [E:1894411, N:1564649]
    test 20 toLcc2: Snyder.NAD27

    test 21 Be08Lb: 49.833334°N, 003.025883°E
    test 22 Be08Lb: GRS80

    test 23 Be08Lb: 49.833334°N, 004.359216°E
    test 24 Be08Lb: GRS80

    test 25 Be08Lb: 49.833334°N, 005.692549°E
    test 26 Be08Lb: GRS80

    test 27 Be08Lb: 51.166667°N, 003.025883°E
    test 28 Be08Lb: GRS80

    test 29 Be08Lb: 51.166667°N, 004.359216°E
    test 30 Be08Lb: GRS80

    test 31 Be08Lb: 51.166667°N, 005.692549°E
    test 32 Be08Lb: GRS80

    test 33 Be72Lb: 49.833334°N, 003.034153°E
    test 34 Be72Lb: NAD83

    test 35 Be72Lb: 49.833334°N, 004.367487°E
    test 36 Be72Lb: NAD83

    test 37 Be72Lb: 49.833334°N, 005.70082°E
    test 38 Be72Lb: NAD83

    test 39 Be72Lb: 51.166667°N, 003.034153°E
    test 40 Be72Lb: NAD83

    test 41 Be72Lb: 51.166667°N, 004.367487°E
    test 42 Be72Lb: NAD83

    test 43 Be72Lb: 51.166667°N, 005.70082°E
    test 44 Be72Lb: NAD83

    test 45 Fr93Lb: 49.0°N, 002.0°W
    test 46 Fr93Lb: WGS84

    test 47 Fr93Lb: 49.0°N, 003.0°E
    test 48 Fr93Lb: WGS84

    test 49 Fr93Lb: 49.0°N, 008.0°E
    test 50 Fr93Lb: WGS84

    test 51 Fr93Lb: 44.0°N, 002.0°W
    test 52 Fr93Lb: WGS84

    test 53 Fr93Lb: 44.0°N, 003.0°E
    test 54 Fr93Lb: WGS84

    test 55 Fr93Lb: 44.0°N, 008.0°E
    test 56 Fr93Lb: WGS84

    test 57 MaNLb: 31.73°N, 008.54°W
    test 58 MaNLb: NTF

    test 59 MaNLb: 31.73°N, 005.4°W
    test 60 MaNLb: NTF

    test 61 MaNLb: 31.73°N, 002.26°W
    test 62 MaNLb: NTF

    test 63 MaNLb: 34.87°N, 008.54°W
    test 64 MaNLb: NTF

    test 65 MaNLb: 34.87°N, 005.4°W
    test 66 MaNLb: NTF

    test 67 MaNLb: 34.87°N, 002.26°W
    test 68 MaNLb: NTF

    test 69 MxLb: 17.5°N, 114.0°W
    test 70 MxLb: WGS84

    test 71 MxLb: 17.5°N, 102.0°W
    test 72 MxLb: WGS84

    test 73 MxLb: 17.5°N, 090.0°W
    test 74 MxLb: WGS84

    test 75 MxLb: 29.5°N, 114.0°W
    test 76 MxLb: WGS84

    test 77 MxLb: 29.5°N, 102.0°W
    test 78 MxLb: WGS84

    test 79 MxLb: 29.5°N, 090.0°W
    test 80 MxLb: WGS84

    test 81 PyT_Lb: 45.898939°N, 000.540154°E
    test 82 PyT_Lb: NTF

    test 83 PyT_Lb: 45.898939°N, 002.337229°E
    test 84 PyT_Lb: NTF

    test 85 PyT_Lb: 45.898939°N, 004.134305°E
    test 86 PyT_Lb: NTF

    test 87 PyT_Lb: 47.696014°N, 000.540154°E
    test 88 PyT_Lb: NTF

    test 89 PyT_Lb: 47.696014°N, 002.337229°E
    test 90 PyT_Lb: NTF

    test 91 PyT_Lb: 47.696014°N, 004.134305°E
    test 92 PyT_Lb: NTF

    test 93 Snyder: 33.0°N, 108.0°W
    test 94 Snyder: NAD27

    test 95 Snyder: 33.0°N, 096.0°W
    test 96 Snyder: NAD27

    test 97 Snyder: 33.0°N, 084.0°W
    test 98 Snyder: NAD27

    test 99 Snyder: 45.0°N, 108.0°W
    test 100 Snyder: NAD27

    test 101 Snyder: 45.0°N, 096.0°W
    test 102 Snyder: NAD27

    test 103 Snyder: 45.0°N, 084.0°W
    test 104 Snyder: NAD27

    test 105 USA_Lb: 33.0°N, 108.0°W
    test 106 USA_Lb: WGS84

    test 107 USA_Lb: 33.0°N, 096.0°W
    test 108 USA_Lb: WGS84

    test 109 USA_Lb: 33.0°N, 084.0°W
    test 110 USA_Lb: WGS84

    test 111 USA_Lb: 45.0°N, 108.0°W
    test 112 USA_Lb: WGS84

    test 113 USA_Lb: 45.0°N, 096.0°W
    test 114 USA_Lb: WGS84

    test 115 USA_Lb: 45.0°N, 084.0°W
    test 116 USA_Lb: WGS84

    test 117 WRF_Lb: 33.0°N, 109.0°W
    test 118 WRF_Lb: WGS84

    test 119 WRF_Lb: 33.0°N, 097.0°W
    test 120 WRF_Lb: WGS84

    test 121 WRF_Lb: 33.0°N, 085.0°W
    test 122 WRF_Lb: WGS84

    test 123 WRF_Lb: 45.0°N, 109.0°W
    test 124 WRF_Lb: WGS84

    test 125 WRF_Lb: 45.0°N, 097.0°W
    test 126 WRF_Lb: WGS84

    test 127 WRF_Lb: 45.0°N, 085.0°W
    test 128 WRF_Lb: WGS84


    testLcc(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 129 lb1: 448251.0 5411932.0001
    test 130 lb1: 448251, 5411932
    test 131 lb1: [E:448251, N:5411932]
    test 132 lb1: WRF_Lb.WGS84
    test 133 lb1: lb1
    test 134 lb1: (81.929348, -79.558697)
    test 135 lb1: (1.429937, -1.388561)
    test 136 LatLon: 46.5°N, 003.0°E
    test 137 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 138 toLcc1: 700000 6600000
    test 139 toLcc1: 46.5°N, 003.0°E
    test 140 lb2: 1894411 1564650
    test 141 lb2: Clarke1866
    test 142 lb2: lb2
    test 143 toLatLon2: 35.0°N, 075.0°W
    test 144 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 145 toLatLon2: NAD27
    test 146 toLcc2: 1894410.9 1564649.5
    test 147 toLcc2: [E:1894411, N:1564649]
    test 148 toLcc2: Snyder.NAD27

    test 149 Be08Lb: 49.833334°N, 003.025883°E
    test 150 Be08Lb: GRS80

    test 151 Be08Lb: 49.833334°N, 004.359216°E
    test 152 Be08Lb: GRS80

    test 153 Be08Lb: 49.833334°N, 005.692549°E
    test 154 Be08Lb: GRS80

    test 155 Be08Lb: 51.166667°N, 003.025883°E
    test 156 Be08Lb: GRS80

    test 157 Be08Lb: 51.166667°N, 004.359216°E
    test 158 Be08Lb: GRS80

    test 159 Be08Lb: 51.166667°N, 005.692549°E
    test 160 Be08Lb: GRS80

    test 161 Be72Lb: 49.833334°N, 003.034153°E
    test 162 Be72Lb: NAD83

    test 163 Be72Lb: 49.833334°N, 004.367487°E
    test 164 Be72Lb: NAD83

    test 165 Be72Lb: 49.833334°N, 005.70082°E
    test 166 Be72Lb: NAD83

    test 167 Be72Lb: 51.166667°N, 003.034153°E
    test 168 Be72Lb: NAD83

    test 169 Be72Lb: 51.166667°N, 004.367487°E
    test 170 Be72Lb: NAD83

    test 171 Be72Lb: 51.166667°N, 005.70082°E
    test 172 Be72Lb: NAD83

    test 173 Fr93Lb: 49.0°N, 002.0°W
    test 174 Fr93Lb: WGS84

    test 175 Fr93Lb: 49.0°N, 003.0°E
    test 176 Fr93Lb: WGS84

    test 177 Fr93Lb: 49.0°N, 008.0°E
    test 178 Fr93Lb: WGS84

    test 179 Fr93Lb: 44.0°N, 002.0°W
    test 180 Fr93Lb: WGS84

    test 181 Fr93Lb: 44.0°N, 003.0°E
    test 182 Fr93Lb: WGS84

    test 183 Fr93Lb: 44.0°N, 008.0°E
    test 184 Fr93Lb: WGS84

    test 185 MaNLb: 31.73°N, 008.54°W
    test 186 MaNLb: NTF

    test 187 MaNLb: 31.73°N, 005.4°W
    test 188 MaNLb: NTF

    test 189 MaNLb: 31.73°N, 002.26°W
    test 190 MaNLb: NTF

    test 191 MaNLb: 34.87°N, 008.54°W
    test 192 MaNLb: NTF

    test 193 MaNLb: 34.87°N, 005.4°W
    test 194 MaNLb: NTF

    test 195 MaNLb: 34.87°N, 002.26°W
    test 196 MaNLb: NTF

    test 197 MxLb: 17.5°N, 114.0°W
    test 198 MxLb: WGS84

    test 199 MxLb: 17.5°N, 102.0°W
    test 200 MxLb: WGS84

    test 201 MxLb: 17.5°N, 090.0°W
    test 202 MxLb: WGS84

    test 203 MxLb: 29.5°N, 114.0°W
    test 204 MxLb: WGS84

    test 205 MxLb: 29.5°N, 102.0°W
    test 206 MxLb: WGS84

    test 207 MxLb: 29.5°N, 090.0°W
    test 208 MxLb: WGS84

    test 209 PyT_Lb: 45.898939°N, 000.540154°E
    test 210 PyT_Lb: NTF

    test 211 PyT_Lb: 45.898939°N, 002.337229°E
    test 212 PyT_Lb: NTF

    test 213 PyT_Lb: 45.898939°N, 004.134305°E
    test 214 PyT_Lb: NTF

    test 215 PyT_Lb: 47.696014°N, 000.540154°E
    test 216 PyT_Lb: NTF

    test 217 PyT_Lb: 47.696014°N, 002.337229°E
    test 218 PyT_Lb: NTF

    test 219 PyT_Lb: 47.696014°N, 004.134305°E
    test 220 PyT_Lb: NTF

    test 221 Snyder: 33.0°N, 108.0°W
    test 222 Snyder: NAD27

    test 223 Snyder: 33.0°N, 096.0°W
    test 224 Snyder: NAD27

    test 225 Snyder: 33.0°N, 084.0°W
    test 226 Snyder: NAD27

    test 227 Snyder: 45.0°N, 108.0°W
    test 228 Snyder: NAD27

    test 229 Snyder: 45.0°N, 096.0°W
    test 230 Snyder: NAD27

    test 231 Snyder: 45.0°N, 084.0°W
    test 232 Snyder: NAD27

    test 233 USA_Lb: 33.0°N, 108.0°W
    test 234 USA_Lb: WGS84

    test 235 USA_Lb: 33.0°N, 096.0°W
    test 236 USA_Lb: WGS84

    test 237 USA_Lb: 33.0°N, 084.0°W
    test 238 USA_Lb: WGS84

    test 239 USA_Lb: 45.0°N, 108.0°W
    test 240 USA_Lb: WGS84

    test 241 USA_Lb: 45.0°N, 096.0°W
    test 242 USA_Lb: WGS84

    test 243 USA_Lb: 45.0°N, 084.0°W
    test 244 USA_Lb: WGS84

    test 245 WRF_Lb: 33.0°N, 109.0°W
    test 246 WRF_Lb: WGS84

    test 247 WRF_Lb: 33.0°N, 097.0°W
    test 248 WRF_Lb: WGS84

    test 249 WRF_Lb: 33.0°N, 085.0°W
    test 250 WRF_Lb: WGS84

    test 251 WRF_Lb: 45.0°N, 109.0°W
    test 252 WRF_Lb: WGS84

    test 253 WRF_Lb: 45.0°N, 097.0°W
    test 254 WRF_Lb: WGS84

    test 255 WRF_Lb: 45.0°N, 085.0°W
    test 256 WRF_Lb: WGS84


    testConic(pygeodesy.ellipsoidalNvector, 24.06.15)
    test 257 SnyderN: name='SnyderN', lat0=23, lon0=-96, par1=33, par2=45, E0=0, N0=0, k0=1, SP=2, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 258 _SnyderN: name='_SnyderN', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 259 _SnyderN: name='_SnyderN', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83)
    test 260 _SnyderN .auth: ''
    test 261 _SnyderN .opt3: 0.0
    test 262 _SnyderN .latlon0: (23.0, -96.0)
    test 263 _SnyderN .philam0: (0.401426, -1.675516)

    testConic(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 264 SnyderV: name='SnyderV', lat0=23, lon0=-96, par1=33, par2=45, E0=0, N0=0, k0=1, SP=2, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 265 _SnyderV: name='_SnyderV', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 266 _SnyderV: name='_SnyderV', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83)
    test 267 _SnyderV .auth: ''
    test 268 _SnyderV .opt3: 0.0
    test 269 _SnyderV .latlon0: (23.0, -96.0)
    test 270 _SnyderV .philam0: (0.401426, -1.675516)

    all 270 testLcc.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 9.216 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testLtp.py
./pygeodesy/deprecated/classes.py:67: DeprecationWarning: class L{pygeodesy.deprecated.classes.EcefCartesian_} has been DEPRECATED, use class L{LocalCartesian} or L{Ltp}.
  deprecated_class(self.__class__)
./test/testLtp.py:41: DeprecationWarning: method L{pygeodesy.deprecated.classes.EcefCartesian_.forward} has been DEPRECATED, use method L{LocalCartesian.forward} or L{Ltp.forward}.
  t = c.forward(33.3, 44.4, 6000)
./test/testLtp.py:45: DeprecationWarning: method L{pygeodesy.deprecated.classes.EcefCartesian_.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse} or L{Ltp.reverse}.
  t = c.reverse(37288.97, 33374.29, 5783.65)
./test/testLtp.py:54: DeprecationWarning: method L{pygeodesy.deprecated.classes.EcefCartesian_.forward} has been DEPRECATED, use method L{LocalCartesian.forward} or L{Ltp.forward}.
  t = c.forward(LatLon_(50.9, 1.8, name='Calais'))  # Local9Tuple
./test/testLtp.py:58: DeprecationWarning: method L{pygeodesy.deprecated.classes.EcefCartesian_.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse} or L{Ltp.reverse}.
  t = c.reverse(-37518.64, 229949.65, -4260.43)  # Local9Tuple
./test/testLtp.py:62: DeprecationWarning: method L{pygeodesy.deprecated.classes.EcefCartesian_.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse} or L{Ltp.reverse}.
  t = c.reverse(-38e3, 230e3, -4e3)
./test/testLtp.py:66: DeprecationWarning: method L{pygeodesy.deprecated.classes.EcefCartesian_.forward} has been DEPRECATED, use method L{LocalCartesian.forward} or L{Ltp.forward}.
  t = c.forward(50.9, 1.79, 264.92)  # Local9Tuple
./test/testLtp.py:74: DeprecationWarning: method L{pygeodesy.deprecated.classes.EcefCartesian_.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse} or L{Ltp.reverse}.
  t = Z.reverse(M).toLatLon(datum=None)  # Matterhorn Xyz to LatLon
./test/testLtp.py:76: DeprecationWarning: method L{pygeodesy.deprecated.classes.EcefCartesian_.forward} has been DEPRECATED, use method L{LocalCartesian.forward} or L{Ltp.forward}.
  self.test('xyz', Z.forward(t).xyz.toStr(prec=1), '(-7134.8, -4556.3, 2852.4)', known=Sudano)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Aer from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.Attitude from .ltp by testLtp.py line 11
# lazily imported pygeodesy.ChLV from .ltp by testLtp.py line 11
# lazily imported pygeodesy.ChLVa from .ltp by testLtp.py line 11
# lazily imported pygeodesy.ChLVe from .ltp by testLtp.py line 11
# lazily imported pygeodesy.EcefFarrell21 from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefFarrell22 from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefKarney from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefVeness from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefSudano from .ecef by testLtp.py line 11
# lazily imported pygeodesy.Ecef9Tuple from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefYou from .ecef by testLtp.py line 11
# lazily imported pygeodesy.Enu from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.Frustum from .ltp by testLtp.py line 11
# lazily imported pygeodesy.fstr from .streprs by testLtp.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testLtp.py line 11
# lazily imported pygeodesy.LocalCartesian from .ltp by testLtp.py line 11
# lazily imported pygeodesy.Local9Tuple from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.Ltp from .ltp by testLtp.py line 11
# lazily imported pygeodesy.Ned from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.tyr3d from .ltp by testLtp.py line 11
# lazily imported pygeodesy.XyzLocal from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.latDMS from .dms by testLtp.py line 11
# lazily imported pygeodesy.lonDMS from .dms by testLtp.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testLtp.py line 286

    testing testLtp.py 23.11.21 isLazy=3

    test 1 EcefCartesian: {}
    test 2 name: Test
    test 3 toStr: EcefCartesian_(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected EcefCartesian_
    test 4 copy(EcefCartesian_): (<class 'pygeodesy.deprecated.classes.EcefCartesian.<locals>.EcefCartesian_'>, True)
    test 5 EcefCartesian_.copy(): (<class 'pygeodesy.deprecated.classes.EcefCartesian.<locals>.EcefCartesian_'>, True)
    test 6 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 7 forward: 37288.97, 33374.29, 5783.65
    test 8 name: Test
# lazily imported pygeodesy.cartesianBase by ecef.py line 269
    test 9 reverse: 33.3, 44.4, 6000.0
    test 10 name: Test
    test 11 name: Paris
    test 12 Paris: 48.833, 2.333, 0.0
    test 13 forward: -37518.64, 229949.65, -4260.43
    test 14 name: Calais
    test 15 reverse: 50.9, 1.8, -0.0
    test 16 name: Paris
    test 17 reverse: -38000.0, 230000.0, -4000.0
    test 18 reverse: 50.9, 1.79, 264.92
    test 19 forward: -38223.7, 229964.2, -4000.0

    test 20 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected EcefCartesian_
    test 21 Matterhorn: (45.976, 7.658, 4531.01)
    test 22 xyz: (-7134.8, -4556.3, 2852.4)
    test 23 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 24 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 25 _local2ecef: Ecef9Tuple
    test 26 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, EcefCartesian_(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 27 _ecef2local: Local9Tuple
    test 28 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 29 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 30 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 31 Ned: [-4556.3, -7134.8, -2852.4]
    test 32 Enu: [-7134.8, -4556.3, 2852.4]
    test 33 Ned: [-4556.3, -7134.8, -2852.4]

    test 34 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 35 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 36 Frustum: 90.0, 90.0
    test 37 hfov: 90.0
    test 38 vfov: 90.0
    test 39 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 40 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 41 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 42 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 43 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 44 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 45 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 46 alt: 0.0
    test 47 tilt: -10.0
    test 48 roll: -20.0
    test 49 yaw: 330.0
    test 50 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 51 rotate: (-0.005694, 1.334382, 1.104261)
    test 52 tyr3d: (0.0, 0.0, 0.0)
    test 53 tyr3d: (0.0, -2.0, 0.0)
    test 54 tyr3d: (0.0, -2.0, 0.0)
    test 55 tyr3d: (0.0, 0.0, -2.0)

    test 56 LocalCartesian: {}
    test 57 name: Test
    test 58 toStr: LocalCartesian(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected LocalCartesian
    test 59 copy(LocalCartesian): (<class 'pygeodesy.ltp.LocalCartesian'>, True)
    test 60 LocalCartesian.copy(): (<class 'pygeodesy.ltp.LocalCartesian'>, True)
    test 61 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 62 forward: 37288.97, 33374.29, 5783.65
    test 63 name: Test
    test 64 reverse: 33.3, 44.4, 6000.0
    test 65 name: Test
    test 66 name: Paris
    test 67 Paris: 48.833, 2.333, 0.0
    test 68 forward: -37518.64, 229949.65, -4260.43
    test 69 name: Calais
    test 70 reverse: 50.9, 1.8, -0.0
    test 71 name: Paris
    test 72 reverse: -38000.0, 230000.0, -4000.0
    test 73 reverse: 50.9, 1.79, 264.92
    test 74 forward: -38223.7, 229964.2, -4000.0

    test 75 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected LocalCartesian
    test 76 Matterhorn: (45.976, 7.658, 4531.01)
    test 77 xyz: (-7134.8, -4556.3, 2852.4)
    test 78 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 79 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 80 _local2ecef: Ecef9Tuple
    test 81 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, LocalCartesian(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 82 _ecef2local: Local9Tuple
    test 83 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 84 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 85 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 86 Ned: [-4556.3, -7134.8, -2852.4]
    test 87 Enu: [-7134.8, -4556.3, 2852.4]
    test 88 Ned: [-4556.3, -7134.8, -2852.4]

    test 89 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 90 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 91 Frustum: 90.0, 90.0
    test 92 hfov: 90.0
    test 93 vfov: 90.0
    test 94 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 95 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 96 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 97 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 98 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 99 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 100 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 101 alt: 0.0
    test 102 tilt: -10.0
    test 103 roll: -20.0
    test 104 yaw: 330.0
    test 105 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 106 rotate: (-0.005694, 1.334382, 1.104261)
    test 107 tyr3d: (0.0, 0.0, 0.0)
    test 108 tyr3d: (0.0, -2.0, 0.0)
    test 109 tyr3d: (0.0, -2.0, 0.0)
    test 110 tyr3d: (0.0, 0.0, -2.0)

    test 111 Ltp: {}
    test 112 name: Test
    test 113 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 114 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 115 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 116 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 117 forward: 37288.97, 33374.29, 5783.65
    test 118 name: Test
    test 119 reverse: 33.3, 44.4, 6000.0
    test 120 name: Test
    test 121 name: Paris
    test 122 Paris: 48.833, 2.333, 0.0
    test 123 forward: -37518.64, 229949.65, -4260.43
    test 124 name: Calais
    test 125 reverse: 50.9, 1.8, -0.0
    test 126 name: Paris
    test 127 reverse: -38000.0, 230000.0, -4000.0
    test 128 reverse: 50.9, 1.79, 264.92
    test 129 forward: -38223.7, 229964.2, -4000.0

    test 130 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 131 Matterhorn: (45.976, 7.658, 4531.01)
    test 132 xyz: (-7134.8, -4556.3, 2852.4)
    test 133 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 134 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 135 _local2ecef: Ecef9Tuple
    test 136 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 137 _ecef2local: Local9Tuple
    test 138 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 139 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 140 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 141 Ned: [-4556.3, -7134.8, -2852.4]
    test 142 Enu: [-7134.8, -4556.3, 2852.4]
    test 143 Ned: [-4556.3, -7134.8, -2852.4]

    test 144 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 145 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 146 Frustum: 90.0, 90.0
    test 147 hfov: 90.0
    test 148 vfov: 90.0
    test 149 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 150 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 151 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 152 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 153 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 154 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 155 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 156 alt: 0.0
    test 157 tilt: -10.0
    test 158 roll: -20.0
    test 159 yaw: 330.0
    test 160 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 161 rotate: (-0.005694, 1.334382, 1.104261)
    test 162 tyr3d: (0.0, 0.0, 0.0)
    test 163 tyr3d: (0.0, -2.0, 0.0)
    test 164 tyr3d: (0.0, -2.0, 0.0)
    test 165 tyr3d: (0.0, 0.0, -2.0)

    test 166 Ltp: {'ecef': EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='')}
    test 167 name: Test
    test 168 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 169 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 170 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 171 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 172 forward: 37288.97, 33374.29, 5783.65
    test 173 name: Test
    test 174 reverse: 33.3, 44.4, 6000.0
    test 175 name: Test
    test 176 name: Paris
    test 177 Paris: 48.833, 2.333, 0.0
    test 178 forward: -37518.64, 229949.65, -4260.43
    test 179 name: Calais
    test 180 reverse: 50.9, 1.8, -0.0
    test 181 name: Paris
    test 182 reverse: -38000.0, 230000.0, -4000.0
    test 183 reverse: 50.9, 1.79, 264.92
    test 184 forward: -38223.7, 229964.2, -4000.0

    test 185 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 186 Matterhorn: (45.976, 7.658, 4531.01)
    test 187 xyz: (-7134.8, -4556.3, 2852.4)
    test 188 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 189 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 190 _local2ecef: Ecef9Tuple
    test 191 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 192 _ecef2local: Local9Tuple
    test 193 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 194 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 195 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 196 Ned: [-4556.3, -7134.8, -2852.4]
    test 197 Enu: [-7134.8, -4556.3, 2852.4]
    test 198 Ned: [-4556.3, -7134.8, -2852.4]

    test 199 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 200 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 201 Frustum: 90.0, 90.0
    test 202 hfov: 90.0
    test 203 vfov: 90.0
    test 204 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 205 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 206 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 207 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 208 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 209 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 210 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 211 alt: 0.0
    test 212 tilt: -10.0
    test 213 roll: -20.0
    test 214 yaw: 330.0
    test 215 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 216 rotate: (-0.005694, 1.334382, 1.104261)
    test 217 tyr3d: (0.0, 0.0, 0.0)
    test 218 tyr3d: (0.0, -2.0, 0.0)
    test 219 tyr3d: (0.0, -2.0, 0.0)
    test 220 tyr3d: (0.0, 0.0, -2.0)

    test 221 Ltp: {'ecef': EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='')}
    test 222 name: Test
    test 223 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 224 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 225 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 226 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 227 forward: 37288.97, 33374.29, 5783.65
    test 228 name: Test
    test 229 reverse: 33.3, 44.4, 6000.0
    test 230 name: Test
    test 231 name: Paris
    test 232 Paris: 48.833, 2.333, 0.0
    test 233 forward: -37518.64, 229949.65, -4260.43
    test 234 name: Calais
    test 235 reverse: 50.9, 1.8, -0.0
    test 236 name: Paris
    test 237 reverse: -38000.0, 230000.0, -4000.0
    test 238 reverse: 50.9, 1.79, 264.92
    test 239 forward: -38223.7, 229964.2, -4000.0

    test 240 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 241 Matterhorn: (45.976, 7.658, 4531.01)
    test 242 xyz: (-7134.8, -4556.3, 2852.4)
    test 243 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 244 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 245 _local2ecef: Ecef9Tuple
    test 246 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=1, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 247 _ecef2local: Local9Tuple
    test 248 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 249 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 250 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 251 Ned: [-4556.3, -7134.8, -2852.4]
    test 252 Enu: [-7134.8, -4556.3, 2852.4]
    test 253 Ned: [-4556.3, -7134.8, -2852.4]

    test 254 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 255 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 256 Frustum: 90.0, 90.0
    test 257 hfov: 90.0
    test 258 vfov: 90.0
    test 259 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 260 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 261 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 262 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 263 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 264 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 265 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 266 alt: 0.0
    test 267 tilt: -10.0
    test 268 roll: -20.0
    test 269 yaw: 330.0
    test 270 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 271 rotate: (-0.005694, 1.334382, 1.104261)
    test 272 tyr3d: (0.0, 0.0, 0.0)
    test 273 tyr3d: (0.0, -2.0, 0.0)
    test 274 tyr3d: (0.0, -2.0, 0.0)
    test 275 tyr3d: (0.0, 0.0, -2.0)

    test 276 Ltp: {'ecef': EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='')}
    test 277 name: Test
    test 278 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 279 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 280 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 281 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 282 forward: 37288.97, 33374.29, 5783.65
    test 283 name: Test
    test 284 reverse: 33.3, 44.4, 6000.0
    test 285 name: Test
    test 286 name: Paris
    test 287 Paris: 48.833, 2.333, 0.0
    test 288 forward: -37518.64, 229949.65, -4260.43
    test 289 name: Calais
    test 290 reverse: 50.9, 1.8, -0.0
    test 291 name: Paris
    test 292 reverse: -38000.0, 230000.0, -4000.0
    test 293 reverse: 50.9, 1.79, 264.92
    test 294 forward: -38223.7, 229964.2, -4000.0

    test 295 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 296 Matterhorn: (45.976, 7.658, 4531.01)
    test 297 xyz: (-7134.8, -4556.3, 2852.4)
    test 298 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 299 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 300 _local2ecef: Ecef9Tuple
    test 301 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009609, C=1, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 302 _ecef2local: Local9Tuple
    test 303 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 304 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 305 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 306 Ned: [-4556.3, -7134.8, -2852.4]
    test 307 Enu: [-7134.8, -4556.3, 2852.4]
    test 308 Ned: [-4556.3, -7134.8, -2852.4]

    test 309 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 310 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 311 Frustum: 90.0, 90.0
    test 312 hfov: 90.0
    test 313 vfov: 90.0
    test 314 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 315 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 316 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 317 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 318 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 319 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 320 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 321 alt: 0.0
    test 322 tilt: -10.0
    test 323 roll: -20.0
    test 324 yaw: 330.0
    test 325 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 326 rotate: (-0.005694, 1.334382, 1.104261)
    test 327 tyr3d: (0.0, 0.0, 0.0)
    test 328 tyr3d: (0.0, -2.0, 0.0)
    test 329 tyr3d: (0.0, -2.0, 0.0)
    test 330 tyr3d: (0.0, 0.0, -2.0)

    test 331 Ltp: {'ecef': EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='')}
    test 332 name: Test
    test 333 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 334 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 335 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 336 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 337 forward: 37288.97, 33374.29, 5783.65
    test 338 name: Test
    test 339 reverse: 33.3, 44.4, 6000.0
    test 340 name: Test
    test 341 name: Paris
    test 342 Paris: 48.833, 2.333, 0.0
    test 343 forward: -37518.64, 229949.65, -4260.43
    test 344 name: Calais
    test 345 reverse: 50.9, 1.8, -0.0
    test 346 name: Paris
    test 347 reverse: -38000.0, 230000.0, -4000.0
    test 348 reverse: 50.9, 1.79, 264.92
    test 349 forward: -38223.7, 229964.2, -4000.0

    test 350 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 351 Matterhorn: (45.976, 7.658, 4531.01)
    test 352 xyz: (-7134.8, -4556.3, 2852.4)
    test 353 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 354 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 355 _local2ecef: Ecef9Tuple
    test 356 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=1, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 357 _ecef2local: Local9Tuple
    test 358 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 359 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 360 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 361 Ned: [-4556.3, -7134.8, -2852.4]
    test 362 Enu: [-7134.8, -4556.3, 2852.4]
    test 363 Ned: [-4556.3, -7134.8, -2852.4]

    test 364 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 365 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 366 Frustum: 90.0, 90.0
    test 367 hfov: 90.0
    test 368 vfov: 90.0
    test 369 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 370 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 371 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 372 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 373 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 374 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 375 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 376 alt: 0.0
    test 377 tilt: -10.0
    test 378 roll: -20.0
    test 379 yaw: 330.0
    test 380 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 381 rotate: (-0.005694, 1.334382, 1.104261)
    test 382 tyr3d: (0.0, 0.0, 0.0)
    test 383 tyr3d: (0.0, -2.0, 0.0)
    test 384 tyr3d: (0.0, -2.0, 0.0)
    test 385 tyr3d: (0.0, 0.0, -2.0)

    test 386 Ltp: {'ecef': EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='')}
    test 387 name: Test
    test 388 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 389 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 390 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 391 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 392 forward: 37288.97, 33374.29, 5783.65
    test 393 name: Test
    test 394 reverse: 33.33, 44.4, 5998.84  FAILED, KNOWN, expected 33.3, 44.4, 6000.0
    test 395 name: Test
    test 396 name: Paris
    test 397 Paris: 48.833, 2.333, 0.0
    test 398 forward: -37518.64, 229949.65, -4260.43
    test 399 name: Calais
    test 400 reverse: 51.01, 1.8, -11.8  FAILED, KNOWN, expected 50.9, 1.8, -0.0
    test 401 name: Paris
    test 402 reverse: -38000.0, 230000.0, -4000.0
    test 403 reverse: 51.01, 1.79, 253.12  FAILED, KNOWN, expected 50.9, 1.79, 264.92
    test 404 forward: -38223.7, 229964.2, -4000.0

    test 405 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 406 Matterhorn: (46.06, 7.658, 4524.116)  FAILED, KNOWN, expected (45.976, 7.658, 4531.01)
    test 407 xyz: (-7124.0, 4817.7, 2845.3)  FAILED, KNOWN, expected (-7134.8, -4556.3, 2852.4)
    test 408 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 409 _local2ecef: (4403757.602, 592124.536, 4566652.082, 46.06, 7.658, 4524.116, 7, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 410 _local2ecef: Ecef9Tuple
    test 411 _ecef2local: (-7134.8, -4556.3, 2852.4, 46.06, 7.658, 4524.116, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=46.060275, lon=7.657999, height=4524.115631, C=7, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 412 _ecef2local: Local9Tuple
    test 413 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 414 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 415 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 416 Ned: [-4556.3, -7134.8, -2852.4]
    test 417 Enu: [-7134.8, -4556.3, 2852.4]
    test 418 Ned: [-4556.3, -7134.8, -2852.4]

    test 419 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 420 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 421 Frustum: 90.0, 90.0
    test 422 hfov: 90.0
    test 423 vfov: 90.0
    test 424 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 425 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 426 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 427 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 428 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 429 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 430 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 431 alt: 0.0
    test 432 tilt: -10.0
    test 433 roll: -20.0
    test 434 yaw: 330.0
    test 435 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 436 rotate: (-0.005694, 1.334382, 1.104261)
    test 437 tyr3d: (0.0, 0.0, 0.0)
    test 438 tyr3d: (0.0, -2.0, 0.0)
    test 439 tyr3d: (0.0, -2.0, 0.0)
    test 440 tyr3d: (0.0, 0.0, -2.0)

    test 441 Ltp: {'ecef': EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='')}
    test 442 name: Test
    test 443 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 444 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 445 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 446 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 447 forward: 37288.97, 33374.29, 5783.65
    test 448 name: Test
    test 449 reverse: 33.3, 44.4, 6000.0
    test 450 name: Test
    test 451 name: Paris
    test 452 Paris: 48.833, 2.333, 0.0
    test 453 forward: -37518.64, 229949.65, -4260.43
    test 454 name: Calais
    test 455 reverse: 50.9, 1.8, -0.0
    test 456 name: Paris
    test 457 reverse: -38000.0, 230000.0, -4000.0
    test 458 reverse: 50.9, 1.79, 264.92
    test 459 forward: -38223.7, 229964.2, -4000.0

    test 460 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 461 Matterhorn: (45.976, 7.658, 4531.01)
    test 462 xyz: (-7134.8, -4556.3, 2852.4)
    test 463 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 464 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 465 _local2ecef: Ecef9Tuple
    test 466 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=1, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 467 _ecef2local: Local9Tuple
    test 468 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 469 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 470 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 471 Ned: [-4556.3, -7134.8, -2852.4]
    test 472 Enu: [-7134.8, -4556.3, 2852.4]
    test 473 Ned: [-4556.3, -7134.8, -2852.4]

    test 474 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 475 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 476 Frustum: 90.0, 90.0
    test 477 hfov: 90.0
    test 478 vfov: 90.0
    test 479 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 480 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 481 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 482 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 483 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 484 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 485 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 486 alt: 0.0
    test 487 tilt: -10.0
    test 488 roll: -20.0
    test 489 yaw: 330.0
    test 490 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 491 rotate: (-0.005694, 1.334382, 1.104261)
    test 492 tyr3d: (0.0, 0.0, 0.0)
    test 493 tyr3d: (0.0, -2.0, 0.0)
    test 494 tyr3d: (0.0, -2.0, 0.0)
    test 495 tyr3d: (0.0, 0.0, -2.0)

    test 496 ChLV: ...
    test 497 name: Test
    test 498 ChLV_: ChLV

    test 499 forward1: (-72.039994, -147.361444, -49.552111, 46.95108, 7.438637, 0.0, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 500 Y, X, h_: (-72.03999403763596, -147.36144397473055, -49.552110733726806)
    test 501 EN2_LV95: (2599927.960006, 1199852.638556)
    test 502 yx2_LV03: (599927.960006, 199852.638556)
    test 503 reverse1: (-72.039994, -147.361444, -49.552111, 46.95108, 7.438637, 0.0, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 504 reverse2: (100000.0, 0.0, 600.0, 46.944873, 8.752874, 1431.948128, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 505 forward2: (100000.0, 0.0, 600.0, 46.944873, 8.752874, 1431.948128, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 506 Y, X, h_: (100000.00000000006, -6.593268153665122e-10, 600.0000000007235)
    test 507 EN2_LV95: (2700000.0, 1200000.0)
    test 508 yx2_LV03: (700000.0, 200000.0)

    test 509 forward3: (99920.639806, -100148.24791, -967.661696, 46.044131, 8.730497, 650.6, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 510 Y, X, h_: (99920.63980649531, -100148.24791021261, -967.6616955399913)
    test 511 EN2_LV95: (2699920.639806, 1099851.75209)
    test 512 yx2_LV03: (699920.639806, 99851.75209)
    test 513 reverse3: (99920.639806, -100148.24791, -967.661696, 46.044131, 8.730497, 650.6, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 514 forward4: (79527.502386, 12274.804229, -556.312155, 47.058043, 8.48642, 0.0, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 515 Y, X, h_: (79527.50238583283, 12274.804228939269, -556.3121548987456)
    test 516 EN2_LV95: (2679527.502386, 1212274.804229)
    test 517 yx2_LV03: (679527.502386, 212274.804229)
    test 518 reverse4: (79527.502386, 12274.804229, -556.312155, 47.058043, 8.48642, -0.0, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 519 REFRAME1: (8.616351530455896, 46.654750670631664, 3083.4064441197074)  FAILED, KNOWN, expected (8.61588452888461, 46.6532932166132, 2367.70367439557)
    test 520 REFRAME1:  0.00146 m
    test 521 REFRAME2: (10.204043023734306, 46.777835938708535, 5053.168786317753)  FAILED, KNOWN, expected (10.2046874099038, 46.7763864160066, 1546.62256775331)
    test 522 REFRAME2:  0.00145 m
    test 523 REFRAME3: (7.231565437123991, 47.39538671375251, 1150.358929550846)  FAILED, KNOWN, expected (7.23058814336896, 47.3941353658685, 940.206020880491)
    test 524 REFRAME3:  0.00125 m
    test 525 REFRAME4: (9.843252123471997, 46.814319314291666, 4291.256736215736)  FAILED, KNOWN, expected (9.84351348200287, 46.8129146868336, 1645.59174753912)
    test 526 REFRAME4:  0.0014 m
    test 527 REFRAME5: (6.568908171267955, 46.52284580890318, 985.7597106108213)  FAILED, KNOWN, expected (6.56789363190021, 46.5214647527993, 460.491580192)
    test 528 REFRAME5:  0.00138 m
    test 529 REFRAME6: (8.731242095241983, 46.04567715552447, 2216.7888714367236)  FAILED, KNOWN, expected (8.73049738375132, 46.0441209510033, 650.012275829911)
    test 530 REFRAME6:  0.00156 m

    test 531 Bollinger.lat: 46°11′13.03444″N  FAILED, KNOWN, expected 46°11′12.03969″N
    test 532 Bollinger.lon: 009°07′55.69155″E  FAILED, KNOWN, expected 009°07′57.29664″E
    test 533 Zermatt: (46.01693292843191, 7.7455811694023975, 2629.5454517406183)  FAILED, KNOWN, expected (46.015314107, 7.74720273, 1742.449)
    test 534 Zermatt:  0.00162 m
    test 535 Zimmerwald: (46.878427446046224, 7.466218796566257, 953.0972897404835)  FAILED, KNOWN, expected (46.878427446, 7.466218797, 953.0973)
    test 536 Zimmerwald:  4.34e-10 m
    test 537 Chrischona: (47.56830864684501, 7.66954858440231, 897.4060435656095)  FAILED, KNOWN, expected (47.568308647, 7.6695485844, 897.406)
    test 538 Chrischona:  1.55e-10 m
    test 539 Pfaender: (47.516320169780975, 9.784378737247414, 3868.8598426346603)  FAILED, KNOWN, expected (47.5163201698, 9.7843787372, 3868.8599)
    test 540 Pfaender:  4.74e-11 m
    test 541 La Givrine: (46.45557406857666, 6.103316269663712, 2313.9449708991415)  FAILED, KNOWN, expected (46.4555740686, 6.1033162697, 2313.94497)
    test 542 La Givrine:  3.63e-11 m
    test 543 Monte Generoso: (45.931118444496924, 9.021602047098654, 3855.4332412055323)  FAILED, KNOWN, expected (45.9311184445, 9.0216020471, 3855.4332)
    test 544 Monte Generoso:  3.08e-12 m

    test 545 ChLVa: ...
    test 546 name: Test
    test 547 ChLV_: ChLVa

    test 548 forward1: (0.329415, -0.292702, -49.554242, 46.95108, 7.438637, 0.0, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 549 Y, X, h_: (0.32941546850192266, -0.2927016084473125, -49.554241824400016)
    test 550 EN2_LV95: (2600000.329415, 1199999.707298)
    test 551 yx2_LV03: (600000.329415, 199999.707298)
    test 552 reverse1: (0.329415, -0.292702, -49.554242, 46.951078, 7.438642, -0.004239, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 553 reverse2: (100000.0, -100000.0, 600.0, 46.044127, 8.730499, 650.554, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 554 forward2: (99999.933937, -100000.44412, 600.003469, 46.044127, 8.730499, 650.554, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 555 Y, X, h_: (99999.933937317, -100000.44412018938, 600.0034685464)
    test 556 EN2_LV95: (2699999.933937, 1099999.55588)
    test 557 yx2_LV03: (699999.933937, 99999.55588)

    test 558 forward3: (99999.763621, -100000.026905, 600.049476, 46.044131, 8.730497, 650.6, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 559 Y, X, h_: (99999.76362116335, -100000.0269049639, 600.0494759100001)
    test 560 EN2_LV95: (2699999.763621, 1099999.973095)
    test 561 yx2_LV03: (699999.763621, 99999.973095)
    test 562 reverse3: (99999.763621, -100000.026905, 600.049476, 46.044127, 8.730496, 650.603479, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 563 forward4: (79602.736359, 12421.914221, -48.257243, 47.058043, 8.48642, 0.0, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 564 Y, X, h_: (79602.73635877526, 12421.914220824741, -48.25724328779257)
    test 565 EN2_LV95: (2679602.736359, 1212421.914221)
    test 566 yx2_LV03: (679602.736359, 212421.914221)
    test 567 reverse4: (79602.736359, 12421.914221, -48.257243, 47.058038, 8.486421, 0.00853, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 568 REFRAME1: (8.615878879495897, 46.65329026883798, 2365.31877736998)  FAILED, KNOWN, expected (8.61588452888461, 46.6532932166132, 2367.70367439557)
    test 569 REFRAME1:  5.65e-06 m
    test 570 REFRAME2: (10.204675703252203, 46.77638487390875, 1542.5231657804)  FAILED, KNOWN, expected (10.2046874099038, 46.7763864160066, 1546.62256775331)
    test 571 REFRAME2:  1.17e-05 m
    test 572 REFRAME3: (7.230597895755378, 47.394131639593425, 939.5622657947999)  FAILED, KNOWN, expected (7.23058814336896, 47.3941353658685, 940.206020880491)
    test 573 REFRAME3:  9.75e-06 m
    test 574 REFRAME4: (9.843502988079765, 46.812913925274714, 1642.70478811448)  FAILED, KNOWN, expected (9.84351348200287, 46.8129146868336, 1645.59174753912)
    test 575 REFRAME4:  1.05e-05 m
    test 576 REFRAME5: (6.5678939352793595, 46.52146855855015, 462.1027394584)  FAILED, KNOWN, expected (6.56789363190021, 46.5214647527993, 460.491580192)
    test 577 REFRAME5:  3.81e-06 m
    test 578 REFRAME6: (8.730499333333333, 46.04412677777778, 650.554)  FAILED, KNOWN, expected (8.73049738375132, 46.0441209510033, 650.012275829911)
    test 579 REFRAME6:  5.83e-06 m

    test 580 Bollinger.lat: 46°11′07.65425″N  FAILED, KNOWN, expected 46°11′12.03969″N
    test 581 Bollinger.lon: 009°07′52.99874″E  FAILED, KNOWN, expected 009°07′57.29664″E
    test 582 Zermatt: (46.01531297876282, 7.744712831892469, 1739.1724096628)  FAILED, KNOWN, expected (46.015314107, 7.74720273, 1742.449)
    test 583 Zermatt:  0.00249 m
    test 584 Zimmerwald: (46.877092307814216, 7.465275686541408, 947.6256267527999)  FAILED, KNOWN, expected (46.878427446, 7.466218797, 953.0973)
    test 585 Zimmerwald:  0.00134 m
    test 586 Chrischona: (47.56704452300608, 7.668609312668058, 503.84493534800004)  FAILED, KNOWN, expected (47.568308647, 7.6695485844, 897.406)
    test 587 Chrischona:  0.00126 m
    test 588 Pfaender: (47.51533372240414, 9.784358161933795, 1088.46794437916)  FAILED, KNOWN, expected (47.5163201698, 9.7843787372, 3868.8599)
    test 589 Pfaender:  0.000986 m
    test 590 La Givrine: (46.45409066669543, 6.1020351431347315, 1259.50889260448)  FAILED, KNOWN, expected (46.4555740686, 6.1033162697, 2313.94497)
    test 591 La Givrine:  0.00148 m
    test 592 Monte Generoso: (45.92930092608269, 9.02121992500755, 1687.1468504651998)  FAILED, KNOWN, expected (45.9311184445, 9.0216020471, 3855.4332)
    test 593 Monte Generoso:  0.00182 m

    test 594 ChLVe: ...
    test 595 name: Test
    test 596 ChLV_: ChLVe

    test 597 forward1: (-72.031251, -147.344948, -49.554242, 46.95108, 7.438637, 0.0, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 598 Y, X, h_: (-72.031251437589, -147.3449483831346, -49.554241824400016)
    test 599 EN2_LV95: (2599927.968749, 1199852.655052)
    test 600 yx2_LV03: (599927.968749, 199852.655052)
    test 601 reverse1: (-72.031251, -147.344948, -49.554242, 46.95108, 7.438637, 0.000002, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 602 reverse2: (100000.0, 0.0, 600.0, 46.944869, 8.753274, 648.29, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 603 forward2: (100000.000001, 0.0, 600.012265, 46.944869, 8.753274, 648.29, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 604 Y, X, h_: (100000.00000057962, 1.8112534442566837e-07, 600.0122653531955)
    test 605 EN2_LV95: (2700000.000001, 1200000.0)
    test 606 yx2_LV03: (700000.000001, 200000.0)

    test 607 forward3: (99914.740455, -100135.079382, 600.049476, 46.044131, 8.730497, 650.6, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 608 Y, X, h_: (99914.74045471674, -100135.07938181334, 600.0494759100001)
    test 609 EN2_LV95: (2699914.740455, 1099864.920618)
    test 610 yx2_LV03: (699914.740455, 99864.920618)
    test 611 reverse3: (99914.740455, -100135.079382, 600.049476, 46.044131, 8.730497, 650.607608, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 612 forward4: (79520.050001, 12273.439993, -48.257243, 47.058043, 8.48642, 0.0, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 613 Y, X, h_: (79520.05000103211, 12273.439993103837, -48.25724328779257)
    test 614 EN2_LV95: (2679520.050001, 1212273.439993)
    test 615 yx2_LV03: (679520.050001, 212273.439993)
    test 616 reverse4: (79520.050001, 12273.439993, -48.257243, 47.058043, 8.48642, 0.012933, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 617 REFRAME1: (8.617004216786864, 46.65457267826783, 2365.31877736998)  FAILED, KNOWN, expected (8.61588452888461, 46.6532932166132, 2367.70367439557)
    test 618 REFRAME1:  0.00128 m
    test 619 REFRAME2: (10.206045201491072, 46.777660119243905, 1542.5231657804)  FAILED, KNOWN, expected (10.2046874099038, 46.7763864160066, 1546.62256775331)
    test 620 REFRAME2:  0.00136 m
    test 621 REFRAME3: (7.231508661195409, 47.3955074884183, 939.5622657947999)  FAILED, KNOWN, expected (7.23058814336896, 47.3941353658685, 940.206020880491)
    test 622 REFRAME3:  0.00137 m
    test 623 REFRAME4: (9.844818386934287, 46.814198001739975, 1642.70478811448)  FAILED, KNOWN, expected (9.84351348200287, 46.8129146868336, 1645.59174753912)
    test 624 REFRAME4:  0.0013 m
    test 625 REFRAME5: (6.568709824649145, 46.5227385206423, 462.1027394584)  FAILED, KNOWN, expected (6.56789363190021, 46.5214647527993, 460.491580192)
    test 626 REFRAME5:  0.00127 m
    test 627 REFRAME6: (8.731627351611777, 46.04533300622348, 650.554)  FAILED, KNOWN, expected (8.73049738375132, 46.0441209510033, 650.012275829911)
    test 628 REFRAME6:  0.00121 m

    test 629 Bollinger.lat: 46°11′12.03969″N
    test 630 Bollinger.lon: 009°07′57.29664″E
    test 631 Bollinger.gamma: 1.3747154949761575

    test 632 Zermatt: (46.016524980589146, 7.745700583699864, 1739.1724096628)  FAILED, KNOWN, expected (46.015314107, 7.74720273, 1742.449)
    test 633 Zermatt:  0.0015 m
    test 634 Zimmerwald: (46.878408134660475, 7.46622597045386, 947.6256267527999)  FAILED, KNOWN, expected (46.878427446, 7.466218797, 953.0973)
    test 635 Zimmerwald:  1.93e-05 m
    test 636 Chrischona: (47.56844071309313, 7.669595854297879, 503.84493534800004)  FAILED, KNOWN, expected (47.568308647, 7.6695485844, 897.406)
    test 637 Chrischona:  0.000132 m
    test 638 Pfaender: (47.51669640784962, 9.785678729594727, 1088.46794437916)  FAILED, KNOWN, expected (47.5163201698, 9.7843787372, 3868.8599)
    test 639 Pfaender:  0.0013 m
    test 640 La Givrine: (46.45534732351903, 6.102781792813614, 1259.50889260448)  FAILED, KNOWN, expected (46.4555740686, 6.1033162697, 2313.94497)
    test 641 La Givrine:  0.000534 m
    test 642 Monte Generoso: (45.93048753878003, 9.022387820586593, 1687.1468504651998)  FAILED, KNOWN, expected (45.9311184445, 9.0216020471, 3855.4332)
    test 643 Monte Generoso:  0.000786 m

    102 of 643 testLtp.py tests (15.9%) FAILED, incl. 90 KNOWN plus 12 DeprecationWarnings (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 47.506 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testLtpTuples.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Aer from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.Enu from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.fstr from .streprs by testLtpTuples.py line 11
# lazily imported pygeodesy.Local9Tuple from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.Los from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.Ltp from .ltp by testLtpTuples.py line 11
# lazily imported pygeodesy.Ned from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.XyzLocal from .ltpTuples by testLtpTuples.py line 11

    testing testLtpTuples.py 23.11.21 isLazy=3

    test 1 Aer.toRepr: [A:60.0°, E:40.0°, R:1000.0]
    test 2 Aer.toStr: [60.0, 40.0, 1000.0]
    test 3 Aer.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 4 Aer.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 5 Aer.xyzLocal.toEnu: [663.41, 383.02, 642.79]
    test 6 Enu.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 7 Aer.xyzLocal.toNed: [383.02, 663.41, -642.79]
    test 8 Ned.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 9 Aer.xyzLocal.toXyz: [663.41, 383.02, 642.79]
    test 10 Xyz.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 11 Aer.toCartesian: [4397663.96, 599165.33, 4568492.25]
    test 12 Cartesian.toLocal Aer: [60.0, 40.0, 1000.0]
    test 13 Aer.toLatLon: 46°01′13.6″N, 007°45′30.83″E, +2315.83m
    test 14 LatLon.toLocal Aer: [60.0, 40.0, 1000.0]
    test 15 Aer.azimuth: 60.0
    test 16 Aer.elevation: 40.0
    test 17 Aer.slantrange: 1000.0
    test 18 Aer.groundrange: 766.044
    test 19 Aer.east: 663.414
    test 20 Aer.north: 383.022
    test 21 Aer.up: 642.788
    test 22 Aer.down: -642.788
    test 23 Aer.x: 663.414
    test 24 Aer.y: 383.022
    test 25 Aer.z: 642.788
    test 26 Aer.xyz: 663.414, 383.022, 642.788

    test 27 Los: [A:45.0°, E:-45.0°, R:1.0]
    test 28 Los: [E:0.5, N:0.5, U:-0.707]
    test 29 Los: [U:-0.707, V:0.5, W:0.5]
    test 30 Los: [E:0.5, N:0.5, U:-0.707]

    test 31 Enu.toRepr: [E:100.0, N:200.0, U:1000.0]
    test 32 Enu.toStr: [100.0, 200.0, 1000.0]
    test 33 Enu.xyzLocal.toAer: [26.57, 77.4, 1024.7]
    test 34 Aer.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 35 Enu.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 36 Enu.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 37 Enu.xyzLocal.toNed: [200.0, 100.0, -1000.0]
    test 38 Ned.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 39 Enu.xyzLocal.toXyz: [100.0, 200.0, 1000.0]
    test 40 Xyz.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 41 Enu.toCartesian: [4398116.23, 598658.27, 4568622.18]
    test 42 Cartesian.toLocal Enu: [100.0, 200.0, 1000.0]
    test 43 Enu.toLatLon: 46°01′07.67″N, 007°45′04.65″E, +2673.00m
    test 44 LatLon.toLocal Enu: [100.0, 200.0, 1000.0]
    test 45 Enu.azimuth: 26.565
    test 46 Enu.elevation: 77.396
    test 47 Enu.slantrange: 1024.695
    test 48 Enu.groundrange: 223.607
    test 49 Enu.east: 100.0
    test 50 Enu.north: 200.0
    test 51 Enu.up: 1000.0
    test 52 Enu.down: -1000.0
    test 53 Enu.x: 100.0
    test 54 Enu.y: 200.0
    test 55 Enu.z: 1000.0
    test 56 Enu.xyz: 100.0, 200.0, 1000.0

    test 57 Los: [A:45.0°, E:-45.0°, R:1.0]
    test 58 Los: [E:0.5, N:0.5, U:-0.707]
    test 59 Los: [U:-0.707, V:0.5, W:0.5]
    test 60 Los: [E:0.5, N:0.5, U:-0.707]

    test 61 Ned.toRepr: [N:200.0, E:100.0, D:1000.0]
    test 62 Ned.toStr: [200.0, 100.0, 1000.0]
    test 63 Ned.xyzLocal.toAer: [26.57, -77.4, 1024.7]
    test 64 Aer.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 65 Ned.xyzLocal.toEnu: [100.0, 200.0, -1000.0]
    test 66 Enu.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 67 Ned.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 68 Ned.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 69 Ned.xyzLocal.toXyz: [100.0, 200.0, -1000.0]
    test 70 Xyz.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 71 Ned.toCartesian: [4396740.02, 598470.98, 4567183.09]
    test 72 Cartesian.toLocal Ned: [200.0, 100.0, 1000.0]
    test 73 Ned.toLatLon: 46°01′07.68″N, 007°45′04.65″E, +673.00m
    test 74 LatLon.toLocal Ned: [200.0, 100.0, 1000.0]
    test 75 Ned.azimuth: 26.565
    test 76 Ned.elevation: -77.396
    test 77 Ned.slantrange: 1024.695
    test 78 Ned.groundrange: 223.607
    test 79 Ned.east: 100.0
    test 80 Ned.north: 200.0
    test 81 Ned.up: -1000.0
    test 82 Ned.down: 1000.0
    test 83 Ned.x: 100.0
    test 84 Ned.y: 200.0
    test 85 Ned.z: -1000.0
    test 86 Ned.xyz: 100.0, 200.0, -1000.0

    test 87 Los: [A:45.0°, E:-45.0°, R:1.0]
    test 88 Los: [E:0.5, N:0.5, U:-0.707]
    test 89 Los: [U:-0.707, V:0.5, W:0.5]
    test 90 Los: [E:0.5, N:0.5, U:-0.707]

    test 91 Xyz.toRepr: [X:10.0, Y:20.0, Z:100.0]
    test 92 Xyz.toStr: [10.0, 20.0, 100.0]
    test 93 Xyz.xyzLocal.toAer: [26.57, 77.4, 102.47]
    test 94 Aer.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 95 Xyz.xyzLocal.toEnu: [10.0, 20.0, 100.0]
    test 96 Enu.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 97 Xyz.xyzLocal.toNed: [20.0, 10.0, -100.0]
    test 98 Ned.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 99 Xyz.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 100 Xyz.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 101 Xyz.toCartesian: [4397637.41, 598502.28, 4567849.59]
    test 102 Cartesian.toLocal Xyz: [10.0, 20.0, 100.0]
    test 103 Xyz.toLatLon: 46°01′01.85″N, 007°45′00.46″E, +1773.00m
    test 104 LatLon.toLocal Xyz: [10.0, 20.0, 100.0]
    test 105 Xyz.azimuth: 26.565
    test 106 Xyz.elevation: 77.396
    test 107 Xyz.slantrange: 102.47
    test 108 Xyz.groundrange: 22.361
    test 109 Xyz.east: 10.0
    test 110 Xyz.north: 20.0
    test 111 Xyz.up: 100.0
    test 112 Xyz.down: -100.0
    test 113 Xyz.x: 10.0
    test 114 Xyz.y: 20.0
    test 115 Xyz.z: 100.0
    test 116 Xyz.xyz: 10.0, 20.0, 100.0

    test 117 Los: [A:45.0°, E:-45.0°, R:1.0]
    test 118 Los: [E:0.5, N:0.5, U:-0.707]
    test 119 Los: [U:-0.707, V:0.5, W:0.5]
    test 120 Los: [E:0.5, N:0.5, U:-0.707]

    test 121 Local9Tuple.toRepr: Local9Tuple(x=10.0, y=20.0, z=100.0, lat=46.02, lon=7.75, height=1773.0, ltp=Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transfo
    test 122 Local9Tuple.toStr: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 123 Local9Tuple.xyzLocal.toAer: [26.57, 77.4, 102.47]
    test 124 Aer.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 125 Local9Tuple.xyzLocal.toEnu: [10.0, 20.0, 100.0]
    test 126 Enu.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 127 Local9Tuple.xyzLocal.toNed: [20.0, 10.0, -100.0]
    test 128 Ned.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 129 Local9Tuple.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 130 Xyz.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 131 Local9Tuple.toCartesian: [4397637.41, 598502.28, 4567849.59]
    test 132 Local9Tuple.toLatLon: 46°01′01.85″N, 007°45′00.46″E, +1773.00m
    test 133 Local9Tuple.azimuth: 26.565
    test 134 Local9Tuple.elevation: 77.396
    test 135 Local9Tuple.slantrange: 102.47
    test 136 Local9Tuple.groundrange: 22.361
    test 137 Local9Tuple.east: 10.0
    test 138 Local9Tuple.north: 20.0
    test 139 Local9Tuple.up: 100.0
    test 140 Local9Tuple.down: -100.0
    test 141 Local9Tuple.x: 10.0
    test 142 Local9Tuple.y: 20.0
    test 143 Local9Tuple.z: 100.0
    test 144 Local9Tuple.xyz: 10.0, 20.0, 100.0
    test 145 Local9Tuple.lat: 46.02
    test 146 Local9Tuple.lon: 7.75
    test 147 Local9Tuple.latlon: 46.02, 7.75
    test 148 Local9Tuple.latlonheight: 46.02, 7.75, 1773.0
    test 149 Local9Tuple.phi: 0.803
    test 150 Local9Tuple.lam: 0.135
    test 151 Local9Tuple.philam: 0.803, 0.135
    test 152 Local9Tuple.philamheight: 0.803, 0.135, 1773.0

    test 153 Los: [A:45.0°, E:-45.0°, R:1.0]
    test 154 Los: [E:0.5, N:0.5, U:-0.707]
    test 155 Los: [U:-0.707, V:0.5, W:0.5]
    test 156 Los: [E:0.5, N:0.5, U:-0.707]

    all 156 testLtpTuples.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 7.730 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testMgrs.py
./test/testMgrs.py:88: DeprecationWarning: property_RO L{pygeodesy.mgrs.Mgrs.en100k} has been DEPRECATED, use property C{EN}.
  self.test(a, getattr(p, a), x)
./test/testMgrs.py:88: DeprecationWarning: property_RO L{pygeodesy.mgrs.Mgrs.digraph} has been DEPRECATED, use property C{EN}.
  self.test(a, getattr(p, a), x)
./test/testMgrs.py:94: DeprecationWarning: property_RO L{pygeodesy.mgrs.Mgrs6Tuple.digraph} has been DEPRECATED, use attribute C{EN}.
  self.test('digraph', m.digraph, m.EN, nt=1)  # DEPRECATED
./test/testMgrs.py:117: DeprecationWarning: property_RO L{pygeodesy.mgrs.Mgrs4Tuple.digraph} has been DEPRECATED, use attribute C{EN}.
  self.test('digraph', t.digraph, t.EN)  # DEPRECATED
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.mgrs by testMgrs.py line 11
# lazily imported pygeodesy.Mgrs from .mgrs by testMgrs.py line 11
# lazily imported pygeodesy.parseMGRS from .mgrs by testMgrs.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testMgrs.py line 204

    testing testMgrs.py 23.03.27 (module pygeodesy.mgrs 24.06.11) isLazy=3
    test 1 Mgrs1: 42S XD 09705 38646
    test 2 Mgrs1: [Z:42S, G:XD, E:09705, N:38646]
    test 3 Mgrs2: 42S XD 19705 08646
    test 4 Mgrs2: [Z:42S, G:XD, E:19705, N:08646]
    test 5 Mgrs3: 42S XD 19000 38000
    test 6 Mgrs3: [Z:42S, G:XD, E:19000, N:38000]
    test 7 Mgrs4: 31U DQ 48251 11932
    test 8 Mgrs4: [Z:31U, G:DQ, E:48251, N:11932]
    test 9 Mgrs5: 31U DQ 48251 11932
    test 10 Mgrs5: [Z:31U, G:DQ, E:48251, N:11932]
    test 11 Mgrs6: 31U DQ 48251 11932
    test 12 Mgrs6: [Z:31U, G:DQ, E:48251, N:11932]
    test 13 Mgrs7: 31U DQ 48251 11932
    test 14 Mgrs7: [Z:31U, G:DQ, E:48251, N:11932]
    test 15 Mgrs8: 31 N 431000 4582000
    test 16 Mgrs8: (41.38657, 2.174726, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -0.54564, 0.999659)
    test 17 Mgrs8: 31 N 431500 4582500
    test 18 Mgrs8: 31T DF 31000 82000
    test 19 Mgrs8: 41.391116°N, 002.180649°E
    test 20 Mgrs8: 31T DF 31000 82000
    test 21 Mgrs9: 31U DQ 48251 11932
    test 22 Mgrs9: [Z:31U, G:DQ, E:48251, N:11932]
    test 23 toUtm1: 31 N 448251 5411932
    test 24 toUtm1: [Z:31U, H:N, E:448251, N:5411932]
    test 25 toMgrs1: 31U DQ 48251 11932
    test 26 toMgrs1: [Z:31U, G:DQ, E:48251, N:11932]

    test 27 toUtm(None): (31, 'N', 448251.0, 5411932.0, 'U')
    test 28 easting: 48251.0
    test 29 northing: 11932.0
    test 30 EN: DQ
    test 31 en100k: DQ
    test 32 digraph: DQ
    test 33 zone: 31
    test 34 band: U
    test 35 bandLatitude: 48
    test 36 eastingnorthing: (48251.0, 11932.0)
    test 37 resolution: 1.0
# lazily imported pygeodesy.utmups by mgrs.py line 277
    test 38 tilesize: 100000.0

    test 39 toMgrs: 31U DQ 48251 11932
    test 40 toMgrs(None): Mgrs6Tuple
    test 41 digraph: DQ

    test 42 (60.0°N, 001.0°E).toUtmUps.toMgrs: 31V CG 88455 53097
    test 43 (60.0°N, 003.0°E).toUtmUps.toMgrs: 32V JM 65640 66593
    test 44 (60.0°N, 009.0°E).toUtmUps.toMgrs: 32V NM 00000 51411
    test 45 (76.0°N, 001.0°E).toUtmUps.toMgrs: 31X DE 45999 36099
    test 46 (76.0°N, 013.0°E).toUtmUps.toMgrs: 33X VE 45999 36099
    test 47 (76.0°N, 025.0°E).toUtmUps.toMgrs: 35X ME 45999 36099
    test 48 (76.0°N, 037.0°E).toUtmUps.toMgrs: 37X DE 45999 36099
    test 49 (84.0°N, 042.0°E).toUtmUps.toMgrs: Z GC 46127 04524
    test 50 (90.0°S, 000.0°E).toUtmUps.toMgrs: B AN 00000 00000

    test 51 Mgrs: BAN00
    test 52 Mgrs4Tuple: ('B', 'AN', 0.0, 0.0)
    test 53 Mgrs4Tuple: SouthPole(zone='B', EN='AN', easting=0.0, northing=0.0)
    test 54 digraph: AN
    test 55 toMgrs.toLatLon: SouthPole(lat=-90.0, lon=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=-0.0, scale=0.994)

    test 56 Ups: 00 S 2000000 2000000
    test 57 Ups: 00 S 2000500 2000500
    test 58 Mgrs: 0.1

    test 59 Mgrs: Y UB 17770 03800
    test 60 Mgrs: [Z:Y, G:UB, E:17770, N:03800]
    test 61 toUtmUps: 00 N 1617775 1403805
    test 62 toUtmUps: [Z:00Y, H:N, E:1617775, N:1403805]
    test 63 toLatLon: (83.627518, -32.664231, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -0.570098, 0.99708)
    test 64 toLatLon: LatLonDatum5Tuple(lat=83.627518, lon=-32.664231, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=-0.570098, scale=0.99708)
    test 65 toMgrs!: 25X EN 04160 86523

    test 66 Mgrs: B FS 77514 99182
    test 67 Mgrs: [Z:B, G:FS, E:77514, N:99182]
    test 68 toUtmUps: 00 S 2377514 2499182
    test 69 toUtmUps: [Z:00B, H:S, E:2377514, N:2499182]
    test 70 toLatLon: (-84.367192, 37.098959, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -0.647499, 0.996406)
    test 71 toLatLon: LatLonDatum5Tuple(lat=-84.367192, lon=37.098959, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=-0.647499, scale=0.996406)
    test 72 toMgrs: B FS 77514 99182

    test 73 Mgrs: 45S XT 47000 91000
    test 74 Mgrs: [Z:45S, G:XT, E:47000, N:91000]
    test 75 toUtmUps: 45 N 647500 3791500
    test 76 toUtmUps: [Z:45S, H:N, E:647500, N:3791500]
    test 77 toLatLon: (34.254177, 88.601932, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), 0.901835, 0.999868)
    test 78 toLatLon: LatLonDatum5Tuple(lat=34.254177, lon=88.601932, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=0.901835, scale=0.999868)
    test 79 toMgrs: 45S XT 47499 91499

    test 80 Mgrs: Y XK 35000 43000
    test 81 Mgrs: [Z:Y, G:XK, E:35000, N:43000]
    test 82 toUtmUps: 00 N 1735500 2243500
    test 83 toUtmUps: [Z:00Y, H:N, E:1735500, N:2243500]
    test 84 toLatLon: (86.762629, -132.632821, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -2.314879, 0.994794)
    test 85 toLatLon: LatLonDatum5Tuple(lat=86.762629, lon=-132.632821, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=-2.314879, scale=0.994794)
    test 86 toMgrs: Y XK 35499 43500

    4 of 86 testMgrs.py tests (4.7%) FAILED, incl. 4 DeprecationWarnings (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 14.509 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testModules.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34

    testing testModules.py 24.06.05 isLazy=3

    2805 tests skipped (2805): pygeodesy

    all testModules.py tests passed, 2805 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 7.868 us

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testNamed.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.geohash by testNamed.py line 10
# lazily imported pygeodesy.Datum from .datums by testNamed.py line 10
# lazily imported pygeodesy.Datums from .datums by testNamed.py line 10
# lazily imported pygeodesy.ltpTuples by testNamed.py line 10
# lazily imported pygeodesy.nameof from .named by testNamed.py line 10
# lazily imported pygeodesy.ub2str from .basics by testNamed.py line 10

    testing testNamed.py 24.06.02 isLazy=3

    testing _Named() (pygeodesy.named, 24.06.24)
    test 1 _Named: _Named
    test 2 _Named: True
    test 3 _Named: ''
    test 4 Test: Test
    test 5 _Named 'Test': _Named 'Test'
    test 6 named._Named 'Test': named._Named 'Test'
    test 7 pygeodesy.named._Named 'Test': pygeodesy.named._Named 'Test'
    test 8 Test: _Named.name = 'X' (was 'Test'): use _Named.rename('X')
    test 9 Test: _Named 'Test'
    test 10 _Named 'Test': Test
    test 11 _Named 'Test': Test
    test 12 _Named 'Test': _Named 'Test'
    test 13 _Named 'Test': <_Named 'Test' at 0x10447d070>  FAILED, KNOWN, expected _Named 'Test'
    test 14 _Named 'Test': ''

    testing _NamedBase() (pygeodesy.named, 24.06.24)
    test 15 _NamedBase: _NamedBase
    test 16 _NamedBase: True
    test 17 _NamedBase: ''
    test 18 Test: Test
    test 19 _NamedBase 'Test': _NamedBase 'Test'
    test 20 named._NamedBase 'Test': named._NamedBase 'Test'
    test 21 pygeodesy.named._NamedBase 'Test': pygeodesy.named._NamedBase 'Test'
    test 22 Test: _NamedBase.name = 'X' (was 'Test'): use _NamedBase.rename('X')
    test 23 Test: named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 24 _NamedBase 'Test': Test
    test 25 _NamedBase 'Test': Test
    test 26 _NamedBase 'Test': named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 27 _NamedBase 'Test': named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 28 _NamedBase 'Test': ''

    testing _NamedDict() (pygeodesy.named, 24.06.24)
    test 29 _NamedDict: _NamedDict
    test 30 _NamedDict: True
    test 31 _NamedDict: ''
    test 32 Test: Test
    test 33 _NamedDict 'Test': _NamedDict 'Test'
    test 34 named._NamedDict 'Test': named._NamedDict 'Test'
    test 35 pygeodesy.named._NamedDict 'Test': pygeodesy.named._NamedDict 'Test'
    test 36 Test: _NamedDict.name = 'X' (was 'Test'): use _NamedDict.rename('X')
    test 37 Test: {}
    test 38 _NamedDict 'Test': Test
    test 39 _NamedDict 'Test': Test
    test 40 _NamedDict 'Test': {}
    test 41 _NamedDict 'Test': Test()  FAILED, KNOWN, expected {}
    test 42 _NamedDict: ''

    testing _NamedEnum(<class 'pygeodesy.datums.Datum'>,) (pygeodesy.named, 24.06.24)
    test 43 Datums: _NamedEnum
    test 44 Datums: True
    test 45 Datums: 'Datums'  FAILED, KNOWN, expected ''
    test 46 Test: Test
    test 47 _NamedEnum 'Test': _NamedEnum 'Test'
    test 48 named._NamedEnum 'Test': named._NamedEnum 'Test'
    test 49 pygeodesy.named._NamedEnum 'Test': pygeodesy.named._NamedEnum 'Test'
    test 50 Test: _NamedEnum.name = 'X' (was 'Test'): use _NamedEnum.rename('X')
    test 51 Test: Test.
    test 52 _NamedEnum 'Test': Test
    test 53 _NamedEnum 'Test': Test
    test 54 _NamedEnum 'Test': Test.
    test 55 _NamedEnum 'Test':   FAILED, KNOWN, expected Test.
    test 56 _NamedEnum: ''

    testing _NamedEnumItem() (pygeodesy.named, 24.06.24)
    test 57 _NamedEnumItem: _NamedEnumItem
    test 58 _NamedEnumItem: True
    test 59 _NamedEnumItem: ''
    test 60 Test: Test
    test 61 _NamedEnumItem 'Test': _NamedEnumItem 'Test'
    test 62 named._NamedEnumItem 'Test': named._NamedEnumItem 'Test'
    test 63 pygeodesy.named._NamedEnumItem 'Test': pygeodesy.named._NamedEnumItem 'Test'
    test 64 _NamedEnumItem 'Test': Test
    test 65 _NamedEnumItem 'Test': Test
    test 66 _NamedEnumItem 'Test': named._NamedEnumItem.toStr(), MRO(named._NamedBase, named._Named): not overloaded
    test 67 _NamedEnumItem 'Test': named._NamedEnumItem.toStr(), MRO(named._NamedBase, named._Named): not overloaded
    test 68 _NamedEnumItem 'Test': ''

    testing LatLon2Tuple(0, 0) (pygeodesy.named, 24.06.24)
    test 69 LatLon2Tuple: LatLon2Tuple
    test 70 LatLon2Tuple: True
    test 71 LatLon2Tuple: ''
    test 72 Test: Test
    test 73 LatLon2Tuple 'Test': LatLon2Tuple 'Test'
    test 74 namedTuples.LatLon2Tuple 'Test': namedTuples.LatLon2Tuple 'Test'
    test 75 pygeodesy.namedTuples.LatLon2Tuple 'Test': pygeodesy.namedTuples.LatLon2Tuple 'Test'
    test 76 Test: LatLon2Tuple.name = 'X' (was 'Test'): use LatLon2Tuple.rename('X')
    test 77 Test: (0, 0)
    test 78 LatLon2Tuple 'Test': Test
    test 79 LatLon2Tuple 'Test': Test
    test 80 LatLon2Tuple 'Test': (0, 0)
    test 81 LatLon2Tuple 'Test': Test(lat=0, lon=0)  FAILED, KNOWN, expected (0, 0)
    test 82 LatLon2Tuple 'Test': ''

    testing NamedDicts (pygeodesy.named, 24.06.24)
# lazily imported pygeodesy.albers by bases.py line 200
# lazily imported pygeodesy.azimuthal by bases.py line 200
# lazily imported pygeodesy.booleans by bases.py line 200
# lazily imported pygeodesy.clipy by bases.py line 200
# lazily imported pygeodesy.css by bases.py line 200
# lazily imported pygeodesy.ecef by bases.py line 200
# lazily imported pygeodesy.elevations by bases.py line 200
# lazily imported pygeodesy.ellipsoidalBaseDI by bases.py line 200
# lazily imported pygeodesy.ellipsoidalExact by bases.py line 200
# lazily imported pygeodesy.ellipsoidalGeodSolve by bases.py line 200
# lazily imported pygeodesy.ellipsoidalKarney by bases.py line 200
# lazily imported pygeodesy.ellipsoidalNvector by bases.py line 200
# lazily imported pygeodesy.ellipsoidalVincenty by bases.py line 200
# lazily imported pygeodesy.elliptic by bases.py line 200
# lazily imported pygeodesy.epsg by bases.py line 200
# lazily imported pygeodesy.etm by bases.py line 200
# lazily imported pygeodesy.frechet by bases.py line 200
# lazily imported pygeodesy.fstats by bases.py line 200
# lazily imported pygeodesy.gars by bases.py line 200
# lazily imported pygeodesy.geodesici by bases.py line 200
# lazily imported pygeodesy.geodesicw by bases.py line 200
# lazily imported pygeodesy.geodsolve by bases.py line 200
    test 83 Neighbors8Dict: Neighbors8Dict
    test 84 Neighbors8Dict: 8-Dict C{(N, NE, E, SE, S, SW, W, NW)}
    test 85 Neighbors8Dict: 8
# lazily imported pygeodesy.geoids by bases.py line 200
# lazily imported pygeodesy.hausdorff by bases.py line 200
# lazily imported pygeodesy.ktm by bases.py line 200
# lazily imported pygeodesy.lcc by bases.py line 200
# lazily imported pygeodesy.ltp by bases.py line 200
# lazily imported pygeodesy.mgrs by bases.py line 200
# lazily imported pygeodesy.osgr by bases.py line 200
# lazily imported pygeodesy.resections by bases.py line 200
# lazily imported pygeodesy.simplify by bases.py line 200
# lazily imported pygeodesy.sphericalBase by bases.py line 200
# lazily imported pygeodesy.sphericalNvector by bases.py line 200
# lazily imported pygeodesy.sphericalTrigonometry by bases.py line 200
# lazily imported pygeodesy.trf by bases.py line 200
# lazily imported pygeodesy.triaxials by bases.py line 200
# lazily imported pygeodesy.utmups by bases.py line 200
# lazily imported pygeodesy.vector2d by bases.py line 200
# lazily imported pygeodesy.webmercator by bases.py line 200
# lazily imported pygeodesy.wgrs by bases.py line 200
# lazily imported pygeodesy.auxilats by bases.py line 200
# lazily imported pygeodesy.deprecated by bases.py line 200
# lazily imported pygeodesy.geodesicx by bases.py line 200

    testing NamedTuples (pygeodesy.namedTuples, 24.06.08)
    test 86 Albers7Tuple: Albers7Tuple
    test 87 Albers7Tuple: 7-Tuple C{(x, y, lat, lon, gamma, scale, datum)}
    test 88 Albers7Tuple: 7
    test 89 Azimuthal7Tuple: Azimuthal7Tuple
    test 90 Azimuthal7Tuple: 7-Tuple C{(x, y, lat, lon, azimuth, scale, datum)}
    test 91 Azimuthal7Tuple: 7
    test 92 RadiusThetaPhi3Tuple: RadiusThetaPhi3Tuple
    test 93 RadiusThetaPhi3Tuple: 3-Tuple C{(r, theta, phi)}
    test 94 RadiusThetaPhi3Tuple: 3
    test 95 ClipCS4Tuple: ClipCS4Tuple
    test 96 ClipCS4Tuple: 4-Tuple C{(start, end, i, j)}
    test 97 ClipCS4Tuple: 4
    test 98 ClipFHP4Tuple: ClipFHP4Tuple
    test 99 ClipFHP4Tuple: 4-Tuple C{(lat, lon, height, clipid)}
    test 100 ClipFHP4Tuple: 4
    test 101 ClipGH4Tuple: ClipGH4Tuple
    test 102 ClipGH4Tuple: 4-Tuple C{(lat, lon, height, clipid)}
    test 103 ClipGH4Tuple: 4
    test 104 ClipLB6Tuple: ClipLB6Tuple
    test 105 ClipLB6Tuple: 6-Tuple C{(start, end, i, fi, fj, j)}
    test 106 ClipLB6Tuple: 6
    test 107 ClipSH3Tuple: ClipSH3Tuple
    test 108 ClipSH3Tuple: 3-Tuple C{(start, end, original)}
    test 109 ClipSH3Tuple: 3
    test 110 EasNorAziRk4Tuple: EasNorAziRk4Tuple
    test 111 EasNorAziRk4Tuple: 4-Tuple C{(easting, northing, azimuth, reciprocal)}
    test 112 EasNorAziRk4Tuple: 4
    test 113 EasNorAziRkEqu6Tuple: EasNorAziRkEqu6Tuple
    test 114 EasNorAziRkEqu6Tuple: 6-Tuple C{(easting, northing, azimuth, reciprocal, equatorarc, equatorazimuth)}
    test 115 EasNorAziRkEqu6Tuple: 6
    test 116 LatLonAziRk4Tuple: LatLonAziRk4Tuple
    test 117 LatLonAziRk4Tuple: 4-Tuple C{(lat, lon, azimuth, reciprocal)}
    test 118 LatLonAziRk4Tuple: 4
    test 119 Ecef9Tuple: Ecef9Tuple
    test 120 Ecef9Tuple: 9-Tuple C{(x, y, z, lat, lon, height, C, M, datum)}
    test 121 Ecef9Tuple: 9
    test 122 Elevation2Tuple: Elevation2Tuple
    test 123 Elevation2Tuple: 2-Tuple C{(elevation, data_source)}
    test 124 Elevation2Tuple: 2
    test 125 GeoidHeight2Tuple: GeoidHeight2Tuple
    test 126 GeoidHeight2Tuple: 2-Tuple C{(height, model_name)}
    test 127 GeoidHeight2Tuple: 2
    test 128 Circle4Tuple: Circle4Tuple
    test 129 Circle4Tuple: 4-Tuple C{(radius, height, lat, beta)}
    test 130 Circle4Tuple: 4
    test 131 Curvature2Tuple: Curvature2Tuple
    test 132 Curvature2Tuple: 2-Tuple C{(meridional, prime_vertical)}
    test 133 Curvature2Tuple: 2
    test 134 a_f2Tuple: a_f2Tuple
    test 135 a_f2Tuple: 2-Tuple C{(a, f)}
    test 136 a_f2Tuple: 2
    test 137 Elliptic3Tuple: Elliptic3Tuple
    test 138 Elliptic3Tuple: 3-Tuple C{(sn, cn, dn)}
    test 139 Elliptic3Tuple: 3
    test 140 Radical2Tuple: Radical2Tuple
    test 141 Radical2Tuple: 2-Tuple C{(ratio, xline)}
    test 142 Radical2Tuple: 2
    test 143 Frechet6Tuple: Frechet6Tuple
    test 144 Frechet6Tuple: 6-Tuple C{(fd, fi1, fi2, r, n, units)}
    test 145 Frechet6Tuple: 6
    test 146 DivMod2Tuple: DivMod2Tuple
    test 147 DivMod2Tuple: 2-Tuple C{(div, mod)}
    test 148 DivMod2Tuple: 2
    test 149 Fsum2Tuple: Fsum2Tuple
    test 150 Fsum2Tuple: 2-Tuple C{(fsum, residual)}
    test 151 Fsum2Tuple: 2
    test 152 Intersector4Tuple: Intersector4Tuple
    test 153 Intersector4Tuple: 4-Tuple C{(A, B, sAB, c)}
    test 154 Intersector4Tuple: 4
    test 155 GeodSolve12Tuple: GeodSolve12Tuple
    test 156 GeodSolve12Tuple: 12-Tuple C{(lat1, lon1, azi1, lat2, lon2, azi2, s12, a12, m12, M12, M21, S12)}
    test 157 GeodSolve12Tuple: 12
    test 158 Resolutions2Tuple: Resolutions2Tuple
    test 159 Resolutions2Tuple: 2-Tuple C{(res1, res2)}
    test 160 Resolutions2Tuple: 2
    test 161 GeoidHeight5Tuple: GeoidHeight5Tuple
    test 162 GeoidHeight5Tuple: 5-Tuple C{(lat, lon, egm84, egm96, egm2008)}
    test 163 GeoidHeight5Tuple: 5
    test 164 Hausdorff6Tuple: Hausdorff6Tuple
    test 165 Hausdorff6Tuple: 6-Tuple C{(hd, i, j, mn, md, units)}
    test 166 Hausdorff6Tuple: 6
    test 167 Area3Tuple: Area3Tuple
    test 168 Area3Tuple: 3-Tuple C{(number, perimeter, area)}
    test 169 Area3Tuple: 3
    test 170 Direct9Tuple: Direct9Tuple
    test 171 Direct9Tuple: 9-Tuple C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 172 Direct9Tuple: 9
    test 173 Inverse10Tuple: Inverse10Tuple
    test 174 Inverse10Tuple: 10-Tuple C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}
    test 175 Inverse10Tuple: 10
    test 176 Rhumb8Tuple: Rhumb8Tuple
    test 177 Rhumb8Tuple: 8-Tuple C{(lat1, lon1, lat2, lon2, azi12, s12, S12, a12)}
    test 178 Rhumb8Tuple: 8
    test 179 Aer4Tuple: Aer4Tuple
    test 180 Aer4Tuple: 4-Tuple C{(azimuth, elevation, slantrange, ltp)}
    test 181 Aer4Tuple: 4
    test 182 Attitude4Tuple: Attitude4Tuple
    test 183 Attitude4Tuple: 4-Tuple C{(alt, tilt, yaw, roll)}
    test 184 Attitude4Tuple: 4
    test 185 ChLV9Tuple: ChLV9Tuple
    test 186 ChLV9Tuple: 9-Tuple C{(Y, X, h_, lat, lon, height, ltp, ecef, M)}
    test 187 ChLV9Tuple: 9
    test 188 ChLVEN2Tuple: ChLVEN2Tuple
    test 189 ChLVEN2Tuple: 2-Tuple C{(E_LV95, N_LV95)}
    test 190 ChLVEN2Tuple: 2
    test 191 ChLVYX2Tuple: ChLVYX2Tuple
    test 192 ChLVYX2Tuple: 2-Tuple C{(Y, X)}
    test 193 ChLVYX2Tuple: 2
    test 194 ChLVyx2Tuple: ChLVyx2Tuple
    test 195 ChLVyx2Tuple: 2-Tuple C{(y_LV03, x_LV03)}
    test 196 ChLVyx2Tuple: 2
    test 197 Enu4Tuple: Enu4Tuple
    test 198 Enu4Tuple: 4-Tuple C{(east, north, up, ltp)}
    test 199 Enu4Tuple: 4
    test 200 Footprint5Tuple: Footprint5Tuple
    test 201 Footprint5Tuple: 5-Tuple C{(center, upperleft, upperight, loweright, lowerleft)}
    test 202 Footprint5Tuple: 5
    test 203 Local9Tuple: Local9Tuple
    test 204 Local9Tuple: 9-Tuple C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 205 Local9Tuple: 9
    test 206 Ned4Tuple: Ned4Tuple
    test 207 Ned4Tuple: 4-Tuple C{(north, east, down, ltp)}
    test 208 Ned4Tuple: 4
    test 209 Uvw3Tuple: Uvw3Tuple
    test 210 Uvw3Tuple: 3-Tuple C{(u, v, w)}
    test 211 Uvw3Tuple: 3
    test 212 Xyz4Tuple: Xyz4Tuple
    test 213 Xyz4Tuple: 4-Tuple C{(x, y, z, ltp)}
    test 214 Xyz4Tuple: 4
    test 215 Mgrs4Tuple: Mgrs4Tuple
    test 216 Mgrs4Tuple: 4-Tuple C{(zone, EN, easting, northing)}
    test 217 Mgrs4Tuple: 4
    test 218 Mgrs6Tuple: Mgrs6Tuple
    test 219 Mgrs6Tuple: 6-Tuple C{(zone, EN, easting, northing, band, datum)}
    test 220 Mgrs6Tuple: 6
    test 221 Bearing2Tuple: Bearing2Tuple
    test 222 Bearing2Tuple: 2-Tuple C{(initial, final)}
    test 223 Bearing2Tuple: 2
    test 224 Bounds2Tuple: Bounds2Tuple
    test 225 Bounds2Tuple: 2-Tuple C{(latlonSW, latlonNE)}
    test 226 Bounds2Tuple: 2
    test 227 Bounds4Tuple: Bounds4Tuple
    test 228 Bounds4Tuple: 4-Tuple C{(latS, lonW, latN, lonE)}
    test 229 Bounds4Tuple: 4
    test 230 Destination2Tuple: Destination2Tuple
    test 231 Destination2Tuple: 2-Tuple C{(destination, final)}
    test 232 Destination2Tuple: 2
    test 233 Destination3Tuple: Destination3Tuple
    test 234 Destination3Tuple: 3-Tuple C{(lat, lon, final)}
    test 235 Destination3Tuple: 3
    test 236 Distance2Tuple: Distance2Tuple
    test 237 Distance2Tuple: 2-Tuple C{(distance, initial)}
    test 238 Distance2Tuple: 2
    test 239 Distance3Tuple: Distance3Tuple
    test 240 Distance3Tuple: 3-Tuple C{(distance, initial, final)}
    test 241 Distance3Tuple: 3
    test 242 Distance4Tuple: Distance4Tuple
    test 243 Distance4Tuple: 4-Tuple C{(distance2, delta_lat, delta_lon, unroll_lon2)}
    test 244 Distance4Tuple: 4
    test 245 EasNor2Tuple: EasNor2Tuple
    test 246 EasNor2Tuple: 2-Tuple C{(easting, northing)}
    test 247 EasNor2Tuple: 2
    test 248 EasNor3Tuple: EasNor3Tuple
    test 249 EasNor3Tuple: 3-Tuple C{(easting, northing, height)}
    test 250 EasNor3Tuple: 3
    test 251 Forward4Tuple: Forward4Tuple
    test 252 Forward4Tuple: 4-Tuple C{(easting, northing, gamma, scale)}
    test 253 Forward4Tuple: 4
    test 254 Intersection3Tuple: Intersection3Tuple
    test 255 Intersection3Tuple: 3-Tuple C{(point, outside1, outside2)}
    test 256 Intersection3Tuple: 3
    test 257 LatLon2Tuple: LatLon2Tuple
    test 258 LatLon2Tuple: 2-Tuple C{(lat, lon)}
    test 259 LatLon2Tuple: 2
    test 260 LatLon3Tuple: LatLon3Tuple
    test 261 LatLon3Tuple: 3-Tuple C{(lat, lon, height)}
    test 262 LatLon3Tuple: 3
    test 263 LatLon4Tuple: LatLon4Tuple
    test 264 LatLon4Tuple: 4-Tuple C{(lat, lon, height, datum)}
    test 265 LatLon4Tuple: 4
    test 266 LatLonDatum3Tuple: LatLonDatum3Tuple
    test 267 LatLonDatum3Tuple: 3-Tuple C{(lat, lon, datum)}
    test 268 LatLonDatum3Tuple: 3
    test 269 LatLonDatum5Tuple: LatLonDatum5Tuple
    test 270 LatLonDatum5Tuple: 5-Tuple C{(lat, lon, datum, gamma, scale)}
    test 271 LatLonDatum5Tuple: 5
    test 272 LatLonPrec3Tuple: LatLonPrec3Tuple
    test 273 LatLonPrec3Tuple: 3-Tuple C{(lat, lon, precision)}
    test 274 LatLonPrec3Tuple: 3
    test 275 LatLonPrec5Tuple: LatLonPrec5Tuple
    test 276 LatLonPrec5Tuple: 5-Tuple C{(lat, lon, precision, height, radius)}
    test 277 LatLonPrec5Tuple: 5
    test 278 NearestOn2Tuple: NearestOn2Tuple
    test 279 NearestOn2Tuple: 2-Tuple C{(closest, fraction)}
    test 280 NearestOn2Tuple: 2
    test 281 NearestOn3Tuple: NearestOn3Tuple
    test 282 NearestOn3Tuple: 3-Tuple C{(closest, distance, angle)}
    test 283 NearestOn3Tuple: 3
    test 284 NearestOn5Tuple: NearestOn5Tuple
    test 285 NearestOn5Tuple: 5-Tuple C{(lat, lon, distance, angle, height)}
    test 286 NearestOn5Tuple: 5
    test 287 NearestOn6Tuple: NearestOn6Tuple
    test 288 NearestOn6Tuple: 6-Tuple C{(closest, distance, fi, j, start, end)}
    test 289 NearestOn6Tuple: 6
    test 290 NearestOn8Tuple: NearestOn8Tuple
    test 291 NearestOn8Tuple: 8-Tuple C{(closest, distance, fi, j, start, end, initial, final)}
    test 292 NearestOn8Tuple: 8
    test 293 PhiLam2Tuple: PhiLam2Tuple
    test 294 PhiLam2Tuple: 2-Tuple C{(phi, lam)}
    test 295 PhiLam2Tuple: 2
    test 296 PhiLam3Tuple: PhiLam3Tuple
    test 297 PhiLam3Tuple: 3-Tuple C{(phi, lam, height)}
    test 298 PhiLam3Tuple: 3
    test 299 PhiLam4Tuple: PhiLam4Tuple
    test 300 PhiLam4Tuple: 4-Tuple C{(phi, lam, height, datum)}
    test 301 PhiLam4Tuple: 4
    test 302 Point3Tuple: Point3Tuple
    test 303 Point3Tuple: 3-Tuple C{(x, y, ll)}
    test 304 Point3Tuple: 3
    test 305 Points2Tuple: Points2Tuple
    test 306 Points2Tuple: 2-Tuple C{(number, points)}
    test 307 Points2Tuple: 2
    test 308 Reverse4Tuple: Reverse4Tuple
    test 309 Reverse4Tuple: 4-Tuple C{(lat, lon, gamma, scale)}
    test 310 Reverse4Tuple: 4
    test 311 Triangle7Tuple: Triangle7Tuple
    test 312 Triangle7Tuple: 7-Tuple C{(A, a, B, b, C, c, area)}
    test 313 Triangle7Tuple: 7
    test 314 Triangle8Tuple: Triangle8Tuple
    test 315 Triangle8Tuple: 8-Tuple C{(A, a, B, b, C, c, D, E)}
    test 316 Triangle8Tuple: 8
    test 317 Trilaterate5Tuple: Trilaterate5Tuple
    test 318 Trilaterate5Tuple: 5-Tuple C{(min, minPoint, max, maxPoint, n)}
    test 319 Trilaterate5Tuple: 5
    test 320 UtmUps2Tuple: UtmUps2Tuple
    test 321 UtmUps2Tuple: 2-Tuple C{(zone, hemipole)}
    test 322 UtmUps2Tuple: 2
    test 323 UtmUps5Tuple: UtmUps5Tuple
    test 324 UtmUps5Tuple: 5-Tuple C{(zone, hemipole, easting, northing, band)}
    test 325 UtmUps5Tuple: 5
    test 326 UtmUps8Tuple: UtmUps8Tuple
    test 327 UtmUps8Tuple: 8-Tuple C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}
    test 328 UtmUps8Tuple: 8
    test 329 UtmUpsLatLon5Tuple: UtmUpsLatLon5Tuple
    test 330 UtmUpsLatLon5Tuple: 5-Tuple C{(zone, band, hemipole, lat, lon)}
    test 331 UtmUpsLatLon5Tuple: 5
    test 332 Vector2Tuple: Vector2Tuple
    test 333 Vector2Tuple: 2-Tuple C{(x, y)}
    test 334 Vector2Tuple: 2
    test 335 Vector3Tuple: Vector3Tuple
    test 336 Vector3Tuple: 3-Tuple C{(x, y, z)}
    test 337 Vector3Tuple: 3
    test 338 Vector4Tuple: Vector4Tuple
    test 339 Vector4Tuple: 4-Tuple C{(x, y, z, h)}
    test 340 Vector4Tuple: 4
    test 341 Shape2Tuple: Shape2Tuple
    test 342 Shape2Tuple: 2-Tuple C{(nrows, ncols)}
    test 343 Shape2Tuple: 2
    test 344 Collins5Tuple: Collins5Tuple
    test 345 Collins5Tuple: 5-Tuple C{(pointP, pointH, a, b, c)}
    test 346 Collins5Tuple: 5
    test 347 Survey3Tuple: Survey3Tuple
    test 348 Survey3Tuple: 3-Tuple C{(PA, PB, PC)}
    test 349 Survey3Tuple: 3
    test 350 Tienstra7Tuple: Tienstra7Tuple
    test 351 Tienstra7Tuple: 7-Tuple C{(pointP, A, B, C, a, b, c)}
    test 352 Tienstra7Tuple: 7
    test 353 TriAngle5Tuple: TriAngle5Tuple
    test 354 TriAngle5Tuple: 5-Tuple C{(radA, radB, radC, rIn, area)}
    test 355 TriAngle5Tuple: 5
    test 356 TriSide2Tuple: TriSide2Tuple
    test 357 TriSide2Tuple: 2-Tuple C{(a, radA)}
    test 358 TriSide2Tuple: 2
    test 359 TriSide4Tuple: TriSide4Tuple
    test 360 TriSide4Tuple: 4-Tuple C{(a, b, radC, d)}
    test 361 TriSide4Tuple: 4
    test 362 TRFXform7Tuple: TRFXform7Tuple
    test 363 TRFXform7Tuple: 7-Tuple C{(tx, ty, tz, s, sx, sy, sz)}
    test 364 TRFXform7Tuple: 7
    test 365 BetaOmega2Tuple: BetaOmega2Tuple
    test 366 BetaOmega2Tuple: 2-Tuple C{(beta, omega)}
    test 367 BetaOmega2Tuple: 2
    test 368 BetaOmega3Tuple: BetaOmega3Tuple
    test 369 BetaOmega3Tuple: 3-Tuple C{(beta, omega, height)}
    test 370 BetaOmega3Tuple: 3
    test 371 Jacobi2Tuple: Jacobi2Tuple
    test 372 Jacobi2Tuple: 2-Tuple C{(x, y)}
    test 373 Jacobi2Tuple: 2
    test 374 Circin6Tuple: Circin6Tuple
    test 375 Circin6Tuple: 6-Tuple C{(radius, center, deltas, cA, cB, cC)}
    test 376 Circin6Tuple: 6
    test 377 Circum3Tuple: Circum3Tuple
    test 378 Circum3Tuple: 3-Tuple C{(radius, center, deltas)}
    test 379 Circum3Tuple: 3
    test 380 Circum4Tuple: Circum4Tuple
    test 381 Circum4Tuple: 4-Tuple C{(radius, center, rank, residuals)}
    test 382 Circum4Tuple: 4
    test 383 Meeus2Tuple: Meeus2Tuple
    test 384 Meeus2Tuple: 2-Tuple C{(radius, Type)}
    test 385 Meeus2Tuple: 2
    test 386 Radii11Tuple: Radii11Tuple
    test 387 Radii11Tuple: 11-Tuple C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 388 Radii11Tuple: 11
    test 389 Soddy4Tuple: Soddy4Tuple
    test 390 Soddy4Tuple: 4-Tuple C{(radius, center, deltas, outer)}
    test 391 Soddy4Tuple: 4
    test 392 EasNorRadius3Tuple: EasNorRadius3Tuple
    test 393 EasNorRadius3Tuple: 3-Tuple C{(easting, northing, radius)}
    test 394 EasNorRadius3Tuple: 3
    test 395 ClipCS3Tuple: DEPRECATED, see I{DEPRECATED} function L{pygeodesy.deprecated.clipCS3}.
    test 396 EasNorExact4Tuple: DEPRECATED, use class L{Forward4Tuple}, item C{gamma} for C{convergence}.
    test 397 Transform7Tuple: DEPRECATED on 2024.02.02, use class L{TRFXform7Tuple}, I{without} keyword arguments.
    test 398 LatLonExact4Tuple: DEPRECATED, use class L{Reverse4Tuple}, item C{gamma} for C{convergence}.
    test 399 NearestOn4Tuple: DEPRECATED on 2023.10.10, see methods L{RhumbLine.nearestOn4} and L{RhumbLineAux.nearestOn4}.
    test 400 Ned3Tuple: DEPRECATED, use class L{Ned4Tuple}, ignoring item C{ltp}.
    test 401 Rhumb7Tuple: DEPRECATED, use class L{Rhumb8Tuple}, ignoring item C{a12}.
    test 402 RhumbOrder2Tuple: DEPRECATED, see deprecated method L{Rhumb.orders}.
    test 403 Transform7Tuple: DEPRECATED on 2024.02.02, use class L{TRFXform7Tuple}, I{without} keyword arguments.
    test 404 TriAngle4Tuple: DEPRECATED on 2023.09.14, use class L{TriAngle5Tuple}, ignoring item C{area}.
    test 405 UtmUps4Tuple: DEPRECATED and OBSOLETE, expect a L{UtmUps5Tuple} from method C{pygeodesy.Mgrs.toUtm(utm=None)}. 4-Tuple C{(zone, hemipole, easting, northing)} with as C{zone} B{C{str}} and no C{band}.
    test 406 RhumbSolve7Tuple: RhumbSolve7Tuple
    test 407 RhumbSolve7Tuple: 7-Tuple C{(lat1, lon1, lat2, lon2, azi12, s12, S12)}
    test 408 RhumbSolve7Tuple: 7

    testing __init__.py (pygeodesy.named, 24.06.24)

    testing __main__.py (pygeodesy.named, 24.06.24)

    testing albers.py (pygeodesy.named, 24.06.24)
    test 409 albers.py:237: L{Albers7Tuple}C{(x, y, lat, lon, gamma, scale, datum)}
    test 410 albers.py:358: L{Albers7Tuple}C{(x, y, lat, lon, gamma, scale, datum)}

    testing azimuthal.py (pygeodesy.named, 24.06.24)
    test 411 azimuthal.py:184: L{LatLon2Tuple}C{(lat, lon)}
    test 412 azimuthal.py:359: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 413 azimuthal.py:393: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 414 azimuthal.py:486: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 415 azimuthal.py:513: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 416 azimuthal.py:658: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 417 azimuthal.py:684: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 418 azimuthal.py:754: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 419 azimuthal.py:795: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 420 azimuthal.py:961: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 421 azimuthal.py:988: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 422 azimuthal.py:1018: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 423 azimuthal.py:1042: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 424 azimuthal.py:1074: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 425 azimuthal.py:1115: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}

    testing basics.py (pygeodesy.named, 24.06.24)

    testing booleans.py (pygeodesy.named, 24.06.24)

    testing cartesianBase.py (pygeodesy.named, 24.06.24)
    test 426 cartesianBase.py:140: L{Collins5Tuple}C{(pointP, pointH, a, b, c)}
    test 427 cartesianBase.py:194: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 428 cartesianBase.py:300: L{Vector3Tuple}C{(x, y, z)}
    test 429 cartesianBase.py:354: L{Vector4Tuple}C{(x, y, z, h)}
    test 430 cartesianBase.py:399: L{LatLon2Tuple}C{(lat, lon)}
    test 431 cartesianBase.py:405: L{LatLon3Tuple}C{(lat, lon, height)}
    test 432 cartesianBase.py:411: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 433 cartesianBase.py:475: L{PhiLam2Tuple}C{(phi, lam)}
    test 434 cartesianBase.py:481: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 435 cartesianBase.py:487: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 436 cartesianBase.py:607: L{Tienstra7Tuple}C{(pointP, A, B, C, a, b, c)}
    test 437 cartesianBase.py:627: L{PhiLam2Tuple}C{(phi, lam)}
    test 438 cartesianBase.py:635: L{LatLon2Tuple}C{(lat, lon)}
    test 439 cartesianBase.py:643: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 440 cartesianBase.py:700: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 441 cartesianBase.py:720: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 442 cartesianBase.py:749: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 443 cartesianBase.py:776: L{Vector4Tuple}C{(x, y, z, h)}
    test 444 cartesianBase.py:802: L{RadiusThetaPhi3Tuple}C{(r, theta, phi)}
    test 445 cartesianBase.py:852: L{Vector3Tuple}C{(x, y, z)}
    test 446 cartesianBase.py:878: L{Vector3Tuple}C{(x, y, z)}
    test 447 cartesianBase.py:892: L{RadiusThetaPhi3Tuple}C{(r, theta, phi)}
    test 448 cartesianBase.py:902: L{RadiusThetaPhi3Tuple}C{(r, theta, phi)}
    test 449 cartesianBase.py:949: L{Vector3Tuple}C{(x, y, z)}
    test 450 cartesianBase.py:1002: L{RadiusThetaPhi3Tuple}C{(r, theta, phi)}
    test 451 cartesianBase.py:1020: L{RadiusThetaPhi3Tuple}C{(r, theta, phi)}

    testing clipy.py (pygeodesy.named, 24.06.24)
    test 452 clipy.py:196: L{ClipCS4Tuple}C{(start, end, i, j)}
    test 453 clipy.py:276: L{ClipFHP4Tuple}C{(lat, lon, height, clipid)}
    test 454 clipy.py:321: L{ClipGH4Tuple}C{(lat, lon, height, clipid)}
    test 455 clipy.py:387: L{ClipLB6Tuple}C{(start, end, i, fi, fj, j)}
    test 456 clipy.py:665: L{ClipSH3Tuple}C{(start, end, original)}

    testing constants.py (pygeodesy.named, 24.06.24)

    testing css.py (pygeodesy.named, 24.06.24)
    test 457 css.py:137: L{EasNor2Tuple}C{(easting, northing)}
    test 458 css.py:156: L{EasNorAziRk4Tuple}C{(easting, northing, azimuth, reciprocal)}
    test 459 css.py:177: L{EasNorAziRkEqu6Tuple}C{(easting, northing, azimuth, reciprocal, equatorarc, equatorazimuth)}
    test 460 css.py:262: L{LatLon2Tuple}C{(lat, lon)}
    test 461 css.py:328: L{LatLon2Tuple}C{(lat, lon)}
    test 462 css.py:357: L{LatLonAziRk4Tuple}C{(lat, lon, azimuth, reciprocal)}
    test 463 css.py:523: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 464 css.py:617: L{EasNor3Tuple}C{(easting, northing, height)}

    testing datums.py (pygeodesy.named, 24.06.24)
    test 465 datums.py:275: L{Vector3Tuple}C{(x, y, z)}

    testing dms.py (pygeodesy.named, 24.06.24)
    test 466 dms.py:773: L{LatLon2Tuple}C{(lat, lon)}
    test 467 dms.py:825: L{LatLon3Tuple}C{(lat, lon, height)}

    testing ecef.py (pygeodesy.named, 24.06.24)
    test 468 ecef.py:226: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 469 ecef.py:252: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 470 ecef.py:341: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 471 ecef.py:415: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 472 ecef.py:486: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 473 ecef.py:628: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 474 ecef.py:729: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 475 ecef.py:817: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 476 ecef.py:1069: L{LatLon2Tuple}C{(lat, lon)}
    test 477 ecef.py:1075: L{LatLon3Tuple}C{(lat, lon, height)}
    test 478 ecef.py:1081: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 479 ecef.py:1087: L{LatLon2Tuple}C{(lat, lon)}
    test 480 ecef.py:1110: L{PhiLam2Tuple}C{(phi, lam)}
    test 481 ecef.py:1116: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 482 ecef.py:1122: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 483 ecef.py:1128: L{PhiLam2Tuple}C{(phi, lam)}
    test 484 ecef.py:1146: L{Vector4Tuple}C{(x, y, z, h)}
    test 485 ecef.py:1188: L{LatLon3Tuple}C{(lat, lon, height)}
    test 486 ecef.py:1189: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 487 ecef.py:1220: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 488 ecef.py:1236: L{Vector3Tuple}C{(x, y, z)}
    test 489 ecef.py:1250: L{Vector3Tuple}C{(x, y, z)}
    test 490 ecef.py:1256: L{Vector4Tuple}C{(x, y, z, h)}

    testing elevations.py (pygeodesy.named, 24.06.24)
    test 491 elevations.py:150: L{Elevation2Tuple}C{(elevation, data_source)}
    test 492 elevations.py:206: L{GeoidHeight2Tuple}C{(height, model_name)}

    testing ellipsoidalBase.py (pygeodesy.named, 24.06.24)
    test 493 ellipsoidalBase.py:321: L{Distance2Tuple}C{(distance, initial)}
    test 494 ellipsoidalBase.py:356: L{Elevation2Tuple}C{(elevation, data_source)}
    test 495 ellipsoidalBase.py:469: L{GeoidHeight2Tuple}C{(height, model_name)}
    test 496 ellipsoidalBase.py:511: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 497 ellipsoidalBase.py:998: L{Vector3Tuple}C{(x, y, z)}
    test 498 ellipsoidalBase.py:1045: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}

    testing ellipsoidalBaseDI.py (pygeodesy.named, 24.06.24)
    test 499 ellipsoidalBaseDI.py:59: L{Bearing2Tuple}C{(initial, final)}
    test 500 ellipsoidalBaseDI.py:105: L{Destination2Tuple}C{(destination, final)}
    test 501 ellipsoidalBaseDI.py:113: L{Destination2Tuple}C{(destination, final)}
    test 502 ellipsoidalBaseDI.py:114: L{Destination3Tuple}C{(lat, lon, final)}
    test 503 ellipsoidalBaseDI.py:165: L{Distance3Tuple}C{(distance, initial, final)}
    test 504 ellipsoidalBaseDI.py:324: L{Distance3Tuple}C{(distance, initial, final)}
    test 505 ellipsoidalBaseDI.py:345: L{NearestOn8Tuple}C{(closest, distance, fi, j, start, end, initial, final)}

    testing ellipsoidalExact.py (pygeodesy.named, 24.06.24)
    test 506 ellipsoidalExact.py:43: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 507 ellipsoidalExact.py:81: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 508 ellipsoidalExact.py:147: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 509 ellipsoidalExact.py:148: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 510 ellipsoidalExact.py:198: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 511 ellipsoidalExact.py:274: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalGeodSolve.py (pygeodesy.named, 24.06.24)
    test 512 ellipsoidalGeodSolve.py:43: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 513 ellipsoidalGeodSolve.py:81: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 514 ellipsoidalGeodSolve.py:137: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 515 ellipsoidalGeodSolve.py:138: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 516 ellipsoidalGeodSolve.py:189: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 517 ellipsoidalGeodSolve.py:266: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalKarney.py (pygeodesy.named, 24.06.24)
    test 518 ellipsoidalKarney.py:60: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 519 ellipsoidalKarney.py:104: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 520 ellipsoidalKarney.py:168: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 521 ellipsoidalKarney.py:169: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 522 ellipsoidalKarney.py:220: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 523 ellipsoidalKarney.py:301: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalNvector.py (pygeodesy.named, 24.06.24)
    test 524 ellipsoidalNvector.py:99: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 525 ellipsoidalNvector.py:116: L{Vector4Tuple}C{(x, y, z, h)}
    test 526 ellipsoidalNvector.py:395: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 527 ellipsoidalNvector.py:412: L{Vector4Tuple}C{(x, y, z, h)}
    test 528 ellipsoidalNvector.py:480: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 529 ellipsoidalNvector.py:498: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 530 ellipsoidalNvector.py:539: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 531 ellipsoidalNvector.py:577: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 532 ellipsoidalNvector.py:633: L{Ned3Tuple}C{(north, east, down)}  FAILED, KNOWN, expected DEPRECATED

    testing ellipsoidalVincenty.py (pygeodesy.named, 24.06.24)
    test 533 ellipsoidalVincenty.py:106: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 534 ellipsoidalVincenty.py:186: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 535 ellipsoidalVincenty.py:430: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 536 ellipsoidalVincenty.py:431: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 537 ellipsoidalVincenty.py:482: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 538 ellipsoidalVincenty.py:532: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoids.py (pygeodesy.named, 24.06.24)
    test 539 ellipsoids.py:141: L{a_f2Tuple}C{(a, f)}
    test 540 ellipsoids.py:663: L{Circle4Tuple}C{(radius, height, lat, beta)}
    test 541 ellipsoids.py:725: L{Distance2Tuple}C{(distance, initial)}
    test 542 ellipsoids.py:1091: L{Vector4Tuple}C{(x, y, z, h)}
    test 543 ellipsoids.py:1127: L{Vector4Tuple}C{(x, y, z, h)}
    test 544 ellipsoids.py:1616: L{Curvature2Tuple}C{(meridional, prime_vertical)}
    test 545 ellipsoids.py:1635: L{Curvature2Tuple}C{(meridional, prime_vertical)}
    test 546 ellipsoids.py:1692: L{Curvature2Tuple}C{(meridional, prime_vertical)}

    testing elliptic.py (pygeodesy.named, 24.06.24)
    test 547 elliptic.py:731: L{Elliptic3Tuple}C{(sn, cn, dn)}

    testing epsg.py (pygeodesy.named, 24.06.24)
    test 548 epsg.py:148: L{UtmUps2Tuple}C{(zone, hemipole)}

    testing errors.py (pygeodesy.named, 24.06.24)

    testing etm.py (pygeodesy.named, 24.06.24)
    test 549 etm.py:184: L{LatLonDatum5Tuple}C{(lat, lon, datum, gamma, scale)}
    test 550 etm.py:443: L{Forward4Tuple}C{(easting, northing, gamma, scale)}
    test 551 etm.py:680: L{Reverse4Tuple}C{(lat, lon, gamma, scale)}
    test 552 etm.py:1041: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 553 etm.py:1072: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}

    testing fmath.py (pygeodesy.named, 24.06.24)

    testing formy.py (pygeodesy.named, 24.06.24)
    test 554 formy.py:72: L{LatLon2Tuple}C{(lat, lon)}
    test 555 formy.py:88: L{PhiLam2Tuple}C{(phi, lam)}
    test 556 formy.py:475: L{Distance4Tuple}C{(distance2, delta_lat, delta_lon, unroll_lon2)}
    test 557 formy.py:1205: L{LatLon2Tuple}C{(lat, lon)}
    test 558 formy.py:1273: L{LatLon2Tuple}C{(lat, lon)}
    test 559 formy.py:1404: L{Vector3Tuple}C{(x, y, z)}
    test 560 formy.py:1434: L{LatLon2Tuple}C{(lat, lon)}
    test 561 formy.py:1450: L{PhiLam2Tuple}C{(phi, lam)}
    test 562 formy.py:1475: L{LatLon2Tuple}C{(lat, lon)}
    test 563 formy.py:1490: L{PhiLam2Tuple}C{(phi, lam)}
    test 564 formy.py:1545: L{Vector3Tuple}C{(x, y, z)}
    test 565 formy.py:1590: L{Radical2Tuple}C{(ratio, xline)}

    testing frechet.py (pygeodesy.named, 24.06.24)
    test 566 frechet.py:195: L{Frechet6Tuple}C{(fd, fi1, fi2, r, n, units)}
    test 567 frechet.py:357: L{PhiLam2Tuple}C{(phi, lam)}
    test 568 frechet.py:798: L{Frechet6Tuple}C{(fd, fi1, fi2, r, n, units)}

    testing fstats.py (pygeodesy.named, 24.06.24)

    testing fsums.py (pygeodesy.named, 24.06.24)
    test 569 fsums.py:1166: L{Fsum2Tuple}C{(fsum, residual)}
    test 570 fsums.py:1454: L{Fsum2Tuple}C{(fsum, residual)}

    testing gars.py (pygeodesy.named, 24.06.24)
    test 571 gars.py:206: L{LatLonPrec3Tuple}C{(lat, lon, precision)}

    testing geodesici.py (pygeodesy.named, 24.06.24)
    test 572 geodesici.py:291: L{Intersector4Tuple}C{(A, B, sAB, c)}
    test 573 geodesici.py:357: L{Intersector4Tuple}C{(A, B, sAB, c)}
    test 574 geodesici.py:513: L{Intersector4Tuple}C{(A, B, sAB, c)}
    test 575 geodesici.py:531: L{Intersector4Tuple}C{(A, B, sAB, c)}

    testing geodesicw.py (pygeodesy.named, 24.06.24)

    testing geodsolve.py (pygeodesy.named, 24.06.24)
    test 576 geodsolve.py:143: L{Destination3Tuple}C{(lat, lon, final)}
    test 577 geodsolve.py:191: L{Distance3Tuple}C{(distance, initial, final)}

    testing geohash.py (pygeodesy.named, 24.06.24)
    test 578 geohash.py:365: L{Neighbors8Dict}C{(N, NE, E, SE, S, SW, W, NW)}
    test 579 geohash.py:768: L{Neighbors8Dict}C{(N, NE, E, SE, S, SW, W, NW)}
    test 580 geohash.py:241: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 581 geohash.py:242: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 582 geohash.py:358: L{LatLon2Tuple}C{(lat, lon)}
    test 583 geohash.py:375: L{PhiLam2Tuple}C{(phi, lam)}
    test 584 geohash.py:388: L{LatLon2Tuple}C{(lat, lon)}
    test 585 geohash.py:403: L{LatLon2Tuple}C{(lat, lon)}
    test 586 geohash.py:504: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 587 geohash.py:505: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 588 geohash.py:582: L{LatLon2Tuple}C{(lat, lon)}
    test 589 geohash.py:601: L{LatLon2Tuple}C{(lat, lon)}
    test 590 geohash.py:819: L{Resolutions2Tuple}C{(res1, res2)}
    test 591 geohash.py:846: L{LatLon2Tuple}C{(lat, lon)}

    testing geoids.py (pygeodesy.named, 24.06.24)
    test 592 geoids.py:326: L{LatLon3Tuple}C{(lat, lon, height)}
    test 593 geoids.py:439: L{LatLon3Tuple}C{(lat, lon, height)}
    test 594 geoids.py:514: L{LatLon3Tuple}C{(lat, lon, height)}
    test 595 geoids.py:532: L{LatLon3Tuple}C{(lat, lon, height)}
    test 596 geoids.py:553: L{LatLon3Tuple}C{(lat, lon, height)}
    test 597 geoids.py:699: L{LatLon3Tuple}C{(lat, lon, height)}
    test 598 geoids.py:717: L{LatLon3Tuple}C{(lat, lon, height)}
    test 599 geoids.py:1165: L{LatLon3Tuple}C{(lat, lon, height)}
    test 600 geoids.py:1218: L{LatLon3Tuple}C{(lat, lon, height)}
    test 601 geoids.py:1687: L{GeoidHeight5Tuple}C{(lat, lon, egm84, egm96, egm2008)}

    testing hausdorff.py (pygeodesy.named, 24.06.24)
    test 602 hausdorff.py:164: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}
    test 603 hausdorff.py:242: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}
    test 604 hausdorff.py:307: L{PhiLam2Tuple}C{(phi, lam)}
    test 605 hausdorff.py:787: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}

    testing heights.py (pygeodesy.named, 24.06.24)

    testing internals.py (pygeodesy.named, 24.06.24)

    testing interns.py (pygeodesy.named, 24.06.24)

    testing iters.py (pygeodesy.named, 24.06.24)
    test 606 iters.py:375: L{Point3Tuple}C{(x, y, ll)}
    test 607 iters.py:495: L{Points2Tuple}C{(number, points)}

    testing karney.py (pygeodesy.named, 24.06.24)
    test 608 karney.py:401: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 609 karney.py:413: L{GeodSolve12Tuple}C{(lat1, lon1, azi1, lat2, lon2, azi2, s12, a12, m12, M12, M21, S12)}
    test 610 karney.py:424: L{Inverse10Tuple}C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}
    test 611 karney.py:442: L{Rhumb8Tuple}C{(lat1, lon1, lat2, lon2, azi12, s12, S12, a12)}
    test 612 karney.py:452: L{RhumbSolve7Tuple}C{(lat1, lon1, lat2, lon2, azi12, s12, S12)}
    test 613 karney.py:550: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 614 karney.py:567: L{Inverse10Tuple}C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}

    testing ktm.py (pygeodesy.named, 24.06.24)
    test 615 ktm.py:230: L{Forward4Tuple}C{(easting, northing, gamma, scale)}
    test 616 ktm.py:361: L{Reverse4Tuple}C{(lat, lon, gamma, scale)}

    testing latlonBase.py (pygeodesy.named, 24.06.24)
    test 617 latlonBase.py:155: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 618 latlonBase.py:209: L{Circin6Tuple}C{(radius, center, deltas, cA, cB, cC)}
    test 619 latlonBase.py:226: L{LatLon3Tuple}C{(lat, lon, height)}
    test 620 latlonBase.py:257: L{Circum3Tuple}C{(radius, center, deltas)}
    test 621 latlonBase.py:260: L{LatLon3Tuple}C{(lat, lon, height)}
    test 622 latlonBase.py:277: L{LatLon3Tuple}C{(lat, lon, height)}
    test 623 latlonBase.py:299: L{Circum4Tuple}C{(radius, center, rank, residuals)}
    test 624 latlonBase.py:451: L{LatLon3Tuple}C{(lat, lon, height)}
    test 625 latlonBase.py:452: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 626 latlonBase.py:715: L{Vector4Tuple}C{(x, y, z, h)}
    test 627 latlonBase.py:877: L{LatLon2Tuple}C{(lat, lon)}
    test 628 latlonBase.py:916: L{LatLon2Tuple}C{(lat, lon)}
    test 629 latlonBase.py:934: L{LatLon3Tuple}C{(lat, lon, height)}
    test 630 latlonBase.py:986: L{NearestOn6Tuple}C{(closest, distance, fi, j, start, end)}
    test 631 latlonBase.py:1063: L{PhiLam2Tuple}C{(phi, lam)}
    test 632 latlonBase.py:1072: L{PhiLam2Tuple}C{(phi, lam)}
    test 633 latlonBase.py:1083: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 634 latlonBase.py:1100: L{Points2Tuple}C{(number, points)}
    test 635 latlonBase.py:1134: L{Radii11Tuple}C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 636 latlonBase.py:1403: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 637 latlonBase.py:1443: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 638 latlonBase.py:1467: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 639 latlonBase.py:1515: L{Vector4Tuple}C{(x, y, z, h)}
    test 640 latlonBase.py:1571: L{Vector3Tuple}C{(x, y, z)}
    test 641 latlonBase.py:1650: L{Vector3Tuple}C{(x, y, z)}
    test 642 latlonBase.py:1656: L{Vector4Tuple}C{(x, y, z, h)}

    testing lazily.py (pygeodesy.named, 24.06.24)

    testing lcc.py (pygeodesy.named, 24.06.24)
    test 643 lcc.py:166: L{LatLon2Tuple}C{(lat, lon)}
    test 644 lcc.py:220: L{PhiLam2Tuple}C{(phi, lam)}
    test 645 lcc.py:481: L{LatLon3Tuple}C{(lat, lon, height)}
    test 646 lcc.py:487: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 647 lcc.py:506: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 648 lcc.py:512: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 649 lcc.py:523: L{LatLonDatum3Tuple}C{(lat, lon, datum)}
    test 650 lcc.py:550: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 651 lcc.py:628: L{EasNor3Tuple}C{(easting, northing, height)}

    testing ltp.py (pygeodesy.named, 24.06.24)
    test 652 ltp.py:158: L{Vector3Tuple}C{(x, y, z)}
    test 653 ltp.py:284: L{Footprint5Tuple}C{(center, upperleft, upperight, loweright, lowerleft)}
    test 654 ltp.py:477: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 655 ltp.py:517: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 656 ltp.py:549: L{LatLon3Tuple}C{(lat, lon, height)}
    test 657 ltp.py:561: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 658 ltp.py:637: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 659 ltp.py:746: L{ChLV9Tuple}C{(Y, X, h_, lat, lon, height, ltp, ecef, M)}
    test 660 ltp.py:768: L{ChLV9Tuple}C{(Y, X, h_, lat, lon, height, ltp, ecef, M)}
    test 661 ltp.py:883: L{ChLVEN2Tuple}C{(E_LV95, N_LV95)}
    test 662 ltp.py:884: L{ChLVyx2Tuple}C{(y_LV03, x_LV03)}
    test 663 ltp.py:885: L{ChLVYX2Tuple}C{(Y, X)}
    test 664 ltp.py:936: L{ChLVYX2Tuple}C{(Y, X)}
    test 665 ltp.py:1107: L{Vector3Tuple}C{(x, y, z)}

    testing ltpTuples.py (pygeodesy.named, 24.06.24)
    test 666 ltpTuples.py:134: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 667 ltpTuples.py:149: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 668 ltpTuples.py:164: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 669 ltpTuples.py:180: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 670 ltpTuples.py:188: L{Vector3Tuple}C{(x, y, z)}
    test 671 ltpTuples.py:816: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 672 ltpTuples.py:834: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 673 ltpTuples.py:858: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 674 ltpTuples.py:876: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 675 ltpTuples.py:896: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 676 ltpTuples.py:915: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 677 ltpTuples.py:931: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 678 ltpTuples.py:951: L{Vector3Tuple}C{(x, y, z)}
    test 679 ltpTuples.py:1044: L{Uvw3Tuple}C{(u, v, w)}
    test 680 ltpTuples.py:1138: L{LatLon2Tuple}C{(lat, lon)}
    test 681 ltpTuples.py:1144: L{LatLon3Tuple}C{(lat, lon, height)}
    test 682 ltpTuples.py:1162: L{PhiLam2Tuple}C{(phi, lam)}
    test 683 ltpTuples.py:1168: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 684 ltpTuples.py:1187: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 685 ltpTuples.py:1203: L{Vector4Tuple}C{(x, y, z, h)}
    test 686 ltpTuples.py:1218: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 687 ltpTuples.py:1234: L{LatLon3Tuple}C{(lat, lon, height)}
    test 688 ltpTuples.py:1235: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 689 ltpTuples.py:1251: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 690 ltpTuples.py:1266: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 691 ltpTuples.py:1280: L{Vector3Tuple}C{(x, y, z)}
    test 692 ltpTuples.py:1326: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 693 ltpTuples.py:1351: L{Uvw3Tuple}C{(u, v, w)}
    test 694 ltpTuples.py:1573: L{LatLon3Tuple}C{(lat, lon, height)}
    test 695 ltpTuples.py:1574: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing mgrs.py (pygeodesy.named, 24.06.24)
    test 696 mgrs.py:206: L{EasNor2Tuple}C{(easting, northing)}
    test 697 mgrs.py:291: L{LatLonDatum5Tuple}C{(lat, lon, datum, gamma, scale)}
    test 698 mgrs.py:352: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 699 mgrs.py:370: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 700 mgrs.py:390: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 701 mgrs.py:464: L{Mgrs6Tuple}C{(zone, EN, easting, northing, band, datum)}
    test 702 mgrs.py:548: L{Mgrs4Tuple}C{(zone, EN, easting, northing)}
    test 703 mgrs.py:604: L{Mgrs6Tuple}C{(zone, EN, easting, northing, band, datum)}

    testing named.py (pygeodesy.named, 24.06.24)

    testing namedTuples.py (pygeodesy.named, 24.06.24)
    test 704 namedTuples.py:209: L{LatLon3Tuple}C{(lat, lon, height)}
    test 705 namedTuples.py:223: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 706 namedTuples.py:246: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 707 namedTuples.py:313: L{LatLonPrec5Tuple}C{(lat, lon, precision, height, radius)}
    test 708 namedTuples.py:372: L{LatLon3Tuple}C{(lat, lon, height)}
    test 709 namedTuples.py:440: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 710 namedTuples.py:452: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 711 namedTuples.py:480: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 712 namedTuples.py:646: L{Vector3Tuple}C{(x, y, z)}
    test 713 namedTuples.py:667: L{Vector4Tuple}C{(x, y, z, h)}
    test 714 namedTuples.py:690: L{Vector3Tuple}C{(x, y, z)}

    testing nvectorBase.py (pygeodesy.named, 24.06.24)
    test 715 nvectorBase.py:161: L{LatLon2Tuple}C{(lat, lon)}
    test 716 nvectorBase.py:167: L{LatLon3Tuple}C{(lat, lon, height)}
    test 717 nvectorBase.py:173: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 718 nvectorBase.py:191: L{PhiLam2Tuple}C{(phi, lam)}
    test 719 nvectorBase.py:197: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 720 nvectorBase.py:203: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 721 nvectorBase.py:217: L{PhiLam2Tuple}C{(phi, lam)}
    test 722 nvectorBase.py:228: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 723 nvectorBase.py:246: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 724 nvectorBase.py:279: L{LatLon2Tuple}C{(lat, lon)}
    test 725 nvectorBase.py:290: L{LatLon3Tuple}C{(lat, lon, height)}
    test 726 nvectorBase.py:309: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 727 nvectorBase.py:372: L{Vector4Tuple}C{(x, y, z, h)}
    test 728 nvectorBase.py:447: L{Vector4Tuple}C{(x, y, z, h)}
    test 729 nvectorBase.py:517: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}
    test 730 nvectorBase.py:573: L{Vector4Tuple}C{(x, y, z, h)}

    testing osgr.py (pygeodesy.named, 24.06.24)
    test 731 osgr.py:300: L{LatLonDatum3Tuple}C{(lat, lon, datum)}
    test 732 osgr.py:524: L{EasNor2Tuple}C{(easting, northing)}
    test 733 osgr.py:602: L{EasNor2Tuple}C{(easting, northing)}

    testing points.py (pygeodesy.named, 24.06.24)
    test 734 points.py:559: L{Shape2Tuple}C{(nrows, ncols)}
    test 735 points.py:761: L{Point3Tuple}C{(x, y, ll)}
    test 736 points.py:995: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 737 points.py:997: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 738 points.py:1037: L{LatLon2Tuple}C{(lat, lon)}
    test 739 points.py:1117: L{LatLon2Tuple}C{(lat, lon)}
    test 740 points.py:1484: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 741 points.py:1486: L{NearestOn5Tuple}C{(lat, lon, distance, angle, height)}

    testing props.py (pygeodesy.named, 24.06.24)

    testing resections.py (pygeodesy.named, 24.06.24)
    test 742 resections.py:232: L{Collins5Tuple}C{(pointP, pointH, a, b, c)}
    test 743 resections.py:543: L{Survey3Tuple}C{(PA, PB, PC)}
    test 744 resections.py:609: L{Tienstra7Tuple}C{(pointP, A, B, C, a, b, c)}
    test 745 resections.py:731: L{TriAngle5Tuple}C{(radA, radB, radC, rIn, area)}
    test 746 resections.py:865: L{TriSide2Tuple}C{(a, radA)}
    test 747 resections.py:908: L{TriSide4Tuple}C{(a, b, radC, d)}
    test 748 resections.py:951: L{Survey3Tuple}C{(PA, PB, PC)}

    testing simplify.py (pygeodesy.named, 24.06.24)

    testing solveBase.py (pygeodesy.named, 24.06.24)

    testing sphericalBase.py (pygeodesy.named, 24.06.24)
    test 749 sphericalBase.py:152: L{Bearing2Tuple}C{(initial, final)}
    test 750 sphericalBase.py:582: L{Vector4Tuple}C{(x, y, z, h)}

    testing sphericalNvector.py (pygeodesy.named, 24.06.24)
    test 751 sphericalNvector.py:82: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 752 sphericalNvector.py:98: L{Vector4Tuple}C{(x, y, z, h)}
    test 753 sphericalNvector.py:659: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 754 sphericalNvector.py:695: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 755 sphericalNvector.py:710: L{Vector4Tuple}C{(x, y, z, h)}
    test 756 sphericalNvector.py:749: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 757 sphericalNvector.py:766: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 758 sphericalNvector.py:911: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 759 sphericalNvector.py:949: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 760 sphericalNvector.py:1083: L{NearestOn3Tuple}C{(closest, distance, angle)}

    testing sphericalTrigonometry.py (pygeodesy.named, 24.06.24)
    test 761 sphericalTrigonometry.py:77: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 762 sphericalTrigonometry.py:618: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 763 sphericalTrigonometry.py:649: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 764 sphericalTrigonometry.py:667: L{Triangle7Tuple}C{(A, a, B, b, C, c, area)}
    test 765 sphericalTrigonometry.py:668: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}
    test 766 sphericalTrigonometry.py:718: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}
    test 767 sphericalTrigonometry.py:1008: L{LatLon3Tuple}C{(lat, lon, height)}
    test 768 sphericalTrigonometry.py:1057: L{LatLon3Tuple}C{(lat, lon, height)}
    test 769 sphericalTrigonometry.py:1175: L{LatLon3Tuple}C{(lat, lon, height)}
    test 770 sphericalTrigonometry.py:1200: L{LatLon2Tuple}C{(lat, lon)}
    test 771 sphericalTrigonometry.py:1231: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 772 sphericalTrigonometry.py:1232: L{LatLon3Tuple}C{(lat, lon, height)}
    test 773 sphericalTrigonometry.py:1328: L{Triangle7Tuple}C{(A, a, B, b, C, c, area)}
    test 774 sphericalTrigonometry.py:1333: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}
    test 775 sphericalTrigonometry.py:1360: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}

    testing streprs.py (pygeodesy.named, 24.06.24)

    testing trf.py (pygeodesy.named, 24.06.24)
    test 776 trf.py:470: L{Vector3Tuple}C{(x, y, z)}
    test 777 trf.py:512: L{Vector3Tuple}C{(x, y, z)}

    testing triaxials.py (pygeodesy.named, 24.06.24)
    test 778 triaxials.py:104: L{BetaOmega2Tuple}C{(beta, omega)}
    test 779 triaxials.py:116: L{BetaOmega2Tuple}C{(beta, omega)}
    test 780 triaxials.py:137: L{BetaOmega3Tuple}C{(beta, omega, height)}
    test 781 triaxials.py:149: L{BetaOmega3Tuple}C{(beta, omega, height)}
    test 782 triaxials.py:174: L{Jacobi2Tuple}C{(x, y)}
    test 783 triaxials.py:185: L{Jacobi2Tuple}C{(x, y)}
    test 784 triaxials.py:392: L{Vector4Tuple}C{(x, y, z, h)}
    test 785 triaxials.py:697: L{Vector3Tuple}C{(x, y, z)}
    test 786 triaxials.py:727: L{Vector3Tuple}C{(x, y, z)}
    test 787 triaxials.py:765: L{Vector3Tuple}C{(x, y, z)}
    test 788 triaxials.py:783: L{Vector3Tuple}C{(x, y, z)}
    test 789 triaxials.py:855: L{BetaOmega3Tuple}C{(beta, omega, height)}
    test 790 triaxials.py:882: L{Vector3Tuple}C{(x, y, z)}
    test 791 triaxials.py:911: L{LatLon3Tuple}C{(lat, lon, height)}
    test 792 triaxials.py:989: L{Jacobi2Tuple}C{(x, y)}
    test 793 triaxials.py:1002: L{Jacobi2Tuple}C{(x, y)}
    test 794 triaxials.py:1016: L{Jacobi2Tuple}C{(x, y)}
    test 795 triaxials.py:1258: L{Vector4Tuple}C{(x, y, z, h)}

    testing units.py (pygeodesy.named, 24.06.24)

    testing unitsBase.py (pygeodesy.named, 24.06.24)

    testing ups.py (pygeodesy.named, 24.06.24)
    test 796 ups.py:148: L{EasNor2Tuple}C{(easting, northing)}
    test 797 ups.py:210: L{LatLonDatum5Tuple}C{(lat, lon, datum, gamma, scale)}
    test 798 ups.py:356: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 799 ups.py:403: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}
    test 800 ups.py:478: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utily.py (pygeodesy.named, 24.06.24)
    test 801 utily.py:170: L{Circle4Tuple}C{(radius, height, lat, beta)}

    testing utm.py (pygeodesy.named, 24.06.24)
    test 802 utm.py:252: L{EasNor2Tuple}C{(easting, northing)}
    test 803 utm.py:306: L{LatLonDatum5Tuple}C{(lat, lon, datum, gamma, scale)}
    test 804 utm.py:512: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 805 utm.py:542: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}
    test 806 utm.py:721: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utmups.py (pygeodesy.named, 24.06.24)
    test 807 utmups.py:89: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 808 utmups.py:129: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}
    test 809 utmups.py:278: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utmupsBase.py (pygeodesy.named, 24.06.24)
    test 810 utmupsBase.py:153: L{EasNor2Tuple}C{(easting, northing)}
    test 811 utmupsBase.py:163: L{EasNor2Tuple}C{(easting, northing)}
    test 812 utmupsBase.py:274: L{EasNor2Tuple}C{(easting, northing)}

    testing vector2d.py (pygeodesy.named, 24.06.24)
    test 813 vector2d.py:132: L{Circin6Tuple}C{(radius, center, deltas, cA, cB, cC)}
    test 814 vector2d.py:196: L{Circum3Tuple}C{(radius, center, deltas)}
    test 815 vector2d.py:246: L{Circum4Tuple}C{(radius, center, rank, residuals)}
    test 816 vector2d.py:315: L{Meeus2Tuple}C{(radius, Type)}
    test 817 vector2d.py:479: L{Radii11Tuple}C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 818 vector2d.py:556: L{Soddy4Tuple}C{(radius, center, deltas, outer)}

    testing vector3d.py (pygeodesy.named, 24.06.24)
    test 819 vector3d.py:74: L{Circin6Tuple}C{(radius, center, deltas, cA, cB, cC)}
    test 820 vector3d.py:108: L{Circum3Tuple}C{(radius, center, deltas)}
    test 821 vector3d.py:134: L{Circum4Tuple}C{(radius, center, rank, residuals)}
    test 822 vector3d.py:181: L{Meeus2Tuple}C{(radius, Type)}
    test 823 vector3d.py:227: L{NearestOn6Tuple}C{(closest, distance, fi, j, start, end)}
    test 824 vector3d.py:263: L{Radii11Tuple}C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 825 vector3d.py:290: L{Soddy4Tuple}C{(radius, center, deltas, outer)}
    test 826 vector3d.py:504: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 827 vector3d.py:731: L{NearestOn6Tuple}C{(closest, distance, fi, j, start, end)}
    test 828 vector3d.py:802: L{Vector3Tuple}C{(x, y, z)}
    test 829 vector3d.py:826: L{Vector3Tuple}C{(x, y, z)}
    test 830 vector3d.py:859: L{Vector2Tuple}C{(x, y)}

    testing vector3dBase.py (pygeodesy.named, 24.06.24)
    test 831 vector3dBase.py:887: L{PhiLam2Tuple}C{(phi, lam)}
    test 832 vector3dBase.py:895: L{LatLon2Tuple}C{(lat, lon)}
    test 833 vector3dBase.py:961: L{Vector3Tuple}C{(x, y, z)}

    testing webmercator.py (pygeodesy.named, 24.06.24)
    test 834 webmercator.py:120: L{LatLon2Tuple}C{(lat, lon)}
    test 835 webmercator.py:178: L{LatLon2Tuple}C{(lat, lon)}
    test 836 webmercator.py:287: L{EasNorRadius3Tuple}C{(easting, northing, radius)}
    test 837 webmercator.py:323: L{EasNorRadius3Tuple}C{(easting, northing, radius)}

    testing wgrs.py (pygeodesy.named, 24.06.24)
    test 838 wgrs.py:220: L{LatLon3Tuple}C{(lat, lon, height)}
    test 839 wgrs.py:238: L{LatLonPrec3Tuple}C{(lat, lon, precision)}
    test 840 wgrs.py:291: L{LatLonPrec5Tuple}C{(lat, lon, precision, height, radius)}

    testing auxilats._CX_4.py (pygeodesy.named, 24.06.24)

    testing auxilats._CX_6.py (pygeodesy.named, 24.06.24)

    testing auxilats._CX_8.py (pygeodesy.named, 24.06.24)

    testing auxilats.__init__.py (pygeodesy.named, 24.06.24)

    testing auxilats.__main__.py (pygeodesy.named, 24.06.24)

    testing auxilats.auxAngle.py (pygeodesy.named, 24.06.24)

    testing auxilats.auxDLat.py (pygeodesy.named, 24.06.24)

    testing auxilats.auxDST.py (pygeodesy.named, 24.06.24)

    testing auxilats.auxLat.py (pygeodesy.named, 24.06.24)

    testing auxilats.auxily.py (pygeodesy.named, 24.06.24)

    testing deprecated.__init__.py (pygeodesy.named, 24.06.24)

    testing deprecated.bases.py (pygeodesy.named, 24.06.24)

    testing deprecated.classes.py (pygeodesy.named, 24.06.24)
    test 841 deprecated.classes.py:74: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 842 deprecated.classes.py:88: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}

    testing deprecated.consterns.py (pygeodesy.named, 24.06.24)

    testing deprecated.datum.py (pygeodesy.named, 24.06.24)

    testing deprecated.functions.py (pygeodesy.named, 24.06.24)
    test 843 deprecated.functions.py:54: L{ClipCS3Tuple}C{(start, end, index)}  FAILED, KNOWN, expected DEPRECATED
    test 844 deprecated.functions.py:332: L{TriAngle4Tuple}C{(radA, radB, radC, rIn)}  FAILED, KNOWN, expected DEPRECATED

    testing deprecated.nvector.py (pygeodesy.named, 24.06.24)

    testing deprecated.rhumbBase.py (pygeodesy.named, 24.06.24)

    testing deprecated.rhumbaux.py (pygeodesy.named, 24.06.24)

    testing deprecated.rhumbsolve.py (pygeodesy.named, 24.06.24)

    testing deprecated.rhumbx.py (pygeodesy.named, 24.06.24)

    testing geodesicx._C4_24.py (pygeodesy.named, 24.06.24)

    testing geodesicx._C4_27.py (pygeodesy.named, 24.06.24)

    testing geodesicx._C4_30.py (pygeodesy.named, 24.06.24)

    testing geodesicx.__init__.py (pygeodesy.named, 24.06.24)

    testing geodesicx.__main__.py (pygeodesy.named, 24.06.24)

    testing geodesicx.gx.py (pygeodesy.named, 24.06.24)
    test 845 geodesicx.gx.py:359: L{Destination3Tuple}C{(lat, lon, final)}
    test 846 geodesicx.gx.py:704: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 847 geodesicx.gx.py:725: L{Inverse10Tuple}C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}
    test 848 geodesicx.gx.py:779: L{Distance3Tuple}C{(distance, initial, final)}

    testing geodesicx.gxarea.py (pygeodesy.named, 24.06.24)
    test 849 geodesicx.gxarea.py:160: L{Area3Tuple}C{(number, perimeter, area)}
    test 850 geodesicx.gxarea.py:328: L{Area3Tuple}C{(number, perimeter, area)}
    test 851 geodesicx.gxarea.py:360: L{Area3Tuple}C{(number, perimeter, area)}

    testing geodesicx.gxbases.py (pygeodesy.named, 24.06.24)

    testing geodesicx.gxline.py (pygeodesy.named, 24.06.24)
    test 852 geodesicx.gxline.py:450: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}

    testing rhumb.__init__.py (pygeodesy.named, 24.06.24)

    testing rhumb.aux_.py (pygeodesy.named, 24.06.24)

    testing rhumb.bases.py (pygeodesy.named, 24.06.24)
    test 853 rhumb.bases.py:587: L{Distance2Tuple}C{(distance, initial)}
    test 854 rhumb.bases.py:781: L{LatLon2Tuple}C{(lat, lon)}

    testing rhumb.ekx.py (pygeodesy.named, 24.06.24)
    test 855 rhumb.ekx.py:202: L{RhumbOrder2Tuple}C{(RAorder, TMorder)}  FAILED, KNOWN, expected DEPRECATED

    testing rhumb.solve.py (pygeodesy.named, 24.06.24)
    test 856 rhumb.solve.py:131: L{Destination3Tuple}C{(lat, lon, final)}
    test 857 rhumb.solve.py:196: L{Distance3Tuple}C{(distance, initial, final)}

    testing xtend (pygeodesy.namedTuples, 24.06.08)
    test 858 LatLon2Tuple(lat=0, lon=1): (0, 1, 2)
    test 859 LatLon2Tuple(lat=0, lon=1): <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 860 LatLon2Tuple(lat=0, lon=1): (0, 1, 2, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 861 LatLon2Tuple(lat=0, lon=1): <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 862 LatLon3Tuple(lat=0, lon=1, height=2): (0, 1, 2, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 863 LatLon3Tuple(lat=0, lon=1, height=2): <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 864 PhiLam2Tuple(phi=0, lam=1): (0, 1, 2)
    test 865 PhiLam2Tuple(phi=0, lam=1): <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 866 Vector3Tuple(x=0, y=1, z=2): (0, 1, 2, 4)
    test 867 Vector3Tuple(x=0, y=1, z=2): <class 'pygeodesy.namedTuples.Vector4Tuple'>

    testing bases (pygeodesy.named, 24.06.24)
    test 868 nd.dict: test(1=1, 2=2)
    test 869 nd.name: test
    test 870 nd.dict: test(1=1, 2=2)
    test 871 nd.name: test
    test 872 nd.kwds: test(one=1, two=2)
    test 873 nd.name: test
    test 874 nd.dict: test(1=1, 2=2)
    test 875 nd.name: test
    test 876 nd.list: test(1=1, 2=2)
    test 877 nd.name: test
    test 878 nd.updated: test(1=1, 2=2, name='kwds')
    test 879 nd.name: test

    testing coverage (pygeodesy.named, 24.06.24)
{E: 'E', N: 'N', NE: 'NE', NW: 'NW', S: 'S', SE: 'SE', SW: 'SW', W: 'W'}
    test 880 nd.name: name
    test 881 nd.named: name
    test 882 nd.named: Neighbors8Dict
    test 883 nd.name: test
    test 884 nd.test: test
    test 885 nd.test: None
    test 886 nd.classnaming: False
    test 887 nd.classname: Neighbors8Dict
    test 888 nd.named2: Neighbors8Dict 'test'
    test 889 nd.classnaming: True
    test 890 nd.classname: geohash.Neighbors8Dict
    test 891 nd.named2: geohash.Neighbors8Dict 'test'
    test 892 delattr: None
    test 893 classnaming: False
    test 894 classnaming: True

    testing unregister (pygeodesy.named, 24.06.24)
# lazily imported pygeodesy.Conics from .lcc by testNamed.py line 192
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testNamed.py line 192
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testNamed.py line 192
# lazily imported pygeodesy.RefFrames from .trf by testNamed.py line 192
# lazily imported pygeodesy.Transforms from .datums by testNamed.py line 192
    test 895 Conics: 1
    test 896 Conics: 8
    test 897 Conics.Be08Lb.unregister: None
    test 898 Conics.Be72Lb.unregister: None
    test 899 Conics.Fr93Lb.unregister: None
    test 900 Conics.MaNLb.unregister: None
    test 901 Conics.MxLb.unregister: None
    test 902 Conics.PyT_Lb.unregister: None
    test 903 Conics.USA_Lb.unregister: None
    test 904 Conics.WRF_Lb.unregister: None
    test 905 Conics: 0

    test 906 Datums: 6
    test 907 Datums: 18
    test 908 Datums.unregister(BD72): None
    test 909 Datums.unregister(DHDN): None
    test 910 Datums.unregister(ED50): None
    test 911 Datums.unregister(GDA2020): None
    test 912 Datums.unregister(GRS80): None
    test 913 Datums.unregister(Irl1975): None
    test 914 Datums.unregister(Krassovski1940): None
    test 915 Datums.unregister(Krassowsky1940): None
    test 916 Datums.unregister(MGI): None
    test 917 Datums.unregister(NAD27): None
    test 918 Datums.unregister(NAD83): None
    test 919 Datums.unregister(NTF): None
    test 920 Datums.unregister(OSGB36): None
    test 921 Datums.unregister(Potsdam): None
    test 922 Datums.unregister(Sphere): None
    test 923 Datums.unregister(TokyoJapan): None
    test 924 Datums.unregister(WGS72): None
    test 925 Datums.unregister(WGS84): None
    test 926 Datums: 0

    test 927 RefFrames: 32  FAILED, KNOWN, expected 0
    test 928 RefFrames: 36
    test 929 RefFrames.ETRF2000.unregister: None
    test 930 RefFrames.ETRF2005.unregister: None
    test 931 RefFrames.ETRF2008.unregister: None
    test 932 RefFrames.ETRF2014.unregister: None
    test 933 RefFrames.ETRF2020.unregister: None
    test 934 RefFrames.ETRF88.unregister: None
    test 935 RefFrames.ETRF89.unregister: None
    test 936 RefFrames.ETRF90.unregister: None
    test 937 RefFrames.ETRF91.unregister: None
    test 938 RefFrames.ETRF92.unregister: None
    test 939 RefFrames.ETRF93.unregister: None
    test 940 RefFrames.ETRF94.unregister: None
    test 941 RefFrames.ETRF96.unregister: None
    test 942 RefFrames.ETRF97.unregister: None
    test 943 RefFrames.GDA2020.unregister: None
    test 944 RefFrames.GDA94.unregister: None
    test 945 RefFrames.ITRF2000.unregister: None
    test 946 RefFrames.ITRF2005.unregister: None
    test 947 RefFrames.ITRF2008.unregister: None
    test 948 RefFrames.ITRF2014.unregister: None
    test 949 RefFrames.ITRF2020.unregister: None
    test 950 RefFrames.ITRF88.unregister: None
    test 951 RefFrames.ITRF89.unregister: None
    test 952 RefFrames.ITRF90.unregister: None
    test 953 RefFrames.ITRF91.unregister: None
    test 954 RefFrames.ITRF92.unregister: None
    test 955 RefFrames.ITRF93.unregister: None
    test 956 RefFrames.ITRF94.unregister: None
    test 957 RefFrames.ITRF96.unregister: None
    test 958 RefFrames.ITRF97.unregister: None
    test 959 RefFrames.NAD83.unregister: None
    test 960 RefFrames.NAD83cors96.unregister: None
    test 961 RefFrames.WGS84.unregister: None
    test 962 RefFrames.WGS84g1150.unregister: None
    test 963 RefFrames.WGS84g1674.unregister: None
    test 964 RefFrames.WGS84g1762.unregister: None
    test 965 RefFrames: 0

    test 966 Ellipsoids: 12
    test 967 Ellipsoids: 49
    test 968 Ellipsoids.Airy1830.unregister: None
    test 969 Ellipsoids.AiryModified.unregister: None
    test 970 Ellipsoids.ATS1977.unregister: None
    test 971 Ellipsoids.Australia1966.unregister: None
    test 972 Ellipsoids.Bessel1841.unregister: None
    test 973 Ellipsoids.BesselModified.unregister: None
    test 974 Ellipsoids.CGCS2000.unregister: None
    test 975 Ellipsoids.Clarke1866.unregister: None
    test 976 Ellipsoids.Clarke1880.unregister: None
    test 977 Ellipsoids.Clarke1880IGN.unregister: None
    test 978 Ellipsoids.Clarke1880Mod.unregister: None
    test 979 Ellipsoids.CPM1799.unregister: None
    test 980 Ellipsoids.Delambre1810.unregister: None
    test 981 Ellipsoids.Engelis1985.unregister: None
    test 982 Ellipsoids.Everest1969.unregister: None
    test 983 Ellipsoids.Everest1975.unregister: None
    test 984 Ellipsoids.Fisher1968.unregister: None
    test 985 Ellipsoids.GEM10C.unregister: None
    test 986 Ellipsoids.GPES.unregister: None
    test 987 Ellipsoids.GRS67.unregister: None
    test 988 Ellipsoids.GRS80.unregister: None
    test 989 Ellipsoids.Helmert1906.unregister: None
    test 990 Ellipsoids.IAU76.unregister: None
    test 991 Ellipsoids.IERS1989.unregister: None
    test 992 Ellipsoids.IERS1992TOPEX.unregister: None
    test 993 Ellipsoids.IERS2003.unregister: None
    test 994 Ellipsoids.Intl1924.unregister: None
    test 995 Ellipsoids.Intl1967.unregister: None
    test 996 Ellipsoids.Krassovski1940.unregister: None
    test 997 Ellipsoids.Krassowsky1940.unregister: None
    test 998 Ellipsoids.Maupertuis1738.unregister: None
    test 999 Ellipsoids.Mercury1960.unregister: None
    test 1000 Ellipsoids.Mercury1968Mod.unregister: None
    test 1001 Ellipsoids.NWL1965.unregister: None
    test 1002 Ellipsoids.OSU86F.unregister: None
    test 1003 Ellipsoids.OSU91A.unregister: None
    test 1004 Ellipsoids.Plessis1817.unregister: None
    test 1005 Ellipsoids.PZ90.unregister: None
    test 1006 Ellipsoids.SGS85.unregister: None
    test 1007 Ellipsoids.SoAmerican1969.unregister: None
    test 1008 Ellipsoids.Sphere.unregister: None
    test 1009 Ellipsoids.SphereAuthalic.unregister: None
    test 1010 Ellipsoids.SpherePopular.unregister: None
    test 1011 Ellipsoids.Struve1860.unregister: None
    test 1012 Ellipsoids.WGS60.unregister: None
    test 1013 Ellipsoids.WGS66.unregister: None
    test 1014 Ellipsoids.WGS72.unregister: None
    test 1015 Ellipsoids.WGS84.unregister: None
    test 1016 Ellipsoids.WGS84_NGS.unregister: None
    test 1017 Ellipsoids: 0

    test 1018 Transforms: 16
    test 1019 Transforms: 20
    test 1020 Transforms.BD72.unregister: None
    test 1021 Transforms.Bessel1841.unregister: None
    test 1022 Transforms.Clarke1866.unregister: None
    test 1023 Transforms.DHDN.unregister: None
    test 1024 Transforms.DHDNE.unregister: None
    test 1025 Transforms.DHDNW.unregister: None
    test 1026 Transforms.ED50.unregister: None
    test 1027 Transforms.Identity.unregister: None
    test 1028 Transforms.Irl1965.unregister: None
    test 1029 Transforms.Irl1975.unregister: None
    test 1030 Transforms.Krassovski1940.unregister: None
    test 1031 Transforms.Krassowsky1940.unregister: None
    test 1032 Transforms.MGI.unregister: None
    test 1033 Transforms.NAD27.unregister: None
    test 1034 Transforms.NAD83.unregister: None
    test 1035 Transforms.NTF.unregister: None
    test 1036 Transforms.OSGB36.unregister: None
    test 1037 Transforms.TokyoJapan.unregister: None
    test 1038 Transforms.WGS72.unregister: None
    test 1039 Transforms.WGS84.unregister: None
    test 1040 Transforms: 0

    test 1041 nameof: KsOrder

    10 of 1041 testNamed.py tests (1.0%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 65.146 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testNamedTuples.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.FIx from .units by testNamedTuples.py line 10

    testing testNamedTuples.py 24.06.08 isLazy=3
    test 1 pygeodesy.albers: Albers7Tuple(x=0.5, y=0.5, lat=0.5, lon=0.5, gamma=0.5, scale=0.5, datum=0.5)
    test 2 pygeodesy.albers: Albers7Tuple(x=Meter, y=Meter, lat=Lat, lon=Lon, gamma=Bearing, scale=_Pass, datum=_Pass)
    test 3 pygeodesy.albers.Albers7Tuple.x: 0.5
    test 4 pygeodesy.albers.Albers7Tuple.y: 0.5
    test 5 pygeodesy.albers.Albers7Tuple.lat: 0.5
    test 6 pygeodesy.albers.Albers7Tuple.lon: 0.5
    test 7 pygeodesy.albers.Albers7Tuple.gamma: 0.5
    test 8 pygeodesy.albers.Albers7Tuple.scale: 0.5
    test 9 pygeodesy.albers.Albers7Tuple.datum: 0.5
    test 10 pygeodesy.albers.Albers7Tuple._validated: True
    test 11 pygeodesy.albers.Albers7Tuple._validated: True
# lazily imported pygeodesy.azimuthal by bases.py line 200
    test 12 pygeodesy.azimuthal: Azimuthal7Tuple(x=0.5, y=0.5, lat=0.5, lon=0.5, azimuth=0.5, scale=0.5, datum=0.5)
    test 13 pygeodesy.azimuthal: Azimuthal7Tuple(x=Easting, y=Northing, lat=Lat_, lon=Lon_, azimuth=Bearing, scale=Scalar, datum=_Pass)
    test 14 pygeodesy.azimuthal.Azimuthal7Tuple.x: 0.5
    test 15 pygeodesy.azimuthal.Azimuthal7Tuple.y: 0.5
    test 16 pygeodesy.azimuthal.Azimuthal7Tuple.lat: 0.5
    test 17 pygeodesy.azimuthal.Azimuthal7Tuple.lon: 0.5
    test 18 pygeodesy.azimuthal.Azimuthal7Tuple.azimuth: 0.5
    test 19 pygeodesy.azimuthal.Azimuthal7Tuple.scale: 0.5
    test 20 pygeodesy.azimuthal.Azimuthal7Tuple.datum: 0.5
    test 21 pygeodesy.azimuthal.Azimuthal7Tuple._validated: True
    test 22 pygeodesy.azimuthal.Azimuthal7Tuple._validated: True
# lazily imported pygeodesy.booleans by bases.py line 200
    test 23 pygeodesy.cartesianBase: RadiusThetaPhi3Tuple(r=0.5, theta=0.5, phi=0.5)
    test 24 pygeodesy.cartesianBase: RadiusThetaPhi3Tuple(r=Meter, theta=_Pass, phi=_Pass)
    test 25 pygeodesy.cartesianBase.RadiusThetaPhi3Tuple.r: 0.5
    test 26 pygeodesy.cartesianBase.RadiusThetaPhi3Tuple.theta: 0.5
    test 27 pygeodesy.cartesianBase.RadiusThetaPhi3Tuple.phi: 0.5
    test 28 pygeodesy.cartesianBase.RadiusThetaPhi3Tuple._validated: True
    test 29 pygeodesy.cartesianBase.RadiusThetaPhi3Tuple._validated: True
# lazily imported pygeodesy.clipy by bases.py line 200
    test 30 pygeodesy.clipy: ClipCS4Tuple(start=0.5, end=0.5, i=0, j=0)
    test 31 pygeodesy.clipy: ClipCS4Tuple(start=_Pass, end=_Pass, i=Number_, j=Number_)
    test 32 pygeodesy.clipy.ClipCS4Tuple.start: 0.5
    test 33 pygeodesy.clipy.ClipCS4Tuple.end: 0.5
    test 34 pygeodesy.clipy.ClipCS4Tuple.i: 0.5
    test 35 pygeodesy.clipy.ClipCS4Tuple.j: 0.5
    test 36 pygeodesy.clipy.ClipCS4Tuple._validated: True
    test 37 pygeodesy.clipy.ClipCS4Tuple._validated: True
    test 38 pygeodesy.clipy: ClipFHP4Tuple(lat=0.5, lon=0.5, height=0.5, clipid=0)
    test 39 pygeodesy.clipy: ClipFHP4Tuple(lat=Lat, lon=Lon, height=_Pass, clipid=Number_)
    test 40 pygeodesy.clipy.ClipFHP4Tuple.lat: 0.5
    test 41 pygeodesy.clipy.ClipFHP4Tuple.lon: 0.5
    test 42 pygeodesy.clipy.ClipFHP4Tuple.height: 0.5
    test 43 pygeodesy.clipy.ClipFHP4Tuple.clipid: 0.5
    test 44 pygeodesy.clipy.ClipFHP4Tuple._validated: True
    test 45 pygeodesy.clipy.ClipFHP4Tuple._validated: True
    test 46 pygeodesy.clipy: ClipGH4Tuple(lat=0.5, lon=0.5, height=0.5, clipid=0)
    test 47 pygeodesy.clipy: ClipGH4Tuple(lat=Lat, lon=Lon, height=_Pass, clipid=Number_)
    test 48 pygeodesy.clipy.ClipGH4Tuple.lat: 0.5
    test 49 pygeodesy.clipy.ClipGH4Tuple.lon: 0.5
    test 50 pygeodesy.clipy.ClipGH4Tuple.height: 0.5
    test 51 pygeodesy.clipy.ClipGH4Tuple.clipid: 0.5
    test 52 pygeodesy.clipy.ClipGH4Tuple._validated: True
    test 53 pygeodesy.clipy.ClipGH4Tuple._validated: True
    test 54 pygeodesy.clipy: ClipLB6Tuple(start=0.5, end=0.5, i=0, fi=0.5, fj=0.5, j=0)
    test 55 pygeodesy.clipy: ClipLB6Tuple(start=_Pass, end=_Pass, i=Number_, fi=_Pass, fj=_Pass, j=Number_)
    test 56 pygeodesy.clipy.ClipLB6Tuple.start: 0.5
    test 57 pygeodesy.clipy.ClipLB6Tuple.end: 0.5
    test 58 pygeodesy.clipy.ClipLB6Tuple.i: 0.5
    test 59 pygeodesy.clipy.ClipLB6Tuple.fi: 0.5
    test 60 pygeodesy.clipy.ClipLB6Tuple.fj: 0.5
    test 61 pygeodesy.clipy.ClipLB6Tuple.j: 0.5
    test 62 pygeodesy.clipy.ClipLB6Tuple._validated: True
    test 63 pygeodesy.clipy.ClipLB6Tuple._validated: True
    test 64 pygeodesy.clipy: ClipSH3Tuple(start=0.5, end=0.5, original=True)
    test 65 pygeodesy.clipy: ClipSH3Tuple(start=_Pass, end=_Pass, original=Bool)
    test 66 pygeodesy.clipy.ClipSH3Tuple.start: 0.5
    test 67 pygeodesy.clipy.ClipSH3Tuple.end: 0.5
    test 68 pygeodesy.clipy.ClipSH3Tuple.original: 0.5
    test 69 pygeodesy.clipy.ClipSH3Tuple._validated: True
    test 70 pygeodesy.clipy.ClipSH3Tuple._validated: True
# lazily imported pygeodesy.css by bases.py line 200
    test 71 pygeodesy.css: EasNorAziRk4Tuple(easting=0.5, northing=0.5, azimuth=0.5, reciprocal=0.5)
    test 72 pygeodesy.css: EasNorAziRk4Tuple(easting=Easting, northing=Northing, azimuth=Bearing, reciprocal=Scalar)
    test 73 pygeodesy.css.EasNorAziRk4Tuple.easting: 0.5
    test 74 pygeodesy.css.EasNorAziRk4Tuple.northing: 0.5
    test 75 pygeodesy.css.EasNorAziRk4Tuple.azimuth: 0.5
    test 76 pygeodesy.css.EasNorAziRk4Tuple.reciprocal: 0.5
    test 77 pygeodesy.css.EasNorAziRk4Tuple._validated: True
    test 78 pygeodesy.css.EasNorAziRk4Tuple._validated: True
    test 79 pygeodesy.css: EasNorAziRkEqu6Tuple(easting=0.5, northing=0.5, azimuth=0.5, reciprocal=0.5, equatorarc=0.5, equatorazimuth=0.5)
    test 80 pygeodesy.css: EasNorAziRkEqu6Tuple(easting=Easting, northing=Northing, azimuth=Bearing, reciprocal=Scalar, equatorarc=Degrees, equatorazimuth=Bearing)
    test 81 pygeodesy.css.EasNorAziRkEqu6Tuple.easting: 0.5
    test 82 pygeodesy.css.EasNorAziRkEqu6Tuple.northing: 0.5
    test 83 pygeodesy.css.EasNorAziRkEqu6Tuple.azimuth: 0.5
    test 84 pygeodesy.css.EasNorAziRkEqu6Tuple.reciprocal: 0.5
    test 85 pygeodesy.css.EasNorAziRkEqu6Tuple.equatorarc: 0.5
    test 86 pygeodesy.css.EasNorAziRkEqu6Tuple.equatorazimuth: 0.5
    test 87 pygeodesy.css.EasNorAziRkEqu6Tuple._validated: True
    test 88 pygeodesy.css.EasNorAziRkEqu6Tuple._validated: True
    test 89 pygeodesy.css: LatLonAziRk4Tuple(lat=0.5, lon=0.5, azimuth=0.5, reciprocal=0.5)
    test 90 pygeodesy.css: LatLonAziRk4Tuple(lat=Lat_, lon=Lon_, azimuth=Bearing, reciprocal=Scalar)
    test 91 pygeodesy.css.LatLonAziRk4Tuple.lat: 0.5
    test 92 pygeodesy.css.LatLonAziRk4Tuple.lon: 0.5
    test 93 pygeodesy.css.LatLonAziRk4Tuple.azimuth: 0.5
    test 94 pygeodesy.css.LatLonAziRk4Tuple.reciprocal: 0.5
    test 95 pygeodesy.css.LatLonAziRk4Tuple._validated: True
    test 96 pygeodesy.css.LatLonAziRk4Tuple._validated: True
# lazily imported pygeodesy.ecef by bases.py line 200
    test 97 pygeodesy.ecef: Ecef9Tuple(x=0.5, y=0.5, z=0.5, lat=0.5, lon=0.5, height=0.5, C=0, M=0.5, datum=0.5)
    test 98 pygeodesy.ecef: Ecef9Tuple(x=Meter, y=Meter, z=Meter, lat=Lat, lon=Lon, height=Height, C=Int, M=_Pass, datum=_Pass)
    test 99 pygeodesy.ecef.Ecef9Tuple.x: 0.5
    test 100 pygeodesy.ecef.Ecef9Tuple.y: 0.5
    test 101 pygeodesy.ecef.Ecef9Tuple.z: 0.5
    test 102 pygeodesy.ecef.Ecef9Tuple.lat: 0.5
    test 103 pygeodesy.ecef.Ecef9Tuple.lon: 0.5
    test 104 pygeodesy.ecef.Ecef9Tuple.height: 0.5
    test 105 pygeodesy.ecef.Ecef9Tuple.C: 0.5
    test 106 pygeodesy.ecef.Ecef9Tuple.M: 0.5
    test 107 pygeodesy.ecef.Ecef9Tuple.datum: 0.5
    test 108 pygeodesy.ecef.Ecef9Tuple._validated: True
    test 109 pygeodesy.ecef.Ecef9Tuple._validated: True
    test 110 pygeodesy.ecef: EcefMatrix(_0_0_=0.5, _0_1_=0.5, _0_2_=0.5, _1_0_=0.5, _1_1_=0.5, _1_2_=0.5, _2_0_=0.5, _2_1_=0.5, _2_2_=0.5)
    test 111 pygeodesy.ecef: EcefMatrix(_0_0_=Scalar, _0_1_=Scalar, _0_2_=Scalar, _1_0_=Scalar, _1_1_=Scalar, _1_2_=Scalar, _2_0_=Scalar, _2_1_=Scalar, _2_2_=Scalar)
    test 112 pygeodesy.ecef.EcefMatrix._0_0_: 0.5
    test 113 pygeodesy.ecef.EcefMatrix._0_1_: 0.5
    test 114 pygeodesy.ecef.EcefMatrix._0_2_: 0.5
    test 115 pygeodesy.ecef.EcefMatrix._1_0_: 0.5
    test 116 pygeodesy.ecef.EcefMatrix._1_1_: 0.5
    test 117 pygeodesy.ecef.EcefMatrix._1_2_: 0.5
    test 118 pygeodesy.ecef.EcefMatrix._2_0_: 0.5
    test 119 pygeodesy.ecef.EcefMatrix._2_1_: 0.5
    test 120 pygeodesy.ecef.EcefMatrix._2_2_: 0.5
    test 121 pygeodesy.ecef.EcefMatrix._validated: True
    test 122 pygeodesy.ecef.EcefMatrix._validated: True
# lazily imported pygeodesy.elevations by bases.py line 200
    test 123 pygeodesy.elevations: Elevation2Tuple(elevation=0.5, data_source='0.5')
    test 124 pygeodesy.elevations: Elevation2Tuple(elevation=Meter, data_source=Str)
    test 125 pygeodesy.elevations.Elevation2Tuple.elevation: 0.5
    test 126 pygeodesy.elevations.Elevation2Tuple.data_source: 0.5
    test 127 pygeodesy.elevations.Elevation2Tuple._validated: True
    test 128 pygeodesy.elevations.Elevation2Tuple._validated: True
    test 129 pygeodesy.elevations: GeoidHeight2Tuple(height=0.5, model_name='0.5')
    test 130 pygeodesy.elevations: GeoidHeight2Tuple(height=Meter, model_name=Str)
    test 131 pygeodesy.elevations.GeoidHeight2Tuple.height: 0.5
    test 132 pygeodesy.elevations.GeoidHeight2Tuple.model_name: 0.5
    test 133 pygeodesy.elevations.GeoidHeight2Tuple._validated: True
    test 134 pygeodesy.elevations.GeoidHeight2Tuple._validated: True
# lazily imported pygeodesy.ellipsoidalBaseDI by bases.py line 200
# lazily imported pygeodesy.ellipsoidalExact by bases.py line 200
# lazily imported pygeodesy.ellipsoidalGeodSolve by bases.py line 200
# lazily imported pygeodesy.ellipsoidalKarney by bases.py line 200
# lazily imported pygeodesy.ellipsoidalNvector by bases.py line 200
# lazily imported pygeodesy.ellipsoidalVincenty by bases.py line 200
    test 135 pygeodesy.ellipsoids: Circle4Tuple(radius=0.5, height=0.5, lat=0.5, beta=0.5)
    test 136 pygeodesy.ellipsoids: Circle4Tuple(radius=Radius, height=Height, lat=Lat, beta=Lat)
    test 137 pygeodesy.ellipsoids.Circle4Tuple.radius: 0.5
    test 138 pygeodesy.ellipsoids.Circle4Tuple.height: 0.5
    test 139 pygeodesy.ellipsoids.Circle4Tuple.lat: 0.5
    test 140 pygeodesy.ellipsoids.Circle4Tuple.beta: 0.5
    test 141 pygeodesy.ellipsoids.Circle4Tuple._validated: True
    test 142 pygeodesy.ellipsoids.Circle4Tuple._validated: True
    test 143 pygeodesy.ellipsoids: Curvature2Tuple(meridional=0.5, prime_vertical=0.5)
    test 144 pygeodesy.ellipsoids: Curvature2Tuple(meridional=Meter, prime_vertical=Meter)
    test 145 pygeodesy.ellipsoids.Curvature2Tuple.meridional: 0.5
    test 146 pygeodesy.ellipsoids.Curvature2Tuple.prime_vertical: 0.5
    test 147 pygeodesy.ellipsoids.Curvature2Tuple._validated: True
    test 148 pygeodesy.ellipsoids.Curvature2Tuple._validated: True
    test 149 pygeodesy.ellipsoids: a_f2Tuple(a=0.5, f=0.5)
    test 150 pygeodesy.ellipsoids: a_f2Tuple(a=_Pass, f=_Pass)
    test 151 pygeodesy.ellipsoids.a_f2Tuple.a: 0.5
    test 152 pygeodesy.ellipsoids.a_f2Tuple.f: 0.5
    test 153 pygeodesy.ellipsoids.a_f2Tuple._validated: True
    test 154 pygeodesy.ellipsoids.a_f2Tuple._validated: True
# lazily imported pygeodesy.elliptic by bases.py line 200
    test 155 pygeodesy.elliptic: Elliptic3Tuple(sn=0.5, cn=0.5, dn=0.5)
    test 156 pygeodesy.elliptic: Elliptic3Tuple(sn=Scalar, cn=Scalar, dn=Scalar)
    test 157 pygeodesy.elliptic.Elliptic3Tuple.sn: 0.5
    test 158 pygeodesy.elliptic.Elliptic3Tuple.cn: 0.5
    test 159 pygeodesy.elliptic.Elliptic3Tuple.dn: 0.5
    test 160 pygeodesy.elliptic.Elliptic3Tuple._validated: True
    test 161 pygeodesy.elliptic.Elliptic3Tuple._validated: True
# lazily imported pygeodesy.epsg by bases.py line 200
# lazily imported pygeodesy.etm by bases.py line 200
    test 162 pygeodesy.formy: Radical2Tuple(ratio=0.5, xline=0.5)
    test 163 pygeodesy.formy: Radical2Tuple(ratio=Scalar, xline=Scalar)
    test 164 pygeodesy.formy.Radical2Tuple.ratio: 0.5
    test 165 pygeodesy.formy.Radical2Tuple.xline: 0.5
    test 166 pygeodesy.formy.Radical2Tuple._validated: True
    test 167 pygeodesy.formy.Radical2Tuple._validated: True
    test 168 pygeodesy.frechet: Frechet6Tuple(fd=0.5, fi1=0.5, fi2=0.5, r=0, n=0, units='test')
    test 169 pygeodesy.frechet: Frechet6Tuple(fd=_Pass, fi1=FIx, fi2=FIx, r=Number_, n=Number_, units=_Pass)
    test 170 pygeodesy.frechet.Frechet6Tuple.fd: 0.5
    test 171 pygeodesy.frechet.Frechet6Tuple.fi1: 0.5
    test 172 pygeodesy.frechet.Frechet6Tuple.fi2: 0.5
    test 173 pygeodesy.frechet.Frechet6Tuple.r: 0.5
    test 174 pygeodesy.frechet.Frechet6Tuple.n: 0.5
    test 175 pygeodesy.frechet.Frechet6Tuple.units: <bound method _NamedTuple.units of Frechet6Tuple(fd=0.5, fi1=0.5, fi2=0.5, r=0.5, n=0.5, units='test')>
    test 176 pygeodesy.frechet.Frechet6Tuple._validated: True
    test 177 pygeodesy.frechet.Frechet6Tuple._validated: True
# lazily imported pygeodesy.fstats by bases.py line 200
    test 178 pygeodesy.fsums: Fsum2Tuple(fsum=0.5, residual=0.5)
    test 179 pygeodesy.fsums: Fsum2Tuple(fsum=_Float_Int, residual=_Float_Int)
    test 180 pygeodesy.fsums.Fsum2Tuple.fsum: 0.5
    test 181 pygeodesy.fsums.Fsum2Tuple.residual: 0.5
    test 182 pygeodesy.fsums.Fsum2Tuple._validated: True
    test 183 pygeodesy.fsums.Fsum2Tuple._validated: True
# lazily imported pygeodesy.gars by bases.py line 200
# lazily imported pygeodesy.geodesici by bases.py line 200
    test 184 pygeodesy.geodesici: Intersector4Tuple(A=0.5, B=0.5, sAB=0.5, c=0)
    test 185 pygeodesy.geodesici: Intersector4Tuple(A=_Pass, B=_Pass, sAB=Meter, c=Int)
    test 186 pygeodesy.geodesici.Intersector4Tuple.A: 0.5
    test 187 pygeodesy.geodesici.Intersector4Tuple.B: 0.5
    test 188 pygeodesy.geodesici.Intersector4Tuple.sAB: 0.5
    test 189 pygeodesy.geodesici.Intersector4Tuple.c: 0.5
    test 190 pygeodesy.geodesici.Intersector4Tuple._validated: True
    test 191 pygeodesy.geodesici.Intersector4Tuple._validated: True
# lazily imported pygeodesy.geodesicw by bases.py line 200
# lazily imported pygeodesy.geodsolve by bases.py line 200
    test 192 pygeodesy.geodsolve: GeodSolve12Tuple(lat1=0.5, lon1=0.5, azi1=0.5, lat2=0.5, lon2=0.5, azi2=0.5, s12=0.5, a12=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 193 pygeodesy.geodsolve: GeodSolve12Tuple(lat1=_Lat, lon1=_Lon, azi1=Bearing, lat2=_Lat, lon2=_Lon, azi2=Bearing, s12=Meter, a12=Degrees, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 194 pygeodesy.geodsolve.GeodSolve12Tuple.lat1: 0.5
    test 195 pygeodesy.geodsolve.GeodSolve12Tuple.lon1: 0.5
    test 196 pygeodesy.geodsolve.GeodSolve12Tuple.azi1: 0.5
    test 197 pygeodesy.geodsolve.GeodSolve12Tuple.lat2: 0.5
    test 198 pygeodesy.geodsolve.GeodSolve12Tuple.lon2: 0.5
    test 199 pygeodesy.geodsolve.GeodSolve12Tuple.azi2: 0.5
    test 200 pygeodesy.geodsolve.GeodSolve12Tuple.s12: 0.5
    test 201 pygeodesy.geodsolve.GeodSolve12Tuple.a12: 0.5
    test 202 pygeodesy.geodsolve.GeodSolve12Tuple.m12: 0.5
    test 203 pygeodesy.geodsolve.GeodSolve12Tuple.M12: 0.5
    test 204 pygeodesy.geodsolve.GeodSolve12Tuple.M21: 0.5
    test 205 pygeodesy.geodsolve.GeodSolve12Tuple.S12: 0.5
    test 206 pygeodesy.geodsolve.GeodSolve12Tuple._validated: True
    test 207 pygeodesy.geodsolve.GeodSolve12Tuple._validated: True
# lazily imported pygeodesy.geohash by bases.py line 200
    test 208 pygeodesy.geohash: Resolutions2Tuple(res1=0.5, res2=0.5)
    test 209 pygeodesy.geohash: Resolutions2Tuple(res1=Degrees_, res2=Degrees_)
    test 210 pygeodesy.geohash.Resolutions2Tuple.res1: 0.5
    test 211 pygeodesy.geohash.Resolutions2Tuple.res2: 0.5
    test 212 pygeodesy.geohash.Resolutions2Tuple._validated: True
    test 213 pygeodesy.geohash.Resolutions2Tuple._validated: True
# lazily imported pygeodesy.geoids by bases.py line 200
    test 214 pygeodesy.geoids: GeoidHeight5Tuple(lat=0.5, lon=0.5, egm84=0.5, egm96=0.5, egm2008=0.5)
    test 215 pygeodesy.geoids: GeoidHeight5Tuple(lat=Lat, lon=Lon, egm84=Height, egm96=Height, egm2008=Height)
    test 216 pygeodesy.geoids.GeoidHeight5Tuple.lat: 0.5
    test 217 pygeodesy.geoids.GeoidHeight5Tuple.lon: 0.5
    test 218 pygeodesy.geoids.GeoidHeight5Tuple.egm84: 0.5
    test 219 pygeodesy.geoids.GeoidHeight5Tuple.egm96: 0.5
    test 220 pygeodesy.geoids.GeoidHeight5Tuple.egm2008: 0.5
    test 221 pygeodesy.geoids.GeoidHeight5Tuple._validated: True
    test 222 pygeodesy.geoids.GeoidHeight5Tuple._validated: True
    test 223 pygeodesy.hausdorff: Hausdorff6Tuple(hd=0.5, i=0, j=0, mn=0, md=0.5, units='test')
    test 224 pygeodesy.hausdorff: Hausdorff6Tuple(hd=_Pass, i=Number_, j=Number_, mn=Number_, md=_Pass, units=_Pass)
    test 225 pygeodesy.hausdorff.Hausdorff6Tuple.hd: 0.5
    test 226 pygeodesy.hausdorff.Hausdorff6Tuple.i: 0.5
    test 227 pygeodesy.hausdorff.Hausdorff6Tuple.j: 0.5
    test 228 pygeodesy.hausdorff.Hausdorff6Tuple.mn: 0.5
    test 229 pygeodesy.hausdorff.Hausdorff6Tuple.md: 0.5
    test 230 pygeodesy.hausdorff.Hausdorff6Tuple.units: <bound method _NamedTuple.units of Hausdorff6Tuple(hd=0.5, i=0.5, j=0.5, mn=0.5, md=0.5, units='test')>
    test 231 pygeodesy.hausdorff.Hausdorff6Tuple._validated: True
    test 232 pygeodesy.hausdorff.Hausdorff6Tuple._validated: True
    test 233 pygeodesy.karney: Area3Tuple(number=0, perimeter=0.5, area=0.5)
    test 234 pygeodesy.karney: Area3Tuple(number=Number_, perimeter=Meter, area=Meter2)
    test 235 pygeodesy.karney.Area3Tuple.number: 0.5
    test 236 pygeodesy.karney.Area3Tuple.perimeter: 0.5
    test 237 pygeodesy.karney.Area3Tuple.area: 0.5
    test 238 pygeodesy.karney.Area3Tuple._validated: True
    test 239 pygeodesy.karney.Area3Tuple._validated: True
    test 240 pygeodesy.karney: Direct9Tuple(a12=0.5, lat2=0.5, lon2=0.5, azi2=0.5, s12=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 241 pygeodesy.karney: Direct9Tuple(a12=Bearing, lat2=_Lat, lon2=_Lon, azi2=Bearing, s12=Meter, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 242 pygeodesy.karney.Direct9Tuple.a12: 0.5
    test 243 pygeodesy.karney.Direct9Tuple.lat2: 0.5
    test 244 pygeodesy.karney.Direct9Tuple.lon2: 0.5
    test 245 pygeodesy.karney.Direct9Tuple.azi2: 0.5
    test 246 pygeodesy.karney.Direct9Tuple.s12: 0.5
    test 247 pygeodesy.karney.Direct9Tuple.m12: 0.5
    test 248 pygeodesy.karney.Direct9Tuple.M12: 0.5
    test 249 pygeodesy.karney.Direct9Tuple.M21: 0.5
    test 250 pygeodesy.karney.Direct9Tuple.S12: 0.5
    test 251 pygeodesy.karney.Direct9Tuple._validated: True
    test 252 pygeodesy.karney.Direct9Tuple._validated: True
    test 253 pygeodesy.karney: Inverse10Tuple(a12=0.5, s12=0.5, salp1=0.5, calp1=0.5, salp2=0.5, calp2=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 254 pygeodesy.karney: Inverse10Tuple(a12=Bearing, s12=Meter, salp1=_Pass, calp1=_Pass, salp2=_Pass, calp2=_Pass, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 255 pygeodesy.karney.Inverse10Tuple.a12: 0.5
    test 256 pygeodesy.karney.Inverse10Tuple.s12: 0.5
    test 257 pygeodesy.karney.Inverse10Tuple.salp1: 0.5
    test 258 pygeodesy.karney.Inverse10Tuple.calp1: 0.5
    test 259 pygeodesy.karney.Inverse10Tuple.salp2: 0.5
    test 260 pygeodesy.karney.Inverse10Tuple.calp2: 0.5
    test 261 pygeodesy.karney.Inverse10Tuple.m12: 0.5
    test 262 pygeodesy.karney.Inverse10Tuple.M12: 0.5
    test 263 pygeodesy.karney.Inverse10Tuple.M21: 0.5
    test 264 pygeodesy.karney.Inverse10Tuple.S12: 0.5
    test 265 pygeodesy.karney.Inverse10Tuple._validated: True
    test 266 pygeodesy.karney.Inverse10Tuple._validated: True
    test 267 pygeodesy.karney: Rhumb8Tuple(lat1=0.5, lon1=0.5, lat2=0.5, lon2=0.5, azi12=0.5, s12=0.5, S12=0.5, a12=0.5)
    test 268 pygeodesy.karney: Rhumb8Tuple(lat1=Lat, lon1=Lon, lat2=Lat, lon2=Lon, azi12=Bearing, s12=Meter, S12=Meter2, a12=Degrees)
    test 269 pygeodesy.karney.Rhumb8Tuple.lat1: 0.5
    test 270 pygeodesy.karney.Rhumb8Tuple.lon1: 0.5
    test 271 pygeodesy.karney.Rhumb8Tuple.lat2: 0.5
    test 272 pygeodesy.karney.Rhumb8Tuple.lon2: 0.5
    test 273 pygeodesy.karney.Rhumb8Tuple.azi12: 0.5
    test 274 pygeodesy.karney.Rhumb8Tuple.s12: 0.5
    test 275 pygeodesy.karney.Rhumb8Tuple.S12: 0.5
    test 276 pygeodesy.karney.Rhumb8Tuple.a12: 0.5
    test 277 pygeodesy.karney.Rhumb8Tuple._validated: True
    test 278 pygeodesy.karney.Rhumb8Tuple._validated: True
# lazily imported pygeodesy.ktm by bases.py line 200
# lazily imported pygeodesy.lcc by bases.py line 200
# lazily imported pygeodesy.ltp by bases.py line 200
    test 279 pygeodesy.ltpTuples: Aer4Tuple(azimuth=0.5, elevation=0.5, slantrange=0.5, ltp=0.5)
    test 280 pygeodesy.ltpTuples: Aer4Tuple(azimuth=Meter, elevation=Meter, slantrange=Meter, ltp=_Pass)
    test 281 pygeodesy.ltpTuples.Aer4Tuple.azimuth: 0.5
    test 282 pygeodesy.ltpTuples.Aer4Tuple.elevation: 0.5
    test 283 pygeodesy.ltpTuples.Aer4Tuple.slantrange: 0.5
    test 284 pygeodesy.ltpTuples.Aer4Tuple.ltp: 0.5
    test 285 pygeodesy.ltpTuples.Aer4Tuple._validated: True
    test 286 pygeodesy.ltpTuples.Aer4Tuple._validated: True
    test 287 pygeodesy.ltpTuples: Attitude4Tuple(alt=0.5, tilt=0.5, yaw=0.5, roll=0.5)
    test 288 pygeodesy.ltpTuples: Attitude4Tuple(alt=Meter, tilt=Bearing, yaw=Degrees, roll=Degrees)
    test 289 pygeodesy.ltpTuples.Attitude4Tuple.alt: 0.5
    test 290 pygeodesy.ltpTuples.Attitude4Tuple.tilt: 0.5
    test 291 pygeodesy.ltpTuples.Attitude4Tuple.yaw: 0.5
    test 292 pygeodesy.ltpTuples.Attitude4Tuple.roll: 0.5
    test 293 pygeodesy.ltpTuples.Attitude4Tuple._validated: True
    test 294 pygeodesy.ltpTuples.Attitude4Tuple._validated: True
    test 295 pygeodesy.ltpTuples: ChLV9Tuple(Y=0.5, X=0.5, h_=0.5, lat=0.5, lon=0.5, height=0.5, ltp=0.5, ecef=0.5, M=0.5)
    test 296 pygeodesy.ltpTuples: ChLV9Tuple(Y=Meter, X=Meter, h_=Meter, lat=Lat, lon=Lon, height=Height, ltp=_Pass, ecef=_Pass, M=_Pass)
    test 297 pygeodesy.ltpTuples.ChLV9Tuple.Y: 0.5
    test 298 pygeodesy.ltpTuples.ChLV9Tuple.X: 0.5
    test 299 pygeodesy.ltpTuples.ChLV9Tuple.h_: 0.5
    test 300 pygeodesy.ltpTuples.ChLV9Tuple.lat: 0.5
    test 301 pygeodesy.ltpTuples.ChLV9Tuple.lon: 0.5
    test 302 pygeodesy.ltpTuples.ChLV9Tuple.height: 0.5
    test 303 pygeodesy.ltpTuples.ChLV9Tuple.ltp: 0.5
    test 304 pygeodesy.ltpTuples.ChLV9Tuple.ecef: 0.5
    test 305 pygeodesy.ltpTuples.ChLV9Tuple.M: 0.5
    test 306 pygeodesy.ltpTuples.ChLV9Tuple._validated: True
    test 307 pygeodesy.ltpTuples.ChLV9Tuple._validated: True
    test 308 pygeodesy.ltpTuples: ChLVEN2Tuple(E_LV95=0.5, N_LV95=0.5)
    test 309 pygeodesy.ltpTuples: ChLVEN2Tuple(E_LV95=Meter, N_LV95=Meter)
    test 310 pygeodesy.ltpTuples.ChLVEN2Tuple.E_LV95: 0.5
    test 311 pygeodesy.ltpTuples.ChLVEN2Tuple.N_LV95: 0.5
    test 312 pygeodesy.ltpTuples.ChLVEN2Tuple._validated: True
    test 313 pygeodesy.ltpTuples.ChLVEN2Tuple._validated: True
    test 314 pygeodesy.ltpTuples: ChLVYX2Tuple(Y=0.5, X=0.5)
    test 315 pygeodesy.ltpTuples: ChLVYX2Tuple(Y=Meter, X=Meter)
    test 316 pygeodesy.ltpTuples.ChLVYX2Tuple.Y: 0.5
    test 317 pygeodesy.ltpTuples.ChLVYX2Tuple.X: 0.5
    test 318 pygeodesy.ltpTuples.ChLVYX2Tuple._validated: True
    test 319 pygeodesy.ltpTuples.ChLVYX2Tuple._validated: True
    test 320 pygeodesy.ltpTuples: ChLVyx2Tuple(y_LV03=0.5, x_LV03=0.5)
    test 321 pygeodesy.ltpTuples: ChLVyx2Tuple(y_LV03=Meter, x_LV03=Meter)
    test 322 pygeodesy.ltpTuples.ChLVyx2Tuple.y_LV03: 0.5
    test 323 pygeodesy.ltpTuples.ChLVyx2Tuple.x_LV03: 0.5
    test 324 pygeodesy.ltpTuples.ChLVyx2Tuple._validated: True
    test 325 pygeodesy.ltpTuples.ChLVyx2Tuple._validated: True
    test 326 pygeodesy.ltpTuples: Enu4Tuple(east=0.5, north=0.5, up=0.5, ltp=0.5)
    test 327 pygeodesy.ltpTuples: Enu4Tuple(east=Meter, north=Meter, up=Meter, ltp=_Pass)
    test 328 pygeodesy.ltpTuples.Enu4Tuple.east: 0.5
    test 329 pygeodesy.ltpTuples.Enu4Tuple.north: 0.5
    test 330 pygeodesy.ltpTuples.Enu4Tuple.up: 0.5
    test 331 pygeodesy.ltpTuples.Enu4Tuple.ltp: 0.5
    test 332 pygeodesy.ltpTuples.Enu4Tuple._validated: True
    test 333 pygeodesy.ltpTuples.Enu4Tuple._validated: True
    test 334 pygeodesy.ltpTuples: Footprint5Tuple(center=0.5, upperleft=0.5, upperight=0.5, loweright=0.5, lowerleft=0.5)
    test 335 pygeodesy.ltpTuples: Footprint5Tuple(center=_Pass, upperleft=_Pass, upperight=_Pass, loweright=_Pass, lowerleft=_Pass)
    test 336 pygeodesy.ltpTuples.Footprint5Tuple.center: 0.5
    test 337 pygeodesy.ltpTuples.Footprint5Tuple.upperleft: 0.5
    test 338 pygeodesy.ltpTuples.Footprint5Tuple.upperight: 0.5
    test 339 pygeodesy.ltpTuples.Footprint5Tuple.loweright: 0.5
    test 340 pygeodesy.ltpTuples.Footprint5Tuple.lowerleft: 0.5
    test 341 pygeodesy.ltpTuples.Footprint5Tuple._validated: True
    test 342 pygeodesy.ltpTuples.Footprint5Tuple._validated: True
    test 343 pygeodesy.ltpTuples: Local9Tuple(x=0.5, y=0.5, z=0.5, lat=0.5, lon=0.5, height=0.5, ltp=0.5, ecef=0.5, M=0.5)
    test 344 pygeodesy.ltpTuples: Local9Tuple(x=Meter, y=Meter, z=Meter, lat=Lat, lon=Lon, height=Height, ltp=_Pass, ecef=_Pass, M=_Pass)
    test 345 pygeodesy.ltpTuples.Local9Tuple.x: 0.5
    test 346 pygeodesy.ltpTuples.Local9Tuple.y: 0.5
    test 347 pygeodesy.ltpTuples.Local9Tuple.z: 0.5
    test 348 pygeodesy.ltpTuples.Local9Tuple.lat: 0.5
    test 349 pygeodesy.ltpTuples.Local9Tuple.lon: 0.5
    test 350 pygeodesy.ltpTuples.Local9Tuple.height: 0.5
    test 351 pygeodesy.ltpTuples.Local9Tuple.ltp: 0.5
    test 352 pygeodesy.ltpTuples.Local9Tuple.ecef: 0.5
    test 353 pygeodesy.ltpTuples.Local9Tuple.M: 0.5
    test 354 pygeodesy.ltpTuples.Local9Tuple._validated: True
    test 355 pygeodesy.ltpTuples.Local9Tuple._validated: True
    test 356 pygeodesy.ltpTuples: Ned4Tuple(north=0.5, east=0.5, down=0.5, ltp=0.5)
    test 357 pygeodesy.ltpTuples: Ned4Tuple(north=Meter, east=Meter, down=Meter, ltp=_Pass)
    test 358 pygeodesy.ltpTuples.Ned4Tuple.north: 0.5
    test 359 pygeodesy.ltpTuples.Ned4Tuple.east: 0.5
    test 360 pygeodesy.ltpTuples.Ned4Tuple.down: 0.5
    test 361 pygeodesy.ltpTuples.Ned4Tuple.ltp: 0.5
    test 362 pygeodesy.ltpTuples.Ned4Tuple._validated: True
    test 363 pygeodesy.ltpTuples.Ned4Tuple._validated: True
    test 364 pygeodesy.ltpTuples: Uvw3Tuple(u=0.5, v=0.5, w=0.5)
    test 365 pygeodesy.ltpTuples: Uvw3Tuple(u=Meter, v=Meter, w=Meter)
    test 366 pygeodesy.ltpTuples.Uvw3Tuple.u: 0.5
    test 367 pygeodesy.ltpTuples.Uvw3Tuple.v: 0.5
    test 368 pygeodesy.ltpTuples.Uvw3Tuple.w: 0.5
    test 369 pygeodesy.ltpTuples.Uvw3Tuple._validated: True
    test 370 pygeodesy.ltpTuples.Uvw3Tuple._validated: True
    test 371 pygeodesy.ltpTuples: Xyz4Tuple(x=0.5, y=0.5, z=0.5, ltp=0.5)
    test 372 pygeodesy.ltpTuples: Xyz4Tuple(x=Meter, y=Meter, z=Meter, ltp=_Pass)
    test 373 pygeodesy.ltpTuples.Xyz4Tuple.x: 0.5
    test 374 pygeodesy.ltpTuples.Xyz4Tuple.y: 0.5
    test 375 pygeodesy.ltpTuples.Xyz4Tuple.z: 0.5
    test 376 pygeodesy.ltpTuples.Xyz4Tuple.ltp: 0.5
    test 377 pygeodesy.ltpTuples.Xyz4Tuple._validated: True
    test 378 pygeodesy.ltpTuples.Xyz4Tuple._validated: True
# lazily imported pygeodesy.mgrs by bases.py line 200
    test 379 pygeodesy.mgrs: Mgrs4Tuple(zone='0.5', EN='0.5', easting=0.5, northing=0.5)
    test 380 pygeodesy.mgrs: Mgrs4Tuple(zone=Str, EN=Str, easting=Easting, northing=Northing)
    test 381 pygeodesy.mgrs.Mgrs4Tuple.zone: 0.5
    test 382 pygeodesy.mgrs.Mgrs4Tuple.EN: 0.5
    test 383 pygeodesy.mgrs.Mgrs4Tuple.easting: 0.5
    test 384 pygeodesy.mgrs.Mgrs4Tuple.northing: 0.5
    test 385 pygeodesy.mgrs.Mgrs4Tuple._validated: True
    test 386 pygeodesy.mgrs.Mgrs4Tuple._validated: True
    test 387 pygeodesy.mgrs: Mgrs6Tuple(zone='0.5', EN='0.5', easting=0.5, northing=0.5, band='0.5', datum=0.5)
    test 388 pygeodesy.mgrs: Mgrs6Tuple(zone=Str, EN=Str, easting=Easting, northing=Northing, band=Str, datum=_Pass)
    test 389 pygeodesy.mgrs.Mgrs6Tuple.zone: 0.5
    test 390 pygeodesy.mgrs.Mgrs6Tuple.EN: 0.5
    test 391 pygeodesy.mgrs.Mgrs6Tuple.easting: 0.5
    test 392 pygeodesy.mgrs.Mgrs6Tuple.northing: 0.5
    test 393 pygeodesy.mgrs.Mgrs6Tuple.band: 0.5
    test 394 pygeodesy.mgrs.Mgrs6Tuple.datum: 0.5
    test 395 pygeodesy.mgrs.Mgrs6Tuple._validated: True
    test 396 pygeodesy.mgrs.Mgrs6Tuple._validated: True
    test 397 pygeodesy.namedTuples: Bearing2Tuple(initial=0.5, final=0.5)
    test 398 pygeodesy.namedTuples: Bearing2Tuple(initial=Bearing, final=Bearing)
    test 399 pygeodesy.namedTuples.Bearing2Tuple.initial: 0.5
    test 400 pygeodesy.namedTuples.Bearing2Tuple.final: 0.5
    test 401 pygeodesy.namedTuples.Bearing2Tuple._validated: True
    test 402 pygeodesy.namedTuples.Bearing2Tuple._validated: True
    test 403 pygeodesy.namedTuples: Bounds2Tuple(latlonSW=0.5, latlonNE=0.5)
    test 404 pygeodesy.namedTuples: Bounds2Tuple(latlonSW=_Pass, latlonNE=_Pass)
    test 405 pygeodesy.namedTuples.Bounds2Tuple.latlonSW: 0.5
    test 406 pygeodesy.namedTuples.Bounds2Tuple.latlonNE: 0.5
    test 407 pygeodesy.namedTuples.Bounds2Tuple._validated: True
    test 408 pygeodesy.namedTuples.Bounds2Tuple._validated: True
    test 409 pygeodesy.namedTuples: Bounds4Tuple(latS=0.5, lonW=0.5, latN=0.5, lonE=0.5)
    test 410 pygeodesy.namedTuples: Bounds4Tuple(latS=Lat, lonW=Lon, latN=Lat, lonE=Lon)
    test 411 pygeodesy.namedTuples.Bounds4Tuple.latS: 0.5
    test 412 pygeodesy.namedTuples.Bounds4Tuple.lonW: 0.5
    test 413 pygeodesy.namedTuples.Bounds4Tuple.latN: 0.5
    test 414 pygeodesy.namedTuples.Bounds4Tuple.lonE: 0.5
    test 415 pygeodesy.namedTuples.Bounds4Tuple._validated: True
    test 416 pygeodesy.namedTuples.Bounds4Tuple._validated: True
    test 417 pygeodesy.namedTuples: Destination2Tuple(destination=0.5, final=0.5)
    test 418 pygeodesy.namedTuples: Destination2Tuple(destination=_Pass, final=Bearing)
    test 419 pygeodesy.namedTuples.Destination2Tuple.destination: 0.5
    test 420 pygeodesy.namedTuples.Destination2Tuple.final: 0.5
    test 421 pygeodesy.namedTuples.Destination2Tuple._validated: True
    test 422 pygeodesy.namedTuples.Destination2Tuple._validated: True
    test 423 pygeodesy.namedTuples: Destination3Tuple(lat=0.5, lon=0.5, final=0.5)
    test 424 pygeodesy.namedTuples: Destination3Tuple(lat=Lat, lon=Lon, final=Bearing)
    test 425 pygeodesy.namedTuples.Destination3Tuple.lat: 0.5
    test 426 pygeodesy.namedTuples.Destination3Tuple.lon: 0.5
    test 427 pygeodesy.namedTuples.Destination3Tuple.final: 0.5
    test 428 pygeodesy.namedTuples.Destination3Tuple._validated: True
    test 429 pygeodesy.namedTuples.Destination3Tuple._validated: True
    test 430 pygeodesy.namedTuples: Distance2Tuple(distance=0.5, initial=0.5)
    test 431 pygeodesy.namedTuples: Distance2Tuple(distance=Meter, initial=Bearing)
    test 432 pygeodesy.namedTuples.Distance2Tuple.distance: 0.5
    test 433 pygeodesy.namedTuples.Distance2Tuple.initial: 0.5
    test 434 pygeodesy.namedTuples.Distance2Tuple._validated: True
    test 435 pygeodesy.namedTuples.Distance2Tuple._validated: True
    test 436 pygeodesy.namedTuples: Distance3Tuple(distance=0.5, initial=0.5, final=0.5)
    test 437 pygeodesy.namedTuples: Distance3Tuple(distance=Meter, initial=Bearing, final=Bearing)
    test 438 pygeodesy.namedTuples.Distance3Tuple.distance: 0.5
    test 439 pygeodesy.namedTuples.Distance3Tuple.initial: 0.5
    test 440 pygeodesy.namedTuples.Distance3Tuple.final: 0.5
    test 441 pygeodesy.namedTuples.Distance3Tuple._validated: True
    test 442 pygeodesy.namedTuples.Distance3Tuple._validated: True
    test 443 pygeodesy.namedTuples: Distance4Tuple(distance2=0.5, delta_lat=0.5, delta_lon=0.5, unroll_lon2=0.5)
    test 444 pygeodesy.namedTuples: Distance4Tuple(distance2=Degrees2, delta_lat=Degrees, delta_lon=Degrees, unroll_lon2=Degrees)
    test 445 pygeodesy.namedTuples.Distance4Tuple.distance2: 0.5
    test 446 pygeodesy.namedTuples.Distance4Tuple.delta_lat: 0.5
    test 447 pygeodesy.namedTuples.Distance4Tuple.delta_lon: 0.5
    test 448 pygeodesy.namedTuples.Distance4Tuple.unroll_lon2: 0.5
    test 449 pygeodesy.namedTuples.Distance4Tuple._validated: True
    test 450 pygeodesy.namedTuples.Distance4Tuple._validated: True
    test 451 pygeodesy.namedTuples: EasNor2Tuple(easting=0.5, northing=0.5)
    test 452 pygeodesy.namedTuples: EasNor2Tuple(easting=Easting, northing=Northing)
    test 453 pygeodesy.namedTuples.EasNor2Tuple.easting: 0.5
    test 454 pygeodesy.namedTuples.EasNor2Tuple.northing: 0.5
    test 455 pygeodesy.namedTuples.EasNor2Tuple._validated: True
    test 456 pygeodesy.namedTuples.EasNor2Tuple._validated: True
    test 457 pygeodesy.namedTuples: EasNor3Tuple(easting=0.5, northing=0.5, height=0.5)
    test 458 pygeodesy.namedTuples: EasNor3Tuple(easting=Easting, northing=Northing, height=Height)
    test 459 pygeodesy.namedTuples.EasNor3Tuple.easting: 0.5
    test 460 pygeodesy.namedTuples.EasNor3Tuple.northing: 0.5
    test 461 pygeodesy.namedTuples.EasNor3Tuple.height: 0.5
    test 462 pygeodesy.namedTuples.EasNor3Tuple._validated: True
    test 463 pygeodesy.namedTuples.EasNor3Tuple._validated: True
    test 464 pygeodesy.namedTuples: Forward4Tuple(easting=0.5, northing=0.5, gamma=0.5, scale=0.5)
    test 465 pygeodesy.namedTuples: Forward4Tuple(easting=Easting, northing=Northing, gamma=Degrees, scale=Scalar)
    test 466 pygeodesy.namedTuples.Forward4Tuple.easting: 0.5
    test 467 pygeodesy.namedTuples.Forward4Tuple.northing: 0.5
    test 468 pygeodesy.namedTuples.Forward4Tuple.gamma: 0.5
    test 469 pygeodesy.namedTuples.Forward4Tuple.scale: 0.5
    test 470 pygeodesy.namedTuples.Forward4Tuple._validated: True
    test 471 pygeodesy.namedTuples.Forward4Tuple._validated: True
    test 472 pygeodesy.namedTuples: Intersection3Tuple(point=0.5, outside1=0, outside2=0)
    test 473 pygeodesy.namedTuples: Intersection3Tuple(point=_Pass, outside1=Int, outside2=Int)
    test 474 pygeodesy.namedTuples.Intersection3Tuple.point: 0.5
    test 475 pygeodesy.namedTuples.Intersection3Tuple.outside1: 0.5
    test 476 pygeodesy.namedTuples.Intersection3Tuple.outside2: 0.5
    test 477 pygeodesy.namedTuples.Intersection3Tuple._validated: True
    test 478 pygeodesy.namedTuples.Intersection3Tuple._validated: True
    test 479 pygeodesy.namedTuples: LatLon2Tuple(lat=0.5, lon=0.5)
    test 480 pygeodesy.namedTuples: LatLon2Tuple(lat=Lat, lon=Lon)
    test 481 pygeodesy.namedTuples.LatLon2Tuple.lat: 0.5
    test 482 pygeodesy.namedTuples.LatLon2Tuple.lon: 0.5
    test 483 pygeodesy.namedTuples.LatLon2Tuple._validated: True
    test 484 pygeodesy.namedTuples.LatLon2Tuple._validated: True
    test 485 pygeodesy.namedTuples: LatLon3Tuple(lat=0.5, lon=0.5, height=0.5)
    test 486 pygeodesy.namedTuples: LatLon3Tuple(lat=Lat, lon=Lon, height=Height)
    test 487 pygeodesy.namedTuples.LatLon3Tuple.lat: 0.5
    test 488 pygeodesy.namedTuples.LatLon3Tuple.lon: 0.5
    test 489 pygeodesy.namedTuples.LatLon3Tuple.height: 0.5
    test 490 pygeodesy.namedTuples.LatLon3Tuple._validated: True
    test 491 pygeodesy.namedTuples.LatLon3Tuple._validated: True
    test 492 pygeodesy.namedTuples: LatLon4Tuple(lat=0.5, lon=0.5, height=0.5, datum=0.5)
    test 493 pygeodesy.namedTuples: LatLon4Tuple(lat=Lat, lon=Lon, height=Height, datum=_Pass)
    test 494 pygeodesy.namedTuples.LatLon4Tuple.lat: 0.5
    test 495 pygeodesy.namedTuples.LatLon4Tuple.lon: 0.5
    test 496 pygeodesy.namedTuples.LatLon4Tuple.height: 0.5
    test 497 pygeodesy.namedTuples.LatLon4Tuple.datum: 0.5
    test 498 pygeodesy.namedTuples.LatLon4Tuple._validated: True
    test 499 pygeodesy.namedTuples.LatLon4Tuple._validated: True
    test 500 pygeodesy.namedTuples: LatLonDatum3Tuple(lat=0.5, lon=0.5, datum=0.5)
    test 501 pygeodesy.namedTuples: LatLonDatum3Tuple(lat=Lat, lon=Lon, datum=_Pass)
    test 502 pygeodesy.namedTuples.LatLonDatum3Tuple.lat: 0.5
    test 503 pygeodesy.namedTuples.LatLonDatum3Tuple.lon: 0.5
    test 504 pygeodesy.namedTuples.LatLonDatum3Tuple.datum: 0.5
    test 505 pygeodesy.namedTuples.LatLonDatum3Tuple._validated: True
    test 506 pygeodesy.namedTuples.LatLonDatum3Tuple._validated: True
    test 507 pygeodesy.namedTuples: LatLonDatum5Tuple(lat=0.5, lon=0.5, datum=0.5, gamma=0.5, scale=0.5)
    test 508 pygeodesy.namedTuples: LatLonDatum5Tuple(lat=Lat, lon=Lon, datum=_Pass, gamma=Degrees, scale=Scalar)
    test 509 pygeodesy.namedTuples.LatLonDatum5Tuple.lat: 0.5
    test 510 pygeodesy.namedTuples.LatLonDatum5Tuple.lon: 0.5
    test 511 pygeodesy.namedTuples.LatLonDatum5Tuple.datum: 0.5
    test 512 pygeodesy.namedTuples.LatLonDatum5Tuple.gamma: 0.5
    test 513 pygeodesy.namedTuples.LatLonDatum5Tuple.scale: 0.5
    test 514 pygeodesy.namedTuples.LatLonDatum5Tuple._validated: True
    test 515 pygeodesy.namedTuples.LatLonDatum5Tuple._validated: True
    test 516 pygeodesy.namedTuples: LatLonPrec3Tuple(lat=0.5, lon=0.5, precision=0)
    test 517 pygeodesy.namedTuples: LatLonPrec3Tuple(lat=Lat, lon=Lon, precision=Precision_)
    test 518 pygeodesy.namedTuples.LatLonPrec3Tuple.lat: 0.5
    test 519 pygeodesy.namedTuples.LatLonPrec3Tuple.lon: 0.5
    test 520 pygeodesy.namedTuples.LatLonPrec3Tuple.precision: 0.5
    test 521 pygeodesy.namedTuples.LatLonPrec3Tuple._validated: True
    test 522 pygeodesy.namedTuples.LatLonPrec3Tuple._validated: True
    test 523 pygeodesy.namedTuples: LatLonPrec5Tuple(lat=0.5, lon=0.5, precision=0, height=0.5, radius=0.5)
    test 524 pygeodesy.namedTuples: LatLonPrec5Tuple(lat=Lat, lon=Lon, precision=Precision_, height=Height, radius=Radius)
    test 525 pygeodesy.namedTuples.LatLonPrec5Tuple.lat: 0.5
    test 526 pygeodesy.namedTuples.LatLonPrec5Tuple.lon: 0.5
    test 527 pygeodesy.namedTuples.LatLonPrec5Tuple.precision: 0.5
    test 528 pygeodesy.namedTuples.LatLonPrec5Tuple.height: 0.5
    test 529 pygeodesy.namedTuples.LatLonPrec5Tuple.radius: 0.5
    test 530 pygeodesy.namedTuples.LatLonPrec5Tuple._validated: True
    test 531 pygeodesy.namedTuples.LatLonPrec5Tuple._validated: True
    test 532 pygeodesy.namedTuples: NearestOn2Tuple(closest=0.5, fraction=0.5)
    test 533 pygeodesy.namedTuples: NearestOn2Tuple(closest=_Pass, fraction=_Pass)
    test 534 pygeodesy.namedTuples.NearestOn2Tuple.closest: 0.5
    test 535 pygeodesy.namedTuples.NearestOn2Tuple.fraction: 0.5
    test 536 pygeodesy.namedTuples.NearestOn2Tuple._validated: True
    test 537 pygeodesy.namedTuples.NearestOn2Tuple._validated: True
    test 538 pygeodesy.namedTuples: NearestOn3Tuple(closest=0.5, distance=0.5, angle=0.5)
    test 539 pygeodesy.namedTuples: NearestOn3Tuple(closest=_Pass, distance=Meter, angle=Degrees)
    test 540 pygeodesy.namedTuples.NearestOn3Tuple.closest: 0.5
    test 541 pygeodesy.namedTuples.NearestOn3Tuple.distance: 0.5
    test 542 pygeodesy.namedTuples.NearestOn3Tuple.angle: 0.5
    test 543 pygeodesy.namedTuples.NearestOn3Tuple._validated: True
    test 544 pygeodesy.namedTuples.NearestOn3Tuple._validated: True
    test 545 pygeodesy.namedTuples: NearestOn5Tuple(lat=0.5, lon=0.5, distance=0.5, angle=0.5, height=0.5)
    test 546 pygeodesy.namedTuples: NearestOn5Tuple(lat=Lat, lon=Lon, distance=Degrees, angle=Degrees, height=Meter)
    test 547 pygeodesy.namedTuples.NearestOn5Tuple.lat: 0.5
    test 548 pygeodesy.namedTuples.NearestOn5Tuple.lon: 0.5
    test 549 pygeodesy.namedTuples.NearestOn5Tuple.distance: 0.5
    test 550 pygeodesy.namedTuples.NearestOn5Tuple.angle: 0.5
    test 551 pygeodesy.namedTuples.NearestOn5Tuple.height: 0.5
    test 552 pygeodesy.namedTuples.NearestOn5Tuple._validated: True
    test 553 pygeodesy.namedTuples.NearestOn5Tuple._validated: True
    test 554 pygeodesy.namedTuples: NearestOn6Tuple(closest=0.5, distance=0.5, fi=0.5, j=0, start=0.5, end=0.5)
    test 555 pygeodesy.namedTuples: NearestOn6Tuple(closest=_Pass, distance=Meter, fi=FIx, j=Number_, start=_Pass, end=_Pass)
    test 556 pygeodesy.namedTuples.NearestOn6Tuple.closest: 0.5
    test 557 pygeodesy.namedTuples.NearestOn6Tuple.distance: 0.5
    test 558 pygeodesy.namedTuples.NearestOn6Tuple.fi: 0.5
    test 559 pygeodesy.namedTuples.NearestOn6Tuple.j: 0.5
    test 560 pygeodesy.namedTuples.NearestOn6Tuple.start: 0.5
    test 561 pygeodesy.namedTuples.NearestOn6Tuple.end: 0.5
    test 562 pygeodesy.namedTuples.NearestOn6Tuple._validated: True
    test 563 pygeodesy.namedTuples.NearestOn6Tuple._validated: True
    test 564 pygeodesy.namedTuples: NearestOn8Tuple(closest=0.5, distance=0.5, fi=0.5, j=0, start=0.5, end=0.5, initial=0.5, final=0.5)
    test 565 pygeodesy.namedTuples: NearestOn8Tuple(closest=_Pass, distance=Meter, fi=FIx, j=Number_, start=_Pass, end=_Pass, initial=Bearing, final=Bearing)
    test 566 pygeodesy.namedTuples.NearestOn8Tuple.closest: 0.5
    test 567 pygeodesy.namedTuples.NearestOn8Tuple.distance: 0.5
    test 568 pygeodesy.namedTuples.NearestOn8Tuple.fi: 0.5
    test 569 pygeodesy.namedTuples.NearestOn8Tuple.j: 0.5
    test 570 pygeodesy.namedTuples.NearestOn8Tuple.start: 0.5
    test 571 pygeodesy.namedTuples.NearestOn8Tuple.end: 0.5
    test 572 pygeodesy.namedTuples.NearestOn8Tuple.initial: 0.5
    test 573 pygeodesy.namedTuples.NearestOn8Tuple.final: 0.5
    test 574 pygeodesy.namedTuples.NearestOn8Tuple._validated: True
    test 575 pygeodesy.namedTuples.NearestOn8Tuple._validated: True
    test 576 pygeodesy.namedTuples: PhiLam2Tuple(phi=0.5, lam=0.5)
    test 577 pygeodesy.namedTuples: PhiLam2Tuple(phi=Phi, lam=Lam)
    test 578 pygeodesy.namedTuples.PhiLam2Tuple.phi: 0.5
    test 579 pygeodesy.namedTuples.PhiLam2Tuple.lam: 0.5
    test 580 pygeodesy.namedTuples.PhiLam2Tuple._validated: True
    test 581 pygeodesy.namedTuples.PhiLam2Tuple._validated: True
    test 582 pygeodesy.namedTuples: PhiLam3Tuple(phi=0.5, lam=0.5, height=0.5)
    test 583 pygeodesy.namedTuples: PhiLam3Tuple(phi=Phi, lam=Lam, height=Height)
    test 584 pygeodesy.namedTuples.PhiLam3Tuple.phi: 0.5
    test 585 pygeodesy.namedTuples.PhiLam3Tuple.lam: 0.5
    test 586 pygeodesy.namedTuples.PhiLam3Tuple.height: 0.5
    test 587 pygeodesy.namedTuples.PhiLam3Tuple._validated: True
    test 588 pygeodesy.namedTuples.PhiLam3Tuple._validated: True
    test 589 pygeodesy.namedTuples: PhiLam4Tuple(phi=0.5, lam=0.5, height=0.5, datum=0.5)
    test 590 pygeodesy.namedTuples: PhiLam4Tuple(phi=Phi, lam=Lam, height=Height, datum=_Pass)
    test 591 pygeodesy.namedTuples.PhiLam4Tuple.phi: 0.5
    test 592 pygeodesy.namedTuples.PhiLam4Tuple.lam: 0.5
    test 593 pygeodesy.namedTuples.PhiLam4Tuple.height: 0.5
    test 594 pygeodesy.namedTuples.PhiLam4Tuple.datum: 0.5
    test 595 pygeodesy.namedTuples.PhiLam4Tuple._validated: True
    test 596 pygeodesy.namedTuples.PhiLam4Tuple._validated: True
    test 597 pygeodesy.namedTuples: Point3Tuple(x=0.5, y=0.5, ll=0.5)
    test 598 pygeodesy.namedTuples: Point3Tuple(x=Meter, y=Meter, ll=_Pass)
    test 599 pygeodesy.namedTuples.Point3Tuple.x: 0.5
    test 600 pygeodesy.namedTuples.Point3Tuple.y: 0.5
    test 601 pygeodesy.namedTuples.Point3Tuple.ll: 0.5
    test 602 pygeodesy.namedTuples.Point3Tuple._validated: True
    test 603 pygeodesy.namedTuples.Point3Tuple._validated: True
    test 604 pygeodesy.namedTuples: Points2Tuple(number=0, points=0.5)
    test 605 pygeodesy.namedTuples: Points2Tuple(number=Number_, points=_Pass)
    test 606 pygeodesy.namedTuples.Points2Tuple.number: 0.5
    test 607 pygeodesy.namedTuples.Points2Tuple.points: 0.5
    test 608 pygeodesy.namedTuples.Points2Tuple._validated: True
    test 609 pygeodesy.namedTuples.Points2Tuple._validated: True
    test 610 pygeodesy.namedTuples: Reverse4Tuple(lat=0.5, lon=0.5, gamma=0.5, scale=0.5)
    test 611 pygeodesy.namedTuples: Reverse4Tuple(lat=Lat, lon=Lon, gamma=Degrees, scale=Scalar)
    test 612 pygeodesy.namedTuples.Reverse4Tuple.lat: 0.5
    test 613 pygeodesy.namedTuples.Reverse4Tuple.lon: 0.5
    test 614 pygeodesy.namedTuples.Reverse4Tuple.gamma: 0.5
    test 615 pygeodesy.namedTuples.Reverse4Tuple.scale: 0.5
    test 616 pygeodesy.namedTuples.Reverse4Tuple._validated: True
    test 617 pygeodesy.namedTuples.Reverse4Tuple._validated: True
    test 618 pygeodesy.namedTuples: Triangle7Tuple(A=0.5, a=0.5, B=0.5, b=0.5, C=0.5, c=0.5, area=0.5)
    test 619 pygeodesy.namedTuples: Triangle7Tuple(A=Degrees, a=Meter, B=Degrees, b=Meter, C=Degrees, c=Meter, area=Meter2)
    test 620 pygeodesy.namedTuples.Triangle7Tuple.A: 0.5
    test 621 pygeodesy.namedTuples.Triangle7Tuple.a: 0.5
    test 622 pygeodesy.namedTuples.Triangle7Tuple.B: 0.5
    test 623 pygeodesy.namedTuples.Triangle7Tuple.b: 0.5
    test 624 pygeodesy.namedTuples.Triangle7Tuple.C: 0.5
    test 625 pygeodesy.namedTuples.Triangle7Tuple.c: 0.5
    test 626 pygeodesy.namedTuples.Triangle7Tuple.area: 0.5
    test 627 pygeodesy.namedTuples.Triangle7Tuple._validated: True
    test 628 pygeodesy.namedTuples.Triangle7Tuple._validated: True
    test 629 pygeodesy.namedTuples: Triangle8Tuple(A=0.5, a=0.5, B=0.5, b=0.5, C=0.5, c=0.5, D=0.5, E=0.5)
    test 630 pygeodesy.namedTuples: Triangle8Tuple(A=Radians, a=Radians, B=Radians, b=Radians, C=Radians, c=Radians, D=Radians, E=Radians)
    test 631 pygeodesy.namedTuples.Triangle8Tuple.A: 0.5
    test 632 pygeodesy.namedTuples.Triangle8Tuple.a: 0.5
    test 633 pygeodesy.namedTuples.Triangle8Tuple.B: 0.5
    test 634 pygeodesy.namedTuples.Triangle8Tuple.b: 0.5
    test 635 pygeodesy.namedTuples.Triangle8Tuple.C: 0.5
    test 636 pygeodesy.namedTuples.Triangle8Tuple.c: 0.5
    test 637 pygeodesy.namedTuples.Triangle8Tuple.D: 0.5
    test 638 pygeodesy.namedTuples.Triangle8Tuple.E: 0.5
    test 639 pygeodesy.namedTuples.Triangle8Tuple._validated: True
    test 640 pygeodesy.namedTuples.Triangle8Tuple._validated: True
    test 641 pygeodesy.namedTuples: Trilaterate5Tuple(min=0.5, minPoint=0.5, max=0.5, maxPoint=0.5, n=0)
    test 642 pygeodesy.namedTuples: Trilaterate5Tuple(min=Meter, minPoint=_Pass, max=Meter, maxPoint=_Pass, n=Number_)
    test 643 pygeodesy.namedTuples.Trilaterate5Tuple.min: 0.5
    test 644 pygeodesy.namedTuples.Trilaterate5Tuple.minPoint: 0.5
    test 645 pygeodesy.namedTuples.Trilaterate5Tuple.max: 0.5
    test 646 pygeodesy.namedTuples.Trilaterate5Tuple.maxPoint: 0.5
    test 647 pygeodesy.namedTuples.Trilaterate5Tuple.n: 0.5
    test 648 pygeodesy.namedTuples.Trilaterate5Tuple._validated: True
    test 649 pygeodesy.namedTuples.Trilaterate5Tuple._validated: True
    test 650 pygeodesy.namedTuples: UtmUps2Tuple(zone=0, hemipole='0.5')
    test 651 pygeodesy.namedTuples: UtmUps2Tuple(zone=Number_, hemipole=Str)
    test 652 pygeodesy.namedTuples.UtmUps2Tuple.zone: 0.5
    test 653 pygeodesy.namedTuples.UtmUps2Tuple.hemipole: 0.5
    test 654 pygeodesy.namedTuples.UtmUps2Tuple._validated: True
    test 655 pygeodesy.namedTuples.UtmUps2Tuple._validated: True
    test 656 pygeodesy.namedTuples: UtmUps5Tuple(zone=0, hemipole='0.5', easting=0.5, northing=0.5, band='0.5')
    test 657 pygeodesy.namedTuples: UtmUps5Tuple(zone=Number_, hemipole=Str, easting=Easting, northing=Northing, band=Band)
    test 658 pygeodesy.namedTuples.UtmUps5Tuple.zone: 0.5
    test 659 pygeodesy.namedTuples.UtmUps5Tuple.hemipole: 0.5
    test 660 pygeodesy.namedTuples.UtmUps5Tuple.easting: 0.5
    test 661 pygeodesy.namedTuples.UtmUps5Tuple.northing: 0.5
    test 662 pygeodesy.namedTuples.UtmUps5Tuple.band: 0.5
    test 663 pygeodesy.namedTuples.UtmUps5Tuple._validated: True
    test 664 pygeodesy.namedTuples.UtmUps5Tuple._validated: True
    test 665 pygeodesy.namedTuples: UtmUps8Tuple(zone=0, hemipole='0.5', easting=0.5, northing=0.5, band='0.5', datum=0.5, gamma=0.5, scale=0.5)
    test 666 pygeodesy.namedTuples: UtmUps8Tuple(zone=Number_, hemipole=Str, easting=Easting, northing=Northing, band=Band, datum=_Pass, gamma=Degrees, scale=Scalar)
    test 667 pygeodesy.namedTuples.UtmUps8Tuple.zone: 0.5
    test 668 pygeodesy.namedTuples.UtmUps8Tuple.hemipole: 0.5
    test 669 pygeodesy.namedTuples.UtmUps8Tuple.easting: 0.5
    test 670 pygeodesy.namedTuples.UtmUps8Tuple.northing: 0.5
    test 671 pygeodesy.namedTuples.UtmUps8Tuple.band: 0.5
    test 672 pygeodesy.namedTuples.UtmUps8Tuple.datum: 0.5
    test 673 pygeodesy.namedTuples.UtmUps8Tuple.gamma: 0.5
    test 674 pygeodesy.namedTuples.UtmUps8Tuple.scale: 0.5
    test 675 pygeodesy.namedTuples.UtmUps8Tuple._validated: True
    test 676 pygeodesy.namedTuples.UtmUps8Tuple._validated: True
    test 677 pygeodesy.namedTuples: UtmUpsLatLon5Tuple(zone=0, band='0.5', hemipole='0.5', lat=0.5, lon=0.5)
    test 678 pygeodesy.namedTuples: UtmUpsLatLon5Tuple(zone=Number_, band=Band, hemipole=Str, lat=Lat, lon=Lon)
    test 679 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.zone: 0.5
    test 680 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.band: 0.5
    test 681 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.hemipole: 0.5
    test 682 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.lat: 0.5
    test 683 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.lon: 0.5
    test 684 pygeodesy.namedTuples.UtmUpsLatLon5Tuple._validated: True
    test 685 pygeodesy.namedTuples.UtmUpsLatLon5Tuple._validated: True
    test 686 pygeodesy.namedTuples: Vector2Tuple(x=0.5, y=0.5)
    test 687 pygeodesy.namedTuples: Vector2Tuple(x=Scalar, y=Scalar)
    test 688 pygeodesy.namedTuples.Vector2Tuple.x: 0.5
    test 689 pygeodesy.namedTuples.Vector2Tuple.y: 0.5
    test 690 pygeodesy.namedTuples.Vector2Tuple._validated: True
    test 691 pygeodesy.namedTuples.Vector2Tuple._validated: True
    test 692 pygeodesy.namedTuples: Vector3Tuple(x=0.5, y=0.5, z=0.5)
    test 693 pygeodesy.namedTuples: Vector3Tuple(x=Scalar, y=Scalar, z=Scalar)
    test 694 pygeodesy.namedTuples.Vector3Tuple.x: 0.5
    test 695 pygeodesy.namedTuples.Vector3Tuple.y: 0.5
    test 696 pygeodesy.namedTuples.Vector3Tuple.z: 0.5
    test 697 pygeodesy.namedTuples.Vector3Tuple._validated: True
    test 698 pygeodesy.namedTuples.Vector3Tuple._validated: True
    test 699 pygeodesy.namedTuples: Vector4Tuple(x=0.5, y=0.5, z=0.5, h=0.5)
    test 700 pygeodesy.namedTuples: Vector4Tuple(x=Scalar, y=Scalar, z=Scalar, h=Height)
    test 701 pygeodesy.namedTuples.Vector4Tuple.x: 0.5
    test 702 pygeodesy.namedTuples.Vector4Tuple.y: 0.5
    test 703 pygeodesy.namedTuples.Vector4Tuple.z: 0.5
    test 704 pygeodesy.namedTuples.Vector4Tuple.h: 0.5
    test 705 pygeodesy.namedTuples.Vector4Tuple._validated: True
    test 706 pygeodesy.namedTuples.Vector4Tuple._validated: True
# lazily imported pygeodesy.osgr by bases.py line 200
    test 707 pygeodesy.points: Shape2Tuple(nrows=0, ncols=0)
    test 708 pygeodesy.points: Shape2Tuple(nrows=Number_, ncols=Number_)
    test 709 pygeodesy.points.Shape2Tuple.nrows: 0.5
    test 710 pygeodesy.points.Shape2Tuple.ncols: 0.5
    test 711 pygeodesy.points.Shape2Tuple._validated: True
    test 712 pygeodesy.points.Shape2Tuple._validated: True
# lazily imported pygeodesy.resections by bases.py line 200
    test 713 pygeodesy.resections: Collins5Tuple(pointP=0.5, pointH=0.5, a=0.5, b=0.5, c=0.5)
    test 714 pygeodesy.resections: Collins5Tuple(pointP=_Pass, pointH=_Pass, a=Distance, b=Distance, c=Distance)
    test 715 pygeodesy.resections.Collins5Tuple.pointP: 0.5
    test 716 pygeodesy.resections.Collins5Tuple.pointH: 0.5
    test 717 pygeodesy.resections.Collins5Tuple.a: 0.5
    test 718 pygeodesy.resections.Collins5Tuple.b: 0.5
    test 719 pygeodesy.resections.Collins5Tuple.c: 0.5
    test 720 pygeodesy.resections.Collins5Tuple._validated: True
    test 721 pygeodesy.resections.Collins5Tuple._validated: True
    test 722 pygeodesy.resections: Survey3Tuple(PA=0.5, PB=0.5, PC=0.5)
    test 723 pygeodesy.resections: Survey3Tuple(PA=Distance, PB=Distance, PC=Distance)
    test 724 pygeodesy.resections.Survey3Tuple.PA: 0.5
    test 725 pygeodesy.resections.Survey3Tuple.PB: 0.5
    test 726 pygeodesy.resections.Survey3Tuple.PC: 0.5
    test 727 pygeodesy.resections.Survey3Tuple._validated: True
    test 728 pygeodesy.resections.Survey3Tuple._validated: True
    test 729 pygeodesy.resections: Tienstra7Tuple(pointP=0.5, A=0.5, B=0.5, C=0.5, a=0.5, b=0.5, c=0.5)
    test 730 pygeodesy.resections: Tienstra7Tuple(pointP=_Pass, A=Degrees, B=Degrees, C=Degrees, a=Distance, b=Distance, c=Distance)
    test 731 pygeodesy.resections.Tienstra7Tuple.pointP: 0.5
    test 732 pygeodesy.resections.Tienstra7Tuple.A: 0.5
    test 733 pygeodesy.resections.Tienstra7Tuple.B: 0.5
    test 734 pygeodesy.resections.Tienstra7Tuple.C: 0.5
    test 735 pygeodesy.resections.Tienstra7Tuple.a: 0.5
    test 736 pygeodesy.resections.Tienstra7Tuple.b: 0.5
    test 737 pygeodesy.resections.Tienstra7Tuple.c: 0.5
    test 738 pygeodesy.resections.Tienstra7Tuple._validated: True
    test 739 pygeodesy.resections.Tienstra7Tuple._validated: True
    test 740 pygeodesy.resections: TriAngle5Tuple(radA=0.5, radB=0.5, radC=0.5, rIn=0.5, area=0.5)
    test 741 pygeodesy.resections: TriAngle5Tuple(radA=Radians, radB=Radians, radC=Radians, rIn=Distance, area=_Pass)
    test 742 pygeodesy.resections.TriAngle5Tuple.radA: 0.5
    test 743 pygeodesy.resections.TriAngle5Tuple.radB: 0.5
    test 744 pygeodesy.resections.TriAngle5Tuple.radC: 0.5
    test 745 pygeodesy.resections.TriAngle5Tuple.rIn: 0.5
    test 746 pygeodesy.resections.TriAngle5Tuple.area: 0.5
    test 747 pygeodesy.resections.TriAngle5Tuple._validated: True
    test 748 pygeodesy.resections.TriAngle5Tuple._validated: True
    test 749 pygeodesy.resections: TriSide2Tuple(a=0.5, radA=0.5)
    test 750 pygeodesy.resections: TriSide2Tuple(a=Distance, radA=Radians)
    test 751 pygeodesy.resections.TriSide2Tuple.a: 0.5
    test 752 pygeodesy.resections.TriSide2Tuple.radA: 0.5
    test 753 pygeodesy.resections.TriSide2Tuple._validated: True
    test 754 pygeodesy.resections.TriSide2Tuple._validated: True
    test 755 pygeodesy.resections: TriSide4Tuple(a=0.5, b=0.5, radC=0.5, d=0.5)
    test 756 pygeodesy.resections: TriSide4Tuple(a=Distance, b=Distance, radC=Radians, d=Distance)
    test 757 pygeodesy.resections.TriSide4Tuple.a: 0.5
    test 758 pygeodesy.resections.TriSide4Tuple.b: 0.5
    test 759 pygeodesy.resections.TriSide4Tuple.radC: 0.5
    test 760 pygeodesy.resections.TriSide4Tuple.d: 0.5
    test 761 pygeodesy.resections.TriSide4Tuple._validated: True
    test 762 pygeodesy.resections.TriSide4Tuple._validated: True
# lazily imported pygeodesy.simplify by bases.py line 200
# lazily imported pygeodesy.sphericalBase by bases.py line 200
# lazily imported pygeodesy.sphericalNvector by bases.py line 200
# lazily imported pygeodesy.sphericalTrigonometry by bases.py line 200
# lazily imported pygeodesy.trf by bases.py line 200
    test 763 pygeodesy.trf: TRFXform7Tuple(tx=0.5, ty=0.5, tz=0.5, s=0.5, sx=0.5, sy=0.5, sz=0.5)
    test 764 pygeodesy.trf: TRFXform7Tuple(tx=Float, ty=Float, tz=Float, s=Float, sx=Float, sy=Float, sz=Float)
    test 765 pygeodesy.trf.TRFXform7Tuple.tx: 0.5
    test 766 pygeodesy.trf.TRFXform7Tuple.ty: 0.5
    test 767 pygeodesy.trf.TRFXform7Tuple.tz: 0.5
    test 768 pygeodesy.trf.TRFXform7Tuple.s: 0.5
    test 769 pygeodesy.trf.TRFXform7Tuple.sx: 0.5
    test 770 pygeodesy.trf.TRFXform7Tuple.sy: 0.5
    test 771 pygeodesy.trf.TRFXform7Tuple.sz: 0.5
    test 772 pygeodesy.trf.TRFXform7Tuple._validated: True
    test 773 pygeodesy.trf.TRFXform7Tuple._validated: True
    test 774 pygeodesy.triaxials: BetaOmega2Tuple(beta=0.5, omega=0.5)
    test 775 pygeodesy.triaxials: BetaOmega2Tuple(beta=_Pass, omega=_Pass)
    test 776 pygeodesy.triaxials.BetaOmega2Tuple.beta: 0.5
    test 777 pygeodesy.triaxials.BetaOmega2Tuple.omega: 0.5
    test 778 pygeodesy.triaxials.BetaOmega2Tuple._validated: True
    test 779 pygeodesy.triaxials.BetaOmega2Tuple._validated: True
    test 780 pygeodesy.triaxials: BetaOmega3Tuple(beta=0.5, omega=0.5, height=0.5)
    test 781 pygeodesy.triaxials: BetaOmega3Tuple(beta=_Pass, omega=_Pass, height=Meter)
    test 782 pygeodesy.triaxials.BetaOmega3Tuple.beta: 0.5
    test 783 pygeodesy.triaxials.BetaOmega3Tuple.omega: 0.5
    test 784 pygeodesy.triaxials.BetaOmega3Tuple.height: 0.5
    test 785 pygeodesy.triaxials.BetaOmega3Tuple._validated: True
    test 786 pygeodesy.triaxials.BetaOmega3Tuple._validated: True
    test 787 pygeodesy.triaxials: Jacobi2Tuple(x=0.5, y=0.5)
    test 788 pygeodesy.triaxials: Jacobi2Tuple(x=_Pass, y=_Pass)
    test 789 pygeodesy.triaxials.Jacobi2Tuple.x: 0.5
    test 790 pygeodesy.triaxials.Jacobi2Tuple.y: 0.5
    test 791 pygeodesy.triaxials.Jacobi2Tuple._validated: True
    test 792 pygeodesy.triaxials.Jacobi2Tuple._validated: True
# lazily imported pygeodesy.utmups by bases.py line 200
# lazily imported pygeodesy.vector2d by bases.py line 200
    test 793 pygeodesy.vector2d: Circin6Tuple(radius=0.5, center=0.5, deltas=0.5, cA=0.5, cB=0.5, cC=0.5)
    test 794 pygeodesy.vector2d: Circin6Tuple(radius=Radius, center=_Pass, deltas=_Pass, cA=_Pass, cB=_Pass, cC=_Pass)
    test 795 pygeodesy.vector2d.Circin6Tuple.radius: 0.5
    test 796 pygeodesy.vector2d.Circin6Tuple.center: 0.5
    test 797 pygeodesy.vector2d.Circin6Tuple.deltas: 0.5
    test 798 pygeodesy.vector2d.Circin6Tuple.cA: 0.5
    test 799 pygeodesy.vector2d.Circin6Tuple.cB: 0.5
    test 800 pygeodesy.vector2d.Circin6Tuple.cC: 0.5
    test 801 pygeodesy.vector2d.Circin6Tuple._validated: True
    test 802 pygeodesy.vector2d.Circin6Tuple._validated: True
    test 803 pygeodesy.vector2d: Circum3Tuple(radius=0.5, center=0.5, deltas=0.5)
    test 804 pygeodesy.vector2d: Circum3Tuple(radius=Radius, center=_Pass, deltas=_Pass)
    test 805 pygeodesy.vector2d.Circum3Tuple.radius: 0.5
    test 806 pygeodesy.vector2d.Circum3Tuple.center: 0.5
    test 807 pygeodesy.vector2d.Circum3Tuple.deltas: 0.5
    test 808 pygeodesy.vector2d.Circum3Tuple._validated: True
    test 809 pygeodesy.vector2d.Circum3Tuple._validated: True
    test 810 pygeodesy.vector2d: Circum4Tuple(radius=0.5, center=0.5, rank=0, residuals=0.5)
    test 811 pygeodesy.vector2d: Circum4Tuple(radius=Radius, center=_Pass, rank=Int, residuals=_Pass)
    test 812 pygeodesy.vector2d.Circum4Tuple.radius: 0.5
    test 813 pygeodesy.vector2d.Circum4Tuple.center: 0.5
    test 814 pygeodesy.vector2d.Circum4Tuple.rank: 0.5
    test 815 pygeodesy.vector2d.Circum4Tuple.residuals: 0.5
    test 816 pygeodesy.vector2d.Circum4Tuple._validated: True
    test 817 pygeodesy.vector2d.Circum4Tuple._validated: True
    test 818 pygeodesy.vector2d: Meeus2Tuple(radius=0.5, Type=0.5)
    test 819 pygeodesy.vector2d: Meeus2Tuple(radius=Radius, Type=_Pass)
    test 820 pygeodesy.vector2d.Meeus2Tuple.radius: 0.5
    test 821 pygeodesy.vector2d.Meeus2Tuple.Type: 0.5
    test 822 pygeodesy.vector2d.Meeus2Tuple._validated: True
    test 823 pygeodesy.vector2d.Meeus2Tuple._validated: True
    test 824 pygeodesy.vector2d: Radii11Tuple(rA=0.5, rB=0.5, rC=0.5, cR=0.5, rIn=0.5, riS=0.5, roS=0.5, a=0.5, b=0.5, c=0.5, s=0.5)
    test 825 pygeodesy.vector2d: Radii11Tuple(rA=Meter, rB=Meter, rC=Meter, cR=Meter, rIn=Meter, riS=Meter, roS=Meter, a=Meter, b=Meter, c=Meter, s=Meter)
    test 826 pygeodesy.vector2d.Radii11Tuple.rA: 0.5
    test 827 pygeodesy.vector2d.Radii11Tuple.rB: 0.5
    test 828 pygeodesy.vector2d.Radii11Tuple.rC: 0.5
    test 829 pygeodesy.vector2d.Radii11Tuple.cR: 0.5
    test 830 pygeodesy.vector2d.Radii11Tuple.rIn: 0.5
    test 831 pygeodesy.vector2d.Radii11Tuple.riS: 0.5
    test 832 pygeodesy.vector2d.Radii11Tuple.roS: 0.5
    test 833 pygeodesy.vector2d.Radii11Tuple.a: 0.5
    test 834 pygeodesy.vector2d.Radii11Tuple.b: 0.5
    test 835 pygeodesy.vector2d.Radii11Tuple.c: 0.5
    test 836 pygeodesy.vector2d.Radii11Tuple.s: 0.5
    test 837 pygeodesy.vector2d.Radii11Tuple._validated: True
    test 838 pygeodesy.vector2d.Radii11Tuple._validated: True
    test 839 pygeodesy.vector2d: Soddy4Tuple(radius=0.5, center=0.5, deltas=0.5, outer=0.5)
    test 840 pygeodesy.vector2d: Soddy4Tuple(radius=Radius, center=_Pass, deltas=_Pass, outer=Radius)
    test 841 pygeodesy.vector2d.Soddy4Tuple.radius: 0.5
    test 842 pygeodesy.vector2d.Soddy4Tuple.center: 0.5
    test 843 pygeodesy.vector2d.Soddy4Tuple.deltas: 0.5
    test 844 pygeodesy.vector2d.Soddy4Tuple.outer: 0.5
    test 845 pygeodesy.vector2d.Soddy4Tuple._validated: True
    test 846 pygeodesy.vector2d.Soddy4Tuple._validated: True
# lazily imported pygeodesy.webmercator by bases.py line 200
    test 847 pygeodesy.webmercator: EasNorRadius3Tuple(easting=0.5, northing=0.5, radius=0.5)
    test 848 pygeodesy.webmercator: EasNorRadius3Tuple(easting=Easting, northing=Northing, radius=Radius)
    test 849 pygeodesy.webmercator.EasNorRadius3Tuple.easting: 0.5
    test 850 pygeodesy.webmercator.EasNorRadius3Tuple.northing: 0.5
    test 851 pygeodesy.webmercator.EasNorRadius3Tuple.radius: 0.5
    test 852 pygeodesy.webmercator.EasNorRadius3Tuple._validated: True
    test 853 pygeodesy.webmercator.EasNorRadius3Tuple._validated: True
# lazily imported pygeodesy.wgrs by bases.py line 200
# lazily imported pygeodesy.auxilats by bases.py line 200
# lazily imported pygeodesy.geodesicx by bases.py line 200
# lazily imported pygeodesy.rhumb by bases.py line 200
    test 854 pygeodesy.rhumb.solve: RhumbSolve7Tuple(lat1=0.5, lon1=0.5, lat2=0.5, lon2=0.5, azi12=0.5, s12=0.5, S12=0.5)
    test 855 pygeodesy.rhumb.solve: RhumbSolve7Tuple(lat1=Lat, lon1=Lon, lat2=Lat, lon2=Lon, azi12=Bearing, s12=Meter, S12=Meter2)
    test 856 pygeodesy.rhumb.solve.RhumbSolve7Tuple.lat1: 0.5
    test 857 pygeodesy.rhumb.solve.RhumbSolve7Tuple.lon1: 0.5
    test 858 pygeodesy.rhumb.solve.RhumbSolve7Tuple.lat2: 0.5
    test 859 pygeodesy.rhumb.solve.RhumbSolve7Tuple.lon2: 0.5
    test 860 pygeodesy.rhumb.solve.RhumbSolve7Tuple.azi12: 0.5
    test 861 pygeodesy.rhumb.solve.RhumbSolve7Tuple.s12: 0.5
    test 862 pygeodesy.rhumb.solve.RhumbSolve7Tuple.S12: 0.5
    test 863 pygeodesy.rhumb.solve.RhumbSolve7Tuple._validated: True
    test 864 pygeodesy.rhumb.solve.RhumbSolve7Tuple._validated: True
    test 865 pygeodesy.named._NamedTuple._validated: False

    all 865 testNamedTuples.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 45.675 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testNavlabExamples.py
./pygeodesy/ellipsoidalNvector.py:58: DeprecationWarning: class L{pygeodesy.ellipsoidalNvector.Ned} has been DEPRECATED on 2024.02.04, use class L{pygeodesy.Ned}.
  deprecated_class(self.__class__)
./test/testNavlabExamples.py:41: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toRepr} has been DEPRECATED, use class L{pygeodesy.Ned}.
  t.test(1, 'delta', delta.toRepr(prec=3), '[L:470357.384, B:45.109°, E:-2.12°]')  # DEPRECATED
./test/testNavlabExamples.py:43: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.bearing} has been DEPRECATED, use C{azimuth}.
  t.test(1, 'bearing', delta.bearing, 45.109, fmt='%.3f')  # 45.109°
./test/testNavlabExamples.py:44: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.length} has been DEPRECATED, use C{slantrange}.
  t.test(1, 'length', delta.length, 470357.384, fmt='%.3f')  # 470357.384 m
./test/testNavlabExamples.py:63: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toRepr} has been DEPRECATED, use class L{pygeodesy.Ned}.
  t.test(2, 'delta', delta.toRepr(prec=3), '[L:3606.938, B:33.69°, E:-1.589°]')  # DEPRECATED
./pygeodesy/ellipsoidalNvector.py:244: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.ned} has been DEPRECATED, use property C{ned4}.
  dn = delta.ned[:3]  # XXX Ned4Tuple.to3Tuple
./pygeodesy/deprecated/classes.py:32: DeprecationWarning: class L{pygeodesy.deprecated.classes.Ned3Tuple} has been DEPRECATED, use class L{Ned4Tuple}, ignoring item C{ltp}.
  deprecated_class(cls)
./test/testNavlabExamples.py:71: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toRepr} has been DEPRECATED, use class L{pygeodesy.Ned}.
  t.test(2, 'delta', delta.toRepr(prec=3), '[L:116807.681, B:222.493°, E:-0.524°]')  # DEPRECATED
./test/testNavlabExamples.py:143: DeprecationWarning: function L{pygeodesy.ellipsoidalNvector.toNed} has been DEPRECATED, use L{pygeodesy.Aer}C{(bearing, elevation, distance).xyzLocal.toNed(B{Ned}, name=B{name})} or L{XyzLocal}C{(pygeodesy.Aer(bearing, elevation, distance)).toNed(B{Ned}, name=B{name})}.
  d = ellipsoidalNvector.toNed(116809.178, 222.493, -0.5416)
./test/testNavlabExamples.py:145: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.bearing} has been DEPRECATED, use C{azimuth}.
  TestsBase.test(t, 'bearing',   d.bearing, '227.507',  fmt='%.3f')  # '222.493'
./test/testNavlabExamples.py:147: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.length} has been DEPRECATED, use C{slantrange}.
  TestsBase.test(t, 'length',    d.length, '116809.178',  fmt='%.3f')
./test/testNavlabExamples.py:148: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toVector3d} has been DEPRECATED, use property L{xyz}.
  v = d.toVector3d()
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Datums from .datums by testNavlabExamples.py line 18
# lazily imported pygeodesy.F_D from .dms by testNavlabExamples.py line 18
# lazily imported pygeodesy.ellipsoidalExact by testNavlabExamples.py line 18
# lazily imported pygeodesy.ellipsoidalNvector by testNavlabExamples.py line 18
# lazily imported pygeodesy.ellipsoidalVincenty by testNavlabExamples.py line 18
# lazily imported pygeodesy.sphericalNvector by testNavlabExamples.py line 18
# lazily imported pygeodesy.sphericalTrigonometry by testNavlabExamples.py line 18
# lazily imported pygeodesy.EcefVeness from .ecef by testNavlabExamples.py line 18
# lazily imported pygeodesy.Ned from .ltpTuples by testNavlabExamples.py line 18
# lazily imported pygeodesy.Ned4Tuple from .ltpTuples by testNavlabExamples.py line 18

    testing testNavlabExamples.py 23.03.27 isLazy=3
    test 1 Example 1 delta: [331730.863, 332998.501, 17398.304]
    test 2 Example 1 delta: [L:470357.384, B:45.109°, E:-2.12°]
    test 3 Example 1 elevation: -2.1198
    test 4 Example 1 bearing: 45.109
    test 5 Example 1 length: 470357.384

    test 6 Example 1 delta: [331730.863, 332998.501, 17398.304]
    test 7 Example 1 delta: <class 'pygeodesy.ltpTuples.Ned'>
# lazily imported pygeodesy.ltp by ellipsoidalNvector.py line 198
    test 8 Example 1 delta: (331730.863099, 332998.501491, 17398.304211, Ltp(lat0=1.0, lon0=2.0, height0=3.0, M=EcefMatrix(_0_0_=-0.034899, _0_1_=-0.017442, _0_2_=0.999239, _1_0_=0.999391, _1_1_=-0.000609, _1_2_=0.034894, _2_0_=0.0, _2_1_=0.999848, _2_2_=0.017452), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name=''))
    test 9 Example 1 delta: <class 'pygeodesy.ltpTuples.Ned4Tuple'>
    test 10 Example 1 delta: <class 'pygeodesy.ecef.EcefVeness'>

    test 11 Example 2 LatLon: 53.301°N, 063.435°E, +400.00m
    test 12 Example 2 toNvector: (0.267, 0.535, 0.802, +400.00)
    test 13 Example 2 delta: [3000.0, 2000.0, 100.0]
    test 14 Example 2 delta: [L:3606.938, B:33.69°, E:-1.589°]
# lazily imported pygeodesy.deprecated by ltpTuples.py line 531
    test 15 Example 2 destinationNed: 53.327702°N, 063.465119°E, +296.01m  FAILED, KNOWN, expected 53.327726°N, 063.464965°E, +299.138m
    test 16 Example 2 delta: [-86126, -78900, 1069]
    test 17 Example 2 delta: [L:116807.681, B:222.493°, E:-0.524°]
    test 18 Example 2 destinationNed: 48.88667°N, 002.37472°E, +0.00m  FAILED, KNOWN, expected 48.88667°N, 002.37472°E

    test 19 Example 3 toLatLon: 39.379°N, 048.013°W, +4702059.83m

    test 20 Example 4 toCartesian: [6373290.277, 222560.201, 110568.827]

    test 21 Example 5 distanceTo: 332457

    test 22 Example 6 intermediateChordTo: 89.799981°N, 180.0°E
    test 23 Example 6 intermediateTo: 89.8°N, 180.0°E
    test 24 Example 6 intermediateChordTo: 51.372294°N, 000.707192°E
    test 25 Example 6 intermediateTo: 51.372084°N, 000.707337°E

    test 26 Example 7 meanOf: 67.2362°N, 006.9175°W

    test 27 Example 8 destination(pygeodesy.sphericalNvector): 79.991549°N, 090.017698°W
    test 28 Example 8 destination(pygeodesy.sphericalTrigonometry): 79.991549°N, 090.017698°W
    test 29 Example 8 destination(pygeodesy.ellipsoidalVincenty): 79.991584°N, 090.017621°W
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
# lazily imported pygeodesy.elliptic by gxline.py line 288
    test 30 Example 8 destination(pygeodesy.ellipsoidalExact): 79.991584°N, 090.017621°W

    test 31 Example 9 intersection: 40.318643°N, 055.901868°E

    test 32 Example 10 crossTrackDistance: 11118

    test 33 toNed: [-78901.1, -86126.6, 1104.1]
    test 34 bearing: 227.507
    test 35 elevation: -0.5416
    test 36 length: 116809.178
    test 37 toVector3d: (-86126.6, -78901.1, -1104.1)

    19 of 37 testNavlabExamples.py tests (51.4%) FAILED, incl. 2 KNOWN plus 17 DeprecationWarnings (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 14.543 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testOsgr.py
./test/testOsgr.py:25: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:27: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:25: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:27: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:25: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:27: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.F_D from .dms by testOsgr.py line 11
# lazily imported pygeodesy.F_DEG from .dms by testOsgr.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testOsgr.py line 11
# lazily imported pygeodesy.fstr from .streprs by testOsgr.py line 11
# lazily imported pygeodesy.Datums from .datums by testOsgr.py line 11
# lazily imported pygeodesy.Osgr from .osgr by testOsgr.py line 11
# lazily imported pygeodesy.parseOSGR from .osgr by testOsgr.py line 11
# lazily imported pygeodesy.toOsgr from .osgr by testOsgr.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testOsgr.py line 221
# lazily imported pygeodesy.ellipsoidalKarney by testOsgr.py line 221
# lazily imported pygeodesy.ellipsoidalNvector by testOsgr.py line 221
# lazily imported pygeodesy.ellipsoidalVincenty by testOsgr.py line 221

    testing testOsgr.py 23.03.27 (module pygeodesy.osgr 24.06.15) isLazy=3

    testOSgr(pygeodesy.ellipsoidalNvector, 24.06.15)
    test 1 WGS84: 51.4778°N, 000.0016°W
# lazily imported pygeodesy.ecef by ellipsoidalNvector.py line 521
    test 2 OSGB36: 51.477284°N, 000.00002°E
    test 3 WGS84: 51.4778°N, 000.0016°W
    test 4 OSgr1: TG 51409 13177
    test 5 OSgr1: [G:TG, E:51409, N:13177]
    test 6 iteration: None
    test 7 toLatLon1: 52°39′28.72″N, 001°42′57.79″E
    test 8 toLatLon1: 52.657979°N, 001.716052°E
    test 9 iteration: 4
    test 10 toOsgr1: 651409.903,313177.270
    test 11 toOsgr1: 651409.903,313177.270
    test 12 toOsgr1: TG5140990313177270
    test 13 toLatLon2: 52°39′27.25″N, 001°43′04.52″E
    test 14 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657570°N, 001.717922°E
    test 15 iteration: 4
    test 16 toOsgr2: 651409,313177
    test 17 toOsgr2: 651409,313177
    test 18 toOsgr3: TG 51409 13177
    test 19 toLatLon3: (52.65798, 1.71605, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
# lazily imported pygeodesy.ktm by osgr.py line 107
    test 20 toOsgr4: TG 51409 13177
    test 21 toLatLon4: (52.657570000, 1.717910000, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 22 toLatLon4: (52.657569999, 1.717910045, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 23 toLatLon4: (52.657978296, 1.716040366, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 24 toLatLon4: (52.657978295, 1.716040411, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 25 toOsgr5: 0.001
    test 26 toOsgr5: TG5140900013177000
    test 27 toOsgr5: 651409.000,313177.000
    test 28 toLatLon5: (52.657976595, 1.716038422, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 29 OSGR1: TG 48251 11932
    test 30 OSGR1: [G:TG, E:48251, N:11932]
    test 31 OSGR2: TG 51409 13177
    test 32 OSGR2: [G:TG, E:51409, N:13177]
    test 33 OSGR3: TG 51409 13177
    test 34 OSGR3: [G:TG, E:51409, N:13177]
    test 35 OSGR4: TG 51409 13177
    test 36 OSGR4: [G:TG, E:51409, N:13177]
    test 37 OSGR5: 651409,313177
    test 38 OSGR5: TG51409001317700
    test 39 OSGR5: 651409,313177
    test 40 OSGR5: 651409.000000,313177.000000
    test 41 OSGR5: 651409.00,313177.00
    test 42 OSGR5: [OSGR:651409.000,313177.000]
    test 43 OSGR5: [OSGR:651409,313177]
    test 44 OSGR5: [OSGR:651409.000,313177.000]
    test 45 OSGR5: [OSGR:651,313]
    test 46 OSGR6: 651409.000,313177.000
    test 47 OSGR6: 651409,313177
    test 48 OSGR6: (651409, 313177)
    test 49 OSGR6: 651409,313177
    test 50 OSGR6: 651409,313177
    test 51 OSGR6: (651409, 313177)
    test 52 OSGR6: 651409 313177

    test 53 issue: 38
    test 54 toOsgr: [G:TL, E:29158, N:35174]
    test 55 toOsgr: 529158.072, 235174.785
    test 56 toOsgr: OSGB36
    test 57 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 58 toLatLonOSGB36: OSGB36
    test 59 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 60 toLatLonWGS84 : WGS84

    test 61 Osgr: [G:TQ, E:32014, N:23971]
    test 62 Osgr: 532014.0, 123971.0
    test 63 Osgr: OSGB36
    test 64 toLatLonOSGB36: 50.999425N, 000.118417W
    test 65 toLatLonOSGB36: OSGB36
    test 66 toLatLonWGS84 : 50.999995N, 000.120004W
    test 67 toLatLonWGS84 : WGS84
    test 68 parseOSGR: [G:TQ, E:32014, N:23971]
    test 69 parseOSGR: 532014.0, 123971.0
    test 70 parseOSGR: OSGB36
    test 71 toLatLonOSGB36: 50.999425N, 000.118417W
    test 72 toLatLonOSGB36: OSGB36
    test 73 toLatLonWGS84: 50.999995N, 000.120004W
    test 74 toLatLonWGS84: WGS84
    test 75 toOsgr: [G:TQ, E:32013, N:23971]
    test 76 toOsgr: 532013.969, 123971.046
    test 77 toOsgr: OSGB36
    test 78 toLatLonOSGB36: 50.999426N, 000.118417W
    test 79 toLatLonOSGB36: OSGB36
    test 80 toLatLonWGS84 : 50.999995N, 000.120004W
    test 81 toLatLonWGS84 : WGS84
    test 82 toOsgr: [G:TQ, E:48853, N:24427]
    test 83 toOsgr: 548853.602, 124427.985
    test 84 toOsgr: OSGB36
    test 85 toLatLonOSGB36: 50.999422N, 000.121618E
    test 86 toLatLonOSGB36: OSGB36
    test 87 toLatLonWGS84 : 50.999995N, 000.120004E
    test 88 toLatLonWGS84 : WGS84

    test 89 LatLon: 49.926244°N, 006.297934°W
    test 90 datum: WGS84
    test 91 datum: OSGB36
    test 92 toOsgr: [G:SV, E:91645, N:11753]
    test 93 datum: OSGB36
    test 94 LatLon: 49.926244°N, 006.297934°W
    test 95 datum: WGS84
    test 96 distanceTo: 0.0103  FAILED, KNOWN, expected 0.0104

    test 97 prec=-2: [G:SV, E:91600, N:11700]

    test 98 toLatLon: 52.0N, 000.12W
    test 99 toLatLon: 52.0N, 000.12W
    test 100 toLatLon: 52.0N, 000.12W
    test 101 toLatLon: 52.0N, 000.12W
    test 102 toLatLon: 52.0N, 000.12W
    test 103 toLatLon: 52.0N, 000.12W
    test 104 toLatLon: 52.0N, 000.12W
    test 105 toLatLon: 52.0N, 000.12W

    testOSgr(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 106 WGS84: 51.4778°N, 000.0016°W
    test 107 OSGB36: 51.477284°N, 000.00002°E
    test 108 WGS84: 51.4778°N, 000.0016°W
    test 109 OSgr1: TG 51409 13177
    test 110 OSgr1: [G:TG, E:51409, N:13177]
    test 111 iteration: None
    test 112 toLatLon1: 52°39′28.72″N, 001°42′57.79″E
    test 113 toLatLon1: 52.657979°N, 001.716052°E
    test 114 iteration: 4
    test 115 toOsgr1: 651409.903,313177.270
    test 116 toOsgr1: 651409.903,313177.270
    test 117 toOsgr1: TG5140990313177270
    test 118 toLatLon2: 52°39′27.25″N, 001°43′04.52″E
    test 119 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657570°N, 001.717922°E
    test 120 iteration: 4
    test 121 toOsgr2: 651409,313177
    test 122 toOsgr2: 651409,313177
    test 123 toOsgr3: TG 51409 13177
    test 124 toLatLon3: (52.65798, 1.71605, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 125 toOsgr4: TG 51409 13177
    test 126 toLatLon4: (52.657570000, 1.717910000, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 127 toLatLon4: (52.657569999, 1.717910045, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 128 toLatLon4: (52.657978296, 1.716040366, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 129 toLatLon4: (52.657978295, 1.716040411, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 130 toOsgr5: 0.001
    test 131 toOsgr5: TG5140900013177000
    test 132 toOsgr5: 651409.000,313177.000
    test 133 toLatLon5: (52.657976595, 1.716038422, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 134 OSGR1: TG 48251 11932
    test 135 OSGR1: [G:TG, E:48251, N:11932]
    test 136 OSGR2: TG 51409 13177
    test 137 OSGR2: [G:TG, E:51409, N:13177]
    test 138 OSGR3: TG 51409 13177
    test 139 OSGR3: [G:TG, E:51409, N:13177]
    test 140 OSGR4: TG 51409 13177
    test 141 OSGR4: [G:TG, E:51409, N:13177]
    test 142 OSGR5: 651409,313177
    test 143 OSGR5: TG51409001317700
    test 144 OSGR5: 651409,313177
    test 145 OSGR5: 651409.000000,313177.000000
    test 146 OSGR5: 651409.00,313177.00
    test 147 OSGR5: [OSGR:651409.000,313177.000]
    test 148 OSGR5: [OSGR:651409,313177]
    test 149 OSGR5: [OSGR:651409.000,313177.000]
    test 150 OSGR5: [OSGR:651,313]
    test 151 OSGR6: 651409.000,313177.000
    test 152 OSGR6: 651409,313177
    test 153 OSGR6: (651409, 313177)
    test 154 OSGR6: 651409,313177
    test 155 OSGR6: 651409,313177
    test 156 OSGR6: (651409, 313177)
    test 157 OSGR6: 651409 313177

    test 158 issue: 38
    test 159 toOsgr: [G:TL, E:29158, N:35174]
    test 160 toOsgr: 529158.072, 235174.785
    test 161 toOsgr: OSGB36
    test 162 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 163 toLatLonOSGB36: OSGB36
    test 164 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 165 toLatLonWGS84 : WGS84

    test 166 Osgr: [G:TQ, E:32014, N:23971]
    test 167 Osgr: 532014.0, 123971.0
    test 168 Osgr: OSGB36
    test 169 toLatLonOSGB36: 50.999425N, 000.118417W
    test 170 toLatLonOSGB36: OSGB36
    test 171 toLatLonWGS84 : 50.999995N, 000.120004W
    test 172 toLatLonWGS84 : WGS84
    test 173 parseOSGR: [G:TQ, E:32014, N:23971]
    test 174 parseOSGR: 532014.0, 123971.0
    test 175 parseOSGR: OSGB36
    test 176 toLatLonOSGB36: 50.999425N, 000.118417W
    test 177 toLatLonOSGB36: OSGB36
    test 178 toLatLonWGS84: 50.999995N, 000.120004W
    test 179 toLatLonWGS84: WGS84
    test 180 toOsgr: [G:TQ, E:32013, N:23971]
    test 181 toOsgr: 532013.969, 123971.046
    test 182 toOsgr: OSGB36
    test 183 toLatLonOSGB36: 50.999426N, 000.118417W
    test 184 toLatLonOSGB36: OSGB36
    test 185 toLatLonWGS84 : 50.999995N, 000.120004W
    test 186 toLatLonWGS84 : WGS84
    test 187 toOsgr: [G:TQ, E:48853, N:24427]
    test 188 toOsgr: 548853.602, 124427.985
    test 189 toOsgr: OSGB36
    test 190 toLatLonOSGB36: 50.999422N, 000.121618E
    test 191 toLatLonOSGB36: OSGB36
    test 192 toLatLonWGS84 : 50.999995N, 000.120004E
    test 193 toLatLonWGS84 : WGS84

    test 194 LatLon: 49.926244°N, 006.297934°W
    test 195 datum: WGS84
    test 196 datum: OSGB36
    test 197 toOsgr: [G:SV, E:91645, N:11753]
    test 198 datum: OSGB36
    test 199 LatLon: 49.926244°N, 006.297934°W
    test 200 datum: WGS84
    test 201 distanceTo: 0.0104

    test 202 prec=-2: [G:SV, E:91600, N:11700]

    test 203 toLatLon: 52.0N, 000.12W
    test 204 toLatLon: 52.0N, 000.12W
    test 205 toLatLon: 52.0N, 000.12W
    test 206 toLatLon: 52.0N, 000.12W
    test 207 toLatLon: 52.0N, 000.12W
    test 208 toLatLon: 52.0N, 000.12W
    test 209 toLatLon: 52.0N, 000.12W
    test 210 toLatLon: 52.0N, 000.12W

    testOSgr(pygeodesy.ellipsoidalExact, 24.06.11)
    test 211 WGS84: 51.4778°N, 000.0016°W
    test 212 OSGB36: 51.477284°N, 000.00002°E
    test 213 WGS84: 51.4778°N, 000.0016°W
    test 214 OSgr1: TG 51409 13177
    test 215 OSgr1: [G:TG, E:51409, N:13177]
    test 216 iteration: None
    test 217 toLatLon1: 52°39′28.72″N, 001°42′57.79″E
    test 218 toLatLon1: 52.657979°N, 001.716052°E
    test 219 iteration: 4
    test 220 toOsgr1: 651409.903,313177.270
    test 221 toOsgr1: 651409.903,313177.270
    test 222 toOsgr1: TG5140990313177270
    test 223 toLatLon2: 52°39′27.25″N, 001°43′04.52″E
    test 224 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657570°N, 001.717922°E
    test 225 iteration: 4
    test 226 toOsgr2: 651409,313177
    test 227 toOsgr2: 651409,313177
    test 228 toOsgr3: TG 51409 13177
    test 229 toLatLon3: (52.65798, 1.71605, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 230 toOsgr4: TG 51409 13177
    test 231 toLatLon4: (52.657570000, 1.717910000, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 232 toLatLon4: (52.657569999, 1.717910045, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 233 toLatLon4: (52.657978296, 1.716040366, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 234 toLatLon4: (52.657978295, 1.716040411, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 235 toOsgr5: 0.001
    test 236 toOsgr5: TG5140900013177000
    test 237 toOsgr5: 651409.000,313177.000
    test 238 toLatLon5: (52.657976595, 1.716038422, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 239 OSGR1: TG 48251 11932
    test 240 OSGR1: [G:TG, E:48251, N:11932]
    test 241 OSGR2: TG 51409 13177
    test 242 OSGR2: [G:TG, E:51409, N:13177]
    test 243 OSGR3: TG 51409 13177
    test 244 OSGR3: [G:TG, E:51409, N:13177]
    test 245 OSGR4: TG 51409 13177
    test 246 OSGR4: [G:TG, E:51409, N:13177]
    test 247 OSGR5: 651409,313177
    test 248 OSGR5: TG51409001317700
    test 249 OSGR5: 651409,313177
    test 250 OSGR5: 651409.000000,313177.000000
    test 251 OSGR5: 651409.00,313177.00
    test 252 OSGR5: [OSGR:651409.000,313177.000]
    test 253 OSGR5: [OSGR:651409,313177]
    test 254 OSGR5: [OSGR:651409.000,313177.000]
    test 255 OSGR5: [OSGR:651,313]
    test 256 OSGR6: 651409.000,313177.000
    test 257 OSGR6: 651409,313177
    test 258 OSGR6: (651409, 313177)
    test 259 OSGR6: 651409,313177
    test 260 OSGR6: 651409,313177
    test 261 OSGR6: (651409, 313177)
    test 262 OSGR6: 651409 313177

    test 263 issue: 38
    test 264 toOsgr: [G:TL, E:29158, N:35174]
    test 265 toOsgr: 529158.072, 235174.785
    test 266 toOsgr: OSGB36
    test 267 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 268 toLatLonOSGB36: OSGB36
    test 269 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 270 toLatLonWGS84 : WGS84

    test 271 Osgr: [G:TQ, E:32014, N:23971]
    test 272 Osgr: 532014.0, 123971.0
    test 273 Osgr: OSGB36
    test 274 toLatLonOSGB36: 50.999425N, 000.118417W
    test 275 toLatLonOSGB36: OSGB36
    test 276 toLatLonWGS84 : 50.999995N, 000.120004W
    test 277 toLatLonWGS84 : WGS84
    test 278 parseOSGR: [G:TQ, E:32014, N:23971]
    test 279 parseOSGR: 532014.0, 123971.0
    test 280 parseOSGR: OSGB36
    test 281 toLatLonOSGB36: 50.999425N, 000.118417W
    test 282 toLatLonOSGB36: OSGB36
    test 283 toLatLonWGS84: 50.999995N, 000.120004W
    test 284 toLatLonWGS84: WGS84
    test 285 toOsgr: [G:TQ, E:32013, N:23971]
    test 286 toOsgr: 532013.969, 123971.046
    test 287 toOsgr: OSGB36
    test 288 toLatLonOSGB36: 50.999426N, 000.118417W
    test 289 toLatLonOSGB36: OSGB36
    test 290 toLatLonWGS84 : 50.999995N, 000.120004W
    test 291 toLatLonWGS84 : WGS84
    test 292 toOsgr: [G:TQ, E:48853, N:24427]
    test 293 toOsgr: 548853.602, 124427.985
    test 294 toOsgr: OSGB36
    test 295 toLatLonOSGB36: 50.999422N, 000.121618E
    test 296 toLatLonOSGB36: OSGB36
    test 297 toLatLonWGS84 : 50.999995N, 000.120004E
    test 298 toLatLonWGS84 : WGS84

    test 299 LatLon: 49.926244°N, 006.297934°W
    test 300 datum: WGS84
    test 301 datum: OSGB36
    test 302 toOsgr: [G:SV, E:91645, N:11753]
    test 303 datum: OSGB36
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
    test 304 LatLon: 49.926244°N, 006.297934°W
    test 305 datum: WGS84
    test 306 distanceTo: 0.0104

    test 307 prec=-2: [G:SV, E:91600, N:11700]

    test 308 toLatLon: 52.0N, 000.12W
    test 309 toLatLon: 52.0N, 000.12W
    test 310 toLatLon: 52.0N, 000.12W
    test 311 toLatLon: 52.0N, 000.12W
    test 312 toLatLon: 52.0N, 000.12W
    test 313 toLatLon: 52.0N, 000.12W
    test 314 toLatLon: 52.0N, 000.12W
    test 315 toLatLon: 52.0N, 000.12W

    10 of 315 testOsgr.py tests (3.2%) FAILED, incl. 4 KNOWN plus 6 DeprecationWarnings (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 35.476 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testPoints.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.EPS from .constants by testPoints.py line 12
# lazily imported pygeodesy.R_M from .constants by testPoints.py line 12
# lazily imported pygeodesy.R_MA from .constants by testPoints.py line 12
# lazily imported pygeodesy.LatLon_ from .points by testPoints.py line 12
# lazily imported pygeodesy.LatLon2psxy from .points by testPoints.py line 12
# lazily imported pygeodesy.Numpy2LatLon from .points by testPoints.py line 12
# lazily imported pygeodesy.Tuple2LatLon from .points by testPoints.py line 12
# lazily imported pygeodesy.areaOf from .points by testPoints.py line 12
# lazily imported pygeodesy.boundsOf from .points by testPoints.py line 12
# lazily imported pygeodesy.centroidOf from .points by testPoints.py line 12
# lazily imported pygeodesy.classname from .named by testPoints.py line 12
# lazily imported pygeodesy.fstr from .streprs by testPoints.py line 12
# lazily imported pygeodesy.isclockwise from .points by testPoints.py line 12
# lazily imported pygeodesy.isconvex from .points by testPoints.py line 12
# lazily imported pygeodesy.ispolar from .points by testPoints.py line 12
# lazily imported pygeodesy.luneOf from .points by testPoints.py line 12
# lazily imported pygeodesy.nearestOn5 from .points by testPoints.py line 12
# lazily imported pygeodesy.perimeterOf from .points by testPoints.py line 12
# lazily imported pygeodesy.quadOf from .points by testPoints.py line 12
# lazily imported pygeodesy.R_KM from .constants by testRoutes.py line 13
# lazily imported pygeodesy.ellipsoidalVincenty by testRoutes.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testRoutes.py line 13
# lazily imported pygeodesy.unstr from .streprs by testRoutes.py line 13

    testing testPoints.py 23.12.03 (module pygeodesy.points 24.06.15) isLazy=3
    test 1 sizeof(LatLon_.__dict__): 48
# lazily imported pygeodesy.booleans by iters.py line 503
    test 2 LatLon2psxy.ABC: True
    test 3 LatLon2psxy.epsilon: 2.220446049250313e-16
    test 4 LatLon2psxy.epsilon: 0.0
    test 5 LatLon2psxy.len: 69
    test 6 LatLon2psxy.iter: 69
    test 7 LatLon2psxy.slice1: 11
    test 8 LatLon2psxy.slice2: <class 'pygeodesy.points.LatLon2psxy'>
    test 9 LatLon2psxy.slice3: (-0.701418, 52.220485, LatLon_(52.220485°N, 000.701418°W))
    test 10 LatLon2psxy.str/repr: LatLon2psxy('[LatLon_(52.220489°N, 000.701206°W) ... ][69]', closed=False, radius=None, wrap=False)
    test 11 LatLon2psxy.find LL: 10
    test 12 LatLon2psxy.find LL: -1
    test 13 LatLon2psxy.count: 1
    test 14 LatLon2psxy.index: 10
    test 15 LatLon2psxy.rfind: 10
    test 16 LatLon2psxy.in: True
    test 17 LatLon2psxy.count: 0
    test 18 LatLon2psxy.find: -1
    test 19 LatLon2psxy.rfind: -1
    test 20 LatLon2psxy.not in: True
    test 21 LatLon2psxy.find LL: 20
    test 22 LatLon2psxy.find LL: -1
    test 23 LatLon2psxy.count: 1
    test 24 LatLon2psxy.index: 20
    test 25 LatLon2psxy.rfind: 20
    test 26 LatLon2psxy.in: True
    test 27 LatLon2psxy.count: 0
    test 28 LatLon2psxy.find: -1
    test 29 LatLon2psxy.rfind: -1
    test 30 LatLon2psxy.not in: True
    test 31 LatLon2psxy.find LL: 30
    test 32 LatLon2psxy.find LL: -1
    test 33 LatLon2psxy.count: 1
    test 34 LatLon2psxy.index: 30
    test 35 LatLon2psxy.rfind: 30
    test 36 LatLon2psxy.in: True
    test 37 LatLon2psxy.count: 0
    test 38 LatLon2psxy.find: -1
    test 39 LatLon2psxy.rfind: -1
    test 40 LatLon2psxy.not in: True
    test 41 LatLon2psxy.find LL: 40
    test 42 LatLon2psxy.find LL: -1
    test 43 LatLon2psxy.count: 1
    test 44 LatLon2psxy.index: 40
    test 45 LatLon2psxy.rfind: 40
    test 46 LatLon2psxy.in: True
    test 47 LatLon2psxy.count: 0
    test 48 LatLon2psxy.find: -1
    test 49 LatLon2psxy.rfind: -1
    test 50 LatLon2psxy.not in: True
    test 51 LatLon2psxy.find LL: 50
    test 52 LatLon2psxy.find LL: -1
    test 53 LatLon2psxy.count: 1
    test 54 LatLon2psxy.index: 50
    test 55 LatLon2psxy.rfind: 50
    test 56 LatLon2psxy.in: True
    test 57 LatLon2psxy.count: 0
    test 58 LatLon2psxy.find: -1
    test 59 LatLon2psxy.rfind: -1
    test 60 LatLon2psxy.not in: True
    test 61 LatLon2psxy.find LL: 60
    test 62 LatLon2psxy.find LL: -1
    test 63 LatLon2psxy.count: 1
    test 64 LatLon2psxy.index: 60
    test 65 LatLon2psxy.rfind: 60
    test 66 LatLon2psxy.in: True
    test 67 LatLon2psxy.count: 0
    test 68 LatLon2psxy.find: -1
    test 69 LatLon2psxy.rfind: -1
    test 70 LatLon2psxy.not in: True
    test 71 LatLon2psxy.enumerate[0]: (-0.701206, 52.220489, LatLon_(52.220489°N, 000.701206°W))
    test 72 LatLon2psxy.enumerate[1]: (-0.705456, 52.221916, LatLon_(52.221916°N, 000.705456°W))
    test 73 LatLon2psxy.enumerate[2]: (-0.71, 52.225944, LatLon_(52.225944°N, 000.71°W))
    test 74 LatLon2psxy.enumerate[3]: (-0.71446, 52.232448, LatLon_(52.232448°N, 000.71446°W))
    test 75 LatLon2psxy.enumerate[4]: (-0.71486, 52.233013, LatLon_(52.233013°N, 000.71486°W))
    test 76 LatLon2psxy.enumerate[5]: (-0.714348, 52.234375, LatLon_(52.234375°N, 000.714348°W))
    test 77 LatLon2psxy.enumerate[6]: (-0.713572, 52.235607, LatLon_(52.235607°N, 000.713572°W))
    test 78 LatLon2psxy.enumerate[7]: (-0.71233, 52.237495, LatLon_(52.237495°N, 000.71233°W))
    test 79 LatLon2psxy.enumerate[8]: (-0.710784, 52.239315, LatLon_(52.239315°N, 000.710784°W))
    test 80 LatLon2psxy.enumerate[9]: (-0.708684, 52.240627, LatLon_(52.240627°N, 000.708684°W))
    test 81 LatLon2psxy.enumerate[10]: (-0.707042, 52.240745, LatLon_(52.240745°N, 000.707042°W))
    test 82 LatLon2psxy.enumerate[11]: (-0.704945, 52.240863, LatLon_(52.240863°N, 000.704945°W))
    test 83 LatLon2psxy.enumerate[*]: 11
    test 84 LatLon2psxy.reversed[11]: (-0.704945, 52.240863, LatLon_(52.240863°N, 000.704945°W))
    test 85 LatLon2psxy.reversed[10]: (-0.707042, 52.240745, LatLon_(52.240745°N, 000.707042°W))
    test 86 LatLon2psxy.reversed[9]: (-0.708684, 52.240627, LatLon_(52.240627°N, 000.708684°W))
    test 87 LatLon2psxy.reversed[8]: (-0.710784, 52.239315, LatLon_(52.239315°N, 000.710784°W))
    test 88 LatLon2psxy.reversed[7]: (-0.71233, 52.237495, LatLon_(52.237495°N, 000.71233°W))
    test 89 LatLon2psxy.reversed[6]: (-0.713572, 52.235607, LatLon_(52.235607°N, 000.713572°W))
    test 90 LatLon2psxy.reversed[5]: (-0.714348, 52.234375, LatLon_(52.234375°N, 000.714348°W))
    test 91 LatLon2psxy.reversed[4]: (-0.71486, 52.233013, LatLon_(52.233013°N, 000.71486°W))
    test 92 LatLon2psxy.reversed[3]: (-0.71446, 52.232448, LatLon_(52.232448°N, 000.71446°W))
    test 93 LatLon2psxy.reversed[2]: (-0.71, 52.225944, LatLon_(52.225944°N, 000.71°W))
    test 94 LatLon2psxy.reversed[1]: (-0.705456, 52.221916, LatLon_(52.221916°N, 000.705456°W))
    test 95 LatLon2psxy.reversed[0]: (-0.701206, 52.220489, LatLon_(52.220489°N, 000.701206°W))
    test 96 LatLon2psxy.findall[0]: (0,)
    test 97 LatLon2psxy.findall[1]: (1,)
    test 98 LatLon2psxy.findall[2]: (2,)
    test 99 LatLon2psxy.findall[3]: (3,)
    test 100 LatLon2psxy.findall[4]: (4,)
    test 101 LatLon2psxy.findall[5]: (5,)
    test 102 LatLon2psxy.findall[6]: (6,)
    test 103 LatLon2psxy.findall[7]: (7,)
    test 104 LatLon2psxy.findall[8]: (8,)
    test 105 LatLon2psxy.findall[9]: (9,)
    test 106 LatLon2psxy.findall[10]: (10,)
    test 107 LatLon2psxy.findall[11]: (11,)
    test 108 LatLon2psxy.findall[*]: 11
    test 109 LatLon2psxy.isNumpy2: False
    test 110 LatLon2psxy.isPoints2: True
    test 111 LatLon2psxy.isTuple2: False
    test 112 no: numpy
    test 113 Tuple2LatLon.ABC: True
    test 114 Tuple2LatLon.epsilon: 2.220446049250313e-16
    test 115 Tuple2LatLon.epsilon: 0.0
    test 116 Tuple2LatLon.len: 69
    test 117 Tuple2LatLon.iter: 69
    test 118 Tuple2LatLon.slice1: 11
    test 119 Tuple2LatLon.slice2: <class 'pygeodesy.points.Tuple2LatLon'>
    test 120 Tuple2LatLon.slice3: 52.220485°N, 000.701418°W
    test 121 Tuple2LatLon.str/repr: Tuple2LatLon('[(0, -0.701206, 0, 52.220489) ... ][69]', ilat=3, ilon=1)
    test 122 Tuple2LatLon.subset: <class 'list'>
    test 123 Tuple2LatLon.count: 1
    test 124 Tuple2LatLon.index: 10
    test 125 Tuple2LatLon.rfind: 10
    test 126 Tuple2LatLon.in: True
    test 127 Tuple2LatLon.count: 0
    test 128 Tuple2LatLon.find: -1
    test 129 Tuple2LatLon.rfind: -1
    test 130 Tuple2LatLon.not in: True
    test 131 Tuple2LatLon.count: 1
    test 132 Tuple2LatLon.index: 20
    test 133 Tuple2LatLon.rfind: 20
    test 134 Tuple2LatLon.in: True
    test 135 Tuple2LatLon.count: 0
    test 136 Tuple2LatLon.find: -1
    test 137 Tuple2LatLon.rfind: -1
    test 138 Tuple2LatLon.not in: True
    test 139 Tuple2LatLon.count: 1
    test 140 Tuple2LatLon.index: 30
    test 141 Tuple2LatLon.rfind: 30
    test 142 Tuple2LatLon.in: True
    test 143 Tuple2LatLon.count: 0
    test 144 Tuple2LatLon.find: -1
    test 145 Tuple2LatLon.rfind: -1
    test 146 Tuple2LatLon.not in: True
    test 147 Tuple2LatLon.count: 1
    test 148 Tuple2LatLon.index: 40
    test 149 Tuple2LatLon.rfind: 40
    test 150 Tuple2LatLon.in: True
    test 151 Tuple2LatLon.count: 0
    test 152 Tuple2LatLon.find: -1
    test 153 Tuple2LatLon.rfind: -1
    test 154 Tuple2LatLon.not in: True
    test 155 Tuple2LatLon.count: 1
    test 156 Tuple2LatLon.index: 50
    test 157 Tuple2LatLon.rfind: 50
    test 158 Tuple2LatLon.in: True
    test 159 Tuple2LatLon.count: 0
    test 160 Tuple2LatLon.find: -1
    test 161 Tuple2LatLon.rfind: -1
    test 162 Tuple2LatLon.not in: True
    test 163 Tuple2LatLon.count: 1
    test 164 Tuple2LatLon.index: 60
    test 165 Tuple2LatLon.rfind: 60
    test 166 Tuple2LatLon.in: True
    test 167 Tuple2LatLon.count: 0
    test 168 Tuple2LatLon.find: -1
    test 169 Tuple2LatLon.rfind: -1
    test 170 Tuple2LatLon.not in: True
    test 171 Tuple2LatLon.enumerate[0]: 52.220489°N, 000.701206°W
    test 172 Tuple2LatLon.enumerate[1]: 52.221916°N, 000.705456°W
    test 173 Tuple2LatLon.enumerate[2]: 52.225944°N, 000.71°W
    test 174 Tuple2LatLon.enumerate[3]: 52.232448°N, 000.71446°W
    test 175 Tuple2LatLon.enumerate[4]: 52.233013°N, 000.71486°W
    test 176 Tuple2LatLon.enumerate[5]: 52.234375°N, 000.714348°W
    test 177 Tuple2LatLon.enumerate[6]: 52.235607°N, 000.713572°W
    test 178 Tuple2LatLon.enumerate[7]: 52.237495°N, 000.71233°W
    test 179 Tuple2LatLon.enumerate[8]: 52.239315°N, 000.710784°W
    test 180 Tuple2LatLon.enumerate[9]: 52.240627°N, 000.708684°W
    test 181 Tuple2LatLon.enumerate[10]: 52.240745°N, 000.707042°W
    test 182 Tuple2LatLon.enumerate[11]: 52.240863°N, 000.704945°W
    test 183 Tuple2LatLon.enumerate[*]: 11
    test 184 Tuple2LatLon.reversed[11]: 52.240863°N, 000.704945°W
    test 185 Tuple2LatLon.reversed[10]: 52.240745°N, 000.707042°W
    test 186 Tuple2LatLon.reversed[9]: 52.240627°N, 000.708684°W
    test 187 Tuple2LatLon.reversed[8]: 52.239315°N, 000.710784°W
    test 188 Tuple2LatLon.reversed[7]: 52.237495°N, 000.71233°W
    test 189 Tuple2LatLon.reversed[6]: 52.235607°N, 000.713572°W
    test 190 Tuple2LatLon.reversed[5]: 52.234375°N, 000.714348°W
    test 191 Tuple2LatLon.reversed[4]: 52.233013°N, 000.71486°W
    test 192 Tuple2LatLon.reversed[3]: 52.232448°N, 000.71446°W
    test 193 Tuple2LatLon.reversed[2]: 52.225944°N, 000.71°W
    test 194 Tuple2LatLon.reversed[1]: 52.221916°N, 000.705456°W
    test 195 Tuple2LatLon.reversed[0]: 52.220489°N, 000.701206°W
    test 196 Tuple2LatLon.findall[0]: (0,)
    test 197 Tuple2LatLon.findall[1]: (1,)
    test 198 Tuple2LatLon.findall[2]: (2,)
    test 199 Tuple2LatLon.findall[3]: (3,)
    test 200 Tuple2LatLon.findall[4]: (4,)
    test 201 Tuple2LatLon.findall[5]: (5,)
    test 202 Tuple2LatLon.findall[6]: (6,)
    test 203 Tuple2LatLon.findall[7]: (7,)
    test 204 Tuple2LatLon.findall[8]: (8,)
    test 205 Tuple2LatLon.findall[9]: (9,)
    test 206 Tuple2LatLon.findall[10]: (10,)
    test 207 Tuple2LatLon.findall[11]: (11,)
    test 208 Tuple2LatLon.findall[*]: 11
    test 209 Tuple2LatLon.isNumpy2: False
    test 210 Tuple2LatLon.isPoints2: False
    test 211 Tuple2LatLon.isTuple2: True
# lazily imported pygeodesy.ellipsoidalExact by testPoints.py line 276
# lazily imported pygeodesy.ellipsoidalKarney by testPoints.py line 276
# lazily imported pygeodesy.ellipsoidalNvector by testPoints.py line 276
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testPoints.py line 276
# lazily imported pygeodesy.sphericalNvector by testPoints.py line 276

    testing(pygeodesy.points, 24.06.15, LatLon=<class 'pygeodesy.points.LatLon_'>)
    test 212 areaOf: 8.811228e+09
    test 213 centroidOf: 45.5, 1.5
    test 214 perimeterOf: 2.673633e+05
    test 215 isclockwise: False
    test 216 isconvex: True
    test 217 ispolar: False
    test 218 areaOf: 7.086883e+09
    test 219 perimeterOf: 2.687460e+05
    test 220 centroidOf: 0.333333, 0.333333
    test 221 isclockwise: True
    test 222 isconvex: True
    test 223 ispolar: False
    test 224 areaOf: 2.827856e+10
    test 225 perimeterOf: 4.717039e+05
    test 226 centroidOf: 1.0, 1.0
    test 227 isclockwise: False
    test 228 isconvex: True
    test 229 ispolar: False
    test 230 areaOf: 2.747297e+13
    test 231 perimeterOf: 2.332643e+07
    test 232 centroidOf: 52.113, 102.123
    test 233 isclockwise: False
    test 234 isconvex: False
    test 235 ispolar: True
    test 236 areaOf: 8.482014e+10
    test 237 perimeterOf: 1.334104e+06
    test 238 centroidOf: 1.167, 1.667
    test 239 isclockwise: False
    test 240 isconvex: False
    test 241 ispolar: False
    test 242 areaOf: 5.151974e+13
    test 243 perimeterOf: 2.638608e+07
    test 244 centroidOf: -19.444, -133.333
    test 245 isclockwise: True
    test 246 isconvex: True
    test 247 ispolar: False
    test 248 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 249 perimeterOf: 1.562029e+07
    test 250 centroidOf: -72.926, 46.47
    test 251 isclockwise: True
    test 252 isconvex: False
    test 253 ispolar: True
    test 254 points2: 18
    test 255 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 256 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 257 isclockwise: True
    test 258 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 259 boundsOf: (-77.9, -163.0, -63.1, 172.0)
    test 260 quadOf: 77.9°S, 163.0°W, 63.1°S, 163.0°W, 63.1°S, 172.0°E, 77.9°S, 172.0°E
    test 261 intermediateTo: 51.368°N, 000.677°E, 'intermediateTo'
    test 262 intermediateTo: True
    test 263 intermediateTo: 51.368°N, 000.677°E
    test 264 intermediateTo: 52.205°N, 000.119°E
    test 265 intermediateTo: 48.857°N, 002.351°E
    test 266 _isLatLon_: _Array2LatLon('[ ... ][1]', ilat=0, ilon=1)
    test 267 latlon: (-66.6, -88.0)
    test 268 philam: (-1.162389, -1.53589)
    test 269 toStr: 66.6°S, 088.0°W
    test 270 __ne__: False
    test 271 isequalTo: True
    test 272 isequalTo: True
    test 273 latlonheight: (-66.6, -88.0, 0)
    test 274 philamheight: (-1.162389, -1.53589, 0)
    test 275 _N_vector: (0.01386, -0.39691, -0.91775)
    test 276 toNvector: (0.01386, -0.39691, -0.91775, 0)
    test 277 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 278 classof: 66.6°S, 088.0°W
    test 279 others: 66.6°S, 088.0°W
    test 280 copy(LatLon_): (<class 'pygeodesy.points.LatLon_'>, True)
    test 281 LatLon_.copy(): (<class 'pygeodesy.points.LatLon_'>, True)

    testing(pygeodesy.points, 24.06.15, LatLon=<class 'pygeodesy.sphericalNvector.LatLon'>)
    test 282 areaOf: 8.811228e+09
    test 283 centroidOf: 45.5, 1.5
    test 284 perimeterOf: 2.673633e+05
    test 285 isclockwise: False
    test 286 isconvex: True
    test 287 ispolar: False
    test 288 areaOf: 7.086883e+09
    test 289 perimeterOf: 2.687460e+05
    test 290 centroidOf: 0.333333, 0.333333
    test 291 isclockwise: True
    test 292 isconvex: True
    test 293 ispolar: False
    test 294 areaOf: 2.827856e+10
    test 295 perimeterOf: 4.717039e+05
    test 296 centroidOf: 1.0, 1.0
    test 297 isclockwise: False
    test 298 isconvex: True
    test 299 ispolar: False
    test 300 areaOf: 2.747297e+13
    test 301 perimeterOf: 2.332643e+07
    test 302 centroidOf: 52.113, 102.123
    test 303 isclockwise: False
    test 304 isconvex: False
    test 305 ispolar: True
    test 306 areaOf: 8.482014e+10
    test 307 perimeterOf: 1.334104e+06
    test 308 centroidOf: 1.167, 1.667
    test 309 isclockwise: False
    test 310 isconvex: False
    test 311 ispolar: False
    test 312 areaOf: 5.151974e+13
    test 313 perimeterOf: 2.638608e+07
    test 314 centroidOf: -19.444, -133.333
    test 315 isclockwise: True
    test 316 isconvex: True
    test 317 ispolar: False
    test 318 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 319 perimeterOf: 1.562029e+07
    test 320 centroidOf: -72.926, 46.47
    test 321 isclockwise: True
    test 322 isconvex: False
    test 323 ispolar: True
    test 324 points2: 18
    test 325 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 326 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 327 isclockwise: True
    test 328 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 329 latlon: (-66.6, -88.0)
    test 330 philam: (-1.162389, -1.53589)
    test 331 latlonheight: (-66.6, -88.0, 0)
    test 332 philamheight: (-1.162389, -1.53589, 0)
    test 333 _N_vector: (0.01386, -0.39691, -0.91775)
    test 334 toNvector: (0.01386, -0.39691, -0.91775)
    test 335 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 336 classof: 66.6°S, 088.0°W
    test 337 others: 66.6°S, 088.0°W
    test 338 copy(LatLon): (<class 'pygeodesy.sphericalNvector.LatLon'>, True)
    test 339 LatLon.copy(): (<class 'pygeodesy.sphericalNvector.LatLon'>, True)

    testing(pygeodesy.points, 24.06.15, LatLon=<class 'pygeodesy.sphericalTrigonometry.LatLon'>)
    test 340 areaOf: 8.811228e+09
    test 341 centroidOf: 45.5, 1.5
    test 342 perimeterOf: 2.673633e+05
    test 343 isclockwise: False
    test 344 isconvex: True
    test 345 ispolar: False
    test 346 areaOf: 7.086883e+09
    test 347 perimeterOf: 2.687460e+05
    test 348 centroidOf: 0.333333, 0.333333
    test 349 isclockwise: True
    test 350 isconvex: True
    test 351 ispolar: False
    test 352 areaOf: 2.827856e+10
    test 353 perimeterOf: 4.717039e+05
    test 354 centroidOf: 1.0, 1.0
    test 355 isclockwise: False
    test 356 isconvex: True
    test 357 ispolar: False
    test 358 areaOf: 2.747297e+13
    test 359 perimeterOf: 2.332643e+07
    test 360 centroidOf: 52.113, 102.123
    test 361 isclockwise: False
    test 362 isconvex: False
    test 363 ispolar: True
    test 364 areaOf: 8.482014e+10
    test 365 perimeterOf: 1.334104e+06
    test 366 centroidOf: 1.167, 1.667
    test 367 isclockwise: False
    test 368 isconvex: False
    test 369 ispolar: False
    test 370 areaOf: 5.151974e+13
    test 371 perimeterOf: 2.638608e+07
    test 372 centroidOf: -19.444, -133.333
    test 373 isclockwise: True
    test 374 isconvex: True
    test 375 ispolar: False
    test 376 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 377 perimeterOf: 1.562029e+07
    test 378 centroidOf: -72.926, 46.47
    test 379 isclockwise: True
    test 380 isconvex: False
    test 381 ispolar: True
    test 382 points2: 18
    test 383 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 384 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 385 isclockwise: True
    test 386 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 387 latlon: (-66.6, -88.0)
    test 388 philam: (-1.162389, -1.53589)
    test 389 latlonheight: (-66.6, -88.0, 0)
    test 390 philamheight: (-1.162389, -1.53589, 0)
    test 391 _N_vector: (0.01386, -0.39691, -0.91775)
    test 392 toNvector: (0.01386, -0.39691, -0.91775)
    test 393 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 394 classof: 66.6°S, 088.0°W
    test 395 others: 66.6°S, 088.0°W
    test 396 copy(LatLon): (<class 'pygeodesy.sphericalTrigonometry.LatLon'>, True)
    test 397 LatLon.copy(): (<class 'pygeodesy.sphericalTrigonometry.LatLon'>, True)

    testing(pygeodesy.points, 24.06.15, LatLon=<class 'pygeodesy.ellipsoidalNvector.LatLon'>)
    test 398 areaOf: 8.811228e+09
    test 399 centroidOf: 45.5, 1.5
    test 400 perimeterOf: 2.673633e+05
    test 401 isclockwise: False
    test 402 isconvex: True
    test 403 ispolar: False
    test 404 areaOf: 7.086883e+09
    test 405 perimeterOf: 2.687460e+05
    test 406 centroidOf: 0.333333, 0.333333
    test 407 isclockwise: True
    test 408 isconvex: True
    test 409 ispolar: False
    test 410 areaOf: 2.827856e+10
    test 411 perimeterOf: 4.717039e+05
    test 412 centroidOf: 1.0, 1.0
    test 413 isclockwise: False
    test 414 isconvex: True
    test 415 ispolar: False
    test 416 areaOf: 2.747297e+13
    test 417 perimeterOf: 2.332643e+07
    test 418 centroidOf: 52.113, 102.123
    test 419 isclockwise: False
    test 420 isconvex: False
    test 421 ispolar: True
    test 422 areaOf: 8.482014e+10
    test 423 perimeterOf: 1.334104e+06
    test 424 centroidOf: 1.167, 1.667
    test 425 isclockwise: False
    test 426 isconvex: False
    test 427 ispolar: False
    test 428 areaOf: 5.151974e+13
    test 429 perimeterOf: 2.638608e+07
    test 430 centroidOf: -19.444, -133.333
    test 431 isclockwise: True
    test 432 isconvex: True
    test 433 ispolar: False
    test 434 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 435 perimeterOf: 1.562029e+07
    test 436 centroidOf: -72.926, 46.47
    test 437 isclockwise: True
    test 438 isconvex: False
    test 439 ispolar: True
    test 440 points2: 18
    test 441 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 442 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 443 isclockwise: True
    test 444 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 445 latlon: (-66.6, -88.0)
    test 446 philam: (-1.162389, -1.53589)
    test 447 latlonheight: (-66.6, -88.0, 0)
    test 448 philamheight: (-1.162389, -1.53589, 0)
    test 449 _N_vector: (0.01386, -0.39691, -0.91775)
    test 450 toNvector: (0.01386, -0.39691, -0.91775)
    test 451 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 452 classof: 66.6°S, 088.0°W
    test 453 others: 66.6°S, 088.0°W
    test 454 copy(LatLon): (<class 'pygeodesy.ellipsoidalNvector.LatLon'>, True)
    test 455 LatLon.copy(): (<class 'pygeodesy.ellipsoidalNvector.LatLon'>, True)

    testing(pygeodesy.points, 24.06.15, LatLon=<class 'pygeodesy.ellipsoidalVincenty.LatLon'>)
    test 456 areaOf: 8.811228e+09
    test 457 centroidOf: 45.5, 1.5
    test 458 perimeterOf: 2.673633e+05
    test 459 isclockwise: False
    test 460 isconvex: True
    test 461 ispolar: False
    test 462 areaOf: 7.086883e+09
    test 463 perimeterOf: 2.687460e+05
    test 464 centroidOf: 0.333333, 0.333333
    test 465 isclockwise: True
    test 466 isconvex: True
    test 467 ispolar: False
    test 468 areaOf: 2.827856e+10
    test 469 perimeterOf: 4.717039e+05
    test 470 centroidOf: 1.0, 1.0
    test 471 isclockwise: False
    test 472 isconvex: True
    test 473 ispolar: False
    test 474 areaOf: 2.747297e+13
    test 475 perimeterOf: 2.332643e+07
    test 476 centroidOf: 52.113, 102.123
    test 477 isclockwise: False
    test 478 isconvex: False
    test 479 ispolar: True
    test 480 areaOf: 8.482014e+10
    test 481 perimeterOf: 1.334104e+06
    test 482 centroidOf: 1.167, 1.667
    test 483 isclockwise: False
    test 484 isconvex: False
    test 485 ispolar: False
    test 486 areaOf: 5.151974e+13
    test 487 perimeterOf: 2.638608e+07
    test 488 centroidOf: -19.444, -133.333
    test 489 isclockwise: True
    test 490 isconvex: True
    test 491 ispolar: False
    test 492 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 493 perimeterOf: 1.562029e+07
    test 494 centroidOf: -72.926, 46.47
    test 495 isclockwise: True
    test 496 isconvex: False
    test 497 ispolar: True
    test 498 points2: 18
    test 499 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 500 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 501 isclockwise: True
    test 502 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 503 latlon: (-66.6, -88.0)
    test 504 philam: (-1.162389, -1.53589)
    test 505 latlonheight: (-66.6, -88.0, 0)
    test 506 philamheight: (-1.162389, -1.53589, 0)
    test 507 _N_vector: (0.01386, -0.39691, -0.91775)
    test 508 toNvector: (0.01386, -0.39691, -0.91775, 0)
    test 509 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 510 classof: 66.6°S, 088.0°W
    test 511 others: 66.6°S, 088.0°W
    test 512 copy(LatLon): (<class 'pygeodesy.ellipsoidalVincenty.LatLon'>, True)
    test 513 LatLon.copy(): (<class 'pygeodesy.ellipsoidalVincenty.LatLon'>, True)

    testing(pygeodesy.points, 24.06.15, LatLon=<class 'pygeodesy.ellipsoidalKarney.LatLon'>)
    test 514 areaOf: 8.811228e+09
    test 515 centroidOf: 45.5, 1.5
    test 516 perimeterOf: 2.673633e+05
    test 517 isclockwise: False
    test 518 isconvex: True
    test 519 areaOf: 7.086883e+09
    test 520 perimeterOf: 2.687460e+05
    test 521 centroidOf: 0.333333, 0.333333
    test 522 isclockwise: True
    test 523 isconvex: True
    test 524 areaOf: 2.827856e+10
    test 525 perimeterOf: 4.717039e+05
    test 526 centroidOf: 1.0, 1.0
    test 527 isclockwise: False
    test 528 isconvex: True
    test 529 areaOf: 2.747297e+13
    test 530 perimeterOf: 2.332643e+07
    test 531 centroidOf: 52.113, 102.123
    test 532 isclockwise: False
    test 533 isconvex: False
    test 534 areaOf: 8.482014e+10
    test 535 perimeterOf: 1.334104e+06
    test 536 centroidOf: 1.167, 1.667
    test 537 isclockwise: False
    test 538 isconvex: False
    test 539 areaOf: 5.151974e+13
    test 540 perimeterOf: 2.638608e+07
    test 541 centroidOf: -19.444, -133.333
    test 542 isclockwise: True
    test 543 isconvex: True
    test 544 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 545 perimeterOf: 1.562029e+07
    test 546 centroidOf: -72.926, 46.47
    test 547 isclockwise: True
    test 548 isconvex: False
    test 549 points2: 18
    test 550 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 551 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 552 isclockwise: True
    test 553 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 554 latlon: (-66.6, -88.0)
    test 555 philam: (-1.162389, -1.53589)
    test 556 latlonheight: (-66.6, -88.0, 0)
    test 557 philamheight: (-1.162389, -1.53589, 0)
    test 558 _N_vector: (0.01386, -0.39691, -0.91775)
    test 559 toNvector: (0.01386, -0.39691, -0.91775, 0)
    test 560 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 561 classof: 66.6°S, 088.0°W
    test 562 others: 66.6°S, 088.0°W
    test 563 copy(LatLon): (<class 'pygeodesy.ellipsoidalKarney.LatLon'>, True)
    test 564 LatLon.copy(): (<class 'pygeodesy.ellipsoidalKarney.LatLon'>, True)

    testing(pygeodesy.points, 24.06.15, LatLon=<class 'pygeodesy.ellipsoidalExact.LatLon'>)
    test 565 areaOf: 8.811228e+09
    test 566 centroidOf: 45.5, 1.5
    test 567 perimeterOf: 2.673633e+05
    test 568 isclockwise: False
    test 569 isconvex: True
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
# lazily imported pygeodesy.elliptic by gx.py line 426
    test 570 ispolar: False
    test 571 areaOf: 7.086883e+09
    test 572 perimeterOf: 2.687460e+05
    test 573 centroidOf: 0.333333, 0.333333
    test 574 isclockwise: True
    test 575 isconvex: True
    test 576 ispolar: False
    test 577 areaOf: 2.827856e+10
    test 578 perimeterOf: 4.717039e+05
    test 579 centroidOf: 1.0, 1.0
    test 580 isclockwise: False
    test 581 isconvex: True
    test 582 ispolar: False
    test 583 areaOf: 2.747297e+13
    test 584 perimeterOf: 2.332643e+07
    test 585 centroidOf: 52.113, 102.123
    test 586 isclockwise: False
    test 587 isconvex: False
    test 588 ispolar: True
    test 589 areaOf: 8.482014e+10
    test 590 perimeterOf: 1.334104e+06
    test 591 centroidOf: 1.167, 1.667
    test 592 isclockwise: False
    test 593 isconvex: False
    test 594 ispolar: False
    test 595 areaOf: 5.151974e+13
    test 596 perimeterOf: 2.638608e+07
    test 597 centroidOf: -19.444, -133.333
    test 598 isclockwise: True
    test 599 isconvex: True
    test 600 ispolar: False
    test 601 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 602 perimeterOf: 1.562029e+07
    test 603 centroidOf: -72.926, 46.47
    test 604 isclockwise: True
    test 605 isconvex: False
    test 606 ispolar: True
    test 607 points2: 18
    test 608 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 609 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 610 isclockwise: True
    test 611 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2098430.887891
    test 612 latlon: (-66.6, -88.0)
    test 613 philam: (-1.162389, -1.53589)
    test 614 latlonheight: (-66.6, -88.0, 0)
    test 615 philamheight: (-1.162389, -1.53589, 0)
    test 616 _N_vector: (0.01386, -0.39691, -0.91775)
    test 617 toNvector: (0.01386, -0.39691, -0.91775, 0)
    test 618 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 619 classof: 66.6°S, 088.0°W
    test 620 others: 66.6°S, 088.0°W
    test 621 copy(LatLon): (<class 'pygeodesy.ellipsoidalExact.LatLon'>, True)
    test 622 LatLon.copy(): (<class 'pygeodesy.ellipsoidalExact.LatLon'>, True)

    testArea(pygeodesy.ellipsoidalExact, 24.06.11)
    test 623 luneOf: 1.27516405431022e+14

    21 of 623 testPoints.py tests (3.4%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 374.659 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testProps.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Property from .props by testProps.py line 11
# lazily imported pygeodesy.Property_RO from .props by testProps.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testProps.py line 149
# lazily imported pygeodesy.R_M from .constants by testProps.py line 149

    testing testProps.py 23.03.27 isLazy=3

    test<class 'pygeodesy.named._NamedBase'>(pygeodesy.props, 24.05.26)
    test 1 P1: 1
    test 2 p1: 2
    test 3 P2: 1
    test 4 p2: 3
    test 5 q1: 1
    test 6 q2: 2
    test 7 q3: True
    test 8 u1: None
    test 9 u2: U
    test 10 P3: 4
    test 11 p3: 5
    test 12 q4: False
    test 13 q5: 2
    test 14 u3: None
    test 15 u4: U
    test 16 X1: immutable Property_RO: X.setter X
    test 17 X2: invalid Property_RO: X.deleter X
    test 18 y1: immutable property_RO: y.setter y
    test 19 y2: invalid property_RO: y.deleter y
    test 20 Z1: invalid Property: Z.deleter Z
    test 21 Z2: invalid Property: Z.getter Z

    test<class 'pygeodesy.ellipsoids.Ellipsoid'>(pygeodesy.props, 24.05.26)
    test 22 P1: 1
    test 23 p1: 2
    test 24 P2: 1
    test 25 p2: 3
    test 26 q1: 1
    test 27 q2: 2
    test 28 q3: True
    test 29 u1: None
    test 30 u2: U
    test 31 P3: 4
    test 32 p3: 5
    test 33 q4: False
    test 34 q5: 2
    test 35 u3: None
    test 36 u4: U
    test 37 X1: immutable Property_RO: X.setter X
    test 38 X2: invalid Property_RO: X.deleter X
    test 39 y1: immutable property_RO: y.setter y
    test 40 y2: invalid property_RO: y.deleter y
    test 41 Z1: invalid Property: Z.deleter Z
    test 42 Z2: invalid Property: Z.getter Z

    all 42 testProps.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 291.109 us

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testResections.py
./test/testResections.py:40: DeprecationWarning: method L{__main__.Cartesian_.collins} has been DEPRECATED, use method L{collins5}.
  self.test(collins.__name__, C_(A).collins(C, B, 109.5125, 115.0889), t, nl=1)  # DEPRECATED
./test/testResections.py:63: DeprecationWarning: method L{__main__.Cartesian_.tienstra} has been DEPRECATED, use method L{tienstra7}.
  self.test(tienstra.__name__, C_(A).tienstra(B, C, 115.0889, None, 109.5125), t, nl=1)  # DEPRECATED
./test/testResections.py:72: DeprecationWarning: function L{pygeodesy.deprecated.functions.collins} has been DEPRECATED, use function L{pygeodesy.collins5}.
  self.test(collins.__name__, collins(A, C, B, 109.3, 115.1), t, nl=1)  # DEPRECATED
./test/testResections.py:94: DeprecationWarning: function L{pygeodesy.deprecated.functions.tienstra} has been DEPRECATED, use function L{pygeodesy.tienstra7}.
  self.test(tienstra.__name__, tienstra(A, B, C, 115.1, beta=135.6, gamma=109.3), t, nl=1)  # DEPRECATED
./test/testResections.py:100: DeprecationWarning: function L{pygeodesy.deprecated.functions.triAngle4} has been DEPRECATED on 2023.09.14, use function L{pygeodesy.triAngle5}.
  rA, rB, rC, _ = triAngle4(10, 30, c)
./pygeodesy/deprecated/classes.py:32: DeprecationWarning: class L{pygeodesy.deprecated.classes.TriAngle4Tuple} has been DEPRECATED on 2023.09.14, use class L{TriAngle5Tuple}, ignoring item C{area}.
  deprecated_class(cls)
./test/testResections.py:107: DeprecationWarning: function L{pygeodesy.deprecated.functions.triAngle4} has been DEPRECATED on 2023.09.14, use function L{pygeodesy.triAngle5}.
  rA, rB, rC, _ = triAngle4(320, 435, 598)
./test/testResections.py:111: DeprecationWarning: function L{pygeodesy.deprecated.functions.triAngle4} has been DEPRECATED on 2023.09.14, use function L{pygeodesy.triAngle5}.
  rA, rB, rC, _ = triAngle4(100, 100, 100)
./test/testResections.py:115: DeprecationWarning: function L{pygeodesy.deprecated.functions.triAngle4} has been DEPRECATED on 2023.09.14, use function L{pygeodesy.triAngle5}.
  rA, rB, rC, _ = triAngle4(435, 320, 600)
./test/testResections.py:119: DeprecationWarning: function L{pygeodesy.deprecated.functions.triAngle4} has been DEPRECATED on 2023.09.14, use function L{pygeodesy.triAngle5}.
  rA, rB, rC, _ = triAngle4(1716, 924, 1056)
./test/testResections.py:126: DeprecationWarning: function L{pygeodesy.deprecated.functions.triAngle4} has been DEPRECATED on 2023.09.14, use function L{pygeodesy.triAngle5}.
  t = triAngle4(1, 2, EPS0 / 2)  # DEPRECATED
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.EPS0 from .constants by testResections.py line 11
# lazily imported pygeodesy.PI from .constants by testResections.py line 11
# lazily imported pygeodesy.PI_4 from .constants by testResections.py line 11
# lazily imported pygeodesy.cassini from .resections by testResections.py line 11
# lazily imported pygeodesy.collins5 from .resections by testResections.py line 11
# lazily imported pygeodesy.fstr from .streprs by testResections.py line 11
# lazily imported pygeodesy.pierlot from .resections by testResections.py line 11
# lazily imported pygeodesy.pierlotx from .resections by testResections.py line 11
# lazily imported pygeodesy.ResectionError from .resections by testResections.py line 11
# lazily imported pygeodesy.snellius3 from .resections by testResections.py line 11
# lazily imported pygeodesy.tienstra7 from .resections by testResections.py line 11
# lazily imported pygeodesy.triAngle from .resections by testResections.py line 11
# lazily imported pygeodesy.triAngle5 from .resections by testResections.py line 11
# lazily imported pygeodesy.triArea from .resections by testResections.py line 11
# lazily imported pygeodesy.triSide from .resections by testResections.py line 11
# lazily imported pygeodesy.triSide2 from .resections by testResections.py line 11
# lazily imported pygeodesy.triSide4 from .resections by testResections.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testResections.py line 11
# lazily imported pygeodesy.wildberger3 from .resections by testResections.py line 11

    testing testResections.py 24.03.23 isLazy=3
    test 1 cassini: (2128.3903, 5578.1443, 0)
    test 2 cassini: Cartesian_(2128.3903, 5578.1443, 0)

    test 3 collins5: (2128.3903, 5578.1443, 0)
    test 4 collins5: (1830.5948, 2576.2429, 0)
    test 5 collins5: 1581.1388, 1562.0499, 2121.3203
    test 6 collins5: Cartesian_(2128.3903, 5578.1443, 0)
    test 7 collins5: Cartesian_(1830.5948, 2576.2429, 0)
    test 8 collins5: 1581.1388, 1562.0499, 2121.3203
    test 9 collins5: 1581.1388, 1562.0499, 2121.3203

    test 10 collins: (Cartesian_(2128.39, 5578.144, 0), Cartesian_(1830.595, 2576.243, 0), 1581.13883, 1562.049935, 2121.320344)

    test 11 pierlot: (2128.3903, 5578.1443, 0)
    test 12 pierlot: Cartesian_(2128.3903, 5578.1443, 0)
    test 13 pierlot: Cartesian_(2128.3903, 5578.1443, 0.0)

    test 14 pierlotx: (2128.3903, 5578.1443, 0)
    test 15 pierlotx: Cartesian_(2128.3903, 5578.1443, 0)
    test 16 pierlotx: Cartesian_(2128.3903, 5578.1443, 0.0)

    test 17 tienstra7: (2128.3903, 5578.1443, 0)
    test 18 tienstra7: 47.9357, 84.8896, 47.1747, 1581.1388, 2121.3203, 1562.0499
    test 19 tienstra7: Cartesian_(2128.3903, 5578.1443, 0)
    test 20 tienstra7: 47.9357, 84.8896, 47.1747, 1581.1388, 2121.3203, 1562.0499

    test 21 tienstra: (Cartesian_(2128.39, 5578.144, 0), 47.935673, 84.889582, 47.174744, 1581.13883, 2121.320344, 1562.049935)

    test 22 cassini: (2129.3018, 5575.8016, 0)

    test 23 collins5: (2129.3018, 5575.8016, 0)
    test 24 collins5: (1835.1911, 2563.0708, 0)
    test 25 collins5: 1581.1388, 1562.0499, 2121.3203

    test 26 collins: (Vector3d(2129.30185, 5575.80164, 0), Vector3d(1835.19112, 2563.07083, 0), 1581.13883, 1562.049935, 2121.320344)

    test 27 pierlot: (2129.3018, 5575.8016, 0)
    test 28 pierlot: alpha12 (115.1), alpha23 (109.3), eps (0), point1 (Vector3d(3100.0, 5000.0, 0)), point2 (Vector3d(2200.0, 6300.0, 0)) or point3 (Vector3d(1000.0, 5300.0, 0)): eps not positive

    test 29 pierlotx: (2129.3018, 5575.8016, 0)
    test 30 pierlotx: (2128.2026, 4708.1218, 0)
    test 31 pierlotx: (1969.0673, 6633.5695, 0)
    test 32 pierlotx: (2438.0239, 5094.568, 0)

    test 33 tienstra7: (2129.3018, 5575.8016, 0)
    test 34 tienstra7: 47.9357, 84.8896, 47.1747, 1581.1388, 2121.3203, 1562.0499

    test 35 tienstra: (Vector3d(2129.30185, 5575.80164, 0), 47.935673, 84.889582, 47.174744, 1581.13883, 2121.320344, 1562.049935)

    test 36 triSide4: (10.0, 30.0, 0.785398, 8.840862)

    test 37 snellius3: (17.54582, 38.564239, 46.317675)
    test 38 snellius3: (844.880591, 571.107418, 835.462796)
    test 39 snellius3: (128.557522, 100.0, 187.938524)
    test 40 snellius3: (567.480866, 847.344375, 832.446688)
    test 41 snellius3: (4064.197388, 3652.539386, 4988.197388)

    test 42 wildberger3: (17.54582, 38.56424, 46.317675)
    test 43 wildberger3: (844.880591, 571.107418, 835.462796)
    test 44 wildberger3: (128.557522, 100.0, 187.938524)
    test 45 wildberger3: (567.480866, 847.344375, 832.446688)
    test 46 wildberger3: (4064.197343, 3652.539342, 4988.197355)

    test 47 triAngle: 3.141592654
    test 48 triAngle4: (1.570796, 1.570796, 0.0, 0.0)
    test 49 triAngle5: (1.570796, 1.570796, 0.0, 0.0, 0.0)
    test 50 triAngle5: (0.24871, 0.927295, 1.965587, 1.5, 24.0)
    test 51 triArea: 24.0
    test 52 triSide2: (2.0, 0.0)
    test 53 triSide2: (2.0, 3.141593)

    16 of 53 testResections.py tests (30.2%) FAILED, incl. 16 DeprecationWarnings (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 6.191 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testRhumb_aux_.py
./test/testRhumb_aux_.py:267: DeprecationWarning: method L{pygeodesy.rhumb.aux_.RhumbLineAux.distance2} has been DEPRECATED on 23.09.23, use method L{RhumbLineAux.Inverse} or L{RhumbLine.Inverse}.
  t = r.distance2(p.lat2, p.lon2)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Caps from .karney by testRhumb_aux_.py line 11
# lazily imported pygeodesy.classname from .named by testRhumb_aux_.py line 11
# lazily imported pygeodesy.DIG from .constants by testRhumb_aux_.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testRhumb_aux_.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testRhumb_aux_.py line 11
# lazily imported pygeodesy.GDict from .karney by testRhumb_aux_.py line 11
# lazily imported pygeodesy.isfinite from .constants by testRhumb_aux_.py line 11
# lazily imported pygeodesy.itemsorted from .basics by testRhumb_aux_.py line 11
# lazily imported pygeodesy.latDMS from .dms by testRhumb_aux_.py line 11
# lazily imported pygeodesy.lonDMS from .dms by testRhumb_aux_.py line 11
# lazily imported pygeodesy.parseDMS from .dms by testRhumb_aux_.py line 11
# lazily imported pygeodesy.parseDMS2 from .dms by testRhumb_aux_.py line 11
# lazily imported pygeodesy.RhumbAux from .rhumb.aux_ by testRhumb_aux_.py line 11
# lazily imported pygeodesy.RhumbLineAux from .rhumb.aux_ by testRhumb_aux_.py line 11
# lazily imported pygeodesy.RhumbLineSolve from .rhumb.solve by testRhumb_aux_.py line 11
# lazily imported pygeodesy.R_M from .constants by testRhumb_aux_.py line 11
# lazily imported pygeodesy.Fwelford from .fstats by testRhumb_aux_.py line 11
# lazily imported pygeodesy.fremainder from .fmath by testRhumb_aux_.py line 11

    testing testRhumb_aux_.py 23.12.02 (module pygeodesy.rhumb.aux_ 24.06.11) isLazy=3

    testDirectX vs ...(pygeodesy.rhumb.aux_, 24.06.11)
    test 1 Direct.azi12: -92.38889
    test 2 Direct.lat1: 40.6
    test 3 Direct.lat2: 21.3781208262067  FAILED, KNOWN, expected 35.79999595
    test 4 Direct.lon1: -73.8
    test 5 Direct.lon2: -102.999609498889  FAILED, KNOWN, expected 140.3000041
    test 6 Direct.s12: 12782581.068

    20 tests skipped (20): No module named 'numpy': required by auxDST.AuxDST

    testInverseX vs ...(pygeodesy.rhumb.aux_, 24.06.11)
    test 7 Inverse.azi12: -92.3888879816997  FAILED, KNOWN, expected -92.38889
    test 8 Inverse.lat1: 40.6
    test 9 Inverse.lat2: 35.8
    test 10 Inverse.lon1: -73.8
    test 11 Inverse.lon2: 140.3
    test 12 Inverse.s12: 1282.19384243156  FAILED, KNOWN, expected 1282.19384
    test 13 Inverse.S12: 21207525604650.8

    60 tests skipped (80): No module named 'numpy': required by auxDST.AuxDST

    test 14 R.exact: True
    test 15 R.exact: False
    test 16 R: RhumbAux(RAorder=None, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=False)

    test 17 R.exact: True
    test 18 R.Line.exact: True
# lazily imported pygeodesy.etm by bases.py line 1012
    test 19 R.Line: RhumbLineAux(TMorder=6, azi12=3.0, exact=True, lat1=1.0, lon1=2.0, rhumb=RhumbAux(RAorder=None, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=True), xTM=ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0))
# lazily imported pygeodesy.ktm by bases.py line 446
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1023

    test 20 PlumbTo(exact=False, est=1000000.0): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 21 a02: 17.967658
    test 22 s02: 1997960.116871
    test 23 s12: 3083112.636236
    test 24 azi0: 113.736
    test 25 azi2: 135.000
    test 26 iteration: 7

    test 27 PlumbTo(exact=False, est=None): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 28 a02: 17.967658
    test 29 s02: 1997960.116871
    test 30 s12: 3083112.636236
    test 31 azi0: 113.736
    test 32 azi2: 135.000
    test 33 iteration: 5
# lazily imported pygeodesy.formy by bases.py line 703

    test 34 Intersecant2: (Intersecant2(a03=17.798332, a12=44.076956, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=61.164348, lat3=45.0, lon0=0.0, lon1=0.0, lon2=46.209348, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=4898402.305119), Intersecant2(a03=17.798332, a12=-5.034244, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=26.4303, lat3=45.0, lon0=0.0, lon1=0.0, lon2=-4.030999, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=-559470.390057))
    test 35 azi0*=-90.000: exact=False, iteration=5, max=0.0, mean=0.0, min=-0.0, stdev=0.0

    test 36 PlumbTo(exact=True, est=1000000.0): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 37 a02: 17.967658
    test 38 s02: 1997960.116871
    test 39 s12: 3083112.636236
    test 40 azi0: 113.736
    test 41 azi2: 135.000
    test 42 iteration: 7

    test 43 PlumbTo(exact=True, est=None): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 44 a02: 17.967658
    test 45 s02: 1997960.116871
    test 46 s12: 3083112.636236
    test 47 azi0: 113.736
    test 48 azi2: 135.000
    test 49 iteration: 5

    test 50 Intersecant2: (Intersecant2(a03=17.798332, a12=44.076956, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=61.164348, lat3=45.0, lon0=0.0, lon1=0.0, lon2=46.209348, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=4898402.305119), Intersecant2(a03=17.798332, a12=-5.034244, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=26.4303, lat3=45.0, lon0=0.0, lon1=0.0, lon2=-4.030999, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=-559470.390057))
    test 51 azi0*=-90.000: exact=True, iteration=5, max=0.0, mean=0.0, min=-0.0, stdev=0.0

    test 52 PlumbTo(exact=None, est=None): Intersection(a02=17.798332, a12=19.521356, at=90.0, azi02=135.0, azi12=45.0, lat0=60.0, lat1=30.0, lat2=45.0, lon0=0.0, lon1=0.0, lon2=15.830286, name='Intersection', s02=1977981.142985, s12=2169465.957531)
    test 53 a02: 17.798332
    test 54 s02: 1977981.142985
    test 55 s12: 2169465.957531
    test 56 azi02: 135.000
    test 57 iteration: 9

    test 58 Intersecant2: (Intersecant2(a03=17.798332, a12=44.076956, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=61.164348, lat3=45.0, lon0=0.0, lon1=0.0, lon2=46.209348, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=4898402.305119), Intersecant2(a03=17.798332, a12=-5.034244, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=26.4303, lat3=45.0, lon0=0.0, lon1=0.0, lon2=-4.030999, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=-559470.390057))
    test 59 azi0*=90.000: exact=None, iteration=20, max=0.507468, mean=-2.015217, min=-6.079451, stdev=2.057451

    test 60 xTM: ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0)

    test 61 Intersection: Intersection(a02=42.220588, a12=16.98358, at=-85.0, azi02=-50.0, azi12=35.0, lat0=0.0, lat1=10.0, lat2=23.944114, lon0=-10.0, lon1=-56.0, lon2=-45.833131, name='Intersection', s02=4694721.624938, s12=1888490.587742)  FAILED, KNOWN, expected (26.9774, -43.4088)
    test 62 PlumbTo: Intersection(a02=0.0, a12=16.98358, at=90.0, azi02=125.0, azi12=35.0, lat0=23.944114, lat1=10.0, lat2=23.944114, lon0=-45.833131, lon1=-56.0, lon2=-45.833131, name='Intersection', s02=0.000044, s12=1888490.587743)
    test 63 PlumbTo: Intersection(a02=0.0, a12=42.220588, at=90.0, azi02=40.0, azi12=-50.0, lat0=23.944114, lat1=0.0, lat2=23.944114, lon0=-45.833131, lon1=-10.0, lon2=-45.833131, name='Intersection', s02=0.00026, s12=4694721.624901)
    test 64 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='Sphere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)

    test 65 Intersection: Intersection(a02=31.539478, a12=26.853309, at=-135.0, azi02=-45.0, azi12=90.0, lat0=15.0, lat1=37.0, lat2=37.0, lon0=-17.0, lon1=-76.0, lon2=-42.376015, name='Intersection', s02=3507034.715572, s12=2985955.796006)  FAILED, KNOWN, expected (37.0, -41.7028)
    test 66 PlumbTo: Intersection(a02=0.0, a12=26.853309, at=90.0, azi02=180.0, azi12=90.0, lat0=37.0, lat1=37.0, lat2=37.0, lon0=-42.376015, lon1=-76.0, lon2=-42.376015, name='Intersection', s02=0.000162, s12=2985955.795978)
    test 67 PlumbTo: Intersection(a02=0.0, a12=31.539478, at=90.0, azi02=45.0, azi12=-45.0, lat0=37.0, lat1=15.0, lat2=37.0, lon0=-42.376015, lon1=-17.0, lon2=-42.376015, name='Intersection', s02=0.000092, s12=3507034.71557)
    test 68 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='Sphere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)

    189 of 68 testRhumb_aux_.py tests (277.9%) FAILED, incl. 6 KNOWN plus 183 DeprecationWarnings, 80 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 8.671 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testRhumb_ekx.py
./test/testRhumb_ekx.py:37: DeprecationWarning: property_RO L{pygeodesy.ellipsoids.Ellipsoid.rhumbx} has been DEPRECATED on 2023.11.28, use property C{rhumbekx}.
  R = E.rhumbx
./test/testRhumb_ekx.py:129: DeprecationWarning: property_RO L{pygeodesy.ellipsoids.Ellipsoid.rhumbx} has been DEPRECATED on 2023.11.28, use property C{rhumbekx}.
  R = E.rhumbx
./test/testRhumb_ekx.py:184: DeprecationWarning: property_RO L{pygeodesy.ellipsoids.Ellipsoid.rhumbx} has been DEPRECATED on 2023.11.28, use property C{rhumbekx}.
  P = Ellipsoid(E.b, E.a, name='_Prolate').rhumbx  # '_...' for iOS
./test/testRhumb_ekx.py:218: DeprecationWarning: property_RO L{pygeodesy.ellipsoids.Ellipsoid.rhumbx} has been DEPRECATED on 2023.11.28, use property C{rhumbekx}.
  R = E.rhumbx
./test/testRhumb_ekx.py:228: DeprecationWarning: method L{pygeodesy.rhumb.ekx.Rhumb.orders} has been DEPRECATED, use properties C{RAorder} and/or C{TMorder}.
  t = R.orders(4, 8)
./pygeodesy/deprecated/classes.py:32: DeprecationWarning: class L{pygeodesy.deprecated.classes.RhumbOrder2Tuple} has been DEPRECATED, see deprecated method L{Rhumb.orders}.
  deprecated_class(cls)
./test/testRhumb_ekx.py:230: DeprecationWarning: method L{pygeodesy.rhumb.ekx.Rhumb.orders} has been DEPRECATED, use properties C{RAorder} and/or C{TMorder}.
  t = R.orders(6, 6)
./test/testRhumb_ekx.py:269: DeprecationWarning: method L{pygeodesy.rhumb.ekx.RhumbLine.distance2} has been DEPRECATED on 23.09.23, use method L{RhumbLineAux.Inverse} or L{RhumbLine.Inverse}.
  t = r.distance2(p.lat2, p.lon2)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Caps from .karney by testRhumb_ekx.py line 11
# lazily imported pygeodesy.classname from .named by testRhumb_ekx.py line 11
# lazily imported pygeodesy.DIG from .constants by testRhumb_ekx.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testRhumb_ekx.py line 11
# lazily imported pygeodesy.GDict from .karney by testRhumb_ekx.py line 11
# lazily imported pygeodesy.isfinite from .constants by testRhumb_ekx.py line 11
# lazily imported pygeodesy.itemsorted from .basics by testRhumb_ekx.py line 11
# lazily imported pygeodesy.latDMS from .dms by testRhumb_ekx.py line 11
# lazily imported pygeodesy.lonDMS from .dms by testRhumb_ekx.py line 11
# lazily imported pygeodesy.parseDMS from .dms by testRhumb_ekx.py line 11
# lazily imported pygeodesy.parseDMS2 from .dms by testRhumb_ekx.py line 11
# lazily imported pygeodesy.Rhumb from .rhumb.ekx by testRhumb_ekx.py line 11
# lazily imported pygeodesy.RhumbLine from .rhumb.ekx by testRhumb_ekx.py line 11
# lazily imported pygeodesy.RhumbLineSolve from .rhumb.solve by testRhumb_ekx.py line 11
# lazily imported pygeodesy.R_M from .constants by testRhumb_ekx.py line 11
# lazily imported pygeodesy.Fwelford from .fstats by testRhumb_ekx.py line 11
# lazily imported pygeodesy.fremainder from .fmath by testRhumb_ekx.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testRhumb_ekx.py line 346

    testing testRhumb_ekx.py 23.11.30 (module pygeodesy.rhumb.ekx 24.06.11) isLazy=3

    testDirectX vs ...(pygeodesy.rhumb.ekx, 24.06.11)
# lazily imported pygeodesy.elliptic by ellipsoids.py line 842
    test 1 Direct.azi12: -92.38889
    test 2 Direct.lat1: 40.6
    test 3 Direct.lat2: 35.799995945206  FAILED, KNOWN, expected 35.79999
    test 4 Direct.lon1: -73.8
    test 5 Direct.lon2: 140.300004102052  FAILED, KNOWN, expected 140.23651
    test 6 Direct.s12: 12782581.068

    test 7 GDict.azi12: 51
    test 8 GDict.lat1: 40.6
    test 9 GDict.lat2: 71.688899882813
    test 10 GDict.lon1: -73.8
    test 11 GDict.lon2: 0.255519824423374  FAILED, KNOWN, expected 0.255519824423359
    test 12 GDict.s12: 5500000
    test 13 GDict.S12: 44095641862956.1
# lazily imported pygeodesy.etm by bases.py line 1012

    test 14 RhumbLine: TMorder=6, azi12=51.0, exact=True, lat1=40.6, lon1=-73.8, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=True), xTM=ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 15 Rhumb: Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=True)
    test 16 isLoxodrome: True

    test 17 ArcPosition.a12: 51
    test 18 ArcPosition.azi12: 51
    test 19 ArcPosition.lat1: 40.6
    test 20 ArcPosition.lat2: 72.6351275818438  FAILED, KNOWN, expected 72.635128
    test 21 ArcPosition.lon1: -73.8
    test 22 ArcPosition.lon2: 4.06852757947449  FAILED, KNOWN, expected 4.068528
    test 23 ArcPosition.s12: 5667780.57994388  FAILED, KNOWN, expected 5667780.579944
    test 24 ArcPosition.S12: 46665957571716.4

    test 25 Position.a12: 51
    test 26 Position.azi12: 51
    test 27 Position.lat1: 40.6
    test 28 Position.lat2: 72.6351275818438  FAILED, KNOWN, expected 72.635128
    test 29 Position.lon1: -73.8
    test 30 Position.lon2: 4.06852757947449  FAILED, KNOWN, expected 4.068528
    test 31 Position.s12: 5667780.57994388
    test 32 Position.S12: 46665957571716.4

    test 33 Direct.a12: 115.020619671634  FAILED, KNOWN, expected 115.02062
    test 34 Direct.azi12: -92.38889
    test 35 Direct.lat1: 40.6
    test 36 Direct.lat2: 35.799995945206  FAILED, KNOWN, expected 35.8
    test 37 Direct.lon1: -73.8
    test 38 Direct.lon2: 140.300004102052  FAILED, KNOWN, expected 140.3
    test 39 Direct.s12: 12782581.068

    test 40 ArcDirect.a12: 115.020619671634
    test 41 ArcDirect.azi12: -92.38889
    test 42 ArcDirect.lat1: 40.6
    test 43 ArcDirect.lat2: 35.799995945206  FAILED, KNOWN, expected 35.8
    test 44 ArcDirect.lon1: -73.8
    test 45 ArcDirect.lon2: 140.300004102052  FAILED, KNOWN, expected 140.3
    test 46 ArcDirect.s12: 12782581.068

    test 47 Direct8: (40.6, -73.8, 35.799996, 140.300004, -92.38889, 12782581.068, -63760638302268.796875, 115.02062)
    test 48 toDirect9Tuple: (115.02062, 35.799996, 140.300004, -92.38889, 12782581.068, 12782581.068, 1.0, 1.0, -63760638302268.796875)
    test 49 DirectLine: (40.6, -73.8, 35.799996, 140.300004, -92.38889, 12782581.068, -63760638302268.796875, 115.02062)

    test 50 RhumbLine: TMorder=6, azi12=51.0, exact=True, lat1=40.6, lon1=-73.8, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=True), xTM=ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 51 DirectLine: TMorder=6, azi12=-51.0, exact=True, lat1=35.8, lon1=140.3, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=True), xTM=ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0)

    testInverseX vs ...(pygeodesy.rhumb.ekx, 24.06.11)
    test 52 Inverse.azi12: -92.3888879816997  FAILED, KNOWN, expected -92.38889
    test 53 Inverse.lat1: 40.6
    test 54 Inverse.lat2: 35.8
    test 55 Inverse.lon1: -73.8
    test 56 Inverse.lon2: 140.3
    test 57 Inverse.s12: 12782581.0676842
    test 58 Inverse.S12: -63760642939072.5  FAILED, KNOWN, expected -63760642939073

    test 59 GDict.azi12: 77.7683897102557
    test 60 GDict.lat1: 40.6
    test 61 GDict.lat2: 51.6
    test 62 GDict.lon1: -73.8
    test 63 GDict.lon2: -0.5
    test 64 GDict.s12: 5771083.38332803
    test 65 GDict.S12: 37395209100030.4

    test 66 Inverse.azi12: 103.582833003411  FAILED, KNOWN, expected 103.582833333333
    test 67 Inverse.lat1: 40.6397222222222  FAILED, KNOWN, expected 40.639722
    test 68 Inverse.lat2: 1.35916666666667  FAILED, KNOWN, expected 1.359167
    test 69 Inverse.lon2: 103.989444444444  FAILED, KNOWN, expected 103.989444
    test 70 Inverse.s12: 18523563.0423774  FAILED, KNOWN, expected 18523563

    test 71 0,000 Km lat2: 40:38:23.0N
    test 72 0,000 Km lon2: 073:46:44.0W
    test 73 0,000 Km S12 : 0
    test 74 1,000 Km lat2: 36:24:30.3N
    test 75 1,000 Km lon2: 051:28:26.4W
    test 76 1,000 Km S12 : 9817078307820  FAILED, KNOWN, expected 9817078307821
    test 77 2,000 Km lat2: 32:10:26.8N
    test 78 2,000 Km lon2: 030:20:57.3W
    test 79 2,000 Km S12 : 18224745682004  FAILED, KNOWN, expected 18224745682005
    test 80 3,000 Km lat2: 27:56:13.2N
    test 81 3,000 Km lon2: 010:10:54.2W
    test 82 3,000 Km S12 : 25358020327741
    test 83 4,000 Km lat2: 23:41:50.1N
    test 84 4,000 Km lon2: 009:12:45.5E
    test 85 4,000 Km S12 : 31321269267101  FAILED, KNOWN, expected 31321269267102
    test 86 5,000 Km lat2: 19:27:18.7N
    test 87 5,000 Km lon2: 027:59:22.1E
    test 88 5,000 Km S12 : 36195163180159
    test 89 6,000 Km lat2: 15:12:40.2N
    test 90 6,000 Km lon2: 046:17:01.1E
    test 91 6,000 Km S12 : 40041499143669
    test 92 7,000 Km lat2: 10:57:55.9N
    test 93 7,000 Km lon2: 064:12:52.8E
    test 94 7,000 Km S12 : 42906570007050
    test 95 8,000 Km lat2: 06:43:07.3N
    test 96 8,000 Km lon2: 081:53:28.8E
    test 97 8,000 Km S12 : 44823504180200
    test 98 9,000 Km lat2: 02:28:16.2N
    test 99 9,000 Km lon2: 099:24:54.5E
    test 100 9,000 Km S12 : 45813843358737
    test 101 10,000 Km lat2: 01:46:36.0S
    test 102 10,000 Km lon2: 116:52:59.7E
    test 103 10,000 Km S12 : 45888525219677

    test 104 Inverse: {a12: 51.420061, azi12: 77.692032, azi21: -102.307968, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, name: '_Prolate', s12: 5733622.743165}
    test 105 Inverse8: (40.6, -73.8, 51.6, -0.5, 77.692032, 5733622.743165, 37469093881942.273438, 51.420061)
    test 106 toInverse10Tuple: (51.420061, 5733622.743165, 0.977016, 0.213166, 0.977016, 0.213166, 5733622.743165, 1.0, 1.0, 37469093881942.273438)
    test 107 InverseLine: -102.23161028974432

    test 108 R.exact: True
    test 109 R.exact: False
    test 110 R: Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=False)

    test 111 R.exact: True
    test 112 R.Line.exact: True
    test 113 R.Line: RhumbLine(TMorder=6, azi12=3.0, exact=True, lat1=1.0, lon1=2.0, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=True), xTM=ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0))
# lazily imported pygeodesy.deprecated by ekx.py line 205
    test 114 orders: (6, 6)
    test 115 orders: (4, 8)

# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1023

    test 116 PlumbTo(exact=False, est=1000000.0): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 117 a02: 17.967658
    test 118 s02: 1997960.116871
    test 119 s12: 3083112.636236
    test 120 azi0: 113.736
    test 121 azi2: 135.000
    test 122 iteration: 7

    test 123 PlumbTo(exact=False, est=None): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 124 a02: 17.967658
    test 125 s02: 1997960.116871
    test 126 s12: 3083112.636236
    test 127 azi0: 113.736
    test 128 azi2: 135.000
    test 129 iteration: 5

    test 130 Intersecant2: (Intersecant2(a03=17.798332, a12=44.076956, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=61.164348, lat3=45.0, lon0=0.0, lon1=0.0, lon2=46.209348, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=4898402.305119), Intersecant2(a03=17.798332, a12=-5.034244, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=26.4303, lat3=45.0, lon0=0.0, lon1=0.0, lon2=-4.030999, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=-559470.390057))
    test 131 azi0*=-90.000: exact=False, iteration=128, max=0.0, mean=-0.0, min=-0.0, stdev=0.0

    test 132 PlumbTo(exact=True, est=1000000.0): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 133 a02: 17.967658
    test 134 s02: 1997960.116871
    test 135 s12: 3083112.636236
    test 136 azi0: 113.736
    test 137 azi2: 135.000
    test 138 iteration: 7

    test 139 PlumbTo(exact=True, est=None): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 140 a02: 17.967658
    test 141 s02: 1997960.116871
    test 142 s12: 3083112.636236
    test 143 azi0: 113.736
    test 144 azi2: 135.000
    test 145 iteration: 5

    test 146 Intersecant2: (Intersecant2(a03=17.798332, a12=44.076956, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=61.164348, lat3=45.0, lon0=0.0, lon1=0.0, lon2=46.209348, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=4898402.305119), Intersecant2(a03=17.798332, a12=-5.034244, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=26.4303, lat3=45.0, lon0=0.0, lon1=0.0, lon2=-4.030999, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=-559470.390057))
    test 147 azi0*=-90.000: exact=True, iteration=128, max=0.0, mean=-0.0, min=-0.0, stdev=0.0

    test 148 PlumbTo(exact=None, est=None): Intersection(a02=17.798332, a12=19.521356, at=90.0, azi02=135.0, azi12=45.0, lat0=60.0, lat1=30.0, lat2=45.0, lon0=0.0, lon1=0.0, lon2=15.830286, name='Intersection', s02=1977981.142985, s12=2169465.957531)
    test 149 a02: 17.798332
    test 150 s02: 1977981.142985
    test 151 s12: 2169465.957531
    test 152 azi02: 135.000
    test 153 iteration: 9

    test 154 Intersecant2: (Intersecant2(a03=17.798332, a12=44.076956, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=61.164348, lat3=45.0, lon0=0.0, lon1=0.0, lon2=46.209348, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=4898402.305119), Intersecant2(a03=17.798332, a12=-5.034244, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=26.4303, lat3=45.0, lon0=0.0, lon1=0.0, lon2=-4.030999, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=-559470.390057))
    test 155 azi0*=90.000: exact=None, iteration=20, max=0.507468, mean=-2.015217, min=-6.079451, stdev=2.057451

    test 156 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=7)

    test 157 Intersection: Intersection(a02=41.823427, a12=16.45698, at=-85.0, azi02=-50.0, azi12=35.0, lat0=0.0, lat1=10.0, lat2=23.944114, lon0=-10.0, lon1=-56.0, lon2=-45.833131, name='Intersection', s02=4650559.291378, s12=1829935.168035)  FAILED, KNOWN, expected (26.9774, -43.4088)
    test 158 PlumbTo: Intersection(a02=0.0, a12=16.45698, at=90.0, azi02=125.0, azi12=35.0, lat0=23.944114, lat1=10.0, lat2=23.944114, lon0=-45.833131, lon1=-56.0, lon2=-45.833131, name='Intersection', s02=0.000043, s12=1829935.168032)
    test 159 PlumbTo: Intersection(a02=0.0, a12=41.823427, at=90.0, azi02=40.0, azi12=-50.0, lat0=23.944114, lat1=0.0, lat2=23.944114, lon0=-45.833131, lon1=-10.0, lon2=-45.833131, name='Intersection', s02=0.000246, s12=4650559.291327)
    test 160 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='Sphere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)

    test 161 Intersection: Intersection(a02=29.910202, a12=26.853309, at=-135.0, azi02=-45.0, azi12=90.0, lat0=15.0, lat1=37.0, lat2=37.0, lon0=-17.0, lon1=-76.0, lon2=-42.376015, name='Intersection', s02=3325867.316604, s12=2985955.796006)  FAILED, KNOWN, expected (37.0, -41.7028)
    test 162 PlumbTo: Intersection(a02=0.0, a12=26.853309, at=90.0, azi02=180.0, azi12=90.0, lat0=37.0, lat1=37.0, lat2=37.0, lon0=-42.376015, lon1=-76.0, lon2=-42.376015, name='Intersection', s02=0.000129, s12=2985955.795978)
    test 163 PlumbTo: Intersection(a02=0.0, a12=29.910202, at=90.0, azi02=45.0, azi12=-45.0, lat0=37.0, lat1=15.0, lat2=37.0, lon0=-42.376015, lon1=-17.0, lon2=-42.376015, name='Intersection', s02=0.000081, s12=3325867.316586)
    test 164 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='Sphere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)

    216 of 164 testRhumb_ekx.py tests (131.7%) FAILED, incl. 25 KNOWN plus 191 DeprecationWarnings (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 8.625 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testRoutes.py
./test/testRoutes.py:17103: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  r = f(pts, wrap=True, **kwds)
./pygeodesy/ellipsoidalKarney.py:139: DeprecationWarning: Property_RO L{pygeodesy.ellipsoids.Ellipsoid.geodesic} has been DEPRECATED, use property C{geodesicw}.
  return fabs(_polygon(datum.ellipsoid.geodesic, points, True, False, wrap))
./test/testRoutes.py:17103: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.perimeterOf} has been DEPRECATED, use function L{ellipsoidalExact.perimeterOf} or L{ellipsoidalKarney.perimeterOf}.
  r = f(pts, wrap=True, **kwds)
./pygeodesy/ellipsoidalKarney.py:352: DeprecationWarning: Property_RO L{pygeodesy.ellipsoids.Ellipsoid.geodesic} has been DEPRECATED, use property C{geodesicw}.
  return _polygon(datum.ellipsoid.geodesic, points, closed, True, wrap)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.LatLon_ from .points by testRoutes.py line 13
# lazily imported pygeodesy.R_KM from .constants by testRoutes.py line 13
# lazily imported pygeodesy.R_M from .constants by testRoutes.py line 13
# lazily imported pygeodesy.ellipsoidalVincenty by testRoutes.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testRoutes.py line 13
# lazily imported pygeodesy.areaOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.isclockwise from .points by testRoutes.py line 13
# lazily imported pygeodesy.perimeterOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.unstr from .streprs by testRoutes.py line 13

    testing testRoutes.py 23.08.23 isLazy=3
# lazily imported pygeodesy.booleans by points.py line 978
    test 1 points.areaOf('Antarctica', adjust=True, radius=6371.01, wrap=True): 1751693.701  FAILED, KNOWN, expected 13552524.800
    test 2 points.areaOf('PtsFFI', adjust=True, radius=6371.01, wrap=True): 1.288
    test 3 points.areaOf('RdpFFI', adjust=True, radius=6371.01, wrap=True): 1.241
    test 4 points.areaOf('Pts', adjust=True, radius=6371.01, wrap=True): 131184.240
    test 5 points.areaOf('VwPts', adjust=True, radius=6371.01, wrap=True): 140310.144
    test 6 points.areaOf('_JFK_LHR1', adjust=True, radius=6371.01, wrap=True): 41383852.921  FAILED, KNOWN, expected 40041368.849
    test 7 points.areaOf('_JFK_LHR2', adjust=True, radius=6371.01, wrap=True): 82767705.842  FAILED, KNOWN, expected 80082737.697
    test 8 points.areaOf('Antarctica', adjust=False, radius=6371.01, wrap=True): 10446635.730  FAILED, KNOWN, expected 13552524.800
    test 9 points.areaOf('PtsFFI', adjust=False, radius=6371.01, wrap=True): 2.185  FAILED, KNOWN, expected 1.288
    test 10 points.areaOf('RdpFFI', adjust=False, radius=6371.01, wrap=True): 2.105  FAILED, KNOWN, expected 1.241
    test 11 points.areaOf('Pts', adjust=False, radius=6371.01, wrap=True): 233595.011  FAILED, KNOWN, expected 131184.240
    test 12 points.areaOf('VwPts', adjust=False, radius=6371.01, wrap=True): 258465.911  FAILED, KNOWN, expected 140310.144
    test 13 points.areaOf('_JFK_LHR1', adjust=False, radius=6371.01, wrap=True): 41780731.678  FAILED, KNOWN, expected 40041368.849
    test 14 points.areaOf('_JFK_LHR2', adjust=False, radius=6371.01, wrap=True): 83561463.357  FAILED, KNOWN, expected 80082737.697
    test 15 sphericalTrigonometry.areaOf('Antarctica', radius=6371.01, wrap=True): 241480413.388
    test 16 sphericalTrigonometry.areaOf('PtsFFI', radius=6371.01, wrap=True): 1.338
    test 17 sphericalTrigonometry.areaOf('RdpFFI', radius=6371.01, wrap=True): 1.289
    test 18 sphericalTrigonometry.areaOf('Pts', radius=6371.01, wrap=True): 125942.444
    test 19 sphericalTrigonometry.areaOf('VwPts', radius=6371.01, wrap=True): 118897.757
    test 20 sphericalTrigonometry.areaOf('_JFK_LHR1', radius=6371.01, wrap=True): 40105639.197
    test 21 sphericalTrigonometry.areaOf('_JFK_LHR2', radius=6371.01, wrap=True): 80211278.393
# lazily imported pygeodesy.ellipsoidalKarney by ellipsoidalVincenty.py line 399
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1053
# lazily imported pygeodesy.ellipsoidalExact by ellipsoidalVincenty.py line 401
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
# lazily imported pygeodesy.elliptic by gx.py line 426
    test 22 ellipsoidalVincenty.areaOf('Antarctica', wrap=True): 1.366270e+13
    test 23 ellipsoidalVincenty.areaOf('PtsFFI', wrap=True): 1.343272e+06
    test 24 ellipsoidalVincenty.areaOf('RdpFFI', wrap=True): 1.294375e+06
    test 25 ellipsoidalVincenty.areaOf('Pts', wrap=True): 0.000000e+00  FAILED, KNOWN, expected 1.271286e+11
    test 26 ellipsoidalVincenty.areaOf('VwPts', wrap=True): 1.200540e+11
    test 27 ellipsoidalVincenty.areaOf('_JFK_LHR1', wrap=True): 4.004137e+13
    test 28 ellipsoidalVincenty.areaOf('_JFK_LHR2', wrap=True): 8.008274e+13
    test 29 ellipsoidalVincenty.areaOf('Antarctica', wrap=True): 1.366270e+13
    test 30 ellipsoidalVincenty.areaOf('PtsFFI', wrap=True): 1.343272e+06
    test 31 ellipsoidalVincenty.areaOf('RdpFFI', wrap=True): 1.294375e+06
    test 32 ellipsoidalVincenty.areaOf('Pts', wrap=True): 0.000000e+00  FAILED, KNOWN, expected 1.271286e+11
    test 33 ellipsoidalVincenty.areaOf('VwPts', wrap=True): 1.200540e+11
    test 34 ellipsoidalVincenty.areaOf('_JFK_LHR1', wrap=True): 4.004137e+13
    test 35 ellipsoidalVincenty.areaOf('_JFK_LHR2', wrap=True): 8.008274e+13
    test 36 points.perimeterOf('Antarctica', closed=False, radius=6.37101e+06, wrap=True): 15620294.792  FAILED, KNOWN, expected 16765661.499
    test 37 points.perimeterOf('PtsFFI', closed=False, radius=6.37101e+06, wrap=True): 3224.123
    test 38 points.perimeterOf('RdpFFI', closed=False, radius=6.37101e+06, wrap=True): 3185.467
    test 39 points.perimeterOf('Pts', closed=False, radius=6.37101e+06, wrap=True): 2762313.129
    test 40 points.perimeterOf('VwPts', closed=False, radius=6.37101e+06, wrap=True): 2672557.850
    test 41 points.perimeterOf('_JFK_LHR1', closed=False, radius=6.37101e+06, wrap=True): 16034670.768  FAILED, KNOWN, expected 15766750.804
    test 42 points.perimeterOf('_JFK_LHR2', closed=False, radius=6.37101e+06, wrap=True): 26286857.120  FAILED, KNOWN, expected 25981742.208
    test 43 sphericalTrigonometry.perimeterOf('Antarctica', closed=False, radius=6.37101e+06, wrap=True): 15470624.834
    test 44 sphericalTrigonometry.perimeterOf('PtsFFI', closed=False, radius=6.37101e+06, wrap=True): 3224.123
    test 45 sphericalTrigonometry.perimeterOf('RdpFFI', closed=False, radius=6.37101e+06, wrap=True): 3185.467
    test 46 sphericalTrigonometry.perimeterOf('Pts', closed=False, radius=6.37101e+06, wrap=True): 2762313.116
    test 47 sphericalTrigonometry.perimeterOf('VwPts', closed=False, radius=6.37101e+06, wrap=True): 2672556.441
    test 48 sphericalTrigonometry.perimeterOf('_JFK_LHR1', closed=False, radius=6.37101e+06, wrap=True): 15789078.314
    test 49 sphericalTrigonometry.perimeterOf('_JFK_LHR2', closed=False, radius=6.37101e+06, wrap=True): 26041264.665
    test 50 ellipsoidalVincenty.perimeterOf('Antarctica', closed=False, wrap=True): 15531770.613
    test 51 ellipsoidalVincenty.perimeterOf('PtsFFI', closed=False, wrap=True): 3229.337
    test 52 ellipsoidalVincenty.perimeterOf('RdpFFI', closed=False, wrap=True): 3190.602
    test 53 ellipsoidalVincenty.perimeterOf('Pts', closed=False, wrap=True): 0.000  FAILED, KNOWN, expected 2769709.412
    test 54 ellipsoidalVincenty.perimeterOf('VwPts', closed=False, wrap=True): 2679915.858
    test 55 ellipsoidalVincenty.perimeterOf('_JFK_LHR1', closed=False, wrap=True): 15766750.804  FAILED, KNOWN, expected 15763434.962
    test 56 ellipsoidalVincenty.perimeterOf('_JFK_LHR2', closed=False, wrap=True): 25981742.208  FAILED, KNOWN, expected 25972353.155
    test 57 ellipsoidalVincenty.perimeterOf('Antarctica', closed=True, wrap=True): 16830891.356
    test 58 ellipsoidalVincenty.perimeterOf('PtsFFI', closed=True, wrap=True): 5491.045
    test 59 ellipsoidalVincenty.perimeterOf('RdpFFI', closed=True, wrap=True): 5452.310
    test 60 ellipsoidalVincenty.perimeterOf('Pts', closed=True, wrap=True): 0.000  FAILED, KNOWN, expected 5259077.242
    test 61 ellipsoidalVincenty.perimeterOf('VwPts', closed=True, wrap=True): 5171947.931
    test 62 ellipsoidalVincenty.perimeterOf('_JFK_LHR1', closed=True, wrap=True): 23926469.479  FAILED, KNOWN, expected 23921931.540
    test 63 ellipsoidalVincenty.perimeterOf('_JFK_LHR2', closed=True, wrap=True): 31533501.608  FAILED, KNOWN, expected 31524112.555
    test 64 no module: geographiclib.Geodesic
    test 65 isclockwise('Antarctica', adjust=False, wrap=True): 1.000
    test 66 isclockwise('PtsFFI', adjust=False, wrap=True): 1.000
    test 67 isclockwise('RdpFFI', adjust=False, wrap=True): 1.000
    test 68 isclockwise('Pts', adjust=False, wrap=True): 1.000
    test 69 isclockwise('VwPts', adjust=False, wrap=True): 1.000
    test 70 isclockwise('_JFK_LHR1', adjust=False, wrap=True): 0.000
    test 71 isclockwise('_JFK_LHR2', adjust=False, wrap=True): 0.000

    69 of 71 testRoutes.py tests (97.2%) FAILED, incl. 21 KNOWN plus 48 DeprecationWarnings (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 10.109 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testSimplify.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.EPS from .constants by testSimplify.py line 11
# lazily imported pygeodesy.R_M from .constants by testSimplify.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testSimplify.py line 11
# lazily imported pygeodesy.Numpy2LatLon from .points by testSimplify.py line 11
# lazily imported pygeodesy.simplify1 from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyRW from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyRDP from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyRDPm from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyVW from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyVWm from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.R_KM from .constants by testRoutes.py line 13
# lazily imported pygeodesy.ellipsoidalVincenty by testRoutes.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testRoutes.py line 13
# lazily imported pygeodesy.areaOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.isclockwise from .points by testRoutes.py line 13
# lazily imported pygeodesy.perimeterOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.unstr from .streprs by testRoutes.py line 13

    testing testSimplify.py 23.03.27 (module pygeodesy.simplify 24.05.25) isLazy=3
    test 1 simplify1(16614, adjust=True) 1m (53.449 ms): 16597
    test 2 simplifyRW(16614, adjust=True, shortest=False, indices=True) 1m (39.835 ms): 7095
    test 3 simplifyRW(16614, adjust=True, shortest=False) 1m (40.184 ms): 7095
    test 4 simplifyRW(16614, adjust=True, shortest=True) 1m (58.187 ms): 8302
    test 5 simplifyVWm(16614, adjust=True, indices=True) 1m (82.108 ms): 16328
    test 6 simplifyVWm(16614, adjust=True) 1m (82.850 ms): 16328
    test 7 simplifyVWm(16614, adjust=False) 1m (83.186 ms): 16373
    test 8 simplifyRDPm(16614, adjust=True, shortest=False) 1m (79.508 ms): 15864
    test 9 simplifyRDPm(16614, adjust=True, shortest=True) 1m (79.991 ms): 15867
    test 10 simplifyRDPgr(16614, adjust=True, shortest=True, modified=True) 1m (50.414 ms): 15867
    test 11 simplifyRDPm(16614, adjust=False, shortest=False) 1m (75.590 ms): 15869
    test 12 simplifyRDPfw(16614, adjust=False, shortest=False, modified=True) 1m (26.550 ms): 15869
    test 13 simplifyRDP(16614, adjust=True, shortest=True, indices=True) 1m (609.085 ms): 10960
    test 14 simplifyRDP(16614, adjust=True, shortest=True) 1m (607.614 ms): 10960
    test 15 simplifyRDPgr(16614, adjust=True, shortest=True, modified=False) 1m (504.881 ms): 10960
    test 16 simplifyRDP(16614, adjust=False, shortest=False, indices=True) 1m (569.941 ms): 11248
    test 17 simplifyRDP(16614, adjust=False, shortest=False) 1m (569.368 ms): 11248
    test 18 simplifyRDPfw(16614, adjust=False, shortest=False, modified=False) 1m (195.706 ms): 11248
    test 19 simplifyVW(1661, adjust=True) 1m (9.686 ms): 1641
    test 20 simplifyVW(1661, adjust=False) 1m (8.139 ms): 1646
    test 21 simplifyRDP(1661, adjust=True, shortest=False) 1m (46.526 ms): 1231
    test 22 simplifyRDP(1661, adjust=True, shortest=True) 1m (46.981 ms): 1231
    test 23 simplifyRDPgr(1661, adjust=True, shortest=True) 1m (38.575 ms): 1231
    test 24 simplifyRDP(1661, adjust=False, shortest=False) 1m (44.398 ms): 1267
    test 25 simplifyRDPfw(1661, adjust=False, shortest=False) 1m (15.143 ms): 1267
    test 26 simplifyRDPgr(1661, adjust=False, shortest=True) 1m (27.682 ms): 1267
    test 27 simplifyVW(69, adjust=False) 1m (395.060 us): 69
    test 28 simplifyRDP(69, adjust=False, shortest=False) 1m (993.013 us): 50
    test 29 simplifyRDPfw(69, adjust=False, shortest=False) 1m (340.939 us): 50
    test 30 simplifyRDPgr(69, adjust=False, shortest=True) 1m (590.086 us): 50
    test 31 simplifyRDPgr(69, adjust=True, shortest=True) 1m (811.100 us): 45
    test 32 simplifyRDP(5, adjust=False, shortest=True) 1m (35.763 us): 5
    test 33 simplifyVW(5, adjust=False, attr='name') 30m (97.036 us): 5
    test 34 no module: numpy

    all 34 testSimplify.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 4.050 sec

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testSpherical.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.F_D from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_DM from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_DMS from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_RAD from .dms by testLatLon.py line 12
# lazily imported pygeodesy.R_M from .constants by testLatLon.py line 12
# lazily imported pygeodesy.R_NM from .constants by testLatLon.py line 12
# lazily imported pygeodesy.degrees from .utily by testLatLon.py line 12
# lazily imported pygeodesy.fstr from .streprs by testLatLon.py line 12
# lazily imported pygeodesy.Height from .units by testLatLon.py line 12
# lazily imported pygeodesy.isclockwise from .points by testLatLon.py line 12
# lazily imported pygeodesy.isconvex from .points by testLatLon.py line 12
# lazily imported pygeodesy.isenclosedBy from .points by testLatLon.py line 12
# lazily imported pygeodesy.isnear0 from .constants by testLatLon.py line 12
# lazily imported pygeodesy.ispolar from .points by testLatLon.py line 12
# lazily imported pygeodesy.m2km from .utily by testLatLon.py line 12
# lazily imported pygeodesy.m2NM from .utily by testLatLon.py line 12
# lazily imported pygeodesy.IntersectionError from .errors by testLatLon.py line 12
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testLatLon.py line 12
# lazily imported pygeodesy.EPS from .constants by testVectorial.py line 11
# lazily imported pygeodesy.EPS4 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.circin6 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum3 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum4_ from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.intersection3d3 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.meeus2 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.radii11 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testVectorial.py line 11
# lazily imported pygeodesy.sphericalNvector by testVectorial.py line 11
# lazily imported pygeodesy.soddy4 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate2d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate3d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.VectorError from .errors by testVectorial.py line 11
# lazily imported pygeodesy.F_DEG_ from .dms by testSpherical.py line 13
# lazily imported pygeodesy.PI_4 from .constants by testSpherical.py line 13
# lazily imported pygeodesy.classname from .named by testSpherical.py line 13
# lazily imported pygeodesy.degrees2m from .utily by testSpherical.py line 13
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testSpherical.py line 13
# lazily imported pygeodesy.latlonDMS from .dms by testSpherical.py line 13
# lazily imported pygeodesy.lonDMS from .dms by testSpherical.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testSpherical.py line 446

    testing testSpherical.py 23.10.23 isLazy=3

    testLatLon(pygeodesy.sphericalNvector, 24.06.11)
    test 1 isEllipsoidal: False
    test 2 isSpherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 isequalTo: True
    test 10 isequalTo: True
    test 11 latlon2: 52.20472, 0.14056
    test 12 latlon2: 52.2047, 0.1406
    test 13 latlon2: 52.205, 0.141
    test 14 latlon2: 52.2, 0.14
    test 15 latlon2: 52.2, 0.1
    test 16 latlon2: 52.0, 0.0
# lazily imported pygeodesy.ecef by latlonBase.py line 482
    test 17 chordTo: 12036677.26
    test 18 chordTo: 12036463.78
    test 19 initialBearingTo: 156.1666
    test 20 initialBearingTo: 65.8921
    test 21 initialBearingTo: 0.0
    test 22 initialBearingTo: 180.0
    test 23 finalBearingTo: 157.8904
    test 24 finalBearingTo: 93.8581
    test 25 bearingTo2: 156.1666, 157.8904
    test 26 ispolar: True
    test 27 copy: True
    test 28 __eq__: True
    test 29 __ne__: False
    test 30 equirectangularTo: 404329.56
    test 31 distanceTo: 404279.720589
    test 32 distanceTo: 404279.720589
    test 33 distanceTo: 2145
    test 34 distanceTo: 18013602.92
    test 35 distanceTo: 20015114.35
    test 36 intermediateTo: 51.372084°N, 000.707337°E
    test 37 intermediateTo: True
    test 38 intermediateTo: 404279.721
    test 39 intermediateTo+5: 35.160975°N, 008.989542°E
    test 40 intermediateTo+5: 5.000
    test 41 intermediateTo-4: 64.911647°N, 013.726301°W
    test 42 intermediateTo-4: 4.000
    test 43 intermediateTo-h: 125.000
    test 44 intermediateChordTo: 51.372294°N, 000.707192°E
    test 45 intermediateChordTo: True
    test 46 intermediateChordTo-h: 125.000
    test 47 midpointTo: 50.536327°N, 001.274614°E
    test 48 destination: 51.513546°N, 000.098345°W
    test 49 destination: 51°30′49″N, 000°05′54″W
    test 50 destination: 34°37′N, 116°33′W
    test 51 destination: 34.613647°N, 116.55116°W
    test 52 destination: 0.604122N, 2.034201W
    test 53 destination: 31.96383509°N, 064.37329146°E
    test 54 alongTrackDistanceTo: 62331.59
    test 55 alongTrackDistanceTo: 62331.58
    test 56 alongTrackDistanceTo: 99.588
    test 57 alongTrackDistanceTo: -7702.7
    test 58 alongTrackDistanceTo: 7587.6
    test 59 crossTrackDistanceTo: -305.66528160755445  FAILED, KNOWN, expected TypeError
    test 60 crossTrackDistanceTo: -307.55
    test 61 crossTrackDistanceTo: 7.4524
    test 62 greatCircle: (-0.79408, 0.12856, 0.59406)
# lazily imported pygeodesy.booleans by iters.py line 76
    test 63 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 64 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 65 chordTo: 124799.103
    test 66 cosineAndoyerLambertTo: 124801.098
    test 67 cosineAndoyerLambertTo: 124801.098
    test 68 cosineForsyheAndoyerLambertTo: 124801.098
    test 69 cosineForsyheAndoyerLambertTo: 124801.098
    test 70 cosineLawTo: 124801.098
    test 71 cosineLawTo: 124801.098
    test 72 equirectangularTo: 124804.754
    test 73 equirectangularTo: 124804.754
    test 74 euclideanTo: 130015.089
    test 75 euclideanTo: 130015.089
    test 76 flatLocalTo: 124804.754
    test 77 flatLocalTo: 124804.754
    test 78 flatPolarTo: 133663.257
    test 79 flatPolarTo: 133663.257
    test 80 hartzell: 53.3206°N, 001.7297°W
# lazily imported pygeodesy.triaxials by formy.py line 980
    test 81 hartzell: 53.3206°N, 001.7297°W
    test 82 height4: 0.0
    test 83 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 84 height4: 53°19′14.2″N, 001°43′46.9″W
    test 85 height4: 53°19′14.2″N, 001°43′46.9″W
    test 86 haversineTo: 124801.098
    test 87 haversineTo: 124801.098
    test 88 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 89 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 90 thomasTo: 124801.098
    test 91 thomasTo: 124801.098
    test 92 vincentysTo: 124801.098
    test 93 vincentysTo: 124801.098
    test 94 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 95 isclockwise: False
    test 96 isclockwise*: False
    test 97 isclockwise: True
    test 98 isclockwise*: True
    test 99 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 100 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 101 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 102 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 103 isconvex: False
    test 104 isconvex*: False
    test 105 isconvex: True
    test 106 isconvex*: True
    test 107 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 108 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 109 isenclosedBy1: True
    test 110 isenclosedBy1*: True
    test 111 isenclosedBy2: False
    test 112 isenclosedBy2*: False
    test 113 isenclosedBy3: False
    test 114 isenclosedBy3*: False
    test 115 isenclosedBy4: False
    test 116 isenclosedBy4*: False
    test 117 isenclosedBy5: False
    test 118 isenclosedBy5*: False
    test 119 isenclosedBy6: True
    test 120 isenclosedBy6*: True
    test 121 isenclosedBy7: True
    test 122 isenclosedBy7*: True
    test 123 isenclosedBy-CCW: True
    test 124 isenclosedBy-CW : True
    test 125 isenclosedBy-CCW: True
    test 126 initialBearingTo: 102.432182
    test 127 compassAngleTo: 100.017
    test 128 compassAngleTo: 105.599
    test 129 initialBearingTo: 288.715918
    test 130 compassAngleTo: 280.017
    test 131 compassAngleTo: 285.599
    test 132 equirectangularTo: 592.185
    test 133 distanceTo: 591.831
    test 134 compassAngleTo: 0.0
    test 135 compassAngleTo: 45.0
    test 136 compassAngleTo: 90.0
    test 137 compassAngleTo: 180.0
    test 138 compassAngleTo: 225.0
    test 139 compassAngleTo: 315.0
    test 140 compassAngleTo: 270.0
    test 141 compassAngleTo: 359.4
    test 142 latlon2: (53.0, 1.0)
    test 143 philam2: (0.93, 0.02)
    test 144 compassAngleTo: 31
    test 145 compassAngleTo: 45

    test 146 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 147 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 148 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 149 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 150 isequalTo: <class 'bool'>
    test 151 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 152 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 153 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 154 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 155 compassAngleTo: <class 'float'>
    test 156 cosineLawTo: <class 'float'>
    test 157 euclideanTo: <class 'float'>
    test 158 flatLocalTo: <class 'float'>
    test 159 flatPolarTo: <class 'float'>
    test 160 haversineTo: <class 'float'>
    test 161 hubenyTo: <class 'float'>
    test 162 vincentysTo: <class 'float'>
    test 163 toVector: (3922384.659522, 0.0, 5020423.423198)
    test 164 toVector3d: (0.61566, 0.0, 0.78801)
    test 165 trilaterate5 (pygeodesy.sphericalNvector) .min: 223.305
    test 166 trilaterate5 (pygeodesy.sphericalNvector) .point: 42.67456065°N, 002.49539502°E
    test 167 trilaterate5 (pygeodesy.sphericalNvector) .min- is .maxPoint: True
    test 168 trilaterate5 (pygeodesy.sphericalNvector) .n: 1
    test 169 trilaterate5 (pygeodesy.sphericalNvector) .error: sphericalNvector.LatLon.trilaterate5(area=True), MRO(nvectorBase.LatLonNvectorBase, sphericalBase.LatLonSphericalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    test 170 radii11: Radii11Tuple(rA=7701.409157, rB=1361.530045, rC=499.257353, cR=4886.694635, rIn=739.915482, riS=179.523525, roS=6087.250896, a=1860.787398, b=8200.666509, c=9062.939201, s=9562.196554)

    22 tests skipped (22): No module named 'numpy': required by vector2d._numpy

    test 171 area cw/ccw: 1.0

    testVectorial(pygeodesy.sphericalNvector, 24.06.11)
    test 172 crossTrackDistanceTo: -305.67
    test 173 crossTrackDistanceTo: -307.55

    test 174 toLatLon: 44.995674°N, 045.0°E
    test 175 toNvector: (0.50004, 0.50004, 0.70705)
    test 176 isequalTo: False
    test 177 isequalTo: True
    test 178 length: 0.99992449715
    test 179 euclid: 0.99995577
    test 180 length: 1.00
    test 181 euclid: 1.0000
    test 182 meanOf: 44.995674°N, 045.0°E
    test 183 meanOf: LatLon
    test 184 apply: (0.5, 0.5, 0.707)
    test 185 init: (0.5, 0.5, 0.707)
    test 186 i***: (0.5, 0.5, 0.707)
    test 187 abs: 0.99992449715
    test 188 sumOf: (52.70504, 0.61904, 0.70705)
    test 189 sumOf: Nv
    test 190 sumOf: sumOf
    test 191 length: 52.7134151513
    test 192 sizeof: 217  FAILED, KNOWN, expected 128
    test 193 length: 52.2051356286
    test 194 sizeof: 572  FAILED, KNOWN, expected 247
    test 195 copy: True
    test 196 length: 52.2051356286
    test 197 sizeof: 572

    test 198 toCartesian: [3185744.919, 3185744.919, 4504643.315]
    test 199 toLatLon: 44.995674°N, 045.0°E
    test 200 toNvector: (0.50004, 0.50004, 0.70705, -0.00)

    test 201 intersection: 02.499372°N, 002.5°E

    test 202 intersection1: 02.499372°N, 002.5°E
    test 203 intersection2: 02.499372°S, 177.5°W

    test 204 isenclosedBy: True
    test 205 isenclosedBy*: True
    test 206 isenclosedBy: True
    test 207 isenclosedBy*: True

    test 208 iswithin: False
    test 209 iswithin: True

    test 210 nearestOn: 51.0°N, 001.0°E
    test 211 nearestOn: 50.987°N, 000.298°W
    test 212 nearestOn: 51.0°N, 002.0°E
    test 213 nearestOn: 50.995°N, 002.655°E
    test 214 nearestOn: 51.0°N, 001.9°E
    test 215 nearestOn: True
    test 216 distanceTo: 42.712
    test 217 nearestOn: 51.0°N, 002.0°E
    test 218 nearestOn: True
    test 219 nearestOn: 00.0°N, 000.0°E
    test 220 nearestOn: True
    test 221 nearestOn: 00.0°N, 020.0°E
    test 222 nearestOn: True
    test 223 nearestOn: 02.0°N, 002.0°E
    test 224 nearestOn: 02.0°N, 002.0°E

    test 225 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 226 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))

    test 227 BasseC: 47.3038°N, 002.5721°W
    test 228 BasseH: 47.311067°N, 002.528617°W
    test 229 triangulate: 47.323667°N, 002.568501°W
    test 230 triangulate: True

    test 231 trilaterate: 37.419078°N, 121.960579°W
    test 232 trilaterate: True
    test 233 trilaterate: 08.068912°S, 034.888699°W
./test/testSpherical.py:318: DeprecationWarning: method L{pygeodesy.sphericalNvector.LatLon.rhumbBearingTo} has been DEPRECATED, use method C{.rhumbAzimuthTo}.
  b = p.rhumbBearingTo(q)  # rhumbAzimuthTo
    test 234 trilaterate: True
    test 235 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 236 trilaterate: True
    test 237 trilaterate: 42.67456065°N, 002.49539502°E
    test 238 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, wrap=False, z=-8.13526e-05)

    testNvector(pygeodesy.sphericalNvector, 24.06.11)
    test 239 sumOf: Nvector
    test 240 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 241 ecef.lat, .lon: 44.995674, 45.0
    test 242 ecef.height: -0.0
    test 243 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385

    testSpherical(pygeodesy.sphericalNvector, 24.06.11)
    test 244 isSpherical: True
    test 245 isEllipsoidal: False
    test 246 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 247 ellipsoid: name='SphereAuthalic', a=6371000, f=0, f_=0, b=6371000
    test 248 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 249 isSpherical: True
    test 250 isEllipsoidal: False
    test 251 intersection1: 50.907608°N, 004.508575°E
    test 252 intersection1: 50°54′27.39″N, 004°30′30.87″E
    test 253 intersection1: True
    test 254 intersection2: True
    test 255 intersection2: 43.5719°N, 116.188757°W
    test 256 intersection2: 43°34′18.84″N, 116°11′19.53″W
    test 257 intersection3: 51.882166°N, 000.267801°E
    test 258 intersection4: 00.0°N, 026.565051°E
    test 259 intersection5: 26.565051°N, 000.0°W
    test 260 intersection6: 50.907809°N, 004.50841°E
    test 261 intersection7: 01°52′46.41″S, 005°39′06.87″E
    test 262 intersection8: 28°15′40.35″S, 032°14′33.2″E
    test 263 toward 1,1 N,E nearest: 00.999848°N, 001.0°E
    test 264 toward 1,1 E,N nearest: 00.999848°N, 001.0°E
    test 265 toward 1,1 N,E antipodal: 00.999848°S, 179.0°W
    test 266 toward/away 1,1 N,W antipodal: 00.999848°N, 001.0°E
    test 267 toward/away 1,1 W,N antipodal: 00.999848°S, 179.0°W
    test 268 toward/away 1,1 S,E antipodal: 00.999848°S, 179.0°W
    test 269 toward/away 1,1 E,S antipodal: 00.999848°N, 001.0°E
    test 270 away 1,1 S,W antipodal: 00.999848°S, 179.0°W
    test 271 away 1,1 W,S antipodal: 00.999848°S, 179.0°W
    test 272 1E/90E N,E antipodal: 00.017454°N, 001.0°E
    test 273 1E/90E N,E nearest: 00.017454°N, 179.0°W
    test 274 brng+end 1a: 01.000305°N, 002.0°E
    test 275 brng+end 1b: 01.000305°N, 002.0°E
    test 276 brng+end 2a: 01.000305°S, 178.0°W
    test 277 brng+end 2b: 01.000305°S, 178.0°W
    test 278 intersection7: 02.499372°N, 002.5°E
    test 279 maxLat0: 90.0
    test 280 maxLat1: 89.0
    test 281 maxLat90: 0.0
    test 282 minLat0: -90.0
    test 283 minLat1: -89.0
    test 284 minLat90: -0.0
    test 285 parse: 00.0°N, 000.0°E

    test 286 intersecant2: 04.260346°N, 006.272173°E and 01.250608°S, 000.749094°E
    test 287 intersecant2: 700000
    test 288 intersecant2: 699999  FAILED, KNOWN, expected 700000
    test 289 intersecant2: 45.014  FAILED, KNOWN, expected 45.000

    test 290 intersecant2: 04.261539°N, 006.265474°E and 00.0°N, 002.0°E
    test 291 intersecant2: 699248  FAILED, KNOWN, expected 700000
    test 292 intersecant2: 598698  FAILED, KNOWN, expected 700000
    test 293 intersecant2: 45.000
# lazily imported pygeodesy.rhumb by ellipsoids.py line 1496

    test 294 intersecant2: 04.262363°N, 006.2663°E and 01.258709°S, 000.74119°E
    test 295 intersecant2: 699302  FAILED, KNOWN, expected 700000
    test 296 intersecant2: 700080  FAILED, KNOWN, expected 700000
    test 297 intersecant2: 45.021  FAILED, KNOWN, expected 45.000

    test 298 intersecant4: 02.375133°N, 024.894142°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 299 intersecant4: 00.0°S, 025.0°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 300 intersecant4: 02.375133°N, 024.894142°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 301 intersecant4: 00.0°S, 025.0°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E

    test 302 intersecant4: 00.725365°N, 026.558638°E and 25.747°S, 000.826763°W  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 303 intersecant4: 00.725365°N, 026.558638°E and 25.747°S, 000.826763°W  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 304 intersecant4: 00.021635°S, 025.811619°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 305 intersecant4: 00.021635°S, 025.811619°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E

    test 306 intersecant4: 00.807845°N, 026.641126°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 307 intersecant4: 01.624807°N, 026.572609°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 308 intersecant4: 00.807845°N, 026.641126°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 309 intersecant4: 01.624807°N, 026.572609°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E

    test 310 intersecant2.1: LatLon(04°04′02.63″S, 029°43′21.16″W) Napier: 3333000.000
    test 311 intersecant2.1: LatLon(29°58′27.6″N, 000°01′46.65″W) Napier: 3333000.000
    test 312 intersecant2.1: LatLon(29°58′27.6″N, 000°01′46.65″W) : 3332999.886  FAILED, KNOWN, expected 3333000.000
    test 313 intersecant2.1: LatLon(02°29′47.81″S, 028°30′01.84″W) : 3180236.460  FAILED, KNOWN, expected 3333000.000

    test 314 intersecant2.2: LatLon(04°04′02.63″S, 029°43′21.16″E) Napier: 3333000.000
    test 315 intersecant2.2: LatLon(29°58′27.6″N, 000°01′46.65″E) Napier: 3333000.000
    test 316 intersecant2.2: LatLon(02°29′47.81″S, 028°30′01.84″E) : 3180236.460  FAILED, KNOWN, expected 3333000.000
    test 317 intersecant2.2: LatLon(29°58′27.6″N, 000°01′46.65″E) : 3332999.886  FAILED, KNOWN, expected 3333000.000

    test 318 intersecant2.3: LatLon(04°04′02.63″N, 029°43′21.16″W) Napier: 3333000.000
    test 319 intersecant2.3: LatLon(29°58′27.6″S, 000°01′46.65″W) Napier: 3333000.000
    test 320 intersecant2.3: LatLon(29°58′27.6″S, 000°01′46.65″W) : 3332999.886  FAILED, KNOWN, expected 3333000.000
    test 321 intersecant2.3: LatLon(02°29′47.81″N, 028°30′01.84″W) : 3180236.460  FAILED, KNOWN, expected 3333000.000

    test 322 intersecant2.4: LatLon(29°50′37.22″S, 002°56′03.42″W) Napier: 3333000.000
    test 323 intersecant2.4: LatLon(00°29′30.34″N, 029°58′14.48″E) Napier: 3333000.000
    test 324 intersecant2.4: LatLon(00°08′01.47″N, 029°38′09.18″E) : 3295394.784  FAILED, KNOWN, expected 3333000.000
    test 325 intersecant2.4: LatLon(29°31′09.01″S, 002°27′32.93″W) : 3292733.874  FAILED, KNOWN, expected 3333000.000

    test 326 intersecant2.5: LatLon(00°01′46.69″S, 029°58′27.6″E) Napier: 3333000.000
    test 327 intersecant2.5: LatLon(29°58′27.59″S, 000°02′03.16″E) Napier: 3333000.000
    test 328 intersecant2.5: LatLon(01°38′23.65″S, 028°34′45.37″E) : 3182660.966  FAILED, KNOWN, expected 3333000.000
    test 329 intersecant2.5: LatLon(29°58′27.58″S, 000°02′03.17″E) : 3332999.848  FAILED, KNOWN, expected 3333000.000

    test 330 intersecant2.6: LatLon(05°08′54.91″S, 029°34′09.94″E) Napier: 3333000.000
    test 331 intersecant2.6: LatLon(28°36′28.71″S, 009°21′04.99″E) Napier: 3333000.000
    test 332 intersecant2.6: LatLon(11°51′13.84″S, 024°23′59.0″E) : 2998636.503  FAILED, KNOWN, expected 3333000.000
    test 333 intersecant2.6: LatLon(26°53′11.53″S, 011°08′26.36″E) : 3218384.739  FAILED, KNOWN, expected 3333000.000
    test 334 isenclosedBy: True
    test 335 isenclosedBy*: True
    test 336 isenclosedBy: True
    test 337 isenclosedBy*: True
    test 338 rhumbBearingTo: 116.722
    test 339 rhumbDestination: 50.964155°N, 001.853°E
    test 340 rhumbDestination: True
    test 341 rhumbDistanceTo: 40307.8
    test 342 rhumbMidpointo-0.5: 51.0455°N, 001.595727°E
    test 343 rhumbMidpointo: True
    test 344 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 345 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 346 rhumbMidpointo-0.75: 51.00475°N, 001.72442°E
    test 347 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 348 rhumbMidpointo-2.0: 50.801°N, 002.366196°E
    test 349 areaOf: 8.66605875e+09
    test 350 perimeterOf: 3.78258541e+05
    test 351 perimeterOf: 2.67063461e+05
    test 352 areaOf: 6.18e+09
    test 353 perimeterOf: 3.79639757e+05
    test 354 perimeterOf: 2.68444678e+05
    test 355 nearestOn3: 46.000996°N, 001.353049°E
    test 356 nearestOn3: 569987.49
    test 357 distanceTo: 569987.49
    test 358 nearestOn3: 46.0°N, 002.0°E
    test 359 nearestOn3: 134989.80
    test 360 distanceTo: 134989.80
    test 361 nearestOn3: 45.330691°N, 001.318551°E
    test 362 distance: 64856.28
    test 363 distanceTo: 64856.28
    test 364 compassAngleTo: 304.54
    test 365 difference: 1000.53
    test 366 ispolar: True
    test 367 ispolar*: True
    test 368 ispolar: False  FAILED, KNOWN, expected True
    test 369 ispolar*: False  FAILED, KNOWN, expected True
    test 370 ispolar: True
    test 371 ispolar*: True
    test 372 nearestOn: 01.5°N, 001.5°E, +149.99m
    test 373 nearestOn3: 01.5°N, 001.5°E, +149.99m
    test 374 midpointTo: 50.5363°N, 001.2746°E, +150.00m
    test 375 intermediateTo: 50.5363°N, 001.2746°E, +150.00m

    testLatLon(pygeodesy.sphericalTrigonometry, 24.06.21)
    test 376 isEllipsoidal: False
    test 377 isSpherical: True
    test 378 lat/lonDMS: 52.20472°N, 000.14056°E
    test 379 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 380 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 381 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 382 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 383 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 384 isequalTo: True
    test 385 isequalTo: True
    test 386 latlon2: 52.20472, 0.14056
    test 387 latlon2: 52.2047, 0.1406
    test 388 latlon2: 52.205, 0.141
    test 389 latlon2: 52.2, 0.14
    test 390 latlon2: 52.2, 0.1
    test 391 latlon2: 52.0, 0.0
    test 392 chordTo: 12036677.26
    test 393 chordTo: 12036463.78
    test 394 initialBearingTo: 156.1666
    test 395 initialBearingTo: 65.8921
    test 396 initialBearingTo: 0.0
    test 397 initialBearingTo: 180.0
    test 398 finalBearingTo: 157.8904
    test 399 finalBearingTo: 93.8581
    test 400 bearingTo2: 156.1666, 157.8904
    test 401 ispolar: True
    test 402 copy: True
    test 403 __eq__: True
    test 404 __ne__: False
    test 405 equirectangularTo: 404329.56
    test 406 distanceTo: 404279.720589
    test 407 distanceTo: 404279.720589
    test 408 distanceTo: 2145
    test 409 antipodal: False
    test 410 distanceTo dateline: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 411 distanceTo unrolled: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 412 antipodal: False
    test 413 distanceTo dateline: 9491735
    test 414 distanceTo unrolled: 9491735
    test 415 distanceTo: 18013602.92
    test 416 distanceTo: 20015114.35
    test 417 intermediateTo: 51.372084°N, 000.707337°E
    test 418 intermediateTo: True
    test 419 intermediateTo: 404279.721
    test 420 intermediateTo+5: 35.160975°N, 008.989542°E
    test 421 intermediateTo+5: 5.000
    test 422 intermediateTo-4: 64.911647°N, 013.726301°W
    test 423 intermediateTo-4: 4.000
    test 424 intermediateTo-h: 125.000
    test 425 midpointTo: 50.536327°N, 001.274614°E
    test 426 destination: 51.513546°N, 000.098345°W
    test 427 destination: 51°30′49″N, 000°05′54″W
    test 428 destination: 34°37′N, 116°33′W
    test 429 destination: 34.613647°N, 116.55116°W
    test 430 destination: 0.604122N, 2.034201W
    test 431 destination: 31.96383509°N, 064.37329146°E
    test 432 alongTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.alongTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 433 alongTrackDistanceTo: 62331.58
    test 434 alongTrackDistanceTo: 99.588
    test 435 alongTrackDistanceTo: -7702.7
    test 436 alongTrackDistanceTo: 7587.6
    test 437 crossTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.crossTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 438 crossTrackDistanceTo: -307.55
    test 439 crossTrackDistanceTo: 7.4524
    test 440 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 441 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 442 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 443 chordTo: 124799.103
    test 444 cosineAndoyerLambertTo: 124801.098
    test 445 cosineAndoyerLambertTo: 124801.098
    test 446 cosineForsyheAndoyerLambertTo: 124801.098
    test 447 cosineForsyheAndoyerLambertTo: 124801.098
    test 448 cosineLawTo: 124801.098
    test 449 cosineLawTo: 124801.098
    test 450 equirectangularTo: 124804.754
    test 451 equirectangularTo: 124804.754
    test 452 euclideanTo: 130015.089
    test 453 euclideanTo: 130015.089
    test 454 flatLocalTo: 124804.754
    test 455 flatLocalTo: 124804.754
    test 456 flatPolarTo: 133663.257
    test 457 flatPolarTo: 133663.257
    test 458 hartzell: 53.3206°N, 001.7297°W
    test 459 hartzell: 53.3206°N, 001.7297°W
    test 460 height4: 0.0
    test 461 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 462 height4: 53°19′14.2″N, 001°43′46.9″W
    test 463 height4: 53°19′14.2″N, 001°43′46.9″W
    test 464 haversineTo: 124801.098
    test 465 haversineTo: 124801.098
    test 466 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 467 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 468 thomasTo: 124801.098
    test 469 thomasTo: 124801.098
    test 470 vincentysTo: 124801.098
    test 471 vincentysTo: 124801.098
    test 472 isclockwise: False
    test 473 isclockwise*: False
    test 474 isclockwise: True
    test 475 isclockwise*: True
    test 476 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 477 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 478 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 479 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 480 isconvex: False
    test 481 isconvex*: False
    test 482 isconvex: True
    test 483 isconvex*: True
./test/testSpherical.py:318: DeprecationWarning: method L{pygeodesy.sphericalTrigonometry.LatLon.rhumbBearingTo} has been DEPRECATED, use method C{.rhumbAzimuthTo}.
  b = p.rhumbBearingTo(q)  # rhumbAzimuthTo
    test 484 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 485 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 486 isenclosedBy1: True
    test 487 isenclosedBy1*: True
    test 488 isenclosedBy2: False
    test 489 isenclosedBy2*: False
    test 490 isenclosedBy3: False
    test 491 isenclosedBy3*: False
    test 492 isenclosedBy4: False
    test 493 isenclosedBy4*: False
    test 494 isenclosedBy5: False
    test 495 isenclosedBy5*: False
    test 496 isenclosedBy6: True
    test 497 isenclosedBy6*: True
    test 498 isenclosedBy7: True
    test 499 isenclosedBy7*: True
    test 500 isenclosedBy-CCW: True
    test 501 isenclosedBy-CW : True
    test 502 isenclosedBy-CCW: True
    test 503 initialBearingTo: 102.432182
    test 504 compassAngleTo: 100.017
    test 505 compassAngleTo: 105.599
    test 506 initialBearingTo: 288.715918
    test 507 compassAngleTo: 280.017
    test 508 compassAngleTo: 285.599
    test 509 equirectangularTo: 592.185
    test 510 distanceTo: 591.831
    test 511 bearingTo: 0.0
    test 512 compassAngleTo: 0.0
    test 513 bearingTo: 45.0
    test 514 compassAngleTo: 45.0
    test 515 bearingTo: 90.0
    test 516 compassAngleTo: 90.0
    test 517 bearingTo: 180.0
    test 518 compassAngleTo: 180.0
    test 519 bearingTo: 225.0
    test 520 compassAngleTo: 225.0
    test 521 bearingTo: 315.0
    test 522 compassAngleTo: 315.0
    test 523 bearingTo: 270.0
    test 524 compassAngleTo: 270.0
    test 525 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 526 compassAngleTo: 359.4
    test 527 latlon2: (53.0, 1.0)
    test 528 philam2: (0.93, 0.02)
    test 529 bearingTo: 31
    test 530 compassAngleTo: 31
    test 531 compassAngleTo: 45

    test 532 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 533 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 534 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 535 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 536 isequalTo: <class 'bool'>
    test 537 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 538 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 539 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 540 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 541 compassAngleTo: <class 'float'>
    test 542 cosineLawTo: <class 'float'>
    test 543 euclideanTo: <class 'float'>
    test 544 flatLocalTo: <class 'float'>
    test 545 flatPolarTo: <class 'float'>
    test 546 haversineTo: <class 'float'>
    test 547 hubenyTo: <class 'float'>
    test 548 vincentysTo: <class 'float'>
    test 549 toNvector: (0.61566, 0.0, 0.78801)
    test 550 toVector: (3922384.659522, 0.0, 5020423.423198)
    test 551 toVector3d: (0.61566, 0.0, 0.78801)

    test 552 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 553 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 554 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 555 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 556 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 557 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 558 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 160.242
    test 559 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E
    test 560 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 561 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 562 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 563 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 564 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 565 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 566 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 1340.608
    test 567 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.69128229°N, 002.50129001°E
    test 568 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1499.220
    test 569 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.64295864°N, 002.44242391°E
    test 570 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 571 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)

    27 tests skipped (49): No module named 'numpy': required by vector2d._numpy

    test 572 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)

    22 tests skipped (71): No module named 'numpy': required by vector2d._numpy

    test 573 area cw/ccw: 1.0

    testSpherical(pygeodesy.sphericalTrigonometry, 24.06.21)
    test 574 isSpherical: True
    test 575 isEllipsoidal: False
    test 576 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 577 ellipsoid: name='SphereAuthalic', a=6371000, f=0, f_=0, b=6371000
    test 578 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 579 isSpherical: True
    test 580 isEllipsoidal: False
    test 581 intersection1: 50.907608°N, 004.508575°E
    test 582 intersection1: 50°54′27.39″N, 004°30′30.87″E
    test 583 intersection1: True
    test 584 intersection2: True
    test 585 intersection2: 43.5719°N, 116.188757°W
    test 586 intersection2: 43°34′18.84″N, 116°11′19.53″W
    test 587 intersection3: 51.882166°N, 000.267801°E
    test 588 intersection4: 00.0°N, 026.565051°E
    test 589 intersection5: 26.565051°N, 000.0°E  FAILED, KNOWN, expected 26.565051°N, 000.0°W
    test 590 intersection6: 50.907809°N, 004.50841°E
    test 591 intersection7: 01°52′46.41″S, 005°39′06.87″E
    test 592 intersection8: 28°15′40.35″S, 032°14′33.2″E
    test 593 toward 1,1 N,E nearest: 00.999848°N, 001.0°E
    test 594 toward 1,1 E,N nearest: 00.999848°N, 001.0°E
    test 595 toward 1,1 N,E antipodal: 00.999848°S, 179.0°W
    test 596 toward/away 1,1 N,W antipodal: 00.999848°N, 001.0°E
    test 597 toward/away 1,1 W,N antipodal: 00.999848°S, 179.0°W
    test 598 toward/away 1,1 S,E antipodal: 00.999848°S, 179.0°W
    test 599 toward/away 1,1 E,S antipodal: 00.999848°N, 001.0°E
    test 600 away 1,1 S,W antipodal: 00.999848°S, 179.0°W
    test 601 away 1,1 W,S antipodal: 00.999848°S, 179.0°W
    test 602 1E/90E N,E antipodal: 00.017454°N, 001.0°E
    test 603 1E/90E N,E nearest: 00.017454°N, 179.0°W
    test 604 brng+end 1a: 01.000305°N, 002.0°E
    test 605 brng+end 1b: 01.000305°N, 002.0°E
    test 606 brng+end 2a: 01.000305°S, 178.0°W
    test 607 brng+end 2b: 01.000305°S, 178.0°W
    test 608 intersection7: 02.499372°N, 002.5°E
    test 609 maxLat0: 90.0
    test 610 maxLat1: 89.0
    test 611 maxLat90: 0.0
    test 612 minLat0: -90.0
    test 613 minLat1: -89.0
    test 614 minLat90: -0.0
    test 615 parse: 00.0°N, 000.0°E
    test 616 crossingParallels: 009°35′38.65″E, 170°24′21.35″E

    test 617 intersecant2: 04.260346°N, 006.272173°E and 01.250608°S, 000.749094°E
    test 618 intersecant2: 700000
    test 619 intersecant2: 699999  FAILED, KNOWN, expected 700000
    test 620 intersecant2: 45.014  FAILED, KNOWN, expected 45.000

    test 621 intersecant2: 04.261539°N, 006.265474°E and 00.0°N, 002.0°E
    test 622 intersecant2: 699248  FAILED, KNOWN, expected 700000
    test 623 intersecant2: 598698  FAILED, KNOWN, expected 700000
    test 624 intersecant2: 45.000

    test 625 intersecant2: 04.262363°N, 006.2663°E and 01.258709°S, 000.74119°E
    test 626 intersecant2: 699302  FAILED, KNOWN, expected 700000
    test 627 intersecant2: 700080  FAILED, KNOWN, expected 700000
    test 628 intersecant2: 45.021  FAILED, KNOWN, expected 45.000

    test 629 intersecant4: 02.375133°N, 024.894142°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 630 intersecant4: 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 631 intersecant4: 02.375133°N, 024.894142°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 632 intersecant4: 00.0°N, 025.0°E and 25.0°S, 000.0°E

    test 633 intersecant4: 00.725365°N, 026.558638°E and 25.747°S, 000.826763°W  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 634 intersecant4: 00.725365°N, 026.558638°E and 25.747°S, 000.826763°W  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 635 intersecant4: 00.021635°S, 025.811619°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 636 intersecant4: 00.021635°S, 025.811619°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E

    test 637 intersecant4: 00.807845°N, 026.641126°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 638 intersecant4: 01.624807°N, 026.572609°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 639 intersecant4: 00.807845°N, 026.641126°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 640 intersecant4: 01.624807°N, 026.572609°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E

    test 641 intersecant2.1: LatLon(04°04′02.63″S, 029°43′21.16″W) Napier: 3333000.000
    test 642 intersecant2.1: LatLon(29°58′27.6″N, 000°01′46.65″W) Napier: 3333000.000
    test 643 intersecant2.1: LatLon(29°58′27.6″N, 000°01′46.65″W) : 3332999.886  FAILED, KNOWN, expected 3333000.000
    test 644 intersecant2.1: LatLon(02°29′47.81″S, 028°30′01.84″W) : 3180236.460  FAILED, KNOWN, expected 3333000.000

    test 645 intersecant2.2: LatLon(04°04′02.63″S, 029°43′21.16″E) Napier: 3333000.000
    test 646 intersecant2.2: LatLon(29°58′27.6″N, 000°01′46.65″E) Napier: 3333000.000
    test 647 intersecant2.2: LatLon(02°29′47.81″S, 028°30′01.84″E) : 3180236.460  FAILED, KNOWN, expected 3333000.000
    test 648 intersecant2.2: LatLon(29°58′27.6″N, 000°01′46.65″E) : 3332999.886  FAILED, KNOWN, expected 3333000.000

    test 649 intersecant2.3: LatLon(04°04′02.63″N, 029°43′21.16″W) Napier: 3333000.000
    test 650 intersecant2.3: LatLon(29°58′27.6″S, 000°01′46.65″W) Napier: 3333000.000
    test 651 intersecant2.3: LatLon(29°58′27.6″S, 000°01′46.65″W) : 3332999.886  FAILED, KNOWN, expected 3333000.000
    test 652 intersecant2.3: LatLon(02°29′47.81″N, 028°30′01.84″W) : 3180236.460  FAILED, KNOWN, expected 3333000.000

    test 653 intersecant2.4: LatLon(29°50′37.22″S, 002°56′03.42″W) Napier: 3333000.000
    test 654 intersecant2.4: LatLon(00°29′30.34″N, 029°58′14.48″E) Napier: 3333000.000
    test 655 intersecant2.4: LatLon(00°08′01.47″N, 029°38′09.18″E) : 3295394.784  FAILED, KNOWN, expected 3333000.000
    test 656 intersecant2.4: LatLon(29°31′09.01″S, 002°27′32.93″W) : 3292733.874  FAILED, KNOWN, expected 3333000.000

    test 657 intersecant2.5: LatLon(00°01′46.69″S, 029°58′27.6″E) Napier: 3333000.000
    test 658 intersecant2.5: LatLon(29°58′27.59″S, 000°02′03.16″E) Napier: 3333000.000
    test 659 intersecant2.5: LatLon(01°38′23.65″S, 028°34′45.37″E) : 3182660.966  FAILED, KNOWN, expected 3333000.000
    test 660 intersecant2.5: LatLon(29°58′27.58″S, 000°02′03.17″E) : 3332999.848  FAILED, KNOWN, expected 3333000.000

    test 661 intersecant2.6: LatLon(05°08′54.91″S, 029°34′09.94″E) Napier: 3333000.000
    test 662 intersecant2.6: LatLon(28°36′28.71″S, 009°21′04.99″E) Napier: 3333000.000
    test 663 intersecant2.6: LatLon(11°51′13.84″S, 024°23′59.0″E) : 2998636.503  FAILED, KNOWN, expected 3333000.000
    test 664 intersecant2.6: LatLon(26°53′11.53″S, 011°08′26.36″E) : 3218384.739  FAILED, KNOWN, expected 3333000.000

    test 665 intersections2 (pygeodesy.sphericalTrigonometry): 36.98931°N, 088.151425°W, 38.23838°N, 092.390487°W
    test 666 intersections2 (pygeodesy.sphericalTrigonometry): 36.989310429, -088.151425243, 38.238379679, -092.390486808
    test 667 intersections2 (pygeodesy.sphericalTrigonometry): 00.0°N, 035.26439°W, 00.0°N, 035.26439°E
    test 668 intersections2 (pygeodesy.sphericalTrigonometry): 22.622036°N, 000.0°E, 22.622036°S, 000.0°E
    test 669 intersections2 (pygeodesy.sphericalTrigonometry): 14.612841°N, 026.110934°W, 14.612841°S, 026.110934°E
    test 670 intersections2 (pygeodesy.sphericalTrigonometry): 00.000001°S, 045.0°E, 00.000001°N, 045.0°E
    test 671 intersections2 (pygeodesy.sphericalTrigonometry) 5: 04.999927°S, 005.038296°W, 04.999927°N, 005.038296°E
    test 672 intersections2 (pygeodesy.sphericalTrigonometry) 5: 6.28168e-16 (% of radius)
    test 673 intersections2 (pygeodesy.sphericalTrigonometry) 10: 09.997596°S, 010.311703°W, 09.997596°N, 010.311703°E
    test 674 intersections2 (pygeodesy.sphericalTrigonometry) 10: 2.93145e-15 (% of radius)
    test 675 intersections2 (pygeodesy.sphericalTrigonometry) 15: 14.98089°S, 016.083107°W, 14.98089°N, 016.083107°E
    test 676 intersections2 (pygeodesy.sphericalTrigonometry) 15: 4.18779e-16 (% of radius)
    test 677 intersections2 (pygeodesy.sphericalTrigonometry) 20: 19.914036°S, 022.676142°W, 19.914036°N, 022.676142°E
    test 678 intersections2 (pygeodesy.sphericalTrigonometry) 20: 1.25634e-15 (% of radius)
    test 679 intersections2 (pygeodesy.sphericalTrigonometry) 25: 24.713956°S, 030.518915°W, 24.713956°N, 030.518915°E
    test 680 intersections2 (pygeodesy.sphericalTrigonometry) 25: 6.70046e-16 (% of radius)
    test 681 intersections2 (pygeodesy.sphericalTrigonometry) 30: 29.205932°S, 040.202966°W, 29.205932°N, 040.202966°E
    test 682 intersections2 (pygeodesy.sphericalTrigonometry) 30: 6.97964e-16 (% of radius)
    test 683 intersections2 (pygeodesy.sphericalTrigonometry) 35: 33.037697°S, 052.55362°W, 33.037697°N, 052.55362°E
    test 684 intersections2 (pygeodesy.sphericalTrigonometry) 35: 8.37557e-16 (% of radius)
    test 685 intersections2 (pygeodesy.sphericalTrigonometry) 40: 35.512876°S, 068.682565°W, 35.512876°N, 068.682565°E
    test 686 intersections2 (pygeodesy.sphericalTrigonometry) 40: 4.18779e-16 (% of radius)
    test 687 intersections2 (pygeodesy.sphericalTrigonometry) 45: 35.26439°S, 090.0°W, 35.26439°N, 090.0°E
    test 688 intersections2 (pygeodesy.sphericalTrigonometry) 45: 1.86124e-16 (% of radius)
    test 689 intersections2 (pygeodesy.sphericalTrigonometry) 50: 29.382901°S, 118.837195°W, 29.382901°N, 118.837195°E
    test 690 intersections2 (pygeodesy.sphericalTrigonometry) 50: 1.67511e-16 (% of radius)
    test 691 intersections2 (pygeodesy.sphericalTrigonometry) 55: 00.687458°S, 179.605668°E abutting
    test 692 intersections2 (pygeodesy.sphericalTrigonometry) 55: 0.0144095 (% of radius)
    test 693 intersections2 (pygeodesy.sphericalTrigonometry) 60: 13.848979°S, 172.919423°E abutting
    test 694 intersections2 (pygeodesy.sphericalTrigonometry) 60: 0.258708 (% of radius)
    test 695 intersections2 (pygeodesy.sphericalTrigonometry) 65: 27.163786°S, 167.475402°E abutting
    test 696 intersections2 (pygeodesy.sphericalTrigonometry) 65: 0.457099 (% of radius)
    test 697 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E Random +/- 89
    test 698 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E, 46.499053°S, 136.858341°W  d 0 meter
    test 699 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E, 58.492875°S, 099.278565°E  d 5.2667e-09 meter
    test 700 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E, 18.419075°S, 027.044265°E  d 1.85884e-09 meter
    test 701 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E, 73.434867°S, 098.383624°E  d 1.01461e-08 meter
    test 702 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E, 34.84046°S, 038.797842°E  d 1.32209e-08 meter
    test 703 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E, 58.485482°S, 078.248759°E  d 1.32635e-08 meter
    test 704 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E, 00.759667°S, 111.531958°W  d 1.29421e-08 meter
    test 705 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E, 84.617306°S, 054.916956°E  d 1.27318e-08 meter
    test 706 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E, 79.788624°S, 051.205176°E  d 1.54903e-09 meter
    test 707 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E, 84.842183°S, 034.723541°E  d 3.5694e-07 meter
    test 708 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E, 21.328496°N, 071.630309°W  d 1.70393e-09 meter
    test 709 intersections2 (pygeodesy.sphericalTrigonometry): 83.713548°S, 047.603687°E, 31.055583°S, 068.413115°W  d 1.2734e-08 meter
    test 710 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 711 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 712 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 713 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 714 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 715 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 716 trilaterate5 (pygeodesy.sphericalTrigonometry) .inter: 42.6767291°N, 002.49916157°E
    test 717 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 718 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 719 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 720 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 721 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 722 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 723 trilaterate5 (pygeodesy.sphericalTrigonometry) .inter: area (False), eps (1000) or wrap (False): no intersection, min 1.34e+03
    test 724 isenclosedBy: True
    test 725 isenclosedBy*: True
    test 726 isenclosedBy: points[3] (LatLon(47°00′00.0″N, 003°00′00.0″E)) or wrap (False): not convex
    test 727 isenclosedBy*: points[3] (LatLon(47°00′00.0″N, 003°00′00.0″E)) or wrap (False): not convex
    test 728 rhumbBearingTo: 116.722
    test 729 rhumbDestination: 50.964155°N, 001.853°E
    test 730 rhumbDestination: True
    test 731 rhumbDistanceTo: 40307.8
    test 732 rhumbMidpointo-0.5: 51.0455°N, 001.595727°E
    test 733 rhumbMidpointo: True
    test 734 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 735 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 736 rhumbMidpointo-0.75: 51.00475°N, 001.72442°E
    test 737 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 738 rhumbMidpointo-2.0: 50.801°N, 002.366196°E
    test 739 areaOf: 8.66605875e+09
    test 740 perimeterOf: 3.78258541e+05
    test 741 perimeterOf: 2.67063461e+05
    test 742 areaOf: 6.18e+09
    test 743 perimeterOf: 3.79639757e+05
    test 744 perimeterOf: 2.68444678e+05
    test 745 nearestOn3: 46.0°N, 001.369324°E
    test 746 nearestOn3: 570101.83
    test 747 distanceTo: 570101.82
    test 748 nearestOn3: 46.0°N, 002.0°E
    test 749 nearestOn3: 134992.48
    test 750 distanceTo: 134989.80
    test 751 nearestOn3: 45.5°N, 001.5°E
    test 752 distance: 78626.79
    test 753 angle: 315.00
    test 754 compassAngleTo: 315.00
    test 755 nearestOn3: 45.331319°N, 001.331319°E
    test 756 distance: 64074.48
    test 757 angle: 305.10
    test 758 distanceTo: 64074.12
    test 759 compassAngleTo: 305.10
    test 760 difference: 1000.53
    test 761 nearestOn3: 00.5°N, 001.5°E
    test 762 distance: 235880.385
    test 763 angle: 135.00
    test 764 nearestOn3: 01.5°N, 002.5°E
    test 765 distance: 235880.385
    test 766 angle: 135.00
    test 767 nearestOn3: 02.5°N, 003.5°E
    test 768 distance: 235880.385
    test 769 angle: 135.00
    test 770 nearestOn3: 03.5°N, 004.5°E
    test 771 distance: 235880.385
    test 772 angle: 135.00
    test 773 nearestOn3: 04.5°N, 005.5°E
    test 774 distance: 235880.385
    test 775 angle: 135.00
    test 776 nearestOn3: 05.5°N, 006.5°E
    test 777 distance: 235880.385
    test 778 angle: 135.00
    test 779 nearestOn3: 06.5°N, 007.5°E
    test 780 distance: 235880.385
    test 781 angle: 135.00
    test 782 nearestOn3: 07.5°N, 008.5°E
    test 783 distance: 235880.385
    test 784 angle: 135.00
    test 785 meanOf: 04.004858°N, 004.990226°E
    test 786 nearestOn3: 07.5°N, 008.5°E
    test 787 toCartesian: [6245667.211, 766871.506, 996645.349]
    test 788 ispolar: True
    test 789 ispolar*: True
    test 790 ispolar: False  FAILED, KNOWN, expected True
    test 791 ispolar*: False  FAILED, KNOWN, expected True
    test 792 ispolar: True
    test 793 ispolar*: True
    test 794 triangle7: (22.142114, 2189776.256122, 84.91384, 6998970.168483, 84.91384, 6998970.168483, 8479698853790.72168)
    test 795 triangle7: Triangle8Tuple(A=0.38645, a=0.34371, B=1.48203, b=1.09857, C=1.48203, c=1.09857, D=3.74234, E=0.20891)
    test 796 nearestOn: 01.5°N, 001.5°E, +149.99m
    test 797 nearestOn3: 01.5°N, 001.5°E, +149.99m
    test 798 midpointTo: 50.5363°N, 001.2746°E, +150.00m
    test 799 intermediateTo: 50.5363°N, 001.2746°E, +150.00m

    92 of 799 testSpherical.py tests (11.5%) FAILED, incl. 90 KNOWN plus 2 DeprecationWarnings, 71 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 93.017 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testStreprs.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.INF from .constants by testStreprs.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testStreprs.py line 11
# lazily imported pygeodesy.NAN from .constants by testStreprs.py line 11
# lazily imported pygeodesy.fstr from .streprs by testStreprs.py line 11
# lazily imported pygeodesy.fstrzs from .streprs by testStreprs.py line 11
# lazily imported pygeodesy.instr from .streprs by testStreprs.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testStreprs.py line 11
# lazily imported pygeodesy.unstr from .streprs by testStreprs.py line 11

    testing testStreprs.py 23.03.27 (module pygeodesy.streprs 24.06.15) isLazy=3
    test 1 anstr: a-b__
    test 2 fstr: 0.123000
    test 3 fstr: 0.123
    test 4 fstr: 0.123, 456.789
    test 5 fstr: 1.23000e-01
    test 6 fstr: 1.23e-01
    test 7 fstr: fmt ('X'): not '[%[<flags>][<width>].*]F|f|E|e|G|g'
    test 8 fstr(1.000000): 1.0
    test 9 fstr(1.000000): 1.0
    test 10 fstr(-1.000000): -1.0
    test 11 fstr(INF): INF
    test 12 fstr(INF): INF
    test 13 fstr(NAN): NAN
    test 14 fstr(-0.000000): -0.0
    test 15 fstr(0.000000): 0.0
    test 16 fstrzs(0.0): 0.0
    test 17 fstrzs(0.00): 0.0
    test 18 fstrzs(0.000): 0.0
    test 19 fstrzs(00.0): 00.0
    test 20 fstrzs(000.00): 000.0
    test 21 fstrzs(0.000): 0.0
    test 22 fstrzs(0.010): 0.01
    test 23 fstrzs(0.0200): 0.02
    test 24 fstrzs(0.0e+01): 0.0e+01
    test 25 fstrzs(0.00e+02): 0.0e+02
    test 26 fstrzs(0.000e+03): 0.0e+03
    test 27 fstrzs(00.0e+00): 00.0e+00
    test 28 fstrzs(000.00e+01): 000.0e+01
    test 29 fstrzs(0.000e+02): 0.0e+02
    test 30 fstrzs(0.010e+03): 0.01e+03
    test 31 fstrzs(0.0200e+00): 0.02e+00
    test 32 fstrzs(0, ap1z=True): 0.0
    test 33 fstrzs(0.0, ap1z=True): 0.0
    test 34 fstrzs(0., ap1z=True): 0.
    test 35 fstrzs(1e10, ap1z=True): 1.0e10
    test 36 fstrzs(2E+2, ap1z=True): 2.0E+2
    test 37 fstrzs(3.E3, ap1z=True): 3.E3
    test 38 instr: LatLon_(45.0°N, 090.0°E, +1.20)
    test 39 instr: LatLon_(45, 90, h=1.2)
    test 40 unstr: f(1.1, 2.2)
    test 41 unstr: f(x=1.1, y=2.2)
    test 42 F: 0.001
    test 43 F: 0.001
    test 44 F: 0.001
    test 45 F: 0.001
    test 46 f: 0.001
    test 47 f: 0.001
    test 48 f: 0.001
    test 49 f: 0.001
    test 50 E: 1.0E-03
    test 51 E: 1.0E-03
    test 52 E: 1.0E-03
    test 53 E: 1.0E-03
    test 54 e: 1.0e-03
    test 55 e: 1.0e-03
    test 56 e: 1.0e-03
    test 57 e: 1.0e-03
    test 58 G: 0.001
    test 59 G: 0.001
    test 60 G: 0.001
    test 61 G: 0.001
    test 62 g: 0.001
    test 63 g: 0.001
    test 64 g: 0.001
    test 65 g: 0.001

    all 65 testStreprs.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 364.065 us

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14

    testing testTMcoords.py 24.03.22 isLazy=3
    test 1 TMcoords: 258

    all 1 testTMcoords.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 72.002 us

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testTrf.py
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:136: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.date2epoch from .trf by testTrf.py line 15
# lazily imported pygeodesy.Epoch from .units by testTrf.py line 15
# lazily imported pygeodesy.epoch2date from .trf by testTrf.py line 15
# lazily imported pygeodesy.F_D from .dms by testTrf.py line 15
# lazily imported pygeodesy.F_DMS from .dms by testTrf.py line 15
# lazily imported pygeodesy.fstr from .streprs by testTrf.py line 15
# lazily imported pygeodesy.RefFrames from .trf by testTrf.py line 15
# lazily imported pygeodesy.TRFError from .errors by testTrf.py line 15
# lazily imported pygeodesy.trfTransform0 from .trf by testTrf.py line 15
# lazily imported pygeodesy.trfTransforms from .trf by testTrf.py line 15
# lazily imported pygeodesy.trfXform from .trf by testTrf.py line 15
# lazily imported pygeodesy.Vector3d from .vector3d by testTrf.py line 15
# lazily imported pygeodesy.ellipsoidalExact by testTrf.py line 386
# lazily imported pygeodesy.ellipsoidalKarney by testTrf.py line 386
# lazily imported pygeodesy.ellipsoidalNvector by testTrf.py line 386
# lazily imported pygeodesy.ellipsoidalVincenty by testTrf.py line 386

    testing testTrf.py 24.03.12 (module pygeodesy.trf 24.06.09) isLazy=3

    testTrf(pygeodesy.ellipsoidalNvector, 24.06.15)
# lazily imported pygeodesy.ecef by ellipsoidalNvector.py line 521
    test 1 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 2 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 3 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 4 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 5 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 6 Nil: True
    test 7 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 8 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 9 Nil: True
    test 10 reframe: True
    test 11 Roundtrip: True
    test 12 reframe: True
    test 13 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 14 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)

    test 15 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 16 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 17 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 18 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 19 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 20 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 21 Cartesian: [-734972.563, 4893188.492, 4011982.811]

    test 22 EUREF EX1: [4027894.0444, 307045.6209, 4919474.8613]
    test 23 transform0: ITRF2005@2015xETRF2020-ITRF91@2015xETRF2020@2007 max 1.1642e-10, epoched 8.0
    test 24 transform1: ITRF2005@2015xETRF2014-ITRF91@2015xETRF2014@2007 max 0.048666, epoched 8.0
    test 25 transform2: ITRF2005@2015xETRF2000-ITRF91@2015xETRF2000@2007 max 0.097331, epoched 8.0
    test 26 transform3: ITRF2005@2000xITRF2000+ITRF2000@1988xITRF91@2000@2007 max 0.146, epoched 19.0
    test 27 transform4: -ITRF2020@2015xITRF2005+ITRF2020@2015xITRF91@2007 max 0.19466, epoched 8.0
    test 28 transform5: -ITRF2014@2010xITRF2005+ITRF2014@2010xITRF91@2007 max 0.24333, epoched 3.0
    test 29 transform6: -ITRF2008@2005xITRF2005+ITRF2008@2000xITRF91@2005@2007 max 0.29199, epoched 7.0
    test 30 transform7: ITRF2000@1988xITRF91+ITRF2005@2000xITRF2000@1988@2007 max 0.34066, epoched 31.0
    test 31 transform8: ITRF2014@2010xITRF91-ITRF2014@2020xGDA2020@2010+ITRF2005@2020xGDA2020@2010@2007 max 0.98111, epoched 23.0
    test 32 transform9: ITRF2008@2000xITRF91-ITRF2008@1994xGDA94@2000+ITRF2005@1994xGDA94@2000@2007 max 0.35972, epoched 19.0
    test 33 transform10: ITRF2008@2000xITRF91-ITRF2008@1997xNAD83@2000+ITRF2005@1997xNAD83@2000@2007 max 0.40805, epoched 13.0
    test 34 EUREF EX2: [4027894.0060, 307045.6000, 4919474.9100]
    test 35 transform0: ITRF91@2015xETRF2020-ITRF2005@2015xETRF2020@2007 max 0.048666, epoched 8.0
    test 36 transform1: ITRF91@2015xETRF2014-ITRF2005@2015xETRF2014@2007 max 2.3283e-10, epoched 8.0
    test 37 transform2: ITRF91@2015xETRF2000-ITRF2005@2015xETRF2000@2007 max 0.048666, epoched 8.0
    test 38 transform3: -ITRF2005@2000xITRF2000-ITRF2000@1988xITRF91@2000@2007 max 0.097331, epoched 19.0
    test 39 EUREF EX4: [4027894.3559, 307045.2508, 4919474.6447]
    test 40 transform0: -ITRF2000@2015xETRF2000@2012 max 4.5169e-08, epoched 3.0
    test 41 transform1: -ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2000@2012 max 0.35826, epoched 21.0
    test 42 transform2: -ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2000@2012 max 0.7048, epoched 21.0
    test 43 transform3: -ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2000@2012 max 1.054, epoched 30.0
    test 44 transform4: -ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2000@2012 max 1.4023, epoched 30.0
    test 45 transform5: -ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2000@2012 max 1.7514, epoched 30.0
    test 46 transform6: -ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2000@2012 max 2.1088, epoched 30.0
    test 47 transform7: -ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2000@2012 max 2.4877, epoched 30.0
    test 48 transform8: -ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2000@2012 max 2.8343, epoched 30.0
    test 49 EUREF EX5: [4027893.6458, 307045.9470, 4919475.1937]  FAILED, KNOWN, expected [4027894.3662, 307045.2530, 4919474.6263]
    test 50 transform0: ITRF2014@2015xETRF2000@2012 max 4.5635e-08, epoched 3.0
    test 51 transform1: ITRF2014@2010xITRF2008@2015+ITRF2008@2015xETRF2000@2012 max 0.36023, epoched 8.0
    test 52 transform2: ITRF2014@2010xITRF97@2015+ITRF97@2015xETRF2000@2012 max 0.72047, epoched 8.0
    test 53 transform3: ITRF2014@2010xITRF93@2015+ITRF93@2015xETRF2000@2012 max 1.0807, epoched 8.0
    test 54 transform4: ITRF2014@2010xITRF92@2015+ITRF92@2015xETRF2000@2012 max 1.4409, epoched 8.0
    test 55 transform5: ITRF2014@2010xITRF91@2015+ITRF91@2015xETRF2000@2012 max 1.8012, epoched 8.0
    test 56 transform6: ITRF2014@2010xITRF90@2015+ITRF90@2015xETRF2000@2012 max 2.1614, epoched 8.0
    test 57 transform7: ITRF2014@2010xITRF89@2015+ITRF89@2015xETRF2000@2012 max 2.5216, epoched 8.0
    test 58 transform8: ITRF2014@2010xITRF88@2015+ITRF88@2015xETRF2000@2012 max 2.8819, epoched 8.0

    test 59 Case 1A: [4027893.9619, 307045.5481, 4919474.9553]
    test 60 Case 1B: [4027894.0054, 307045.5938, 4919474.9083]
    test 61 Case 2A: [4027893.9639, 307045.545, 4919474.9573]
    test 62 Case 2B: [4027894.0033, 307045.5889, 4919474.9041]

    test 63 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 64 TRFError: epoch (1899): below 1900.0 limit
    test 65 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 66 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 67 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 68 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    test 69 ETRF89@1989: [4160476.944000, 653192.600000, 4774604.455000]
    test 70 ITRF2014@2018.8: [4160476.415, 653193.057, 4774604.903]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 71 TransformXform: -ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8
    test 72 Delta (m): [-0.06956, 0.035714, 0.122931]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 73 Error (m): 0.145692  FAILED, KNOWN, expected 0.01
    test 74 Epoch range: 29.800  FAILED, KNOWN, expected 14.0
    test 75 ETRF89@1989: [4160476.467836, 653193.103190, 4774604.868503]  FAILED, KNOWN, expected [4160476.944000, 653192.600000, 4774604.455000]
    test 76 TransformXform: ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989

    test 77 ETRF2000@2000: [4160476.952000, 653192.582000, 4774604.441000]
    test 78 ITRF2014@2018.8: [4160476.471, 653193.059, 4774604.804]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 79 TransformXform: -ITRF2014@2015xETRF2000@2018.8
    test 80 Delta (m): [-0.014174, 0.037835, 0.023963]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 81 Error (m): 0.046975  FAILED, KNOWN, expected 0.01
    test 82 Epoch range: 18.800  FAILED, KNOWN, expected 14.0
    test 83 ETRF2000@2000: [4160476.681125, 653192.914350, 4774604.647835]  FAILED, KNOWN, expected [4160476.952000, 653192.582000, 4774604.441000]
    test 84 TransformXform: ITRF2014@2015xETRF2000@2000

    test 85 ITRF2008@2005: [4160476.674000, 653192.806000, 4774604.648000]
    test 86 ITRF2014@2018.8: [4160476.671, 653192.804, 4774604.645]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 87 TransformXform: -ITRF2014@2010xITRF2008@2018.8
    test 88 Delta (m): [0.186385, -0.217059, -0.134685]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 89 Error (m): 0.316218  FAILED, KNOWN, expected 0.01
    test 90 Epoch range: 13.800  FAILED, KNOWN, expected 14.0
    test 91 ITRF2008@2005: [4160476.672278, 653192.805730, 4774604.647403]  FAILED, KNOWN, expected [4160476.674000, 653192.806000, 4774604.648000]
    test 92 TransformXform: ITRF2014@2010xITRF2008@2005

    test 93 toRefFrame1: ITRF2020@2015 2024.31 [0.0031474, 0.00210534, -0.00125667]
    test 94 toRefFrame2: ITRF2014@2010 2024.32 [0.0031474, 0.00210634, -0.00125867]
    test 95 transform0: -ITRF2020@2015xITRF2014@2010
    test 96 transform0X: TRFXform(epoch=2010.0, name='-ITRF2020@2015xITRF2014@2010')
    test 97 toRefFrame3: ITRF2020@2015 2010 [0.0031474, 0.00067434, 0.00160533]
    test 98 transform2x: (4160476.488147, 653193.021674, 4774604.781605)
    test 99 transform2v: (0.000, 0.000, 0.000)  FAILED, KNOWN, expected (0.004, 0.003, 0.004)

    test 100 transform0: name='ITRF2020@2015xETRF2020@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.75573508e-09, ry=5.28398431e-08, rz=-7.66635874e-08, s=0.0, sx=0.001806, sy=0.010899, sz=-0.015813
    test 101 transform2c: (4027893.9585, 307045.5550, 4919474.9620)  FAILED, KNOWN, expected (4027893.9585, 307045.5550, 4919474.9619)
    test 102     Error2c: (-0.000016463, 0.0000336, 0.000055143) max 5.514e-05, epoched 5.0
    test 103 transform2v: (-0.00011, 0.00010, 0.00023)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 104     Error2v: (-0.000220786, -0.000005544, -0.000006899) max 0.0002208
    test 105 transform0v: (0.00009, 0.00052, -0.00075)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 106     Error0v: (-0.000024, 0.000409, -0.000993) max 0.000993

    test 107 transform0: name='-ITRF2014@2015xETRF2020@2010', tx=-0.0014, ty=-0.0004, tz=0.0004, s1=1.0, rx=-8.75573508e-09, ry=-5.28398431e-08, rz=7.66635874e-08, s=-0.00042, sx=-0.001806, sy=-0.010899, sz=0.015813
    test 108 transform2c: (4027893.6719, 307045.9063, 4919475.1704)  FAILED, KNOWN, expected (4027893.6719, 307045.9064, 4919475.1704)
    test 109     Error2c: (0.000024786, -0.000062539, -0.000021305) max 6.254e-05, epoched 5.0
    test 110 transform2v: (-0.01339, 0.01677, 0.01045)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 111     Error2v: (0.000220784, 0.000005543, 0.000006898) max 0.0002208
    test 112 transform0v: (-0.00009, -0.00052, 0.00075)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 113     Error0v: (0.013524, -0.017279, -0.009687) max 0.01728

    test 114 transform0: name='ITRF2014@2015xETRF2014@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.65392421e-09, ry=5.40615736e-08, rz=-7.83943722e-08, s=0.0, sx=0.001785, sy=0.011151, sz=-0.01617
    test 115 transform2c: (4027893.9619, 307045.5481, 4919474.9553)  FAILED, KNOWN, expected (4027893.9620, 307045.5480, 4919474.9553)
    test 116     Error2c: (-0.00007476, 0.000063039, 0.000002882) max 7.476e-05, epoched 5.0
    test 117 transform2v: (0.00020, -0.00030, 0.00020)
    test 118     Error2v: (0.000000724, -0.000003666, -0.000002721) max 3.666e-06
    test 119 transform0v: (0.00009, 0.00053, -0.00077)  FAILED, KNOWN, expected (0.00020, -0.00030, 0.00020)
    test 120     Error0v: (-0.000115, 0.000831, -0.00097) max 0.00097

    test 121 transform0: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 122 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 123     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 124 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 125     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373
    test 126 transform0v: (-0.00008, -0.00053, 0.00077)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 127     Error0v: (0.012985, -0.017431, -0.00831) max 0.01743

    test 128 transform0: name='ITRF2000@2015xETRF2000@2010', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=8.24668072e-09, ry=4.98873278e-08, rz=-8.06342114e-08, s=0.0, sx=0.001701, sy=0.01029, sz=-0.016632
    test 129 transform2c: (4027894.0054, 307045.5938, 4919474.9083)  FAILED, KNOWN, expected (4027894.0053, 307045.5939, 4919474.9083)
    test 130     Error2c: (0.000077874, -0.000055372, -0.000008743) max 7.787e-05, epoched 5.0
    test 131 transform2v: (-0.00020, -0.00050, -0.00037)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 132     Error2v: (-0.000004389, 0.000002124, -0.000008036) max 8.036e-06
    test 133 transform0v: (0.00008, 0.00049, -0.00079)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 134     Error0v: (0.000281, 0.00099, -0.000432) max 0.00099

    test 135 transform0/: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 136 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 137     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 138 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 139     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 140 transform1/: name='-ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=8.09154034e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01669
    test 141 transform2c: (4027893.6865, 307045.9168, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 142     Error2c: (0.005269863, 0.008612365, -0.033003577) max 0.033, epoched 23.0
    test 143 transform2v: (-0.01357, 0.01710, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 144     Error2v: (-0.00050027, 0.000204776, -0.00179728) max 0.001797

    test 145 transform2/: name='-ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 146 transform2c: (4027893.6872, 307045.9067, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 147     Error2c: (0.006043935, -0.001542081, -0.033003577) max 0.033, epoched 23.0
    test 148 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:136: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
    test 149     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 150 transform3/: name='-ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 151 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 152     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 153 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 154     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 155 transform4/: name='-ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2014@2010', tx=0.01393, ty=0.00147, tz=-0.06633, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 156 transform2c: (4027893.6944, 307045.9085, 4919475.1145)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 157     Error2c: (0.013243935, 0.000257919, -0.040203577) max 0.0402, epoched 32.0
    test 158 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 159     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 160 transform5/: name='-ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 161 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 162     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 163 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 164     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 165 transform6/: name='-ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2014@2010', tx=0.02293, ty=0.01047, tz=-0.08613, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 166 transform2c: (4027893.7034, 307045.9175, 4919475.0947)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 167     Error2c: (0.022243935, 0.009257919, -0.060003577) max 0.06, epoched 32.0
    test 168 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 169     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 170 transform7/: name='-ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2014@2010', tx=0.02743, ty=0.03207, tz=-0.12033, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 171 transform2c: (4027893.7079, 307045.9391, 4919475.0605)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 172     Error2c: (0.026743934, 0.030857919, -0.094203577) max 0.0942, epoched 32.0
    test 173 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 174     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 175 transform8/: name='-ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2014@2010', tx=0.02293, ty=-0.00033, tz=-0.14193, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 176 transform2c: (4027893.7034, 307045.9067, 4919475.0389)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 177     Error2c: (0.022243935, -0.001542081, -0.115803577) max 0.1158, epoched 32.0
    test 178 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 179     Error2v: (-0.000440725, -0.000576335, -0.00179728) max 0.001797

    test 180 transform0: name='ITRF2020@2015xETRF2020@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.29251327e-08, ry=7.80016732e-08, rz=-1.13170058e-07, s=0.0, sx=0.002666, sy=0.016089, sz=-0.023343
    test 181 transform2c: (4027893.9574, 307045.5561, 4919474.9643)
    test 182     Error2c: (-0.000024276, -0.000021815, -0.000013824) max 2.428e-05, epoched 5.0
    test 183 transform2v: (0.01350, -0.01676, -0.01001)

    test 184 transform0: name='-ITRF2014@2015xETRF2020@2020', tx=-0.0014, ty=-0.0014, tz=0.0024, s1=1.0, rx=-1.29251327e-08, ry=-7.80016732e-08, rz=1.13170058e-07, s=-0.00042, sx=-0.002666, sy=-0.016089, sz=0.023343
    test 185 transform2c: (4027893.5358, 307046.0740, 4919475.2748)
    test 186     Error2c: (0.000032643, -0.000007101, 0.000047684) max 4.768e-05, epoched 5.0
    test 187 transform2v: (-0.01350, 0.01666, 0.01021)

    test 188 transform0: name='ITRF2014@2015xETRF2014@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.27748405e-08, ry=7.980518e-08, rz=-1.15725026e-07, s=0.0, sx=0.002635, sy=0.016461, sz=-0.02387
    test 189 transform2c: (4027893.9639, 307045.5450, 4919474.9573)
    test 190     Error2c: (0.000032525, 0.000026405, -0.000024305) max 3.253e-05, epoched 5.0
    test 191 transform2v: (0.01381, -0.01706, -0.01024)

    test 192 transform0: name='-ITRF2000@2015xETRF2014@2020', tx=0.0017, ty=0.0022, tz=-0.0451, s1=1.0, rx=-1.27748405e-08, ry=-7.980518e-08, rz=1.15725026e-07, s=0.00322, sx=-0.002635, sy=-0.016461, sz=0.02387
    test 193 transform2c: (4027893.5504, 307046.0772, 4919475.2456)  FAILED, KNOWN, expected (4027893.5505, 307046.0772, 4919475.2456)
    test 194     Error2c: (-0.000062619, -0.000037673, -0.000034946) max 6.262e-05, epoched 5.0
    test 195 transform2v: (-0.01371, 0.01716, 0.00834)

    test 196 transform0: name='ITRF2000@2015xETRF2000@2020', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=1.21736715e-08, ry=7.36431982e-08, rz=-1.19031455e-07, s=0.0, sx=0.002511, sy=0.01519, sz=-0.024552
    test 197 transform2c: (4027894.0033, 307045.5889, 4919474.9047)
    test 198     Error2c: (0.000034031, -0.000034106, 0.000010915) max 3.411e-05, epoched 5.0
    test 199 transform2v: (0.01287, -0.01740, -0.00945)

    test 200 transform0*: name='-ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8', tx=-0.03128, ty=-0.0311, tz=0.15984, s1=0.999999991, rx=-1.58921925e-08, ry=-8.23504519e-08, rz=1.00463091e-07, s=-0.009246, sx=-0.003278, sy=-0.016986, sz=0.020722
    test 201 transform2c: (4160476.4154, 653193.0567, 4774604.9029)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 202     Error2c: (-0.069560351, 0.035713888, 0.122930501) max 0.1229, epoched 29.8
    test 203 transform2v: (-0.01148, 0.01996, 0.01845)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 204     Error2v: (-0.015479395, 0.016963959, 0.014448874) max 0.01696

    test 205 transform0*: name='-ITRF2014@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 206 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 207     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 3.8
    test 208 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 209     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 210 transform1*: name='-ITRF2014@2010xITRF2008@2015-ITRF2008@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 211 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 212     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 213 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 214     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 215 transform2*: name='-ITRF2014@2010xITRF97@2015-ITRF97@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 216 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 217     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 218 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 219     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 220 transform3*: name='-ITRF2014@2010xITRF93@2015-ITRF93@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 221 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 222     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 223 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 224     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 225 transform4*: name='-ITRF2014@2010xITRF92@2015-ITRF92@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 226 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 227     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 228 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 229     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 230 transform5*: name='-ITRF2014@2010xITRF91@2015-ITRF91@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 231 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 232     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 233 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 234     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 235 transform6*: name='-ITRF2014@2010xITRF90@2015-ITRF90@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 236 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 237     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 238 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 239     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 240 transform7*: name='-ITRF2014@2010xITRF89@2015-ITRF89@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 241 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 242     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 243 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 244     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 245 transform8*: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 246 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 247     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 248 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 249     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 250 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602
    test 251 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602

    test 252 Issue80: 48.77691577°N, 008.92257142°E, +476.05m
    test 253 Issue80: 48.77692147°N, 008.92257868°E, +476.09m
    test 254 Issue80: 48°46′36.915134″N, 008°55′21.285094″E, +476.10m  FAILED, KNOWN, expected 48°46′36.915134″N, 008°55′21.285094″E, +476.10
    test 255 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 256 Issue80: [4160476.944064, 653192.600457, 4774604.455385]
    test 257 Issue80: [4160476.415504, 653193.057171, 4774604.903316]
    test 258 Issue80: [4160476.467901, 653193.103647, 4774604.868888]
    test 259 Issue80: 48°46′36.915133″N, 008°55′21.285094″E, +476.10m

    test 260 Issue80: 48.77692032°N, 008.92257804°E, +476.05m
    test 261 Issue80: 48.77691971°N, 008.92257856°E, +476.06m
    test 262 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m  FAILED, KNOWN, expected 48°46′36.9131″N, 008°55′21.28095″E, +476.05m
    test 263 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 264 Issue80: [4160476.492633, 653193.021888, 4774604.78885]
    test 265 Issue80: [4160476.54503, 653193.068365, 4774604.754422]
    test 266 Issue80: [4160476.016469, 653193.525079, 4774605.202353]
    test 267 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m

    test 268 ITRF96@1997xNAD83: TRFXform(epoch=1997.0, name='ITRF96@1997xNAD83')
    test 269 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2503e-07, ry=4.6785e-08, rz=5.6529e-08, s=0.0, sx=0.02579, sy=0.00965, sz=0.01166
    test 270 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83@2007', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2761e-07, ry=1.0797e-08, rz=5.4997e-08, s=0.0, sx=0.026322, sy=0.002227, sz=0.011344
    test 271 ITRF96@1997xNAD83: rx=-2.5792e-10, ry=3.5988e-09, rz=1.532e-10

    testTrf(pygeodesy.ellipsoidalVincenty, 24.06.11)
    test 272 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 273 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 274 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 275 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 276 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 277 Nil: True
    test 278 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 279 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 280 Nil: True
    test 281 reframe: True
    test 282 Roundtrip: True
    test 283 reframe: True
    test 284 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 285 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)

    test 286 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 287 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 288 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 289 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 290 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 291 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 292 Cartesian: [-734972.563, 4893188.492, 4011982.811]

    test 293 EUREF EX1: [4027894.0444, 307045.6209, 4919474.8613]
    test 294 transform0: ITRF2005@2015xETRF2020-ITRF91@2015xETRF2020@2007 max 1.1642e-10, epoched 8.0
    test 295 transform1: ITRF2005@2015xETRF2014-ITRF91@2015xETRF2014@2007 max 0.048666, epoched 8.0
    test 296 transform2: ITRF2005@2015xETRF2000-ITRF91@2015xETRF2000@2007 max 0.097331, epoched 8.0
    test 297 transform3: ITRF2005@2000xITRF2000+ITRF2000@1988xITRF91@2000@2007 max 0.146, epoched 19.0
    test 298 transform4: -ITRF2020@2015xITRF2005+ITRF2020@2015xITRF91@2007 max 0.19466, epoched 8.0
    test 299 transform5: -ITRF2014@2010xITRF2005+ITRF2014@2010xITRF91@2007 max 0.24333, epoched 3.0
    test 300 transform6: -ITRF2008@2005xITRF2005+ITRF2008@2000xITRF91@2005@2007 max 0.29199, epoched 7.0
    test 301 transform7: ITRF2000@1988xITRF91+ITRF2005@2000xITRF2000@1988@2007 max 0.34066, epoched 31.0
    test 302 transform8: ITRF2014@2010xITRF91-ITRF2014@2020xGDA2020@2010+ITRF2005@2020xGDA2020@2010@2007 max 0.98111, epoched 23.0
    test 303 transform9: ITRF2008@2000xITRF91-ITRF2008@1994xGDA94@2000+ITRF2005@1994xGDA94@2000@2007 max 0.35972, epoched 19.0
    test 304 transform10: ITRF2008@2000xITRF91-ITRF2008@1997xNAD83@2000+ITRF2005@1997xNAD83@2000@2007 max 0.40805, epoched 13.0
    test 305 EUREF EX2: [4027894.0060, 307045.6000, 4919474.9100]
    test 306 transform0: ITRF91@2015xETRF2020-ITRF2005@2015xETRF2020@2007 max 0.048666, epoched 8.0
    test 307 transform1: ITRF91@2015xETRF2014-ITRF2005@2015xETRF2014@2007 max 2.3283e-10, epoched 8.0
    test 308 transform2: ITRF91@2015xETRF2000-ITRF2005@2015xETRF2000@2007 max 0.048666, epoched 8.0
    test 309 transform3: -ITRF2005@2000xITRF2000-ITRF2000@1988xITRF91@2000@2007 max 0.097331, epoched 19.0
    test 310 EUREF EX4: [4027894.3559, 307045.2508, 4919474.6447]
    test 311 transform0: -ITRF2000@2015xETRF2000@2012 max 4.5169e-08, epoched 3.0
    test 312 transform1: -ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2000@2012 max 0.35826, epoched 21.0
    test 313 transform2: -ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2000@2012 max 0.7048, epoched 21.0
    test 314 transform3: -ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2000@2012 max 1.054, epoched 30.0
    test 315 transform4: -ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2000@2012 max 1.4023, epoched 30.0
    test 316 transform5: -ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2000@2012 max 1.7514, epoched 30.0
    test 317 transform6: -ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2000@2012 max 2.1088, epoched 30.0
    test 318 transform7: -ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2000@2012 max 2.4877, epoched 30.0
    test 319 transform8: -ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2000@2012 max 2.8343, epoched 30.0
    test 320 EUREF EX5: [4027893.6458, 307045.9470, 4919475.1937]  FAILED, KNOWN, expected [4027894.3662, 307045.2530, 4919474.6263]
    test 321 transform0: ITRF2014@2015xETRF2000@2012 max 4.5635e-08, epoched 3.0
    test 322 transform1: ITRF2014@2010xITRF2008@2015+ITRF2008@2015xETRF2000@2012 max 0.36023, epoched 8.0
    test 323 transform2: ITRF2014@2010xITRF97@2015+ITRF97@2015xETRF2000@2012 max 0.72047, epoched 8.0
    test 324 transform3: ITRF2014@2010xITRF93@2015+ITRF93@2015xETRF2000@2012 max 1.0807, epoched 8.0
    test 325 transform4: ITRF2014@2010xITRF92@2015+ITRF92@2015xETRF2000@2012 max 1.4409, epoched 8.0
    test 326 transform5: ITRF2014@2010xITRF91@2015+ITRF91@2015xETRF2000@2012 max 1.8012, epoched 8.0
    test 327 transform6: ITRF2014@2010xITRF90@2015+ITRF90@2015xETRF2000@2012 max 2.1614, epoched 8.0
    test 328 transform7: ITRF2014@2010xITRF89@2015+ITRF89@2015xETRF2000@2012 max 2.5216, epoched 8.0
    test 329 transform8: ITRF2014@2010xITRF88@2015+ITRF88@2015xETRF2000@2012 max 2.8819, epoched 8.0

    test 330 Case 1A: [4027893.9619, 307045.5481, 4919474.9553]
    test 331 Case 1B: [4027894.0054, 307045.5938, 4919474.9083]
    test 332 Case 2A: [4027893.9639, 307045.545, 4919474.9573]
    test 333 Case 2B: [4027894.0033, 307045.5889, 4919474.9041]

    test 334 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 335 TRFError: epoch (1899): below 1900.0 limit
    test 336 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 337 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 338 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 339 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    test 340 ETRF89@1989: [4160476.944000, 653192.600000, 4774604.455000]
    test 341 ITRF2014@2018.8: [4160476.415, 653193.057, 4774604.903]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 342 TransformXform: -ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8
    test 343 Delta (m): [-0.06956, 0.035714, 0.122931]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 344 Error (m): 0.145692  FAILED, KNOWN, expected 0.01
    test 345 Epoch range: 29.800  FAILED, KNOWN, expected 14.0
    test 346 ETRF89@1989: [4160476.467836, 653193.103190, 4774604.868503]  FAILED, KNOWN, expected [4160476.944000, 653192.600000, 4774604.455000]
    test 347 TransformXform: ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989

    test 348 ETRF2000@2000: [4160476.952000, 653192.582000, 4774604.441000]
    test 349 ITRF2014@2018.8: [4160476.471, 653193.059, 4774604.804]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 350 TransformXform: -ITRF2014@2015xETRF2000@2018.8
    test 351 Delta (m): [-0.014174, 0.037835, 0.023963]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 352 Error (m): 0.046975  FAILED, KNOWN, expected 0.01
    test 353 Epoch range: 18.800  FAILED, KNOWN, expected 14.0
    test 354 ETRF2000@2000: [4160476.681125, 653192.914350, 4774604.647835]  FAILED, KNOWN, expected [4160476.952000, 653192.582000, 4774604.441000]
    test 355 TransformXform: ITRF2014@2015xETRF2000@2000

    test 356 ITRF2008@2005: [4160476.674000, 653192.806000, 4774604.648000]
    test 357 ITRF2014@2018.8: [4160476.671, 653192.804, 4774604.645]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 358 TransformXform: -ITRF2014@2010xITRF2008@2018.8
    test 359 Delta (m): [0.186385, -0.217059, -0.134685]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 360 Error (m): 0.316218  FAILED, KNOWN, expected 0.01
    test 361 Epoch range: 13.800  FAILED, KNOWN, expected 14.0
    test 362 ITRF2008@2005: [4160476.672278, 653192.805730, 4774604.647403]  FAILED, KNOWN, expected [4160476.674000, 653192.806000, 4774604.648000]
    test 363 TransformXform: ITRF2014@2010xITRF2008@2005

    test 364 toRefFrame1: ITRF2020@2015 2024.31 [0.0031474, 0.00210534, -0.00125667]
    test 365 toRefFrame2: ITRF2014@2010 2024.32 [0.0031474, 0.00210634, -0.00125867]
    test 366 transform0: -ITRF2020@2015xITRF2014@2010
    test 367 transform0X: TRFXform(epoch=2010.0, name='-ITRF2020@2015xITRF2014@2010')
    test 368 toRefFrame3: ITRF2020@2015 2010 [0.0031474, 0.00067434, 0.00160533]
    test 369 transform2x: (4160476.488147, 653193.021674, 4774604.781605)
    test 370 transform2v: (0.000, 0.000, 0.000)  FAILED, KNOWN, expected (0.004, 0.003, 0.004)

    test 371 transform0: name='ITRF2020@2015xETRF2020@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.75573508e-09, ry=5.28398431e-08, rz=-7.66635874e-08, s=0.0, sx=0.001806, sy=0.010899, sz=-0.015813
    test 372 transform2c: (4027893.9585, 307045.5550, 4919474.9620)  FAILED, KNOWN, expected (4027893.9585, 307045.5550, 4919474.9619)
    test 373     Error2c: (-0.000016463, 0.0000336, 0.000055143) max 5.514e-05, epoched 5.0
    test 374 transform2v: (-0.00011, 0.00010, 0.00023)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 375     Error2v: (-0.000220786, -0.000005544, -0.000006899) max 0.0002208
    test 376 transform0v: (0.00009, 0.00052, -0.00075)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 377     Error0v: (-0.000024, 0.000409, -0.000993) max 0.000993

    test 378 transform0: name='-ITRF2014@2015xETRF2020@2010', tx=-0.0014, ty=-0.0004, tz=0.0004, s1=1.0, rx=-8.75573508e-09, ry=-5.28398431e-08, rz=7.66635874e-08, s=-0.00042, sx=-0.001806, sy=-0.010899, sz=0.015813
    test 379 transform2c: (4027893.6719, 307045.9063, 4919475.1704)  FAILED, KNOWN, expected (4027893.6719, 307045.9064, 4919475.1704)
    test 380     Error2c: (0.000024786, -0.000062539, -0.000021305) max 6.254e-05, epoched 5.0
    test 381 transform2v: (-0.01339, 0.01677, 0.01045)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 382     Error2v: (0.000220784, 0.000005543, 0.000006898) max 0.0002208
    test 383 transform0v: (-0.00009, -0.00052, 0.00075)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 384     Error0v: (0.013524, -0.017279, -0.009687) max 0.01728

    test 385 transform0: name='ITRF2014@2015xETRF2014@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.65392421e-09, ry=5.40615736e-08, rz=-7.83943722e-08, s=0.0, sx=0.001785, sy=0.011151, sz=-0.01617
    test 386 transform2c: (4027893.9619, 307045.5481, 4919474.9553)  FAILED, KNOWN, expected (4027893.9620, 307045.5480, 4919474.9553)
    test 387     Error2c: (-0.00007476, 0.000063039, 0.000002882) max 7.476e-05, epoched 5.0
    test 388 transform2v: (0.00020, -0.00030, 0.00020)
    test 389     Error2v: (0.000000724, -0.000003666, -0.000002721) max 3.666e-06
    test 390 transform0v: (0.00009, 0.00053, -0.00077)  FAILED, KNOWN, expected (0.00020, -0.00030, 0.00020)
    test 391     Error0v: (-0.000115, 0.000831, -0.00097) max 0.00097

    test 392 transform0: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 393 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 394     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 395 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 396     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373
    test 397 transform0v: (-0.00008, -0.00053, 0.00077)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 398     Error0v: (0.012985, -0.017431, -0.00831) max 0.01743

    test 399 transform0: name='ITRF2000@2015xETRF2000@2010', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=8.24668072e-09, ry=4.98873278e-08, rz=-8.06342114e-08, s=0.0, sx=0.001701, sy=0.01029, sz=-0.016632
    test 400 transform2c: (4027894.0054, 307045.5938, 4919474.9083)  FAILED, KNOWN, expected (4027894.0053, 307045.5939, 4919474.9083)
    test 401     Error2c: (0.000077874, -0.000055372, -0.000008743) max 7.787e-05, epoched 5.0
    test 402 transform2v: (-0.00020, -0.00050, -0.00037)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 403     Error2v: (-0.000004389, 0.000002124, -0.000008036) max 8.036e-06
    test 404 transform0v: (0.00008, 0.00049, -0.00079)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 405     Error0v: (0.000281, 0.00099, -0.000432) max 0.00099

    test 406 transform0/: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 407 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 408     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 409 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 410     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 411 transform1/: name='-ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=8.09154034e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01669
    test 412 transform2c: (4027893.6865, 307045.9168, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 413     Error2c: (0.005269863, 0.008612365, -0.033003577) max 0.033, epoched 23.0
    test 414 transform2v: (-0.01357, 0.01710, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 415     Error2v: (-0.00050027, 0.000204776, -0.00179728) max 0.001797

    test 416 transform2/: name='-ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 417 transform2c: (4027893.6872, 307045.9067, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 418     Error2c: (0.006043935, -0.001542081, -0.033003577) max 0.033, epoched 23.0
    test 419 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 420     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 421 transform3/: name='-ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 422 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 423     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 424 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 425     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 426 transform4/: name='-ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2014@2010', tx=0.01393, ty=0.00147, tz=-0.06633, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 427 transform2c: (4027893.6944, 307045.9085, 4919475.1145)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 428     Error2c: (0.013243935, 0.000257919, -0.040203577) max 0.0402, epoched 32.0
    test 429 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 430     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 431 transform5/: name='-ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 432 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 433     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 434 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 435     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 436 transform6/: name='-ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2014@2010', tx=0.02293, ty=0.01047, tz=-0.08613, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 437 transform2c: (4027893.7034, 307045.9175, 4919475.0947)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 438     Error2c: (0.022243935, 0.009257919, -0.060003577) max 0.06, epoched 32.0
    test 439 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 440     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 441 transform7/: name='-ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2014@2010', tx=0.02743, ty=0.03207, tz=-0.12033, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 442 transform2c: (4027893.7079, 307045.9391, 4919475.0605)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 443     Error2c: (0.026743934, 0.030857919, -0.094203577) max 0.0942, epoched 32.0
    test 444 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 445     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:136: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')

    test 446 transform8/: name='-ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2014@2010', tx=0.02293, ty=-0.00033, tz=-0.14193, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 447 transform2c: (4027893.7034, 307045.9067, 4919475.0389)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 448     Error2c: (0.022243935, -0.001542081, -0.115803577) max 0.1158, epoched 32.0
    test 449 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 450     Error2v: (-0.000440725, -0.000576335, -0.00179728) max 0.001797

    test 451 transform0: name='ITRF2020@2015xETRF2020@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.29251327e-08, ry=7.80016732e-08, rz=-1.13170058e-07, s=0.0, sx=0.002666, sy=0.016089, sz=-0.023343
    test 452 transform2c: (4027893.9574, 307045.5561, 4919474.9643)
    test 453     Error2c: (-0.000024276, -0.000021815, -0.000013824) max 2.428e-05, epoched 5.0
    test 454 transform2v: (0.01350, -0.01676, -0.01001)

    test 455 transform0: name='-ITRF2014@2015xETRF2020@2020', tx=-0.0014, ty=-0.0014, tz=0.0024, s1=1.0, rx=-1.29251327e-08, ry=-7.80016732e-08, rz=1.13170058e-07, s=-0.00042, sx=-0.002666, sy=-0.016089, sz=0.023343
    test 456 transform2c: (4027893.5358, 307046.0740, 4919475.2748)
    test 457     Error2c: (0.000032643, -0.000007101, 0.000047684) max 4.768e-05, epoched 5.0
    test 458 transform2v: (-0.01350, 0.01666, 0.01021)

    test 459 transform0: name='ITRF2014@2015xETRF2014@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.27748405e-08, ry=7.980518e-08, rz=-1.15725026e-07, s=0.0, sx=0.002635, sy=0.016461, sz=-0.02387
    test 460 transform2c: (4027893.9639, 307045.5450, 4919474.9573)
    test 461     Error2c: (0.000032525, 0.000026405, -0.000024305) max 3.253e-05, epoched 5.0
    test 462 transform2v: (0.01381, -0.01706, -0.01024)

    test 463 transform0: name='-ITRF2000@2015xETRF2014@2020', tx=0.0017, ty=0.0022, tz=-0.0451, s1=1.0, rx=-1.27748405e-08, ry=-7.980518e-08, rz=1.15725026e-07, s=0.00322, sx=-0.002635, sy=-0.016461, sz=0.02387
    test 464 transform2c: (4027893.5504, 307046.0772, 4919475.2456)  FAILED, KNOWN, expected (4027893.5505, 307046.0772, 4919475.2456)
    test 465     Error2c: (-0.000062619, -0.000037673, -0.000034946) max 6.262e-05, epoched 5.0
    test 466 transform2v: (-0.01371, 0.01716, 0.00834)

    test 467 transform0: name='ITRF2000@2015xETRF2000@2020', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=1.21736715e-08, ry=7.36431982e-08, rz=-1.19031455e-07, s=0.0, sx=0.002511, sy=0.01519, sz=-0.024552
    test 468 transform2c: (4027894.0033, 307045.5889, 4919474.9047)
    test 469     Error2c: (0.000034031, -0.000034106, 0.000010915) max 3.411e-05, epoched 5.0
    test 470 transform2v: (0.01287, -0.01740, -0.00945)

    test 471 transform0*: name='-ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8', tx=-0.03128, ty=-0.0311, tz=0.15984, s1=0.999999991, rx=-1.58921925e-08, ry=-8.23504519e-08, rz=1.00463091e-07, s=-0.009246, sx=-0.003278, sy=-0.016986, sz=0.020722
    test 472 transform2c: (4160476.4154, 653193.0567, 4774604.9029)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 473     Error2c: (-0.069560351, 0.035713888, 0.122930501) max 0.1229, epoched 29.8
    test 474 transform2v: (-0.01148, 0.01996, 0.01845)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 475     Error2v: (-0.015479395, 0.016963959, 0.014448874) max 0.01696

    test 476 transform0*: name='-ITRF2014@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 477 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 478     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 3.8
    test 479 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 480     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 481 transform1*: name='-ITRF2014@2010xITRF2008@2015-ITRF2008@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 482 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 483     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 484 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 485     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 486 transform2*: name='-ITRF2014@2010xITRF97@2015-ITRF97@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 487 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 488     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 489 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 490     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 491 transform3*: name='-ITRF2014@2010xITRF93@2015-ITRF93@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 492 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 493     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 494 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 495     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 496 transform4*: name='-ITRF2014@2010xITRF92@2015-ITRF92@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 497 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 498     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 499 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 500     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 501 transform5*: name='-ITRF2014@2010xITRF91@2015-ITRF91@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 502 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 503     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 504 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 505     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 506 transform6*: name='-ITRF2014@2010xITRF90@2015-ITRF90@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 507 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 508     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 509 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 510     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 511 transform7*: name='-ITRF2014@2010xITRF89@2015-ITRF89@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 512 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 513     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 514 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 515     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 516 transform8*: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 517 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 518     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 519 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 520     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 521 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602
    test 522 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602

    test 523 Issue80: 48.77691577°N, 008.92257142°E, +476.05m
    test 524 Issue80: 48.77692147°N, 008.92257868°E, +476.09m
    test 525 Issue80: 48°46′36.915134″N, 008°55′21.285094″E, +476.10m  FAILED, KNOWN, expected 48°46′36.915134″N, 008°55′21.285094″E, +476.10
    test 526 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 527 Issue80: [4160476.944064, 653192.600457, 4774604.455385]
    test 528 Issue80: [4160476.415504, 653193.057171, 4774604.903316]
    test 529 Issue80: [4160476.467901, 653193.103647, 4774604.868888]
    test 530 Issue80: 48°46′36.915133″N, 008°55′21.285094″E, +476.10m

    test 531 Issue80: 48.77692032°N, 008.92257804°E, +476.05m
    test 532 Issue80: 48.77691971°N, 008.92257856°E, +476.06m
    test 533 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m  FAILED, KNOWN, expected 48°46′36.9131″N, 008°55′21.28095″E, +476.05m
    test 534 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 535 Issue80: [4160476.492633, 653193.021888, 4774604.78885]
    test 536 Issue80: [4160476.54503, 653193.068365, 4774604.754422]
    test 537 Issue80: [4160476.016469, 653193.525079, 4774605.202353]
    test 538 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m

    test 539 ITRF96@1997xNAD83: TRFXform(epoch=1997.0, name='ITRF96@1997xNAD83')
    test 540 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2503e-07, ry=4.6785e-08, rz=5.6529e-08, s=0.0, sx=0.02579, sy=0.00965, sz=0.01166
    test 541 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83@2007', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2761e-07, ry=1.0797e-08, rz=5.4997e-08, s=0.0, sx=0.026322, sy=0.002227, sz=0.011344
    test 542 ITRF96@1997xNAD83: rx=-2.5792e-10, ry=3.5988e-09, rz=1.532e-10

    testTrf(pygeodesy.ellipsoidalKarney, 24.06.11)
    test 543 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 544 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 545 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 546 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 547 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 548 Nil: True
    test 549 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 550 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 551 Nil: True
    test 552 reframe: True
    test 553 Roundtrip: True
    test 554 reframe: True
    test 555 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 556 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)

    test 557 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 558 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 559 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 560 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 561 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 562 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 563 Cartesian: [-734972.563, 4893188.492, 4011982.811]

    test 564 EUREF EX1: [4027894.0444, 307045.6209, 4919474.8613]
    test 565 transform0: ITRF2005@2015xETRF2020-ITRF91@2015xETRF2020@2007 max 1.1642e-10, epoched 8.0
    test 566 transform1: ITRF2005@2015xETRF2014-ITRF91@2015xETRF2014@2007 max 0.048666, epoched 8.0
    test 567 transform2: ITRF2005@2015xETRF2000-ITRF91@2015xETRF2000@2007 max 0.097331, epoched 8.0
    test 568 transform3: ITRF2005@2000xITRF2000+ITRF2000@1988xITRF91@2000@2007 max 0.146, epoched 19.0
    test 569 transform4: -ITRF2020@2015xITRF2005+ITRF2020@2015xITRF91@2007 max 0.19466, epoched 8.0
    test 570 transform5: -ITRF2014@2010xITRF2005+ITRF2014@2010xITRF91@2007 max 0.24333, epoched 3.0
    test 571 transform6: -ITRF2008@2005xITRF2005+ITRF2008@2000xITRF91@2005@2007 max 0.29199, epoched 7.0
    test 572 transform7: ITRF2000@1988xITRF91+ITRF2005@2000xITRF2000@1988@2007 max 0.34066, epoched 31.0
    test 573 transform8: ITRF2014@2010xITRF91-ITRF2014@2020xGDA2020@2010+ITRF2005@2020xGDA2020@2010@2007 max 0.98111, epoched 23.0
    test 574 transform9: ITRF2008@2000xITRF91-ITRF2008@1994xGDA94@2000+ITRF2005@1994xGDA94@2000@2007 max 0.35972, epoched 19.0
    test 575 transform10: ITRF2008@2000xITRF91-ITRF2008@1997xNAD83@2000+ITRF2005@1997xNAD83@2000@2007 max 0.40805, epoched 13.0
    test 576 EUREF EX2: [4027894.0060, 307045.6000, 4919474.9100]
    test 577 transform0: ITRF91@2015xETRF2020-ITRF2005@2015xETRF2020@2007 max 0.048666, epoched 8.0
    test 578 transform1: ITRF91@2015xETRF2014-ITRF2005@2015xETRF2014@2007 max 2.3283e-10, epoched 8.0
    test 579 transform2: ITRF91@2015xETRF2000-ITRF2005@2015xETRF2000@2007 max 0.048666, epoched 8.0
    test 580 transform3: -ITRF2005@2000xITRF2000-ITRF2000@1988xITRF91@2000@2007 max 0.097331, epoched 19.0
    test 581 EUREF EX4: [4027894.3559, 307045.2508, 4919474.6447]
    test 582 transform0: -ITRF2000@2015xETRF2000@2012 max 4.5169e-08, epoched 3.0
    test 583 transform1: -ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2000@2012 max 0.35826, epoched 21.0
    test 584 transform2: -ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2000@2012 max 0.7048, epoched 21.0
    test 585 transform3: -ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2000@2012 max 1.054, epoched 30.0
    test 586 transform4: -ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2000@2012 max 1.4023, epoched 30.0
    test 587 transform5: -ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2000@2012 max 1.7514, epoched 30.0
    test 588 transform6: -ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2000@2012 max 2.1088, epoched 30.0
    test 589 transform7: -ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2000@2012 max 2.4877, epoched 30.0
    test 590 transform8: -ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2000@2012 max 2.8343, epoched 30.0
    test 591 EUREF EX5: [4027893.6458, 307045.9470, 4919475.1937]  FAILED, KNOWN, expected [4027894.3662, 307045.2530, 4919474.6263]
    test 592 transform0: ITRF2014@2015xETRF2000@2012 max 4.5635e-08, epoched 3.0
    test 593 transform1: ITRF2014@2010xITRF2008@2015+ITRF2008@2015xETRF2000@2012 max 0.36023, epoched 8.0
    test 594 transform2: ITRF2014@2010xITRF97@2015+ITRF97@2015xETRF2000@2012 max 0.72047, epoched 8.0
    test 595 transform3: ITRF2014@2010xITRF93@2015+ITRF93@2015xETRF2000@2012 max 1.0807, epoched 8.0
    test 596 transform4: ITRF2014@2010xITRF92@2015+ITRF92@2015xETRF2000@2012 max 1.4409, epoched 8.0
    test 597 transform5: ITRF2014@2010xITRF91@2015+ITRF91@2015xETRF2000@2012 max 1.8012, epoched 8.0
    test 598 transform6: ITRF2014@2010xITRF90@2015+ITRF90@2015xETRF2000@2012 max 2.1614, epoched 8.0
    test 599 transform7: ITRF2014@2010xITRF89@2015+ITRF89@2015xETRF2000@2012 max 2.5216, epoched 8.0
    test 600 transform8: ITRF2014@2010xITRF88@2015+ITRF88@2015xETRF2000@2012 max 2.8819, epoched 8.0

    test 601 Case 1A: [4027893.9619, 307045.5481, 4919474.9553]
    test 602 Case 1B: [4027894.0054, 307045.5938, 4919474.9083]
    test 603 Case 2A: [4027893.9639, 307045.545, 4919474.9573]
    test 604 Case 2B: [4027894.0033, 307045.5889, 4919474.9041]

    test 605 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 606 TRFError: epoch (1899): below 1900.0 limit
    test 607 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 608 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 609 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 610 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    test 611 ETRF89@1989: [4160476.944000, 653192.600000, 4774604.455000]
    test 612 ITRF2014@2018.8: [4160476.415, 653193.057, 4774604.903]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 613 TransformXform: -ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8
    test 614 Delta (m): [-0.06956, 0.035714, 0.122931]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 615 Error (m): 0.145692  FAILED, KNOWN, expected 0.01
    test 616 Epoch range: 29.800  FAILED, KNOWN, expected 14.0
    test 617 ETRF89@1989: [4160476.467836, 653193.103190, 4774604.868503]  FAILED, KNOWN, expected [4160476.944000, 653192.600000, 4774604.455000]
    test 618 TransformXform: ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989

    test 619 ETRF2000@2000: [4160476.952000, 653192.582000, 4774604.441000]
    test 620 ITRF2014@2018.8: [4160476.471, 653193.059, 4774604.804]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 621 TransformXform: -ITRF2014@2015xETRF2000@2018.8
    test 622 Delta (m): [-0.014174, 0.037835, 0.023963]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 623 Error (m): 0.046975  FAILED, KNOWN, expected 0.01
    test 624 Epoch range: 18.800  FAILED, KNOWN, expected 14.0
    test 625 ETRF2000@2000: [4160476.681125, 653192.914350, 4774604.647835]  FAILED, KNOWN, expected [4160476.952000, 653192.582000, 4774604.441000]
    test 626 TransformXform: ITRF2014@2015xETRF2000@2000

    test 627 ITRF2008@2005: [4160476.674000, 653192.806000, 4774604.648000]
    test 628 ITRF2014@2018.8: [4160476.671, 653192.804, 4774604.645]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 629 TransformXform: -ITRF2014@2010xITRF2008@2018.8
    test 630 Delta (m): [0.186385, -0.217059, -0.134685]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 631 Error (m): 0.316218  FAILED, KNOWN, expected 0.01
    test 632 Epoch range: 13.800  FAILED, KNOWN, expected 14.0
    test 633 ITRF2008@2005: [4160476.672278, 653192.805730, 4774604.647403]  FAILED, KNOWN, expected [4160476.674000, 653192.806000, 4774604.648000]
    test 634 TransformXform: ITRF2014@2010xITRF2008@2005

    test 635 toRefFrame1: ITRF2020@2015 2024.31 [0.0031474, 0.00210534, -0.00125667]
    test 636 toRefFrame2: ITRF2014@2010 2024.32 [0.0031474, 0.00210634, -0.00125867]
    test 637 transform0: -ITRF2020@2015xITRF2014@2010
    test 638 transform0X: TRFXform(epoch=2010.0, name='-ITRF2020@2015xITRF2014@2010')
    test 639 toRefFrame3: ITRF2020@2015 2010 [0.0031474, 0.00067434, 0.00160533]
    test 640 transform2x: (4160476.488147, 653193.021674, 4774604.781605)
    test 641 transform2v: (0.000, 0.000, 0.000)  FAILED, KNOWN, expected (0.004, 0.003, 0.004)

    test 642 transform0: name='ITRF2020@2015xETRF2020@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.75573508e-09, ry=5.28398431e-08, rz=-7.66635874e-08, s=0.0, sx=0.001806, sy=0.010899, sz=-0.015813
    test 643 transform2c: (4027893.9585, 307045.5550, 4919474.9620)  FAILED, KNOWN, expected (4027893.9585, 307045.5550, 4919474.9619)
    test 644     Error2c: (-0.000016463, 0.0000336, 0.000055143) max 5.514e-05, epoched 5.0
    test 645 transform2v: (-0.00011, 0.00010, 0.00023)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 646     Error2v: (-0.000220786, -0.000005544, -0.000006899) max 0.0002208
    test 647 transform0v: (0.00009, 0.00052, -0.00075)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 648     Error0v: (-0.000024, 0.000409, -0.000993) max 0.000993

    test 649 transform0: name='-ITRF2014@2015xETRF2020@2010', tx=-0.0014, ty=-0.0004, tz=0.0004, s1=1.0, rx=-8.75573508e-09, ry=-5.28398431e-08, rz=7.66635874e-08, s=-0.00042, sx=-0.001806, sy=-0.010899, sz=0.015813
    test 650 transform2c: (4027893.6719, 307045.9063, 4919475.1704)  FAILED, KNOWN, expected (4027893.6719, 307045.9064, 4919475.1704)
    test 651     Error2c: (0.000024786, -0.000062539, -0.000021305) max 6.254e-05, epoched 5.0
    test 652 transform2v: (-0.01339, 0.01677, 0.01045)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 653     Error2v: (0.000220784, 0.000005543, 0.000006898) max 0.0002208
    test 654 transform0v: (-0.00009, -0.00052, 0.00075)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 655     Error0v: (0.013524, -0.017279, -0.009687) max 0.01728

    test 656 transform0: name='ITRF2014@2015xETRF2014@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.65392421e-09, ry=5.40615736e-08, rz=-7.83943722e-08, s=0.0, sx=0.001785, sy=0.011151, sz=-0.01617
    test 657 transform2c: (4027893.9619, 307045.5481, 4919474.9553)  FAILED, KNOWN, expected (4027893.9620, 307045.5480, 4919474.9553)
    test 658     Error2c: (-0.00007476, 0.000063039, 0.000002882) max 7.476e-05, epoched 5.0
    test 659 transform2v: (0.00020, -0.00030, 0.00020)
    test 660     Error2v: (0.000000724, -0.000003666, -0.000002721) max 3.666e-06
    test 661 transform0v: (0.00009, 0.00053, -0.00077)  FAILED, KNOWN, expected (0.00020, -0.00030, 0.00020)
    test 662     Error0v: (-0.000115, 0.000831, -0.00097) max 0.00097

    test 663 transform0: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 664 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 665     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 666 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 667     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373
    test 668 transform0v: (-0.00008, -0.00053, 0.00077)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 669     Error0v: (0.012985, -0.017431, -0.00831) max 0.01743

    test 670 transform0: name='ITRF2000@2015xETRF2000@2010', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=8.24668072e-09, ry=4.98873278e-08, rz=-8.06342114e-08, s=0.0, sx=0.001701, sy=0.01029, sz=-0.016632
    test 671 transform2c: (4027894.0054, 307045.5938, 4919474.9083)  FAILED, KNOWN, expected (4027894.0053, 307045.5939, 4919474.9083)
    test 672     Error2c: (0.000077874, -0.000055372, -0.000008743) max 7.787e-05, epoched 5.0
    test 673 transform2v: (-0.00020, -0.00050, -0.00037)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 674     Error2v: (-0.000004389, 0.000002124, -0.000008036) max 8.036e-06
    test 675 transform0v: (0.00008, 0.00049, -0.00079)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 676     Error0v: (0.000281, 0.00099, -0.000432) max 0.00099

    test 677 transform0/: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 678 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 679     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 680 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 681     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 682 transform1/: name='-ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=8.09154034e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01669
    test 683 transform2c: (4027893.6865, 307045.9168, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 684     Error2c: (0.005269863, 0.008612365, -0.033003577) max 0.033, epoched 23.0
    test 685 transform2v: (-0.01357, 0.01710, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 686     Error2v: (-0.00050027, 0.000204776, -0.00179728) max 0.001797

    test 687 transform2/: name='-ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 688 transform2c: (4027893.6872, 307045.9067, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 689     Error2c: (0.006043935, -0.001542081, -0.033003577) max 0.033, epoched 23.0
    test 690 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 691     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 692 transform3/: name='-ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 693 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 694     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 695 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 696     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 697 transform4/: name='-ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2014@2010', tx=0.01393, ty=0.00147, tz=-0.06633, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 698 transform2c: (4027893.6944, 307045.9085, 4919475.1145)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 699     Error2c: (0.013243935, 0.000257919, -0.040203577) max 0.0402, epoched 32.0
    test 700 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 701     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 702 transform5/: name='-ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 703 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 704     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 705 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 706     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 707 transform6/: name='-ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2014@2010', tx=0.02293, ty=0.01047, tz=-0.08613, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 708 transform2c: (4027893.7034, 307045.9175, 4919475.0947)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 709     Error2c: (0.022243935, 0.009257919, -0.060003577) max 0.06, epoched 32.0
    test 710 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 711     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 712 transform7/: name='-ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2014@2010', tx=0.02743, ty=0.03207, tz=-0.12033, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 713 transform2c: (4027893.7079, 307045.9391, 4919475.0605)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 714     Error2c: (0.026743934, 0.030857919, -0.094203577) max 0.0942, epoched 32.0
    test 715 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 716     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 717 transform8/: name='-ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2014@2010', tx=0.02293, ty=-0.00033, tz=-0.14193, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 718 transform2c: (4027893.7034, 307045.9067, 4919475.0389)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 719     Error2c: (0.022243935, -0.001542081, -0.115803577) max 0.1158, epoched 32.0
    test 720 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 721     Error2v: (-0.000440725, -0.000576335, -0.00179728) max 0.001797

    test 722 transform0: name='ITRF2020@2015xETRF2020@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.29251327e-08, ry=7.80016732e-08, rz=-1.13170058e-07, s=0.0, sx=0.002666, sy=0.016089, sz=-0.023343
    test 723 transform2c: (4027893.9574, 307045.5561, 4919474.9643)
    test 724     Error2c: (-0.000024276, -0.000021815, -0.000013824) max 2.428e-05, epoched 5.0
    test 725 transform2v: (0.01350, -0.01676, -0.01001)

    test 726 transform0: name='-ITRF2014@2015xETRF2020@2020', tx=-0.0014, ty=-0.0014, tz=0.0024, s1=1.0, rx=-1.29251327e-08, ry=-7.80016732e-08, rz=1.13170058e-07, s=-0.00042, sx=-0.002666, sy=-0.016089, sz=0.023343
    test 727 transform2c: (4027893.5358, 307046.0740, 4919475.2748)
    test 728     Error2c: (0.000032643, -0.000007101, 0.000047684) max 4.768e-05, epoched 5.0
    test 729 transform2v: (-0.01350, 0.01666, 0.01021)

    test 730 transform0: name='ITRF2014@2015xETRF2014@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.27748405e-08, ry=7.980518e-08, rz=-1.15725026e-07, s=0.0, sx=0.002635, sy=0.016461, sz=-0.02387
    test 731 transform2c: (4027893.9639, 307045.5450, 4919474.9573)
    test 732     Error2c: (0.000032525, 0.000026405, -0.000024305) max 3.253e-05, epoched 5.0
    test 733 transform2v: (0.01381, -0.01706, -0.01024)

    test 734 transform0: name='-ITRF2000@2015xETRF2014@2020', tx=0.0017, ty=0.0022, tz=-0.0451, s1=1.0, rx=-1.27748405e-08, ry=-7.980518e-08, rz=1.15725026e-07, s=0.00322, sx=-0.002635, sy=-0.016461, sz=0.02387
    test 735 transform2c: (4027893.5504, 307046.0772, 4919475.2456)  FAILED, KNOWN, expected (4027893.5505, 307046.0772, 4919475.2456)
    test 736     Error2c: (-0.000062619, -0.000037673, -0.000034946) max 6.262e-05, epoched 5.0
    test 737 transform2v: (-0.01371, 0.01716, 0.00834)

    test 738 transform0: name='ITRF2000@2015xETRF2000@2020', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=1.21736715e-08, ry=7.36431982e-08, rz=-1.19031455e-07, s=0.0, sx=0.002511, sy=0.01519, sz=-0.024552
    test 739 transform2c: (4027894.0033, 307045.5889, 4919474.9047)
    test 740     Error2c: (0.000034031, -0.000034106, 0.000010915) max 3.411e-05, epoched 5.0
    test 741 transform2v: (0.01287, -0.01740, -0.00945)

    test 742 transform0*: name='-ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8', tx=-0.03128, ty=-0.0311, tz=0.15984, s1=0.999999991, rx=-1.58921925e-08, ry=-8.23504519e-08, rz=1.00463091e-07, s=-0.009246, sx=-0.003278, sy=-0.016986, sz=0.020722
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:136: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
    test 743 transform2c: (4160476.4154, 653193.0567, 4774604.9029)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 744     Error2c: (-0.069560351, 0.035713888, 0.122930501) max 0.1229, epoched 29.8
    test 745 transform2v: (-0.01148, 0.01996, 0.01845)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 746     Error2v: (-0.015479395, 0.016963959, 0.014448874) max 0.01696

    test 747 transform0*: name='-ITRF2014@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 748 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 749     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 3.8
    test 750 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 751     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 752 transform1*: name='-ITRF2014@2010xITRF2008@2015-ITRF2008@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 753 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 754     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 755 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 756     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 757 transform2*: name='-ITRF2014@2010xITRF97@2015-ITRF97@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 758 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 759     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 760 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 761     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 762 transform3*: name='-ITRF2014@2010xITRF93@2015-ITRF93@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 763 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 764     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 765 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 766     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 767 transform4*: name='-ITRF2014@2010xITRF92@2015-ITRF92@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 768 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 769     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 770 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 771     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 772 transform5*: name='-ITRF2014@2010xITRF91@2015-ITRF91@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 773 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 774     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 775 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 776     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 777 transform6*: name='-ITRF2014@2010xITRF90@2015-ITRF90@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 778 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 779     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 780 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 781     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 782 transform7*: name='-ITRF2014@2010xITRF89@2015-ITRF89@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 783 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 784     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 785 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 786     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 787 transform8*: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 788 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 789     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 790 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 791     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 792 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602
    test 793 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602

    test 794 Issue80: 48.77691577°N, 008.92257142°E, +476.05m
    test 795 Issue80: 48.77692147°N, 008.92257868°E, +476.09m
    test 796 Issue80: 48°46′36.915133″N, 008°55′21.285094″E, +476.10m  FAILED, KNOWN, expected 48°46′36.915134″N, 008°55′21.285094″E, +476.10
    test 797 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 798 Issue80: [4160476.944064, 653192.600457, 4774604.455385]
    test 799 Issue80: [4160476.415504, 653193.057171, 4774604.903316]
    test 800 Issue80: [4160476.467901, 653193.103647, 4774604.868888]
    test 801 Issue80: 48°46′36.915133″N, 008°55′21.285094″E, +476.10m

    test 802 Issue80: 48.77692032°N, 008.92257804°E, +476.05m
    test 803 Issue80: 48.77691971°N, 008.92257856°E, +476.06m
    test 804 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m  FAILED, KNOWN, expected 48°46′36.9131″N, 008°55′21.28095″E, +476.05m
    test 805 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 806 Issue80: [4160476.492633, 653193.021888, 4774604.78885]
    test 807 Issue80: [4160476.54503, 653193.068365, 4774604.754422]
    test 808 Issue80: [4160476.016469, 653193.525079, 4774605.202353]
    test 809 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m

    test 810 ITRF96@1997xNAD83: TRFXform(epoch=1997.0, name='ITRF96@1997xNAD83')
    test 811 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2503e-07, ry=4.6785e-08, rz=5.6529e-08, s=0.0, sx=0.02579, sy=0.00965, sz=0.01166
    test 812 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83@2007', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2761e-07, ry=1.0797e-08, rz=5.4997e-08, s=0.0, sx=0.026322, sy=0.002227, sz=0.011344
    test 813 ITRF96@1997xNAD83: rx=-2.5792e-10, ry=3.5988e-09, rz=1.532e-10

    testTrf(pygeodesy.ellipsoidalExact, 24.06.11)
    test 814 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 815 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 816 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 817 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 818 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 819 Nil: True
    test 820 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 821 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 822 Nil: True
    test 823 reframe: True
    test 824 Roundtrip: True
    test 825 reframe: True
    test 826 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 827 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)

    test 828 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 829 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 830 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 831 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 832 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 833 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 834 Cartesian: [-734972.563, 4893188.492, 4011982.811]

    test 835 EUREF EX1: [4027894.0444, 307045.6209, 4919474.8613]
    test 836 transform0: ITRF2005@2015xETRF2020-ITRF91@2015xETRF2020@2007 max 1.1642e-10, epoched 8.0
    test 837 transform1: ITRF2005@2015xETRF2014-ITRF91@2015xETRF2014@2007 max 0.048666, epoched 8.0
    test 838 transform2: ITRF2005@2015xETRF2000-ITRF91@2015xETRF2000@2007 max 0.097331, epoched 8.0
    test 839 transform3: ITRF2005@2000xITRF2000+ITRF2000@1988xITRF91@2000@2007 max 0.146, epoched 19.0
    test 840 transform4: -ITRF2020@2015xITRF2005+ITRF2020@2015xITRF91@2007 max 0.19466, epoched 8.0
    test 841 transform5: -ITRF2014@2010xITRF2005+ITRF2014@2010xITRF91@2007 max 0.24333, epoched 3.0
    test 842 transform6: -ITRF2008@2005xITRF2005+ITRF2008@2000xITRF91@2005@2007 max 0.29199, epoched 7.0
    test 843 transform7: ITRF2000@1988xITRF91+ITRF2005@2000xITRF2000@1988@2007 max 0.34066, epoched 31.0
    test 844 transform8: ITRF2014@2010xITRF91-ITRF2014@2020xGDA2020@2010+ITRF2005@2020xGDA2020@2010@2007 max 0.98111, epoched 23.0
    test 845 transform9: ITRF2008@2000xITRF91-ITRF2008@1994xGDA94@2000+ITRF2005@1994xGDA94@2000@2007 max 0.35972, epoched 19.0
    test 846 transform10: ITRF2008@2000xITRF91-ITRF2008@1997xNAD83@2000+ITRF2005@1997xNAD83@2000@2007 max 0.40805, epoched 13.0
    test 847 EUREF EX2: [4027894.0060, 307045.6000, 4919474.9100]
    test 848 transform0: ITRF91@2015xETRF2020-ITRF2005@2015xETRF2020@2007 max 0.048666, epoched 8.0
    test 849 transform1: ITRF91@2015xETRF2014-ITRF2005@2015xETRF2014@2007 max 2.3283e-10, epoched 8.0
    test 850 transform2: ITRF91@2015xETRF2000-ITRF2005@2015xETRF2000@2007 max 0.048666, epoched 8.0
    test 851 transform3: -ITRF2005@2000xITRF2000-ITRF2000@1988xITRF91@2000@2007 max 0.097331, epoched 19.0
    test 852 EUREF EX4: [4027894.3559, 307045.2508, 4919474.6447]
    test 853 transform0: -ITRF2000@2015xETRF2000@2012 max 4.5169e-08, epoched 3.0
    test 854 transform1: -ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2000@2012 max 0.35826, epoched 21.0
    test 855 transform2: -ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2000@2012 max 0.7048, epoched 21.0
    test 856 transform3: -ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2000@2012 max 1.054, epoched 30.0
    test 857 transform4: -ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2000@2012 max 1.4023, epoched 30.0
    test 858 transform5: -ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2000@2012 max 1.7514, epoched 30.0
    test 859 transform6: -ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2000@2012 max 2.1088, epoched 30.0
    test 860 transform7: -ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2000@2012 max 2.4877, epoched 30.0
    test 861 transform8: -ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2000@2012 max 2.8343, epoched 30.0
    test 862 EUREF EX5: [4027893.6458, 307045.9470, 4919475.1937]  FAILED, KNOWN, expected [4027894.3662, 307045.2530, 4919474.6263]
    test 863 transform0: ITRF2014@2015xETRF2000@2012 max 4.5635e-08, epoched 3.0
    test 864 transform1: ITRF2014@2010xITRF2008@2015+ITRF2008@2015xETRF2000@2012 max 0.36023, epoched 8.0
    test 865 transform2: ITRF2014@2010xITRF97@2015+ITRF97@2015xETRF2000@2012 max 0.72047, epoched 8.0
    test 866 transform3: ITRF2014@2010xITRF93@2015+ITRF93@2015xETRF2000@2012 max 1.0807, epoched 8.0
    test 867 transform4: ITRF2014@2010xITRF92@2015+ITRF92@2015xETRF2000@2012 max 1.4409, epoched 8.0
    test 868 transform5: ITRF2014@2010xITRF91@2015+ITRF91@2015xETRF2000@2012 max 1.8012, epoched 8.0
    test 869 transform6: ITRF2014@2010xITRF90@2015+ITRF90@2015xETRF2000@2012 max 2.1614, epoched 8.0
    test 870 transform7: ITRF2014@2010xITRF89@2015+ITRF89@2015xETRF2000@2012 max 2.5216, epoched 8.0
    test 871 transform8: ITRF2014@2010xITRF88@2015+ITRF88@2015xETRF2000@2012 max 2.8819, epoched 8.0

    test 872 Case 1A: [4027893.9619, 307045.5481, 4919474.9553]
    test 873 Case 1B: [4027894.0054, 307045.5938, 4919474.9083]
    test 874 Case 2A: [4027893.9639, 307045.545, 4919474.9573]
    test 875 Case 2B: [4027894.0033, 307045.5889, 4919474.9041]

    test 876 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 877 TRFError: epoch (1899): below 1900.0 limit
    test 878 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 879 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 880 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 881 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    test 882 ETRF89@1989: [4160476.944000, 653192.600000, 4774604.455000]
    test 883 ITRF2014@2018.8: [4160476.415, 653193.057, 4774604.903]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 884 TransformXform: -ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8
    test 885 Delta (m): [-0.06956, 0.035714, 0.122931]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 886 Error (m): 0.145692  FAILED, KNOWN, expected 0.01
    test 887 Epoch range: 29.800  FAILED, KNOWN, expected 14.0
    test 888 ETRF89@1989: [4160476.467836, 653193.103190, 4774604.868503]  FAILED, KNOWN, expected [4160476.944000, 653192.600000, 4774604.455000]
    test 889 TransformXform: ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989

    test 890 ETRF2000@2000: [4160476.952000, 653192.582000, 4774604.441000]
    test 891 ITRF2014@2018.8: [4160476.471, 653193.059, 4774604.804]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 892 TransformXform: -ITRF2014@2015xETRF2000@2018.8
    test 893 Delta (m): [-0.014174, 0.037835, 0.023963]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 894 Error (m): 0.046975  FAILED, KNOWN, expected 0.01
    test 895 Epoch range: 18.800  FAILED, KNOWN, expected 14.0
    test 896 ETRF2000@2000: [4160476.681125, 653192.914350, 4774604.647835]  FAILED, KNOWN, expected [4160476.952000, 653192.582000, 4774604.441000]
    test 897 TransformXform: ITRF2014@2015xETRF2000@2000

    test 898 ITRF2008@2005: [4160476.674000, 653192.806000, 4774604.648000]
    test 899 ITRF2014@2018.8: [4160476.671, 653192.804, 4774604.645]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 900 TransformXform: -ITRF2014@2010xITRF2008@2018.8
    test 901 Delta (m): [0.186385, -0.217059, -0.134685]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 902 Error (m): 0.316218  FAILED, KNOWN, expected 0.01
    test 903 Epoch range: 13.800  FAILED, KNOWN, expected 14.0
    test 904 ITRF2008@2005: [4160476.672278, 653192.805730, 4774604.647403]  FAILED, KNOWN, expected [4160476.674000, 653192.806000, 4774604.648000]
    test 905 TransformXform: ITRF2014@2010xITRF2008@2005

    test 906 toRefFrame1: ITRF2020@2015 2024.31 [0.0031474, 0.00210534, -0.00125667]
    test 907 toRefFrame2: ITRF2014@2010 2024.32 [0.0031474, 0.00210634, -0.00125867]
    test 908 transform0: -ITRF2020@2015xITRF2014@2010
    test 909 transform0X: TRFXform(epoch=2010.0, name='-ITRF2020@2015xITRF2014@2010')
    test 910 toRefFrame3: ITRF2020@2015 2010 [0.0031474, 0.00067434, 0.00160533]
    test 911 transform2x: (4160476.488147, 653193.021674, 4774604.781605)
    test 912 transform2v: (0.000, 0.000, 0.000)  FAILED, KNOWN, expected (0.004, 0.003, 0.004)

    test 913 transform0: name='ITRF2020@2015xETRF2020@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.75573508e-09, ry=5.28398431e-08, rz=-7.66635874e-08, s=0.0, sx=0.001806, sy=0.010899, sz=-0.015813
    test 914 transform2c: (4027893.9585, 307045.5550, 4919474.9620)  FAILED, KNOWN, expected (4027893.9585, 307045.5550, 4919474.9619)
    test 915     Error2c: (-0.000016463, 0.0000336, 0.000055143) max 5.514e-05, epoched 5.0
    test 916 transform2v: (-0.00011, 0.00010, 0.00023)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 917     Error2v: (-0.000220786, -0.000005544, -0.000006899) max 0.0002208
    test 918 transform0v: (0.00009, 0.00052, -0.00075)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 919     Error0v: (-0.000024, 0.000409, -0.000993) max 0.000993

    test 920 transform0: name='-ITRF2014@2015xETRF2020@2010', tx=-0.0014, ty=-0.0004, tz=0.0004, s1=1.0, rx=-8.75573508e-09, ry=-5.28398431e-08, rz=7.66635874e-08, s=-0.00042, sx=-0.001806, sy=-0.010899, sz=0.015813
    test 921 transform2c: (4027893.6719, 307045.9063, 4919475.1704)  FAILED, KNOWN, expected (4027893.6719, 307045.9064, 4919475.1704)
    test 922     Error2c: (0.000024786, -0.000062539, -0.000021305) max 6.254e-05, epoched 5.0
    test 923 transform2v: (-0.01339, 0.01677, 0.01045)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 924     Error2v: (0.000220784, 0.000005543, 0.000006898) max 0.0002208
    test 925 transform0v: (-0.00009, -0.00052, 0.00075)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 926     Error0v: (0.013524, -0.017279, -0.009687) max 0.01728

    test 927 transform0: name='ITRF2014@2015xETRF2014@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.65392421e-09, ry=5.40615736e-08, rz=-7.83943722e-08, s=0.0, sx=0.001785, sy=0.011151, sz=-0.01617
    test 928 transform2c: (4027893.9619, 307045.5481, 4919474.9553)  FAILED, KNOWN, expected (4027893.9620, 307045.5480, 4919474.9553)
    test 929     Error2c: (-0.00007476, 0.000063039, 0.000002882) max 7.476e-05, epoched 5.0
    test 930 transform2v: (0.00020, -0.00030, 0.00020)
    test 931     Error2v: (0.000000724, -0.000003666, -0.000002721) max 3.666e-06
    test 932 transform0v: (0.00009, 0.00053, -0.00077)  FAILED, KNOWN, expected (0.00020, -0.00030, 0.00020)
    test 933     Error0v: (-0.000115, 0.000831, -0.00097) max 0.00097

    test 934 transform0: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 935 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 936     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 937 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 938     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373
    test 939 transform0v: (-0.00008, -0.00053, 0.00077)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 940     Error0v: (0.012985, -0.017431, -0.00831) max 0.01743

    test 941 transform0: name='ITRF2000@2015xETRF2000@2010', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=8.24668072e-09, ry=4.98873278e-08, rz=-8.06342114e-08, s=0.0, sx=0.001701, sy=0.01029, sz=-0.016632
    test 942 transform2c: (4027894.0054, 307045.5938, 4919474.9083)  FAILED, KNOWN, expected (4027894.0053, 307045.5939, 4919474.9083)
    test 943     Error2c: (0.000077874, -0.000055372, -0.000008743) max 7.787e-05, epoched 5.0
    test 944 transform2v: (-0.00020, -0.00050, -0.00037)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 945     Error2v: (-0.000004389, 0.000002124, -0.000008036) max 8.036e-06
    test 946 transform0v: (0.00008, 0.00049, -0.00079)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 947     Error0v: (0.000281, 0.00099, -0.000432) max 0.00099

    test 948 transform0/: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 949 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 950     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 951 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 952     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 953 transform1/: name='-ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=8.09154034e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01669
    test 954 transform2c: (4027893.6865, 307045.9168, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 955     Error2c: (0.005269863, 0.008612365, -0.033003577) max 0.033, epoched 23.0
    test 956 transform2v: (-0.01357, 0.01710, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 957     Error2v: (-0.00050027, 0.000204776, -0.00179728) max 0.001797

    test 958 transform2/: name='-ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 959 transform2c: (4027893.6872, 307045.9067, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 960     Error2c: (0.006043935, -0.001542081, -0.033003577) max 0.033, epoched 23.0
    test 961 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 962     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 963 transform3/: name='-ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 964 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 965     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 966 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 967     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 968 transform4/: name='-ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2014@2010', tx=0.01393, ty=0.00147, tz=-0.06633, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 969 transform2c: (4027893.6944, 307045.9085, 4919475.1145)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 970     Error2c: (0.013243935, 0.000257919, -0.040203577) max 0.0402, epoched 32.0
    test 971 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 972     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 973 transform5/: name='-ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 974 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 975     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 976 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 977     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 978 transform6/: name='-ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2014@2010', tx=0.02293, ty=0.01047, tz=-0.08613, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 979 transform2c: (4027893.7034, 307045.9175, 4919475.0947)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 980     Error2c: (0.022243935, 0.009257919, -0.060003577) max 0.06, epoched 32.0
    test 981 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 982     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 983 transform7/: name='-ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2014@2010', tx=0.02743, ty=0.03207, tz=-0.12033, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 984 transform2c: (4027893.7079, 307045.9391, 4919475.0605)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 985     Error2c: (0.026743934, 0.030857919, -0.094203577) max 0.0942, epoched 32.0
    test 986 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 987     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 988 transform8/: name='-ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2014@2010', tx=0.02293, ty=-0.00033, tz=-0.14193, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 989 transform2c: (4027893.7034, 307045.9067, 4919475.0389)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 990     Error2c: (0.022243935, -0.001542081, -0.115803577) max 0.1158, epoched 32.0
    test 991 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 992     Error2v: (-0.000440725, -0.000576335, -0.00179728) max 0.001797

    test 993 transform0: name='ITRF2020@2015xETRF2020@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.29251327e-08, ry=7.80016732e-08, rz=-1.13170058e-07, s=0.0, sx=0.002666, sy=0.016089, sz=-0.023343
    test 994 transform2c: (4027893.9574, 307045.5561, 4919474.9643)
    test 995     Error2c: (-0.000024276, -0.000021815, -0.000013824) max 2.428e-05, epoched 5.0
    test 996 transform2v: (0.01350, -0.01676, -0.01001)

    test 997 transform0: name='-ITRF2014@2015xETRF2020@2020', tx=-0.0014, ty=-0.0014, tz=0.0024, s1=1.0, rx=-1.29251327e-08, ry=-7.80016732e-08, rz=1.13170058e-07, s=-0.00042, sx=-0.002666, sy=-0.016089, sz=0.023343
    test 998 transform2c: (4027893.5358, 307046.0740, 4919475.2748)
    test 999     Error2c: (0.000032643, -0.000007101, 0.000047684) max 4.768e-05, epoched 5.0
    test 1000 transform2v: (-0.01350, 0.01666, 0.01021)

    test 1001 transform0: name='ITRF2014@2015xETRF2014@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.27748405e-08, ry=7.980518e-08, rz=-1.15725026e-07, s=0.0, sx=0.002635, sy=0.016461, sz=-0.02387
    test 1002 transform2c: (4027893.9639, 307045.5450, 4919474.9573)
    test 1003     Error2c: (0.000032525, 0.000026405, -0.000024305) max 3.253e-05, epoched 5.0
    test 1004 transform2v: (0.01381, -0.01706, -0.01024)

    test 1005 transform0: name='-ITRF2000@2015xETRF2014@2020', tx=0.0017, ty=0.0022, tz=-0.0451, s1=1.0, rx=-1.27748405e-08, ry=-7.980518e-08, rz=1.15725026e-07, s=0.00322, sx=-0.002635, sy=-0.016461, sz=0.02387
    test 1006 transform2c: (4027893.5504, 307046.0772, 4919475.2456)  FAILED, KNOWN, expected (4027893.5505, 307046.0772, 4919475.2456)
    test 1007     Error2c: (-0.000062619, -0.000037673, -0.000034946) max 6.262e-05, epoched 5.0
    test 1008 transform2v: (-0.01371, 0.01716, 0.00834)

    test 1009 transform0: name='ITRF2000@2015xETRF2000@2020', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=1.21736715e-08, ry=7.36431982e-08, rz=-1.19031455e-07, s=0.0, sx=0.002511, sy=0.01519, sz=-0.024552
    test 1010 transform2c: (4027894.0033, 307045.5889, 4919474.9047)
    test 1011     Error2c: (0.000034031, -0.000034106, 0.000010915) max 3.411e-05, epoched 5.0
    test 1012 transform2v: (0.01287, -0.01740, -0.00945)

    test 1013 transform0*: name='-ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8', tx=-0.03128, ty=-0.0311, tz=0.15984, s1=0.999999991, rx=-1.58921925e-08, ry=-8.23504519e-08, rz=1.00463091e-07, s=-0.009246, sx=-0.003278, sy=-0.016986, sz=0.020722
    test 1014 transform2c: (4160476.4154, 653193.0567, 4774604.9029)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1015     Error2c: (-0.069560351, 0.035713888, 0.122930501) max 0.1229, epoched 29.8
    test 1016 transform2v: (-0.01148, 0.01996, 0.01845)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1017     Error2v: (-0.015479395, 0.016963959, 0.014448874) max 0.01696

    test 1018 transform0*: name='-ITRF2014@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1019 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1020     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 3.8
    test 1021 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1022     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1023 transform1*: name='-ITRF2014@2010xITRF2008@2015-ITRF2008@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1024 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1025     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 1026 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1027     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1028 transform2*: name='-ITRF2014@2010xITRF97@2015-ITRF97@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1029 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1030     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 1031 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1032     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1033 transform3*: name='-ITRF2014@2010xITRF93@2015-ITRF93@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1034 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1035     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 1036 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1037     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1038 transform4*: name='-ITRF2014@2010xITRF92@2015-ITRF92@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1039 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1040     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 1041 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1042     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1043 transform5*: name='-ITRF2014@2010xITRF91@2015-ITRF91@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1044 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1045     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 1046 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1047     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1048 transform6*: name='-ITRF2014@2010xITRF90@2015-ITRF90@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1049 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1050     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 1051 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1052     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1053 transform7*: name='-ITRF2014@2010xITRF89@2015-ITRF89@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1054 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1055     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 1056 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1057     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1058 transform8*: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1059 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1060     Error2c: (-0.014174475, 0.037834952, 0.023962618) max 0.03783, epoched 8.8
    test 1061 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1062     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1063 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602
    test 1064 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602

    test 1065 Issue80: 48.77691577°N, 008.92257142°E, +476.05m
    test 1066 Issue80: 48.77692147°N, 008.92257868°E, +476.09m
    test 1067 Issue80: 48°46′36.915133″N, 008°55′21.285094″E, +476.10m  FAILED, KNOWN, expected 48°46′36.915134″N, 008°55′21.285094″E, +476.10
    test 1068 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 1069 Issue80: [4160476.944064, 653192.600457, 4774604.455385]
    test 1070 Issue80: [4160476.415504, 653193.057171, 4774604.903316]
    test 1071 Issue80: [4160476.467901, 653193.103647, 4774604.868888]
    test 1072 Issue80: 48°46′36.915133″N, 008°55′21.285094″E, +476.10m

    test 1073 Issue80: 48.77692032°N, 008.92257804°E, +476.05m
    test 1074 Issue80: 48.77691971°N, 008.92257856°E, +476.06m
    test 1075 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m  FAILED, KNOWN, expected 48°46′36.9131″N, 008°55′21.28095″E, +476.05m
    test 1076 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 1077 Issue80: [4160476.492633, 653193.021888, 4774604.78885]
    test 1078 Issue80: [4160476.54503, 653193.068365, 4774604.754422]
    test 1079 Issue80: [4160476.016469, 653193.525079, 4774605.202353]
    test 1080 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m

    test 1081 ITRF96@1997xNAD83: TRFXform(epoch=1997.0, name='ITRF96@1997xNAD83')
    test 1082 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2503e-07, ry=4.6785e-08, rz=5.6529e-08, s=0.0, sx=0.02579, sy=0.00965, sz=0.01166
    test 1083 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83@2007', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2761e-07, ry=1.0797e-08, rz=5.4997e-08, s=0.0, sx=0.026322, sy=0.002227, sz=0.011344
    test 1084 ITRF96@1997xNAD83: rx=-2.5792e-10, ry=3.5988e-09, rz=1.532e-10

    test 1085 TRFError: day (2), month (1) or year (None): int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
    test 1086 toStr: name='GDA94', epoch=1994, datum=Datums.GRS80
    test 1087 str: name='GDA94', epoch=1994, datum=Datums.GRS80
    test 1088 toStr2: RefFrame(name='GDA94', epoch=1994, datum=Datums.GRS80)
    test 1089 repr: RefFrame(name='GDA94', epoch=1994, datum=Datums.GRS80)

    test 1090 epoch: 2020.003
    test 1091 y-m-d: (2020, 1, 1)
    test 1092 epoch: 2020.251
    test 1093 y-m-d: (2020, 4, 1)
    test 1094 epoch: 2020.500
    test 1095 y-m-d: (2020, 7, 1)
    test 1096 epoch: 2020.751
    test 1097 y-m-d: (2020, 10, 1)
    test 1098 epoch: 2021.000
    test 1099 y-m-d: (2021, 1, 1)  FAILED, KNOWN, expected (2020, 12, 31)

    test 1100 Epoch (2020).std_repr: False
    test 1101 Epoch (2020.001): (2020, 1, 1)
    test 1102 Epoch (2020.086): (2020, 2, 1)
    test 1103 Epoch (2020.165): (2020, 3, 1)
    test 1104 Epoch (2020.25): (2020, 4, 1)
    test 1105 Epoch (2020.332): (2020, 5, 1)
    test 1106 Epoch (2020.416): (2020, 6, 1)
    test 1107 Epoch (2020.498): (2020, 7, 1)
    test 1108 Epoch (2020.583): (2020, 8, 1)
    test 1109 Epoch (2020.668): (2020, 9, 1)
    test 1110 Epoch (2020.75): (2020, 10, 1)
    test 1111 Epoch (2020.834): (2020, 11, 1)
    test 1112 Epoch (2020.916): (2020, 12, 1)
    test 1113 Epoch (2021.001): (2021, 1, 1)  FAILED, KNOWN, expected (2020, 13, 1)

    294 of 1113 testTrf.py tests (26.4%) FAILED, incl. 286 KNOWN plus 8 DeprecationWarnings (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 163.851 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testTriaxials.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.EPS4 from .constants by testTriaxials.py line 11
# lazily imported pygeodesy.F_DEG_ from .dms by testTriaxials.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testTriaxials.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testTriaxials.py line 11
# lazily imported pygeodesy.PI_4 from .constants by testTriaxials.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTriaxials.py line 11
# lazily imported pygeodesy.fstr from .streprs by testTriaxials.py line 11
# lazily imported pygeodesy.JacobiConformal from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.JacobiConformalSpherical from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.Los from .ltpTuples by testTriaxials.py line 11
# lazily imported pygeodesy.map1 from .basics by testTriaxials.py line 11
# lazily imported pygeodesy.signBit from .basics by testTriaxials.py line 11
# lazily imported pygeodesy.sincos2d_ from .utily by testTriaxials.py line 11
# lazily imported pygeodesy.Triaxial from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.Triaxial_ from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.Triaxials from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testTriaxials.py line 11

    testing testTriaxials.py 24.06.11 isLazy=3

    testHartzell(pygeodesy.triaxials, 24.06.24)
    test 1 hartzell4: (884268.349816, 5592134.174908, 2927668.068131, 12669388.912805)
    test 2 hartzell4: 0
    test 3 hartzell4: (3642143.609933, 3678204.437754, 3714265.265575, 11296443.179278)
    test 4 hartzell4: 0

    test 5 hartzell4: (888679.181482, 5594339.590741, 2931196.612187, 12663325.092381)
    test 6 hartzell4: 0
    test 7 hartzell4: (3642304.092727, 3678366.509487, 3714428.926247, 11296162.453809)
    test 8 hartzell4: 0

    test 9 hartzell4: (884080.396945, 5592040.198472, 2927517.711001, 12669647.302276)
    test 10 hartzell4: 0
    test 11 hartzell4: (3642031.283571, 3678090.99925, 3714150.714929, 11296639.666827)
    test 12 hartzell4: 0
# lazily imported pygeodesy.ecef by ellipsoidalVincenty.py line 373

    test 13 hartzell: 30°38′27.119″N, 060°44′36.777″E, +142549.69m
    test 14 hartzell: 30.640866, 060.743549, +142549.69m
    test 15 hartzell: [2807429.59, 4862610.688, 3220373.735]
    test 16 hartzell: [2684238.298, 4791786.806, 3231700.636]
    test 17 hartzell: 142549.6943849337

    test 18 hartzell: 30°00′00.0″N, 060°00′00.0″E, +100000.00m
    test 19 hartzell: 30.0, 060.0, +100000.00m
    test 20 hartzell: [2807429.59, 4862610.688, 3220373.735]
    test 21 hartzell: [2764128.32, 4787610.688, 3170373.735]
    test 22 hartzell: 99999.99999999888  FAILED, KNOWN, expected 100000.0

    testJacobiConformal(pygeodesy.triaxials, 24.06.24)
# lazily imported pygeodesy.elliptic by triaxials.py line 367
    test 23 JacobiConformal: JacobiConformal(name='Test', a=6378172, b=6378102, c=6356752, e2ab=0.00002195, e2bc=0.006683577, e2ac=0.00670538, xyQ2=xyQ2(x=1.572093, y=4.246581), volume=1083207266220584468480, area=510065604942135.9375, area_p=510065609807745.0)
    test 24 xR: 1.5720928043230937  FAILED, KNOWN, expected 1.572092804
    test 25 yR: 4.246581015231322  FAILED, KNOWN, expected 4.246581015
    test 26 xyR2.toDegrees: (90.074283, 243.31117)
    test 27 xyR2.toDegrees: (90.074283, 243.311169)  FAILED, KNOWN, expected ('90°04′27.42″N', '243°18′40.21″E')
    test 28 area: 510065604942135
    test 29 area_p: 510065609807745
    test 30 error: 9.54e-09
    test 31 volume: 1.083207e+21

    test 32 JacobiConformal: JacobiConformal(name='Itokawa25134', a=267.5, b=147, c=104.5, e2ab=0.6980138, e2bc=0.494643436, e2ac=0.847389292, xyQ2=xyQ2(x=3.13215, y=1.42547), volume=17212581.945495993, area=359464.659686278, area_p=359430.867250807)
    test 33 xyR2: (0.0, 0.61539)
    test 34 toDegrees: (0.0, 35.259243)
    test 35 toDegrees: (0.0, 35.259242)  FAILED, KNOWN, expected ('00°00′00.0″N', '035°15′33.27″E')
    test 36 xyQ2: (3.13215, 1.42547)
    test 37 toDegrees: (179.458966, 81.673412)  FAILED, KNOWN, expected (179.4589659, 81.673412)
    test 38 toDegrees: (179.458967, 81.673411)  FAILED, KNOWN, expected ('179°27′32.28″N', '081°40′24.28″E')

    testJacobiConformalSpherical(pygeodesy.triaxials, 24.06.24)
    test 39 JacobiConformalSpherical: JacobiConformalSpherical(name='Test', a=6378172, ab=1, bc=2, e2ab=0, e2bc=0, e2ac=0, xyQ2=xyQ2(x=1.733917, y=2.028959), volume=1086869218894412120064, area=511213503913540.8125, area_p=511213503913540.8125)
    test 40 xR: 1.7339168852579347  FAILED, KNOWN, expected 1.73391688526
    test 41 yR: 2.028959102748815  FAILED, KNOWN, expected 2.02895910275
    test 42 xyR2.toDegrees: (99.34612, 116.250793)
    test 43 xyR2.toDegrees: (99.346119, 116.250794)  FAILED, KNOWN, expected ('99°20′46.03″N', '116°15′02.86″E')
    test 44 areax: 511213503913540
    test 45 area_p: 511213503913540
    test 46 error: 0.00e+00
    test 47 volume: 1.086869e+21

    test 48 JacobiConformalSpherical: JacobiConformalSpherical(name='Itokawa25134', a=267.5, ab=147, bc=104.5, e2ab=0, e2bc=0, e2ac=0, xyQ2=xyQ2(x=1.933157, y=1.788429), volume=80178876.856908351, area=899202.357273738, area_p=899202.357273738)
    test 49 xyR2: (0.0, 0.818354)
    test 50 toDegrees: (0.0, 46.888217)
    test 51 toDegrees: (0.0, 46.888217)  FAILED, KNOWN, expected ('00°00′00.0″N', '046°53′17.58″E')
    test 52 xyQ2: (1.933157, 1.788429)
    test 53 toDegrees: (110.761743, 102.469455)  FAILED, KNOWN, expected (179.4589659, 81.673412)
    test 54 toDegrees: (110.761742, 102.469456)  FAILED, KNOWN, expected ('110°45′42.27″N', '102°28′10.04″E')

    testTriaxial(pygeodesy.triaxials, 24.06.24)
    test 55 Triaxial: Triaxial(name='Test', a=6378388, b=6378318, c=6356911.9461, e2ab=0.000021949, e2bc=0.006700868, e2ac=0.00672267, volume=1083307891664673177600, area=510097198412933.0625, area_p=510097203304282.5)
    test 56 Triaxial: Triaxial_(name='Un', a=6356911.9461, b=6378388, c=6378318, e2ab=-0.00676817, e2bc=0.000021949, e2ac=-0.006746073, volume=1083307891664673308672, area=510097198412933.0625, area_p=510097203304282.5)

    test 57 forwardBetaOmega: (4234607.381429, 3551286.590486, 3176009.080037)
    test 58 forwardBetaOmega: (4233813.533025, 3550620.827453, 3175409.655093)
    test 59 length: 1196.973671

    test 60 forwardCartesian: (4233813.533151, 3550620.827558, 3175409.654809, 1196.973671)
    test 61 forwardCartesian: (4239665.951888, 3553574.566129, 3164352.410834, 12911.309173)

    test 62 reverseCartesian: (4234607.381429, 3551286.590486, 3176009.080037)
    test 63 reverseCartesian: (4248255.186992, 3560773.833183, 3170763.143924)  FAILED, KNOWN, expected (4234607.381429, 3551286.590486, 3176009.080037)

    test 64 forwardBetaOmega_: (4233813.533025, 3550620.827453, 3175409.655093)

    test 65 reverseLatLon: (30.051881, 39.984967, 0.0)
    test 66 forwardLatLon: (4233813.533025, 3550620.827453, 3175409.655093)

    test 67 reverseBetaOmega: (0.520687, 0.698121, 12892.55755)
    test 68 reverseBetaOmega: (0.521162, 0.698437, 12918.032538)
    test 69 toDegrees: (29.860398, 40.017494, 12918.032538)
    test 70 toDegrees: (29.860397, 40.017494, 12918.032538)  FAILED, KNOWN, expected ('29°51′37.43″', '40°01′02.98″', 12918.032538)

    test 71 height4: (1.206423, 1.61288, 0.433517, 3.593736)
    test 72 height4: 52
    test 73 height4: 0
    test 74 height4: (-1.206423, -1.61288, -0.433517, 3.593736)
    test 75 height4: (0.0, 1.746769, 0.487031, 3.375213)
    test 76 height4: (1.563196, 0.0, 0.853517, 2.190477)
    test 77 height4: (1.297504, 1.803267, 0.0, 2.306326)

    test 78 height4(-2, -4, -3): (-1.206423, -1.61288, -0.433517, 3.593736) 52
    test 79 signBit(-2, -4, -3): (True, True, True)

    test 80 height4(-2, -4, 0): (-1.297504, -1.803267, 0.0, 2.306326) 52
    test 81 signBit(-2, -4, 0): (True, True, False)

    test 82 height4(-2, -4, 3): (-1.206423, -1.61288, 0.433517, 3.593736) 52
    test 83 signBit(-2, -4, 3): (True, True, False)

    test 84 height4(-2, 0, -3): (-1.563196, 0.0, -0.853517, 2.190477) 53
    test 85 signBit(-2, 0, -3): (True, False, True)

    test 86 height4(-2, 0, 0): (-2.25, 0.0, 0.661438, -0.707107) None
    test 87 signBit(-2, 0, 0): (True, False, False)

    test 88 height4(-2, 0, 3): (-1.563196, 0.0, 0.853517, 2.190477) 53
    test 89 signBit(-2, 0, 3): (True, False, False)

    test 90 height4(-2, 4, -3): (-1.206423, 1.61288, -0.433517, 3.593736) 52
    test 91 signBit(-2, 4, -3): (True, False, True)

    test 92 height4(-2, 4, 0): (-1.297504, 1.803267, 0.0, 2.306326) 52
    test 93 signBit(-2, 4, 0): (True, False, False)

    test 94 height4(-2, 4, 3): (-1.206423, 1.61288, 0.433517, 3.593736) 52
    test 95 signBit(-2, 4, 3): (True, False, False)

    test 96 height4(0, -4, -3): (0.0, -1.746769, -0.487031, 3.375213) 54
    test 97 signBit(0, -4, -3): (False, True, True)

    test 98 height4(0, -4, 0): (0.0, -2.0, 0.0, 2.0) None
    test 99 signBit(0, -4, 0): (False, True, False)

    test 100 height4(0, -4, 3): (0.0, -1.746769, 0.487031, 3.375213) 54
    test 101 signBit(0, -4, 3): (False, True, False)

    test 102 height4(0, 0, -3): (0.0, 0.0, -1.0, 2.0) None
    test 103 signBit(0, 0, -3): (False, False, True)

    test 104 height4(0, 0, 0): (0.0, 0.0, 0.0, -1.0) None
    test 105 signBit(0, 0, 0): (False, False, False)

    test 106 height4(0, 0, 3): (0.0, 0.0, 1.0, 2.0) None
    test 107 signBit(0, 0, 3): (False, False, False)

    test 108 height4(0, 4, -3): (0.0, 1.746769, -0.487031, 3.375213) 54
    test 109 signBit(0, 4, -3): (False, False, True)

    test 110 height4(0, 4, 0): (0.0, 2.0, 0.0, 2.0) None
    test 111 signBit(0, 4, 0): (False, False, False)

    test 112 height4(0, 4, 3): (0.0, 1.746769, 0.487031, 3.375213) 54
    test 113 signBit(0, 4, 3): (False, False, False)

    test 114 height4(2, -4, -3): (1.206423, -1.61288, -0.433517, 3.593736) 52
    test 115 signBit(2, -4, -3): (False, True, True)

    test 116 height4(2, -4, 0): (1.297504, -1.803267, 0.0, 2.306326) 52
    test 117 signBit(2, -4, 0): (False, True, False)

    test 118 height4(2, -4, 3): (1.206423, -1.61288, 0.433517, 3.593736) 52
    test 119 signBit(2, -4, 3): (False, True, False)

    test 120 height4(2, 0, -3): (1.563196, 0.0, -0.853517, 2.190477) 53
    test 121 signBit(2, 0, -3): (False, False, True)

    test 122 height4(2, 0, 0): (2.25, 0.0, 0.661438, -0.707107) None
    test 123 signBit(2, 0, 0): (False, False, False)

    test 124 height4(2, 0, 3): (1.563196, 0.0, 0.853517, 2.190477) 53
    test 125 signBit(2, 0, 3): (False, False, False)

    test 126 height4(2, 4, -3): (1.206423, 1.61288, -0.433517, 3.593736) 52
    test 127 signBit(2, 4, -3): (False, False, True)

    test 128 height4(2, 4, 0): (1.297504, 1.803267, 0.0, 2.306326) 52
    test 129 signBit(2, 4, 0): (False, False, False)

    test 130 height4(2, 4, 3): (1.206423, 1.61288, 0.433517, 3.593736) 52
    test 131 signBit(2, 4, 3): (False, False, False)

    test 132 _plumbTo5: 2.356, 1.116, 0.268, 6.503, 54
    test 133 _plumbTo5: 2.356, 0.268, 1.116, 6.503, 54
    test 134 _plumbTo5: 1.116, 2.356, 0.268, 6.503, 54
    test 135 _plumbTo5: 1.116, 0.268, 2.356, 6.503, 54
    test 136 _plumbTo5: 0.268, 2.356, 1.116, 6.503, 54
    test 137 _plumbTo5: 0.268, 1.116, 2.356, 6.503, 54

    test 138 _plumbTo5(0.0, -9790014.814694785, 2851976.9054291043): (0.0, -6123829.923797, 1783948.062408, 3818585.767502) 55
    test 139 _plumbTo5(1413051.0973246803, -11418956.887656195, -8112889.866123988): (637829.737136, -5173423.578118, -3675546.923085, 7700497.832737) 54
    test 140 _plumbTo5(-7974848.696213345, -7284971.443589476, 1269043.020684151): (-4662615.998264, -4271194.676165, 744035.9399, 4508810.074077) 53
    test 141 _plumbTo5(-12389383.820639035, 3942856.460530149, -12239937.148710757): (-4408382.038314, 1409046.513489, -4374087.078479, 11488610.865747) 53
    test 142 _plumbTo5(4002046.691302928, 3921556.090529225, -11088873.24108946): (2047842.137506, 2013264.119599, -5692789.203938, 6047992.776153) 54
    test 143 _plumbTo5(-7071175.110234881, -11752870.917897575, 6022458.664386021): (-2999537.441042, -5004849.963901, 2564575.275787, 8606449.769441) 53
    test 144 _plumbTo5(-9431305.553414045, 0.0, 5750827.339812875): (-5428254.289749, 0.0, 3319369.890758, 4683631.576682) 52
    test 145 _plumbTo5(2977815.2155009373, -8193207.890181373, 5429280.640716552): (1844570.633648, -5088198.44539, 3371698.593935, 3893452.30018) 55
    test 146 _plumbTo5(-10627754.715368664, 3615485.2409282047, 5829911.631242519): (-5340952.714121, 1823050.120095, 2939606.923617, 6286251.69443) 53
    test 147 _plumbTo5(4184141.4169811127, -6942744.161557585, 5196265.8721949905): (2764857.916606, -4598213.233225, 3441486.656822, 3254295.779896) 54
    test 148 _plumbTo5(0.0, 3233893.0948143774, 5603748.2561403755): (0.0, 3188109.287022, 5524411.531887, 91599.524405) 51
    test 149 _plumbTo5(821268.6539338494, -11796953.447056063, 1569961.1526391027): (437740.183269, -6307636.045949, 839423.708957, 5550980.505688) 54
    test 150 _plumbTo5(783637.2337014193, -7071867.745513153, 4655779.569855464): (586828.207291, -5304737.825636, 3492366.574197, 2124855.699823) 54
    test 151 _plumbTo5(-6485901.829690644, 3854016.181793593, -6578513.147317258): (-4121160.960967, 2454870.183878, -4190243.718044, 3640527.402245) 53
    test 152 _plumbTo5(-7198480.738856198, -8489561.951502599, 4010059.9556585564): (-3868458.45293, -4576517.147801, 2161704.289143, 5460529.89466) 54
    test 153 _plumbTo5(2759801.74946955, 1915229.9785891732, 1131706.561754839): (4966163.363071, 3427963.332344, 2025613.580577, -2820543.126392) 53
    test 154 _plumbTo5(3802143.5245690765, 5886755.19438398, -6635312.440892731): (2506730.182201, 3890011.916964, -4384631.507207, 3275766.186522) 54
    test 155 _plumbTo5(5285994.090994684, 3372504.005408089, -11068251.76926344): (2641531.732261, 1691004.30512, -5549661.774987, 6346294.819322) 53
    test 156 _plumbTo5(3545326.4414733057, 5799683.452857502, -10137590.981503239): (1846723.182371, 3030755.760429, -5297571.935742, 5829064.930249) 55
    test 157 _plumbTo5(-8142436.396239501, 2921425.2235833355, 2462236.1935744523): (-5756319.88015, 2069387.154579, 1744110.132069, 2633481.71431) 51
    test 158 _plumbTo5(991277.800781818, 0.0, 2620442.6217857506): (2272857.731329, 0.0, 5956694.454576, -3573936.682452) 54
    test 159 _plumbTo5(4948826.4744540965, 2848658.6276646554, 0.0): (5515027.064753, 3172136.900176, 0.0, -652089.948736) 47
    test 160 _plumbTo5(3397969.109236029, 5238628.714630475, 3496358.0050079874): (3024516.648608, 4666327.009822, 3114385.760371, 782878.520173) 53
    test 161 _plumbTo5(2578853.7717251554, -10742271.12534686, -12100588.158246215): (999783.855802, -4181835.322685, -4710548.457087, 10007270.682106) 54
    test 162 _plumbTo5(-6931872.084268327, -6767724.342118017, 2217487.259878128): (-4436038.567213, -4341501.173515, 1422508.852249, 3570396.963549) 51
    test 163 _plumbTo5(-11164160.039852127, 5084241.663551509, 793640.6175789145): (-5773292.898202, 2637763.290614, 411745.569, 5932330.806378) 47
    test 164 _plumbTo5(4860531.4242227655, -8116224.340900058, -12294287.036701696): (1990687.77202, -3337342.054737, -5055270.67387, 9136579.031259) 54
    test 165 _plumbTo5(0.0, -11108799.007478073, 4716334.302126969): (0.0, -5871159.962882, 2492624.679484, 5690144.747484) 54
    test 166 _plumbTo5(4662083.632504467, 4328393.878694221, 3213177.708819298): (4164625.585456, 3869317.082758, 2872375.944431, 757866.647736) 49
    test 167 _plumbTo5(-6971004.021393383, -11176231.13741483, 4001750.6363166263): (-3218368.462335, -5178575.916439, 1854214.100911, 7393649.637338) 53
    test 168 _plumbTo5(-12575840.184609583, 1914286.1333914783, 5990800.24099146): (-5685201.01997, 868597.069328, 2718260.896874, 7699603.072546) 51
    test 169 _plumbTo5(5954266.264000948, 804098.4486094406, 4544372.589713671): (5028802.098342, 679828.781963, 3842047.958197, 1168412.067724) 52
    test 170 _plumbTo5(-11807275.48255542, 4577206.053996533, 1316883.8543128606): (-5895339.117226, 2293104.712049, 659729.857138, 6371809.939412) 51
    test 171 _plumbTo5(2208138.584357379, 4449735.761310415, 3529039.6479810183): (2310985.816319, 4655530.876671, 3692257.384653, -282080.152072) 53
    test 172 _plumbTo5(-7995943.555204984, -11399850.597048547, 679493.3864493794): (-3645312.467578, -5216217.499121, 310911.363577, 7569753.090953) 52
    test 173 _plumbTo5(-10303058.905934365, 2148750.74795114, -11821388.347300973): (-4136477.907584, 866166.814617, -4765168.854329, 9458434.135113) 53
    test 174 _plumbTo5(1099324.0006627268, -9433726.383327844, -12367168.104245322): (447885.83566, -3858854.993027, -5058710.358743, 9215048.416531) 55
    test 175 _plumbTo5(1037093.2087739685, -10995185.034067813, -11606726.573976075): (411210.354349, -4377381.108509, -4620785.759948, 9643154.421749) 55
    test 176 _plumbTo5(6024450.625993624, -8820242.156344417, 1876410.2786142186): (3532768.579665, -5186656.296155, 1103394.556708, 4473139.71721) 54
    test 177 _plumbTo5(3003463.9524720176, -6896518.262224765, -7023668.553270236): (1856558.890786, -4273980.316105, -4352742.854247, 3914963.676595) 54
    test 178 _plumbTo5(6045520.071241792, -11826556.055967545, 1251521.9237776238): (2880307.587748, -5654507.667869, 598370.24556, 6967019.340109) 53
    test 179 _plumbTo5(5862954.068527031, -9578825.55587816, -6569733.129796513): (2864328.996931, -4695852.991567, -3220661.615041, 6637126.893074) 53
    test 180 _plumbTo5(1959793.2466560483, -6966197.770186911, -7893013.221167215): (1164133.067559, -4149302.816297, -4701303.693835, 4330702.253528) 54
    test 181 _plumbTo5(-7024296.873101027, -11901018.71171319, 1159388.9027045644): (-3219205.880799, -5474122.207083, 533278.828024, 7495047.028975) 53
    test 182 _plumbTo5(0.0, -8651790.773844868, -9643723.92453376): (0.0, -4259415.215793, -4747706.892901, 6577533.414359) 52
    test 183 _plumbTo5(2902918.5330787976, 1980969.1605550058, -6633319.7863680655): (2463158.856835, 1682588.061625, -5634165.338778, 1131693.18421) 53
    test 184 _plumbTo5(-12594868.540443813, 3930867.6821883866, 5056252.136408654): (-5666013.475355, 1774931.290947, 2283056.266286, 7768378.825093) 51
    test 185 _plumbTo5(-10861347.613713054, -8692002.726421809, -8462042.052155491): (-4238643.325953, -3406017.766388, -3315861.919868, 9913880.120053) 53
    test 186 _plumbTo5(884795.5737194156, -11211620.679666532, 2482191.042854264): (488538.351142, -6209171.356567, 1374662.863255, 5138884.867871) 54
    test 187 _plumbTo5(1022265.8820702255, -6485180.411115888, 3616579.93300653): (868995.197525, -5518404.585798, 3077429.573007, 1117510.854465) 54
    test 188 _plumbTo5(0.0, 0.0, -11746394.135305261): (0.0, 0.0, -6378318.0, 5368076.135305) None
    test 189 _plumbTo5(-12489976.42213303, 5907949.831693591, 4766106.16739816): (-5431715.004744, 2579082.382009, 2080591.199134, 8253023.893007) 51
    test 190 _plumbTo5(2606539.484158404, -12324469.144408798, 2367346.5367094073): (1292690.916763, -6132997.234006, 1178044.222086, 6440105.781035) 54
    test 191 _plumbTo5(845859.060094331, -7292905.181263373, -7534615.0079398565): (511482.915528, -4421701.11466, -4568210.727533, 4141880.557543) 54
    test 192 _plumbTo5(-6996213.683163827, 3781245.047828848, -7761752.046894392): (-4003343.314963, 2169928.17835, -4454164.36489, 4742757.780961) 54
    test 193 _plumbTo5(-12273047.664868888, -6443102.4637379935, -11643672.067217035): (-4307401.125617, -2271208.563931, -4104363.080249, 11734453.694166) 53
    test 194 _plumbTo5(1269747.181667605, 6087478.524600103, 3953866.064212097): (1097967.390343, 5268716.023647, 3422063.158724, 991309.568177) 54
    test 195 _plumbTo5(-11145938.009415377, 3346814.4763784534, -7190634.131110767): (-5179019.661483, 1560732.222449, -3353195.40722, 7315746.055482) 52
    test 196 _plumbTo5(981100.9755763976, 2486498.674704047, -7682554.342413441): (768167.060711, 1949684.45553, -6023926.718268, 1756290.395574) 54
    test 197 _plumbTo5(-8943678.736380473, 4035523.882236773, -6381696.436460072): (-4857963.011967, 2198739.347448, -3477007.518013, 5338920.126852) 53
    test 198 _plumbTo5(-11788860.206494927, -7289642.614911121, -7562716.034487003): (-4744847.637624, -2945809.900175, -3056121.343389, 9423183.720689) 53
    test 199 _plumbTo5(-7096497.409679927, -8759328.106222186, -7772508.9827303365): (-3293950.29716, -4080478.031117, -3620732.083894, 7320399.851508) 50
    test 200 _plumbTo5(3535644.8265978517, 0.0, -6858424.942631564): (2917870.444449, 0.0, -5666704.221354, 1342327.629441) 53
    test 201 _plumbTo5(4035006.495043334, -12614693.893306635, -12660412.612696633): (1398593.237903, -4391731.08724, -4407584.725781, 11944746.13809) 54
    test 202 _plumbTo5(-7379808.218385057, -11667118.565045357, 3950696.138295144): (-3266135.647218, -5183024.61949, 1755043.925586, 7986655.429949) 54
    test 203 _plumbTo5(-11196737.412258176, 2875770.933954415, -6460305.710939996): (-5374535.567432, 1385238.562111, -3111848.262896, 6879817.465221) 52
    test 204 _plumbTo5(-9307452.465466516, 2389051.1131392485, -9714941.969471022): (-4329448.996041, 1115299.703743, -4535250.436243, 7296037.662591) 53
    test 205 _plumbTo5(-11654320.005833277, 723469.8645259085, -8539500.777731158): (-5120574.658524, 319074.519158, -3766160.566807, 8101736.889585) 51
    test 206 _plumbTo5(-9801220.05734504, -7591992.702314586, -9500386.120345682): (-3987527.195679, -3101091.376081, -3880559.96682, 9249306.21223) 53
    test 207 _plumbTo5(6105747.390920191, 3170703.30669401, 3362532.926613191): (5072708.761957, 2637247.910092, 2796792.802015, 1292983.123507) 52
    test 208 _plumbTo5(-12654004.489868151, -9331783.835856361, 3540322.933788002): (-4989844.589378, -3694840.052232, 1401742.021564, 9751308.143944) 53
    test 209 _plumbTo5(1312988.2053587711, -6421882.867516371, 4341143.478864495): (1063803.548466, -5209756.696239, 3521740.909497, 1484170.953432) 54
    test 210 _plumbTo5(4440498.079719638, 0.0, 0.0): (6356911.9461, 0.0, 0.0, -1916413.86638) None
    test 211 _plumbTo5(-10152890.106241645, 4209469.05052268, -8033913.635025557): (-4740280.940961, 1972427.237746, -3764399.987272, 7247719.699088) 53
    test 212 _plumbTo5(-10810848.521910276, -7378109.883236033, 3665804.935053244): (-5055695.898899, -3462767.445814, 1720451.760346, 7227453.707273) 51
    test 213 _plumbTo5(5167339.059882879, 4651605.83929283, -9545573.167574864): (2782185.206478, 2512301.313015, -5155448.408237, 5434958.892496) 54
    test 214 _plumbTo5(-9137054.542878307, 4850648.063627726, 5655441.5486958595): (-4927130.275374, 2623825.231588, 3059125.402188, 5424302.701365) 53
    test 215 _plumbTo5(-9275226.685525514, -9259435.855567753, 5552570.196748512): (-4141564.748218, -4149955.288219, 2488557.544736, 7864442.134466) 53
    test 216 _plumbTo5(3746082.238386969, 5578313.855387507, -11383548.811712591): (1801288.255533, 2691703.621369, -5492841.086152, 6842161.923462) 54
    test 217 _plumbTo5(-7402790.763206897, 2251966.468184209, 3864674.520222756): (-5443155.638899, 1658787.50415, 2846683.922067, 2286555.479696) 51
    test 218 _plumbTo5(5308478.26403238, -9936856.507629631, -7052064.229681962): (2538660.675566, -4768806.329452, -3384324.268356, 6916136.822059) 52
    test 219 _plumbTo5(-12602542.250253994, -11372180.897223413, -9368669.345773758): (-4129192.109828, -3742985.533456, -3083513.865131, 13019426.405055) 52
    test 220 _plumbTo5(4193488.803739322, -7156295.21863002, 4609120.516114906): (2811918.067951, -4809261.318792, 3097455.424287, 3114873.540744) 53
    test 221 _plumbTo5(873309.8249200041, 5437429.81246157, -10457173.921950452): (469849.830243, 2934508.179267, -5643539.948196, 5440447.472635) 55
    test 222 _plumbTo5(-7680706.705615628, 0.0, -11908834.925580017): (-3444659.335592, 0.0, -5360710.386264, 7798848.139532) 53
    test 223 _plumbTo5(1788048.8893107048, 3277014.573394357, 3411486.8937369687): (2257731.032648, 4130522.013717, 4300042.601484, -1318562.669055) 53
    test 224 _plumbTo5(-10449061.078748861, -9303834.049405213, 2614007.4370392733): (-4666132.774547, -4170235.942594, 1171656.29656, 7866159.552554) 52
    test 225 _plumbTo5(0.0, 1544402.6571483377, 658617.0752163432): (0.0, 5867086.411716, 2502197.652156, -4699402.534969) 54
    test 226 _plumbTo5(6049536.402615101, -10177664.134616565, -9504369.186955543): (2531747.405378, -4276096.24353, -3993163.812447, 8807765.192272) 53
    test 227 _plumbTo5(-8349183.051618299, -11989972.415212672, -9517431.234999163): (-3041680.089581, -4386798.529644, -3482115.786965, 11063583.20724) 53
    test 228 _plumbTo5(-8464397.366616659, 6024874.9959464865, 5819391.428541835): (-4518958.397147, 3226661.256751, 3116581.415317, 5540908.838775) 53
    test 229 _plumbTo5(1863134.2657728943, 5487387.1217329865, 0.0): (2051206.902309, 6037210.198956, 0.0, -581099.589452) 53
    test 230 _plumbTo5(6319981.608958347, -12362795.300551597, 1606824.2553900674): (2873673.921572, -5642003.536427, 733296.939447, 7603231.456727) 53
    test 231 _plumbTo5(3347519.564173637, 4647004.317201031, 5768557.687792651): (2622006.345191, 3645162.765341, 4524900.507045, 1754063.598955) 53
    test 232 _plumbTo5(-7843704.168580477, -9679635.841422256, -11092799.183535345): (-2987205.981006, -3701812.892571, -4242195.789807, 10307798.441563) 53
    test 233 _plumbTo5(-11695884.214969955, 1012311.6536509021, -9405807.90089709): (-4941515.903005, 429369.047312, -3989395.674325, 8677490.120083) 52
    test 234 _plumbTo5(-8712013.820417168, -12690222.4325923, 2889333.869891771): (-3534568.870978, -5169228.099327, 1176924.330443, 9289975.155848) 53
    test 235 _plumbTo5(4563675.818249919, -11598045.488981096, 657137.3499806671): (2324555.455756, -5927134.47753, 335823.794282, 6105418.421255) 55
    test 236 _plumbTo5(-11978865.079161404, 2231584.693682892, -10575699.981786009): (-4718143.769499, 882555.747977, -4182463.246618, 9767877.404269) 52
    test 237 _plumbTo5(3442877.9615743305, -9010483.775201662, 1828647.848533957): (2231221.777577, -5853261.710904, 1187890.948086, 3441908.086654) 54
    test 238 _plumbTo5(772394.7034931481, -11097638.36533683, 2421835.5599906496): (431443.166291, -6217353.690374, 1356798.845015, 5006768.385261) 55
    test 239 _plumbTo5(-11523180.100812938, -7320464.497297453, 805056.6711567106): (-5356044.441951, -3414883.095455, 375542.047189, 7312428.538689) 51
    test 240 _plumbTo5(-9334275.727290541, -9550630.848031528, 0.0): (-4442871.362079, -4561921.734296, 0.0, 6986634.045481) 53
    test 241 _plumbTo5(-9056529.341044787, 0.0, 1610338.4477775781): (-6258989.846429, 0.0, 1115217.255189, 2841016.054035) 48
    test 242 _plumbTo5(4705204.9197461, -12720397.326706074, -8555588.761527192): (1864059.039051, -5059974.639866, -3403234.098981, 9659241.389732) 54
    test 243 _plumbTo5(-12676227.026429776, -9906614.569145968, -10591402.033558495): (-4180853.739216, -3282171.938091, -3508998.162574, 12892441.663741) 50
    test 244 _plumbTo5(-10794189.740856333, 2759374.410210343, -7834339.392600069): (-5037586.419208, 1292417.831197, -3669354.089785, 7255173.738802) 50
    test 245 _plumbTo5(2996066.681509477, 3690112.925392903, -7841284.91498628): (2079514.456649, 2566517.386493, -5453670.381739, 2793427.657074) 54
    test 246 _plumbTo5(-8667998.310483921, 3589460.9750847137, 1016101.6529565592): (-5840172.557181, 2423760.101958, 686111.120266, 3076418.49694) 51
    test 247 _plumbTo5(-7853605.625012179, 4881303.065364039, -6914739.044852755): (-4324627.714074, 2696058.502997, -3819135.497935, 5178005.428052) 53
    test 248 _plumbTo5(-9390415.68440359, -7992932.050566155, -9692549.110796303): (-3804311.35299, -3251154.74405, -3942428.948216, 9314123.44293) 52
    test 249 _plumbTo5(-10541131.129286358, 1454295.29256457, 1061797.0528389325): (-6266259.149312, 866880.790205, 632913.626602, 4336303.406827) 48
    test 250 _plumbTo5(0.0, -6894026.210865601, 4154762.953188015): (0.0, -5462988.621796, 3292316.946855, 1670832.635296) 53
    test 251 _plumbTo5(-9354184.773021081, -8908608.02440656, -7814149.415647683): (-3937450.44123, -3764549.150769, -3302017.176782, 8727066.509295) 51
    test 252 _plumbTo5(-9694858.829090217, -11107679.87659784, 5248808.166698161): (-3936467.99816, -4528206.339631, 2139724.737249, 9279813.400961) 53
    test 253 _plumbTo5(5206722.285370699, -7126088.6271006, -7328422.742453037): (2886129.742417, -3961921.42911, -4074374.267778, 5097640.168037) 54
    test 254 _plumbTo5(-12214532.89715952, 4255585.620416186, 5590451.267088469): (-5509909.332558, 1926781.555587, 2531132.01523, 7728825.253567) 51
    test 255 _plumbTo5(5130889.8329748325, -10151520.45313861, -9993661.164785897): (2153157.374804, -4276730.698998, -4210172.732282, 8765203.003736) 54
    test 256 _plumbTo5(4695541.572371073, 6000730.379669276, 5760469.002129437): (3127587.500104, 4005935.194133, 3845514.741629, 3178794.995715) 54
    test 257 _plumbTo5(-7792870.363820375, -7097438.041743127, -7759874.1241182): (-3784569.718195, -3458796.339041, -3781578.935013, 6718111.350523) 53
    test 258 _plumbTo5(899872.1975562808, 5792656.870352452, 2749540.3064965648): (886308.370962, 5705922.000356, 2708369.87598, 96963.495266) 53
    test 259 _plumbTo5(2051378.0405356016, 3376770.3935526945, 4219663.176355846): (2263880.472789, 3723976.951692, 4653548.22684, -594950.346468) 53
    test 260 _plumbTo5(2781198.578621078, -9722466.735297378, 1819340.7144487745): (1721989.850755, -6035154.685642, 1129333.895847, 3897987.004909) 54
    test 261 _plumbTo5(1802909.9540286753, -8824779.39989482, 4958708.191887124): (1115549.963805, -5474360.357955, 3076057.554426, 3904118.970457) 55
    test 262 _plumbTo5(-8864479.31577967, 5159468.646586038, -8887045.827123348): (-4151720.502689, 2425128.957357, -4177170.742634, 7202057.516984) 53
    test 263 _plumbTo5(4864283.5345421815, 4659110.330987196, -10354430.738885764): (2503517.218295, 2405769.314714, -5346537.329095, 5977437.556292) 54
    test 264 _plumbTo5(2573994.6917717285, 4407197.15646328, 0.0): (3218059.29697, 5500712.436378, 0.0, -1269092.149167) 53
    test 265 _plumbTo5(0.0, 1302095.8598491377, -10411635.202733647): (0.0, 791523.75097, -6329016.06982, 4114421.327817) 48
    test 266 _plumbTo5(-9649927.898977777, -6836849.579848332, -12604773.248912754): (-3546956.439121, -2523702.875467, -4652766.107812, 10912557.5694) 53
    test 267 _plumbTo5(-7948990.93444827, 4657773.677903945, 4987027.272568976): (-4824875.808175, 2834663.474477, 3035017.066762, 4110251.814625) 53
    test 268 _plumbTo5(5688353.2824102845, 4855024.176419434, 2430987.857766439): (4602943.916001, 3933670.481345, 1969643.19776, 1496611.178441) 52
    test 269 _plumbTo5(-8860957.493186012, 1621658.9796633902, 5905842.291829038): (-5230418.426351, 959871.720823, 3495679.607619, 4407681.982191) 53
    test 270 _plumbTo5(-9960228.465787461, -8133384.5555406455, 2167921.901981099): (-4855150.590262, -3978356.840913, 1060403.594699, 6674778.814723) 52
    test 271 _plumbTo5(5537275.235126317, 4215059.6529994365, -9049377.231891533): (3084374.1493, 2354886.231368, -5055692.962148, 5042467.941573) 54
    test 272 _plumbTo5(3767174.8991857213, -10714828.060111219, -10474377.585902002): (1549112.954704, -4423590.856618, -4324265.729941, 9073221.047732) 54
    test 273 _plumbTo5(3231176.6426048693, -9945799.705872778, -10966952.151803518): (1354772.189352, -4186432.334569, -4616201.904321, 8776288.218588) 54
    test 274 _plumbTo5(4705208.14420413, 3519012.3211792414, -8414743.918444706): (2916261.503604, 2186653.093045, -5228732.162591, 3889239.270622) 54
    test 275 _plumbTo5(0.0, 4624903.773011956, 0.0): (0.0, 6378388.0, 0.0, -1753484.226988) None
    test 276 _plumbTo5(4794821.248138876, -10034211.519614117, -7311915.104642377): (2289842.109099, -4808884.67086, -3504187.098921, 6933812.351722) 54
    test 277 _plumbTo5(-9352922.175105467, 1461598.7569519999, 6357776.433074465): (-5214582.948367, 817323.861493, 3555224.77278, 5039368.760579) 53
    test 278 _plumbTo5(-11828005.632969422, 5804324.297114845, -6620095.891768786): (-5098464.039258, 2511561.44894, -2864514.411635, 8380537.541813) 52
    test 279 _plumbTo5(1128419.0924562782, 3639748.2915950143, 1310433.928828899): (1792142.293853, 5757838.965989, 2073045.527112, -2347000.861283) 54
    test 280 _plumbTo5(-11193586.510198686, 5587313.849963021, 5214019.246680404): (-5249673.350395, 2629778.742789, 2454051.810853, 7189891.362759) 52
    test 281 _plumbTo5(4150639.255999912, 6108311.859918333, -7044021.681120876): (2587132.527898, 3817034.424174, -4401715.643445, 3830964.209322) 54
    test 282 _plumbTo5(-9983038.560186872, 1556194.3403018531, -10946323.682293752): (-4259011.932109, 666480.137718, -4687985.025896, 8527770.807156) 53
    test 283 _plumbTo5(4185293.5909836832, -10370790.33429035, -9325843.05876077): (1826389.355932, -4542845.495087, -4085063.934273, 8185055.654704) 52
    test 284 _plumbTo5(-11703299.125244005, 4352445.118820151, 6248911.572448036): (-5327747.895227, 1988667.109184, 2855143.818624, 7599523.638512) 51
    test 285 _plumbTo5(-10855910.767183729, 4260075.83866963, 0.0): (-5917830.122207, 2329397.77078, 0.0, 5302089.989629) 52
    test 286 _plumbTo5(-6508181.14818986, 3605796.746745364, 4689317.508879083): (-4707361.621556, 2612930.06282, 3398079.675478, 2428174.285746) 52
    test 287 _plumbTo5(-9127346.058047095, 2050560.0963243947, 3747700.4946994674): (-5758397.820917, 1296906.40366, 2370268.284057, 3716870.405037) 51
    test 288 _plumbTo5(0.0, 1199463.436976021, -9548281.061783059): (0.0, 795007.577005, -6328579.408857, 3245005.897763) 48
    test 289 _plumbTo5(-8147159.138656581, -12444638.21221025, 5047184.4099144405): (-3295703.900727, -5054361.729684, 2049875.839954, 9334702.088303) 54
    test 290 _plumbTo5(5468003.669546852, 3358964.0445638113, 3110553.4216479906): (4879453.573359, 2999591.508947, 2777751.591532, 765700.263293) 52
    test 291 _plumbTo5(2743041.267851937, -12461932.17059622, 923095.0970969158): (1362948.611237, -6213037.087207, 460214.42516, 6416198.564609) 54
    test 292 _plumbTo5(1188193.0874074048, 1051950.5798079774, 5210235.961635708): (1392767.342358, 1231642.036769, 6100257.764243, -930740.809576) 53
    test 293 _plumbTo5(-7694769.142413347, -10358361.498710347, -9385766.256049138): (-3063992.878391, -4141368.110402, -3752466.16066, 9582753.548037) 54
    test 294 _plumbTo5(-9221975.140658943, 3827670.9832740817, 1324622.2880064829): (-5821105.651984, 2422111.685174, 838200.899883, 3711888.466307) 52
    test 295 _plumbTo5(6112846.742217368, -8714120.99146507, -10450126.136618387): (2603987.37978, -3726474.011995, -4468796.598209, 8541956.419008) 53
    test 296 _plumbTo5(862521.2550568723, -11762779.9265474, 6083697.186107977): (413099.647958, -5653520.157308, 2923961.240334, 6892674.804167) 54
    test 297 _plumbTo5(-10845647.425910618, -11867360.4756745, -7875203.3716322025): (-3848867.367791, -4229793.914179, -2806859.774658, 11531498.644147) 54
    test 298 _plumbTo5(0.0, 3263975.909310839, -9179152.58012542): (0.0, 2136976.328349, -6009689.918373, 3363870.036094) 51
    test 299 _plumbTo5(-12528396.559444625, 1740467.7002662243, -9772551.784721347): (-4981245.625504, 694817.572216, -3901279.61826, 9618976.466477) 52
    test 300 _plumbTo5(-6395261.978485007, 0.0, 2065603.2942702302): (-6050915.038488, 0.0, 1955088.203617, 361646.789488) 49
    test 301 _plumbTo5(1707138.5519008406, -6589607.583220061, 1600026.0911872685): (1555988.03393, -6009739.07063, 1459225.093461, 615563.88128) 53
    test 302 _plumbTo5(-10242789.28578905, 4396902.123408333, 4215746.420203788): (-5464065.338949, 2352928.434835, 2255962.979357, 5554708.105265) 52
    test 303 _plumbTo5(1769298.9824139662, 2666874.579486381, 5838319.997608684): (1694133.78764, 2554307.155786, 5591882.290217, 281163.253304) 53
    test 304 _plumbTo5(-11999152.533618566, -7857659.551085416, 1683991.7876956426): (-5281161.6942, -3471441.056573, 743962.826023, 8077992.823028) 52
    test 305 _plumbTo5(-7525911.566151138, -10388138.10409471, -10918440.410666605): (-2838180.379757, -3934060.044751, -4134832.82419, 10471259.67395) 54
    test 306 _plumbTo5(0.0, 2317708.5396140856, 2215144.081488521): (0.0, 4611001.141393, 4407048.405468, -3172323.363539) 52
    test 307 _plumbTo5(-12043788.73831333, -8244033.534781316, 6060753.4474816285): (-4843259.842949, -3328614.020051, 2447060.02186, 9437570.956191) 53
    test 308 _plumbTo5(-6966686.681644852, -7455199.583323935, -10739611.974940017): (-2988414.686057, -3210290.185715, -4624536.157848, 8440382.462517) 53
    test 309 _plumbTo5(-11863628.770620834, 2012972.1044876256, 3129622.8479180257): (-6065589.426277, 1032577.017665, 1605358.600619, 6074686.515403) 51
    test 310 _plumbTo5(-6478004.266813444, 5320475.466398297, -6714855.2844246095): (-3835572.223929, 3158871.450885, -3986706.758658, 4370099.930183) 53
    test 311 _plumbTo5(1800482.5287277326, 3588113.568529421, -7911770.109746954): (1291887.598483, 2579452.337649, -5687642.710488, 2494555.866259) 54
    test 312 _plumbTo5(2526993.75741816, 4830636.370816984, -8691700.810838753): (1566885.18292, 3002949.670643, -5403123.176284, 3882909.992172) 55
    test 313 _plumbTo5(-11663322.36045703, 765165.5459162967, -8769216.415071134): (-5073217.235346, 334094.552144, -3828859.282341, 8247571.543225) 52
    test 314 _plumbTo5(4059691.959189343, -11748285.844669776, -7985323.569347745): (1746049.829296, -5072302.664498, -3447607.026275, 8397175.87957) 53
    test 315 _plumbTo5(2206392.2596702874, 3905195.9664644855, -11717633.156707684): (1117938.68444, 1985275.513362, -5956802.002565, 6169116.737282) 55
    test 316 _plumbTo5(-6377255.464665475, 3011512.3238561475, -10015047.32652278): (-3309932.241819, 1568109.849405, -5214831.436891, 5876559.796662) 54
    test 317 _plumbTo5(2810822.111805719, -8713614.018500317, 6112478.045002054): (1623905.412233, -5048476.014895, 3541402.43508, 4631677.625778) 54
    test 318 _plumbTo5(5408893.556759647, 4935761.2525156075, 6130683.304230015): (3603139.141983, 3295357.607185, 4093116.634592, 3178576.892152) 53
    test 319 _plumbTo5(5955619.694992785, 3667180.162313527, 2570301.510895442): (5085180.761422, 3134285.898783, 2196792.557036, 1086806.869592) 52
    test 320 _plumbTo5(1151721.1041324849, 3156491.9804943516, -11357387.782012394): (618307.385724, 1699871.589163, -6116253.545967, 5465872.41341) 55
    test 321 _plumbTo5(-12599732.965522373, 5045558.462483437, -10669080.148886513): (-4637575.091543, 1865038.421852, -3943660.397852, 10896923.261483) 53
    test 322 _plumbTo5(1708734.7415956792, -8497425.26236858, -11527034.127791518): (752873.32243, -3758122.372877, -5097952.991083, 8044112.579607) 54
    test 323 _plumbTo5(-11811234.684258308, -7446655.257414682, 6021852.416257396): (-4936667.833813, -3124658.169251, 2526770.743703, 8840527.366009) 52
    test 324 _plumbTo5(-8048410.323298763, 3887784.2341600875, 5345244.860599208): (-4914119.72007, 2379996.151975, 3272186.196515, 4049046.148292) 52
    test 325 _plumbTo5(-9258126.948845709, 4291654.0667164875, 1984216.372463996): (-5662238.421867, 2631632.260956, 1216706.520295, 4034248.141505) 52
    test 326 _plumbTo5(-8624757.753667042, 4332100.607698563, 3453070.8521203105): (-5349857.144702, 2694038.744452, 2147371.5173, 3887553.397623) 52
    test 327 _plumbTo5(4104316.4926702487, 675563.6791859721, 4942656.321836816): (4046685.51932, 666140.598161, 4873712.326661, 90351.524702) 52
    test 328 _plumbTo5(-8551467.355074793, -10258166.623528404, 2313896.3588451305): (-4010192.005259, -4827780.51679, 1088971.779266, 7184199.001751) 53
    test 329 _plumbTo5(5401649.795660256, 3933172.549271382, 4920769.773331567): (4142229.888681, 3020869.9565, 3779373.954375, 1929046.121378) 53
    test 330 _plumbTo5(2743098.755302901, -11389117.218031313, 0.0): (1488927.282485, -6200961.589895, 0.0, 5337593.549999) 55
    test 331 _plumbTo5(-8170905.071331979, -9673936.619659873, 4696266.250871301): (-3845445.202884, -4569072.244196, 2218055.801957, 7135178.371599) 53
    test 332 _plumbTo5(4294783.330025517, -11755500.471803322, -12148115.165009689): (1563964.981908, -4299196.488521, -4442720.842064, 11064670.786499) 54
    test 333 _plumbTo5(1011832.5860852039, -6599739.514521171, -7957136.996836431): (619696.957181, -4052569.495299, -4886037.913854, 4009176.353788) 55
    test 334 _plumbTo5(-10699048.790685678, -9437662.96714852, -7544777.03943113): (-4212554.319278, -3731113.832993, -2982735.076662, 9769930.420335) 45
    test 335 _plumbTo5(-9848588.45993871, 4633765.985469099, -7773502.7105666045): (-4680481.226103, 2209965.079399, -3707345.67816, 7008407.538441) 52
    test 336 _plumbTo5(-6744437.583637426, 5831257.996389266, 2654760.6496835276): (-4611504.589832, 3995613.541095, 1819045.61843, 2935543.107465) 52
    test 337 _plumbTo5(-9261773.20147742, 4166998.6744498075, -7691776.208713274): (-4621367.037541, 2086243.333564, -3850910.983056, 6373002.262402) 53
    test 338 _plumbTo5(4166187.459962423, 2259183.2871387415, -12311352.87757565): (2007367.177039, 1092332.855341, -5952568.285485, 6815877.524777) 53
    test 339 _plumbTo5(-7841012.876037472, -6722773.434348905, 3325674.9397554584): (-4594971.214351, -3950658.215902, 1954325.285336, 4483526.416609) 53
    test 340 _plumbTo5(0.0, 6013291.444224203, 0.0): (0.0, 6378388.0, 0.0, -365096.555776) None
    test 341 _plumbTo5(-9491205.62237828, -11338938.320092477, 4435938.000813982): (-3906760.825403, -4685857.629295, 1833143.954077, 9067747.416997) 53
    test 342 _plumbTo5(1677543.0086834426, -6642654.098870976, 1821790.0614630897): (1508069.515079, -5975639.507205, 1638853.462673, 712106.40336) 53
    test 343 _plumbTo5(5933899.343783613, 901805.1259449334, -7038739.786438329): (4080878.459714, 621496.766122, -4850853.076256, 2880817.146223) 53
    test 344 _plumbTo5(-11715072.965962134, 2512768.0540636806, 2841637.1127768415): (-6047846.118945, 1301436.00839, 1471751.331875, 5954945.214958) 50
    test 345 _plumbTo5(-11278979.719421394, 2944968.0190257896, -8900375.68960441): (-4887787.077129, 1281092.817319, -3871711.303552, 8300800.538821) 52
    test 346 _plumbTo5(1011851.3806381155, 2209652.929232276, 2820329.3992096297): (1740853.259956, 3783302.785673, 4828960.570021, -2653755.224409) 54
    test 347 _plumbTo5(6182785.533631105, 2933272.394561739, 4986824.719642618): (4645326.294171, 2207552.598922, 3753015.951804, 2100650.901597) 52
    test 348 _plumbTo5(-7339093.44831341, -8869884.353461422, 6212766.489166931): (-3566086.220548, -4324848.977048, 3029236.179916, 6710275.35527) 53
    test 349 _plumbTo5(-10971709.703048222, -8867146.225581247, -11213549.39343402): (-3867915.713106, -3139648.574335, -3970398.629913, 11650379.881346) 54
    test 350 _plumbTo5(-11070959.88040015, 3550785.91996143, -8372393.065371359): (-4911363.414846, 1581134.186413, -3728108.655222, 7961754.470737) 52
    test 351 _plumbTo5(-7088948.823545887, -9139355.380086193, -12659396.767741999): (-2626102.778519, -3400066.324073, -4709543.896808, 10772956.621076) 54
    test 352 _plumbTo5(3360109.515312039, 2053873.5304512163, 4102228.758705568): (3766412.597519, 2300357.120073, 4594545.793935, -684260.489683) 52
    test 353 _plumbTo5(4848287.407050526, -9835087.414893689, 6286414.601024293): (2438475.382355, -4963200.862483, 3172356.057088, 6264170.590669) 55
    test 354 _plumbTo5(-6872932.484997909, -10003501.997123381, 0.0): (-3600188.875256, -5256876.339697, 0.0, 5765527.371095) 50
    test 355 _plumbTo5(5112849.007745388, 4045059.83392944, -10759117.99355944): (2583660.185654, 2050897.892995, -5454953.588227, 6205452.278703) 54
    test 356 _plumbTo5(-8001405.7194597665, 4439289.815124409, 6375156.795654809): (-4561956.035088, 2538371.208642, 3645259.27325, 4784939.515044) 53
    test 357 _plumbTo5(-11992732.432946008, -9559608.832836054, -7873299.28572769): (-4420202.585454, -3538438.081182, -2914219.332246, 10871530.687845) 53
    test 358 _plumbTo5(-10751150.544392334, 1291694.1112246732, 1975904.8308005824): (-6209150.5928, 748121.481423, 1144391.061658, 4649370.91577) 50
    test 359 _plumbTo5(-6690072.857376991, -10700836.411847578, 2538319.9581198753): (-3303648.438244, -5302260.90829, 1257722.77359, 6500185.917582) 53
    test 360 _plumbTo5(-6976832.037003404, 5817243.933850868, 2043561.5345841122): (-4765947.206578, 3982304.075909, 1398948.914134, 2944578.313802) 52
    test 361 _plumbTo5(-12039207.942981701, 1425685.2610139837, -12067779.884399781): (-4472124.148891, 531837.027836, -4501697.563082, 10738031.640096) 53
    test 362 _plumbTo5(5777079.929097216, -6723851.841784553, -9376218.777796984): (2845996.786857, -3323747.366033, -4634819.044256, 6529382.073824) 53
    test 363 _plumbTo5(0.0, 4890350.486356439, -8937356.594344052): (0.0, 3061740.118564, -5595435.077897, 3809495.412688) 52
    test 364 _plumbTo5(-10494546.412567353, -11512137.230261141, -7341713.8400544785): (-3871771.572111, -4265288.483171, -2720093.948832, 10850683.562316) 53
    test 365 _plumbTo5(-11276918.475983083, -6577544.116433148, -8581465.68103013): (-4587181.909442, -2686301.420586, -3504667.350809, 9255713.1726) 53
    test 366 _plumbTo5(-6729631.770624401, 3936650.9700686857, 3503276.376048897): (-5008125.868947, 2934663.803067, 2611580.506972, 2182357.068693) 52
    test 367 _plumbTo5(-11654689.244247772, 1344006.964287793, -7396214.713349296): (-5341640.293362, 618243.885481, -3402222.195207, 7505550.968304) 52
    test 368 _plumbTo5(2060801.58940408, 2733322.349735666, 6042977.847747766): (1891089.032305, 2509615.296316, 5548384.148507, 568744.340733) 53
    test 369 _plumbTo5(-9010630.24882582, -9776269.187664231, 4379276.81815124): (-4091258.715054, -4455247.444694, 1995702.89992, 7628559.057916) 53
    test 370 _plumbTo5(-10561759.629771382, -9331115.550962409, -7638283.833453537): (-4186742.218356, -3713978.28376, -3040155.841713, 9661048.550901) 53
    test 371 _plumbTo5(-8776509.078983363, 0.0, -9793376.07366478): (-4242267.535474, 0.0, -4750231.438359, 6781788.421022) 48
    test 372 _plumbTo5(5479244.919179172, -10883721.628400905, -9124208.682167994): (2287013.404569, -4560681.499879, -3823331.809475, 8847060.196993) 53
    test 373 _plumbTo5(0.0, 655213.2542895417, 5182473.673502702): (0.0, 800029.976023, 6327946.475358, -1154590.75983) 51
    test 374 _plumbTo5(-10782359.478908053, -11670093.413038826, 4327578.7184195295): (-4160474.556633, -4521683.538503, 1676737.081147, 10098320.902215) 52
    test 375 _plumbTo5(1605121.6012298902, -6471478.679347946, 6037084.049507458): (1135958.370852, -4588938.320434, 4280880.896281, 2616929.852915) 54
    test 376 _plumbTo5(3761270.833133955, 3744696.231807551, -7469660.773091767): (2612184.857355, 2606026.150671, -5198285.838004, 2788568.132421) 53
    test 377 _plumbTo5(1379141.9461064397, -7968573.967737127, 2940102.58165369): (1020458.57958, -5906456.541789, 2179246.821237, 2227079.59534) 54
    test 378 _plumbTo5(743933.9018273794, -9909792.502238376, 1222337.6122713035): (472750.461599, -6312883.226739, 778665.459677, 3634300.726882) 55
    test 379 _plumbTo5(-10757301.434253922, 4236679.02840677, -9729755.594783239): (-4524264.405544, 1788814.071606, -4108053.237323, 8743359.242526) 53
    test 380 _plumbTo5(-6809847.752797458, -9754800.135360297, -10671016.088451233): (-2707255.418549, -3893791.567104, -4259458.309591, 9606807.921983) 54
    test 381 _plumbTo5(2627479.766583384, -9181726.604509372, -10297833.956715304): (1188890.576805, -4169926.026392, -4676755.604696, 7667085.869566) 54
    test 382 _plumbTo5(-12433413.767147074, 1928927.250077548, 4941105.248444344): (-5846884.60408, 910331.133649, 2331860.782812, 7157378.091576) 50
    test 383 _plumbTo5(-10714421.598536914, -7244538.839542539, 2283714.4466758315): (-5185714.91389, -3518518.278063, 1109138.965283, 6769745.518918) 52
    test 384 _plumbTo5(2320343.2347996067, -9244814.811211184, -6851627.906052139): (1256899.733928, -5023273.015543, -3722870.961961, 5361105.037893) 55
    test 385 _plumbTo5(4350340.569895932, 0.0, -7852901.549357869): (3083808.71174, 0.0, -5577536.196472, 2604110.296596) 53
    test 386 _plumbTo5(-12581581.542916087, 4434184.276134281, -12465609.625360737): (-4378237.758771, 1549835.676638, -4356916.512519, 11889710.681196) 52
    test 387 _plumbTo5(6071653.594655326, -11168208.015524104, -9672466.416171042): (2414910.632027, -4460047.918349, -3862669.364942, 9598172.886572) 54
    test 388 _plumbTo5(4232451.1975067705, 5746760.464525781, -11738998.4356923): (1957970.198501, 2668142.563686, -5450192.90137, 7362080.347479) 54
    test 389 _plumbTo5(5364714.33244359, -11263209.268789751, 0.0): (2733738.740789, -5758465.526779, 0.0, 6101166.792433) 54
    test 390 _plumbTo5(5548173.676095267, -7384447.983930997, -8919689.475663401): (2746701.859255, -3668227.29051, -4430810.131162, 6465955.331755) 51
    test 391 _plumbTo5(0.0, 5156137.163199022, -7069794.0745797325): (0.0, 3758469.764231, -5153363.522412, 2371957.044177) 52
    test 392 _plumbTo5(4243486.831207436, -6396152.887826327, -7226523.474163949): (2560282.409604, -3869398.69425, -4371699.446014, 4167455.352054) 54
    test 393 _plumbTo5(4737677.629176356, -7044026.780840377, -9363628.137678899): (2382936.682218, -3554852.177628, -4725415.307567, 6263558.301508) 48

    test 394 _plumbTo5: (0.545455, 1.090909, 0.818182, 3.916483)
    test 395 _plumbTo5: None
    test 396 _plumbTo5: 0

    test 397 _plumbTo5: (1.090909, 0.545455, 0.818182, 3.916483)
    test 398 _plumbTo5: None
    test 399 _plumbTo5: 0

    test 400 _plumbTo5: (0.742781, 1.114172, 1.485563, 3.385165)
    test 401 _plumbTo5: None
    test 402 _plumbTo5: 0

    test 403 toTriaxial: name='WGS84', a=6378137, b=6378137, c=6356752.314245179, e2ab=0, e2bc=0.00669438, e2ac=0.00669438, volume=1083207319801408126976, area=510065621724088.4375, area_p=510065626589516.8125
    test 404 toEllipsoid: name='_', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518
    test 405 toEllipsoid: name='', a=2, f=-0.5, f_=-2, b=3

    test 406 Triaxials: 12
    test 407 Amalthea: name='Amalthea', a=125000, b=73000, c=64000, e2ab=0.658944, e2bc=0.231375493, e2ac=0.737856, volume=2446253479595252, area=93239507787.490371704, area_p=93212299402.670425415
    test 408 Ariel: name='Ariel', a=581100, b=577900, c=577700, e2ab=0.01098327, e2bc=0.000692042, e2ac=0.011667711, volume=812633172614203904, area=4211301462766.580078125, area_p=4211301574065.830078125
    test 409 Earth: name='Earth', a=6378173.435, b=6378103.9, c=6356754.399999999, e2ab=0.000021804, e2bc=0.006683418, e2ac=0.006705077, volume=1083208241574987694080, area=510065911057441.0625, area_p=510065915922713.6875
    test 410 Enceladus: name='Enceladus', a=256600, b=251400, c=248300, e2ab=0.040119337, e2bc=0.024509841, e2ac=0.06364586, volume=67094551514082248, area=798618496278.596679688, area_p=798619018175.109985352
    test 411 Europa: name='Europa', a=1564130, b=1561230, c=1560930, e2ab=0.003704694, e2bc=0.000384275, e2ac=0.004087546, volume=15966575194402123776, area=30663773697323.51953125, area_p=30663773794562.45703125
    test 412 Io: name='Io', a=1829400, b=1819300, c=1815700, e2ab=0.011011391, e2bc=0.003953651, e2ac=0.014921506, volume=25313121117889765376, area=41691875849096.7421875, area_p=41691877397441.203125
    test 413 Mars: name='Mars', a=3394600, b=3393300, c=3376300, e2ab=0.000765776, e2bc=0.009994646, e2ac=0.010752768, volume=162907283585817247744, area=144249140795107.4375, area_p=144249144150662.15625
    test 414 Mimas: name='Mimas', a=207400, b=196800, c=190600, e2ab=0.09960581, e2bc=0.062015624, e2ac=0.155444317, volume=32587072869017956, area=493855762247.691894531, area_p=493857714107.9375
    test 415 Miranda: name='Miranda', a=240400, b=234200, c=232900, e2ab=0.050915557, e2bc=0.011070811, e2ac=0.061422691, volume=54926187094835456, area=698880863325.756958008, area_p=698881306767.950317383
    test 416 Moon: name='Moon', a=1735550, b=1735324, c=1734898, e2ab=0.000260419, e2bc=0.000490914, e2ac=0.000751206, volume=21886698675223740416, area=37838824729886.09375, area_p=37838824733332.21875
    test 417 Tethys: name='Tethys', a=535600, b=528200, c=525800, e2ab=0.027441672, e2bc=0.009066821, e2ac=0.036259685, volume=623086233855821440, area=3528073490771.394042969, area_p=3528074261832.738769531
    test 418 WGS84_35: name='WGS84_35', a=6378172, b=6378102, c=6356752.314245179, e2ab=0.00002195, e2bc=0.006683478, e2ac=0.006705281, volume=1083207319768789942272, area=510065621722018.125, area_p=510065626587483.3125

    15 of 418 testTriaxials.py tests (3.6%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 65.467 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testUnits.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Band from .units by testUnits.py line 11
# lazily imported pygeodesy.Bearing from .units by testUnits.py line 11
# lazily imported pygeodesy.Bearing_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Bool from .units by testUnits.py line 11
# lazily imported pygeodesy.Epoch from .units by testUnits.py line 11
# lazily imported pygeodesy.Epsg from .epsg by testUnits.py line 11
# lazily imported pygeodesy.FIx from .units by testUnits.py line 11
# lazily imported pygeodesy.Garef from .gars by testUnits.py line 11
# lazily imported pygeodesy.Geohash from .geohash by testUnits.py line 11
# lazily imported pygeodesy.Georef from .wgrs by testUnits.py line 11
# lazily imported pygeodesy.Int from .unitsBase by testUnits.py line 11
# lazily imported pygeodesy.Int_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Number_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Precision_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Lamd from .units by testUnits.py line 11
# lazily imported pygeodesy.Phid from .units by testUnits.py line 11
# lazily imported pygeodesy.Str from .unitsBase by testUnits.py line 11
# lazily imported pygeodesy.Zone from .units by testUnits.py line 11
# lazily imported pygeodesy.Float from .unitsBase by testUnits.py line 11

    testing testUnits.py 23.06.15 isLazy=3
# lazily imported pygeodesy.albers by bases.py line 200
# lazily imported pygeodesy.azimuthal by bases.py line 200
# lazily imported pygeodesy.booleans by bases.py line 200
# lazily imported pygeodesy.clipy by bases.py line 200
# lazily imported pygeodesy.css by bases.py line 200
# lazily imported pygeodesy.ecef by bases.py line 200
# lazily imported pygeodesy.elevations by bases.py line 200
# lazily imported pygeodesy.ellipsoidalBaseDI by bases.py line 200
# lazily imported pygeodesy.ellipsoidalExact by bases.py line 200
# lazily imported pygeodesy.ellipsoidalGeodSolve by bases.py line 200
# lazily imported pygeodesy.ellipsoidalKarney by bases.py line 200
# lazily imported pygeodesy.ellipsoidalNvector by bases.py line 200
# lazily imported pygeodesy.ellipsoidalVincenty by bases.py line 200
# lazily imported pygeodesy.elliptic by bases.py line 200
# lazily imported pygeodesy.etm by bases.py line 200
# lazily imported pygeodesy.frechet by bases.py line 200
# lazily imported pygeodesy.fstats by bases.py line 200
# lazily imported pygeodesy.geodesici by bases.py line 200
# lazily imported pygeodesy.geodesicw by bases.py line 200
# lazily imported pygeodesy.geodsolve by bases.py line 200
# lazily imported pygeodesy.geoids by bases.py line 200
# lazily imported pygeodesy.hausdorff by bases.py line 200

    testing _Lat(1.0,) (pygeodesy.units, 24.06.15)
    test 1 .classname: _Lat
    test 2 isinstance: True
    test 3 .name: _lat
    test 4 .named: _lat
    test 5 .named2: _Lat '_lat'
    test 6 .str: 1.0
    test 7 .toStr: 1.0
    test 8 .std_repr: True
    test 9 .repr: 1.0
    test 10 .toRepr: _lat (1.0)
    test 11 .units: _lat
    test 12 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 13 _lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 14 _lat: TypeError
    test 15 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 16 .named: Test
    test 17 .named2: _Lat 'Test'
    test 18 .str: 1.0
    test 19 .toStr: 1.0
    test 20 .repr: 1.0
    test 21 .toRepr: Test (1.0)
    test 22 .units: _lat
    test 23 .name: Test
    test 24 ._name: Test
    test 25 .str: 1.0
    test 26 .repr: 1.0
    test 27 delattr: ''

    testing _Lon(1.0,) (pygeodesy.units, 24.06.15)
    test 28 .classname: _Lon
    test 29 isinstance: True
    test 30 .name: _lon
    test 31 .named: _lon
    test 32 .named2: _Lon '_lon'
    test 33 .str: 1.0
    test 34 .toStr: 1.0
    test 35 .std_repr: True
    test 36 .repr: 1.0
    test 37 .toRepr: _lon (1.0)
    test 38 .units: _lon
    test 39 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 40 _lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 41 _lon: TypeError
    test 42 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 43 .named: Test
    test 44 .named2: _Lon 'Test'
    test 45 .str: 1.0
    test 46 .toStr: 1.0
    test 47 .repr: 1.0
    test 48 .toRepr: Test (1.0)
    test 49 .units: _lon
    test 50 .name: Test
    test 51 ._name: Test
    test 52 .str: 1.0
    test 53 .repr: 1.0
    test 54 delattr: ''
# lazily imported pygeodesy.ktm by bases.py line 200
# lazily imported pygeodesy.lcc by bases.py line 200
# lazily imported pygeodesy.ltp by bases.py line 200
# lazily imported pygeodesy.mgrs by bases.py line 200
# lazily imported pygeodesy.osgr by bases.py line 200
# lazily imported pygeodesy.resections by bases.py line 200
# lazily imported pygeodesy.simplify by bases.py line 200
# lazily imported pygeodesy.sphericalBase by bases.py line 200
# lazily imported pygeodesy.sphericalNvector by bases.py line 200
# lazily imported pygeodesy.sphericalTrigonometry by bases.py line 200
# lazily imported pygeodesy.trf by bases.py line 200
# lazily imported pygeodesy.triaxials by bases.py line 200

    testing Bearing(1.0,) (pygeodesy.units, 24.06.15)
    test 55 .classname: Bearing
    test 56 isinstance: True
    test 57 .name: bearing
    test 58 .named: bearing
    test 59 .named2: Bearing 'bearing'
    test 60 .str: 1.0
    test 61 .toStr: 1.0
    test 62 .std_repr: True
    test 63 .repr: 1.0
    test 64 .toRepr: bearing (1.0)
    test 65 .units: bearing
    test 66 bearing: bearing ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: 'X'
    test 67 bearing: U ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: 'X'
    test 68 bearing: TypeError
    test 69 bearing: bearing ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 70 .named: Test
    test 71 .named2: Bearing 'Test'
    test 72 .str: 1.0
    test 73 .toStr: 1.0
    test 74 .repr: 1.0
    test 75 .toRepr: Test (1.0)
    test 76 .units: bearing
    test 77 .name: Test
    test 78 ._name: Test
    test 79 .str: 1.0
    test 80 .repr: 1.0
    test 81 delattr: ''

    testing Degrees(1.0,) (pygeodesy.units, 24.06.15)
    test 82 .classname: Degrees
    test 83 isinstance: True
    test 84 .name: degrees
    test 85 .named: degrees
    test 86 .named2: Degrees 'degrees'
    test 87 .str: 1.0
    test 88 .toStr: 1.0
    test 89 .std_repr: True
    test 90 .repr: 1.0
    test 91 .toRepr: degrees (1.0)
    test 92 .units: degrees
    test 93 degrees: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 94 degrees: U ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 95 degrees: TypeError
    test 96 degrees: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 97 .named: Test
    test 98 .named2: Degrees 'Test'
    test 99 .str: 1.0
    test 100 .toStr: 1.0
    test 101 .repr: 1.0
    test 102 .toRepr: Test (1.0)
    test 103 .units: degrees
    test 104 .name: Test
    test 105 ._name: Test
    test 106 .str: 1.0
    test 107 .repr: 1.0
    test 108 delattr: ''

    testing Degrees2(1.0,) (pygeodesy.units, 24.06.15)
    test 109 .classname: Degrees2
    test 110 isinstance: True
    test 111 .name: degrees2
    test 112 .named: degrees2
    test 113 .named2: Degrees2 'degrees2'
    test 114 .str: 1.0
    test 115 .toStr: 1.0
    test 116 .std_repr: True
    test 117 .repr: 1.0
    test 118 .toRepr: degrees2 (1.0)
    test 119 .units: degrees2
    test 120 degrees2: degrees2 ('X'): could not convert string to float: 'X'
    test 121 degrees2: U ('X'): could not convert string to float: 'X'
    test 122 degrees2: TypeError
    test 123 degrees2: degrees2 ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 124 .named: Test
    test 125 .named2: Degrees2 'Test'
    test 126 .str: 1.0
    test 127 .toStr: 1.0
    test 128 .repr: 1.0
    test 129 .toRepr: Test (1.0)
    test 130 .units: degrees2
    test 131 .name: Test
    test 132 ._name: Test
    test 133 .str: 1.0
    test 134 .repr: 1.0
    test 135 delattr: ''

    testing Degrees_(1.0,) (pygeodesy.units, 24.06.15)
    test 136 .classname: Degrees_
    test 137 isinstance: True
    test 138 .name: degrees_
    test 139 .named: degrees_
    test 140 .named2: Degrees_ 'degrees_'
    test 141 .str: 1.0
    test 142 .toStr: 1.0
    test 143 .std_repr: True
    test 144 .repr: 1.0
    test 145 .toRepr: degrees_ (1.0)
    test 146 .units: degrees_
    test 147 degrees_: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 148 degrees_: U ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 149 degrees_: TypeError
    test 150 degrees_: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 151 .named: Test
    test 152 .named2: Degrees_ 'Test'
    test 153 .str: 1.0
    test 154 .toStr: 1.0
    test 155 .repr: 1.0
    test 156 .toRepr: Test (1.0)
    test 157 .units: degrees_
    test 158 .name: Test
    test 159 ._name: Test
    test 160 .str: 1.0
    test 161 .repr: 1.0
    test 162 delattr: ''

    testing Distance(1.0,) (pygeodesy.units, 24.06.15)
    test 163 .classname: Distance
    test 164 isinstance: True
    test 165 .name: distance
    test 166 .named: distance
    test 167 .named2: Distance 'distance'
    test 168 .str: 1.0
    test 169 .toStr: 1.0
    test 170 .std_repr: True
    test 171 .repr: 1.0
    test 172 .toRepr: distance (1.0)
    test 173 .units: distance
    test 174 distance: distance ('X'): could not convert string to float: 'X'
    test 175 distance: U ('X'): could not convert string to float: 'X'
    test 176 distance: TypeError
    test 177 distance: distance ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 178 .named: Test
    test 179 .named2: Distance 'Test'
    test 180 .str: 1.0
    test 181 .toStr: 1.0
    test 182 .repr: 1.0
    test 183 .toRepr: Test (1.0)
    test 184 .units: distance
    test 185 .name: Test
    test 186 ._name: Test
    test 187 .str: 1.0
    test 188 .repr: 1.0
    test 189 delattr: ''

    testing Distance_(1.0,) (pygeodesy.units, 24.06.15)
    test 190 .classname: Distance_
    test 191 isinstance: True
    test 192 .name: distance_
    test 193 .named: distance_
    test 194 .named2: Distance_ 'distance_'
    test 195 .str: 1.0
    test 196 .toStr: 1.0
    test 197 .std_repr: True
    test 198 .repr: 1.0
    test 199 .toRepr: distance_ (1.0)
    test 200 .units: distance_
    test 201 distance_: distance ('X'): could not convert string to float: 'X'
    test 202 distance_: U ('X'): could not convert string to float: 'X'
    test 203 distance_: TypeError
    test 204 distance_: distance ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 205 .named: Test
    test 206 .named2: Distance_ 'Test'
    test 207 .str: 1.0
    test 208 .toStr: 1.0
    test 209 .repr: 1.0
    test 210 .toRepr: Test (1.0)
    test 211 .units: distance_
    test 212 .name: Test
    test 213 ._name: Test
    test 214 .str: 1.0
    test 215 .repr: 1.0
    test 216 delattr: ''

    testing Easting(1.0,) (pygeodesy.units, 24.06.15)
    test 217 .classname: Easting
    test 218 isinstance: True
    test 219 .name: easting
    test 220 .named: easting
    test 221 .named2: Easting 'easting'
    test 222 .str: 1.0
    test 223 .toStr: 1.0
    test 224 .std_repr: True
    test 225 .repr: 1.0
    test 226 .toRepr: easting (1.0)
    test 227 .units: easting
    test 228 easting: easting ('X'): could not convert string to float: 'X'
    test 229 easting: U ('X'): could not convert string to float: 'X'
    test 230 easting: TypeError
    test 231 easting: easting ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 232 .named: Test
    test 233 .named2: Easting 'Test'
    test 234 .str: 1.0
    test 235 .toStr: 1.0
    test 236 .repr: 1.0
    test 237 .toRepr: Test (1.0)
    test 238 .units: easting
    test 239 .name: Test
    test 240 ._name: Test
    test 241 .str: 1.0
    test 242 .repr: 1.0
    test 243 delattr: ''

    testing Feet(1.0,) (pygeodesy.units, 24.06.15)
    test 244 .classname: Feet
    test 245 isinstance: True
    test 246 .name: feet
    test 247 .named: feet
    test 248 .named2: Feet 'feet'
    test 249 .str: 1.0
    test 250 .toStr: 1.0
    test 251 .std_repr: True
    test 252 .repr: 1.0
    test 253 .toRepr: feet (1.0)
    test 254 .units: feet
    test 255 feet: feet ('X'): could not convert string to float: 'X'
    test 256 feet: U ('X'): could not convert string to float: 'X'
    test 257 feet: TypeError
    test 258 feet: feet ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 259 .named: Test
    test 260 .named2: Feet 'Test'
    test 261 .str: 1.0
    test 262 .toStr: 1.0
    test 263 .repr: 1.0
    test 264 .toRepr: Test (1.0)
    test 265 .units: feet
    test 266 .name: Test
    test 267 ._name: Test
    test 268 .str: 1.0
    test 269 .repr: 1.0
    test 270 delattr: ''

    testing Float_(1.0,) (pygeodesy.units, 24.06.15)
    test 271 .classname: Float_
    test 272 isinstance: True
    test 273 .name: float_
    test 274 .named: float_
    test 275 .named2: Float_ 'float_'
    test 276 .str: 1.0
    test 277 .toStr: 1.0
    test 278 .std_repr: True
    test 279 .repr: 1.0
    test 280 .toRepr: float_ (1.0)
    test 281 .units: float_
    test 282 float_: Float_ ('X'): could not convert string to float: 'X'
    test 283 float_: U ('X'): could not convert string to float: 'X'
    test 284 float_: TypeError
    test 285 float_: Float_ ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 286 .named: Test
    test 287 .named2: Float_ 'Test'
    test 288 .str: 1.0
    test 289 .toStr: 1.0
    test 290 .repr: 1.0
    test 291 .toRepr: Test (1.0)
    test 292 .units: float_
    test 293 .name: Test
    test 294 ._name: Test
    test 295 .str: 1.0
    test 296 .repr: 1.0
    test 297 delattr: ''

    testing Height(1.0,) (pygeodesy.units, 24.06.15)
    test 298 .classname: Height
    test 299 isinstance: True
    test 300 .name: height
    test 301 .named: height
    test 302 .named2: Height 'height'
    test 303 .str: 1.0
    test 304 .toStr: 1.0
    test 305 .std_repr: True
    test 306 .repr: 1.0
    test 307 .toRepr: height (1.0)
    test 308 .units: height
    test 309 height: height ('X'): could not convert string to float: 'X'
    test 310 height: U ('X'): could not convert string to float: 'X'
    test 311 height: TypeError
    test 312 height: height ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 313 .named: Test
    test 314 .named2: Height 'Test'
    test 315 .str: 1.0
    test 316 .toStr: 1.0
    test 317 .repr: 1.0
    test 318 .toRepr: Test (1.0)
    test 319 .units: height
    test 320 .name: Test
    test 321 ._name: Test
    test 322 .str: 1.0
    test 323 .repr: 1.0
    test 324 delattr: ''

    testing HeightX(1.0,) (pygeodesy.units, 24.06.15)
    test 325 .classname: HeightX
    test 326 isinstance: True
    test 327 .name: heightx
    test 328 .named: heightx
    test 329 .named2: HeightX 'heightx'
    test 330 .str: 1.0
    test 331 .toStr: 1.0
    test 332 .std_repr: True
    test 333 .repr: 1.0
    test 334 .toRepr: heightx (1.0)
    test 335 .units: heightx
    test 336 heightx: height ('X'): could not convert string to float: 'X'
    test 337 heightx: U ('X'): could not convert string to float: 'X'
    test 338 heightx: TypeError
    test 339 heightx: height ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 340 .named: Test
    test 341 .named2: HeightX 'Test'
    test 342 .str: 1.0
    test 343 .toStr: 1.0
    test 344 .repr: 1.0
    test 345 .toRepr: Test (1.0)
    test 346 .units: heightx
    test 347 .name: Test
    test 348 ._name: Test
    test 349 .str: 1.0
    test 350 .repr: 1.0
    test 351 delattr: ''

    testing Height_(1.0,) (pygeodesy.units, 24.06.15)
    test 352 .classname: Height_
    test 353 isinstance: True
    test 354 .name: height_
    test 355 .named: height_
    test 356 .named2: Height_ 'height_'
    test 357 .str: 1.0
    test 358 .toStr: 1.0
    test 359 .std_repr: True
    test 360 .repr: 1.0
    test 361 .toRepr: height_ (1.0)
    test 362 .units: height_
    test 363 height_: height ('X'): could not convert string to float: 'X'
    test 364 height_: U ('X'): could not convert string to float: 'X'
    test 365 height_: TypeError
    test 366 height_: height ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 367 .named: Test
    test 368 .named2: Height_ 'Test'
    test 369 .str: 1.0
    test 370 .toStr: 1.0
    test 371 .repr: 1.0
    test 372 .toRepr: Test (1.0)
    test 373 .units: height_
    test 374 .name: Test
    test 375 ._name: Test
    test 376 .str: 1.0
    test 377 .repr: 1.0
    test 378 delattr: ''

    testing Lam(1.0,) (pygeodesy.units, 24.06.15)
    test 379 .classname: Lam
    test 380 isinstance: True
    test 381 .name: lam
    test 382 .named: lam
    test 383 .named2: Lam 'lam'
    test 384 .str: 1.0
    test 385 .toStr: 1.0
    test 386 .std_repr: True
    test 387 .repr: 1.0
    test 388 .toRepr: lam (1.0)
    test 389 .units: lam
    test 390 lam: lam ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 391 lam: U ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 392 lam: TypeError
    test 393 lam: lam ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 394 .named: Test
    test 395 .named2: Lam 'Test'
    test 396 .str: 1.0
    test 397 .toStr: 1.0
    test 398 .repr: 1.0
    test 399 .toRepr: Test (1.0)
    test 400 .units: lam
    test 401 .name: Test
    test 402 ._name: Test
    test 403 .str: 1.0
    test 404 .repr: 1.0
    test 405 delattr: ''

    testing Lat(1.0,) (pygeodesy.units, 24.06.15)
    test 406 .classname: Lat
    test 407 isinstance: True
    test 408 .name: lat
    test 409 .named: lat
    test 410 .named2: Lat 'lat'
    test 411 .str: 1.0
    test 412 .toStr: 1.0
    test 413 .std_repr: True
    test 414 .repr: 1.0
    test 415 .toRepr: lat (1.0)
    test 416 .units: lat
    test 417 lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 418 lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 419 lat: TypeError
    test 420 lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 421 .named: Test
    test 422 .named2: Lat 'Test'
    test 423 .str: 1.0
    test 424 .toStr: 1.0
    test 425 .repr: 1.0
    test 426 .toRepr: Test (1.0)
    test 427 .units: lat
    test 428 .name: Test
    test 429 ._name: Test
    test 430 .str: 1.0
    test 431 .repr: 1.0
    test 432 delattr: ''

    testing Lat_(1.0,) (pygeodesy.units, 24.06.15)
    test 433 .classname: Lat_
    test 434 isinstance: True
    test 435 .name: lat_
    test 436 .named: lat_
    test 437 .named2: Lat_ 'lat_'
    test 438 .str: 1.0
    test 439 .toStr: 1.0
    test 440 .std_repr: True
    test 441 .repr: 1.0
    test 442 .toRepr: lat_ (1.0)
    test 443 .units: lat_
    test 444 lat_: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 445 lat_: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 446 lat_: TypeError
    test 447 lat_: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 448 .named: Test
    test 449 .named2: Lat_ 'Test'
    test 450 .str: 1.0
    test 451 .toStr: 1.0
    test 452 .repr: 1.0
    test 453 .toRepr: Test (1.0)
    test 454 .units: lat_
    test 455 .name: Test
    test 456 ._name: Test
    test 457 .str: 1.0
    test 458 .repr: 1.0
    test 459 delattr: ''

    testing Lon(1.0,) (pygeodesy.units, 24.06.15)
    test 460 .classname: Lon
    test 461 isinstance: True
    test 462 .name: lon
    test 463 .named: lon
    test 464 .named2: Lon 'lon'
    test 465 .str: 1.0
    test 466 .toStr: 1.0
    test 467 .std_repr: True
    test 468 .repr: 1.0
    test 469 .toRepr: lon (1.0)
    test 470 .units: lon
    test 471 lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 472 lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 473 lon: TypeError
    test 474 lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 475 .named: Test
    test 476 .named2: Lon 'Test'
    test 477 .str: 1.0
    test 478 .toStr: 1.0
    test 479 .repr: 1.0
    test 480 .toRepr: Test (1.0)
    test 481 .units: lon
    test 482 .name: Test
    test 483 ._name: Test
    test 484 .str: 1.0
    test 485 .repr: 1.0
    test 486 delattr: ''

    testing Lon_(1.0,) (pygeodesy.units, 24.06.15)
    test 487 .classname: Lon_
    test 488 isinstance: True
    test 489 .name: lon_
    test 490 .named: lon_
    test 491 .named2: Lon_ 'lon_'
    test 492 .str: 1.0
    test 493 .toStr: 1.0
    test 494 .std_repr: True
    test 495 .repr: 1.0
    test 496 .toRepr: lon_ (1.0)
    test 497 .units: lon_
    test 498 lon_: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 499 lon_: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 500 lon_: TypeError
    test 501 lon_: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 502 .named: Test
    test 503 .named2: Lon_ 'Test'
    test 504 .str: 1.0
    test 505 .toStr: 1.0
    test 506 .repr: 1.0
    test 507 .toRepr: Test (1.0)
    test 508 .units: lon_
    test 509 .name: Test
    test 510 ._name: Test
    test 511 .str: 1.0
    test 512 .repr: 1.0
    test 513 delattr: ''

    testing Meter(1.0,) (pygeodesy.units, 24.06.15)
    test 514 .classname: Meter
    test 515 isinstance: True
    test 516 .name: meter
    test 517 .named: meter
    test 518 .named2: Meter 'meter'
    test 519 .str: 1.0
    test 520 .toStr: 1.0
    test 521 .std_repr: True
    test 522 .repr: 1.0
    test 523 .toRepr: meter (1.0)
    test 524 .units: meter
    test 525 meter: meter ('X'): could not convert string to float: 'X'
    test 526 meter: U ('X'): could not convert string to float: 'X'
    test 527 meter: TypeError
    test 528 meter: meter ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 529 .named: Test
    test 530 .named2: Meter 'Test'
    test 531 .str: 1.0
    test 532 .toStr: 1.0
    test 533 .repr: 1.0
    test 534 .toRepr: Test (1.0)
    test 535 .units: meter
    test 536 .name: Test
    test 537 ._name: Test
    test 538 .str: 1.0
    test 539 .repr: 1.0
    test 540 delattr: ''

    testing Meter2(1.0,) (pygeodesy.units, 24.06.15)
    test 541 .classname: Meter2
    test 542 isinstance: True
    test 543 .name: meter2
    test 544 .named: meter2
    test 545 .named2: Meter2 'meter2'
    test 546 .str: 1.0
    test 547 .toStr: 1.0
    test 548 .std_repr: True
    test 549 .repr: 1.0
    test 550 .toRepr: meter2 (1.0)
    test 551 .units: meter2
    test 552 meter2: meter2 ('X'): could not convert string to float: 'X'
    test 553 meter2: U ('X'): could not convert string to float: 'X'
    test 554 meter2: TypeError
    test 555 meter2: meter2 ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 556 .named: Test
    test 557 .named2: Meter2 'Test'
    test 558 .str: 1.0
    test 559 .toStr: 1.0
    test 560 .repr: 1.0
    test 561 .toRepr: Test (1.0)
    test 562 .units: meter2
    test 563 .name: Test
    test 564 ._name: Test
    test 565 .str: 1.0
    test 566 .repr: 1.0
    test 567 delattr: ''

    testing Meter3(1.0,) (pygeodesy.units, 24.06.15)
    test 568 .classname: Meter3
    test 569 isinstance: True
    test 570 .name: meter3
    test 571 .named: meter3
    test 572 .named2: Meter3 'meter3'
    test 573 .str: 1.0
    test 574 .toStr: 1.0
    test 575 .std_repr: True
    test 576 .repr: 1.0
    test 577 .toRepr: meter3 (1.0)
    test 578 .units: meter3
    test 579 meter3: meter3 ('X'): could not convert string to float: 'X'
    test 580 meter3: U ('X'): could not convert string to float: 'X'
    test 581 meter3: TypeError
    test 582 meter3: meter3 ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 583 .named: Test
    test 584 .named2: Meter3 'Test'
    test 585 .str: 1.0
    test 586 .toStr: 1.0
    test 587 .repr: 1.0
    test 588 .toRepr: Test (1.0)
    test 589 .units: meter3
    test 590 .name: Test
    test 591 ._name: Test
    test 592 .str: 1.0
    test 593 .repr: 1.0
    test 594 delattr: ''

    testing Meter_(1.0,) (pygeodesy.units, 24.06.15)
    test 595 .classname: Meter_
    test 596 isinstance: True
    test 597 .name: meter_
    test 598 .named: meter_
    test 599 .named2: Meter_ 'meter_'
    test 600 .str: 1.0
    test 601 .toStr: 1.0
    test 602 .std_repr: True
    test 603 .repr: 1.0
    test 604 .toRepr: meter_ (1.0)
    test 605 .units: meter_
    test 606 meter_: meter ('X'): could not convert string to float: 'X'
    test 607 meter_: U ('X'): could not convert string to float: 'X'
    test 608 meter_: TypeError
    test 609 meter_: meter ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 610 .named: Test
    test 611 .named2: Meter_ 'Test'
    test 612 .str: 1.0
    test 613 .toStr: 1.0
    test 614 .repr: 1.0
    test 615 .toRepr: Test (1.0)
    test 616 .units: meter_
    test 617 .name: Test
    test 618 ._name: Test
    test 619 .str: 1.0
    test 620 .repr: 1.0
    test 621 delattr: ''

    testing Northing(1.0,) (pygeodesy.units, 24.06.15)
    test 622 .classname: Northing
    test 623 isinstance: True
    test 624 .name: northing
    test 625 .named: northing
    test 626 .named2: Northing 'northing'
    test 627 .str: 1.0
    test 628 .toStr: 1.0
    test 629 .std_repr: True
    test 630 .repr: 1.0
    test 631 .toRepr: northing (1.0)
    test 632 .units: northing
    test 633 northing: northing ('X'): could not convert string to float: 'X'
    test 634 northing: U ('X'): could not convert string to float: 'X'
    test 635 northing: TypeError
    test 636 northing: northing ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 637 .named: Test
    test 638 .named2: Northing 'Test'
    test 639 .str: 1.0
    test 640 .toStr: 1.0
    test 641 .repr: 1.0
    test 642 .toRepr: Test (1.0)
    test 643 .units: northing
    test 644 .name: Test
    test 645 ._name: Test
    test 646 .str: 1.0
    test 647 .repr: 1.0
    test 648 delattr: ''

    testing Phi(1.0,) (pygeodesy.units, 24.06.15)
    test 649 .classname: Phi
    test 650 isinstance: True
    test 651 .name: phi
    test 652 .named: phi
    test 653 .named2: Phi 'phi'
    test 654 .str: 1.0
    test 655 .toStr: 1.0
    test 656 .std_repr: True
    test 657 .repr: 1.0
    test 658 .toRepr: phi (1.0)
    test 659 .units: phi
    test 660 phi: phi ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 661 phi: U ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 662 phi: TypeError
    test 663 phi: phi ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 664 .named: Test
    test 665 .named2: Phi 'Test'
    test 666 .str: 1.0
    test 667 .toStr: 1.0
    test 668 .repr: 1.0
    test 669 .toRepr: Test (1.0)
    test 670 .units: phi
    test 671 .name: Test
    test 672 ._name: Test
    test 673 .str: 1.0
    test 674 .repr: 1.0
    test 675 delattr: ''

    testing Radians(1.0,) (pygeodesy.units, 24.06.15)
    test 676 .classname: Radians
    test 677 isinstance: True
    test 678 .name: radians
    test 679 .named: radians
    test 680 .named2: Radians 'radians'
    test 681 .str: 1.0
    test 682 .toStr: 1.0
    test 683 .std_repr: True
    test 684 .repr: 1.0
    test 685 .toRepr: radians (1.0)
    test 686 .units: radians
    test 687 radians: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 688 radians: U ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 689 radians: TypeError
    test 690 radians: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 691 .named: Test
    test 692 .named2: Radians 'Test'
    test 693 .str: 1.0
    test 694 .toStr: 1.0
    test 695 .repr: 1.0
    test 696 .toRepr: Test (1.0)
    test 697 .units: radians
    test 698 .name: Test
    test 699 ._name: Test
    test 700 .str: 1.0
    test 701 .repr: 1.0
    test 702 delattr: ''

    testing Radians2(1.0,) (pygeodesy.units, 24.06.15)
    test 703 .classname: Radians2
    test 704 isinstance: True
    test 705 .name: radians2
    test 706 .named: radians2
    test 707 .named2: Radians2 'radians2'
    test 708 .str: 1.0
    test 709 .toStr: 1.0
    test 710 .std_repr: True
    test 711 .repr: 1.0
    test 712 .toRepr: radians2 (1.0)
    test 713 .units: radians2
    test 714 radians2: radians2 ('X'): could not convert string to float: 'X'
    test 715 radians2: U ('X'): could not convert string to float: 'X'
    test 716 radians2: TypeError
    test 717 radians2: radians2 ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 718 .named: Test
    test 719 .named2: Radians2 'Test'
    test 720 .str: 1.0
    test 721 .toStr: 1.0
    test 722 .repr: 1.0
    test 723 .toRepr: Test (1.0)
    test 724 .units: radians2
    test 725 .name: Test
    test 726 ._name: Test
    test 727 .str: 1.0
    test 728 .repr: 1.0
    test 729 delattr: ''

    testing Radians_(1.0,) (pygeodesy.units, 24.06.15)
    test 730 .classname: Radians_
    test 731 isinstance: True
    test 732 .name: radians_
    test 733 .named: radians_
    test 734 .named2: Radians_ 'radians_'
    test 735 .str: 1.0
    test 736 .toStr: 1.0
    test 737 .std_repr: True
    test 738 .repr: 1.0
    test 739 .toRepr: radians_ (1.0)
    test 740 .units: radians_
    test 741 radians_: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 742 radians_: U ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 743 radians_: TypeError
    test 744 radians_: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 745 .named: Test
    test 746 .named2: Radians_ 'Test'
    test 747 .str: 1.0
    test 748 .toStr: 1.0
    test 749 .repr: 1.0
    test 750 .toRepr: Test (1.0)
    test 751 .units: radians_
    test 752 .name: Test
    test 753 ._name: Test
    test 754 .str: 1.0
    test 755 .repr: 1.0
    test 756 delattr: ''

    testing Radius_(1.0,) (pygeodesy.units, 24.06.15)
    test 757 .classname: Radius_
    test 758 isinstance: True
    test 759 .name: radius_
    test 760 .named: radius_
    test 761 .named2: Radius_ 'radius_'
    test 762 .str: 1.0
    test 763 .toStr: 1.0
    test 764 .std_repr: True
    test 765 .repr: 1.0
    test 766 .toRepr: radius_ (1.0)
    test 767 .units: radius_
    test 768 radius_: radius ('X'): could not convert string to float: 'X'
    test 769 radius_: U ('X'): could not convert string to float: 'X'
    test 770 radius_: TypeError
    test 771 radius_: radius ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 772 .named: Test
    test 773 .named2: Radius_ 'Test'
    test 774 .str: 1.0
    test 775 .toStr: 1.0
    test 776 .repr: 1.0
    test 777 .toRepr: Test (1.0)
    test 778 .units: radius_
    test 779 .name: Test
    test 780 ._name: Test
    test 781 .str: 1.0
    test 782 .repr: 1.0
    test 783 delattr: ''

    testing Scalar(1.0,) (pygeodesy.units, 24.06.15)
    test 784 .classname: Scalar
    test 785 isinstance: True
    test 786 .name: scalar
    test 787 .named: scalar
    test 788 .named2: Scalar 'scalar'
    test 789 .str: 1.0
    test 790 .toStr: 1.0
    test 791 .std_repr: True
    test 792 .repr: 1.0
    test 793 .toRepr: scalar (1.0)
    test 794 .units: scalar
    test 795 scalar: scalar ('X'): could not convert string to float: 'X'
    test 796 scalar: U ('X'): could not convert string to float: 'X'
    test 797 scalar: TypeError
    test 798 scalar: scalar ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 799 .named: Test
    test 800 .named2: Scalar 'Test'
    test 801 .str: 1.0
    test 802 .toStr: 1.0
    test 803 .repr: 1.0
    test 804 .toRepr: Test (1.0)
    test 805 .units: scalar
    test 806 .name: Test
    test 807 ._name: Test
    test 808 .str: 1.0
    test 809 .repr: 1.0
    test 810 delattr: ''

    testing Scalar_(1.0,) (pygeodesy.units, 24.06.15)
    test 811 .classname: Scalar_
    test 812 isinstance: True
    test 813 .name: scalar_
    test 814 .named: scalar_
    test 815 .named2: Scalar_ 'scalar_'
    test 816 .str: 1.0
    test 817 .toStr: 1.0
    test 818 .std_repr: True
    test 819 .repr: 1.0
    test 820 .toRepr: scalar_ (1.0)
    test 821 .units: scalar_
    test 822 scalar_: scalar ('X'): could not convert string to float: 'X'
    test 823 scalar_: U ('X'): could not convert string to float: 'X'
    test 824 scalar_: TypeError
    test 825 scalar_: scalar ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 826 .named: Test
    test 827 .named2: Scalar_ 'Test'
    test 828 .str: 1.0
    test 829 .toStr: 1.0
    test 830 .repr: 1.0
    test 831 .toRepr: Test (1.0)
    test 832 .units: scalar_
    test 833 .name: Test
    test 834 ._name: Test
    test 835 .str: 1.0
    test 836 .repr: 1.0
    test 837 delattr: ''

    testing Float(1.0,) (pygeodesy.units, 24.06.15)
    test 838 .classname: Float
    test 839 isinstance: True
    test 840 .name: float
    test 841 .named: float
    test 842 .named2: Float 'float'
    test 843 .str: 1.0
    test 844 .toStr: 1.0
    test 845 .std_repr: True
    test 846 .repr: 1.0
    test 847 .toRepr: float (1.0)
    test 848 .units: float
    test 849 float: Float ('X'): could not convert string to float: 'X'
    test 850 float: U ('X'): could not convert string to float: 'X'
    test 851 float: TypeError
    test 852 float: Float ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 853 .named: Test
    test 854 .named2: Float 'Test'
    test 855 .str: 1.0
    test 856 .toStr: 1.0
    test 857 .repr: 1.0
    test 858 .toRepr: Test (1.0)
    test 859 .units: float
    test 860 .name: Test
    test 861 ._name: Test
    test 862 .str: 1.0
    test 863 .repr: 1.0
    test 864 delattr: ''

    testing Radius(1.0,) (pygeodesy.units, 24.06.15)
    test 865 .classname: Radius
    test 866 isinstance: True
    test 867 .name: radius
    test 868 .named: radius
    test 869 .named2: Radius 'radius'
    test 870 .str: 1.0
    test 871 .toStr: 1.0
    test 872 .std_repr: True
    test 873 .repr: 1.0
    test 874 .toRepr: radius (1.0)
    test 875 .units: radius
    test 876 radius: radius ('X'): could not convert string to float: 'X'
    test 877 radius: U ('X'): could not convert string to float: 'X'
    test 878 radius: TypeError
    test 879 radius: radius ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 880 .named: Test
    test 881 .named2: Radius 'Test'
    test 882 .str: 1.0
    test 883 .toStr: 1.0
    test 884 .repr: 1.0
    test 885 .toRepr: Test (1.0)
    test 886 .units: radius
    test 887 .name: Test
    test 888 ._name: Test
    test 889 .str: 1.0
    test 890 .repr: 1.0
    test 891 delattr: ''
# lazily imported pygeodesy.utmups by bases.py line 200
# lazily imported pygeodesy.vector2d by bases.py line 200
# lazily imported pygeodesy.webmercator by bases.py line 200
# lazily imported pygeodesy.auxilats by bases.py line 200
# lazily imported pygeodesy.geodesicx by bases.py line 200
# lazily imported pygeodesy.rhumb by bases.py line 200

    testing _Lat(1.0,) (pygeodesy.units, 24.06.15)
    test 892 .classname: _Lat
    test 893 isinstance: True
    test 894 .name: _lat
    test 895 .named: _lat
    test 896 .named2: _Lat '_lat'
    test 897 .str: 1.0
    test 898 .toStr: 1.0
    test 899 .std_repr: True
    test 900 .repr: 1.0
    test 901 .toRepr: _lat (1.0)
    test 902 .units: _lat
    test 903 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 904 _lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 905 _lat: TypeError
    test 906 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 907 .named: Test
    test 908 .named2: _Lat 'Test'
    test 909 .str: 1.0
    test 910 .toStr: 1.0
    test 911 .repr: 1.0
    test 912 .toRepr: Test (1.0)
    test 913 .units: _lat
    test 914 .name: Test
    test 915 ._name: Test
    test 916 .str: 1.0
    test 917 .repr: 1.0
    test 918 delattr: ''

    testing _Lon(1.0,) (pygeodesy.units, 24.06.15)
    test 919 .classname: _Lon
    test 920 isinstance: True
    test 921 .name: _lon
    test 922 .named: _lon
    test 923 .named2: _Lon '_lon'
    test 924 .str: 1.0
    test 925 .toStr: 1.0
    test 926 .std_repr: True
    test 927 .repr: 1.0
    test 928 .toRepr: _lon (1.0)
    test 929 .units: _lon
    test 930 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 931 _lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 932 _lon: TypeError
    test 933 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 934 .named: Test
    test 935 .named2: _Lon 'Test'
    test 936 .str: 1.0
    test 937 .toStr: 1.0
    test 938 .repr: 1.0
    test 939 .toRepr: Test (1.0)
    test 940 .units: _lon
    test 941 .name: Test
    test 942 ._name: Test
    test 943 .str: 1.0
    test 944 .repr: 1.0
    test 945 delattr: ''

    testing Band('U',) (pygeodesy.units, 24.06.15)
    test 946 .classname: Band
    test 947 isinstance: True
    test 948 .name: band
    test 949 .named: band
    test 950 .named2: Band 'band'
    test 951 .str: U
    test 952 .toStr: U
    test 953 .std_repr: True
    test 954 .repr: 'U'
    test 955 .toRepr: band ('U')
    test 956 .units: band
    test 957 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 958 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 959 Error: X  FAILED, KNOWN, expected <class 'TypeError'>
    test 960 .named: Test
    test 961 .named2: Band 'Test'
    test 962 .str: U
    test 963 .toStr: U
    test 964 .repr: 'U'
    test 965 .toRepr: Test ('U')
    test 966 .units: band
    test 967 .name: Test
    test 968 ._name: Test
    test 969 .str: U
    test 970 .repr: 'U'
    test 971 delattr: ''

    testing Str('U',) (pygeodesy.units, 24.06.15)
    test 972 .classname: Str
    test 973 isinstance: True
    test 974 .name: str
    test 975 .named: str
    test 976 .named2: Str 'str'
    test 977 .str: U
    test 978 .toStr: U
    test 979 .std_repr: True
    test 980 .repr: 'U'
    test 981 .toRepr: str ('U')
    test 982 .units: str
    test 983 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 984 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 985 Error: X  FAILED, KNOWN, expected <class 'TypeError'>
    test 986 .named: Test
    test 987 .named2: Str 'Test'
    test 988 .str: U
    test 989 .toStr: U
    test 990 .repr: 'U'
    test 991 .toRepr: Test ('U')
    test 992 .units: str
    test 993 .name: Test
    test 994 ._name: Test
    test 995 .str: U
    test 996 .repr: 'U'
    test 997 delattr: ''

    testing Bool(True,) (pygeodesy.units, 24.06.15)
    test 998 .classname: Bool
    test 999 isinstance: True
    test 1000 .name: bool
    test 1001 .named: bool
    test 1002 .named2: Bool 'bool'
    test 1003 .str: True
    test 1004 .toStr: True
    test 1005 .std_repr: True
    test 1006 .repr: True
    test 1007 .toRepr: bool (True)
    test 1008 .units: bool
    test 1009 error: True  FAILED, KNOWN, expected <class 'ValueError'>
    test 1010 error: True  FAILED, KNOWN, expected <class 'ValueError'>
    test 1011 Error: True  FAILED, KNOWN, expected <class 'TypeError'>
    test 1012 .named: Test
    test 1013 .named2: Bool 'Test'
    test 1014 .str: True
    test 1015 .toStr: True
    test 1016 .repr: True
    test 1017 .toRepr: Test (True)
    test 1018 .units: bool
    test 1019 .name: Test
    test 1020 ._name: Test
    test 1021 .str: True
    test 1022 .repr: True
    test 1023 delattr: ''

    testing Int(2,) (pygeodesy.units, 24.06.15)
    test 1024 .classname: Int
    test 1025 isinstance: True
    test 1026 .name: int
    test 1027 .named: int
    test 1028 .named2: Int 'int'
    test 1029 .str: 2
    test 1030 .toStr: 2
    test 1031 .std_repr: True
    test 1032 .repr: 2
    test 1033 .toRepr: int (2)
    test 1034 .units: int
    test 1035 int: Int ('X'): invalid literal for int() with base 10: 'X'
    test 1036 int: U ('X'): invalid literal for int() with base 10: 'X'
    test 1037 int: TypeError
    test 1038 int: Int ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1039 .named: Test
    test 1040 .named2: Int 'Test'
    test 1041 .str: 2
    test 1042 .toStr: 2
    test 1043 .repr: 2
    test 1044 .toRepr: Test (2)
    test 1045 .units: int
    test 1046 .name: Test
    test 1047 ._name: Test
    test 1048 .str: 2
    test 1049 .repr: 2
    test 1050 delattr: ''

    testing Int_(2,) (pygeodesy.units, 24.06.15)
    test 1051 .classname: Int_
    test 1052 isinstance: True
    test 1053 .name: int_
    test 1054 .named: int_
    test 1055 .named2: Int_ 'int_'
    test 1056 .str: 2
    test 1057 .toStr: 2
    test 1058 .std_repr: True
    test 1059 .repr: 2
    test 1060 .toRepr: int_ (2)
    test 1061 .units: int_
    test 1062 int_: Int_ ('X'): invalid literal for int() with base 10: 'X'
    test 1063 int_: U ('X'): invalid literal for int() with base 10: 'X'
    test 1064 int_: TypeError
    test 1065 int_: Int_ ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1066 .named: Test
    test 1067 .named2: Int_ 'Test'
    test 1068 .str: 2
    test 1069 .toStr: 2
    test 1070 .repr: 2
    test 1071 .toRepr: Test (2)
    test 1072 .units: int_
    test 1073 .name: Test
    test 1074 ._name: Test
    test 1075 .str: 2
    test 1076 .repr: 2
    test 1077 delattr: ''

    testing Number_(2,) (pygeodesy.units, 24.06.15)
    test 1078 .classname: Number_
    test 1079 isinstance: True
    test 1080 .name: number_
    test 1081 .named: number_
    test 1082 .named2: Number_ 'number_'
    test 1083 .str: 2
    test 1084 .toStr: 2
    test 1085 .std_repr: True
    test 1086 .repr: 2
    test 1087 .toRepr: number_ (2)
    test 1088 .units: number_
    test 1089 number_: number ('X'): invalid literal for int() with base 10: 'X'
    test 1090 number_: U ('X'): invalid literal for int() with base 10: 'X'
    test 1091 number_: TypeError
    test 1092 number_: number ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1093 .named: Test
    test 1094 .named2: Number_ 'Test'
    test 1095 .str: 2
    test 1096 .toStr: 2
    test 1097 .repr: 2
    test 1098 .toRepr: Test (2)
    test 1099 .units: number_
    test 1100 .name: Test
    test 1101 ._name: Test
    test 1102 .str: 2
    test 1103 .repr: 2
    test 1104 delattr: ''

    testing Precision_(2,) (pygeodesy.units, 24.06.15)
    test 1105 .classname: Precision_
    test 1106 isinstance: True
    test 1107 .name: precision_
    test 1108 .named: precision_
    test 1109 .named2: Precision_ 'precision_'
    test 1110 .str: 2
    test 1111 .toStr: 2
    test 1112 .std_repr: True
    test 1113 .repr: 2
    test 1114 .toRepr: precision_ (2)
    test 1115 .units: precision_
    test 1116 precision_: precision ('X'): invalid literal for int() with base 10: 'X'
    test 1117 precision_: U ('X'): invalid literal for int() with base 10: 'X'
    test 1118 precision_: TypeError
    test 1119 precision_: precision ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1120 .named: Test
    test 1121 .named2: Precision_ 'Test'
    test 1122 .str: 2
    test 1123 .toStr: 2
    test 1124 .repr: 2
    test 1125 .toRepr: Test (2)
    test 1126 .units: precision_
    test 1127 .name: Test
    test 1128 ._name: Test
    test 1129 .str: 2
    test 1130 .repr: 2
    test 1131 delattr: ''

    testing Zone(2,) (pygeodesy.units, 24.06.15)
    test 1132 .classname: Zone
    test 1133 isinstance: True
    test 1134 .name: zone
    test 1135 .named: zone
    test 1136 .named2: Zone 'zone'
    test 1137 .str: 2
    test 1138 .toStr: 2
    test 1139 .std_repr: True
    test 1140 .repr: 2
    test 1141 .toRepr: zone (2)
    test 1142 .units: zone
    test 1143 zone: zone ('X'): invalid literal for int() with base 10: 'X'
    test 1144 zone: U ('X'): invalid literal for int() with base 10: 'X'
    test 1145 zone: TypeError
    test 1146 zone: zone ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1147 .named: Test
    test 1148 .named2: Zone 'Test'
    test 1149 .str: 2
    test 1150 .toStr: 2
    test 1151 .repr: 2
    test 1152 .toRepr: Test (2)
    test 1153 .units: zone
    test 1154 .name: Test
    test 1155 ._name: Test
    test 1156 .str: 2
    test 1157 .repr: 2
    test 1158 delattr: ''

    testing Epoch(1901,) (pygeodesy.units, 24.06.15)
    test 1159 .classname: Epoch
    test 1160 isinstance: True
    test 1161 .name: epoch
    test 1162 .named: epoch
    test 1163 .named2: Epoch 'epoch'
    test 1164 .str: 1901
    test 1165 .toStr: 1901
    test 1166 .std_repr: False
    test 1167 .repr: epoch (1901)
    test 1168 .toRepr: epoch (1901)
    test 1169 .units: epoch
    test 1170 epoch: epoch ('X'): could not convert string to float: 'X'
    test 1171 epoch: U ('X'): could not convert string to float: 'X'
    test 1172 epoch: TypeError
    test 1173 epoch: epoch ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 1174 .named: Test
    test 1175 .named2: Epoch 'Test'
    test 1176 .str: 1901
    test 1177 .toStr: 1901
    test 1178 .repr: Test (1901)
    test 1179 .toRepr: Test (1901)
    test 1180 .units: epoch
    test 1181 .name: Test
    test 1182 ._name: Test
    test 1183 .str: 1901
    test 1184 .repr: Test (1901)
    test 1185 delattr: ''

    testing(pygeodesy.units, 24.06.15)

    test 1186 Bearing: 1.0
    test 1187 Bearing_: 0.01745

    test 1188 Lamd: 6.30
    test 1189 Phid: 6.30

    test 1190 FIx: 1.0  FAILED, KNOWN, expected 1
    test 1191 FIx: 1.5

    test 1192 Dash: -
    test 1193 Dash: -

    test 1194 Dash: '-'
    test 1195 Dash: Dash ('-')

    test 1196 Join_d: c-a-l-l
    test 1197 Join_d: c-a-l-l

    test 1198 Join_d: 'c-a-l-l'
    test 1199 Join_d: Join_d ('c-a-l-l')

    51 of 1199 testUnits.py tests (4.3%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 44.360 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testUps.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.degDMS from .dms by testUps.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testUps.py line 11
# lazily imported pygeodesy.parseUTMUPS5 from .utmups by testUps.py line 11
# lazily imported pygeodesy.RangeError from .errors by testUps.py line 11
# lazily imported pygeodesy.strs from .streprs by testUps.py line 11
# lazily imported pygeodesy.toUps8 from .ups by testUps.py line 11
# lazily imported pygeodesy.toUtmUps8 from .utmups by testUps.py line 11
# lazily imported pygeodesy.Ups from .ups by testUps.py line 11
# lazily imported pygeodesy.UtmUps from .utmups by testUps.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testUps.py line 195

    testing testUps.py 23.03.27 (module pygeodesy.ups 24.06.11) isLazy=3
    test 1 Ups: 00 N 448251.0 5411932.0001
    test 2 Ups: 00 N 448252 5411933
    test 3 Ups: 00 N 448251.795 5411932.678
    test 4 Ups: 00Z N 448251.8 5411932.7 n/a n/a
    test 5 Ups2: [Z:00, H:N, E:448252, N:5411933]
    test 6 UtmUps.toLatLon: 43.610051°N, 004.46308°E
    test 7 UtmUps.toLatLon: 43°36′36.18″N, 004°27′47.09″E
# lazily imported pygeodesy.mgrs by utmupsBase.py line 431
    test 8 UtmUps.toMgrs: 60T UP 60176 38249
    test 9 toUps: lat ('43.684097°'): inside UTM range [-79.5, 83.5]
    test 10 UtmUps.toUtm: 60 N 360177 4838249
    test 11 toUpsID1: 00 N 1530125.78 2426773.6 -132.24798917° 0.99647445
    test 12 toUtmUps8ID2: 38 N 467367.68 8100752.13 -57.37878422′ 0.99961302  FAILED, KNOWN, expected 38 N 3320416.75 632668.43 +44.0° 1.01619505
    test 13 toUtmUps8ID2: 00 N 3320416.75 632668.43 +44.0° 1.01619505
    test 14 toUpsID3: 00 S 2222979.47 1797474.9 -132.24786194° 0.99455723
    test 15 Ups.toLatLonID4: 84°17′14.04″N, 132°14′52.76″W
    test 16 Ups.toLatLonID4: 84.287234°N, 132.247989°W
    test 17 Ups.toLatLonID5: 73°00′00.0″N, 044°00′00.0″E
    test 18 Ups.toLatLonID5: 73.0°N, 044.0°E
    test 19 Ups.toLatLonID6: 87°17′14.4″S, 132°14′52.3″E
    test 20 Ups.toLatLonID6: 87.287333°S, 132.247861°E
    test 21 latlon: 84.0°N, 084.0°E
    test 22 toUps: 00 N 2663075 1930308
    test 23 toUps: 00 N 2663075.299562 1930307.977716 +84.0° 0.99673
    test 24 toUps(None): (0, 'N', 2663075.299562, 1930307.977716, 'Z', ...)
    test 25 .scale0: 0.994000
    test 26 rescale0: 0.997261
    test 27 NGA-10.2-1: 00 N 2000000.0 2000000.0 +0.0″ 0.994
    test 28 NGA-10.2-2: 00 N 1998062.320046 2111009.610243 -179.0° 0.994076
    test 29 NGA-10.2-3: 00 N 1777930.731071 2000000.0 -90.0° 0.994303
    test 30 NGA-10.2-4: 00 N 1994185.827038 1666906.254073 -1.0° 0.994682
    test 31 NGA-10.2-5: 00 N 2000000.0 1555731.570643 +0.0″ 0.995212
    test 32 NGA-10.2-6: 00 N 2009694.068153 1444627.207468 +1.0° 0.995895
    test 33 NGA-10.2-7: 00 N 2666626.157825 1988363.997132 +89.0° 0.996730
    test 34 NGA-10.2-8: 46 N 459200.256323 9217519.441609 -2.97767886° 0.997718
    test 35 NGA-10.2-9: 46 N 468930.934996 9105366.008486 -1.98055172° 0.998860
    test 36 NGA-10.2-10: 60 N 534921.971582 8993806.415149 +1.97539632° 1.000156
    test 37 NGA-10.2-11: 01 N 441867.784867 8883084.955948 -2.95450468° 1.001608
    test 38 NGA-10.2-12: 31 N 243900.35203 4432069.056899 -1.92940969° 1.0004075
    test 39 NGA-10.2-13: 01 N 277707.830749 331796.291679 -6.28291137′ 1.00021172
    test 40 NGA-10.2-14: 16 N 166223.907623 221366.16603 -6.28776606′ 1.00097936
    test 41 NGA-10.2-15: 30 N 722561.736479 110597.972524 +2.09515682′ 1.00021322
    test 42 NGA-10.2-16: 31 N 166021.443081 0.0 +0.0″ 1.00098106
    test 43 NGA-10.2-17: 31 S 277438.263521 9889402.027476 +2.09515682′ 1.00021322
    test 44 NGA-10.2-18: 46 S 166223.907623 9778633.83397 +6.28776606′ 1.00097936
    test 45 NGA-10.2-19: 60 S 722292.169251 9668203.708321 -6.28291137′ 1.00021172
    test 46 NGA-10.2-20: 01 S 166831.065275 9557263.747314 +12.56782777′ 1.00097428
    test 47 NGA-10.3-1: -64.9164123332 -135.0
    test 48 NGA-10.3-2: -70.0552944014 -153.4349488229
    test 49 NGA-10.3-3: -72.1263610163 180.0  FAILED, KNOWN, expected -72.1263610163 -180.0
    test 50 NGA-10.3-4: -70.0552944014 153.4349488229
    test 51 NGA-10.3-5: -64.9164123332 135.0
    test 52 NGA-10.3-6: -70.0552944014 -116.5650511771
    test 53 NGA-10.3-7: -77.3120791908 -135.0
    test 54 NGA-10.3-8: -81.0106632645 180.0
    test 55 NGA-10.3-9: -77.3120791908 135.0
    test 56 NGA-10.3-10: -70.0552944014 116.5650511771
    test 57 NGA-10.3-11: -72.1263610163 -90.0
    test 58 NGA-10.3-12: -81.0106632645 -90.0
    test 59 NGA-10.3-13: -90.0 0.0
    test 60 NGA-10.3-14: -81.0106632645 90.0
    test 61 NGA-10.3-15: -72.1263610163 90.0
    test 62 NGA-10.3-16: -70.0552944014 -63.4349488229
    test 63 NGA-10.3-17: -77.3120791908 -45.0
    test 64 NGA-10.3-18: -81.0106632645 0.0
    test 65 NGA-10.3-19: -77.3120791908 45.0
    test 66 NGA-10.3-20: -70.0552944014 63.4349488229
    test 67 NGA-10.3-21: -64.9164123332 -45.0
    test 68 NGA-10.3-22: -70.0552944014 -26.5650511771
    test 69 NGA-10.3-23: -72.1263610163 0.0
    test 70 NGA-10.3-24: -70.0552944014 26.5650511771
    test 71 NGA-10.3-25: -64.9164123332 45.0
    test 72 toUps: 00 N 2000000 1288738
    test 73 toUtm: 02 N 611555 10703765
    test 74 toUtm: [Z:00Z, H:N, E:2000000, N:2000000]

    2 of 74 testUps.py tests (2.7%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 15.791 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testUtily.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.EPS from .constants by testUtily.py line 11
# lazily imported pygeodesy.INF from .constants by testUtily.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testUtily.py line 11
# lazily imported pygeodesy.NINF from .constants by testUtily.py line 11
# lazily imported pygeodesy.PI from .constants by testUtily.py line 11
# lazily imported pygeodesy.PI2 from .constants by testUtily.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testUtily.py line 11
# lazily imported pygeodesy.PI3_2 from .constants by testUtily.py line 11
# lazily imported pygeodesy.acre2ha from .utily by testUtily.py line 11
# lazily imported pygeodesy.acre2m2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.atan1 from .utily by testUtily.py line 11
# lazily imported pygeodesy.atan2d from .utily by testUtily.py line 11
# lazily imported pygeodesy.chain2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.cot_ from .utily by testUtily.py line 11
# lazily imported pygeodesy.cotd_ from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees90 from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees180 from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees360 from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.fathom2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.ft2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.furlong2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.grades400 from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees2grades from .utily by testUtily.py line 11
# lazily imported pygeodesy.grades2degrees from .utily by testUtily.py line 11
# lazily imported pygeodesy.grades2radians from .utily by testUtily.py line 11
# lazily imported pygeodesy.isPoints2 from .iters by testUtily.py line 11
# lazily imported pygeodesy.map1 from .basics by testUtily.py line 11
# lazily imported pygeodesy.m2chain from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2degrees from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2fathom from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2ft from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2furlong from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2toise from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2yard from .utily by testUtily.py line 11
# lazily imported pygeodesy.radiansPI from .utily by testUtily.py line 11
# lazily imported pygeodesy.radiansPI2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.radiansPI_2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.sincos2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testUtily.py line 11
# lazily imported pygeodesy.sincostan3 from .utily by testUtily.py line 11
# lazily imported pygeodesy.tan_2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.unroll180 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrap90 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrap180 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrap360 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrapPI from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrapPI2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrapPI_2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.toise2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.yard2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.fstr from .streprs by testUtily.py line 11

    testing testUtily.py 23.10.21 (module pygeodesy.utily 24.06.15) isLazy=3

    test 1 degrees90(PI_2): 90.0
    test 2 degrees90(PI): 0.0
    test 3 degrees90(PI2): 0.0
    test 4 degrees90(-PI_2): -90.0
    test 5 degrees90(-PI): 0.0
    test 6 degrees90(-PI2): 0.0

    test 7 degrees180(PI_2): 90.0
    test 8 degrees180(PI): 180.0
    test 9 degrees180(PI2): 0.0
    test 10 degrees180(-PI_2): -90.0
    test 11 degrees180(-PI): -180.0
    test 12 degrees180(-PI2): 0.0

    test 13 degrees360(PI_2): 90.0
    test 14 degrees360(PI): 180.0
    test 15 degrees360(PI2): 0.0
    test 16 degrees360(-PI_2): 270.0
    test 17 degrees360(-PI): 180.0
    test 18 degrees360(-PI2): 0.0

    test 19 degrees2grades(90): 100.0
    test 20 degrees2grades(180): 200.0
    test 21 degrees2grades(360): 400.0
    test 22 degrees2grades(-90): -100.0
    test 23 degrees2grades(-180): -200.0
    test 24 degrees2grades(-360): -400.0

    test 25 grades400(PI_2): 100.0
    test 26 grades400(PI): 200.0
    test 27 grades400(PI2): 0.0
    test 28 grades400(-PI_2): 300.0
    test 29 grades400(-PI): 200.0
    test 30 grades400(-PI2): 0.0

    test 31 grades2degrees(100): 90.0
    test 32 grades2degrees(200): 180.0
    test 33 grades2degrees(400): 360.0
    test 34 grades2degrees(-100): -90.0
    test 35 grades2degrees(-200): -180.0
    test 36 grades2degrees(-400): -360.0

    test 37 grades2radians(100): 1.5707963267948966
    test 38 grades2radians(200): 3.141592653589793
    test 39 grades2radians(400): 6.283185307179586
    test 40 grades2radians(-100): -1.5707963267948966
    test 41 grades2radians(-200): -3.141592653589793
    test 42 grades2radians(-400): -6.283185307179586

    test 43 radiansPI_2(90): 1.5707963267948966
    test 44 radiansPI_2(180): 0.0
    test 45 radiansPI_2(360): 0.0
    test 46 radiansPI_2(-90): -1.5707963267948966
    test 47 radiansPI_2(-180): 0.0
    test 48 radiansPI_2(-360): 0.0

    test 49 radiansPI(90): 1.5707963267948966
    test 50 radiansPI(180): 3.141592653589793
    test 51 radiansPI(360): 0.0
    test 52 radiansPI(-90): -1.5707963267948966
    test 53 radiansPI(-180): -3.141592653589793
    test 54 radiansPI(-360): 0.0

    test 55 radiansPI2(90): 1.5707963267948966
    test 56 radiansPI2(180): 3.141592653589793
    test 57 radiansPI2(360): 0.0
    test 58 radiansPI2(-90): 4.71238898038469
    test 59 radiansPI2(-180): 3.141592653589793
    test 60 radiansPI2(-360): 0.0

    test 61 wrap90(90): 90.0
    test 62 wrap90(180): 0.0
    test 63 wrap90(360): 0.0
    test 64 wrap90(-90): -90.0
    test 65 wrap90(-180): 0.0
    test 66 wrap90(-360): 0.0

    test 67 wrap180(90): 90.0
    test 68 wrap180(180): 180.0
    test 69 wrap180(360): 0.0
    test 70 wrap180(-90): -90.0
    test 71 wrap180(-180): -180.0
    test 72 wrap180(-360): 0.0

    test 73 wrap360(90): 90.0
    test 74 wrap360(180): 180.0
    test 75 wrap360(360): 0.0
    test 76 wrap360(-90): 270.0
    test 77 wrap360(-180): 180.0
    test 78 wrap360(-360): 0.0

    test 79 wrapPI_2(PI_2): 1.5707963267948966
    test 80 wrapPI_2(PI): 0.0
    test 81 wrapPI_2(PI2): 0.0
    test 82 wrapPI_2(-PI_2): -1.5707963267948966
    test 83 wrapPI_2(-PI): 0.0
    test 84 wrapPI_2(-PI2): 0.0

    test 85 wrapPI(PI_2): 1.5707963267948966
    test 86 wrapPI(PI): 3.141592653589793
    test 87 wrapPI(PI2): 0.0
    test 88 wrapPI(-PI_2): -1.5707963267948966
    test 89 wrapPI(-PI): -3.141592653589793
    test 90 wrapPI(-PI2): 0.0

    test 91 wrapPI2(PI_2): 1.5707963267948966
    test 92 wrapPI2(PI): 3.141592653589793
    test 93 wrapPI2(PI2): 0.0
    test 94 wrapPI2(-PI_2): 4.71238898038469
    test 95 wrapPI2(-PI): 3.141592653589793
    test 96 wrapPI2(-PI2): 0.0

    test 97 unroll180: -160.0, -250.0
    test 98 unroll180: 200.0, 110.0

    test 99 unroll180: -160.0, -250.0
    test 100 unroll180: 920.0, 830.0

    test 101 unroll180: -160.0, -270.0
    test 102 unroll180: 200.0, 90.0

    test 103 unroll180: -160.0, -990.0
    test 104 unroll180: 920.0, 90.0

    test 105 atan1: 0.0
    test 106 atan1: 0.0

    test 107 cot_ : -0.345499391106
    test 108 cotd_: -0.345499391106

    test 109 sincos2: 3.885780586188048e-16  FAILED, KNOWN, expected 1.7763568394002505e-15
    test 110 sincos2d: 9.992007221626409e-16  FAILED, KNOWN, expected 1.7763568394002505e-15

    test 111 iFt2m: 187441
    test 112 iFt2m: 757050
    test 113 sFt2m: 187441
    test 114 sFt2m: 757050

    test 115 m2iFt: 614963.91
    test 116 m2iFt: 2483759.84
    test 117 m2sFt: 614962.68
    test 118 m2sFt: 2483754.88

    test 119 acre2ha: 0.404686
    test 120 acre2m2: 4046.856422
    test 121 chain2m: 20.116800
    test 122 fathom2m: 1.828800
    test 123 furlong2m: 201.168000
    test 124 toise2m: 1.949044
    test 125 yard2m: 0.914400
    test 126 m2chain: 0.049710
    test 127 m2fathom: 0.546807
    test 128 m2furlong: 0.004971
    test 129 m2toise: 0.513072
    test 130 m2yard: 1.093613
# lazily imported pygeodesy.datums by utily.py line 180

    test 131 degrees2m: 10007557.1761
    test 132 degrees2m: 8666798.7443
    test 133 m2degrees: 90.0

    test 134 degrees2m: 20015114.3522
    test 135 degrees2m: 19987684.3336
    test 136 m2degrees: 180.0

    test 137 m2degrees2m(45, lat=0): 45.00
    test 138 m2degrees2m(45, lat=7): 45.00
    test 139 m2degrees2m(45, lat=14): 45.00
    test 140 m2degrees2m(45, lat=21): 45.00
    test 141 m2degrees2m(45, lat=28): 45.00
    test 142 m2degrees2m(45, lat=35): 45.00
    test 143 m2degrees2m(45, lat=42): 45.00
    test 144 m2degrees2m(45, lat=49): 45.00
    test 145 m2degrees2m(45, lat=56): 45.00
    test 146 m2degrees2m(45, lat=63): 45.00
    test 147 m2degrees2m(45, lat=70): 45.00
    test 148 m2degrees2m(45, lat=77): 45.00
    test 149 m2degrees2m(45, lat=84): 45.00

    test 150 isPoints2: False

    test 151 tan_2_semi: PI[1] edge (3.141592): semi-circular
    test 152 sincostan3(+0.0000): (0.0, 1.0, 0.0)
    test 153 sincostan3(-0.0000): (0.0, 1.0, 0.0)
    test 154 sincostan3(+1.5708): (1.0, 0.0, inf)
    test 155 sincostan3(-1.5708): (-1.0, 0.0, -inf)
    test 156 sincostan3(+3.1416): (0.0, -1.0, -0.0)
    test 157 sincostan3(-3.1416): (-0.0, -1.0, 0.0)
    test 158 sincostan3(+4.7124): (-1.0, 0.0, -inf)  FAILED, KNOWN, expected (-1.0, -0.0, inf)
    test 159 sincostan3(-1.5708): (-1.0, 0.0, -inf)
    test 160 sincostan3(+6.2832): (0.0, 1.0, 0.0)  FAILED, KNOWN, expected (-0.0, 1.0, -0.0)
    test 161 sincostan3(-6.2832): (-0.0, 1.0, -0.0)  FAILED, KNOWN, expected (0.0, 1.0, 0.0)

    5 of 161 testUtily.py tests (3.1%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 4.256 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testUtm.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testUtm.py line 11
# lazily imported pygeodesy.EPS from .constants by testUtm.py line 11
# lazily imported pygeodesy.F_DEG from .dms by testUtm.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testUtm.py line 11
# lazily imported pygeodesy.fstr from .streprs by testUtm.py line 11
# lazily imported pygeodesy.parseUTM5 from .utm by testUtm.py line 11
# lazily imported pygeodesy.toUtm8 from .utm by testUtm.py line 11
# lazily imported pygeodesy.Utm from .utm by testUtm.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testUtm.py line 178

    testing testUtm.py 22.07.25 (module pygeodesy.utm 24.06.11) isLazy=3
    test 1 Utm1: 03 N 448251.0 5411932.0001
    test 2 Utm2: 31 N 448252 5411933
    test 3 Utm2: 31 N 448251.795 5411932.678
    test 4 Utm2: 31 N 448251.8 5411932.7 n/a n/a
    test 5 Utm.toLatLon1: 48.8582°N, 002.2945°E
    test 6 Utm.toLatLon1: 48°51′29.52″N, 002°17′40.2″E
    test 7 toUtm1: 31 N 448252 5411933
    test 8 toUtm1: 31 N 448251.795 5411932.678
    test 9 toUtm2: [Z:31U, H:N, E:448252, N:5411933, C:-31.87873265′, S:0.9996329]
    test 10 toUtm4: 48 N 377302 1483035
    test 11 toUtm5: 48P N 377302.354183 1483034.777084 -15.77480856′ 0.99978623
    test 12 toUtm6: 13 S 622698 8516965
    test 13 toUtm7: 13L S 622697.645817 8516965.222916 -15.77480856′ 0.99978623
# lazily imported pygeodesy.etm by utm.py line 248
    test 14 toEtm: 13 S 622698 8516965
# lazily imported pygeodesy.mgrs by utmupsBase.py line 431
    test 15 toMgrs1: 13L FF 22697 16965
    test 16 toMgrs2: 31U DQ 48251 11932
    test 17 toUtm14: 14 S -27436 8512042
    test 18 Utm8: 18 N 516620 4574500
    test 19 Utm8.toLatLon: 41.321801°N, 074.801413°W
    test 20 Utm8.toLatLon: 41.321801N, 074.801413W
    test 21 toUtm(61.44°N, 025.4°E): 35V N 414668 6812845
    test 22 toUtm(47.04°S, 073.48°W): 18G S 615472 4789270
    test 23 toUtm(40.4°N, 074.7°W): 18T N 525458 4472198
    test 24 toUtm(44.5°N, 088.5°W): 16T N 380753 4928503
    test 25 toUtm(50.8694°N, 115.6508°W): 11U N 594937 5636169
    test 26 toUtm(00.0°N, 000.0°E): 31N N 166021 0
    test 27 toUtm(00.13°N, 000.2324°W): 30N N 808084 14386
    test 28 toUtm(45.6456°S, 023.3545°E): 34G S 683474 4942631
    test 29 toUtm(12.765°S, 033.8765°W): 25L S 404859 8588691
    test 30 toUtm(80.5434°S, 170.654°W): lat ('-80.5434°'): outside UTM range [-80, 84)
    test 31 toUtm(90.0°N, 177.0°E): lat ('90.0°'): outside UTM range [-80, 84)
    test 32 toUtm(90.0°S, 177.0°W): lat ('-90.0°'): outside UTM range [-80, 84)
    test 33 toUtm(90.0°N, 003.0°E): lat ('90.0°'): outside UTM range [-80, 84)
    test 34 toUtm(23.4578°N, 135.4545°W): 08Q N 453580 2594273
    test 35 toUtm(77.345°N, 156.9876°E): 57X N 450794 8586116
    test 36 toUtm(89.3454°S, 048.9306°W): lat ('-89.3454°'): outside UTM range [-80, 84)
    test 37 toUtm(60.0°N, 001.0°E): 31V N 388456 6653097
    test 38 toUtm(60.0°N, 003.0°E): 32V N 165640 6666594
    test 39 toUtm(60.0°N, 006.0°E): 32V N 332705 6655205
    test 40 toUtm(60.0°N, 009.0°E): 32V N 500000 6651411
    test 41 toUtm(60.0°N, 012.0°E): 33V N 332705 6655205
    test 42 toUtm(76.0°N, 001.0°E): 31X N 446000 8436100
    test 43 toUtm(76.0°N, 007.0°E): 31X N 607943 8438843
    test 44 toUtm(76.0°N, 013.0°E): 33X N 446000 8436100
    test 45 toUtm(76.0°N, 019.0°E): 33X N 607943 8438843
    test 46 toUtm(76.0°N, 025.0°E): 35X N 446000 8436100
    test 47 toUtm(76.0°N, 031.0°E): 35X N 607943 8438843
    test 48 toUtm(76.0°N, 037.0°E): 37X N 446000 8436100
    test 49 toUtm(50.77535°N, 006.08389°E): 32U N 294409 5628898
    test 50 toUtm(40.71435°N, 074.00597°W): 18T N 583960 4507523
    test 51 toUtm(41.28646°S, 174.77624°E): 60G S 313784 5427057
    test 52 toUtm(33.92487°S, 018.42406°E): 34H S 261878 6243186
    test 53 toUtm(32.89018°S, 068.84405°W): 19H S 514586 6360877
    test 54 toUtm(64.83778°N, 147.71639°W): 06W N 466013 7190568
    test 55 toUtm(56.7968°N, 005.00601°W): 30V N 377486 6296562
    test 56 toUtm(84.0°N, 005.00601°W): lat ('84.0°'): outside UTM range [-80, 84)
    test 57 toUtm('Mt Assiniboine'): [Z:11U, H:N, E:594934, N:5636174]
    test 58 Utm9: 55 S 321441 5810117
    test 59 Utm9.toLatLon(eps=2.2204e-12): -37.83891644, 144.97077387
    test 60 Utm9.toLatLon(eps=2.2204e-13): -37.83891644, 144.97077387
    test 61 Utm9.toLatLon(eps=2.2204e-14): -37.83891644, 144.97077387
    test 62 Utm9.toLatLon(eps=2.2204e-15): -37.83891644, 144.97077387
    test 63 Utm9.toLatLon(eps=2.2204e-16): -37.83891644, 144.97077387
    test 64 Utm9.toLatLon(eps=2.2204e-17): -37.83891644, 144.97077387
    test 65 Utm9.toLatLon(eps=2.2204e-18): -37.83891644, 144.97077387
    test 66 Utm9.toLatLon(eps=2.2204e-19): -37.83891644, 144.97077387
    test 67 Utm9.toLatLon(eps=2.2204e-20): -37.83891644, 144.97077387
    test 68 Utm10: 31 N 400000 5000000
    test 69 Utm10.toLatLon(eps=2.2204e-12): 45.14639288, 1.72796704
    test 70 Utm10.toLatLon(eps=2.2204e-13): 45.14639288, 1.72796704
    test 71 Utm10.toLatLon(eps=2.2204e-14): 45.14639288, 1.72796704
    test 72 Utm10.toLatLon(eps=2.2204e-15): 45.14639288, 1.72796704
    test 73 Utm10.toLatLon(eps=2.2204e-16): 45.14639288, 1.72796704
    test 74 Utm10.toLatLon(eps=2.2204e-17): 45.14639288, 1.72796704
    test 75 Utm10.toLatLon(eps=2.2204e-18): 45.14639288, 1.72796704
    test 76 Utm10.toLatLon(eps=2.2204e-19): 45.14639288, 1.72796704
    test 77 Utm10.toLatLon(eps=2.2204e-20): 45.14639288, 1.72796704
    test 78 Utm111: 37 N 1399093 8314607
    test 79 Utm111.toLatLon(eps=2.2204e-12): 70.54298527, 40.28205459
    test 80 Utm111.toLatLon(eps=2.2204e-13): 70.54298527, 40.28205459
    test 81 Utm111.toLatLon(eps=2.2204e-14): 70.54298527, 40.28205459
    test 82 Utm111.toLatLon(eps=2.2204e-15): 70.54298527, 40.28205459
    test 83 Utm111.toLatLon(eps=2.2204e-16): 70.54298527, 40.28205459
    test 84 Utm111.toLatLon(eps=2.2204e-17): 70.54298527, 40.28205459
    test 85 Utm111.toLatLon(eps=2.2204e-18): 70.54298527, 40.28205459
    test 86 Utm111.toLatLon(eps=2.2204e-19): 70.54298527, 40.28205459
    test 87 Utm111.toLatLon(eps=2.2204e-20): 70.54298527, 40.28205459
    test 88 CV#86: [Z:01, H:N, E:100000, N:0, C:n/a, S:n/a]
    test 89 CV#86: 00.0°N, 179.407673°E
    test 90 CV#86: [Z:60, H:N, E:767993, N:0, C:+0.0″, S:1.000489]  FAILED, KNOWN, expected [Z:01, H:N, E:100000, N:0, ...]
    test 91 #63: 32 N 280000 5653000
    test 92 toMgrs: 32U KB 80000 53000
    test 93 toLatLon: (50.986484, 5.865326, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -2.436605, 1.000194)
    test 94 band: U
    test 95 band: band ('?'): not 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W' or 'X'
    test 96 datum: Datum(name='_Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.Identity)  FAILED, KNOWN, expected same
    test 97 repr: [Z:32U, H:N, E:280000, N:5653000]
    test 98 E.N.: (280000.0, 5653000.0)

    2 of 98 testUtm.py tests (2.0%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 36.192 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testUtmTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14
# lazily imported pygeodesy.toUtm8 from .utm by testUtmTMcoords.py line 17
# lazily imported pygeodesy.Utm from .utm by testUtmTMcoords.py line 17

    testing testUtmTMcoords.py 24.03.22 (module pygeodesy.utm 24.06.11) isLazy=3
    test 1 line 1 toUtm8.easting: 1548706.791619
    test 2 line 1 toUtm8.northing: 8451449.198772
    test 3 line 1 toUtm8.gamma: 43.922790
    test 4 line 1 toUtm8.scale: 1.029060
    test 5 line 1 toUtm8.lat: 70.579277
    test 6 line 1 toUtm8.lon: 45.599420
    test 7 line 2 toUtm8.easting: 2624150.740929
    test 8 line 2 toUtm8.northing: 1204434.041605
    test 9 line 2 toUtm8.gamma: 4.292619
    test 10 line 2 toUtm8.scale: 1.086051
    test 11 line 2 toUtm8.lat: 10.018894
    test 12 line 2 toUtm8.lon: 23.313324
    test 13 line 3 toUtm8.easting: 9855841.232935
    test 14 line 3 toUtm8.northing: 6145496.115157  FAILED, KNOWN, expected 6145496.115155
    test 15 line 3 toUtm8.gamma: 53.348315
    test 16 line 3 toUtm8.scale: 2.445098
    test 17 line 3 toUtm8.lat: 19.479896
    test 18 line 3 toUtm8.lon: 75.662049
    test 19 line 4 toUtm8.easting: 3206390.691996
    test 20 line 4 toUtm8.northing: 2650745.400406
    test 21 line 4 toUtm8.gamma: 11.666950
    test 22 line 4 toUtm8.scale: 1.129359
    test 23 line 4 toUtm8.lat: 21.072465
    test 24 line 4 toUtm8.lon: 29.828684
    test 25 line 5 toUtm8.easting: 4328154.083501
    test 26 line 5 toUtm8.northing: 749647.623690
    test 27 line 5 toUtm8.gamma: 4.024317
    test 28 line 5 toUtm8.scale: 1.240829
    test 29 line 5 toUtm8.lat: 5.458957
    test 30 line 5 toUtm8.lon: 36.385237
    test 31 line 6 toUtm8.easting: 847598.266514
    test 32 line 6 toUtm8.northing: 7947180.962440
    test 33 line 6 toUtm8.gamma: 21.639091
    test 34 line 6 toUtm8.scale: 1.008399
    test 35 line 6 toUtm8.lat: 70.175454
    test 36 line 6 toUtm8.lon: 22.865350
    test 37 line 7 toUtm8.easting: 2727657.337974
    test 38 line 7 toUtm8.northing: 8283916.696410
    test 39 line 7 toUtm8.gamma: 55.690909
    test 40 line 7 toUtm8.scale: 1.091942
    test 41 line 7 toUtm8.lat: 61.965605
    test 42 line 7 toUtm8.lon: 58.931371
    test 43 line 8 toUtm8.easting: 2331001.751890
    test 44 line 8 toUtm8.northing: 1313608.224751
    test 45 line 8 toUtm8.gamma: 4.214690
    test 46 line 8 toUtm8.scale: 1.067599
    test 47 line 8 toUtm8.lat: 11.116050
    test 48 line 8 toUtm8.lon: 20.901069
    test 49 line 9 toUtm8.easting: 6035557.239480
    test 50 line 9 toUtm8.northing: 5791770.791879
    test 51 line 9 toUtm8.gamma: 43.698170
    test 52 line 9 toUtm8.scale: 1.481260
    test 53 line 9 toUtm8.lat: 32.210543
    test 54 line 9 toUtm8.lon: 60.705849
    test 55 line 10 toUtm8.easting: 1064553.125852
    test 56 line 10 toUtm8.northing: 9417273.737208
    test 57 line 10 toUtm8.gamma: 61.100380
    test 58 line 10 toUtm8.scale: 1.013475
    test 59 line 10 toUtm8.lat: 79.187451
    test 60 line 10 toUtm8.lon: 61.532382
    test 61 line 11 toUtm8.easting: 1400137.116164
    test 62 line 11 toUtm8.northing: 9616907.017686
    test 63 line 11 toUtm8.gamma: 74.527087
    test 64 line 11 toUtm8.scale: 1.023640
    test 65 line 11 toUtm8.lat: 77.103759
    test 66 line 11 toUtm8.lon: 74.899105

    test skipped (1): line 12 toUtm8.'21.889514024862 80.019885892785 9860691.0166261508479 7433039.1433282732643 65.357693372142649007 2.43897318400097845293'

    test skipped (2): line 13 toUtm8.'30.53629567699 82.186177919416 8076501.8336948099169 8561614.1747819103782 75.073393190238557702 1.90620203595203984732'
    test 67 line 14 toUtm8.easting: 3335099.866623
    test 68 line 14 toUtm8.northing: 6740519.084015
    test 69 line 14 toUtm8.gamma: 40.611821
    test 70 line 14 toUtm8.scale: 1.139021
    test 71 line 14 toUtm8.lat: 49.990485
    test 72 line 14 toUtm8.lon: 48.203179

    test skipped (3): line 15 toUtm8.'14.486311853451 80.905136710227 12051574.9284996192629 6587213.0519512810474 59.033236797073779959 3.3574686117030164354'
    test 73 line 16 toUtm8.easting: 5387578.735298
    test 74 line 16 toUtm8.northing: 4111216.907168
    test 75 line 16 toUtm8.gamma: 27.574337
    test 76 line 16 toUtm8.scale: 1.379357
    test 77 line 16 toUtm8.lat: 25.936824
    test 78 line 16 toUtm8.lon: 49.913598
    test 79 line 17 toUtm8.easting: 2622214.380233
    test 80 line 17 toUtm8.northing: 8678923.984567
    test 81 line 17 toUtm8.gamma: 61.697275
    test 82 line 17 toUtm8.scale: 1.084810
    test 83 line 17 toUtm8.lat: 64.402196
    test 84 line 17 toUtm8.lon: 64.091395

    test skipped (4): line 18 toUtm8.'48.451353594584 84.856197560189 5068474.169632778036 9492066.9937094951003 83.156739839119105102 1.3299901985118008373'
    test 85 line 19 toUtm8.easting: 738062.047779
    test 86 line 19 toUtm8.northing: 3031007.074116
    test 87 line 19 toUtm8.gamma: 3.416802
    test 88 line 19 toUtm8.scale: 1.006332
    test 89 line 19 toUtm8.lat: 27.203895
    test 90 line 19 toUtm8.lon: 7.440229
    test 91 line 20 toUtm8.easting: 1944413.834565
    test 92 line 20 toUtm8.northing: 9613299.224493
    test 93 line 20 toUtm8.gamma: 78.462831
    test 94 line 20 toUtm8.scale: 1.046134
    test 95 line 20 toUtm8.lat: 72.509000
    test 96 line 20 toUtm8.lon: 78.982283
    test 97 line 21 toUtm8.easting: 2114521.418406
    test 98 line 21 toUtm8.northing: 4954077.440098
    test 99 line 21 toUtm8.gamma: 17.571878
    test 100 line 21 toUtm8.scale: 1.055093
    test 101 line 21 toUtm8.lat: 41.824954
    test 102 line 21 toUtm8.lon: 25.392744
    test 103 line 22 toUtm8.easting: 620365.905090
    test 104 line 22 toUtm8.northing: 4755542.026562
    test 105 line 22 toUtm8.gamma: 5.152022
    test 106 line 22 toUtm8.scale: 1.004338
    test 107 line 22 toUtm8.lat: 42.701376
    test 108 line 22 toUtm8.lon: 7.572738
    test 109 line 23 toUtm8.easting: 263004.770989
    test 110 line 23 toUtm8.northing: 4493669.762451
    test 111 line 23 toUtm8.gamma: 2.020523
    test 112 line 23 toUtm8.scale: 1.000452
    test 113 line 23 toUtm8.lat: 40.552052
    test 114 line 23 toUtm8.lon: 3.106056
    test 115 line 24 toUtm8.easting: 3217221.739462
    test 116 line 24 toUtm8.northing: 437776.119161
    test 117 line 24 toUtm8.gamma: 1.848169
    test 118 line 24 toUtm8.scale: 1.130558
    test 119 line 24 toUtm8.lat: 3.501242
    test 120 line 24 toUtm8.lon: 27.806507

    test skipped (5): line 25 toUtm8.'10.148714782203 85.373767569431 14661142.4449607145297 7476100.8241849819567 68.376669038799719822 4.89664968310721668858'
    test 121 line 26 toUtm8.easting: 967777.158554
    test 122 line 26 toUtm8.northing: 6615684.266592
    test 123 line 26 toUtm8.gamma: 14.410044
    test 124 line 26 toUtm8.scale: 1.011100
    test 125 line 26 toUtm8.lat: 58.582623
    test 126 line 26 toUtm8.lon: 16.755558
    test 127 line 27 toUtm8.easting: 7558840.728461
    test 128 line 27 toUtm8.northing: 4144728.130764
    test 129 line 27 toUtm8.gamma: 32.557264
    test 130 line 27 toUtm8.scale: 1.791490
    test 131 line 27 toUtm8.lat: 19.793004
    test 132 line 27 toUtm8.lon: 61.746763
    test 133 line 28 toUtm8.easting: 1056008.314161
    test 134 line 28 toUtm8.northing: 9290799.692669
    test 135 line 28 toUtm8.gamma: 55.843278
    test 136 line 28 toUtm8.scale: 1.013253
    test 137 line 28 toUtm8.lat: 78.666776
    test 138 line 28 toUtm8.lon: 56.365355
    test 139 line 29 toUtm8.easting: 1943965.134687
    test 140 line 29 toUtm8.northing: 1389972.228690
    test 141 line 29 toUtm8.gamma: 3.774869
    test 142 line 29 toUtm8.scale: 1.046724
    test 143 line 29 toUtm8.lat: 11.998788
    test 144 line 29 toUtm8.lon: 17.597873
    test 145 line 30 toUtm8.easting: 5803077.072902
    test 146 line 30 toUtm8.northing: 5649957.943659
    test 147 line 30 toUtm8.gamma: 41.717943
    test 148 line 30 toUtm8.scale: 1.442572
    test 149 line 30 toUtm8.lat: 32.540378
    test 150 line 30 toUtm8.lon: 58.764613
    test 151 line 31 toUtm8.easting: 2928716.986009
    test 152 line 31 toUtm8.northing: 5731835.058317
    test 153 line 31 toUtm8.gamma: 28.538550
    test 154 line 31 toUtm8.scale: 1.106780
    test 155 line 31 toUtm8.lat: 45.160356
    test 156 line 31 toUtm8.lon: 37.465285
    test 157 line 32 toUtm8.easting: 326141.975756
    test 158 line 32 toUtm8.northing: 8881325.164543
    test 159 line 32 toUtm8.gamma: 16.111415
    test 160 line 32 toUtm8.scale: 1.000900
    test 161 line 32 toUtm8.lat: 79.584190
    test 162 line 32 toUtm8.lon: 16.367006
    test 163 line 33 toUtm8.easting: 3933015.267450
    test 164 line 33 toUtm8.northing: 7932373.909512
    test 165 line 33 toUtm8.gamma: 58.577424
    test 166 line 33 toUtm8.scale: 1.194811
    test 167 line 33 toUtm8.lat: 52.470664
    test 168 line 33 toUtm8.lon: 64.125580
    test 169 line 34 toUtm8.easting: 8598926.983213
    test 170 line 34 toUtm8.northing: 6214135.167503
    test 171 line 34 toUtm8.gamma: 52.612878
    test 172 line 34 toUtm8.scale: 2.051367
    test 173 line 34 toUtm8.lat: 23.702673
    test 174 line 34 toUtm8.lon: 72.630363
    test 175 line 35 toUtm8.easting: 6620553.333772
    test 176 line 35 toUtm8.northing: 6540527.122948
    test 177 line 35 toUtm8.gamma: 52.350140
    test 178 line 35 toUtm8.scale: 1.586614
    test 179 line 35 toUtm8.lat: 32.603520
    test 180 line 35 toUtm8.lon: 67.280123
    test 181 line 36 toUtm8.easting: 1515136.758292
    test 182 line 36 toUtm8.northing: 3858996.087537
    test 183 line 36 toUtm8.gamma: 9.225127
    test 184 line 36 toUtm8.scale: 1.028029
    test 185 line 36 toUtm8.lat: 33.776224
    test 186 line 36 toUtm8.lon: 16.280993
    test 187 line 37 toUtm8.easting: 479854.373445
    test 188 line 37 toUtm8.northing: 8980501.389896
    test 189 line 37 toUtm8.gamma: 25.021222
    test 190 line 37 toUtm8.scale: 1.002415
    test 191 line 37 toUtm8.lat: 79.932747
    test 192 line 37 toUtm8.lon: 25.363622
    test 193 line 38 toUtm8.easting: 5243446.564940
    test 194 line 38 toUtm8.northing: 140657.213960
    test 195 line 38 toUtm8.gamma: 0.862817
    test 196 line 38 toUtm8.scale: 1.360358
    test 197 line 38 toUtm8.lat: 0.935056
    test 198 line 38 toUtm8.lon: 42.538824

    test skipped (6): line 39 toUtm8.'13.490862440668 83.178380075606 12806457.9232176809509 7170118.6846750266674 64.708921319446620085 3.7405880916836789809'
    test 199 line 40 toUtm8.easting: 1202993.459158
    test 200 line 40 toUtm8.northing: 5557316.053599
    test 201 line 40 toUtm8.gamma: 12.579061
    test 202 line 40 toUtm8.scale: 1.017426
    test 203 line 40 toUtm8.lat: 48.979057
    test 204 line 40 toUtm8.lon: 16.474542
    test 205 line 41 toUtm8.easting: 1729088.710196
    test 206 line 41 toUtm8.northing: 7770874.289954
    test 207 line 41 toUtm8.gamma: 36.021783
    test 208 line 41 toUtm8.scale: 1.036397
    test 209 line 41 toUtm8.lat: 65.036016
    test 210 line 41 toUtm8.lon: 38.729091
    test 211 line 42 toUtm8.easting: 2437301.517425
    test 212 line 42 toUtm8.northing: 5539327.748318
    test 213 line 42 toUtm8.gamma: 23.461879
    test 214 line 42 toUtm8.scale: 1.073459
    test 215 line 42 toUtm8.lat: 45.510091
    test 216 line 42 toUtm8.lon: 31.303729
    test 217 line 43 toUtm8.easting: 3647186.135066
    test 218 line 43 toUtm8.northing: 2086412.330983
    test 219 line 43 toUtm8.gamma: 10.023991
    test 220 line 43 toUtm8.scale: 1.168707
    test 221 line 43 toUtm8.lat: 16.058010
    test 222 line 43 toUtm8.lon: 32.520026
    test 223 line 44 toUtm8.easting: 1818497.243556
    test 224 line 44 toUtm8.northing: 4275471.745057
    test 225 line 44 toUtm8.gamma: 12.499656
    test 226 line 44 toUtm8.scale: 1.040604
    test 227 line 44 toUtm8.lat: 36.845200
    test 228 line 44 toUtm8.lon: 20.282283
    test 229 line 45 toUtm8.easting: 3751304.113783
    test 230 line 45 toUtm8.northing: 5130454.001592
    test 231 line 45 toUtm8.gamma: 28.959707
    test 232 line 45 toUtm8.scale: 1.177681
    test 233 line 45 toUtm8.lat: 37.865481
    test 234 line 45 toUtm8.lon: 41.990402
    test 235 line 46 toUtm8.easting: 2616733.138544
    test 236 line 46 toUtm8.northing: 394644.463815
    test 237 line 46 toUtm8.gamma: 1.390425
    test 238 line 46 toUtm8.scale: 1.085595
    test 239 line 46 toUtm8.lat: 3.287272
    test 240 line 46 toUtm8.lon: 22.917604
    test 241 line 47 toUtm8.easting: 1756506.573942
    test 242 line 47 toUtm8.northing: 5570393.986394
    test 243 line 47 toUtm8.gamma: 17.897894
    test 244 line 47 toUtm8.scale: 1.037732
    test 245 line 47 toUtm8.lat: 47.813686
    test 246 line 47 toUtm8.lon: 23.545092
    test 247 line 48 toUtm8.easting: 8752461.894711
    test 248 line 48 toUtm8.northing: 6087728.152284
    test 249 line 48 toUtm8.gamma: 51.628465
    test 250 line 48 toUtm8.scale: 2.095465
    test 251 line 48 toUtm8.lat: 22.836853
    test 252 line 48 toUtm8.lon: 72.604385
    test 253 line 49 toUtm8.easting: 1309272.216432
    test 254 line 49 toUtm8.northing: 59520.028899
    test 255 line 49 toUtm8.gamma: 0.109069
    test 256 line 49 toUtm8.scale: 1.020897
    test 257 line 49 toUtm8.lat: 0.527262
    test 258 line 49 toUtm8.lon: 11.684209
    test 259 line 50 toUtm8.easting: 328652.277129
    test 260 line 50 toUtm8.northing: 2233043.958874
    test 261 line 50 toUtm8.gamma: 1.084863
    test 262 line 50 toUtm8.scale: 1.000935
    test 263 line 50 toUtm8.lat: 20.166742
    test 264 line 50 toUtm8.lon: 3.143948

    test skipped (7): line 51 toUtm8.'28.604629015528 85.988721094779 8637959.7164470998207 9190635.1560309800028 81.802562643198123218 2.05432863342852874819'

    test skipped (8): line 52 toUtm8.'28.984047991106 85.833447775172 8548521.4551470334531 9172410.9432821880799 81.583928102890161419 2.02964145862183583179'
    test 265 line 53 toUtm8.easting: 796987.281104
    test 266 line 53 toUtm8.northing: 7677446.357675
    test 267 line 53 toUtm8.gamma: 18.084472
    test 268 line 53 toUtm8.scale: 1.007381
    test 269 line 53 toUtm8.lat: 68.071020
    test 270 line 53 toUtm8.lon: 19.392823

    test skipped (9): line 54 toUtm8.'61.416576191872 81.981611413918 3291036.4967623295988 9513199.6006662170596 80.890253980644739593 1.13482563910814382209'
    test 271 line 55 toUtm8.easting: 7087225.330906
    test 272 line 55 toUtm8.northing: 8382823.855822
    test 273 line 55 toUtm8.gamma: 72.253756
    test 274 line 55 toUtm8.scale: 1.678070
    test 275 line 55 toUtm8.lat: 35.074753
    test 276 line 55 toUtm8.lon: 79.496003
    test 277 line 56 toUtm8.easting: 5090358.125724
    test 278 line 56 toUtm8.northing: 4318294.133489
    test 279 line 56 toUtm8.gamma: 28.266280
    test 280 line 56 toUtm8.scale: 1.336264
    test 281 line 56 toUtm8.lat: 28.078790
    test 282 line 56 toUtm8.lon: 48.684350

    test skipped (10): line 57 toUtm8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 283 line 58 toUtm8.easting: 3447670.550785
    test 284 line 58 toUtm8.northing: 3680238.888223
    test 285 line 58 toUtm8.gamma: 17.934948
    test 286 line 58 toUtm8.scale: 1.149831
    test 287 line 58 toUtm8.lat: 28.473948
    test 288 line 58 toUtm8.lon: 34.127306
    test 289 line 59 toUtm8.easting: 3396522.906798
    test 290 line 59 toUtm8.northing: 8093659.687593
    test 291 line 59 toUtm8.gamma: 57.747117
    test 292 line 59 toUtm8.scale: 1.144006
    test 293 line 59 toUtm8.lat: 56.629354
    test 294 line 59 toUtm8.lon: 62.196474
    test 295 line 60 toUtm8.easting: 11249894.100794  FAILED, KNOWN, expected 11249894.100784
    test 296 line 60 toUtm8.northing: 1619226.506360  FAILED, KNOWN, expected 1619226.506299
    test 297 line 60 toUtm8.gamma: 14.210358
    test 298 line 60 toUtm8.scale: 3.048347
    test 299 line 60 toUtm8.lat: 4.747762
    test 300 line 60 toUtm8.lon: 70.932555
    test 301 line 61 toUtm8.easting: 6808805.230950
    test 302 line 61 toUtm8.northing: 8044779.777369
    test 303 line 61 toUtm8.gamma: 68.242008
    test 304 line 61 toUtm8.scale: 1.621464
    test 305 line 61 toUtm8.lat: 35.882113
    test 306 line 61 toUtm8.lon: 76.741849
    test 307 line 62 toUtm8.easting: 2306021.556506
    test 308 line 62 toUtm8.northing: 757191.592866
    test 309 line 62 toUtm8.gamma: 2.385686
    test 310 line 62 toUtm8.scale: 1.066159
    test 311 line 62 toUtm8.lat: 6.420705
    test 312 line 62 toUtm8.lon: 20.416028
    test 313 line 63 toUtm8.easting: 1547406.313862
    test 314 line 63 toUtm8.northing: 6048712.751824
    test 315 line 63 toUtm8.gamma: 18.474372
    test 316 line 63 toUtm8.scale: 1.029123
    test 317 line 63 toUtm8.lat: 52.335248
    test 318 line 63 toUtm8.lon: 22.879294
    test 319 line 64 toUtm8.easting: 2430467.650383
    test 320 line 64 toUtm8.northing: 7557167.613972
    test 321 line 64 toUtm8.gamma: 42.110021
    test 322 line 64 toUtm8.scale: 1.072759
    test 323 line 64 toUtm8.lat: 59.846391
    test 324 line 64 toUtm8.lon: 46.262536
    test 325 line 65 toUtm8.easting: 2334053.905830
    test 326 line 65 toUtm8.northing: 1948076.966582
    test 327 line 65 toUtm8.gamma: 6.353185
    test 328 line 65 toUtm8.scale: 1.067733
    test 329 line 65 toUtm8.lat: 16.461790
    test 330 line 65 toUtm8.lon: 21.433269
    test 331 line 66 toUtm8.easting: 5564175.186737
    test 332 line 66 toUtm8.northing: 1836851.660412
    test 333 line 66 toUtm8.gamma: 11.870682
    test 334 line 66 toUtm8.scale: 1.408265
    test 335 line 66 toUtm8.lat: 11.707905
    test 336 line 66 toUtm8.lon: 45.827075
    test 337 line 67 toUtm8.easting: 6118505.590359
    test 338 line 67 toUtm8.northing: 7631684.552421
    test 339 line 67 toUtm8.gamma: 62.477323
    test 340 line 67 toUtm8.scale: 1.493420
    test 341 line 67 toUtm8.lat: 38.519075
    test 342 line 67 toUtm8.lon: 71.935918

    test skipped (11): line 68 toUtm8.'34.264007222954 82.647878110272 7365359.2946646287171 8818194.4515306837741 77.207042218974141605 1.73763853091849729372'
    test 343 line 69 toUtm8.easting: 36187.342415
    test 344 line 69 toUtm8.northing: 2142565.324802
    test 345 line 69 toUtm8.gamma: 0.114334
    test 346 line 69 toUtm8.scale: 0.999616
    test 347 line 69 toUtm8.lat: 19.376880
    test 348 line 69 toUtm8.lon: 0.344605
    test 349 line 70 toUtm8.easting: 2380328.546851
    test 350 line 70 toUtm8.northing: 8440109.872384
    test 351 line 70 toUtm8.gamma: 55.076067
    test 352 line 70 toUtm8.scale: 1.069658
    test 353 line 70 toUtm8.lat: 65.075805
    test 354 line 70 toUtm8.lon: 57.653438
    test 355 line 71 toUtm8.easting: 582511.608826
    test 356 line 71 toUtm8.northing: 8876047.217071
    test 357 line 71 toUtm8.gamma: 27.133300
    test 358 line 71 toUtm8.scale: 1.003749
    test 359 line 71 toUtm8.lat: 78.691870
    test 360 line 71 toUtm8.lon: 27.591736
    test 361 line 72 toUtm8.easting: 899441.350477
    test 362 line 72 toUtm8.northing: 4582046.430516
    test 363 line 72 toUtm8.gamma: 7.031211
    test 364 line 72 toUtm8.scale: 1.009573
    test 365 line 72 toUtm8.lat: 40.893022
    test 366 line 72 toUtm8.lon: 10.668804

    test skipped (12): line 73 toUtm8.'48.914278679322 87.35926802682 5022485.1243369246483 9741774.9337207800497 86.505947369926030588 1.32369954850478170836'
    test 367 line 74 toUtm8.easting: 6701004.587204
    test 368 line 74 toUtm8.northing: 2954368.258231
    test 369 line 74 toUtm8.gamma: 21.560153
    test 370 line 74 toUtm8.scale: 1.608554
    test 371 line 74 toUtm8.lat: 16.208377
    test 372 line 74 toUtm8.lon: 54.494282
    test 373 line 75 toUtm8.easting: 454986.218897
    test 374 line 75 toUtm8.northing: 4885087.887884
    test 375 line 75 toUtm8.gamma: 3.945648
    test 376 line 75 toUtm8.scale: 1.002147
    test 377 line 75 toUtm8.lat: 43.977936
    test 378 line 75 toUtm8.lon: 5.672541

    test skipped (13): line 76 toUtm8.'26.850860749352 82.834479937822 8903956.1403106503714 8470608.5774824981183 74.723116471645531699 2.13131124920824155268'
    test 379 line 77 toUtm8.easting: 1547627.594741
    test 380 line 77 toUtm8.northing: 6036584.538347
    test 381 line 77 toUtm8.gamma: 18.407629
    test 382 line 77 toUtm8.scale: 1.029132
    test 383 line 77 toUtm8.lat: 52.234165
    test 384 line 77 toUtm8.lon: 22.827655
    test 385 line 78 toUtm8.easting: 5221488.778597
    test 386 line 78 toUtm8.northing: 1762592.044392
    test 387 line 78 toUtm8.gamma: 10.927880
    test 388 line 78 toUtm8.scale: 1.356721
    test 389 line 78 toUtm8.lat: 11.674646
    test 390 line 78 toUtm8.lon: 43.500147
    test 391 line 79 toUtm8.easting: 4880570.297161
    test 392 line 79 toUtm8.northing: 3325433.988867
    test 393 line 79 toUtm8.gamma: 20.469862
    test 394 line 79 toUtm8.scale: 1.308476
    test 395 line 79 toUtm8.lat: 22.492753
    test 396 line 79 toUtm8.lon: 44.179153

    test skipped (14): line 80 toUtm8.'.910999463005 88.548822916123 23930680.0826936110445 7491462.0990379651261 75.937628056628715446 15.55636485152285563369'
    test 397 line 81 toUtm8.easting: 71519.450458
    test 398 line 81 toUtm8.northing: 3654740.444852
    test 399 line 81 toUtm8.gamma: 0.417448
    test 400 line 81 toUtm8.scale: 0.999663
    test 401 line 81 toUtm8.lat: 33.028802
    test 402 line 81 toUtm8.lon: 0.765843
    test 403 line 82 toUtm8.easting: 4152797.795220
    test 404 line 82 toUtm8.northing: 7823098.502751
    test 405 line 82 toUtm8.gamma: 58.238901
    test 406 line 82 toUtm8.scale: 1.218052
    test 407 line 82 toUtm8.lat: 50.649195
    test 408 line 82 toUtm8.lon: 64.389076
    test 409 line 83 toUtm8.easting: 2926725.707639
    test 410 line 83 toUtm8.northing: 7904918.072844
    test 411 line 83 toUtm8.gamma: 51.592748
    test 412 line 83 toUtm8.scale: 1.106206
    test 413 line 83 toUtm8.lat: 58.820640
    test 414 line 83 toUtm8.lon: 55.841048
    test 415 line 84 toUtm8.easting: 1325509.113869
    test 416 line 84 toUtm8.northing: 9675214.948213
    test 417 line 84 toUtm8.gamma: 76.116213
    test 418 line 84 toUtm8.scale: 1.021136
    test 419 line 84 toUtm8.lat: 77.865762
    test 420 line 84 toUtm8.lon: 76.414618
    test 421 line 85 toUtm8.easting: 3045296.448926
    test 422 line 85 toUtm8.northing: 542153.443280
    test 423 line 85 toUtm8.gamma: 2.185095
    test 424 line 85 toUtm8.scale: 1.116664
    test 425 line 85 toUtm8.lat: 4.389639
    test 426 line 85 toUtm8.lon: 26.458976
    test 427 line 86 toUtm8.easting: 11843870.887791  FAILED, KNOWN, expected 11843870.887518
    test 428 line 86 toUtm8.northing: 5912803.073690  FAILED, KNOWN, expected 5912803.073343
    test 429 line 86 toUtm8.gamma: 52.814260  FAILED, KNOWN, expected 52.814259
    test 430 line 86 toUtm8.scale: 3.267256
    test 431 line 86 toUtm8.lat: 13.924448
    test 432 line 86 toUtm8.lon: 79.017873
    test 433 line 87 toUtm8.easting: 8891099.704936
    test 434 line 87 toUtm8.northing: 162160.142227
    test 435 line 87 toUtm8.gamma: 1.312094
    test 436 line 87 toUtm8.scale: 2.157363
    test 437 line 87 toUtm8.lat: 0.679713
    test 438 line 87 toUtm8.lon: 62.036792
    test 439 line 88 toUtm8.easting: 4784814.214449
    test 440 line 88 toUtm8.northing: 2984497.432580
    test 441 line 88 toUtm8.gamma: 17.946545
    test 442 line 88 toUtm8.scale: 1.296116
    test 443 line 88 toUtm8.lat: 20.478281
    test 444 line 88 toUtm8.lon: 42.678234
    test 445 line 89 toUtm8.easting: 1772074.682154
    test 446 line 89 toUtm8.northing: 9491552.560143
    test 447 line 89 toUtm8.gamma: 73.634830
    test 448 line 89 toUtm8.scale: 1.038202
    test 449 line 89 toUtm8.lat: 73.695703
    test 450 line 89 toUtm8.lon: 74.259097
    test 451 line 90 toUtm8.easting: 1907649.782106
    test 452 line 90 toUtm8.northing: 6994232.429379
    test 453 line 90 toUtm8.gamma: 29.718929
    test 454 line 90 toUtm8.scale: 1.044503
    test 455 line 90 toUtm8.lat: 58.569370
    test 456 line 90 toUtm8.lon: 33.777549
    test 457 line 91 toUtm8.easting: 2084423.818962
    test 458 line 91 toUtm8.northing: 2211816.035619
    test 459 line 91 toUtm8.gamma: 6.556448
    test 460 line 91 toUtm8.scale: 1.053793
    test 461 line 91 toUtm8.lat: 18.933881
    test 462 line 91 toUtm8.lon: 19.492695
    test 463 line 92 toUtm8.easting: 1064373.671729
    test 464 line 92 toUtm8.northing: 7812482.547461
    test 465 line 92 toUtm8.gamma: 24.874124
    test 466 line 92 toUtm8.scale: 1.013490
    test 467 line 92 toUtm8.lat: 68.317934
    test 468 line 92 toUtm8.lon: 26.515687

    test skipped (15): line 93 toUtm8.'50.641941364984 87.111556505544 4770385.4792965339274 9734318.9029801439364 86.27311877223132818 1.29055338238288419467'
    test 469 line 94 toUtm8.easting: 6398096.677297
    test 470 line 94 toUtm8.northing: 4410894.752104
    test 471 line 94 toUtm8.gamma: 32.558023
    test 472 line 94 toUtm8.scale: 1.548004
    test 473 line 94 toUtm8.lat: 24.411298
    test 474 line 94 toUtm8.lon: 56.881823
    test 475 line 95 toUtm8.easting: 3138623.300415
    test 476 line 95 toUtm8.northing: 3082960.600798
    test 477 line 95 toUtm8.gamma: 13.557672
    test 478 line 95 toUtm8.scale: 1.123724
    test 479 line 95 toUtm8.lat: 24.571871
    test 480 line 95 toUtm8.lon: 30.073097
    test 481 line 96 toUtm8.easting: 2748325.794651
    test 482 line 96 toUtm8.northing: 4202811.912668
    test 483 line 96 toUtm8.gamma: 17.578706
    test 484 line 96 toUtm8.scale: 1.094102
    test 485 line 96 toUtm8.lat: 34.202576
    test 486 line 96 toUtm8.lon: 29.383166
    test 487 line 97 toUtm8.easting: 6677830.630367
    test 488 line 97 toUtm8.northing: 5350071.837395
    test 489 line 97 toUtm8.gamma: 41.306641
    test 490 line 97 toUtm8.scale: 1.599774
    test 491 line 97 toUtm8.lat: 27.756285
    test 492 line 97 toUtm8.lon: 61.881905
    test 493 line 98 toUtm8.easting: 5941536.667431
    test 494 line 98 toUtm8.northing: 3293112.175140
    test 495 line 98 toUtm8.gamma: 22.752845
    test 496 line 98 toUtm8.scale: 1.468473
    test 497 line 98 toUtm8.lat: 19.742270
    test 498 line 98 toUtm8.lon: 50.957821
    test 499 line 99 toUtm8.easting: 3152481.792567
    test 500 line 99 toUtm8.northing: 5903048.837978
    test 501 line 99 toUtm8.gamma: 31.494606
    test 502 line 99 toUtm8.scale: 1.124085
    test 503 line 99 toUtm8.lat: 45.453582
    test 504 line 99 toUtm8.lon: 40.659833
    test 505 line 100 toUtm8.easting: 10460475.897726  FAILED, KNOWN, expected 10460475.897730
    test 506 line 100 toUtm8.northing: 2553463.624385  FAILED, KNOWN, expected 2553463.624391
    test 507 line 100 toUtm8.gamma: 21.965869
    test 508 line 100 toUtm8.scale: 2.700296
    test 509 line 100 toUtm8.lat: 8.322144
    test 510 line 100 toUtm8.lon: 69.488157
    test 511 line 101 toUtm8.easting: 1964010.778021
    test 512 line 101 toUtm8.northing: 5634042.923056
    test 513 line 101 toUtm8.gamma: 20.117800
    test 514 line 101 toUtm8.scale: 1.047344
    test 515 line 101 toUtm8.lat: 47.749831
    test 516 line 101 toUtm8.lon: 26.322002
    test 517 line 102 toUtm8.easting: 2065306.424934
    test 518 line 102 toUtm8.northing: 2135008.468651
    test 519 line 102 toUtm8.gamma: 6.258981
    test 520 line 102 toUtm8.scale: 1.052800
    test 521 line 102 toUtm8.lat: 18.297493
    test 522 line 102 toUtm8.lon: 19.244669
    test 523 line 103 toUtm8.easting: 5127738.132976
    test 524 line 103 toUtm8.northing: 6793804.304411
    test 525 line 103 toUtm8.gamma: 50.557915
    test 526 line 103 toUtm8.scale: 1.339412
    test 527 line 103 toUtm8.lat: 40.834541
    test 528 line 103 toUtm8.lon: 61.650750
    test 529 line 104 toUtm8.easting: 8385525.148166
    test 530 line 104 toUtm8.northing: 6924932.344306
    test 531 line 104 toUtm8.gamma: 59.087561
    test 532 line 104 toUtm8.scale: 1.990364
    test 533 line 104 toUtm8.lat: 26.273247
    test 534 line 104 toUtm8.lon: 74.926694
    test 535 line 105 toUtm8.easting: 2297510.791909
    test 536 line 105 toUtm8.northing: 2805666.962834
    test 537 line 105 toUtm8.gamma: 9.301553
    test 538 line 105 toUtm8.scale: 1.065508
    test 539 line 105 toUtm8.lat: 23.698347
    test 540 line 105 toUtm8.lon: 22.155657

    test skipped (16): line 106 toUtm8.'12.364112546807 86.348578425071 13749544.9176345767153 8288728.3846500523233 75.033969786420407131 4.27058754359004466627'
    test 541 line 107 toUtm8.easting: 317518.455546
    test 542 line 107 toUtm8.northing: 1097517.583745
    test 543 line 107 toUtm8.gamma: 0.499004
    test 544 line 107 toUtm8.scale: 1.000848
    test 545 line 107 toUtm8.lat: 9.916091
    test 546 line 107 toUtm8.lon: 2.895277
    test 547 line 108 toUtm8.easting: 3856035.184888
    test 548 line 108 toUtm8.northing: 9141364.450290
    test 549 line 108 toUtm8.gamma: 75.972763
    test 550 line 108 toUtm8.scale: 1.186786
    test 551 line 108 toUtm8.lat: 56.553876
    test 552 line 108 toUtm8.lon: 78.215077
    test 553 line 109 toUtm8.easting: 1457484.942823
    test 554 line 109 toUtm8.northing: 9385297.101973
    test 555 line 109 toUtm8.gamma: 66.784662
    test 556 line 109 toUtm8.scale: 1.025660
    test 557 line 109 toUtm8.lat: 75.957631
    test 558 line 109 toUtm8.lon: 67.407383
    test 559 line 110 toUtm8.easting: 1304934.901841
    test 560 line 110 toUtm8.northing: 3604655.155715
    test 561 line 110 toUtm8.gamma: 7.343989
    test 562 line 110 toUtm8.scale: 1.020672
    test 563 line 110 toUtm8.lat: 31.826531
    test 564 line 110 toUtm8.lon: 13.731050
    test 565 line 111 toUtm8.easting: 1399093.491792
    test 566 line 111 toUtm8.northing: 8314607.120342
    test 567 line 111 toUtm8.gamma: 38.630161
    test 568 line 111 toUtm8.scale: 1.023625
    test 569 line 111 toUtm8.lat: 70.542985
    test 570 line 111 toUtm8.lon: 40.282055
    test 571 line 112 toUtm8.easting: 356983.618540
    test 572 line 112 toUtm8.northing: 4282309.048994
    test 573 line 112 toUtm8.gamma: 2.561485
    test 574 line 112 toUtm8.scale: 1.001170
    test 575 line 112 toUtm8.lat: 38.617487
    test 576 line 112 toUtm8.lon: 4.099838
    test 577 line 113 toUtm8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 578 line 113 toUtm8.northing: 1510288.212230  FAILED, KNOWN, expected 1510288.212229
    test 579 line 113 toUtm8.gamma: 12.752154
    test 580 line 113 toUtm8.scale: 2.511357
    test 581 line 113 toUtm8.lat: 5.389447
    test 582 line 113 toUtm8.lon: 66.729612
    test 583 line 114 toUtm8.easting: 6367592.504007
    test 584 line 114 toUtm8.northing: 1200437.077672
    test 585 line 114 toUtm8.gamma: 8.338041
    test 586 line 114 toUtm8.scale: 1.546210
    test 587 line 114 toUtm8.lat: 6.995168
    test 588 line 114 toUtm8.lon: 50.014763
    test 589 line 115 toUtm8.easting: 4391263.676460
    test 590 line 115 toUtm8.northing: 6325455.989408
    test 591 line 115 toUtm8.gamma: 42.653541
    test 592 line 115 toUtm8.scale: 1.245560
    test 593 line 115 toUtm8.lat: 42.321894
    test 594 line 115 toUtm8.lon: 53.784040
    test 595 line 116 toUtm8.easting: 6209880.527527
    test 596 line 116 toUtm8.northing: 2154754.449747
    test 597 line 116 toUtm8.gamma: 14.919512
    test 598 line 116 toUtm8.scale: 1.516560
    test 599 line 116 toUtm8.lat: 12.698515
    test 600 line 116 toUtm8.lon: 50.242047
    test 601 line 117 toUtm8.easting: 1507053.688772
    test 602 line 117 toUtm8.northing: 6261383.513280
    test 603 line 117 toUtm8.gamma: 19.280373
    test 604 line 117 toUtm8.scale: 1.027584
    test 605 line 117 toUtm8.lat: 54.207636
    test 606 line 117 toUtm8.lon: 23.325731
    test 607 line 118 toUtm8.easting: 8332725.003777
    test 608 line 118 toUtm8.northing: 3002712.329753
    test 609 line 118 toUtm8.gamma: 24.059212
    test 610 line 118 toUtm8.scale: 1.990450
    test 611 line 118 toUtm8.lat: 13.224787
    test 612 line 118 toUtm8.lon: 62.426698
    test 613 line 119 toUtm8.easting: 3958910.085235
    test 614 line 119 toUtm8.northing: 3462284.926102
    test 615 line 119 toUtm8.gamma: 18.546398
    test 616 line 119 toUtm8.scale: 1.199351
    test 617 line 119 toUtm8.lat: 25.650282
    test 618 line 119 toUtm8.lon: 37.710391

    test skipped (17): line 120 toUtm8.'20.684773383075 82.849734261238 10452892.2820830090734 8000059.6051139389546 71.07524025411428855 2.6501109339363854772'
    test 619 line 121 toUtm8.easting: 496148.253731
    test 620 line 121 toUtm8.northing: 6388503.365043
    test 621 line 121 toUtm8.gamma: 6.970955
    test 622 line 121 toUtm8.scale: 1.002620
    test 623 line 121 toUtm8.lat: 57.367533
    test 624 line 121 toUtm8.lon: 8.260866
    test 625 line 122 toUtm8.easting: 7375792.085850
    test 626 line 122 toUtm8.northing: 5544624.072155
    test 627 line 122 toUtm8.gamma: 44.510851
    test 628 line 122 toUtm8.scale: 1.745898
    test 629 line 122 toUtm8.lat: 25.958757
    test 630 line 122 toUtm8.lon: 65.760477
    test 631 line 123 toUtm8.easting: 2826258.041979
    test 632 line 123 toUtm8.northing: 5167759.816959
    test 633 line 123 toUtm8.gamma: 23.783897
    test 634 line 123 toUtm8.scale: 1.099415
    test 635 line 123 toUtm8.lat: 41.395848
    test 636 line 123 toUtm8.lon: 33.661790
    test 637 line 124 toUtm8.easting: 3958563.378851
    test 638 line 124 toUtm8.northing: 8499923.231243
    test 639 line 124 toUtm8.gamma: 66.570945
    test 640 line 124 toUtm8.scale: 1.197296
    test 641 line 124 toUtm8.lat: 54.266617
    test 642 line 124 toUtm8.lon: 70.602199
    test 643 line 125 toUtm8.easting: 4408189.533462
    test 644 line 125 toUtm8.northing: 8046312.003642
    test 645 line 125 toUtm8.gamma: 62.216959
    test 646 line 125 toUtm8.scale: 1.246750
    test 647 line 125 toUtm8.lat: 49.840393
    test 648 line 125 toUtm8.lon: 68.036728
    test 649 line 126 toUtm8.easting: 3629225.627512
    test 650 line 126 toUtm8.northing: 6371258.454645
    test 651 line 126 toUtm8.gamma: 38.881675
    test 652 line 126 toUtm8.scale: 1.165511
    test 653 line 126 toUtm8.lat: 46.306035
    test 654 line 126 toUtm8.lon: 48.085828
    test 655 line 127 toUtm8.easting: 602838.450710
    test 656 line 127 toUtm8.northing: 4851370.637205
    test 657 line 127 toUtm8.gamma: 5.160395
    test 658 line 127 toUtm8.scale: 1.004073
    test 659 line 127 toUtm8.lat: 43.570988
    test 660 line 127 toUtm8.lon: 7.464494
    test 661 line 128 toUtm8.easting: 764616.665051
    test 662 line 128 toUtm8.northing: 2164299.337945
    test 663 line 128 toUtm8.gamma: 2.429300
    test 664 line 128 toUtm8.scale: 1.006835
    test 665 line 128 toUtm8.lat: 19.427290
    test 666 line 128 toUtm8.lon: 7.268247
    test 667 line 129 toUtm8.easting: 5048953.021931
    test 668 line 129 toUtm8.northing: 1885974.057398
    test 669 line 129 toUtm8.gamma: 11.459804
    test 670 line 129 toUtm8.scale: 1.332207
    test 671 line 129 toUtm8.lat: 12.713794
    test 672 line 129 toUtm8.lon: 42.507018
    test 673 line 130 toUtm8.easting: 2293996.601155
    test 674 line 130 toUtm8.northing: 2392408.644221
    test 675 line 130 toUtm8.gamma: 7.791838
    test 676 line 130 toUtm8.scale: 1.065348
    test 677 line 130 toUtm8.lat: 20.238782
    test 678 line 130 toUtm8.lon: 21.566068
    test 679 line 131 toUtm8.easting: 1530603.839418
    test 680 line 131 toUtm8.northing: 7287841.459898
    test 681 line 131 toUtm8.gamma: 27.502921
    test 682 line 131 toUtm8.scale: 1.028416
    test 683 line 131 toUtm8.lat: 62.367847
    test 684 line 131 toUtm8.lon: 30.438849
    test 685 line 132 toUtm8.easting: 2660000.093152
    test 686 line 132 toUtm8.northing: 5161982.213248
    test 687 line 132 toUtm8.gamma: 22.629836
    test 688 line 132 toUtm8.scale: 1.087851
    test 689 line 132 toUtm8.lat: 41.891569
    test 690 line 132 toUtm8.lon: 31.959547
    test 691 line 133 toUtm8.easting: 5037478.329414
    test 692 line 133 toUtm8.northing: 8768172.379908
    test 693 line 133 toUtm8.gamma: 73.511182
    test 694 line 133 toUtm8.scale: 1.325919
    test 695 line 133 toUtm8.lat: 47.664248
    test 696 line 133 toUtm8.lon: 77.630062
    test 697 line 134 toUtm8.easting: 2289650.957799
    test 698 line 134 toUtm8.northing: 8784328.593607
    test 699 line 134 toUtm8.gamma: 60.786067
    test 700 line 134 toUtm8.scale: 1.064346
    test 701 line 134 toUtm8.lat: 67.259559
    test 702 line 134 toUtm8.lon: 62.715293
    test 703 line 135 toUtm8.easting: 647913.889744
    test 704 line 135 toUtm8.northing: 6742382.228217
    test 705 line 135 toUtm8.gamma: 10.252667
    test 706 line 135 toUtm8.scale: 1.004748
    test 707 line 135 toUtm8.lat: 60.295381
    test 708 line 135 toUtm8.lon: 11.763097
    test 709 line 136 toUtm8.easting: 1118372.698566
    test 710 line 136 toUtm8.northing: 9040627.942263
    test 711 line 136 toUtm8.gamma: 48.936803
    test 712 line 136 toUtm8.scale: 1.014920
    test 713 line 136 toUtm8.lat: 76.878914
    test 714 line 136 toUtm8.lon: 49.685773
    test 715 line 137 toUtm8.easting: 440696.510070
    test 716 line 137 toUtm8.northing: 5500355.826297
    test 717 line 137 toUtm8.gamma: 4.636104
    test 718 line 137 toUtm8.scale: 1.001986
    test 719 line 137 toUtm8.lat: 49.495349
    test 720 line 137 toUtm8.lon: 6.087551
    test 721 line 138 toUtm8.easting: 601728.149727
    test 722 line 138 toUtm8.northing: 9095352.048149
    test 723 line 138 toUtm8.gamma: 33.435771
    test 724 line 138 toUtm8.scale: 1.004027
    test 725 line 138 toUtm8.lat: 80.297265
    test 726 line 138 toUtm8.lon: 33.816372
    test 727 line 139 toUtm8.easting: 3481444.777827
    test 728 line 139 toUtm8.northing: 291665.708749
    test 729 line 139 toUtm8.gamma: 1.314726
    test 730 line 139 toUtm8.scale: 1.153534
    test 731 line 139 toUtm8.lat: 2.286437
    test 732 line 139 toUtm8.lon: 29.855149
    test 733 line 140 toUtm8.easting: 3515304.901524
    test 734 line 140 toUtm8.northing: 1443981.882918
    test 735 line 140 toUtm8.gamma: 6.641638
    test 736 line 140 toUtm8.scale: 1.156509
    test 737 line 140 toUtm8.lat: 11.264457
    test 738 line 140 toUtm8.lon: 30.743907
    test 739 line 141 toUtm8.easting: 160012.186959
    test 740 line 141 toUtm8.northing: 3922609.253231
    test 741 line 141 toUtm8.gamma: 1.022225
    test 742 line 141 toUtm8.scale: 0.999916
    test 743 line 141 toUtm8.lat: 35.434073
    test 744 line 141 toUtm8.lon: 1.762795
    test 745 line 142 toUtm8.easting: 4163744.245622
    test 746 line 142 toUtm8.northing: 936884.674804
    test 747 line 142 toUtm8.gamma: 4.892559
    test 748 line 142 toUtm8.scale: 1.222164
    test 749 line 142 toUtm8.lat: 6.923695
    test 750 line 142 toUtm8.lon: 35.289456
    test 751 line 143 toUtm8.easting: 6155200.017926
    test 752 line 143 toUtm8.northing: 6926306.628390
    test 753 line 143 toUtm8.gamma: 55.103258
    test 754 line 143 toUtm8.scale: 1.500556
    test 755 line 143 toUtm8.lat: 36.129672
    test 756 line 143 toUtm8.lon: 67.533176

    test skipped (18): line 144 toUtm8.'4.406528980638 81.965734206053 16263383.2854400911299 3591296.7313406507021 36.040254103487111035 6.58928781751888396522'

    test skipped (19): line 145 toUtm8.'8.474589009114 81.129945130597 14220995.5153984992101 5100587.4575033509156 47.314258427760984573 4.69320221531225352172'
    test 757 line 146 toUtm8.easting: 3173034.802372
    test 758 line 146 toUtm8.northing: 7263421.942957
    test 759 line 146 toUtm8.gamma: 45.215808
    test 760 line 146 toUtm8.scale: 1.125410
    test 761 line 146 toUtm8.lat: 53.907276
    test 762 line 146 toUtm8.lon: 51.252904

    test skipped (20): line 147 toUtm8.'22.120544817855 85.756781608119 10253274.0922039670098 8867574.2997916978265 79.198250285604314115 2.57237240666878171579'
    test 763 line 148 toUtm8.easting: 2415561.483230
    test 764 line 148 toUtm8.northing: 8813225.217097
    test 765 line 148 toUtm8.gamma: 62.548978
    test 766 line 148 toUtm8.scale: 1.071748
    test 767 line 148 toUtm8.lat: 66.444100
    test 768 line 148 toUtm8.lon: 64.532960
    test 769 line 149 toUtm8.easting: 9589179.293294  FAILED, KNOWN, expected 9589179.293295
    test 770 line 149 toUtm8.northing: 1777680.784144  FAILED, KNOWN, expected 1777680.784143
    test 771 line 149 toUtm8.gamma: 14.838483
    test 772 line 149 toUtm8.scale: 2.380716
    test 773 line 149 toUtm8.lat: 6.670965
    test 774 line 149 toUtm8.lon: 65.660408
    test 775 line 150 toUtm8.easting: 727939.438391
    test 776 line 150 toUtm8.northing: 3684363.236810
    test 777 line 150 toUtm8.gamma: 4.266227
    test 778 line 150 toUtm8.scale: 1.006140
    test 779 line 150 toUtm8.lat: 33.054057
    test 780 line 150 toUtm8.lon: 7.787458
    test 781 line 151 toUtm8.easting: 1250765.991085
    test 782 line 151 toUtm8.northing: 792869.242719
    test 783 line 151 toUtm8.gamma: 1.396497
    test 784 line 151 toUtm8.scale: 1.019026
    test 785 line 151 toUtm8.lat: 7.035525
    test 786 line 151 toUtm8.lon: 11.253707
    test 787 line 152 toUtm8.easting: 710421.705887
    test 788 line 152 toUtm8.northing: 5019406.075928
    test 789 line 152 toUtm8.gamma: 6.393949
    test 790 line 152 toUtm8.scale: 1.005812
    test 791 line 152 toUtm8.lat: 44.971340
    test 792 line 152 toUtm8.lon: 9.009304
    test 793 line 153 toUtm8.easting: 4600995.074643
    test 794 line 153 toUtm8.northing: 4505712.084593
    test 795 line 153 toUtm8.gamma: 27.997458
    test 796 line 153 toUtm8.scale: 1.271841
    test 797 line 153 toUtm8.lat: 30.821397
    test 798 line 153 toUtm8.lon: 45.970577
    test 799 line 154 toUtm8.easting: 557642.627782
    test 800 line 154 toUtm8.northing: 7006911.251644
    test 801 line 154 toUtm8.gamma: 9.769903
    test 802 line 154 toUtm8.scale: 1.003411
    test 803 line 154 toUtm8.lat: 62.763886
    test 804 line 154 toUtm8.lon: 10.960144
    test 805 line 155 toUtm8.easting: 4635062.294291
    test 806 line 155 toUtm8.northing: 2702556.153311
    test 807 line 155 toUtm8.gamma: 15.779547
    test 808 line 155 toUtm8.scale: 1.277178
    test 809 line 155 toUtm8.lat: 18.888611
    test 810 line 155 toUtm8.lon: 41.009871

    test skipped (21): line 156 toUtm8.'7.524119461376 81.050715469439 14554962.2559189870471 4716639.9085720199214 44.192751352918149954 4.96001986321419027847'
    test 811 line 157 toUtm8.easting: 882126.661736
    test 812 line 157 toUtm8.northing: 7947612.369506
    test 813 line 157 toUtm8.gamma: 22.429487
    test 814 line 157 toUtm8.scale: 1.009132
    test 815 line 157 toUtm8.lat: 70.063902
    test 816 line 157 toUtm8.lon: 23.705255

    test skipped (22): line 158 toUtm8.'3.556525834215 88.363529198819 20262021.6459832969292 8113827.8207957955275 76.936057264555500879 10.34909168211805703369'
    test 817 line 159 toUtm8.easting: 6500508.399850
    test 818 line 159 toUtm8.northing: 6956476.342368
    test 819 line 159 toUtm8.gamma: 56.237116
    test 820 line 159 toUtm8.scale: 1.563162
    test 821 line 159 toUtm8.lat: 34.551257
    test 822 line 159 toUtm8.lon: 69.111091
    test 823 line 160 toUtm8.easting: 3884036.641314
    test 824 line 160 toUtm8.northing: 6890167.411733
    test 825 line 160 toUtm8.gamma: 45.760130
    test 826 line 160 toUtm8.scale: 1.190167
    test 827 line 160 toUtm8.lat: 47.929051
    test 828 line 160 toUtm8.lon: 54.103418
    test 829 line 161 toUtm8.easting: 217855.546078
    test 830 line 161 toUtm8.northing: 6184108.122568
    test 831 line 161 toUtm8.gamma: 2.870993
    test 832 line 161 toUtm8.scale: 1.000182
    test 833 line 161 toUtm8.lat: 55.753536
    test 834 line 161 toUtm8.lon: 3.471798

    test skipped (23): line 162 toUtm8.'18.530847071862 86.555312055898 11384139.290401676268 8893889.9495562311576 79.77485364572019046 3.02467156922968230025'
    test 835 line 163 toUtm8.easting: 3469855.989805
    test 836 line 163 toUtm8.northing: 7723193.799228
    test 837 line 163 toUtm8.gamma: 53.114700
    test 838 line 163 toUtm8.scale: 1.150540
    test 839 line 163 toUtm8.lat: 54.510125
    test 840 line 163 toUtm8.lon: 58.556056

    test skipped (24): line 164 toUtm8.'42.864161881687 84.866325602975 5926165.994939154109 9385463.7327467371322 82.506981261616342016 1.45975761947329382411'
    test 841 line 165 toUtm8.easting: 5798639.662224
    test 842 line 165 toUtm8.northing: 5305387.640916
    test 843 line 165 toUtm8.gamma: 38.617257
    test 844 line 165 toUtm8.scale: 1.442263
    test 845 line 165 toUtm8.lat: 30.911943
    test 846 line 165 toUtm8.lon: 57.114102
    test 847 line 166 toUtm8.easting: 9464.934388
    test 848 line 166 toUtm8.northing: 6489121.624944
    test 849 line 166 toUtm8.gamma: 0.138696
    test 850 line 166 toUtm8.scale: 0.999601
    test 851 line 166 toUtm8.lat: 58.542493
    test 852 line 166 toUtm8.lon: 0.162593

    test skipped (25): line 167 toUtm8.'15.022689088683 85.792615487152 12575834.2756139069875 8356610.8954857643175 75.235223160840771295 3.59944161831319404851'
    test 853 line 168 toUtm8.easting: 2719653.543469
    test 854 line 168 toUtm8.northing: 9362389.163495
    test 855 line 168 toUtm8.gamma: 76.049670
    test 856 line 168 toUtm8.scale: 1.091315
    test 857 line 168 toUtm8.lat: 65.692275
    test 858 line 168 toUtm8.lon: 77.241377
    test 859 line 169 toUtm8.easting: 4845341.924698
    test 860 line 169 toUtm8.northing: 8710522.326901
    test 861 line 169 toUtm8.gamma: 72.320942
    test 862 line 169 toUtm8.scale: 1.300382
    test 863 line 169 toUtm8.lat: 48.806211
    test 864 line 169 toUtm8.lon: 76.486365

    test skipped (26): line 170 toUtm8.'56.436024794624 82.61156798689 3935261.5227628794258 9454271.6490618694486 81.162334302626197333 1.19476734082123451158'
    test 865 line 171 toUtm8.easting: 7074299.823000
    test 866 line 171 toUtm8.northing: 1648736.065055
    test 867 line 171 toUtm8.gamma: 12.145925
    test 868 line 171 toUtm8.scale: 1.687551
    test 869 line 171 toUtm8.lat: 8.766053
    test 870 line 171 toUtm8.lon: 54.367539
    test 871 line 172 toUtm8.easting: 3689072.579308
    test 872 line 172 toUtm8.northing: 2230802.665211
    test 873 line 172 toUtm8.gamma: 10.856248
    test 874 line 172 toUtm8.scale: 1.172689
    test 875 line 172 toUtm8.lat: 17.095495
    test 876 line 172 toUtm8.lon: 33.059128
    test 877 line 173 toUtm8.easting: 8102565.885587
    test 878 line 173 toUtm8.northing: 5167396.617580
    test 879 line 173 toUtm8.gamma: 42.324886
    test 880 line 173 toUtm8.scale: 1.921927
    test 881 line 173 toUtm8.lat: 22.142861
    test 882 line 173 toUtm8.lon: 67.200684
    test 883 line 174 toUtm8.easting: 8181271.353564
    test 884 line 174 toUtm8.northing: 4425436.547185
    test 885 line 174 toUtm8.gamma: 35.900845
    test 886 line 174 toUtm8.scale: 1.945017
    test 887 line 174 toUtm8.lat: 19.222623
    test 888 line 174 toUtm8.lon: 65.180785
    test 889 line 175 toUtm8.easting: 767067.394003
    test 890 line 175 toUtm8.northing: 3701745.857296
    test 891 line 175 toUtm8.gamma: 4.519201
    test 892 line 175 toUtm8.scale: 1.006863
    test 893 line 175 toUtm8.lat: 33.182474
    test 894 line 175 toUtm8.lon: 8.216952
    test 895 line 176 toUtm8.easting: 6688114.168572
    test 896 line 176 toUtm8.northing: 2052857.299639
    test 897 line 176 toUtm8.gamma: 14.766191
    test 898 line 176 toUtm8.scale: 1.607200
    test 899 line 176 toUtm8.lat: 11.417963
    test 900 line 176 toUtm8.lon: 52.808691
    test 901 line 177 toUtm8.easting: 5608408.773761
    test 902 line 177 toUtm8.northing: 3859055.659110
    test 903 line 177 toUtm8.gamma: 26.244151
    test 904 line 177 toUtm8.scale: 1.413463
    test 905 line 177 toUtm8.lat: 23.836688
    test 906 line 177 toUtm8.lon: 50.500180
    test 907 line 178 toUtm8.easting: 3836942.765275
    test 908 line 178 toUtm8.northing: 6415467.634326
    test 909 line 178 toUtm8.gamma: 40.575885
    test 910 line 178 toUtm8.scale: 1.185615
    test 911 line 178 toUtm8.lat: 45.550020
    test 912 line 178 toUtm8.lon: 50.148036
    test 913 line 179 toUtm8.easting: 1298730.366025
    test 914 line 179 toUtm8.northing: 6021453.000792
    test 915 line 179 toUtm8.gamma: 15.613320
    test 916 line 179 toUtm8.scale: 1.020367
    test 917 line 179 toUtm8.lat: 52.746079
    test 918 line 179 toUtm8.lon: 19.343926
    test 919 line 180 toUtm8.easting: 416934.289208
    test 920 line 180 toUtm8.northing: 7295683.451705
    test 921 line 180 toUtm8.gamma: 8.238232
    test 922 line 180 toUtm8.scale: 1.001729
    test 923 line 180 toUtm8.lat: 65.513348
    test 924 line 180 toUtm8.lon: 9.039529
    test 925 line 181 toUtm8.easting: 4336076.850889
    test 926 line 181 toUtm8.northing: 7617975.722779
    test 927 line 181 toUtm8.gamma: 56.537088
    test 928 line 181 toUtm8.scale: 1.238582
    test 929 line 181 toUtm8.lat: 48.709795
    test 930 line 181 toUtm8.lon: 63.554005
    test 931 line 182 toUtm8.easting: 168047.336980
    test 932 line 182 toUtm8.northing: 2185000.046530
    test 933 line 182 toUtm8.gamma: 0.542187
    test 934 line 182 toUtm8.scale: 0.999949
    test 935 line 182 toUtm8.lat: 19.753509
    test 936 line 182 toUtm8.lon: 1.603846
    test 937 line 183 toUtm8.easting: 8276281.328790
    test 938 line 183 toUtm8.northing: 263444.350545
    test 939 line 183 toUtm8.gamma: 2.071435
    test 940 line 183 toUtm8.scale: 1.980314
    test 941 line 183 toUtm8.lat: 1.202816
    test 942 line 183 toUtm8.lon: 59.377276
    test 943 line 184 toUtm8.easting: 4772573.810710
    test 944 line 184 toUtm8.northing: 6765710.336002
    test 945 line 184 toUtm8.gamma: 48.857561
    test 946 line 184 toUtm8.scale: 1.291911
    test 947 line 184 toUtm8.lat: 42.564975
    test 948 line 184 toUtm8.lon: 59.356947
    test 949 line 185 toUtm8.easting: 5427755.074639
    test 950 line 185 toUtm8.northing: 1556055.820924
    test 951 line 185 toUtm8.gamma: 9.862178
    test 952 line 185 toUtm8.scale: 1.387394
    test 953 line 185 toUtm8.lat: 10.090572
    test 954 line 185 toUtm8.lon: 44.604132
    test 955 line 186 toUtm8.easting: 11588458.616240  FAILED, KNOWN, expected 11588458.616041
    test 956 line 186 toUtm8.northing: 5707993.922683  FAILED, KNOWN, expected 5707993.922613
    test 957 line 186 toUtm8.gamma: 50.784827
    test 958 line 186 toUtm8.scale: 3.149567
    test 959 line 186 toUtm8.lat: 14.133028
    test 960 line 186 toUtm8.lon: 78.097533
    test 961 line 187 toUtm8.easting: 7152433.802688
    test 962 line 187 toUtm8.northing: 761390.695844
    test 963 line 187 toUtm8.gamma: 5.607350
    test 964 line 187 toUtm8.scale: 1.705261
    test 965 line 187 toUtm8.lat: 4.031123
    test 966 line 187 toUtm8.lon: 54.048782
    test 967 line 188 toUtm8.easting: 3105651.390901
    test 968 line 188 toUtm8.northing: 9426026.169064
    test 969 line 188 toUtm8.gamma: 78.750206
    test 970 line 188 toUtm8.scale: 1.119737
    test 971 line 188 toUtm8.lat: 62.746603
    test 972 line 188 toUtm8.lon: 79.968641
    test 973 line 189 toUtm8.easting: 2959009.639022
    test 974 line 189 toUtm8.northing: 8339242.269282
    test 975 line 189 toUtm8.gamma: 58.460865
    test 976 line 189 toUtm8.scale: 1.108554
    test 977 line 189 toUtm8.lat: 60.626429
    test 978 line 189 toUtm8.lon: 61.851551
    test 979 line 190 toUtm8.easting: 8640472.267145
    test 980 line 190 toUtm8.northing: 6230320.417931
    test 981 line 190 toUtm8.gamma: 52.816810
    test 982 line 190 toUtm8.scale: 2.062973
    test 983 line 190 toUtm8.lat: 23.600626
    test 984 line 190 toUtm8.lon: 72.811634
    test 985 line 191 toUtm8.easting: 811352.108932
    test 986 line 191 toUtm8.northing: 9816129.813481
    test 987 line 191 toUtm8.gamma: 77.299184
    test 988 line 191 toUtm8.scale: 1.007651
    test 989 line 191 toUtm8.lat: 82.572236
    test 990 line 191 toUtm8.lon: 77.402323
    test 991 line 192 toUtm8.easting: 6521874.973458
    test 992 line 192 toUtm8.northing: 1053612.479744
    test 993 line 192 toUtm8.gamma: 7.407328
    test 994 line 192 toUtm8.scale: 1.575529
    test 995 line 192 toUtm8.lat: 6.030051
    test 996 line 192 toUtm8.lon: 50.783505
    test 997 line 193 toUtm8.easting: 3477983.997875
    test 998 line 193 toUtm8.northing: 5651613.325947
    test 999 line 193 toUtm8.gamma: 31.530673
    test 1000 line 193 toUtm8.scale: 1.151875
    test 1001 line 193 toUtm8.lat: 42.411523
    test 1002 line 193 toUtm8.lon: 42.258009
    test 1003 line 194 toUtm8.easting: 629892.822243
    test 1004 line 194 toUtm8.northing: 3283914.910451
    test 1005 line 194 toUtm8.gamma: 3.210482
    test 1006 line 194 toUtm8.scale: 1.004499
    test 1007 line 194 toUtm8.lat: 29.526120
    test 1008 line 194 toUtm8.lon: 6.493069
    test 1009 line 195 toUtm8.easting: 3381879.687227
    test 1010 line 195 toUtm8.northing: 5103629.325665
    test 1011 line 195 toUtm8.gamma: 26.748108
    test 1012 line 195 toUtm8.scale: 1.143559
    test 1013 line 195 toUtm8.lat: 39.021853
    test 1014 line 195 toUtm8.lon: 38.641779
    test 1015 line 196 toUtm8.easting: 2815986.534177
    test 1016 line 196 toUtm8.northing: 9387029.120718
    test 1017 line 196 toUtm8.gamma: 76.967262
    test 1018 line 196 toUtm8.scale: 1.098032
    test 1019 line 196 toUtm8.lat: 64.971850
    test 1020 line 196 toUtm8.lon: 78.151893
    test 1021 line 197 toUtm8.easting: 3398195.889603
    test 1022 line 197 toUtm8.northing: 9138936.031490
    test 1023 line 197 toUtm8.gamma: 74.477499
    test 1024 line 197 toUtm8.scale: 1.144009
    test 1025 line 197 toUtm8.lat: 59.961819
    test 1026 line 197 toUtm8.lon: 76.473422
    test 1027 line 198 toUtm8.easting: 2421734.754637
    test 1028 line 198 toUtm8.northing: 5002372.094991
    test 1029 line 198 toUtm8.gamma: 20.017082
    test 1030 line 198 toUtm8.scale: 1.072592
    test 1031 line 198 toUtm8.lat: 41.374040
    test 1032 line 198 toUtm8.lon: 28.848343
    test 1033 line 199 toUtm8.easting: 2360869.895525
    test 1034 line 199 toUtm8.northing: 9553298.449536
    test 1035 line 199 toUtm8.gamma: 78.848205
    test 1036 line 199 toUtm8.scale: 1.068453
    test 1037 line 199 toUtm8.lat: 68.946087
    test 1038 line 199 toUtm8.lon: 79.574523

    test skipped (27): line 200 toUtm8.'79.275096210569 83.551272329394 1196539.9721941076965 9861920.8362302532842 83.437668440198132309 1.01713723718699411107'
    test 1039 line 201 toUtm8.easting: 1327758.704795
    test 1040 line 201 toUtm8.northing: 2375509.241683
    test 1041 line 201 toUtm8.gamma: 4.617572
    test 1042 line 201 toUtm8.scale: 1.021465
    test 1043 line 201 toUtm8.lat: 21.000252
    test 1044 line 201 toUtm8.lon: 12.697444
    test 1045 line 202 toUtm8.easting: 2070860.327644
    test 1046 line 202 toUtm8.northing: 8604500.719581
    test 1047 line 202 toUtm8.gamma: 54.722761
    test 1048 line 202 toUtm8.scale: 1.052469
    test 1049 line 202 toUtm8.lat: 68.015227
    test 1050 line 202 toUtm8.lon: 56.732419
    test 1051 line 203 toUtm8.easting: 6564776.654864
    test 1052 line 203 toUtm8.northing: 8171207.177379
    test 1053 line 203 toUtm8.gamma: 69.237523
    test 1054 line 203 toUtm8.scale: 1.573894
    test 1055 line 203 toUtm8.lat: 37.423675
    test 1056 line 203 toUtm8.lon: 76.947359
    test 1057 line 204 toUtm8.easting: 592653.553821
    test 1058 line 204 toUtm8.northing: 6125529.810052
    test 1059 line 204 toUtm8.gamma: 7.600785
    test 1060 line 204 toUtm8.scale: 1.003912
    test 1061 line 204 toUtm8.lat: 54.922707
    test 1062 line 204 toUtm8.lon: 9.260818
    test 1063 line 205 toUtm8.easting: 693459.671821
    test 1064 line 205 toUtm8.northing: 6943779.991032
    test 1065 line 205 toUtm8.gamma: 11.787587
    test 1066 line 205 toUtm8.scale: 1.005496
    test 1067 line 205 toUtm8.lat: 61.982810
    test 1068 line 205 toUtm8.lon: 13.299659
    test 1069 line 206 toUtm8.easting: 1838956.187625
    test 1070 line 206 toUtm8.northing: 3511959.612381
    test 1071 line 206 toUtm8.gamma: 9.844313
    test 1072 line 206 toUtm8.scale: 1.041603
    test 1073 line 206 toUtm8.lat: 30.324214
    test 1074 line 206 toUtm8.lon: 18.959769
    test 1075 line 207 toUtm8.easting: 4460690.884597
    test 1076 line 207 toUtm8.northing: 5541873.235403
    test 1077 line 207 toUtm8.gamma: 35.768613
    test 1078 line 207 toUtm8.scale: 1.254179
    test 1079 line 207 toUtm8.lat: 37.629667
    test 1080 line 207 toUtm8.lon: 49.649131
    test 1081 line 208 toUtm8.easting: 2311168.998941
    test 1082 line 208 toUtm8.northing: 9480561.869119
    test 1083 line 208 toUtm8.gamma: 76.828257
    test 1084 line 208 toUtm8.scale: 1.065556
    test 1085 line 208 toUtm8.lat: 69.225574
    test 1086 line 208 toUtm8.lon: 77.656135
    test 1087 line 209 toUtm8.easting: 4111775.114451
    test 1088 line 209 toUtm8.northing: 6509014.348792
    test 1089 line 209 toUtm8.gamma: 43.052130
    test 1090 line 209 toUtm8.scale: 1.214125
    test 1091 line 209 toUtm8.lat: 44.698478
    test 1092 line 209 toUtm8.lon: 52.979304
    test 1093 line 210 toUtm8.easting: 75358.261962
    test 1094 line 210 toUtm8.northing: 7711258.662251
    test 1095 line 210 toUtm8.gamma: 1.806297
    test 1096 line 210 toUtm8.scale: 0.999669
    test 1097 line 210 toUtm8.lat: 69.499594
    test 1098 line 210 toUtm8.lon: 1.928336

    test skipped (28): line 211 toUtm8.'27.981363604998 86.061112755721 8781885.2291162503299 9184776.4522114918448 81.795538514711932534 2.09490761781464961377'
    test 1099 line 212 toUtm8.easting: 954378.415174
    test 1100 line 212 toUtm8.northing: 7449110.669807
    test 1101 line 212 toUtm8.gamma: 19.380657
    test 1102 line 212 toUtm8.scale: 1.010768
    test 1103 line 212 toUtm8.lat: 65.699839
    test 1104 line 212 toUtm8.lon: 21.104725
    test 1105 line 213 toUtm8.easting: 720971.793706
    test 1106 line 213 toUtm8.northing: 5265195.121555
    test 1107 line 213 toUtm8.gamma: 7.002995
    test 1108 line 213 toUtm8.scale: 1.005995
    test 1109 line 213 toUtm8.lat: 47.143648
    test 1110 line 213 toUtm8.lon: 9.512189
    test 1111 line 214 toUtm8.easting: 561561.493937
    test 1112 line 214 toUtm8.northing: 989910.236221
    test 1113 line 214 toUtm8.gamma: 0.793118
    test 1114 line 214 toUtm8.scale: 1.003505
    test 1115 line 214 toUtm8.lat: 8.920167
    test 1116 line 214 toUtm8.lon: 5.101513
    test 1117 line 215 toUtm8.easting: 3446829.634468
    test 1118 line 215 toUtm8.northing: 9232868.155664
    test 1119 line 215 toUtm8.gamma: 76.279075
    test 1120 line 215 toUtm8.scale: 1.148263
    test 1121 line 215 toUtm8.lat: 59.778971
    test 1122 line 215 toUtm8.lon: 78.080322

    test skipped (29): line 216 toUtm8.'55.865310107291 87.384288430943 4048307.5459092527942 9800416.4229977935137 86.843918034217523739 1.20649504624906774925'
    test 1123 line 217 toUtm8.easting: 8973188.480293
    test 1124 line 217 toUtm8.northing: 7042230.087021
    test 1125 line 217 toUtm8.gamma: 60.872456
    test 1126 line 217 toUtm8.scale: 2.156098
    test 1127 line 217 toUtm8.lat: 24.310973
    test 1128 line 217 toUtm8.lon: 76.823777
    test 1129 line 218 toUtm8.easting: 126314.191618
    test 1130 line 218 toUtm8.northing: 396006.687921
    test 1131 line 218 toUtm8.gamma: 0.071065
    test 1132 line 218 toUtm8.scale: 0.999798
    test 1133 line 218 toUtm8.lat: 3.582041
    test 1134 line 218 toUtm8.lon: 1.137286
    test 1135 line 219 toUtm8.easting: 5247652.345647
    test 1136 line 219 toUtm8.northing: 8670513.359752
    test 1137 line 219 toUtm8.gamma: 72.700498
    test 1138 line 219 toUtm8.scale: 1.355272
    test 1139 line 219 toUtm8.lat: 46.124233
    test 1140 line 219 toUtm8.lon: 77.313118

    test skipped (30): line 220 toUtm8.'31.17139056295 87.104503768139 8103656.8381187232079 9469794.014736839373 84.490673011906282841 1.91216400164486142107'
    test 1141 line 221 toUtm8.easting: 6300112.758236
    test 1142 line 221 toUtm8.northing: 93835.917364
    test 1143 line 221 toUtm8.gamma: 0.644805
    test 1144 line 221 toUtm8.scale: 1.534073
    test 1145 line 221 toUtm8.lat: 0.553171
    test 1146 line 221 toUtm8.lon: 49.117104
    test 1147 line 222 toUtm8.easting: 3894813.593782
    test 1148 line 222 toUtm8.northing: 4833832.341027
    test 1149 line 222 toUtm8.gamma: 27.453298
    test 1150 line 222 toUtm8.scale: 1.192135
    test 1151 line 222 toUtm8.lat: 35.361587
    test 1152 line 222 toUtm8.lon: 41.860599
    test 1153 line 223 toUtm8.easting: 402511.346712
    test 1154 line 223 toUtm8.northing: 3520621.561911
    test 1155 line 223 toUtm8.gamma: 2.238474
    test 1156 line 223 toUtm8.scale: 1.001599
    test 1157 line 223 toUtm8.lat: 31.750314
    test 1158 line 223 toUtm8.lon: 4.248167
    test 1159 line 224 toUtm8.easting: 5357378.503148
    test 1160 line 224 toUtm8.northing: 2772997.602234
    test 1161 line 224 toUtm8.gamma: 17.823560
    test 1162 line 224 toUtm8.scale: 1.376031
    test 1163 line 224 toUtm8.lat: 17.924336
    test 1164 line 224 toUtm8.lon: 46.096402
    test 1165 line 225 toUtm8.easting: 2807553.985866
    test 1166 line 225 toUtm8.northing: 8177847.980275
    test 1167 line 225 toUtm8.gamma: 54.680045
    test 1168 line 225 toUtm8.scale: 1.097531
    test 1169 line 225 toUtm8.lat: 60.931488
    test 1170 line 225 toUtm8.lon: 58.221214

    test skipped (31): line 226 toUtm8.'5.358150979521 87.556213284144 18289045.16650076146 7792942.3396035398889 73.216494415207315628 8.09800850850277481729'

    test skipped (32): line 227 toUtm8.'28.616673489124 80.452426461437 8376822.4595378634541 8128174.6238782329989 70.920116640676321501 1.98487312027093768388'
    test 1171 line 228 toUtm8.easting: 11898068.352950  FAILED, KNOWN, expected 11898068.353272
    test 1172 line 228 toUtm8.northing: 4772439.493355  FAILED, KNOWN, expected 4772439.493697
    test 1173 line 228 toUtm8.gamma: 42.613968
    test 1174 line 228 toUtm8.scale: 3.314412
    test 1175 line 228 toUtm8.lat: 11.709763
    test 1176 line 228 toUtm8.lon: 76.760295
    test 1177 line 229 toUtm8.easting: 10550946.939052  FAILED, KNOWN, expected 10550946.939050
    test 1178 line 229 toUtm8.northing: 3851968.815305  FAILED, KNOWN, expected 3851968.815295
    test 1179 line 229 toUtm8.gamma: 33.383025
    test 1180 line 229 toUtm8.scale: 2.724754
    test 1181 line 229 toUtm8.lat: 12.009498
    test 1182 line 229 toUtm8.lon: 71.782351

    test skipped (33): line 230 toUtm8.'37.62978386356 85.795687334213 6828299.1236065501034 9394803.2274626281036 83.181386462369626591 1.62435875189611017521'
    test 1183 line 231 toUtm8.easting: 11162550.334001  FAILED, KNOWN, expected 11162550.334022
    test 1184 line 231 toUtm8.northing: 2640267.279546  FAILED, KNOWN, expected 2640267.279593
    test 1185 line 231 toUtm8.gamma: 23.145404
    test 1186 line 231 toUtm8.scale: 2.998408
    test 1187 line 231 toUtm8.lat: 7.721128
    test 1188 line 231 toUtm8.lon: 71.662731
    test 1189 line 232 toUtm8.easting: 4411584.447941
    test 1190 line 232 toUtm8.northing: 4956173.694407
    test 1191 line 232 toUtm8.gamma: 30.713919
    test 1192 line 232 toUtm8.scale: 1.248736
    test 1193 line 232 toUtm8.lat: 34.295026
    test 1194 line 232 toUtm8.lon: 46.442191
    test 1195 line 233 toUtm8.easting: 672108.897905
    test 1196 line 233 toUtm8.northing: 4751554.657054
    test 1197 line 233 toUtm8.gamma: 5.569178
    test 1198 line 233 toUtm8.scale: 1.005162
    test 1199 line 233 toUtm8.lat: 42.622496
    test 1200 line 233 toUtm8.lon: 8.193605
    test 1201 line 234 toUtm8.easting: 5022964.290579
    test 1202 line 234 toUtm8.northing: 6860418.199502
    test 1203 line 234 toUtm8.gamma: 50.862230
    test 1204 line 234 toUtm8.scale: 1.324925
    test 1205 line 234 toUtm8.lat: 41.667780
    test 1206 line 234 toUtm8.lon: 61.518288
    test 1207 line 235 toUtm8.easting: 1669655.595207
    test 1208 line 235 toUtm8.northing: 4152086.537021
    test 1209 line 235 toUtm8.gamma: 11.110237
    test 1210 line 235 toUtm8.scale: 1.034138
    test 1211 line 235 toUtm8.lat: 36.060369
    test 1212 line 235 toUtm8.lon: 18.444112
    test 1213 line 236 toUtm8.easting: 6055876.729655
    test 1214 line 236 toUtm8.northing: 4896837.552619
    test 1215 line 236 toUtm8.gamma: 35.799747
    test 1216 line 236 toUtm8.scale: 1.485967
    test 1217 line 236 toUtm8.lat: 27.948091
    test 1218 line 236 toUtm8.lon: 56.816429
    test 1219 line 237 toUtm8.easting: 1209214.164379
    test 1220 line 237 toUtm8.northing: 7266409.859178
    test 1221 line 237 toUtm8.gamma: 22.319633
    test 1222 line 237 toUtm8.scale: 1.017554
    test 1223 line 237 toUtm8.lat: 63.386030
    test 1224 line 237 toUtm8.lon: 24.662716
    test 1225 line 238 toUtm8.easting: 5154564.559584
    test 1226 line 238 toUtm8.northing: 698118.349975
    test 1227 line 238 toUtm8.gamma: 4.242360
    test 1228 line 238 toUtm8.scale: 1.347481
    test 1229 line 238 toUtm8.lat: 4.680922
    test 1230 line 238 toUtm8.lon: 42.114426
    test 1231 line 239 toUtm8.easting: 2695149.806543
    test 1232 line 239 toUtm8.northing: 8208197.765605
    test 1233 line 239 toUtm8.gamma: 54.178615
    test 1234 line 239 toUtm8.scale: 1.089730
    test 1235 line 239 toUtm8.lat: 61.826625
    test 1236 line 239 toUtm8.lon: 57.525096
    test 1237 line 240 toUtm8.easting: 3394792.327820
    test 1238 line 240 toUtm8.northing: 3217583.415552
    test 1239 line 240 toUtm8.gamma: 15.165863
    test 1240 line 240 toUtm8.scale: 1.145285
    test 1241 line 240 toUtm8.lat: 25.104353
    test 1242 line 240 toUtm8.lon: 32.528660
    test 1243 line 241 toUtm8.easting: 1429160.966985
    test 1244 line 241 toUtm8.northing: 8212685.362032
    test 1245 line 241 toUtm8.gamma: 37.484904
    test 1246 line 241 toUtm8.scale: 1.024676
    test 1247 line 241 toUtm8.lat: 69.678351
    test 1248 line 241 toUtm8.lon: 39.275513

    test skipped (34): line 242 toUtm8.'29.671383681805 84.19659549085 8343387.9980651104898 8885196.9545780118644 78.561937382568633298 1.97473261886829061763'
    test 1249 line 243 toUtm8.easting: 1990722.928606
    test 1250 line 243 toUtm8.northing: 7569202.065162
    test 1251 line 243 toUtm8.gamma: 37.075276
    test 1252 line 243 toUtm8.scale: 1.048486
    test 1253 line 243 toUtm8.lat: 62.300208
    test 1254 line 243 toUtm8.lon: 40.474051
    test 1255 line 244 toUtm8.easting: 1554980.099559
    test 1256 line 244 toUtm8.northing: 1449423.919586
    test 1257 line 244 toUtm8.gamma: 3.188328
    test 1258 line 244 toUtm8.scale: 1.029664
    test 1259 line 244 toUtm8.lat: 12.721776
    test 1260 line 244 toUtm8.lon: 14.190003
    test 1261 line 245 toUtm8.easting: 785205.450196
    test 1262 line 245 toUtm8.northing: 5575158.423096
    test 1263 line 245 toUtm8.gamma: 8.388417
    test 1264 line 245 toUtm8.scale: 1.007181
    test 1265 line 245 toUtm8.lat: 49.811296
    test 1266 line 245 toUtm8.lon: 10.925011
    test 1267 line 246 toUtm8.easting: 3310405.988313
    test 1268 line 246 toUtm8.northing: 5955022.233881
    test 1269 line 246 toUtm8.gamma: 33.007587
    test 1270 line 246 toUtm8.scale: 1.137141
    test 1271 line 246 toUtm8.lat: 45.132680
    test 1272 line 246 toUtm8.lon: 42.478624
    test 1273 line 247 toUtm8.easting: 4733460.960666
    test 1274 line 247 toUtm8.northing: 129034.889816
    test 1275 line 247 toUtm8.gamma: 0.737551
    test 1276 line 247 toUtm8.scale: 1.290439
    test 1277 line 247 toUtm8.lat: 0.904279
    test 1278 line 247 toUtm8.lon: 39.078412
    test 1279 line 248 toUtm8.easting: 3322708.343909
    test 1280 line 248 toUtm8.northing: 3864738.078742
    test 1281 line 248 toUtm8.gamma: 18.472566
    test 1282 line 248 toUtm8.scale: 1.138838
    test 1283 line 248 toUtm8.lat: 30.163605
    test 1284 line 248 toUtm8.lon: 33.577996

    test skipped (35): line 249 toUtm8.'27.643243707755 81.892859091432 8672864.4172042475623 8333465.9834441061554 73.206272638168122883 2.06544053870286774312'

    test skipped (36): line 250 toUtm8.'18.201207657521 82.434617649311 11126818.23119627031 7618712.1749910723126 67.88717347393512063 2.92241673495261070414'

    test skipped (37): line 251 toUtm8.'28.804576432117 89.886072420251 8650100.9817967479337 9975084.1689971279206 89.767446308690086924 2.05728879562910108817'
    test 1285 line 252 toUtm8.easting: 2212701.180192
    test 1286 line 252 toUtm8.northing: 650348.100229
    test 1287 line 252 toUtm8.gamma: 1.970441
    test 1288 line 252 toUtm8.scale: 1.060830
    test 1289 line 252 toUtm8.lat: 5.542998
    test 1290 line 252 toUtm8.lon: 19.589578
    test 1291 line 253 toUtm8.easting: 6890222.326618
    test 1292 line 253 toUtm8.northing: 7506813.499547
    test 1293 line 253 toUtm8.gamma: 62.684825
    test 1294 line 253 toUtm8.scale: 1.638488
    test 1295 line 253 toUtm8.lat: 34.237147
    test 1296 line 253 toUtm8.lon: 73.678164
    test 1297 line 254 toUtm8.easting: 6692260.067325
    test 1298 line 254 toUtm8.northing: 4244174.008110
    test 1299 line 254 toUtm8.gamma: 31.812920
    test 1300 line 254 toUtm8.scale: 1.604640
    test 1301 line 254 toUtm8.lat: 22.704949
    test 1302 line 254 toUtm8.lon: 57.877010
    test 1303 line 255 toUtm8.easting: 1225564.137190
    test 1304 line 255 toUtm8.northing: 4778923.924144
    test 1305 line 255 toUtm8.gamma: 10.083419
    test 1306 line 255 toUtm8.scale: 1.018134
    test 1307 line 255 toUtm8.lat: 42.192424
    test 1308 line 255 toUtm8.lon: 14.828196
    test 1309 line 256 toUtm8.easting: 12341116.155088  FAILED, KNOWN, expected 12341116.154950
    test 1310 line 256 toUtm8.northing: 5081855.520287  FAILED, KNOWN, expected 5081855.521966
    test 1311 line 256 toUtm8.gamma: 45.712545  FAILED, KNOWN, expected 45.712546
    test 1312 line 256 toUtm8.scale: 3.535170
    test 1313 line 256 toUtm8.lat: 11.481151
    test 1314 line 256 toUtm8.lon: 78.189236
    test 1315 line 257 toUtm8.easting: 6673845.021771
    test 1316 line 257 toUtm8.northing: 1177587.190565
    test 1317 line 257 toUtm8.gamma: 8.389141
    test 1318 line 257 toUtm8.scale: 1.605171
    test 1319 line 257 toUtm8.lat: 6.609626
    test 1320 line 257 toUtm8.lon: 51.735783
    test 1321 line 258 toUtm8.easting: 6966354.690417
    test 1322 line 258 toUtm8.northing: 3641802.005093
    test 1323 line 258 toUtm8.gamma: 27.409636
    test 1324 line 258 toUtm8.scale: 1.661469
    test 1325 line 258 toUtm8.lat: 19.059369
    test 1326 line 258 toUtm8.lon: 57.526439
    test 1327 max forward error: 1.678809e-03
    test 1328 max reverse error: 3.170463e-09
    test 1329 Utm.scale0: 0.9996
    test 1330 Utm.datum: WGS84
    test 1331 Utm.datum.ellipsoid.KsOrder: 8
    test 1332 WGS84.KsOrder: 8

    23 of 1332 testUtmTMcoords.py tests (1.7%) FAILED, ALL KNOWN, 37 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 256.051 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testUtmUps.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.F_DMS from .dms by testUtmUps.py line 11
# lazily imported pygeodesy.parseUTMUPS5 from .utmups by testUtmUps.py line 11
# lazily imported pygeodesy.toUps8 from .ups by testUtmUps.py line 11
# lazily imported pygeodesy.toUtmUps8 from .utmups by testUtmUps.py line 11
# lazily imported pygeodesy.UtmUps from .utmups by testUtmUps.py line 11
# lazily imported pygeodesy.utmupsValidateOK from .utmups by testUtmUps.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testUtmUps.py line 200

    testing testUtmUps.py 23.03.27 (module pygeodesy.utmups 24.06.11) isLazy=3
    test 1 UtmUps: 00 N 448251.0 5411932.0001
    test 2 UtmUps.ValidateOK: True
    test 3 UtmUps: 00 N 448252 5411933
    test 4 UtmUps: 00 N 448251.795 5411932.678
    test 5 UtmUps: 00Z N 448251.8 5411932.7 n/a n/a
    test 6 UtmUps.ValidateOK: True
    test 7 UtmUps.toLatLon: 43.684097°N, 175.265195°E
    test 8 UtmUps.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 9 LL.toUtmUps: 60 N 360177 4838249
    test 10 LL.toUtmUps: 60 N 360176.686 4838249.416
    test 11 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839167°, S:0.99984048]
    test 12 LL.toUtmUps.ValidateOK: True
    test 13 toUtmUps8ID1: 00Y N 1530125.78 2426773.6 -132.24798917° 0.99647445
    test 14 toUtmUps8ID1.ValidateOK: True
    test 15 toUtmUps8ID1.ValidateOK: True
    test 16 toUtmUps8ID2: 38 N 467367.68 8100752.13 -57.37878422′ 0.99961302  FAILED, KNOWN, expected 38 N 3320416.75 632668.43 +44.0° 1.01619505
    test 17 toUtmUps8ID2.ValidateOK: True
    test 18 toUtmUps8ID2.ValidateOK: True
    test 19 toUtmUps8ID2: 00 N 3320416.75 632668.43 +44.0° 1.01619505
    test 20 toUtmUps8ID2.ValidateOK: easting (3320416.7473598532): outside UPS range [1300000, 2700000]  FAILED, KNOWN, expected True
    test 21 toUtmUps8ID3: 00B S 2222979.47 1797474.9 -132.24786194° 0.99455723
    test 22 toUtmUps8ID3.ValidateOK: True
    test 23 toUtmUps8ID3.ValidateOK: True
    test 24 UtmUps.toLatLonID4.ValidateOK: True
    test 25 UtmUps.toLatLonID4: 84°17′14.04″N, 132°14′52.76″W
    test 26 UtmUps.toLatLonID4: 84.287234°N, 132.247989°W
    test 27 UtmUps.ValidateOK: easting (3320416.75): outside UPS range [1300000, 2700000]  FAILED, KNOWN, expected True
    test 28 UtmUps.toLatLonID5: 73°00′00.0″N, 044°00′00.0″E
    test 29 UtmUps.toLatLonID5: 73.0°N, 044.0°E
    test 30 UtmUps.ValidateOK: True
    test 31 UtmUps.toLatLonID6: 87°17′14.4″S, 132°14′52.3″E
    test 32 UtmUps.toLatLonID6: 87.287333°S, 132.247861°E
    test 33 latlon1: 61.2°N, 149.9°W
    test 34 toUtmUps8: 06 N 344174 6788521
    test 35 toUtmUps8: 06V N 344173.864114 6788521.418164 -2.54179531° 0.99989751
    test 36 toUtmUps8.ValidateOK: True
# lazily imported pygeodesy.mgrs by utmupsBase.py line 431
    test 37 toMgrs: 06V UN 44173 88521
    test 38 latlon2: LatLon(83°37′37.2″N, 032°39′50.4″W)
    test 39 toUtmUps8: 25 N 504164 9286466
    test 40 toUtmUps8: [Z:25X, H:N, E:504164, N:9286466]
    test 41 toUtmUps8: 25X N 504163.899383 9286465.664902 +20.03542083′ 0.99960021
    test 42 toUtmUps8.ValidateOK: True
    test 43 toMgrs: 25X EN 04163 86465
    test 44 latlon3: 33.33°N, 044.44°E
    test 45 toUtmUps8: 38 N 447882 3688012
    test 46 toUtmUps8: 38S N 447882.413169 3688011.692733 -18.46228466′ 0.99963349
    test 47 toUtmUps8.ValidateOK: True
    test 48 toMgrs: 38S MB 47882 88011
    test 49 latlon4: 79.0°S, 079.0°W
    test 50 toUtmUps8: 17 S 542594 1229296
    test 51 toUtmUps8: 17C S 542594.134555 1229296.157301 -1.96328341° 0.99962217
    test 52 toUtmUps8.ValidateOK: True
    test 53 toMgrs: 17C NN 42594 29296
    test 54 latlon5: 84.0°N, 084.0°E
    test 55 toUtmUps8: 00 N 2663075 1930308
    test 56 toUtmUps8: 00Z N 2663075.299562 1930307.977716 +84.0° 0.99673
    test 57 toUtmUps8.ValidateOK: True
    test 58 latlon6: 13.4125°N, 103.8667°E
    test 59 toUtmUps8: 48 N 377302 1483035
    test 60 toUtmUps8: 48P N 377302.354183 1483034.777084 -15.77480856′ 0.99978623
    test 61 toUtmUps8.ValidateOK: True
    test 62 toMgrs: 48P UV 77302 83034
    test 63 latlon7: 13.4125°S, 103.8667°W
    test 64 LL.toUtmUps: 13 S 622698 8516965
    test 65 LL.toUtmUps: 13L S 622697.645817 8516965.222916 -15.77480856′ 0.99978623
    test 66 LL.toUtmUps.ValidateOK: True
    test 67 toMgrs: 13L FF 22697 16965
    test 68 latlon8: 43.684097°N, 175.265195°E
    test 69 LL.toUtmUps: 60 N 360177 4838249
    test 70 LL.toUtmUps: 60 N 360176.691 4838249.422
    test 71 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839163°, S:0.99984048]
    test 72 LL.toUtmUps.ValidateOK: True
    test 73 toMgrs: 60T UP 60176 38249
    test 74 UtmUps.toLatLon: 43.684097°N, 175.265195°E
    test 75 UtmUps.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 76 latlon9: 41.321801°N, 074.801413°W
    test 77 LL.toUtmUps: 18 N 516620 4574500
    test 78 LL.toUtmUps: [Z:18T, H:N, E:516620, N:4574500, C:+7.86748851′, S:0.9996034]
    test 79 LL.toUtmUps.ValidateOK: True
    test 80 toMgrs: 18T WL 16619 74500
    test 81 UtmUps.toLatLon: 41.321801°N, 074.801413°W
    test 82 UtmUps.toLatLon: 41°19′18.48″N, 074°48′05.09″W
    test 83 parseUTMUPS5: 18 N 516620 4574500
    test 84 parseUTMUPS5.ValidateOK: True
    test 85 UtmUps.toLatLon: 41.321801°N, 074.801413°W
    test 86 UtmUps: 00A S 321441 5810117
    test 87 UtmUps.ValidateOK: easting (321441.0425108216): outside UPS range [800000, 3200000]  FAILED, KNOWN, expected True
    test 88 UtmUps.toLatLon: 53.713776°S, 023.77604°W
    test 89 UtmUps.toLatLon: 53°42′49.59″S, 023°46′33.74″W
    test 90 LL.toUtmUps: 27 S 316807 4044745
    test 91 LL.toUtmUps.ValidateOK: True
    test 92 LL.toUtmUps: 27 S 316807.326 4044744.532
    test 93 LL.toUtmUps: [Z:27F, H:S, E:316807, N:4044745, C:+2.23830171°, S:1.00001184]
    test 94 UtmUps: 00Z N 400000 5000000
    test 95 UtmUps.ValidateOK: True
    test 96 parseUTMUPS5: (31, 'N', 446000.0, 8436100.0, 'X')
    test 97 parseUTMUPS5: (0, 'S', 506346.0, 1057743.0, 'A')

    4 of 97 testUtmUps.py tests (4.1%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 12.005 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testUtmUpsTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14
# lazily imported pygeodesy.toUtmUps8 from .utmups by testUtmUpsTMcoords.py line 17
# lazily imported pygeodesy.Ups from .ups by testUtmUpsTMcoords.py line 17
# lazily imported pygeodesy.Utm from .utm by testUtmUpsTMcoords.py line 17

    testing testUtmUpsTMcoords.py 24.03.22 (module pygeodesy.utmups 24.06.11) isLazy=3
    test 1 line 1 toUtmUps8.easting: 1548706.791619
    test 2 line 1 toUtmUps8.northing: 8451449.198772
    test 3 line 1 toUtmUps8.gamma: 43.922790
    test 4 line 1 toUtmUps8.scale: 1.029060
    test 5 line 1 toUtmUps8.lat: 70.579277
    test 6 line 1 toUtmUps8.lon: 45.599420
    test 7 line 2 toUtmUps8.easting: 2624150.740929
    test 8 line 2 toUtmUps8.northing: 1204434.041605
    test 9 line 2 toUtmUps8.gamma: 4.292619
    test 10 line 2 toUtmUps8.scale: 1.086051
    test 11 line 2 toUtmUps8.lat: 10.018894
    test 12 line 2 toUtmUps8.lon: 23.313324
    test 13 line 3 toUtmUps8.easting: 9855841.232935
    test 14 line 3 toUtmUps8.northing: 6145496.115157  FAILED, KNOWN, expected 6145496.115155
    test 15 line 3 toUtmUps8.gamma: 53.348315
    test 16 line 3 toUtmUps8.scale: 2.445098
    test 17 line 3 toUtmUps8.lat: 19.479896
    test 18 line 3 toUtmUps8.lon: 75.662049
    test 19 line 4 toUtmUps8.easting: 3206390.691996
    test 20 line 4 toUtmUps8.northing: 2650745.400406
    test 21 line 4 toUtmUps8.gamma: 11.666950
    test 22 line 4 toUtmUps8.scale: 1.129359
    test 23 line 4 toUtmUps8.lat: 21.072465
    test 24 line 4 toUtmUps8.lon: 29.828684
    test 25 line 5 toUtmUps8.easting: 4328154.083501
    test 26 line 5 toUtmUps8.northing: 749647.623690
    test 27 line 5 toUtmUps8.gamma: 4.024317
    test 28 line 5 toUtmUps8.scale: 1.240829
    test 29 line 5 toUtmUps8.lat: 5.458957
    test 30 line 5 toUtmUps8.lon: 36.385237
    test 31 line 6 toUtmUps8.easting: 847598.266514
    test 32 line 6 toUtmUps8.northing: 7947180.962440
    test 33 line 6 toUtmUps8.gamma: 21.639091
    test 34 line 6 toUtmUps8.scale: 1.008399
    test 35 line 6 toUtmUps8.lat: 70.175454
    test 36 line 6 toUtmUps8.lon: 22.865350
    test 37 line 7 toUtmUps8.easting: 2727657.337974
    test 38 line 7 toUtmUps8.northing: 8283916.696410
    test 39 line 7 toUtmUps8.gamma: 55.690909
    test 40 line 7 toUtmUps8.scale: 1.091942
    test 41 line 7 toUtmUps8.lat: 61.965605
    test 42 line 7 toUtmUps8.lon: 58.931371
    test 43 line 8 toUtmUps8.easting: 2331001.751890
    test 44 line 8 toUtmUps8.northing: 1313608.224751
    test 45 line 8 toUtmUps8.gamma: 4.214690
    test 46 line 8 toUtmUps8.scale: 1.067599
    test 47 line 8 toUtmUps8.lat: 11.116050
    test 48 line 8 toUtmUps8.lon: 20.901069
    test 49 line 9 toUtmUps8.easting: 6035557.239480
    test 50 line 9 toUtmUps8.northing: 5791770.791879
    test 51 line 9 toUtmUps8.gamma: 43.698170
    test 52 line 9 toUtmUps8.scale: 1.481260
    test 53 line 9 toUtmUps8.lat: 32.210543
    test 54 line 9 toUtmUps8.lon: 60.705849
    test 55 line 10 toUtmUps8.easting: 1064553.125852
    test 56 line 10 toUtmUps8.northing: 9417273.737208
    test 57 line 10 toUtmUps8.gamma: 61.100380
    test 58 line 10 toUtmUps8.scale: 1.013475
    test 59 line 10 toUtmUps8.lat: 79.187451
    test 60 line 10 toUtmUps8.lon: 61.532382
    test 61 line 11 toUtmUps8.easting: 1400137.116164
    test 62 line 11 toUtmUps8.northing: 9616907.017686
    test 63 line 11 toUtmUps8.gamma: 74.527087
    test 64 line 11 toUtmUps8.scale: 1.023640
    test 65 line 11 toUtmUps8.lat: 77.103759
    test 66 line 11 toUtmUps8.lon: 74.899105

    test skipped (1): line 12 toUtmUps8.'21.889514024862 80.019885892785 9860691.0166261508479 7433039.1433282732643 65.357693372142649007 2.43897318400097845293'

    test skipped (2): line 13 toUtmUps8.'30.53629567699 82.186177919416 8076501.8336948099169 8561614.1747819103782 75.073393190238557702 1.90620203595203984732'
    test 67 line 14 toUtmUps8.easting: 3335099.866623
    test 68 line 14 toUtmUps8.northing: 6740519.084015
    test 69 line 14 toUtmUps8.gamma: 40.611821
    test 70 line 14 toUtmUps8.scale: 1.139021
    test 71 line 14 toUtmUps8.lat: 49.990485
    test 72 line 14 toUtmUps8.lon: 48.203179

    test skipped (3): line 15 toUtmUps8.'14.486311853451 80.905136710227 12051574.9284996192629 6587213.0519512810474 59.033236797073779959 3.3574686117030164354'
    test 73 line 16 toUtmUps8.easting: 5387578.735298
    test 74 line 16 toUtmUps8.northing: 4111216.907168
    test 75 line 16 toUtmUps8.gamma: 27.574337
    test 76 line 16 toUtmUps8.scale: 1.379357
    test 77 line 16 toUtmUps8.lat: 25.936824
    test 78 line 16 toUtmUps8.lon: 49.913598
    test 79 line 17 toUtmUps8.easting: 2622214.380233
    test 80 line 17 toUtmUps8.northing: 8678923.984567
    test 81 line 17 toUtmUps8.gamma: 61.697275
    test 82 line 17 toUtmUps8.scale: 1.084810
    test 83 line 17 toUtmUps8.lat: 64.402196
    test 84 line 17 toUtmUps8.lon: 64.091395

    test skipped (4): line 18 toUtmUps8.'48.451353594584 84.856197560189 5068474.169632778036 9492066.9937094951003 83.156739839119105102 1.3299901985118008373'
    test 85 line 19 toUtmUps8.easting: 738062.047779
    test 86 line 19 toUtmUps8.northing: 3031007.074116
    test 87 line 19 toUtmUps8.gamma: 3.416802
    test 88 line 19 toUtmUps8.scale: 1.006332
    test 89 line 19 toUtmUps8.lat: 27.203895
    test 90 line 19 toUtmUps8.lon: 7.440229
    test 91 line 20 toUtmUps8.easting: 1944413.834565
    test 92 line 20 toUtmUps8.northing: 9613299.224493
    test 93 line 20 toUtmUps8.gamma: 78.462831
    test 94 line 20 toUtmUps8.scale: 1.046134
    test 95 line 20 toUtmUps8.lat: 72.509000
    test 96 line 20 toUtmUps8.lon: 78.982283
    test 97 line 21 toUtmUps8.easting: 2114521.418406
    test 98 line 21 toUtmUps8.northing: 4954077.440098
    test 99 line 21 toUtmUps8.gamma: 17.571878
    test 100 line 21 toUtmUps8.scale: 1.055093
    test 101 line 21 toUtmUps8.lat: 41.824954
    test 102 line 21 toUtmUps8.lon: 25.392744
    test 103 line 22 toUtmUps8.easting: 620365.905090
    test 104 line 22 toUtmUps8.northing: 4755542.026562
    test 105 line 22 toUtmUps8.gamma: 5.152022
    test 106 line 22 toUtmUps8.scale: 1.004338
    test 107 line 22 toUtmUps8.lat: 42.701376
    test 108 line 22 toUtmUps8.lon: 7.572738
    test 109 line 23 toUtmUps8.easting: 263004.770989
    test 110 line 23 toUtmUps8.northing: 4493669.762451
    test 111 line 23 toUtmUps8.gamma: 2.020523
    test 112 line 23 toUtmUps8.scale: 1.000452
    test 113 line 23 toUtmUps8.lat: 40.552052
    test 114 line 23 toUtmUps8.lon: 3.106056
    test 115 line 24 toUtmUps8.easting: 3217221.739462
    test 116 line 24 toUtmUps8.northing: 437776.119161
    test 117 line 24 toUtmUps8.gamma: 1.848169
    test 118 line 24 toUtmUps8.scale: 1.130558
    test 119 line 24 toUtmUps8.lat: 3.501242
    test 120 line 24 toUtmUps8.lon: 27.806507

    test skipped (5): line 25 toUtmUps8.'10.148714782203 85.373767569431 14661142.4449607145297 7476100.8241849819567 68.376669038799719822 4.89664968310721668858'
    test 121 line 26 toUtmUps8.easting: 967777.158554
    test 122 line 26 toUtmUps8.northing: 6615684.266592
    test 123 line 26 toUtmUps8.gamma: 14.410044
    test 124 line 26 toUtmUps8.scale: 1.011100
    test 125 line 26 toUtmUps8.lat: 58.582623
    test 126 line 26 toUtmUps8.lon: 16.755558
    test 127 line 27 toUtmUps8.easting: 7558840.728461
    test 128 line 27 toUtmUps8.northing: 4144728.130764
    test 129 line 27 toUtmUps8.gamma: 32.557264
    test 130 line 27 toUtmUps8.scale: 1.791490
    test 131 line 27 toUtmUps8.lat: 19.793004
    test 132 line 27 toUtmUps8.lon: 61.746763
    test 133 line 28 toUtmUps8.easting: 1056008.314161
    test 134 line 28 toUtmUps8.northing: 9290799.692669
    test 135 line 28 toUtmUps8.gamma: 55.843278
    test 136 line 28 toUtmUps8.scale: 1.013253
    test 137 line 28 toUtmUps8.lat: 78.666776
    test 138 line 28 toUtmUps8.lon: 56.365355
    test 139 line 29 toUtmUps8.easting: 1943965.134687
    test 140 line 29 toUtmUps8.northing: 1389972.228690
    test 141 line 29 toUtmUps8.gamma: 3.774869
    test 142 line 29 toUtmUps8.scale: 1.046724
    test 143 line 29 toUtmUps8.lat: 11.998788
    test 144 line 29 toUtmUps8.lon: 17.597873
    test 145 line 30 toUtmUps8.easting: 5803077.072902
    test 146 line 30 toUtmUps8.northing: 5649957.943659
    test 147 line 30 toUtmUps8.gamma: 41.717943
    test 148 line 30 toUtmUps8.scale: 1.442572
    test 149 line 30 toUtmUps8.lat: 32.540378
    test 150 line 30 toUtmUps8.lon: 58.764613
    test 151 line 31 toUtmUps8.easting: 2928716.986009
    test 152 line 31 toUtmUps8.northing: 5731835.058317
    test 153 line 31 toUtmUps8.gamma: 28.538550
    test 154 line 31 toUtmUps8.scale: 1.106780
    test 155 line 31 toUtmUps8.lat: 45.160356
    test 156 line 31 toUtmUps8.lon: 37.465285
    test 157 line 32 toUtmUps8.easting: 326141.975756
    test 158 line 32 toUtmUps8.northing: 8881325.164543
    test 159 line 32 toUtmUps8.gamma: 16.111415
    test 160 line 32 toUtmUps8.scale: 1.000900
    test 161 line 32 toUtmUps8.lat: 79.584190
    test 162 line 32 toUtmUps8.lon: 16.367006
    test 163 line 33 toUtmUps8.easting: 3933015.267450
    test 164 line 33 toUtmUps8.northing: 7932373.909512
    test 165 line 33 toUtmUps8.gamma: 58.577424
    test 166 line 33 toUtmUps8.scale: 1.194811
    test 167 line 33 toUtmUps8.lat: 52.470664
    test 168 line 33 toUtmUps8.lon: 64.125580
    test 169 line 34 toUtmUps8.easting: 8598926.983213
    test 170 line 34 toUtmUps8.northing: 6214135.167503
    test 171 line 34 toUtmUps8.gamma: 52.612878
    test 172 line 34 toUtmUps8.scale: 2.051367
    test 173 line 34 toUtmUps8.lat: 23.702673
    test 174 line 34 toUtmUps8.lon: 72.630363
    test 175 line 35 toUtmUps8.easting: 6620553.333772
    test 176 line 35 toUtmUps8.northing: 6540527.122948
    test 177 line 35 toUtmUps8.gamma: 52.350140
    test 178 line 35 toUtmUps8.scale: 1.586614
    test 179 line 35 toUtmUps8.lat: 32.603520
    test 180 line 35 toUtmUps8.lon: 67.280123
    test 181 line 36 toUtmUps8.easting: 1515136.758292
    test 182 line 36 toUtmUps8.northing: 3858996.087537
    test 183 line 36 toUtmUps8.gamma: 9.225127
    test 184 line 36 toUtmUps8.scale: 1.028029
    test 185 line 36 toUtmUps8.lat: 33.776224
    test 186 line 36 toUtmUps8.lon: 16.280993
    test 187 line 37 toUtmUps8.easting: 479854.373445
    test 188 line 37 toUtmUps8.northing: 8980501.389896
    test 189 line 37 toUtmUps8.gamma: 25.021222
    test 190 line 37 toUtmUps8.scale: 1.002415
    test 191 line 37 toUtmUps8.lat: 79.932747
    test 192 line 37 toUtmUps8.lon: 25.363622
    test 193 line 38 toUtmUps8.easting: 5243446.564940
    test 194 line 38 toUtmUps8.northing: 140657.213960
    test 195 line 38 toUtmUps8.gamma: 0.862817
    test 196 line 38 toUtmUps8.scale: 1.360358
    test 197 line 38 toUtmUps8.lat: 0.935056
    test 198 line 38 toUtmUps8.lon: 42.538824

    test skipped (6): line 39 toUtmUps8.'13.490862440668 83.178380075606 12806457.9232176809509 7170118.6846750266674 64.708921319446620085 3.7405880916836789809'
    test 199 line 40 toUtmUps8.easting: 1202993.459158
    test 200 line 40 toUtmUps8.northing: 5557316.053599
    test 201 line 40 toUtmUps8.gamma: 12.579061
    test 202 line 40 toUtmUps8.scale: 1.017426
    test 203 line 40 toUtmUps8.lat: 48.979057
    test 204 line 40 toUtmUps8.lon: 16.474542
    test 205 line 41 toUtmUps8.easting: 1729088.710196
    test 206 line 41 toUtmUps8.northing: 7770874.289954
    test 207 line 41 toUtmUps8.gamma: 36.021783
    test 208 line 41 toUtmUps8.scale: 1.036397
    test 209 line 41 toUtmUps8.lat: 65.036016
    test 210 line 41 toUtmUps8.lon: 38.729091
    test 211 line 42 toUtmUps8.easting: 2437301.517425
    test 212 line 42 toUtmUps8.northing: 5539327.748318
    test 213 line 42 toUtmUps8.gamma: 23.461879
    test 214 line 42 toUtmUps8.scale: 1.073459
    test 215 line 42 toUtmUps8.lat: 45.510091
    test 216 line 42 toUtmUps8.lon: 31.303729
    test 217 line 43 toUtmUps8.easting: 3647186.135066
    test 218 line 43 toUtmUps8.northing: 2086412.330983
    test 219 line 43 toUtmUps8.gamma: 10.023991
    test 220 line 43 toUtmUps8.scale: 1.168707
    test 221 line 43 toUtmUps8.lat: 16.058010
    test 222 line 43 toUtmUps8.lon: 32.520026
    test 223 line 44 toUtmUps8.easting: 1818497.243556
    test 224 line 44 toUtmUps8.northing: 4275471.745057
    test 225 line 44 toUtmUps8.gamma: 12.499656
    test 226 line 44 toUtmUps8.scale: 1.040604
    test 227 line 44 toUtmUps8.lat: 36.845200
    test 228 line 44 toUtmUps8.lon: 20.282283
    test 229 line 45 toUtmUps8.easting: 3751304.113783
    test 230 line 45 toUtmUps8.northing: 5130454.001592
    test 231 line 45 toUtmUps8.gamma: 28.959707
    test 232 line 45 toUtmUps8.scale: 1.177681
    test 233 line 45 toUtmUps8.lat: 37.865481
    test 234 line 45 toUtmUps8.lon: 41.990402
    test 235 line 46 toUtmUps8.easting: 2616733.138544
    test 236 line 46 toUtmUps8.northing: 394644.463815
    test 237 line 46 toUtmUps8.gamma: 1.390425
    test 238 line 46 toUtmUps8.scale: 1.085595
    test 239 line 46 toUtmUps8.lat: 3.287272
    test 240 line 46 toUtmUps8.lon: 22.917604
    test 241 line 47 toUtmUps8.easting: 1756506.573942
    test 242 line 47 toUtmUps8.northing: 5570393.986394
    test 243 line 47 toUtmUps8.gamma: 17.897894
    test 244 line 47 toUtmUps8.scale: 1.037732
    test 245 line 47 toUtmUps8.lat: 47.813686
    test 246 line 47 toUtmUps8.lon: 23.545092
    test 247 line 48 toUtmUps8.easting: 8752461.894711
    test 248 line 48 toUtmUps8.northing: 6087728.152284
    test 249 line 48 toUtmUps8.gamma: 51.628465
    test 250 line 48 toUtmUps8.scale: 2.095465
    test 251 line 48 toUtmUps8.lat: 22.836853
    test 252 line 48 toUtmUps8.lon: 72.604385
    test 253 line 49 toUtmUps8.easting: 1309272.216432
    test 254 line 49 toUtmUps8.northing: 59520.028899
    test 255 line 49 toUtmUps8.gamma: 0.109069
    test 256 line 49 toUtmUps8.scale: 1.020897
    test 257 line 49 toUtmUps8.lat: 0.527262
    test 258 line 49 toUtmUps8.lon: 11.684209
    test 259 line 50 toUtmUps8.easting: 328652.277129
    test 260 line 50 toUtmUps8.northing: 2233043.958874
    test 261 line 50 toUtmUps8.gamma: 1.084863
    test 262 line 50 toUtmUps8.scale: 1.000935
    test 263 line 50 toUtmUps8.lat: 20.166742
    test 264 line 50 toUtmUps8.lon: 3.143948

    test skipped (7): line 51 toUtmUps8.'28.604629015528 85.988721094779 8637959.7164470998207 9190635.1560309800028 81.802562643198123218 2.05432863342852874819'

    test skipped (8): line 52 toUtmUps8.'28.984047991106 85.833447775172 8548521.4551470334531 9172410.9432821880799 81.583928102890161419 2.02964145862183583179'
    test 265 line 53 toUtmUps8.easting: 796987.281104
    test 266 line 53 toUtmUps8.northing: 7677446.357675
    test 267 line 53 toUtmUps8.gamma: 18.084472
    test 268 line 53 toUtmUps8.scale: 1.007381
    test 269 line 53 toUtmUps8.lat: 68.071020
    test 270 line 53 toUtmUps8.lon: 19.392823

    test skipped (9): line 54 toUtmUps8.'61.416576191872 81.981611413918 3291036.4967623295988 9513199.6006662170596 80.890253980644739593 1.13482563910814382209'
    test 271 line 55 toUtmUps8.easting: 7087225.330906
    test 272 line 55 toUtmUps8.northing: 8382823.855822
    test 273 line 55 toUtmUps8.gamma: 72.253756
    test 274 line 55 toUtmUps8.scale: 1.678070
    test 275 line 55 toUtmUps8.lat: 35.074753
    test 276 line 55 toUtmUps8.lon: 79.496003
    test 277 line 56 toUtmUps8.easting: 5090358.125724
    test 278 line 56 toUtmUps8.northing: 4318294.133489
    test 279 line 56 toUtmUps8.gamma: 28.266280
    test 280 line 56 toUtmUps8.scale: 1.336264
    test 281 line 56 toUtmUps8.lat: 28.078790
    test 282 line 56 toUtmUps8.lon: 48.684350

    test skipped (10): line 57 toUtmUps8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 283 line 58 toUtmUps8.easting: 3447670.550785
    test 284 line 58 toUtmUps8.northing: 3680238.888223
    test 285 line 58 toUtmUps8.gamma: 17.934948
    test 286 line 58 toUtmUps8.scale: 1.149831
    test 287 line 58 toUtmUps8.lat: 28.473948
    test 288 line 58 toUtmUps8.lon: 34.127306
    test 289 line 59 toUtmUps8.easting: 3396522.906798
    test 290 line 59 toUtmUps8.northing: 8093659.687593
    test 291 line 59 toUtmUps8.gamma: 57.747117
    test 292 line 59 toUtmUps8.scale: 1.144006
    test 293 line 59 toUtmUps8.lat: 56.629354
    test 294 line 59 toUtmUps8.lon: 62.196474
    test 295 line 60 toUtmUps8.easting: 11249894.100794  FAILED, KNOWN, expected 11249894.100784
    test 296 line 60 toUtmUps8.northing: 1619226.506360  FAILED, KNOWN, expected 1619226.506299
    test 297 line 60 toUtmUps8.gamma: 14.210358
    test 298 line 60 toUtmUps8.scale: 3.048347
    test 299 line 60 toUtmUps8.lat: 4.747762
    test 300 line 60 toUtmUps8.lon: 70.932555
    test 301 line 61 toUtmUps8.easting: 6808805.230950
    test 302 line 61 toUtmUps8.northing: 8044779.777369
    test 303 line 61 toUtmUps8.gamma: 68.242008
    test 304 line 61 toUtmUps8.scale: 1.621464
    test 305 line 61 toUtmUps8.lat: 35.882113
    test 306 line 61 toUtmUps8.lon: 76.741849
    test 307 line 62 toUtmUps8.easting: 2306021.556506
    test 308 line 62 toUtmUps8.northing: 757191.592866
    test 309 line 62 toUtmUps8.gamma: 2.385686
    test 310 line 62 toUtmUps8.scale: 1.066159
    test 311 line 62 toUtmUps8.lat: 6.420705
    test 312 line 62 toUtmUps8.lon: 20.416028
    test 313 line 63 toUtmUps8.easting: 1547406.313862
    test 314 line 63 toUtmUps8.northing: 6048712.751824
    test 315 line 63 toUtmUps8.gamma: 18.474372
    test 316 line 63 toUtmUps8.scale: 1.029123
    test 317 line 63 toUtmUps8.lat: 52.335248
    test 318 line 63 toUtmUps8.lon: 22.879294
    test 319 line 64 toUtmUps8.easting: 2430467.650383
    test 320 line 64 toUtmUps8.northing: 7557167.613972
    test 321 line 64 toUtmUps8.gamma: 42.110021
    test 322 line 64 toUtmUps8.scale: 1.072759
    test 323 line 64 toUtmUps8.lat: 59.846391
    test 324 line 64 toUtmUps8.lon: 46.262536
    test 325 line 65 toUtmUps8.easting: 2334053.905830
    test 326 line 65 toUtmUps8.northing: 1948076.966582
    test 327 line 65 toUtmUps8.gamma: 6.353185
    test 328 line 65 toUtmUps8.scale: 1.067733
    test 329 line 65 toUtmUps8.lat: 16.461790
    test 330 line 65 toUtmUps8.lon: 21.433269
    test 331 line 66 toUtmUps8.easting: 5564175.186737
    test 332 line 66 toUtmUps8.northing: 1836851.660412
    test 333 line 66 toUtmUps8.gamma: 11.870682
    test 334 line 66 toUtmUps8.scale: 1.408265
    test 335 line 66 toUtmUps8.lat: 11.707905
    test 336 line 66 toUtmUps8.lon: 45.827075
    test 337 line 67 toUtmUps8.easting: 6118505.590359
    test 338 line 67 toUtmUps8.northing: 7631684.552421
    test 339 line 67 toUtmUps8.gamma: 62.477323
    test 340 line 67 toUtmUps8.scale: 1.493420
    test 341 line 67 toUtmUps8.lat: 38.519075
    test 342 line 67 toUtmUps8.lon: 71.935918

    test skipped (11): line 68 toUtmUps8.'34.264007222954 82.647878110272 7365359.2946646287171 8818194.4515306837741 77.207042218974141605 1.73763853091849729372'
    test 343 line 69 toUtmUps8.easting: 36187.342415
    test 344 line 69 toUtmUps8.northing: 2142565.324802
    test 345 line 69 toUtmUps8.gamma: 0.114334
    test 346 line 69 toUtmUps8.scale: 0.999616
    test 347 line 69 toUtmUps8.lat: 19.376880
    test 348 line 69 toUtmUps8.lon: 0.344605
    test 349 line 70 toUtmUps8.easting: 2380328.546851
    test 350 line 70 toUtmUps8.northing: 8440109.872384
    test 351 line 70 toUtmUps8.gamma: 55.076067
    test 352 line 70 toUtmUps8.scale: 1.069658
    test 353 line 70 toUtmUps8.lat: 65.075805
    test 354 line 70 toUtmUps8.lon: 57.653438
    test 355 line 71 toUtmUps8.easting: 582511.608826
    test 356 line 71 toUtmUps8.northing: 8876047.217071
    test 357 line 71 toUtmUps8.gamma: 27.133300
    test 358 line 71 toUtmUps8.scale: 1.003749
    test 359 line 71 toUtmUps8.lat: 78.691870
    test 360 line 71 toUtmUps8.lon: 27.591736
    test 361 line 72 toUtmUps8.easting: 899441.350477
    test 362 line 72 toUtmUps8.northing: 4582046.430516
    test 363 line 72 toUtmUps8.gamma: 7.031211
    test 364 line 72 toUtmUps8.scale: 1.009573
    test 365 line 72 toUtmUps8.lat: 40.893022
    test 366 line 72 toUtmUps8.lon: 10.668804

    test skipped (12): line 73 toUtmUps8.'48.914278679322 87.35926802682 5022485.1243369246483 9741774.9337207800497 86.505947369926030588 1.32369954850478170836'
    test 367 line 74 toUtmUps8.easting: 6701004.587204
    test 368 line 74 toUtmUps8.northing: 2954368.258231
    test 369 line 74 toUtmUps8.gamma: 21.560153
    test 370 line 74 toUtmUps8.scale: 1.608554
    test 371 line 74 toUtmUps8.lat: 16.208377
    test 372 line 74 toUtmUps8.lon: 54.494282
    test 373 line 75 toUtmUps8.easting: 454986.218897
    test 374 line 75 toUtmUps8.northing: 4885087.887884
    test 375 line 75 toUtmUps8.gamma: 3.945648
    test 376 line 75 toUtmUps8.scale: 1.002147
    test 377 line 75 toUtmUps8.lat: 43.977936
    test 378 line 75 toUtmUps8.lon: 5.672541

    test skipped (13): line 76 toUtmUps8.'26.850860749352 82.834479937822 8903956.1403106503714 8470608.5774824981183 74.723116471645531699 2.13131124920824155268'
    test 379 line 77 toUtmUps8.easting: 1547627.594741
    test 380 line 77 toUtmUps8.northing: 6036584.538347
    test 381 line 77 toUtmUps8.gamma: 18.407629
    test 382 line 77 toUtmUps8.scale: 1.029132
    test 383 line 77 toUtmUps8.lat: 52.234165
    test 384 line 77 toUtmUps8.lon: 22.827655
    test 385 line 78 toUtmUps8.easting: 5221488.778597
    test 386 line 78 toUtmUps8.northing: 1762592.044392
    test 387 line 78 toUtmUps8.gamma: 10.927880
    test 388 line 78 toUtmUps8.scale: 1.356721
    test 389 line 78 toUtmUps8.lat: 11.674646
    test 390 line 78 toUtmUps8.lon: 43.500147
    test 391 line 79 toUtmUps8.easting: 4880570.297161
    test 392 line 79 toUtmUps8.northing: 3325433.988867
    test 393 line 79 toUtmUps8.gamma: 20.469862
    test 394 line 79 toUtmUps8.scale: 1.308476
    test 395 line 79 toUtmUps8.lat: 22.492753
    test 396 line 79 toUtmUps8.lon: 44.179153

    test skipped (14): line 80 toUtmUps8.'.910999463005 88.548822916123 23930680.0826936110445 7491462.0990379651261 75.937628056628715446 15.55636485152285563369'
    test 397 line 81 toUtmUps8.easting: 71519.450458
    test 398 line 81 toUtmUps8.northing: 3654740.444852
    test 399 line 81 toUtmUps8.gamma: 0.417448
    test 400 line 81 toUtmUps8.scale: 0.999663
    test 401 line 81 toUtmUps8.lat: 33.028802
    test 402 line 81 toUtmUps8.lon: 0.765843
    test 403 line 82 toUtmUps8.easting: 4152797.795220
    test 404 line 82 toUtmUps8.northing: 7823098.502751
    test 405 line 82 toUtmUps8.gamma: 58.238901
    test 406 line 82 toUtmUps8.scale: 1.218052
    test 407 line 82 toUtmUps8.lat: 50.649195
    test 408 line 82 toUtmUps8.lon: 64.389076
    test 409 line 83 toUtmUps8.easting: 2926725.707639
    test 410 line 83 toUtmUps8.northing: 7904918.072844
    test 411 line 83 toUtmUps8.gamma: 51.592748
    test 412 line 83 toUtmUps8.scale: 1.106206
    test 413 line 83 toUtmUps8.lat: 58.820640
    test 414 line 83 toUtmUps8.lon: 55.841048
    test 415 line 84 toUtmUps8.easting: 1325509.113869
    test 416 line 84 toUtmUps8.northing: 9675214.948213
    test 417 line 84 toUtmUps8.gamma: 76.116213
    test 418 line 84 toUtmUps8.scale: 1.021136
    test 419 line 84 toUtmUps8.lat: 77.865762
    test 420 line 84 toUtmUps8.lon: 76.414618
    test 421 line 85 toUtmUps8.easting: 3045296.448926
    test 422 line 85 toUtmUps8.northing: 542153.443280
    test 423 line 85 toUtmUps8.gamma: 2.185095
    test 424 line 85 toUtmUps8.scale: 1.116664
    test 425 line 85 toUtmUps8.lat: 4.389639
    test 426 line 85 toUtmUps8.lon: 26.458976
    test 427 line 86 toUtmUps8.easting: 11843870.887791  FAILED, KNOWN, expected 11843870.887518
    test 428 line 86 toUtmUps8.northing: 5912803.073690  FAILED, KNOWN, expected 5912803.073343
    test 429 line 86 toUtmUps8.gamma: 52.814260  FAILED, KNOWN, expected 52.814259
    test 430 line 86 toUtmUps8.scale: 3.267256
    test 431 line 86 toUtmUps8.lat: 13.924448
    test 432 line 86 toUtmUps8.lon: 79.017873
    test 433 line 87 toUtmUps8.easting: 8891099.704936
    test 434 line 87 toUtmUps8.northing: 162160.142227
    test 435 line 87 toUtmUps8.gamma: 1.312094
    test 436 line 87 toUtmUps8.scale: 2.157363
    test 437 line 87 toUtmUps8.lat: 0.679713
    test 438 line 87 toUtmUps8.lon: 62.036792
    test 439 line 88 toUtmUps8.easting: 4784814.214449
    test 440 line 88 toUtmUps8.northing: 2984497.432580
    test 441 line 88 toUtmUps8.gamma: 17.946545
    test 442 line 88 toUtmUps8.scale: 1.296116
    test 443 line 88 toUtmUps8.lat: 20.478281
    test 444 line 88 toUtmUps8.lon: 42.678234
    test 445 line 89 toUtmUps8.easting: 1772074.682154
    test 446 line 89 toUtmUps8.northing: 9491552.560143
    test 447 line 89 toUtmUps8.gamma: 73.634830
    test 448 line 89 toUtmUps8.scale: 1.038202
    test 449 line 89 toUtmUps8.lat: 73.695703
    test 450 line 89 toUtmUps8.lon: 74.259097
    test 451 line 90 toUtmUps8.easting: 1907649.782106
    test 452 line 90 toUtmUps8.northing: 6994232.429379
    test 453 line 90 toUtmUps8.gamma: 29.718929
    test 454 line 90 toUtmUps8.scale: 1.044503
    test 455 line 90 toUtmUps8.lat: 58.569370
    test 456 line 90 toUtmUps8.lon: 33.777549
    test 457 line 91 toUtmUps8.easting: 2084423.818962
    test 458 line 91 toUtmUps8.northing: 2211816.035619
    test 459 line 91 toUtmUps8.gamma: 6.556448
    test 460 line 91 toUtmUps8.scale: 1.053793
    test 461 line 91 toUtmUps8.lat: 18.933881
    test 462 line 91 toUtmUps8.lon: 19.492695
    test 463 line 92 toUtmUps8.easting: 1064373.671729
    test 464 line 92 toUtmUps8.northing: 7812482.547461
    test 465 line 92 toUtmUps8.gamma: 24.874124
    test 466 line 92 toUtmUps8.scale: 1.013490
    test 467 line 92 toUtmUps8.lat: 68.317934
    test 468 line 92 toUtmUps8.lon: 26.515687

    test skipped (15): line 93 toUtmUps8.'50.641941364984 87.111556505544 4770385.4792965339274 9734318.9029801439364 86.27311877223132818 1.29055338238288419467'
    test 469 line 94 toUtmUps8.easting: 6398096.677297
    test 470 line 94 toUtmUps8.northing: 4410894.752104
    test 471 line 94 toUtmUps8.gamma: 32.558023
    test 472 line 94 toUtmUps8.scale: 1.548004
    test 473 line 94 toUtmUps8.lat: 24.411298
    test 474 line 94 toUtmUps8.lon: 56.881823
    test 475 line 95 toUtmUps8.easting: 3138623.300415
    test 476 line 95 toUtmUps8.northing: 3082960.600798
    test 477 line 95 toUtmUps8.gamma: 13.557672
    test 478 line 95 toUtmUps8.scale: 1.123724
    test 479 line 95 toUtmUps8.lat: 24.571871
    test 480 line 95 toUtmUps8.lon: 30.073097
    test 481 line 96 toUtmUps8.easting: 2748325.794651
    test 482 line 96 toUtmUps8.northing: 4202811.912668
    test 483 line 96 toUtmUps8.gamma: 17.578706
    test 484 line 96 toUtmUps8.scale: 1.094102
    test 485 line 96 toUtmUps8.lat: 34.202576
    test 486 line 96 toUtmUps8.lon: 29.383166
    test 487 line 97 toUtmUps8.easting: 6677830.630367
    test 488 line 97 toUtmUps8.northing: 5350071.837395
    test 489 line 97 toUtmUps8.gamma: 41.306641
    test 490 line 97 toUtmUps8.scale: 1.599774
    test 491 line 97 toUtmUps8.lat: 27.756285
    test 492 line 97 toUtmUps8.lon: 61.881905
    test 493 line 98 toUtmUps8.easting: 5941536.667431
    test 494 line 98 toUtmUps8.northing: 3293112.175140
    test 495 line 98 toUtmUps8.gamma: 22.752845
    test 496 line 98 toUtmUps8.scale: 1.468473
    test 497 line 98 toUtmUps8.lat: 19.742270
    test 498 line 98 toUtmUps8.lon: 50.957821
    test 499 line 99 toUtmUps8.easting: 3152481.792567
    test 500 line 99 toUtmUps8.northing: 5903048.837978
    test 501 line 99 toUtmUps8.gamma: 31.494606
    test 502 line 99 toUtmUps8.scale: 1.124085
    test 503 line 99 toUtmUps8.lat: 45.453582
    test 504 line 99 toUtmUps8.lon: 40.659833
    test 505 line 100 toUtmUps8.easting: 10460475.897726  FAILED, KNOWN, expected 10460475.897730
    test 506 line 100 toUtmUps8.northing: 2553463.624385  FAILED, KNOWN, expected 2553463.624391
    test 507 line 100 toUtmUps8.gamma: 21.965869
    test 508 line 100 toUtmUps8.scale: 2.700296
    test 509 line 100 toUtmUps8.lat: 8.322144
    test 510 line 100 toUtmUps8.lon: 69.488157
    test 511 line 101 toUtmUps8.easting: 1964010.778021
    test 512 line 101 toUtmUps8.northing: 5634042.923056
    test 513 line 101 toUtmUps8.gamma: 20.117800
    test 514 line 101 toUtmUps8.scale: 1.047344
    test 515 line 101 toUtmUps8.lat: 47.749831
    test 516 line 101 toUtmUps8.lon: 26.322002
    test 517 line 102 toUtmUps8.easting: 2065306.424934
    test 518 line 102 toUtmUps8.northing: 2135008.468651
    test 519 line 102 toUtmUps8.gamma: 6.258981
    test 520 line 102 toUtmUps8.scale: 1.052800
    test 521 line 102 toUtmUps8.lat: 18.297493
    test 522 line 102 toUtmUps8.lon: 19.244669
    test 523 line 103 toUtmUps8.easting: 5127738.132976
    test 524 line 103 toUtmUps8.northing: 6793804.304411
    test 525 line 103 toUtmUps8.gamma: 50.557915
    test 526 line 103 toUtmUps8.scale: 1.339412
    test 527 line 103 toUtmUps8.lat: 40.834541
    test 528 line 103 toUtmUps8.lon: 61.650750
    test 529 line 104 toUtmUps8.easting: 8385525.148166
    test 530 line 104 toUtmUps8.northing: 6924932.344306
    test 531 line 104 toUtmUps8.gamma: 59.087561
    test 532 line 104 toUtmUps8.scale: 1.990364
    test 533 line 104 toUtmUps8.lat: 26.273247
    test 534 line 104 toUtmUps8.lon: 74.926694
    test 535 line 105 toUtmUps8.easting: 2297510.791909
    test 536 line 105 toUtmUps8.northing: 2805666.962834
    test 537 line 105 toUtmUps8.gamma: 9.301553
    test 538 line 105 toUtmUps8.scale: 1.065508
    test 539 line 105 toUtmUps8.lat: 23.698347
    test 540 line 105 toUtmUps8.lon: 22.155657

    test skipped (16): line 106 toUtmUps8.'12.364112546807 86.348578425071 13749544.9176345767153 8288728.3846500523233 75.033969786420407131 4.27058754359004466627'
    test 541 line 107 toUtmUps8.easting: 317518.455546
    test 542 line 107 toUtmUps8.northing: 1097517.583745
    test 543 line 107 toUtmUps8.gamma: 0.499004
    test 544 line 107 toUtmUps8.scale: 1.000848
    test 545 line 107 toUtmUps8.lat: 9.916091
    test 546 line 107 toUtmUps8.lon: 2.895277
    test 547 line 108 toUtmUps8.easting: 3856035.184888
    test 548 line 108 toUtmUps8.northing: 9141364.450290
    test 549 line 108 toUtmUps8.gamma: 75.972763
    test 550 line 108 toUtmUps8.scale: 1.186786
    test 551 line 108 toUtmUps8.lat: 56.553876
    test 552 line 108 toUtmUps8.lon: 78.215077
    test 553 line 109 toUtmUps8.easting: 1457484.942823
    test 554 line 109 toUtmUps8.northing: 9385297.101973
    test 555 line 109 toUtmUps8.gamma: 66.784662
    test 556 line 109 toUtmUps8.scale: 1.025660
    test 557 line 109 toUtmUps8.lat: 75.957631
    test 558 line 109 toUtmUps8.lon: 67.407383
    test 559 line 110 toUtmUps8.easting: 1304934.901841
    test 560 line 110 toUtmUps8.northing: 3604655.155715
    test 561 line 110 toUtmUps8.gamma: 7.343989
    test 562 line 110 toUtmUps8.scale: 1.020672
    test 563 line 110 toUtmUps8.lat: 31.826531
    test 564 line 110 toUtmUps8.lon: 13.731050
    test 565 line 111 toUtmUps8.easting: 1399093.491792
    test 566 line 111 toUtmUps8.northing: 8314607.120342
    test 567 line 111 toUtmUps8.gamma: 38.630161
    test 568 line 111 toUtmUps8.scale: 1.023625
    test 569 line 111 toUtmUps8.lat: 70.542985
    test 570 line 111 toUtmUps8.lon: 40.282055
    test 571 line 112 toUtmUps8.easting: 356983.618540
    test 572 line 112 toUtmUps8.northing: 4282309.048994
    test 573 line 112 toUtmUps8.gamma: 2.561485
    test 574 line 112 toUtmUps8.scale: 1.001170
    test 575 line 112 toUtmUps8.lat: 38.617487
    test 576 line 112 toUtmUps8.lon: 4.099838
    test 577 line 113 toUtmUps8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 578 line 113 toUtmUps8.northing: 1510288.212230  FAILED, KNOWN, expected 1510288.212229
    test 579 line 113 toUtmUps8.gamma: 12.752154
    test 580 line 113 toUtmUps8.scale: 2.511357
    test 581 line 113 toUtmUps8.lat: 5.389447
    test 582 line 113 toUtmUps8.lon: 66.729612
    test 583 line 114 toUtmUps8.easting: 6367592.504007
    test 584 line 114 toUtmUps8.northing: 1200437.077672
    test 585 line 114 toUtmUps8.gamma: 8.338041
    test 586 line 114 toUtmUps8.scale: 1.546210
    test 587 line 114 toUtmUps8.lat: 6.995168
    test 588 line 114 toUtmUps8.lon: 50.014763
    test 589 line 115 toUtmUps8.easting: 4391263.676460
    test 590 line 115 toUtmUps8.northing: 6325455.989408
    test 591 line 115 toUtmUps8.gamma: 42.653541
    test 592 line 115 toUtmUps8.scale: 1.245560
    test 593 line 115 toUtmUps8.lat: 42.321894
    test 594 line 115 toUtmUps8.lon: 53.784040
    test 595 line 116 toUtmUps8.easting: 6209880.527527
    test 596 line 116 toUtmUps8.northing: 2154754.449747
    test 597 line 116 toUtmUps8.gamma: 14.919512
    test 598 line 116 toUtmUps8.scale: 1.516560
    test 599 line 116 toUtmUps8.lat: 12.698515
    test 600 line 116 toUtmUps8.lon: 50.242047
    test 601 line 117 toUtmUps8.easting: 1507053.688772
    test 602 line 117 toUtmUps8.northing: 6261383.513280
    test 603 line 117 toUtmUps8.gamma: 19.280373
    test 604 line 117 toUtmUps8.scale: 1.027584
    test 605 line 117 toUtmUps8.lat: 54.207636
    test 606 line 117 toUtmUps8.lon: 23.325731
    test 607 line 118 toUtmUps8.easting: 8332725.003777
    test 608 line 118 toUtmUps8.northing: 3002712.329753
    test 609 line 118 toUtmUps8.gamma: 24.059212
    test 610 line 118 toUtmUps8.scale: 1.990450
    test 611 line 118 toUtmUps8.lat: 13.224787
    test 612 line 118 toUtmUps8.lon: 62.426698
    test 613 line 119 toUtmUps8.easting: 3958910.085235
    test 614 line 119 toUtmUps8.northing: 3462284.926102
    test 615 line 119 toUtmUps8.gamma: 18.546398
    test 616 line 119 toUtmUps8.scale: 1.199351
    test 617 line 119 toUtmUps8.lat: 25.650282
    test 618 line 119 toUtmUps8.lon: 37.710391

    test skipped (17): line 120 toUtmUps8.'20.684773383075 82.849734261238 10452892.2820830090734 8000059.6051139389546 71.07524025411428855 2.6501109339363854772'
    test 619 line 121 toUtmUps8.easting: 496148.253731
    test 620 line 121 toUtmUps8.northing: 6388503.365043
    test 621 line 121 toUtmUps8.gamma: 6.970955
    test 622 line 121 toUtmUps8.scale: 1.002620
    test 623 line 121 toUtmUps8.lat: 57.367533
    test 624 line 121 toUtmUps8.lon: 8.260866
    test 625 line 122 toUtmUps8.easting: 7375792.085850
    test 626 line 122 toUtmUps8.northing: 5544624.072155
    test 627 line 122 toUtmUps8.gamma: 44.510851
    test 628 line 122 toUtmUps8.scale: 1.745898
    test 629 line 122 toUtmUps8.lat: 25.958757
    test 630 line 122 toUtmUps8.lon: 65.760477
    test 631 line 123 toUtmUps8.easting: 2826258.041979
    test 632 line 123 toUtmUps8.northing: 5167759.816959
    test 633 line 123 toUtmUps8.gamma: 23.783897
    test 634 line 123 toUtmUps8.scale: 1.099415
    test 635 line 123 toUtmUps8.lat: 41.395848
    test 636 line 123 toUtmUps8.lon: 33.661790
    test 637 line 124 toUtmUps8.easting: 3958563.378851
    test 638 line 124 toUtmUps8.northing: 8499923.231243
    test 639 line 124 toUtmUps8.gamma: 66.570945
    test 640 line 124 toUtmUps8.scale: 1.197296
    test 641 line 124 toUtmUps8.lat: 54.266617
    test 642 line 124 toUtmUps8.lon: 70.602199
    test 643 line 125 toUtmUps8.easting: 4408189.533462
    test 644 line 125 toUtmUps8.northing: 8046312.003642
    test 645 line 125 toUtmUps8.gamma: 62.216959
    test 646 line 125 toUtmUps8.scale: 1.246750
    test 647 line 125 toUtmUps8.lat: 49.840393
    test 648 line 125 toUtmUps8.lon: 68.036728
    test 649 line 126 toUtmUps8.easting: 3629225.627512
    test 650 line 126 toUtmUps8.northing: 6371258.454645
    test 651 line 126 toUtmUps8.gamma: 38.881675
    test 652 line 126 toUtmUps8.scale: 1.165511
    test 653 line 126 toUtmUps8.lat: 46.306035
    test 654 line 126 toUtmUps8.lon: 48.085828
    test 655 line 127 toUtmUps8.easting: 602838.450710
    test 656 line 127 toUtmUps8.northing: 4851370.637205
    test 657 line 127 toUtmUps8.gamma: 5.160395
    test 658 line 127 toUtmUps8.scale: 1.004073
    test 659 line 127 toUtmUps8.lat: 43.570988
    test 660 line 127 toUtmUps8.lon: 7.464494
    test 661 line 128 toUtmUps8.easting: 764616.665051
    test 662 line 128 toUtmUps8.northing: 2164299.337945
    test 663 line 128 toUtmUps8.gamma: 2.429300
    test 664 line 128 toUtmUps8.scale: 1.006835
    test 665 line 128 toUtmUps8.lat: 19.427290
    test 666 line 128 toUtmUps8.lon: 7.268247
    test 667 line 129 toUtmUps8.easting: 5048953.021931
    test 668 line 129 toUtmUps8.northing: 1885974.057398
    test 669 line 129 toUtmUps8.gamma: 11.459804
    test 670 line 129 toUtmUps8.scale: 1.332207
    test 671 line 129 toUtmUps8.lat: 12.713794
    test 672 line 129 toUtmUps8.lon: 42.507018
    test 673 line 130 toUtmUps8.easting: 2293996.601155
    test 674 line 130 toUtmUps8.northing: 2392408.644221
    test 675 line 130 toUtmUps8.gamma: 7.791838
    test 676 line 130 toUtmUps8.scale: 1.065348
    test 677 line 130 toUtmUps8.lat: 20.238782
    test 678 line 130 toUtmUps8.lon: 21.566068
    test 679 line 131 toUtmUps8.easting: 1530603.839418
    test 680 line 131 toUtmUps8.northing: 7287841.459898
    test 681 line 131 toUtmUps8.gamma: 27.502921
    test 682 line 131 toUtmUps8.scale: 1.028416
    test 683 line 131 toUtmUps8.lat: 62.367847
    test 684 line 131 toUtmUps8.lon: 30.438849
    test 685 line 132 toUtmUps8.easting: 2660000.093152
    test 686 line 132 toUtmUps8.northing: 5161982.213248
    test 687 line 132 toUtmUps8.gamma: 22.629836
    test 688 line 132 toUtmUps8.scale: 1.087851
    test 689 line 132 toUtmUps8.lat: 41.891569
    test 690 line 132 toUtmUps8.lon: 31.959547
    test 691 line 133 toUtmUps8.easting: 5037478.329414
    test 692 line 133 toUtmUps8.northing: 8768172.379908
    test 693 line 133 toUtmUps8.gamma: 73.511182
    test 694 line 133 toUtmUps8.scale: 1.325919
    test 695 line 133 toUtmUps8.lat: 47.664248
    test 696 line 133 toUtmUps8.lon: 77.630062
    test 697 line 134 toUtmUps8.easting: 2289650.957799
    test 698 line 134 toUtmUps8.northing: 8784328.593607
    test 699 line 134 toUtmUps8.gamma: 60.786067
    test 700 line 134 toUtmUps8.scale: 1.064346
    test 701 line 134 toUtmUps8.lat: 67.259559
    test 702 line 134 toUtmUps8.lon: 62.715293
    test 703 line 135 toUtmUps8.easting: 647913.889744
    test 704 line 135 toUtmUps8.northing: 6742382.228217
    test 705 line 135 toUtmUps8.gamma: 10.252667
    test 706 line 135 toUtmUps8.scale: 1.004748
    test 707 line 135 toUtmUps8.lat: 60.295381
    test 708 line 135 toUtmUps8.lon: 11.763097
    test 709 line 136 toUtmUps8.easting: 1118372.698566
    test 710 line 136 toUtmUps8.northing: 9040627.942263
    test 711 line 136 toUtmUps8.gamma: 48.936803
    test 712 line 136 toUtmUps8.scale: 1.014920
    test 713 line 136 toUtmUps8.lat: 76.878914
    test 714 line 136 toUtmUps8.lon: 49.685773
    test 715 line 137 toUtmUps8.easting: 440696.510070
    test 716 line 137 toUtmUps8.northing: 5500355.826297
    test 717 line 137 toUtmUps8.gamma: 4.636104
    test 718 line 137 toUtmUps8.scale: 1.001986
    test 719 line 137 toUtmUps8.lat: 49.495349
    test 720 line 137 toUtmUps8.lon: 6.087551
    test 721 line 138 toUtmUps8.easting: 601728.149727
    test 722 line 138 toUtmUps8.northing: 9095352.048149
    test 723 line 138 toUtmUps8.gamma: 33.435771
    test 724 line 138 toUtmUps8.scale: 1.004027
    test 725 line 138 toUtmUps8.lat: 80.297265
    test 726 line 138 toUtmUps8.lon: 33.816372
    test 727 line 139 toUtmUps8.easting: 3481444.777827
    test 728 line 139 toUtmUps8.northing: 291665.708749
    test 729 line 139 toUtmUps8.gamma: 1.314726
    test 730 line 139 toUtmUps8.scale: 1.153534
    test 731 line 139 toUtmUps8.lat: 2.286437
    test 732 line 139 toUtmUps8.lon: 29.855149
    test 733 line 140 toUtmUps8.easting: 3515304.901524
    test 734 line 140 toUtmUps8.northing: 1443981.882918
    test 735 line 140 toUtmUps8.gamma: 6.641638
    test 736 line 140 toUtmUps8.scale: 1.156509
    test 737 line 140 toUtmUps8.lat: 11.264457
    test 738 line 140 toUtmUps8.lon: 30.743907
    test 739 line 141 toUtmUps8.easting: 160012.186959
    test 740 line 141 toUtmUps8.northing: 3922609.253231
    test 741 line 141 toUtmUps8.gamma: 1.022225
    test 742 line 141 toUtmUps8.scale: 0.999916
    test 743 line 141 toUtmUps8.lat: 35.434073
    test 744 line 141 toUtmUps8.lon: 1.762795
    test 745 line 142 toUtmUps8.easting: 4163744.245622
    test 746 line 142 toUtmUps8.northing: 936884.674804
    test 747 line 142 toUtmUps8.gamma: 4.892559
    test 748 line 142 toUtmUps8.scale: 1.222164
    test 749 line 142 toUtmUps8.lat: 6.923695
    test 750 line 142 toUtmUps8.lon: 35.289456
    test 751 line 143 toUtmUps8.easting: 6155200.017926
    test 752 line 143 toUtmUps8.northing: 6926306.628390
    test 753 line 143 toUtmUps8.gamma: 55.103258
    test 754 line 143 toUtmUps8.scale: 1.500556
    test 755 line 143 toUtmUps8.lat: 36.129672
    test 756 line 143 toUtmUps8.lon: 67.533176

    test skipped (18): line 144 toUtmUps8.'4.406528980638 81.965734206053 16263383.2854400911299 3591296.7313406507021 36.040254103487111035 6.58928781751888396522'

    test skipped (19): line 145 toUtmUps8.'8.474589009114 81.129945130597 14220995.5153984992101 5100587.4575033509156 47.314258427760984573 4.69320221531225352172'
    test 757 line 146 toUtmUps8.easting: 3173034.802372
    test 758 line 146 toUtmUps8.northing: 7263421.942957
    test 759 line 146 toUtmUps8.gamma: 45.215808
    test 760 line 146 toUtmUps8.scale: 1.125410
    test 761 line 146 toUtmUps8.lat: 53.907276
    test 762 line 146 toUtmUps8.lon: 51.252904

    test skipped (20): line 147 toUtmUps8.'22.120544817855 85.756781608119 10253274.0922039670098 8867574.2997916978265 79.198250285604314115 2.57237240666878171579'
    test 763 line 148 toUtmUps8.easting: 2415561.483230
    test 764 line 148 toUtmUps8.northing: 8813225.217097
    test 765 line 148 toUtmUps8.gamma: 62.548978
    test 766 line 148 toUtmUps8.scale: 1.071748
    test 767 line 148 toUtmUps8.lat: 66.444100
    test 768 line 148 toUtmUps8.lon: 64.532960
    test 769 line 149 toUtmUps8.easting: 9589179.293294  FAILED, KNOWN, expected 9589179.293295
    test 770 line 149 toUtmUps8.northing: 1777680.784144  FAILED, KNOWN, expected 1777680.784143
    test 771 line 149 toUtmUps8.gamma: 14.838483
    test 772 line 149 toUtmUps8.scale: 2.380716
    test 773 line 149 toUtmUps8.lat: 6.670965
    test 774 line 149 toUtmUps8.lon: 65.660408
    test 775 line 150 toUtmUps8.easting: 727939.438391
    test 776 line 150 toUtmUps8.northing: 3684363.236810
    test 777 line 150 toUtmUps8.gamma: 4.266227
    test 778 line 150 toUtmUps8.scale: 1.006140
    test 779 line 150 toUtmUps8.lat: 33.054057
    test 780 line 150 toUtmUps8.lon: 7.787458
    test 781 line 151 toUtmUps8.easting: 1250765.991085
    test 782 line 151 toUtmUps8.northing: 792869.242719
    test 783 line 151 toUtmUps8.gamma: 1.396497
    test 784 line 151 toUtmUps8.scale: 1.019026
    test 785 line 151 toUtmUps8.lat: 7.035525
    test 786 line 151 toUtmUps8.lon: 11.253707
    test 787 line 152 toUtmUps8.easting: 710421.705887
    test 788 line 152 toUtmUps8.northing: 5019406.075928
    test 789 line 152 toUtmUps8.gamma: 6.393949
    test 790 line 152 toUtmUps8.scale: 1.005812
    test 791 line 152 toUtmUps8.lat: 44.971340
    test 792 line 152 toUtmUps8.lon: 9.009304
    test 793 line 153 toUtmUps8.easting: 4600995.074643
    test 794 line 153 toUtmUps8.northing: 4505712.084593
    test 795 line 153 toUtmUps8.gamma: 27.997458
    test 796 line 153 toUtmUps8.scale: 1.271841
    test 797 line 153 toUtmUps8.lat: 30.821397
    test 798 line 153 toUtmUps8.lon: 45.970577
    test 799 line 154 toUtmUps8.easting: 557642.627782
    test 800 line 154 toUtmUps8.northing: 7006911.251644
    test 801 line 154 toUtmUps8.gamma: 9.769903
    test 802 line 154 toUtmUps8.scale: 1.003411
    test 803 line 154 toUtmUps8.lat: 62.763886
    test 804 line 154 toUtmUps8.lon: 10.960144
    test 805 line 155 toUtmUps8.easting: 4635062.294291
    test 806 line 155 toUtmUps8.northing: 2702556.153311
    test 807 line 155 toUtmUps8.gamma: 15.779547
    test 808 line 155 toUtmUps8.scale: 1.277178
    test 809 line 155 toUtmUps8.lat: 18.888611
    test 810 line 155 toUtmUps8.lon: 41.009871

    test skipped (21): line 156 toUtmUps8.'7.524119461376 81.050715469439 14554962.2559189870471 4716639.9085720199214 44.192751352918149954 4.96001986321419027847'
    test 811 line 157 toUtmUps8.easting: 882126.661736
    test 812 line 157 toUtmUps8.northing: 7947612.369506
    test 813 line 157 toUtmUps8.gamma: 22.429487
    test 814 line 157 toUtmUps8.scale: 1.009132
    test 815 line 157 toUtmUps8.lat: 70.063902
    test 816 line 157 toUtmUps8.lon: 23.705255

    test skipped (22): line 158 toUtmUps8.'3.556525834215 88.363529198819 20262021.6459832969292 8113827.8207957955275 76.936057264555500879 10.34909168211805703369'
    test 817 line 159 toUtmUps8.easting: 6500508.399850
    test 818 line 159 toUtmUps8.northing: 6956476.342368
    test 819 line 159 toUtmUps8.gamma: 56.237116
    test 820 line 159 toUtmUps8.scale: 1.563162
    test 821 line 159 toUtmUps8.lat: 34.551257
    test 822 line 159 toUtmUps8.lon: 69.111091
    test 823 line 160 toUtmUps8.easting: 3884036.641314
    test 824 line 160 toUtmUps8.northing: 6890167.411733
    test 825 line 160 toUtmUps8.gamma: 45.760130
    test 826 line 160 toUtmUps8.scale: 1.190167
    test 827 line 160 toUtmUps8.lat: 47.929051
    test 828 line 160 toUtmUps8.lon: 54.103418
    test 829 line 161 toUtmUps8.easting: 217855.546078
    test 830 line 161 toUtmUps8.northing: 6184108.122568
    test 831 line 161 toUtmUps8.gamma: 2.870993
    test 832 line 161 toUtmUps8.scale: 1.000182
    test 833 line 161 toUtmUps8.lat: 55.753536
    test 834 line 161 toUtmUps8.lon: 3.471798

    test skipped (23): line 162 toUtmUps8.'18.530847071862 86.555312055898 11384139.290401676268 8893889.9495562311576 79.77485364572019046 3.02467156922968230025'
    test 835 line 163 toUtmUps8.easting: 3469855.989805
    test 836 line 163 toUtmUps8.northing: 7723193.799228
    test 837 line 163 toUtmUps8.gamma: 53.114700
    test 838 line 163 toUtmUps8.scale: 1.150540
    test 839 line 163 toUtmUps8.lat: 54.510125
    test 840 line 163 toUtmUps8.lon: 58.556056

    test skipped (24): line 164 toUtmUps8.'42.864161881687 84.866325602975 5926165.994939154109 9385463.7327467371322 82.506981261616342016 1.45975761947329382411'
    test 841 line 165 toUtmUps8.easting: 5798639.662224
    test 842 line 165 toUtmUps8.northing: 5305387.640916
    test 843 line 165 toUtmUps8.gamma: 38.617257
    test 844 line 165 toUtmUps8.scale: 1.442263
    test 845 line 165 toUtmUps8.lat: 30.911943
    test 846 line 165 toUtmUps8.lon: 57.114102
    test 847 line 166 toUtmUps8.easting: 9464.934388
    test 848 line 166 toUtmUps8.northing: 6489121.624944
    test 849 line 166 toUtmUps8.gamma: 0.138696
    test 850 line 166 toUtmUps8.scale: 0.999601
    test 851 line 166 toUtmUps8.lat: 58.542493
    test 852 line 166 toUtmUps8.lon: 0.162593

    test skipped (25): line 167 toUtmUps8.'15.022689088683 85.792615487152 12575834.2756139069875 8356610.8954857643175 75.235223160840771295 3.59944161831319404851'
    test 853 line 168 toUtmUps8.easting: 2719653.543469
    test 854 line 168 toUtmUps8.northing: 9362389.163495
    test 855 line 168 toUtmUps8.gamma: 76.049670
    test 856 line 168 toUtmUps8.scale: 1.091315
    test 857 line 168 toUtmUps8.lat: 65.692275
    test 858 line 168 toUtmUps8.lon: 77.241377
    test 859 line 169 toUtmUps8.easting: 4845341.924698
    test 860 line 169 toUtmUps8.northing: 8710522.326901
    test 861 line 169 toUtmUps8.gamma: 72.320942
    test 862 line 169 toUtmUps8.scale: 1.300382
    test 863 line 169 toUtmUps8.lat: 48.806211
    test 864 line 169 toUtmUps8.lon: 76.486365

    test skipped (26): line 170 toUtmUps8.'56.436024794624 82.61156798689 3935261.5227628794258 9454271.6490618694486 81.162334302626197333 1.19476734082123451158'
    test 865 line 171 toUtmUps8.easting: 7074299.823000
    test 866 line 171 toUtmUps8.northing: 1648736.065055
    test 867 line 171 toUtmUps8.gamma: 12.145925
    test 868 line 171 toUtmUps8.scale: 1.687551
    test 869 line 171 toUtmUps8.lat: 8.766053
    test 870 line 171 toUtmUps8.lon: 54.367539
    test 871 line 172 toUtmUps8.easting: 3689072.579308
    test 872 line 172 toUtmUps8.northing: 2230802.665211
    test 873 line 172 toUtmUps8.gamma: 10.856248
    test 874 line 172 toUtmUps8.scale: 1.172689
    test 875 line 172 toUtmUps8.lat: 17.095495
    test 876 line 172 toUtmUps8.lon: 33.059128
    test 877 line 173 toUtmUps8.easting: 8102565.885587
    test 878 line 173 toUtmUps8.northing: 5167396.617580
    test 879 line 173 toUtmUps8.gamma: 42.324886
    test 880 line 173 toUtmUps8.scale: 1.921927
    test 881 line 173 toUtmUps8.lat: 22.142861
    test 882 line 173 toUtmUps8.lon: 67.200684
    test 883 line 174 toUtmUps8.easting: 8181271.353564
    test 884 line 174 toUtmUps8.northing: 4425436.547185
    test 885 line 174 toUtmUps8.gamma: 35.900845
    test 886 line 174 toUtmUps8.scale: 1.945017
    test 887 line 174 toUtmUps8.lat: 19.222623
    test 888 line 174 toUtmUps8.lon: 65.180785
    test 889 line 175 toUtmUps8.easting: 767067.394003
    test 890 line 175 toUtmUps8.northing: 3701745.857296
    test 891 line 175 toUtmUps8.gamma: 4.519201
    test 892 line 175 toUtmUps8.scale: 1.006863
    test 893 line 175 toUtmUps8.lat: 33.182474
    test 894 line 175 toUtmUps8.lon: 8.216952
    test 895 line 176 toUtmUps8.easting: 6688114.168572
    test 896 line 176 toUtmUps8.northing: 2052857.299639
    test 897 line 176 toUtmUps8.gamma: 14.766191
    test 898 line 176 toUtmUps8.scale: 1.607200
    test 899 line 176 toUtmUps8.lat: 11.417963
    test 900 line 176 toUtmUps8.lon: 52.808691
    test 901 line 177 toUtmUps8.easting: 5608408.773761
    test 902 line 177 toUtmUps8.northing: 3859055.659110
    test 903 line 177 toUtmUps8.gamma: 26.244151
    test 904 line 177 toUtmUps8.scale: 1.413463
    test 905 line 177 toUtmUps8.lat: 23.836688
    test 906 line 177 toUtmUps8.lon: 50.500180
    test 907 line 178 toUtmUps8.easting: 3836942.765275
    test 908 line 178 toUtmUps8.northing: 6415467.634326
    test 909 line 178 toUtmUps8.gamma: 40.575885
    test 910 line 178 toUtmUps8.scale: 1.185615
    test 911 line 178 toUtmUps8.lat: 45.550020
    test 912 line 178 toUtmUps8.lon: 50.148036
    test 913 line 179 toUtmUps8.easting: 1298730.366025
    test 914 line 179 toUtmUps8.northing: 6021453.000792
    test 915 line 179 toUtmUps8.gamma: 15.613320
    test 916 line 179 toUtmUps8.scale: 1.020367
    test 917 line 179 toUtmUps8.lat: 52.746079
    test 918 line 179 toUtmUps8.lon: 19.343926
    test 919 line 180 toUtmUps8.easting: 416934.289208
    test 920 line 180 toUtmUps8.northing: 7295683.451705
    test 921 line 180 toUtmUps8.gamma: 8.238232
    test 922 line 180 toUtmUps8.scale: 1.001729
    test 923 line 180 toUtmUps8.lat: 65.513348
    test 924 line 180 toUtmUps8.lon: 9.039529
    test 925 line 181 toUtmUps8.easting: 4336076.850889
    test 926 line 181 toUtmUps8.northing: 7617975.722779
    test 927 line 181 toUtmUps8.gamma: 56.537088
    test 928 line 181 toUtmUps8.scale: 1.238582
    test 929 line 181 toUtmUps8.lat: 48.709795
    test 930 line 181 toUtmUps8.lon: 63.554005
    test 931 line 182 toUtmUps8.easting: 168047.336980
    test 932 line 182 toUtmUps8.northing: 2185000.046530
    test 933 line 182 toUtmUps8.gamma: 0.542187
    test 934 line 182 toUtmUps8.scale: 0.999949
    test 935 line 182 toUtmUps8.lat: 19.753509
    test 936 line 182 toUtmUps8.lon: 1.603846
    test 937 line 183 toUtmUps8.easting: 8276281.328790
    test 938 line 183 toUtmUps8.northing: 263444.350545
    test 939 line 183 toUtmUps8.gamma: 2.071435
    test 940 line 183 toUtmUps8.scale: 1.980314
    test 941 line 183 toUtmUps8.lat: 1.202816
    test 942 line 183 toUtmUps8.lon: 59.377276
    test 943 line 184 toUtmUps8.easting: 4772573.810710
    test 944 line 184 toUtmUps8.northing: 6765710.336002
    test 945 line 184 toUtmUps8.gamma: 48.857561
    test 946 line 184 toUtmUps8.scale: 1.291911
    test 947 line 184 toUtmUps8.lat: 42.564975
    test 948 line 184 toUtmUps8.lon: 59.356947
    test 949 line 185 toUtmUps8.easting: 5427755.074639
    test 950 line 185 toUtmUps8.northing: 1556055.820924
    test 951 line 185 toUtmUps8.gamma: 9.862178
    test 952 line 185 toUtmUps8.scale: 1.387394
    test 953 line 185 toUtmUps8.lat: 10.090572
    test 954 line 185 toUtmUps8.lon: 44.604132
    test 955 line 186 toUtmUps8.easting: 11588458.616240  FAILED, KNOWN, expected 11588458.616041
    test 956 line 186 toUtmUps8.northing: 5707993.922683  FAILED, KNOWN, expected 5707993.922613
    test 957 line 186 toUtmUps8.gamma: 50.784827
    test 958 line 186 toUtmUps8.scale: 3.149567
    test 959 line 186 toUtmUps8.lat: 14.133028
    test 960 line 186 toUtmUps8.lon: 78.097533
    test 961 line 187 toUtmUps8.easting: 7152433.802688
    test 962 line 187 toUtmUps8.northing: 761390.695844
    test 963 line 187 toUtmUps8.gamma: 5.607350
    test 964 line 187 toUtmUps8.scale: 1.705261
    test 965 line 187 toUtmUps8.lat: 4.031123
    test 966 line 187 toUtmUps8.lon: 54.048782
    test 967 line 188 toUtmUps8.easting: 3105651.390901
    test 968 line 188 toUtmUps8.northing: 9426026.169064
    test 969 line 188 toUtmUps8.gamma: 78.750206
    test 970 line 188 toUtmUps8.scale: 1.119737
    test 971 line 188 toUtmUps8.lat: 62.746603
    test 972 line 188 toUtmUps8.lon: 79.968641
    test 973 line 189 toUtmUps8.easting: 2959009.639022
    test 974 line 189 toUtmUps8.northing: 8339242.269282
    test 975 line 189 toUtmUps8.gamma: 58.460865
    test 976 line 189 toUtmUps8.scale: 1.108554
    test 977 line 189 toUtmUps8.lat: 60.626429
    test 978 line 189 toUtmUps8.lon: 61.851551
    test 979 line 190 toUtmUps8.easting: 8640472.267145
    test 980 line 190 toUtmUps8.northing: 6230320.417931
    test 981 line 190 toUtmUps8.gamma: 52.816810
    test 982 line 190 toUtmUps8.scale: 2.062973
    test 983 line 190 toUtmUps8.lat: 23.600626
    test 984 line 190 toUtmUps8.lon: 72.811634
    test 985 line 191 toUtmUps8.easting: 811352.108932
    test 986 line 191 toUtmUps8.northing: 9816129.813481
    test 987 line 191 toUtmUps8.gamma: 77.299184
    test 988 line 191 toUtmUps8.scale: 1.007651
    test 989 line 191 toUtmUps8.lat: 82.572236
    test 990 line 191 toUtmUps8.lon: 77.402323
    test 991 line 192 toUtmUps8.easting: 6521874.973458
    test 992 line 192 toUtmUps8.northing: 1053612.479744
    test 993 line 192 toUtmUps8.gamma: 7.407328
    test 994 line 192 toUtmUps8.scale: 1.575529
    test 995 line 192 toUtmUps8.lat: 6.030051
    test 996 line 192 toUtmUps8.lon: 50.783505
    test 997 line 193 toUtmUps8.easting: 3477983.997875
    test 998 line 193 toUtmUps8.northing: 5651613.325947
    test 999 line 193 toUtmUps8.gamma: 31.530673
    test 1000 line 193 toUtmUps8.scale: 1.151875
    test 1001 line 193 toUtmUps8.lat: 42.411523
    test 1002 line 193 toUtmUps8.lon: 42.258009
    test 1003 line 194 toUtmUps8.easting: 629892.822243
    test 1004 line 194 toUtmUps8.northing: 3283914.910451
    test 1005 line 194 toUtmUps8.gamma: 3.210482
    test 1006 line 194 toUtmUps8.scale: 1.004499
    test 1007 line 194 toUtmUps8.lat: 29.526120
    test 1008 line 194 toUtmUps8.lon: 6.493069
    test 1009 line 195 toUtmUps8.easting: 3381879.687227
    test 1010 line 195 toUtmUps8.northing: 5103629.325665
    test 1011 line 195 toUtmUps8.gamma: 26.748108
    test 1012 line 195 toUtmUps8.scale: 1.143559
    test 1013 line 195 toUtmUps8.lat: 39.021853
    test 1014 line 195 toUtmUps8.lon: 38.641779
    test 1015 line 196 toUtmUps8.easting: 2815986.534177
    test 1016 line 196 toUtmUps8.northing: 9387029.120718
    test 1017 line 196 toUtmUps8.gamma: 76.967262
    test 1018 line 196 toUtmUps8.scale: 1.098032
    test 1019 line 196 toUtmUps8.lat: 64.971850
    test 1020 line 196 toUtmUps8.lon: 78.151893
    test 1021 line 197 toUtmUps8.easting: 3398195.889603
    test 1022 line 197 toUtmUps8.northing: 9138936.031490
    test 1023 line 197 toUtmUps8.gamma: 74.477499
    test 1024 line 197 toUtmUps8.scale: 1.144009
    test 1025 line 197 toUtmUps8.lat: 59.961819
    test 1026 line 197 toUtmUps8.lon: 76.473422
    test 1027 line 198 toUtmUps8.easting: 2421734.754637
    test 1028 line 198 toUtmUps8.northing: 5002372.094991
    test 1029 line 198 toUtmUps8.gamma: 20.017082
    test 1030 line 198 toUtmUps8.scale: 1.072592
    test 1031 line 198 toUtmUps8.lat: 41.374040
    test 1032 line 198 toUtmUps8.lon: 28.848343
    test 1033 line 199 toUtmUps8.easting: 2360869.895525
    test 1034 line 199 toUtmUps8.northing: 9553298.449536
    test 1035 line 199 toUtmUps8.gamma: 78.848205
    test 1036 line 199 toUtmUps8.scale: 1.068453
    test 1037 line 199 toUtmUps8.lat: 68.946087
    test 1038 line 199 toUtmUps8.lon: 79.574523

    test skipped (27): line 200 toUtmUps8.'79.275096210569 83.551272329394 1196539.9721941076965 9861920.8362302532842 83.437668440198132309 1.01713723718699411107'
    test 1039 line 201 toUtmUps8.easting: 1327758.704795
    test 1040 line 201 toUtmUps8.northing: 2375509.241683
    test 1041 line 201 toUtmUps8.gamma: 4.617572
    test 1042 line 201 toUtmUps8.scale: 1.021465
    test 1043 line 201 toUtmUps8.lat: 21.000252
    test 1044 line 201 toUtmUps8.lon: 12.697444
    test 1045 line 202 toUtmUps8.easting: 2070860.327644
    test 1046 line 202 toUtmUps8.northing: 8604500.719581
    test 1047 line 202 toUtmUps8.gamma: 54.722761
    test 1048 line 202 toUtmUps8.scale: 1.052469
    test 1049 line 202 toUtmUps8.lat: 68.015227
    test 1050 line 202 toUtmUps8.lon: 56.732419
    test 1051 line 203 toUtmUps8.easting: 6564776.654864
    test 1052 line 203 toUtmUps8.northing: 8171207.177379
    test 1053 line 203 toUtmUps8.gamma: 69.237523
    test 1054 line 203 toUtmUps8.scale: 1.573894
    test 1055 line 203 toUtmUps8.lat: 37.423675
    test 1056 line 203 toUtmUps8.lon: 76.947359
    test 1057 line 204 toUtmUps8.easting: 592653.553821
    test 1058 line 204 toUtmUps8.northing: 6125529.810052
    test 1059 line 204 toUtmUps8.gamma: 7.600785
    test 1060 line 204 toUtmUps8.scale: 1.003912
    test 1061 line 204 toUtmUps8.lat: 54.922707
    test 1062 line 204 toUtmUps8.lon: 9.260818
    test 1063 line 205 toUtmUps8.easting: 693459.671821
    test 1064 line 205 toUtmUps8.northing: 6943779.991032
    test 1065 line 205 toUtmUps8.gamma: 11.787587
    test 1066 line 205 toUtmUps8.scale: 1.005496
    test 1067 line 205 toUtmUps8.lat: 61.982810
    test 1068 line 205 toUtmUps8.lon: 13.299659
    test 1069 line 206 toUtmUps8.easting: 1838956.187625
    test 1070 line 206 toUtmUps8.northing: 3511959.612381
    test 1071 line 206 toUtmUps8.gamma: 9.844313
    test 1072 line 206 toUtmUps8.scale: 1.041603
    test 1073 line 206 toUtmUps8.lat: 30.324214
    test 1074 line 206 toUtmUps8.lon: 18.959769
    test 1075 line 207 toUtmUps8.easting: 4460690.884597
    test 1076 line 207 toUtmUps8.northing: 5541873.235403
    test 1077 line 207 toUtmUps8.gamma: 35.768613
    test 1078 line 207 toUtmUps8.scale: 1.254179
    test 1079 line 207 toUtmUps8.lat: 37.629667
    test 1080 line 207 toUtmUps8.lon: 49.649131
    test 1081 line 208 toUtmUps8.easting: 2311168.998941
    test 1082 line 208 toUtmUps8.northing: 9480561.869119
    test 1083 line 208 toUtmUps8.gamma: 76.828257
    test 1084 line 208 toUtmUps8.scale: 1.065556
    test 1085 line 208 toUtmUps8.lat: 69.225574
    test 1086 line 208 toUtmUps8.lon: 77.656135
    test 1087 line 209 toUtmUps8.easting: 4111775.114451
    test 1088 line 209 toUtmUps8.northing: 6509014.348792
    test 1089 line 209 toUtmUps8.gamma: 43.052130
    test 1090 line 209 toUtmUps8.scale: 1.214125
    test 1091 line 209 toUtmUps8.lat: 44.698478
    test 1092 line 209 toUtmUps8.lon: 52.979304
    test 1093 line 210 toUtmUps8.easting: 75358.261962
    test 1094 line 210 toUtmUps8.northing: 7711258.662251
    test 1095 line 210 toUtmUps8.gamma: 1.806297
    test 1096 line 210 toUtmUps8.scale: 0.999669
    test 1097 line 210 toUtmUps8.lat: 69.499594
    test 1098 line 210 toUtmUps8.lon: 1.928336

    test skipped (28): line 211 toUtmUps8.'27.981363604998 86.061112755721 8781885.2291162503299 9184776.4522114918448 81.795538514711932534 2.09490761781464961377'
    test 1099 line 212 toUtmUps8.easting: 954378.415174
    test 1100 line 212 toUtmUps8.northing: 7449110.669807
    test 1101 line 212 toUtmUps8.gamma: 19.380657
    test 1102 line 212 toUtmUps8.scale: 1.010768
    test 1103 line 212 toUtmUps8.lat: 65.699839
    test 1104 line 212 toUtmUps8.lon: 21.104725
    test 1105 line 213 toUtmUps8.easting: 720971.793706
    test 1106 line 213 toUtmUps8.northing: 5265195.121555
    test 1107 line 213 toUtmUps8.gamma: 7.002995
    test 1108 line 213 toUtmUps8.scale: 1.005995
    test 1109 line 213 toUtmUps8.lat: 47.143648
    test 1110 line 213 toUtmUps8.lon: 9.512189
    test 1111 line 214 toUtmUps8.easting: 561561.493937
    test 1112 line 214 toUtmUps8.northing: 989910.236221
    test 1113 line 214 toUtmUps8.gamma: 0.793118
    test 1114 line 214 toUtmUps8.scale: 1.003505
    test 1115 line 214 toUtmUps8.lat: 8.920167
    test 1116 line 214 toUtmUps8.lon: 5.101513
    test 1117 line 215 toUtmUps8.easting: 3446829.634468
    test 1118 line 215 toUtmUps8.northing: 9232868.155664
    test 1119 line 215 toUtmUps8.gamma: 76.279075
    test 1120 line 215 toUtmUps8.scale: 1.148263
    test 1121 line 215 toUtmUps8.lat: 59.778971
    test 1122 line 215 toUtmUps8.lon: 78.080322

    test skipped (29): line 216 toUtmUps8.'55.865310107291 87.384288430943 4048307.5459092527942 9800416.4229977935137 86.843918034217523739 1.20649504624906774925'
    test 1123 line 217 toUtmUps8.easting: 8973188.480293
    test 1124 line 217 toUtmUps8.northing: 7042230.087021
    test 1125 line 217 toUtmUps8.gamma: 60.872456
    test 1126 line 217 toUtmUps8.scale: 2.156098
    test 1127 line 217 toUtmUps8.lat: 24.310973
    test 1128 line 217 toUtmUps8.lon: 76.823777
    test 1129 line 218 toUtmUps8.easting: 126314.191618
    test 1130 line 218 toUtmUps8.northing: 396006.687921
    test 1131 line 218 toUtmUps8.gamma: 0.071065
    test 1132 line 218 toUtmUps8.scale: 0.999798
    test 1133 line 218 toUtmUps8.lat: 3.582041
    test 1134 line 218 toUtmUps8.lon: 1.137286
    test 1135 line 219 toUtmUps8.easting: 5247652.345647
    test 1136 line 219 toUtmUps8.northing: 8670513.359752
    test 1137 line 219 toUtmUps8.gamma: 72.700498
    test 1138 line 219 toUtmUps8.scale: 1.355272
    test 1139 line 219 toUtmUps8.lat: 46.124233
    test 1140 line 219 toUtmUps8.lon: 77.313118

    test skipped (30): line 220 toUtmUps8.'31.17139056295 87.104503768139 8103656.8381187232079 9469794.014736839373 84.490673011906282841 1.91216400164486142107'
    test 1141 line 221 toUtmUps8.easting: 6300112.758236
    test 1142 line 221 toUtmUps8.northing: 93835.917364
    test 1143 line 221 toUtmUps8.gamma: 0.644805
    test 1144 line 221 toUtmUps8.scale: 1.534073
    test 1145 line 221 toUtmUps8.lat: 0.553171
    test 1146 line 221 toUtmUps8.lon: 49.117104
    test 1147 line 222 toUtmUps8.easting: 3894813.593782
    test 1148 line 222 toUtmUps8.northing: 4833832.341027
    test 1149 line 222 toUtmUps8.gamma: 27.453298
    test 1150 line 222 toUtmUps8.scale: 1.192135
    test 1151 line 222 toUtmUps8.lat: 35.361587
    test 1152 line 222 toUtmUps8.lon: 41.860599
    test 1153 line 223 toUtmUps8.easting: 402511.346712
    test 1154 line 223 toUtmUps8.northing: 3520621.561911
    test 1155 line 223 toUtmUps8.gamma: 2.238474
    test 1156 line 223 toUtmUps8.scale: 1.001599
    test 1157 line 223 toUtmUps8.lat: 31.750314
    test 1158 line 223 toUtmUps8.lon: 4.248167
    test 1159 line 224 toUtmUps8.easting: 5357378.503148
    test 1160 line 224 toUtmUps8.northing: 2772997.602234
    test 1161 line 224 toUtmUps8.gamma: 17.823560
    test 1162 line 224 toUtmUps8.scale: 1.376031
    test 1163 line 224 toUtmUps8.lat: 17.924336
    test 1164 line 224 toUtmUps8.lon: 46.096402
    test 1165 line 225 toUtmUps8.easting: 2807553.985866
    test 1166 line 225 toUtmUps8.northing: 8177847.980275
    test 1167 line 225 toUtmUps8.gamma: 54.680045
    test 1168 line 225 toUtmUps8.scale: 1.097531
    test 1169 line 225 toUtmUps8.lat: 60.931488
    test 1170 line 225 toUtmUps8.lon: 58.221214

    test skipped (31): line 226 toUtmUps8.'5.358150979521 87.556213284144 18289045.16650076146 7792942.3396035398889 73.216494415207315628 8.09800850850277481729'

    test skipped (32): line 227 toUtmUps8.'28.616673489124 80.452426461437 8376822.4595378634541 8128174.6238782329989 70.920116640676321501 1.98487312027093768388'
    test 1171 line 228 toUtmUps8.easting: 11898068.352950  FAILED, KNOWN, expected 11898068.353272
    test 1172 line 228 toUtmUps8.northing: 4772439.493355  FAILED, KNOWN, expected 4772439.493697
    test 1173 line 228 toUtmUps8.gamma: 42.613968
    test 1174 line 228 toUtmUps8.scale: 3.314412
    test 1175 line 228 toUtmUps8.lat: 11.709763
    test 1176 line 228 toUtmUps8.lon: 76.760295
    test 1177 line 229 toUtmUps8.easting: 10550946.939052  FAILED, KNOWN, expected 10550946.939050
    test 1178 line 229 toUtmUps8.northing: 3851968.815305  FAILED, KNOWN, expected 3851968.815295
    test 1179 line 229 toUtmUps8.gamma: 33.383025
    test 1180 line 229 toUtmUps8.scale: 2.724754
    test 1181 line 229 toUtmUps8.lat: 12.009498
    test 1182 line 229 toUtmUps8.lon: 71.782351

    test skipped (33): line 230 toUtmUps8.'37.62978386356 85.795687334213 6828299.1236065501034 9394803.2274626281036 83.181386462369626591 1.62435875189611017521'
    test 1183 line 231 toUtmUps8.easting: 11162550.334001  FAILED, KNOWN, expected 11162550.334022
    test 1184 line 231 toUtmUps8.northing: 2640267.279546  FAILED, KNOWN, expected 2640267.279593
    test 1185 line 231 toUtmUps8.gamma: 23.145404
    test 1186 line 231 toUtmUps8.scale: 2.998408
    test 1187 line 231 toUtmUps8.lat: 7.721128
    test 1188 line 231 toUtmUps8.lon: 71.662731
    test 1189 line 232 toUtmUps8.easting: 4411584.447941
    test 1190 line 232 toUtmUps8.northing: 4956173.694407
    test 1191 line 232 toUtmUps8.gamma: 30.713919
    test 1192 line 232 toUtmUps8.scale: 1.248736
    test 1193 line 232 toUtmUps8.lat: 34.295026
    test 1194 line 232 toUtmUps8.lon: 46.442191
    test 1195 line 233 toUtmUps8.easting: 672108.897905
    test 1196 line 233 toUtmUps8.northing: 4751554.657054
    test 1197 line 233 toUtmUps8.gamma: 5.569178
    test 1198 line 233 toUtmUps8.scale: 1.005162
    test 1199 line 233 toUtmUps8.lat: 42.622496
    test 1200 line 233 toUtmUps8.lon: 8.193605
    test 1201 line 234 toUtmUps8.easting: 5022964.290579
    test 1202 line 234 toUtmUps8.northing: 6860418.199502
    test 1203 line 234 toUtmUps8.gamma: 50.862230
    test 1204 line 234 toUtmUps8.scale: 1.324925
    test 1205 line 234 toUtmUps8.lat: 41.667780
    test 1206 line 234 toUtmUps8.lon: 61.518288
    test 1207 line 235 toUtmUps8.easting: 1669655.595207
    test 1208 line 235 toUtmUps8.northing: 4152086.537021
    test 1209 line 235 toUtmUps8.gamma: 11.110237
    test 1210 line 235 toUtmUps8.scale: 1.034138
    test 1211 line 235 toUtmUps8.lat: 36.060369
    test 1212 line 235 toUtmUps8.lon: 18.444112
    test 1213 line 236 toUtmUps8.easting: 6055876.729655
    test 1214 line 236 toUtmUps8.northing: 4896837.552619
    test 1215 line 236 toUtmUps8.gamma: 35.799747
    test 1216 line 236 toUtmUps8.scale: 1.485967
    test 1217 line 236 toUtmUps8.lat: 27.948091
    test 1218 line 236 toUtmUps8.lon: 56.816429
    test 1219 line 237 toUtmUps8.easting: 1209214.164379
    test 1220 line 237 toUtmUps8.northing: 7266409.859178
    test 1221 line 237 toUtmUps8.gamma: 22.319633
    test 1222 line 237 toUtmUps8.scale: 1.017554
    test 1223 line 237 toUtmUps8.lat: 63.386030
    test 1224 line 237 toUtmUps8.lon: 24.662716
    test 1225 line 238 toUtmUps8.easting: 5154564.559584
    test 1226 line 238 toUtmUps8.northing: 698118.349975
    test 1227 line 238 toUtmUps8.gamma: 4.242360
    test 1228 line 238 toUtmUps8.scale: 1.347481
    test 1229 line 238 toUtmUps8.lat: 4.680922
    test 1230 line 238 toUtmUps8.lon: 42.114426
    test 1231 line 239 toUtmUps8.easting: 2695149.806543
    test 1232 line 239 toUtmUps8.northing: 8208197.765605
    test 1233 line 239 toUtmUps8.gamma: 54.178615
    test 1234 line 239 toUtmUps8.scale: 1.089730
    test 1235 line 239 toUtmUps8.lat: 61.826625
    test 1236 line 239 toUtmUps8.lon: 57.525096
    test 1237 line 240 toUtmUps8.easting: 3394792.327820
    test 1238 line 240 toUtmUps8.northing: 3217583.415552
    test 1239 line 240 toUtmUps8.gamma: 15.165863
    test 1240 line 240 toUtmUps8.scale: 1.145285
    test 1241 line 240 toUtmUps8.lat: 25.104353
    test 1242 line 240 toUtmUps8.lon: 32.528660
    test 1243 line 241 toUtmUps8.easting: 1429160.966985
    test 1244 line 241 toUtmUps8.northing: 8212685.362032
    test 1245 line 241 toUtmUps8.gamma: 37.484904
    test 1246 line 241 toUtmUps8.scale: 1.024676
    test 1247 line 241 toUtmUps8.lat: 69.678351
    test 1248 line 241 toUtmUps8.lon: 39.275513

    test skipped (34): line 242 toUtmUps8.'29.671383681805 84.19659549085 8343387.9980651104898 8885196.9545780118644 78.561937382568633298 1.97473261886829061763'
    test 1249 line 243 toUtmUps8.easting: 1990722.928606
    test 1250 line 243 toUtmUps8.northing: 7569202.065162
    test 1251 line 243 toUtmUps8.gamma: 37.075276
    test 1252 line 243 toUtmUps8.scale: 1.048486
    test 1253 line 243 toUtmUps8.lat: 62.300208
    test 1254 line 243 toUtmUps8.lon: 40.474051
    test 1255 line 244 toUtmUps8.easting: 1554980.099559
    test 1256 line 244 toUtmUps8.northing: 1449423.919586
    test 1257 line 244 toUtmUps8.gamma: 3.188328
    test 1258 line 244 toUtmUps8.scale: 1.029664
    test 1259 line 244 toUtmUps8.lat: 12.721776
    test 1260 line 244 toUtmUps8.lon: 14.190003
    test 1261 line 245 toUtmUps8.easting: 785205.450196
    test 1262 line 245 toUtmUps8.northing: 5575158.423096
    test 1263 line 245 toUtmUps8.gamma: 8.388417
    test 1264 line 245 toUtmUps8.scale: 1.007181
    test 1265 line 245 toUtmUps8.lat: 49.811296
    test 1266 line 245 toUtmUps8.lon: 10.925011
    test 1267 line 246 toUtmUps8.easting: 3310405.988313
    test 1268 line 246 toUtmUps8.northing: 5955022.233881
    test 1269 line 246 toUtmUps8.gamma: 33.007587
    test 1270 line 246 toUtmUps8.scale: 1.137141
    test 1271 line 246 toUtmUps8.lat: 45.132680
    test 1272 line 246 toUtmUps8.lon: 42.478624
    test 1273 line 247 toUtmUps8.easting: 4733460.960666
    test 1274 line 247 toUtmUps8.northing: 129034.889816
    test 1275 line 247 toUtmUps8.gamma: 0.737551
    test 1276 line 247 toUtmUps8.scale: 1.290439
    test 1277 line 247 toUtmUps8.lat: 0.904279
    test 1278 line 247 toUtmUps8.lon: 39.078412
    test 1279 line 248 toUtmUps8.easting: 3322708.343909
    test 1280 line 248 toUtmUps8.northing: 3864738.078742
    test 1281 line 248 toUtmUps8.gamma: 18.472566
    test 1282 line 248 toUtmUps8.scale: 1.138838
    test 1283 line 248 toUtmUps8.lat: 30.163605
    test 1284 line 248 toUtmUps8.lon: 33.577996

    test skipped (35): line 249 toUtmUps8.'27.643243707755 81.892859091432 8672864.4172042475623 8333465.9834441061554 73.206272638168122883 2.06544053870286774312'

    test skipped (36): line 250 toUtmUps8.'18.201207657521 82.434617649311 11126818.23119627031 7618712.1749910723126 67.88717347393512063 2.92241673495261070414'

    test skipped (37): line 251 toUtmUps8.'28.804576432117 89.886072420251 8650100.9817967479337 9975084.1689971279206 89.767446308690086924 2.05728879562910108817'
    test 1285 line 252 toUtmUps8.easting: 2212701.180192
    test 1286 line 252 toUtmUps8.northing: 650348.100229
    test 1287 line 252 toUtmUps8.gamma: 1.970441
    test 1288 line 252 toUtmUps8.scale: 1.060830
    test 1289 line 252 toUtmUps8.lat: 5.542998
    test 1290 line 252 toUtmUps8.lon: 19.589578
    test 1291 line 253 toUtmUps8.easting: 6890222.326618
    test 1292 line 253 toUtmUps8.northing: 7506813.499547
    test 1293 line 253 toUtmUps8.gamma: 62.684825
    test 1294 line 253 toUtmUps8.scale: 1.638488
    test 1295 line 253 toUtmUps8.lat: 34.237147
    test 1296 line 253 toUtmUps8.lon: 73.678164
    test 1297 line 254 toUtmUps8.easting: 6692260.067325
    test 1298 line 254 toUtmUps8.northing: 4244174.008110
    test 1299 line 254 toUtmUps8.gamma: 31.812920
    test 1300 line 254 toUtmUps8.scale: 1.604640
    test 1301 line 254 toUtmUps8.lat: 22.704949
    test 1302 line 254 toUtmUps8.lon: 57.877010
    test 1303 line 255 toUtmUps8.easting: 1225564.137190
    test 1304 line 255 toUtmUps8.northing: 4778923.924144
    test 1305 line 255 toUtmUps8.gamma: 10.083419
    test 1306 line 255 toUtmUps8.scale: 1.018134
    test 1307 line 255 toUtmUps8.lat: 42.192424
    test 1308 line 255 toUtmUps8.lon: 14.828196
    test 1309 line 256 toUtmUps8.easting: 12341116.155088  FAILED, KNOWN, expected 12341116.154950
    test 1310 line 256 toUtmUps8.northing: 5081855.520287  FAILED, KNOWN, expected 5081855.521966
    test 1311 line 256 toUtmUps8.gamma: 45.712545  FAILED, KNOWN, expected 45.712546
    test 1312 line 256 toUtmUps8.scale: 3.535170
    test 1313 line 256 toUtmUps8.lat: 11.481151
    test 1314 line 256 toUtmUps8.lon: 78.189236
    test 1315 line 257 toUtmUps8.easting: 6673845.021771
    test 1316 line 257 toUtmUps8.northing: 1177587.190565
    test 1317 line 257 toUtmUps8.gamma: 8.389141
    test 1318 line 257 toUtmUps8.scale: 1.605171
    test 1319 line 257 toUtmUps8.lat: 6.609626
    test 1320 line 257 toUtmUps8.lon: 51.735783
    test 1321 line 258 toUtmUps8.easting: 6966354.690417
    test 1322 line 258 toUtmUps8.northing: 3641802.005093
    test 1323 line 258 toUtmUps8.gamma: 27.409636
    test 1324 line 258 toUtmUps8.scale: 1.661469
    test 1325 line 258 toUtmUps8.lat: 19.059369
    test 1326 line 258 toUtmUps8.lon: 57.526439
    test 1327 max forward error: 1.678809e-03
    test 1328 max reverse error: 3.170463e-09
    test 1329 Utm.scale0: 0.9996
    test 1330 Utm.datum: WGS84
    test 1331 Utm.datum.ellipsoid.KsOrder: 8
    test 1332 Ups.scale0: 0.994  FAILED, KNOWN, expected 0.9996
    test 1333 Ups.datum: WGS84
    test 1334 Ups.datum.ellipsoid.KsOrder: 8
    test 1335 WGS84.KsOrder: 8

    24 of 1335 testUtmUpsTMcoords.py tests (1.8%) FAILED, ALL KNOWN, 37 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 257.714 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testVectorial.py
./pygeodesy/ellipsoidalBase.py:432: DeprecationWarning: Property_RO L{pygeodesy.ellipsoids.Ellipsoid.geodesic} has been DEPRECATED, use property C{geodesicw}.
  _ = self.datum.ellipsoid.geodesic
./pygeodesy/ellipsoidalNvector.py:244: DeprecationWarning: Property_RO L{pygeodesy.ltpTuples.Ned.ned} has been DEPRECATED, use property C{ned4}.
  dn = delta.ned[:3]  # XXX Ned4Tuple.to3Tuple
./pygeodesy/deprecated/classes.py:32: DeprecationWarning: class L{pygeodesy.deprecated.classes.Ned3Tuple} has been DEPRECATED, use class L{Ned4Tuple}, ignoring item C{ltp}.
  deprecated_class(cls)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.EPS from .constants by testVectorial.py line 11
# lazily imported pygeodesy.EPS4 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.F_D from .dms by testVectorial.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.circin6 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum3 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum4_ from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.fstr from .streprs by testVectorial.py line 11
# lazily imported pygeodesy.intersection3d3 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.IntersectionError from .errors by testVectorial.py line 11
# lazily imported pygeodesy.isnear0 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.meeus2 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.radii11 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testVectorial.py line 11
# lazily imported pygeodesy.sphericalNvector by testVectorial.py line 11
# lazily imported pygeodesy.soddy4 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate2d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate3d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.VectorError from .errors by testVectorial.py line 11
# lazily imported pygeodesy.Datums from .datums by testVectorial.py line 533
# lazily imported pygeodesy.ellipsoidalExact by testVectorial.py line 533
# lazily imported pygeodesy.ellipsoidalKarney by testVectorial.py line 533
# lazily imported pygeodesy.ellipsoidalNvector by testVectorial.py line 533
# lazily imported pygeodesy.ellipsoidalVincenty by testVectorial.py line 533
# lazily imported pygeodesy.sphericalTrigonometry by testVectorial.py line 533

    testing testVectorial.py 24.05.10 isLazy=3

    testVectorial(pygeodesy.ellipsoidalNvector, 24.06.15)

    test 1 toLatLon: 44.995674°N, 045.0°E
    test 2 toNvector: (0.50004, 0.50004, 0.70705)
    test 3 isequalTo: False
    test 4 isequalTo: True
    test 5 length: 0.99992449715
    test 6 euclid: 0.99995577
    test 7 length: 1.00
    test 8 euclid: 1.0000
    test 9 meanOf: 44.995674°N, 045.0°E
    test 10 meanOf: LatLon
    test 11 apply: (0.5, 0.5, 0.707)
    test 12 init: (0.5, 0.5, 0.707)
    test 13 i***: (0.5, 0.5, 0.707)
    test 14 abs: 0.99992449715
    test 15 sumOf: (52.70504, 0.61904, 0.70705)
    test 16 sumOf: Nv
    test 17 sumOf: sumOf
    test 18 length: 52.7134151513
    test 19 sizeof: 217  FAILED, KNOWN, expected 128
    test 20 length: 52.2051356286
    test 21 sizeof: 572  FAILED, KNOWN, expected 247
    test 22 copy: True
    test 23 length: 52.2051356286
    test 24 sizeof: 572
# lazily imported pygeodesy.booleans by points.py line 1368
    test 25 isenclosedBy: True
    test 26 isenclosedBy*: True
    test 27 isenclosedBy: True
    test 28 isenclosedBy*: True
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1053
# lazily imported pygeodesy.azimuthal by ellipsoidalBase.py line 435
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1061
# lazily imported pygeodesy.elliptic by gx.py line 426

    test 29 nearestOn: 51.0°N, 001.0°E
    test 30 nearestOn: 50.987°N, 000.298°W
    test 31 nearestOn: 51.0°N, 002.0°E
    test 32 nearestOn: 50.995°N, 002.655°E
    test 33 nearestOn: 51.0°N, 001.9°E
    test 34 nearestOn: True
    test 35 distanceTo: 42.826
    test 36 nearestOn: 51.0°N, 002.0°E
    test 37 nearestOn: True
    test 38 nearestOn: 00.0°N, 000.0°E
    test 39 nearestOn: True
    test 40 nearestOn: 00.0°N, 020.0°E
    test 41 nearestOn: True
    test 42 nearestOn: 02.0°N, 002.0°E
    test 43 nearestOn: 02.0°N, 002.0°E
# lazily imported pygeodesy.ecef by ellipsoidalNvector.py line 521

    test 44 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 45 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))

    test 46 BasseC: 47.3038°N, 002.5721°W
    test 47 BasseH: 47.311067°N, 002.528617°W
    test 48 triangulate: 47.323667°N, 002.568501°W
    test 49 triangulate: True

    test 50 trilaterate: 37.419078°N, 121.960579°W
    test 51 trilaterate: True
    test 52 trilaterate: 08.068912°S, 034.888699°W
    test 53 trilaterate: True
    test 54 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 55 trilaterate: True
    test 56 trilaterate: 42.67456065°N, 002.49539502°E
    test 57 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, wrap=False, z=-8.13526e-05)
# lazily imported pygeodesy.Ned from .ltpTuples by testVectorial.py line 367
# lazily imported pygeodesy.deprecated by ltpTuples.py line 531

    test 58 destinationNed: 48°53′12.01″N, 002°22′29.0″E, +0.20m

    testNvector(pygeodesy.ellipsoidalNvector, 24.06.15)
    test 59 sumOf: Nvector
    test 60 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 61 ecef.lat, .lon: 44.995674, 45.0
    test 62 ecef.height: -0.0
    test 63 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385

    testVectorial(pygeodesy.sphericalNvector, 24.06.11)
    test 64 crossTrackDistanceTo: -305.67
    test 65 crossTrackDistanceTo: -307.55

    test 66 toLatLon: 44.995674°N, 045.0°E
    test 67 toNvector: (0.50004, 0.50004, 0.70705)
    test 68 isequalTo: False
    test 69 isequalTo: True
    test 70 length: 0.99992449715
    test 71 euclid: 0.99995577
    test 72 length: 1.00
    test 73 euclid: 1.0000
    test 74 meanOf: 44.995674°N, 045.0°E
    test 75 meanOf: LatLon
    test 76 apply: (0.5, 0.5, 0.707)
    test 77 init: (0.5, 0.5, 0.707)
    test 78 i***: (0.5, 0.5, 0.707)
    test 79 abs: 0.99992449715
    test 80 sumOf: (52.70504, 0.61904, 0.70705)
    test 81 sumOf: Nv
    test 82 sumOf: sumOf
    test 83 length: 52.7134151513
    test 84 sizeof: 217  FAILED, KNOWN, expected 128
    test 85 length: 52.2051356286
    test 86 sizeof: 572  FAILED, KNOWN, expected 247
    test 87 copy: True
    test 88 length: 52.2051356286
    test 89 sizeof: 572

    test 90 toCartesian: [3185744.919, 3185744.919, 4504643.315]
    test 91 toLatLon: 44.995674°N, 045.0°E
    test 92 toNvector: (0.50004, 0.50004, 0.70705, -0.00)

    test 93 intersection: 02.499372°N, 002.5°E

    test 94 intersection1: 02.499372°N, 002.5°E
    test 95 intersection2: 02.499372°S, 177.5°W

    test 96 isenclosedBy: True
    test 97 isenclosedBy*: True
    test 98 isenclosedBy: True
    test 99 isenclosedBy*: True

    test 100 iswithin: False
    test 101 iswithin: True

    test 102 nearestOn: 51.0°N, 001.0°E
    test 103 nearestOn: 50.987°N, 000.298°W
    test 104 nearestOn: 51.0°N, 002.0°E
    test 105 nearestOn: 50.995°N, 002.655°E
    test 106 nearestOn: 51.0°N, 001.9°E
    test 107 nearestOn: True
    test 108 distanceTo: 42.712
    test 109 nearestOn: 51.0°N, 002.0°E
    test 110 nearestOn: True
    test 111 nearestOn: 00.0°N, 000.0°E
    test 112 nearestOn: True
    test 113 nearestOn: 00.0°N, 020.0°E
    test 114 nearestOn: True
    test 115 nearestOn: 02.0°N, 002.0°E
    test 116 nearestOn: 02.0°N, 002.0°E

    test 117 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 118 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))

    test 119 BasseC: 47.3038°N, 002.5721°W
    test 120 BasseH: 47.311067°N, 002.528617°W
    test 121 triangulate: 47.323667°N, 002.568501°W
    test 122 triangulate: True

    test 123 trilaterate: 37.419078°N, 121.960579°W
    test 124 trilaterate: True
    test 125 trilaterate: 08.068912°S, 034.888699°W
    test 126 trilaterate: True
    test 127 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 128 trilaterate: True
    test 129 trilaterate: 42.67456065°N, 002.49539502°E
    test 130 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, wrap=False, z=-8.13526e-05)

    testNvector(pygeodesy.sphericalNvector, 24.06.11)
    test 131 sumOf: Nvector
    test 132 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 133 ecef.lat, .lon: 44.995674, 45.0
    test 134 ecef.height: -0.0
    test 135 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385

    testNvectorBase(pygeodesy.nvectorBase, 24.06.12)
    test 136 sumOf: Vector4Tuple
    test 137 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 138 ecef.lat, .lon: 44.995674, 45.0
    test 139 ecef.height: -0.0
    test 140 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385

    testNvectorBase(pygeodesy.nvectorBase, 24.06.12)
    test 141 sumOf: Vector4Tuple
    test 142 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 143 ecef.lat, .lon: 44.995674, 45.0
    test 144 ecef.height: -0.0
    test 145 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385

    testCartesian(pygeodesy.sphericalNvector, 24.06.11)

    14 tests skipped (14): No module named 'numpy': required by vector2d._numpy

    testCartesian(pygeodesy.sphericalTrigonometry, 24.06.21)

    14 tests skipped (28): No module named 'numpy': required by vector2d._numpy

    testCartesian(pygeodesy.ellipsoidalNvector, 24.06.15)

    14 tests skipped (42): No module named 'numpy': required by vector2d._numpy

    testCartesian(pygeodesy.ellipsoidalVincenty, 24.06.11)

    14 tests skipped (56): No module named 'numpy': required by vector2d._numpy

    testCartesian(pygeodesy.ellipsoidalKarney, 24.06.11)

    14 tests skipped (70): No module named 'numpy': required by vector2d._numpy

    testCartesian(pygeodesy.ellipsoidalExact, 24.06.11)

    14 tests skipped (84): No module named 'numpy': required by vector2d._numpy

    testCartesianBase(pygeodesy.cartesianBase, 24.06.11)

    14 tests skipped (98): No module named 'numpy': required by vector2d._numpy

    testNvectorBase(pygeodesy.nvectorBase, 24.06.12)

    14 tests skipped (112): No module named 'numpy': required by vector2d._numpy

    testVector3d(pygeodesy.vector2d, 24.05.17)

    14 tests skipped (126): No module named 'numpy': required by vector2d._numpy

    testTrilaterate2d2(pygeodesy.vector2d, 24.05.17)
    test 146 trilaterate2d2: (2.0, 3.0)
    test 147 trilaterate2d2: delta (6.39335377017e-06), radius1 (1.0), distance (1.00000639335) and trilaterate2d2(x=1.999994, y=3.000006): exceeds eps (2.22045e-16)
    test 148 trilaterate2d2: (-500.0, 250.0)
    test 149 meeus2: 2.236, 3.0, 2.0, 0.0
    test 150 meeus2: (3.0, 2.0, 0)
    test 151 circum3: 2.2361
    test 152 circum3: (3.0, 2.0, 0)
    test 153 circum3: None

    7 tests skipped (133): No module named 'numpy': required by vector2d._numpy

    testTrilaterate3d2(pygeodesy.vector2d, 24.05.17)

    18 tests skipped (151): No module named 'numpy': required by vector2d._numpy

    testIntersection3d3(pygeodesy.vector3d, 24.06.18)
    test 154 (30, 17): (Vector3d(30.30584, 16.75258, 0.0), 0, 0)
    test 155 (-1,  3): (Vector3d(-1.0429, 2.92225, 0.0), -1, -2)
    test 156 (65, 32): (Vector3d(64.86667, 32.0, 0.0), 1, -2)
    test 157 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 158 (49, 25): (Vector3d(49.0, 25.0, 0.0), 0, 0)

    test 159 at 0: (0.0, 50.0, 0.0)
    test 160 at 3: (2.6168, 49.93148, 0.0)
    test 161 at 6: (5.22642, 49.72609, 0.0)
    test 162 at 9: (7.82172, 49.38442, 0.0)
    test 163 at 12: (10.39558, 48.90738, 0.0)
    test 164 at 15: (12.94095, 48.29629, 0.0)
    test 165 at 18: (15.45085, 47.55283, 0.0)
    test 166 at 21: (17.9184, 46.67902, 0.0)
    test 167 at 24: (20.33683, 45.67727, 0.0)
    test 168 at 27: (22.69952, 44.55033, 0.0)
    test 169 at 30: (25.0, 43.30127, 0.0)
    test 170 at 33: (27.23195, 41.93353, 0.0)
    test 171 at 36: (29.38926, 40.45085, 0.0)
    test 172 at 39: (31.46602, 38.8573, 0.0)
    test 173 at 42: (33.45653, 37.15724, 0.0)
    test 174 at 45: (35.35534, 35.35534, 0.0)
    test 175 at 48: (37.15724, 33.45653, 0.0)
    test 176 at 51: (38.8573, 31.46602, 0.0)
    test 177 at 54: (40.45085, 29.38926, 0.0)
    test 178 at 57: (41.93353, 27.23195, 0.0)
    test 179 at 60: (43.30127, 25.0, 0.0)
    test 180 at 63: (44.55033, 22.69952, 0.0)
    test 181 at 66: (45.67727, 20.33683, 0.0)
    test 182 at 69: (46.67902, 17.9184, 0.0)
    test 183 at 72: (47.55283, 15.45085, 0.0)
    test 184 at 75: (48.29629, 12.94095, 0.0)
    test 185 at 78: (48.90738, 10.39558, 0.0)
    test 186 at 81: (49.38442, 7.82172, 0.0)
    test 187 at 84: (49.72609, 5.22642, 0.0)
    test 188 at 87: (49.93148, 2.6168, 0.0)
    test 189 at 90: (50.0, 0.0, 0.0)
    test 190 at 93: (49.93148, -2.6168, 0.0)
    test 191 at 96: (49.72609, -5.22642, 0.0)
    test 192 at 99: (49.38442, -7.82172, 0.0)
    test 193 at 102: (48.90738, -10.39558, 0.0)
    test 194 at 105: (48.29629, -12.94095, 0.0)
    test 195 at 108: (47.55283, -15.45085, 0.0)
    test 196 at 111: (46.67902, -17.9184, 0.0)
    test 197 at 114: (45.67727, -20.33683, 0.0)
    test 198 at 117: (44.55033, -22.69952, 0.0)
    test 199 at 120: (43.30127, -25.0, 0.0)
    test 200 at 123: (41.93353, -27.23195, 0.0)
    test 201 at 126: (40.45085, -29.38926, 0.0)
    test 202 at 129: (38.8573, -31.46602, 0.0)
    test 203 at 132: (37.15724, -33.45653, 0.0)
    test 204 at 135: (35.35534, -35.35534, 0.0)
    test 205 at 138: (33.45653, -37.15724, 0.0)
    test 206 at 141: (31.46602, -38.8573, 0.0)
    test 207 at 144: (29.38926, -40.45085, 0.0)
    test 208 at 147: (27.23195, -41.93353, 0.0)
    test 209 at 150: (25.0, -43.30127, 0.0)
    test 210 at 153: (22.69952, -44.55033, 0.0)
    test 211 at 156: (20.33683, -45.67727, 0.0)
    test 212 at 159: (17.9184, -46.67902, 0.0)
    test 213 at 162: (15.45085, -47.55283, 0.0)
    test 214 at 165: (12.94095, -48.29629, 0.0)
    test 215 at 168: (10.39558, -48.90738, 0.0)
    test 216 at 171: (7.82172, -49.38442, 0.0)
    test 217 at 174: (5.22642, -49.72609, 0.0)
    test 218 at 177: (2.6168, -49.93148, 0.0)
    test 219 at 180: (0.0, -50.0, 0.0)
    test 220 at 183: (-2.6168, -49.93148, 0.0)
    test 221 at 186: (-5.22642, -49.72609, 0.0)
    test 222 at 189: (-7.82172, -49.38442, 0.0)
    test 223 at 192: (-10.39558, -48.90738, 0.0)
    test 224 at 195: (-12.94095, -48.29629, 0.0)
    test 225 at 198: (-15.45085, -47.55283, 0.0)
    test 226 at 201: (-17.9184, -46.67902, 0.0)
    test 227 at 204: (-20.33683, -45.67727, 0.0)
    test 228 at 207: (-22.69952, -44.55033, 0.0)
    test 229 at 210: (-25.0, -43.30127, 0.0)
    test 230 at 213: (-27.23195, -41.93353, 0.0)
    test 231 at 216: (-29.38926, -40.45085, 0.0)
    test 232 at 219: (-31.46602, -38.8573, 0.0)
    test 233 at 222: (-33.45653, -37.15724, 0.0)
    test 234 at 225: (-35.35534, -35.35534, 0.0)
    test 235 at 228: (-37.15724, -33.45653, 0.0)
    test 236 at 231: (-38.8573, -31.46602, 0.0)
    test 237 at 234: (-40.45085, -29.38926, 0.0)
    test 238 at 237: (-41.93353, -27.23195, 0.0)
    test 239 at 240: (-43.30127, -25.0, 0.0)
    test 240 at 243: (-44.55033, -22.69952, 0.0)
    test 241 at 246: (-45.67727, -20.33683, 0.0)
    test 242 at 249: (-46.67902, -17.9184, 0.0)
    test 243 at 252: (-47.55283, -15.45085, 0.0)
    test 244 at 255: (-48.29629, -12.94095, 0.0)
    test 245 at 258: (-48.90738, -10.39558, 0.0)
    test 246 at 261: (-49.38442, -7.82172, 0.0)
    test 247 at 264: (-49.72609, -5.22642, 0.0)
    test 248 at 267: (-49.93148, -2.6168, 0.0)
    test 249 at 270: (-50.0, 0.0, 0.0)
    test 250 at 273: (-49.93148, 2.6168, 0.0)
    test 251 at 276: (-49.72609, 5.22642, 0.0)
    test 252 at 279: (-49.38442, 7.82172, 0.0)
    test 253 at 282: (-48.90738, 10.39558, 0.0)
    test 254 at 285: (-48.29629, 12.94095, 0.0)
    test 255 at 288: (-47.55283, 15.45085, 0.0)
    test 256 at 291: (-46.67902, 17.9184, 0.0)
    test 257 at 294: (-45.67727, 20.33683, 0.0)
    test 258 at 297: (-44.55033, 22.69952, 0.0)
    test 259 at 300: (-43.30127, 25.0, 0.0)
    test 260 at 303: (-41.93353, 27.23195, 0.0)
    test 261 at 306: (-40.45085, 29.38926, 0.0)
    test 262 at 309: (-38.8573, 31.46602, 0.0)
    test 263 at 312: (-37.15724, 33.45653, 0.0)
    test 264 at 315: (-35.35534, 35.35534, 0.0)
    test 265 at 318: (-33.45653, 37.15724, 0.0)
    test 266 at 321: (-31.46602, 38.8573, 0.0)
    test 267 at 324: (-29.38926, 40.45085, 0.0)
    test 268 at 327: (-27.23195, 41.93353, 0.0)
    test 269 at 330: (-25.0, 43.30127, 0.0)
    test 270 at 333: (-22.69952, 44.55033, 0.0)
    test 271 at 336: (-20.33683, 45.67727, 0.0)
    test 272 at 339: (-17.9184, 46.67902, 0.0)
    test 273 at 342: (-15.45085, 47.55283, 0.0)
    test 274 at 345: (-12.94095, 48.29629, 0.0)
    test 275 at 348: (-10.39558, 48.90738, 0.0)
    test 276 at 351: (-7.82172, 49.38442, 0.0)
    test 277 at 354: (-5.22642, 49.72609, 0.0)
    test 278 at 357: (-2.6168, 49.93148, 0.0)
    test 279 at 360: (0.0, 50.0, 0.0)
    test 280 max error: 2.3317285650e-13

    16 of 280 testVectorial.py tests (5.7%) FAILED, incl. 6 KNOWN plus 10 DeprecationWarnings, 151 skipped (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 219.410 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testWebMercator.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.F_D from .dms by testWebMercator.py line 12
# lazily imported pygeodesy.F_DMS from .dms by testWebMercator.py line 12
# lazily imported pygeodesy.R_M from .constants by testWebMercator.py line 12
# lazily imported pygeodesy.R_MA from .constants by testWebMercator.py line 12
# lazily imported pygeodesy.Datums from .datums by testWebMercator.py line 12
# lazily imported pygeodesy.fstr from .streprs by testWebMercator.py line 12
# lazily imported pygeodesy.toWm from .webmercator by testWebMercator.py line 12
# lazily imported pygeodesy.Wm from .webmercator by testWebMercator.py line 12
# lazily imported pygeodesy.ellipsoidalVincenty by testWebMercator.py line 153
# lazily imported pygeodesy.sphericalTrigonometry by testWebMercator.py line 153

    testing testWebMercator.py 23.06.12 (module pygeodesy.webmercator 24.06.11) isLazy=3
    test 1 toWm1: -626172.13571216 6887893.4928338
    test 2 Wm1.y: 6887893.49283380
    test 3 copy(Wm): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 4 Wm.copy(): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 5 Wm2: 448251.795 5411932.678
    test 6 Wm2: 448252 5411933
    test 7 Wm2: 448251.8 5411932.7
    test 8 copy(Wm): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 9 Wm.copy(): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 10 Wm2.to2ll: 43.65321741, 4.02671439
    test 11 Wm2.toLatLon: (43.653217, 4.026714, Datum(name='_Wm', ellipsoid=Ellipsoids._Wm, transform=Transforms.Identity))
    test 12 Wm2.toLatLon: 43.653217°N, 004.026714°E
    test 13 Wm2.toLatLon: 43°39′11.58″N, 004°01′36.17″E
    test 14 toWm1: 448251.795 5411932.678
    test 15 toWm2: 448252 5411933
    test 16 toWm3: [x:448252, y:5411933, radius:6378137]
    test 17 copy: 448251.795 5411932.678
    test 18 parse: 448251.795 5411932.678
    test 19 parse: 448251.795 5411932.678
    test 20 parse: [x:448251.795, y:5411932.678, radius:6378137.0]
    test 21 toWm4: 11549466 1505215
    test 22 toWm4: 11549465.988273 1505214.929251
    test 23 toWm4E: 11562388 1496994
    test 24 toWm4E: 11562388.154378 1496993.698095
    test 25 toWm: -11169056 2800000
    test 26 toWm: -11169055.576258 2800000.003136
    test 27 toWm5E: -11169056 2782367
    test 28 toWm5E: -11169055.576258 2782367.05923
    test 29 toWm5: -11156573 2796871
    test 30 toWm5: -11156573.000041 2796870.713179
    test 31 Wm6.toLatLon: 24.46358°N, 100.333333°W
    test 32 Wm6.toLatLon: 24°27′48.89″N, 100°20′00.0″W
    test 33 Wm6.toLatLonE: 24.299812°N, 100.333333°W
    test 34 Wm6.toLatLonE: 24°17′59.32″N, 100°20′00.0″W
    test 35 Wm7.toLatLon: 24.381787°N, 100.333333°W
    test 36 Wm7.toLatLon: 24°22′54.43″N, 100°20′00.0″W
    test 37 Wm7.toLatLonE: 24.218566°N, 100.333333°W
    test 38 Wm7.toLatLonE: 24°13′06.84″N, 100°20′00.0″W
    test 39 Wm8.toWm: -33878.893, 6693890.382, 6378137.0
    test 40 Wm8.toWm: [x:-33878.893, y:6693890.382]
    test 41 Wm8.toWm: -33878.893 6693890.382 6371008.771
    test 42 Wm8.toWm.x: -33878.893
    test 43 Wm8.toWm.y: 6693890.382
    test 44 Wm8.toWm.latlon: 51.408596, -0.304339
    test 45 Wm8.toWm.philam: 0.897249, -0.005312
    test 46 Wm8.toLatLon: 51.408596053784°N, 000.304339270785°W
    test 47 Wm8.toLatLon: 51°24′30.945794″N, 000°18′15.621375″W
    test 48 Wm9.toLatLon: TypeError

    test 49 toWm(10.0000, 0, earth=R_MA).y: 1118889.97
    test 50 toWm(20.0000, 0, earth=R_MA).y: 2273030.93
    test 51 toWm(30.0000, 0, earth=R_MA).y: 3503549.84
    test 52 toWm(40.0000, 0, earth=R_MA).y: 4865942.28
    test 53 toWm(50.0000, 0, earth=R_MA).y: 6446275.84
    test 54 toWm(60.0000, 0, earth=R_MA).y: 8399737.89

    test 55 toWm(10.0003, 0, earth=R_MA).y: 1118921.37
    test 56 toWm(20.0003, 0, earth=R_MA).y: 2273063.83
    test 57 toWm(30.0003, 0, earth=R_MA).y: 3503585.55
    test 58 toWm(40.0003, 0, earth=R_MA).y: 4865982.65
    test 59 toWm(50.0003, 0, earth=R_MA).y: 6446323.95
    test 60 toWm(60.0003, 0, earth=R_MA).y: 8399799.73

    test 61 toWm(10.0000, 0, earth=WGS84).y: 1111475.10
    test 62 toWm(20.0000, 0, earth=WGS84).y: 2258423.65
    test 63 toWm(30.0000, 0, earth=WGS84).y: 3482189.09
    test 64 toWm(40.0000, 0, earth=WGS84).y: 4838471.40
    test 65 toWm(50.0000, 0, earth=WGS84).y: 6413524.59
    test 66 toWm(60.0000, 0, earth=WGS84).y: 8362698.55

    test 67 toWm(10.0003, 0, earth=WGS84).y: 1111506.30
    test 68 toWm(20.0003, 0, earth=WGS84).y: 2258456.36
    test 69 toWm(30.0003, 0, earth=WGS84).y: 3482224.61
    test 70 toWm(40.0003, 0, earth=WGS84).y: 4838511.61
    test 71 toWm(50.0003, 0, earth=WGS84).y: 6413572.57
    test 72 toWm(60.0003, 0, earth=WGS84).y: 8362760.29

    all 72 testWebMercator.py tests passed (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 1.454 ms

running /opt/local/opt/p....n3.12 -W default ~/PyGeodesy/test/testWgrs.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 34
# lazily imported pygeodesy.clips from .basics by bases.py line 34
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 34
# lazily imported pygeodesy.isint from .basics by bases.py line 34
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 34
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 34
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 34
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 34
# lazily imported pygeodesy.map2 from .basics by bases.py line 34
# lazily imported pygeodesy.NN from .interns by bases.py line 34
# lazily imported pygeodesy.normDMS from .dms by bases.py line 34
# lazily imported pygeodesy.pairs from .streprs by bases.py line 34
# lazily imported pygeodesy.printf from .internals by bases.py line 34
# lazily imported pygeodesy.property_RO from .props by bases.py line 34
# lazily imported pygeodesy.degDMS from .dms by testWgrs.py line 11
# lazily imported pygeodesy.fstr from .streprs by testWgrs.py line 11
# lazily imported pygeodesy.Georef from .wgrs by testWgrs.py line 11
# lazily imported pygeodesy.S_DEG from .dms by testWgrs.py line 11
# lazily imported pygeodesy.S_MIN from .dms by testWgrs.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testWgrs.py line 96

    testing testWgrs.py 23.03.27 (module pygeodesy.wgrs 24.06.15) isLazy=3
    test 1 Georef: 'NKLN2444638946'
    test 2 Georef: Georef('NKLN2444638946')
    test 3 Georef: NKLN2444638946
    test 4 Georef.latlon: 57.64911, 10.40744
    test 5 Georef.toLatLon: LatLon(57°38′56.8″N, 010°24′26.78″E)
    test 6 codec3: NKLN2444638946
    test 7 decode3: 57.64911, 10.40744, 6.0
    test 8 encode: NKLN2444638946
    test 9 Georef: 'NKLN2444638946H0'
    test 10 Georef: Georef('NKLN2444638946H0')
    test 11 Georef: NKLN2444638946H0
    test 12 Georef.latlon: 57.64911, 10.40744
    test 13 Georef.precision: 6
    test 14 Georef.radius: None
    test 15 Georef: 'GJPJ3424917166'
    test 16 Georef: Georef('GJPJ3424917166')
    test 17 Georef: GJPJ3424917166
    test 18 Georef.latlon: 38.286108, -76.42917
    test 19 Georef.toLatLon: LatLon(38°17′09.99″N, 076°25′45.01″W)
    test 20 codec3: GJPJ3424917166
    test 21 decode3: 38.286108, -76.429175, 6.0
    test 22 encode: GJPJ3424917166
    test 23 Georef: 'GJPJ3424917166H0'
    test 24 Georef: Georef('GJPJ3424917166H0')
    test 25 Georef: GJPJ3424917166H0
    test 26 Georef.latlon: 38.286108, -76.42917
    test 27 Georef.precision: 6
    test 28 Georef.radius: None
    test 29 Georef.3Tuple: 38.286108, -76.42917, 0.0
    test 30 codec3: MKPG1204
    test 31 decode3: 51.075, -1.7917, 3.0
    test 32 encode: MKPG1204
    test 33 codec3: WJKG1503
    test 34 decode3: 36.0583, 129.2583, 3.0
    test 35 encode: WJKG1503
    test 36 codec5: GJPJ4103R5
    test 37 decode5: 38.0583, -76.3083, 3.0, None, 9260.0
    test 38 encode: GJPJ4103R5
    test 39 codec5: GJPJ4103H17
    test 40 decode5: 38.0583, -76.3083, 3.0, 5181.6, None
    test 41 encode: GJPJ4103H17
    test 42 codec5: GJPJ4103R5H17
    test 43 decode5: 38.0583, -76.3083, 3.0, 5181.6, 9260.0
    test 44 encode: GJPJ4103R5H17
    test 45 precision: -1  FAILED, KNOWN, expected 0
    test 46 resolution: 15°
    test 47 precision: 0
    test 48 resolution: 15°
    test 49 precision: 1
    test 50 resolution: 1°
    test 51 precision: 2
    test 52 resolution: 0.1′
    test 53 precision: 3
    test 54 resolution: 0.01′
    test 55 precision: 4
    test 56 resolution: 0.001′
    test 57 precision: 5
    test 58 resolution: 0.0001′
    test 59 precision: 6
    test 60 resolution: 0.00001′
    test 61 precision: 7
    test 62 resolution: 0.000001′
    test 63 precision: 8
    test 64 resolution: 0.0000001′
    test 65 precision: 9
    test 66 resolution: 0.00000001′
    test 67 precision: 10
    test 68 resolution: 0.000000001′
    test 69 precision: 11
    test 70 resolution: 0.0000000001′
    test 71 precision: 12  FAILED, KNOWN, expected 11
    test 72 resolution: 0.0000000001′

    2 of 72 testWgrs.py tests (2.8%) FAILED, ALL KNOWN (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W  default) 1.125 ms

test/run.py /opt/local/opt/p....n3.12 -W default: all 41294 tests OK (PyGeodesy 24.6.24 Python 3.12.3 64bit arm64 macOS 14.5 isLazy 3 -W default) 2:30.659 (274.089 tps)
